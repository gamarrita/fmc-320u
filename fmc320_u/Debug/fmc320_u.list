
fmc320_u.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000156bc  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  080158f4  080158f4  000258f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015c28  08015c28  00025c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015c30  08015c30  00025c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015c34  08015c34  00025c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001b8  20000000  08015c38  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d01  200001b8  08015df0  000301b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000607  20001eb9  08015df0  00031eb9  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00042232  00000000  00000000  000301ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009075  00000000  00000000  00072420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002960  00000000  00000000  0007b498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002478  00000000  00000000  0007ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040659  00000000  00000000  00080270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ef5e  00000000  00000000  000c08c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178592  00000000  00000000  000ff827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00277db9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a7ec  00000000  00000000  00277e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001b8 	.word	0x200001b8
 8000254:	00000000 	.word	0x00000000
 8000258:	080158dc 	.word	0x080158dc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001bc 	.word	0x200001bc
 8000274:	080158dc 	.word	0x080158dc

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f89f 	bl	800040c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	200016d8 	.word	0x200016d8
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a31      	ldr	r2, [pc, #196]	; (80003bc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c22      	ldr	r4, [pc, #136]	; (80003c8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c1b      	ldr	r4, [pc, #108]	; (80003c8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b949      	cbnz	r1, 80003a6 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000392:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000394:	f00e fc20 	bl	800ebd8 <tx_low_power_enter>
    POP     {r0-r3}
 8000398:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800039a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 800039c:	f00e fc44 	bl	800ec28 <tx_low_power_exit>
    POP     {r0-r3}
 80003a0:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a4:	e7f1      	b.n	800038a <__tx_ts_wait>

080003a6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003aa:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003ae:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b4:	e7d0      	b.n	8000358 <__tx_ts_restore>
 80003b6:	bf00      	nop

080003b8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b8:	4770      	bx	lr
 80003ba:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003bc:	20001774 	.word	0x20001774
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c0:	200016dc 	.word	0x200016dc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c4:	200016e0 	.word	0x200016e0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c8:	20001ce0 	.word	0x20001ce0

080003cc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003cc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ce:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003da:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003dc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ea:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003ec:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ee:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fe:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000400:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000406:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000408:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr

0800040c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	4922      	ldr	r1, [pc, #136]	; (8000498 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000410:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000414:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000418:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041a:	b13a      	cbz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800041c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000420:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000422:	b91a      	cbnz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000426:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042a:	6018      	str	r0, [r3, #0]

0800042c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800042c:	491d      	ldr	r1, [pc, #116]	; (80004a4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000430:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000432:	b122      	cbz	r2, 800043e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000436:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800043c:	e008      	b.n	8000450 <__tx_timer_done>

0800043e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000444:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000446:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000448:	d101      	bne.n	800044e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800044c:	6818      	ldr	r0, [r3, #0]

0800044e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044e:	6008      	str	r0, [r1, #0]

08000450 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000452:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000454:	b912      	cbnz	r2, 800045c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000456:	4914      	ldr	r1, [pc, #80]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000458:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045a:	b1c8      	cbz	r0, 8000490 <__tx_timer_nothing_expired>

0800045c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800045c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045e:	4912      	ldr	r1, [pc, #72]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000462:	b108      	cbz	r0, 8000468 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000464:	f00d fc7a 	bl	800dd5c <_tx_timer_expiration_process>

08000468 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800046c:	b172      	cbz	r2, 800048c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046e:	f00d fb59 	bl	800db24 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000472:	4810      	ldr	r0, [pc, #64]	; (80004b4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000474:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000476:	b949      	cbnz	r1, 800048c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000486:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000488:	d000      	beq.n	800048c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048a:	6002      	str	r2, [r0, #0]

0800048c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800048c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000490 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000490:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000494:	4770      	bx	lr
 8000496:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000498:	20001780 	.word	0x20001780
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049c:	20001ce0 	.word	0x20001ce0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a0:	20001784 	.word	0x20001784
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a4:	20001810 	.word	0x20001810
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a8:	20001814 	.word	0x20001814
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004ac:	2000180c 	.word	0x2000180c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b0:	20001808 	.word	0x20001808
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b4:	20001774 	.word	0x20001774
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b8:	200016dc 	.word	0x200016dc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004bc:	200016e0 	.word	0x200016e0
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c0:	e000ed04 	.word	0xe000ed04

080004c4 <strlen>:
 80004c4:	4603      	mov	r3, r0
 80004c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d1fb      	bne.n	80004c6 <strlen+0x2>
 80004ce:	1a18      	subs	r0, r3, r0
 80004d0:	3801      	subs	r0, #1
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_uldivmod>:
 80004d4:	b953      	cbnz	r3, 80004ec <__aeabi_uldivmod+0x18>
 80004d6:	b94a      	cbnz	r2, 80004ec <__aeabi_uldivmod+0x18>
 80004d8:	2900      	cmp	r1, #0
 80004da:	bf08      	it	eq
 80004dc:	2800      	cmpeq	r0, #0
 80004de:	bf1c      	itt	ne
 80004e0:	f04f 31ff 	movne.w	r1, #4294967295
 80004e4:	f04f 30ff 	movne.w	r0, #4294967295
 80004e8:	f000 b982 	b.w	80007f0 <__aeabi_idiv0>
 80004ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80004f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004f4:	f000 f806 	bl	8000504 <__udivmoddi4>
 80004f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000500:	b004      	add	sp, #16
 8000502:	4770      	bx	lr

08000504 <__udivmoddi4>:
 8000504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000508:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800050a:	4604      	mov	r4, r0
 800050c:	460f      	mov	r7, r1
 800050e:	2b00      	cmp	r3, #0
 8000510:	d148      	bne.n	80005a4 <__udivmoddi4+0xa0>
 8000512:	428a      	cmp	r2, r1
 8000514:	4694      	mov	ip, r2
 8000516:	d961      	bls.n	80005dc <__udivmoddi4+0xd8>
 8000518:	fab2 f382 	clz	r3, r2
 800051c:	b143      	cbz	r3, 8000530 <__udivmoddi4+0x2c>
 800051e:	f1c3 0120 	rsb	r1, r3, #32
 8000522:	409f      	lsls	r7, r3
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	409c      	lsls	r4, r3
 800052a:	fa20 f101 	lsr.w	r1, r0, r1
 800052e:	430f      	orrs	r7, r1
 8000530:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	0c22      	lsrs	r2, r4, #16
 800053a:	fbb7 f6f1 	udiv	r6, r7, r1
 800053e:	fb01 7716 	mls	r7, r1, r6, r7
 8000542:	fb06 f00e 	mul.w	r0, r6, lr
 8000546:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800054a:	4290      	cmp	r0, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x5c>
 800054e:	eb1c 0202 	adds.w	r2, ip, r2
 8000552:	f106 37ff 	add.w	r7, r6, #4294967295
 8000556:	d202      	bcs.n	800055e <__udivmoddi4+0x5a>
 8000558:	4290      	cmp	r0, r2
 800055a:	f200 8137 	bhi.w	80007cc <__udivmoddi4+0x2c8>
 800055e:	463e      	mov	r6, r7
 8000560:	1a12      	subs	r2, r2, r0
 8000562:	b2a4      	uxth	r4, r4
 8000564:	fbb2 f0f1 	udiv	r0, r2, r1
 8000568:	fb01 2210 	mls	r2, r1, r0, r2
 800056c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000570:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x86>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000580:	d202      	bcs.n	8000588 <__udivmoddi4+0x84>
 8000582:	45a6      	cmp	lr, r4
 8000584:	f200 811c 	bhi.w	80007c0 <__udivmoddi4+0x2bc>
 8000588:	4610      	mov	r0, r2
 800058a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800058e:	eba4 040e 	sub.w	r4, r4, lr
 8000592:	2600      	movs	r6, #0
 8000594:	b11d      	cbz	r5, 800059e <__udivmoddi4+0x9a>
 8000596:	40dc      	lsrs	r4, r3
 8000598:	2300      	movs	r3, #0
 800059a:	e9c5 4300 	strd	r4, r3, [r5]
 800059e:	4631      	mov	r1, r6
 80005a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d909      	bls.n	80005bc <__udivmoddi4+0xb8>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	f000 80fd 	beq.w	80007a8 <__udivmoddi4+0x2a4>
 80005ae:	2600      	movs	r6, #0
 80005b0:	e9c5 0100 	strd	r0, r1, [r5]
 80005b4:	4630      	mov	r0, r6
 80005b6:	4631      	mov	r1, r6
 80005b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005bc:	fab3 f683 	clz	r6, r3
 80005c0:	2e00      	cmp	r6, #0
 80005c2:	d14b      	bne.n	800065c <__udivmoddi4+0x158>
 80005c4:	428b      	cmp	r3, r1
 80005c6:	f0c0 80f2 	bcc.w	80007ae <__udivmoddi4+0x2aa>
 80005ca:	4282      	cmp	r2, r0
 80005cc:	f240 80ef 	bls.w	80007ae <__udivmoddi4+0x2aa>
 80005d0:	4630      	mov	r0, r6
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d0e3      	beq.n	800059e <__udivmoddi4+0x9a>
 80005d6:	e9c5 4700 	strd	r4, r7, [r5]
 80005da:	e7e0      	b.n	800059e <__udivmoddi4+0x9a>
 80005dc:	b902      	cbnz	r2, 80005e0 <__udivmoddi4+0xdc>
 80005de:	deff      	udf	#255	; 0xff
 80005e0:	fab2 f382 	clz	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f040 809d 	bne.w	8000724 <__udivmoddi4+0x220>
 80005ea:	1a89      	subs	r1, r1, r2
 80005ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005f0:	b297      	uxth	r7, r2
 80005f2:	2601      	movs	r6, #1
 80005f4:	0c20      	lsrs	r0, r4, #16
 80005f6:	fbb1 f2fe 	udiv	r2, r1, lr
 80005fa:	fb0e 1112 	mls	r1, lr, r2, r1
 80005fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000602:	fb07 f002 	mul.w	r0, r7, r2
 8000606:	4288      	cmp	r0, r1
 8000608:	d90f      	bls.n	800062a <__udivmoddi4+0x126>
 800060a:	eb1c 0101 	adds.w	r1, ip, r1
 800060e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000612:	bf2c      	ite	cs
 8000614:	f04f 0901 	movcs.w	r9, #1
 8000618:	f04f 0900 	movcc.w	r9, #0
 800061c:	4288      	cmp	r0, r1
 800061e:	d903      	bls.n	8000628 <__udivmoddi4+0x124>
 8000620:	f1b9 0f00 	cmp.w	r9, #0
 8000624:	f000 80cf 	beq.w	80007c6 <__udivmoddi4+0x2c2>
 8000628:	4642      	mov	r2, r8
 800062a:	1a09      	subs	r1, r1, r0
 800062c:	b2a4      	uxth	r4, r4
 800062e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000632:	fb0e 1110 	mls	r1, lr, r0, r1
 8000636:	fb00 f707 	mul.w	r7, r0, r7
 800063a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800063e:	42a7      	cmp	r7, r4
 8000640:	d908      	bls.n	8000654 <__udivmoddi4+0x150>
 8000642:	eb1c 0404 	adds.w	r4, ip, r4
 8000646:	f100 31ff 	add.w	r1, r0, #4294967295
 800064a:	d202      	bcs.n	8000652 <__udivmoddi4+0x14e>
 800064c:	42a7      	cmp	r7, r4
 800064e:	f200 80b4 	bhi.w	80007ba <__udivmoddi4+0x2b6>
 8000652:	4608      	mov	r0, r1
 8000654:	1be4      	subs	r4, r4, r7
 8000656:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800065a:	e79b      	b.n	8000594 <__udivmoddi4+0x90>
 800065c:	f1c6 0720 	rsb	r7, r6, #32
 8000660:	40b3      	lsls	r3, r6
 8000662:	fa01 f406 	lsl.w	r4, r1, r6
 8000666:	fa22 fc07 	lsr.w	ip, r2, r7
 800066a:	40f9      	lsrs	r1, r7
 800066c:	40b2      	lsls	r2, r6
 800066e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000672:	fa20 f307 	lsr.w	r3, r0, r7
 8000676:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800067a:	431c      	orrs	r4, r3
 800067c:	fa1f fe8c 	uxth.w	lr, ip
 8000680:	fa00 f306 	lsl.w	r3, r0, r6
 8000684:	0c20      	lsrs	r0, r4, #16
 8000686:	fbb1 f8f9 	udiv	r8, r1, r9
 800068a:	fb09 1118 	mls	r1, r9, r8, r1
 800068e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000692:	fb08 f00e 	mul.w	r0, r8, lr
 8000696:	4288      	cmp	r0, r1
 8000698:	d90f      	bls.n	80006ba <__udivmoddi4+0x1b6>
 800069a:	eb1c 0101 	adds.w	r1, ip, r1
 800069e:	f108 3aff 	add.w	sl, r8, #4294967295
 80006a2:	bf2c      	ite	cs
 80006a4:	f04f 0b01 	movcs.w	fp, #1
 80006a8:	f04f 0b00 	movcc.w	fp, #0
 80006ac:	4288      	cmp	r0, r1
 80006ae:	d903      	bls.n	80006b8 <__udivmoddi4+0x1b4>
 80006b0:	f1bb 0f00 	cmp.w	fp, #0
 80006b4:	f000 808d 	beq.w	80007d2 <__udivmoddi4+0x2ce>
 80006b8:	46d0      	mov	r8, sl
 80006ba:	1a09      	subs	r1, r1, r0
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	fbb1 f0f9 	udiv	r0, r1, r9
 80006c2:	fb09 1110 	mls	r1, r9, r0, r1
 80006c6:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ca:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006ce:	458e      	cmp	lr, r1
 80006d0:	d907      	bls.n	80006e2 <__udivmoddi4+0x1de>
 80006d2:	eb1c 0101 	adds.w	r1, ip, r1
 80006d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80006da:	d201      	bcs.n	80006e0 <__udivmoddi4+0x1dc>
 80006dc:	458e      	cmp	lr, r1
 80006de:	d87f      	bhi.n	80007e0 <__udivmoddi4+0x2dc>
 80006e0:	4620      	mov	r0, r4
 80006e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006e6:	eba1 010e 	sub.w	r1, r1, lr
 80006ea:	fba0 9802 	umull	r9, r8, r0, r2
 80006ee:	4541      	cmp	r1, r8
 80006f0:	464c      	mov	r4, r9
 80006f2:	46c6      	mov	lr, r8
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0x1f8>
 80006f6:	d106      	bne.n	8000706 <__udivmoddi4+0x202>
 80006f8:	454b      	cmp	r3, r9
 80006fa:	d204      	bcs.n	8000706 <__udivmoddi4+0x202>
 80006fc:	3801      	subs	r0, #1
 80006fe:	ebb9 0402 	subs.w	r4, r9, r2
 8000702:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000706:	2d00      	cmp	r5, #0
 8000708:	d070      	beq.n	80007ec <__udivmoddi4+0x2e8>
 800070a:	1b1a      	subs	r2, r3, r4
 800070c:	eb61 010e 	sbc.w	r1, r1, lr
 8000710:	fa22 f306 	lsr.w	r3, r2, r6
 8000714:	fa01 f707 	lsl.w	r7, r1, r7
 8000718:	40f1      	lsrs	r1, r6
 800071a:	2600      	movs	r6, #0
 800071c:	431f      	orrs	r7, r3
 800071e:	e9c5 7100 	strd	r7, r1, [r5]
 8000722:	e73c      	b.n	800059e <__udivmoddi4+0x9a>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0020 	rsb	r0, r3, #32
 800072c:	fa01 f203 	lsl.w	r2, r1, r3
 8000730:	fa21 f600 	lsr.w	r6, r1, r0
 8000734:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000738:	fa24 f100 	lsr.w	r1, r4, r0
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	409c      	lsls	r4, r3
 8000742:	4311      	orrs	r1, r2
 8000744:	fbb6 f0fe 	udiv	r0, r6, lr
 8000748:	0c0a      	lsrs	r2, r1, #16
 800074a:	fb0e 6610 	mls	r6, lr, r0, r6
 800074e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000752:	fb00 f607 	mul.w	r6, r0, r7
 8000756:	4296      	cmp	r6, r2
 8000758:	d90e      	bls.n	8000778 <__udivmoddi4+0x274>
 800075a:	eb1c 0202 	adds.w	r2, ip, r2
 800075e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000762:	bf2c      	ite	cs
 8000764:	f04f 0901 	movcs.w	r9, #1
 8000768:	f04f 0900 	movcc.w	r9, #0
 800076c:	4296      	cmp	r6, r2
 800076e:	d902      	bls.n	8000776 <__udivmoddi4+0x272>
 8000770:	f1b9 0f00 	cmp.w	r9, #0
 8000774:	d031      	beq.n	80007da <__udivmoddi4+0x2d6>
 8000776:	4640      	mov	r0, r8
 8000778:	1b92      	subs	r2, r2, r6
 800077a:	b289      	uxth	r1, r1
 800077c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000780:	fb0e 2216 	mls	r2, lr, r6, r2
 8000784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000788:	fb06 f207 	mul.w	r2, r6, r7
 800078c:	428a      	cmp	r2, r1
 800078e:	d907      	bls.n	80007a0 <__udivmoddi4+0x29c>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f106 38ff 	add.w	r8, r6, #4294967295
 8000798:	d201      	bcs.n	800079e <__udivmoddi4+0x29a>
 800079a:	428a      	cmp	r2, r1
 800079c:	d823      	bhi.n	80007e6 <__udivmoddi4+0x2e2>
 800079e:	4646      	mov	r6, r8
 80007a0:	1a89      	subs	r1, r1, r2
 80007a2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007a6:	e725      	b.n	80005f4 <__udivmoddi4+0xf0>
 80007a8:	462e      	mov	r6, r5
 80007aa:	4628      	mov	r0, r5
 80007ac:	e6f7      	b.n	800059e <__udivmoddi4+0x9a>
 80007ae:	1a84      	subs	r4, r0, r2
 80007b0:	eb61 0303 	sbc.w	r3, r1, r3
 80007b4:	2001      	movs	r0, #1
 80007b6:	461f      	mov	r7, r3
 80007b8:	e70b      	b.n	80005d2 <__udivmoddi4+0xce>
 80007ba:	4464      	add	r4, ip
 80007bc:	3802      	subs	r0, #2
 80007be:	e749      	b.n	8000654 <__udivmoddi4+0x150>
 80007c0:	4464      	add	r4, ip
 80007c2:	3802      	subs	r0, #2
 80007c4:	e6e1      	b.n	800058a <__udivmoddi4+0x86>
 80007c6:	3a02      	subs	r2, #2
 80007c8:	4461      	add	r1, ip
 80007ca:	e72e      	b.n	800062a <__udivmoddi4+0x126>
 80007cc:	3e02      	subs	r6, #2
 80007ce:	4462      	add	r2, ip
 80007d0:	e6c6      	b.n	8000560 <__udivmoddi4+0x5c>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4461      	add	r1, ip
 80007d8:	e76f      	b.n	80006ba <__udivmoddi4+0x1b6>
 80007da:	3802      	subs	r0, #2
 80007dc:	4462      	add	r2, ip
 80007de:	e7cb      	b.n	8000778 <__udivmoddi4+0x274>
 80007e0:	3802      	subs	r0, #2
 80007e2:	4461      	add	r1, ip
 80007e4:	e77d      	b.n	80006e2 <__udivmoddi4+0x1de>
 80007e6:	3e02      	subs	r6, #2
 80007e8:	4461      	add	r1, ip
 80007ea:	e7d9      	b.n	80007a0 <__udivmoddi4+0x29c>
 80007ec:	462e      	mov	r6, r5
 80007ee:	e6d6      	b.n	800059e <__udivmoddi4+0x9a>

080007f0 <__aeabi_idiv0>:
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000800:	2334      	movs	r3, #52	; 0x34
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <tx_application_define+0x40>)
 800080a:	490b      	ldr	r1, [pc, #44]	; (8000838 <tx_application_define+0x44>)
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <tx_application_define+0x48>)
 800080e:	f00d fdf1 	bl	800e3f4 <_txe_byte_pool_create>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d109      	bne.n	800082c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <tx_application_define+0x48>)
 800081a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800081c:	68b8      	ldr	r0, [r7, #8]
 800081e:	f000 f80f 	bl	8000840 <App_ThreadX_Init>
 8000822:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800082a:	e7fe      	b.n	800082a <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200001d4 	.word	0x200001d4
 8000838:	080158f4 	.word	0x080158f4
 800083c:	200005d4 	.word	0x200005d4

08000840 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af08      	add	r7, sp, #32
 8000846:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
    tx_thread_create(&menu_task_ptr, "menu_task", menu_task_entry, 0x1234,
 800084c:	23b0      	movs	r3, #176	; 0xb0
 800084e:	9306      	str	r3, [sp, #24]
 8000850:	2301      	movs	r3, #1
 8000852:	9305      	str	r3, [sp, #20]
 8000854:	2301      	movs	r3, #1
 8000856:	9304      	str	r3, [sp, #16]
 8000858:	230f      	movs	r3, #15
 800085a:	9303      	str	r3, [sp, #12]
 800085c:	230f      	movs	r3, #15
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <App_ThreadX_Init+0x90>)
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	f241 2334 	movw	r3, #4660	; 0x1234
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <App_ThreadX_Init+0x94>)
 8000870:	4919      	ldr	r1, [pc, #100]	; (80008d8 <App_ThreadX_Init+0x98>)
 8000872:	481a      	ldr	r0, [pc, #104]	; (80008dc <App_ThreadX_Init+0x9c>)
 8000874:	f00e f8be 	bl	800e9f4 <_txe_thread_create>
    menu_task_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);

    tx_thread_create(&debounce_task_ptr, "debounce_task", debounce_task_entry,
 8000878:	23b0      	movs	r3, #176	; 0xb0
 800087a:	9306      	str	r3, [sp, #24]
 800087c:	2301      	movs	r3, #1
 800087e:	9305      	str	r3, [sp, #20]
 8000880:	2301      	movs	r3, #1
 8000882:	9304      	str	r3, [sp, #16]
 8000884:	230e      	movs	r3, #14
 8000886:	9303      	str	r3, [sp, #12]
 8000888:	230e      	movs	r3, #14
 800088a:	9302      	str	r3, [sp, #8]
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <App_ThreadX_Init+0xa0>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	f241 2334 	movw	r3, #4660	; 0x1234
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <App_ThreadX_Init+0xa4>)
 800089c:	4912      	ldr	r1, [pc, #72]	; (80008e8 <App_ThreadX_Init+0xa8>)
 800089e:	4813      	ldr	r0, [pc, #76]	; (80008ec <App_ThreadX_Init+0xac>)
 80008a0:	f00e f8a8 	bl	800e9f4 <_txe_thread_create>
    0x1234, debounce_task_stack, THREAD_STACK_SIZE, 14, 14, 1, TX_AUTO_START);

    tx_semaphore_create(&debounce_semaphore_ptr, "debounce_semaphore", 0);
 80008a4:	231c      	movs	r3, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <App_ThreadX_Init+0xb0>)
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <App_ThreadX_Init+0xb4>)
 80008ac:	f00d ffca 	bl	800e844 <_txe_semaphore_create>

    tx_queue_create(&event_queue_ptr, "event_queue", sizeof(fm_event_t),
 80008b0:	2338      	movs	r3, #56	; 0x38
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <App_ThreadX_Init+0xb8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	490f      	ldr	r1, [pc, #60]	; (80008fc <App_ThreadX_Init+0xbc>)
 80008c0:	480f      	ldr	r0, [pc, #60]	; (8000900 <App_ThreadX_Init+0xc0>)
 80008c2:	f00d fe37 	bl	800e534 <_txe_queue_create>
#ifndef FM_THREADX_LOW_POWER
//      tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE, 30);
  #endif
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000060c 	.word	0x2000060c
 80008d4:	08000acd 	.word	0x08000acd
 80008d8:	08015908 	.word	0x08015908
 80008dc:	2000120c 	.word	0x2000120c
 80008e0:	20000a0c 	.word	0x20000a0c
 80008e4:	08000c0d 	.word	0x08000c0d
 80008e8:	08015914 	.word	0x08015914
 80008ec:	200012bc 	.word	0x200012bc
 80008f0:	08015924 	.word	0x08015924
 80008f4:	2000136c 	.word	0x2000136c
 80008f8:	20000e0c 	.word	0x20000e0c
 80008fc:	08015938 	.word	0x08015938
 8000900:	20001388 	.word	0x20001388

08000904 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000908:	f00a fff6 	bl	800b8f8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */

    const int rtc_clk = 32768;
 8000918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800091c:	617b      	str	r3, [r7, #20]
    const int rtc_prescaller = 16;
 800091e:	2310      	movs	r3, #16
 8000920:	613b      	str	r3, [r7, #16]

#ifdef FM_THREADX_LOW_POWER
    uint32_t ticks_to_sleep;

    g_lptim1_start = LPTIM1->CNT;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <App_ThreadX_LowPower_Timer_Setup+0x58>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <App_ThreadX_LowPower_Timer_Setup+0x5c>)
 800092a:	801a      	strh	r2, [r3, #0]
    /*
     * clock_freq/RTC_WAKEUPCLOCK_RTCCLK_DIV16
     */
    ticks_to_sleep = (rtc_clk / rtc_prescaller) * count;
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	fb92 f3f3 	sdiv	r3, r2, r3
 8000934:	461a      	mov	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	fb02 f303 	mul.w	r3, r2, r3
 800093c:	60fb      	str	r3, [r7, #12]
    ticks_to_sleep /= TX_TIMER_TICKS_PER_SECOND;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <App_ThreadX_LowPower_Timer_Setup+0x60>)
 8000942:	fba2 2303 	umull	r2, r3, r2, r3
 8000946:	095b      	lsrs	r3, r3, #5
 8000948:	60fb      	str	r3, [r7, #12]

#ifdef FM_DEBUG_UART_TX_TIME_ON_IDLE
  fm_debug_uint32_uart(count);
#endif

    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks_to_sleep,
 800094a:	2300      	movs	r3, #0
 800094c:	2200      	movs	r2, #0
 800094e:	68f9      	ldr	r1, [r7, #12]
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <App_ThreadX_LowPower_Timer_Setup+0x64>)
 8000952:	f008 ff5b 	bl	800980c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <App_ThreadX_LowPower_Timer_Setup+0x50>
    RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
    {
        Error_Handler();
 800095c:	f000 fdb4 	bl	80014c8 <Error_Handler>
    }

#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	46004400 	.word	0x46004400
 800096c:	20000608 	.word	0x20000608
 8000970:	51eb851f 	.word	0x51eb851f
 8000974:	200014fc 	.word	0x200014fc

08000978 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

    HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <App_ThreadX_LowPower_Enter+0x18>)
 8000982:	f003 fe3b 	bl	80045fc <HAL_GPIO_WritePin>

#ifdef FM_THREADX_LOW_POWER
    HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000986:	2001      	movs	r0, #1
 8000988:	f004 fae4 	bl	8004f54 <HAL_PWREx_EnterSTOP2Mode>
#endif

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	42020400 	.word	0x42020400

08000994 <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b09e      	sub	sp, #120	; 0x78
 8000998:	af00      	add	r7, sp, #0
    /*
     * If CPU wakes up other reason but timer flag we must wait until
     * expected time was elapsed. Debugger issues makes wake up CPU earlier
     */
#ifdef FM_THREADX_LOW_POWER
    RCC_OscInitTypeDef RCC_OscInitStruct =
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	2260      	movs	r2, #96	; 0x60
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f014 fa54 	bl	8014e50 <memset>
    {
        0
    };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
 80009b6:	615a      	str	r2, [r3, #20]
        0
    };

    /** Configure the main internal regulator output voltage
     */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f004 f9ef 	bl	8004d9c <HAL_PWREx_ControlVoltageScaling>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <App_ThreadX_LowPower_Exit+0x34>
    {
        Error_Handler();
 80009c4:	f000 fd80 	bl	80014c8 <Error_Handler>
    }

    /** Configure LSE Drive Capability
     */
    HAL_PWR_EnableBkUpAccess();
 80009c8:	f004 f9d8 	bl	8004d7c <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <App_ThreadX_LowPower_Exit+0xb4>)
 80009ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009d2:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <App_ThreadX_LowPower_Exit+0xb4>)
 80009d4:	f023 0318 	bic.w	r3, r3, #24
 80009d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80009dc:	2314      	movs	r3, #20
 80009de:	61bb      	str	r3, [r7, #24]
    | RCC_OSCILLATORTYPE_MSI;
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009e0:	2381      	movs	r3, #129	; 0x81
 80009e2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009e4:	2301      	movs	r3, #1
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009e8:	2310      	movs	r3, #16
 80009ea:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_1;
 80009ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 fbc6 	bl	800518c <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <App_ThreadX_LowPower_Exit+0x76>
    {
        Error_Handler();
 8000a06:	f000 fd5f 	bl	80014c8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a0a:	231f      	movs	r3, #31
 8000a0c:	603b      	str	r3, [r7, #0]
    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	2101      	movs	r1, #1
 8000a26:	4618      	mov	r0, r3
 8000a28:	f005 fa8c 	bl	8005f44 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <App_ThreadX_LowPower_Exit+0xa2>
    {
        Error_Handler();
 8000a32:	f000 fd49 	bl	80014c8 <Error_Handler>
    }
#endif

    HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <App_ThreadX_LowPower_Exit+0xb8>)
 8000a3c:	f003 fdde 	bl	80045fc <HAL_GPIO_WritePin>

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000a40:	bf00      	nop
 8000a42:	3778      	adds	r7, #120	; 0x78
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	46020c00 	.word	0x46020c00
 8000a4c:	42020400 	.word	0x42020400

08000a50 <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
    static const int lptim_clk_div_presc = 2048;

#ifdef FM_THREADX_LOW_POWER
    static uint16_t cnt_drift = 0;
    ULONG cnt_ret;
    g_lptim1_end = LPTIM1->CNT;
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <App_ThreadX_LowPower_Timer_Adjust+0x68>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <App_ThreadX_LowPower_Timer_Adjust+0x6c>)
 8000a5e:	801a      	strh	r2, [r3, #0]
    cnt_ret = (g_lptim1_end - g_lptim1_start);
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <App_ThreadX_LowPower_Timer_Adjust+0x6c>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <App_ThreadX_LowPower_Timer_Adjust+0x70>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	607b      	str	r3, [r7, #4]
    cnt_ret *= TX_TIMER_TICKS_PER_SECOND;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2264      	movs	r2, #100	; 0x64
 8000a72:	fb02 f303 	mul.w	r3, r2, r3
 8000a76:	607b      	str	r3, [r7, #4]
    cnt_ret += cnt_drift;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <App_ThreadX_LowPower_Timer_Adjust+0x74>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	607b      	str	r3, [r7, #4]
    cnt_drift = cnt_ret % lptim_clk_div_presc;
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <App_ThreadX_LowPower_Timer_Adjust+0x78>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a90:	fb01 f202 	mul.w	r2, r1, r2
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <App_ThreadX_LowPower_Timer_Adjust+0x74>)
 8000a9a:	801a      	strh	r2, [r3, #0]
    cnt_ret /= lptim_clk_div_presc;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <App_ThreadX_LowPower_Timer_Adjust+0x78>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000aa8:	607b      	str	r3, [r7, #4]
    return (cnt_ret);
 8000aaa:	687b      	ldr	r3, [r7, #4]
#else
  return (0);
#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	46004400 	.word	0x46004400
 8000abc:	2000060a 	.word	0x2000060a
 8000ac0:	20000608 	.word	0x20000608
 8000ac4:	200013c0 	.word	0x200013c0
 8000ac8:	080159b4 	.word	0x080159b4

08000acc <menu_task_entry>:

/* USER CODE BEGIN 1 */
VOID menu_task_entry(ULONG initial_input)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	; 0x38
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    static uint16_t pulse_counter_begin = 0;
    static uint16_t pulse_counter_end = 0;
    static uint16_t delta_pulse_counter = 0;
    char msg[34];

    ptr_fun_menu_t ptr_menu = fm_menu_show_init;
 8000ad4:	4b40      	ldr	r3, [pc, #256]	; (8000bd8 <menu_task_entry+0x10c>)
 8000ad6:	637b      	str	r3, [r7, #52]	; 0x34
    fm_event_t event_next = EVENT_LCD_REFRESH;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	72fb      	strb	r3, [r7, #11]
    UINT ret_status;

    HAL_LPTIM_Counter_Start(&hlptim4);
 8000adc:	483f      	ldr	r0, [pc, #252]	; (8000bdc <menu_task_entry+0x110>)
 8000ade:	f003 ff07 	bl	80048f0 <HAL_LPTIM_Counter_Start>

    while (1)
    {
        pulse_counter_begin = pulse_counter_end;
 8000ae2:	4b3f      	ldr	r3, [pc, #252]	; (8000be0 <menu_task_entry+0x114>)
 8000ae4:	881a      	ldrh	r2, [r3, #0]
 8000ae6:	4b3f      	ldr	r3, [pc, #252]	; (8000be4 <menu_task_entry+0x118>)
 8000ae8:	801a      	strh	r2, [r3, #0]

        ret_status = tx_queue_receive(&event_queue_ptr, &event_next,
 8000aea:	4b3f      	ldr	r3, [pc, #252]	; (8000be8 <menu_task_entry+0x11c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	f107 030b 	add.w	r3, r7, #11
 8000af4:	4619      	mov	r1, r3
 8000af6:	483d      	ldr	r0, [pc, #244]	; (8000bec <menu_task_entry+0x120>)
 8000af8:	f00d fdea 	bl	800e6d0 <_txe_queue_receive>
 8000afc:	6338      	str	r0, [r7, #48]	; 0x30
        queue_stay);

        if (ptr_menu != fm_menu_show_init && ptr_menu != fm_menu_show_version)
 8000afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b00:	4a35      	ldr	r2, [pc, #212]	; (8000bd8 <menu_task_entry+0x10c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d02e      	beq.n	8000b64 <menu_task_entry+0x98>
 8000b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b08:	4a39      	ldr	r2, [pc, #228]	; (8000bf0 <menu_task_entry+0x124>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d02a      	beq.n	8000b64 <menu_task_entry+0x98>
        {
            if (event_next == EVENT_LCD_REFRESH && backlight_cd > 0)
 8000b0e:	7afb      	ldrb	r3, [r7, #11]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d109      	bne.n	8000b28 <menu_task_entry+0x5c>
 8000b14:	4b37      	ldr	r3, [pc, #220]	; (8000bf4 <menu_task_entry+0x128>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dd05      	ble.n	8000b28 <menu_task_entry+0x5c>
            {
                backlight_cd--;
 8000b1c:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <menu_task_entry+0x128>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	4a34      	ldr	r2, [pc, #208]	; (8000bf4 <menu_task_entry+0x128>)
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e01d      	b.n	8000b64 <menu_task_entry+0x98>
            }
            else if (event_next == EVENT_LCD_REFRESH && backlight_cd <= 0)
 8000b28:	7afb      	ldrb	r3, [r7, #11]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d10d      	bne.n	8000b4a <menu_task_entry+0x7e>
 8000b2e:	4b31      	ldr	r3, [pc, #196]	; (8000bf4 <menu_task_entry+0x128>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	dc09      	bgt.n	8000b4a <menu_task_entry+0x7e>
            {
                HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3c:	482e      	ldr	r0, [pc, #184]	; (8000bf8 <menu_task_entry+0x12c>)
 8000b3e:	f003 fd5d 	bl	80045fc <HAL_GPIO_WritePin>
                PCF8553_BACKLIGHT_Pin, GPIO_PIN_SET);
                backlight_cd = 0;
 8000b42:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <menu_task_entry+0x128>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e00c      	b.n	8000b64 <menu_task_entry+0x98>
            }
            else if (event_next != EVENT_LCD_REFRESH)
 8000b4a:	7afb      	ldrb	r3, [r7, #11]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d009      	beq.n	8000b64 <menu_task_entry+0x98>
            {
                HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b56:	4828      	ldr	r0, [pc, #160]	; (8000bf8 <menu_task_entry+0x12c>)
 8000b58:	f003 fd50 	bl	80045fc <HAL_GPIO_WritePin>
                PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
                backlight_cd = backlight_countdown;
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <menu_task_entry+0x130>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a24      	ldr	r2, [pc, #144]	; (8000bf4 <menu_task_entry+0x128>)
 8000b62:	6013      	str	r3, [r2, #0]
            }
        }

        if (ret_status == TX_SUCCESS)
 8000b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d105      	bne.n	8000b76 <menu_task_entry+0xaa>
        {
            ptr_menu = (ptr_fun_menu_t) (*ptr_menu)(event_next);
 8000b6a:	7afa      	ldrb	r2, [r7, #11]
 8000b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6e:	4610      	mov	r0, r2
 8000b70:	4798      	blx	r3
 8000b72:	6378      	str	r0, [r7, #52]	; 0x34
 8000b74:	e003      	b.n	8000b7e <menu_task_entry+0xb2>
        }
        else
        {
            ptr_menu = (ptr_fun_menu_t) (*ptr_menu)(EVENT_LCD_REFRESH);
 8000b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b78:	2001      	movs	r0, #1
 8000b7a:	4798      	blx	r3
 8000b7c:	6378      	str	r0, [r7, #52]	; 0x34
        }

        pulse_counter_end = HAL_LPTIM_ReadCounter(&hlptim4);
 8000b7e:	4817      	ldr	r0, [pc, #92]	; (8000bdc <menu_task_entry+0x110>)
 8000b80:	f003 feea 	bl	8004958 <HAL_LPTIM_ReadCounter>
 8000b84:	4603      	mov	r3, r0
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <menu_task_entry+0x114>)
 8000b8a:	801a      	strh	r2, [r3, #0]
        delta_pulse_counter = pulse_counter_end - pulse_counter_begin;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <menu_task_entry+0x114>)
 8000b8e:	881a      	ldrh	r2, [r3, #0]
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <menu_task_entry+0x118>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <menu_task_entry+0x134>)
 8000b9a:	801a      	strh	r2, [r3, #0]
        fm_factory_modify_pulse_acm_ttl(delta_pulse_counter);
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <menu_task_entry+0x134>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f00e fe3b 	bl	800f81c <fm_factory_modify_pulse_acm_ttl>

        sprintf(msg, "pulsos en este segundo y pico: %u\n", delta_pulse_counter);
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <menu_task_entry+0x134>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4914      	ldr	r1, [pc, #80]	; (8000c04 <menu_task_entry+0x138>)
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f014 f988 	bl	8014ec8 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), queue_stay);
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fc81 	bl	80004c4 <strlen>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <menu_task_entry+0x11c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f107 010c 	add.w	r1, r7, #12
 8000bce:	480e      	ldr	r0, [pc, #56]	; (8000c08 <menu_task_entry+0x13c>)
 8000bd0:	f009 ffcc 	bl	800ab6c <HAL_UART_Transmit>
        pulse_counter_begin = pulse_counter_end;
 8000bd4:	e785      	b.n	8000ae2 <menu_task_entry+0x16>
 8000bd6:	bf00      	nop
 8000bd8:	0801477d 	.word	0x0801477d
 8000bdc:	200014ac 	.word	0x200014ac
 8000be0:	200013c2 	.word	0x200013c2
 8000be4:	200013c4 	.word	0x200013c4
 8000be8:	080159b8 	.word	0x080159b8
 8000bec:	20001388 	.word	0x20001388
 8000bf0:	0801497d 	.word	0x0801497d
 8000bf4:	200013c8 	.word	0x200013c8
 8000bf8:	42020800 	.word	0x42020800
 8000bfc:	080159bc 	.word	0x080159bc
 8000c00:	200013cc 	.word	0x200013cc
 8000c04:	08015944 	.word	0x08015944
 8000c08:	200015bc 	.word	0x200015bc

08000c0c <debounce_task_entry>:
    }
}

VOID debounce_task_entry(ULONG initial_input)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
    /*
     * debounce_time*10ms se espera para evitar rebotes.
     */
    const int debounce_time = 14;
 8000c14:	230e      	movs	r3, #14
 8000c16:	60fb      	str	r3, [r7, #12]

    while (1)
    {
        tx_semaphore_get(&debounce_semaphore_ptr, TX_WAIT_FOREVER);
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	4819      	ldr	r0, [pc, #100]	; (8000c84 <debounce_task_entry+0x78>)
 8000c1e:	f00d fea7 	bl	800e970 <_txe_semaphore_get>

        tx_thread_sleep(debounce_time);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f00c fa97 	bl	800d158 <_tx_thread_sleep>

        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <debounce_task_entry+0x7c>)
 8000c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <debounce_task_entry+0x7c>)
 8000c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c38:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <debounce_task_entry+0x7c>)
 8000c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <debounce_task_entry+0x7c>)
 8000c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c48:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <debounce_task_entry+0x7c>)
 8000c4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <debounce_task_entry+0x7c>)
 8000c54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c58:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <debounce_task_entry+0x7c>)
 8000c5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <debounce_task_entry+0x7c>)
 8000c64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c68:	611a      	str	r2, [r3, #16]

        HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000c6a:	2015      	movs	r0, #21
 8000c6c:	f003 fad2 	bl	8004214 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000c70:	2016      	movs	r0, #22
 8000c72:	f003 facf 	bl	8004214 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8000c76:	2017      	movs	r0, #23
 8000c78:	f003 facc 	bl	8004214 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000c7c:	2018      	movs	r0, #24
 8000c7e:	f003 fac9 	bl	8004214 <HAL_NVIC_EnableIRQ>
        tx_semaphore_get(&debounce_semaphore_ptr, TX_WAIT_FOREVER);
 8000c82:	e7c9      	b.n	8000c18 <debounce_task_entry+0xc>
 8000c84:	2000136c 	.word	0x2000136c
 8000c88:	46022000 	.word	0x46022000

08000c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c90:	f000 ff8e 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c94:	f000 f82e 	bl	8000cf4 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000c98:	f000 f884 	bl	8000da4 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9c:	f000 fb08 	bl	80012b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ca0:	f000 f8ac 	bl	8000dfc <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000ca4:	f000 f918 	bl	8000ed8 <MX_ICACHE_Init>
  MX_LPTIM1_Init();
 8000ca8:	f000 f92a 	bl	8000f00 <MX_LPTIM1_Init>
  MX_RTC_Init();
 8000cac:	f000 f9b6 	bl	800101c <MX_RTC_Init>
  MX_SPI1_Init();
 8000cb0:	f000 fa42 	bl	8001138 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000cb4:	f000 fab0 	bl	8001218 <MX_USART1_UART_Init>
  MX_LPTIM4_Init();
 8000cb8:	f000 f96e 	bl	8000f98 <MX_LPTIM4_Init>
  /* USER CODE BEGIN 2 */

    fm_lcd_clear();
 8000cbc:	f00f f837 	bl	800fd2e <fm_lcd_clear>
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <main+0x5c>)
 8000cc8:	f003 f85e 	bl	8003d88 <HAL_ADCEx_Calibration_Start>
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <main+0x60>)
 8000cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd2:	4a06      	ldr	r2, [pc, #24]	; (8000cec <main+0x60>)
 8000cd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    HAL_LPTIM_Counter_Start(&hlptim1);
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <main+0x64>)
 8000cde:	f003 fe07 	bl	80048f0 <HAL_LPTIM_Counter_Start>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000ce2:	f7ff fe0f 	bl	8000904 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <main+0x5a>
 8000ce8:	200013d0 	.word	0x200013d0
 8000cec:	46020c00 	.word	0x46020c00
 8000cf0:	2000145c 	.word	0x2000145c

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b09e      	sub	sp, #120	; 0x78
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0318 	add.w	r3, r7, #24
 8000cfe:	2260      	movs	r2, #96	; 0x60
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f014 f8a4 	bl	8014e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f004 f83f 	bl	8004d9c <HAL_PWREx_ControlVoltageScaling>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d24:	f000 fbd0 	bl	80014c8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d28:	f004 f828 	bl	8004d7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <SystemClock_Config+0xac>)
 8000d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d32:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <SystemClock_Config+0xac>)
 8000d34:	f023 0318 	bic.w	r3, r3, #24
 8000d38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000d3c:	2314      	movs	r3, #20
 8000d3e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d40:	2381      	movs	r3, #129	; 0x81
 8000d42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d44:	2301      	movs	r3, #1
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d48:	2310      	movs	r3, #16
 8000d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_1;
 8000d4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d56:	f107 0318 	add.w	r3, r7, #24
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f004 fa16 	bl	800518c <HAL_RCC_OscConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000d66:	f000 fbaf 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6a:	231f      	movs	r3, #31
 8000d6c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d82:	463b      	mov	r3, r7
 8000d84:	2101      	movs	r1, #1
 8000d86:	4618      	mov	r0, r3
 8000d88:	f005 f8dc 	bl	8005f44 <HAL_RCC_ClockConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d92:	f000 fb99 	bl	80014c8 <Error_Handler>
  }
}
 8000d96:	bf00      	nop
 8000d98:	3778      	adds	r7, #120	; 0x78
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	46020c00 	.word	0x46020c00

08000da4 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000da8:	f004 f900 	bl	8004fac <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dac:	f004 f91e 	bl	8004fec <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * SRAM Power Down In Stop Mode Config
   */
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_SRAM4_FULL_STOP_RETENTION);
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <SystemPower_Config+0x44>)
 8000db2:	f004 f92b 	bl	800500c <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_DCACHE1_FULL_STOP_RETENTION);
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <SystemPower_Config+0x48>)
 8000db8:	f004 f928 	bl	800500c <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_DMA2DRAM_FULL_STOP_RETENTION);
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <SystemPower_Config+0x4c>)
 8000dbe:	f004 f925 	bl	800500c <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_PKA32RAM_FULL_STOP_RETENTION);
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <SystemPower_Config+0x50>)
 8000dc4:	f004 f922 	bl	800500c <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_PERIPHRAM_FULL_STOP_RETENTION);
 8000dc8:	480b      	ldr	r0, [pc, #44]	; (8000df8 <SystemPower_Config+0x54>)
 8000dca:	f004 f91f 	bl	800500c <HAL_PWREx_DisableRAMsContentStopRetention>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f004 f870 	bl	8004eb4 <HAL_PWREx_ConfigSupply>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemPower_Config+0x3a>
  {
    Error_Handler();
 8000dda:	f000 fb75 	bl	80014c8 <Error_Handler>
  }

  /*
   * SRAM4 Fast In Run Mode Config
   */
  HAL_PWREx_EnableSRAM4FastWakeUp();
 8000dde:	f004 f9c5 	bl	800516c <HAL_PWREx_EnableSRAM4FastWakeUp>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	00080001 	.word	0x00080001
 8000dec:	00200001 	.word	0x00200001
 8000df0:	00400001 	.word	0x00400001
 8000df4:	01000001 	.word	0x01000001
 8000df8:	00800001 	.word	0x00800001

08000dfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e02:	463b      	mov	r3, r7
 8000e04:	2220      	movs	r2, #32
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f014 f821 	bl	8014e50 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e10:	4a2f      	ldr	r2, [pc, #188]	; (8000ed0 <MX_ADC1_Init+0xd4>)
 8000e12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e16:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e1e:	2204      	movs	r2, #4
 8000e20:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e2e:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e30:	2204      	movs	r2, #4
 8000e32:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000e42:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e48:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000e86:	f001 fa77 	bl	8002378 <HAL_ADC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000e90:	f000 fb1a 	bl	80014c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_ADC1_Init+0xd8>)
 8000e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e98:	2306      	movs	r3, #6
 8000e9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_391CYCLES_5;
 8000e9c:	2306      	movs	r3, #6
 8000e9e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <MX_ADC1_Init+0xd0>)
 8000eb4:	f001 fec6 	bl	8002c44 <HAL_ADC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000ebe:	f000 fb03 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	3720      	adds	r7, #32
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200013d0 	.word	0x200013d0
 8000ed0:	42028000 	.word	0x42028000
 8000ed4:	ce080000 	.word	0xce080000

08000ed8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000edc:	2000      	movs	r0, #0
 8000ede:	f003 fbd7 	bl	8004690 <HAL_ICACHE_ConfigAssociativityMode>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000ee8:	f000 faee 	bl	80014c8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000eec:	f003 fbf0 	bl	80046d0 <HAL_ICACHE_Enable>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000ef6:	f000 fae7 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_LPTIM1_Init+0x8c>)
 8000f06:	4a22      	ldr	r2, [pc, #136]	; (8000f90 <MX_LPTIM1_Init+0x90>)
 8000f08:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_LPTIM1_Init+0x8c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_LPTIM1_Init+0x8c>)
 8000f12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f16:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_LPTIM1_Init+0x8c>)
 8000f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f1e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 65535;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_LPTIM1_Init+0x8c>)
 8000f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f26:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_LPTIM1_Init+0x8c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_LPTIM1_Init+0x8c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_LPTIM1_Init+0x8c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_LPTIM1_Init+0x8c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_LPTIM1_Init+0x8c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000f46:	4811      	ldr	r0, [pc, #68]	; (8000f8c <MX_LPTIM1_Init+0x8c>)
 8000f48:	f003 fbd2 	bl	80046f0 <HAL_LPTIM_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_LPTIM1_Init+0x56>
  {
    Error_Handler();
 8000f52:	f000 fab9 	bl	80014c8 <Error_Handler>
    /*
     * To run in stop mode the LPBAM low-power backgroung autonomous mode must be
     * configured
     *
     */
    __HAL_RCC_LPTIM1_CLKAM_ENABLE();
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_LPTIM1_Init+0x94>)
 8000f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <MX_LPTIM1_Init+0x94>)
 8000f5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    __HAL_RCC_LPDMA1_CLKAM_ENABLE();
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_LPTIM1_Init+0x94>)
 8000f68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f6c:	4a09      	ldr	r2, [pc, #36]	; (8000f94 <MX_LPTIM1_Init+0x94>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f72:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    __HAL_RCC_SRAM4_CLKAM_ENABLE();
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <MX_LPTIM1_Init+0x94>)
 8000f78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <MX_LPTIM1_Init+0x94>)
 8000f7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

  /* USER CODE END LPTIM1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000145c 	.word	0x2000145c
 8000f90:	46004400 	.word	0x46004400
 8000f94:	46020c00 	.word	0x46020c00

08000f98 <MX_LPTIM4_Init>:
  * @brief LPTIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM4_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM4_Init 0 */

  /* USER CODE BEGIN LPTIM4_Init 1 */

  /* USER CODE END LPTIM4_Init 1 */
  hlptim4.Instance = LPTIM4;
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <MX_LPTIM4_Init+0x78>)
 8000f9e:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <MX_LPTIM4_Init+0x7c>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hlptim4.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_LPTIM4_Init+0x78>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
  hlptim4.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_LPTIM4_Init+0x78>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hlptim4.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_LPTIM4_Init+0x78>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
  hlptim4.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_LPTIM4_Init+0x78>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hlptim4.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_LPTIM4_Init+0x78>)
 8000fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc0:	615a      	str	r2, [r3, #20]
  hlptim4.Init.Period = 65535;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <MX_LPTIM4_Init+0x78>)
 8000fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc8:	621a      	str	r2, [r3, #32]
  hlptim4.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_LPTIM4_Init+0x78>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim4.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_LPTIM4_Init+0x78>)
 8000fd2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim4.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <MX_LPTIM4_Init+0x78>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim4.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_LPTIM4_Init+0x78>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim4.Init.RepetitionCounter = 1;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <MX_LPTIM4_Init+0x78>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim4) != HAL_OK)
 8000fea:	4809      	ldr	r0, [pc, #36]	; (8001010 <MX_LPTIM4_Init+0x78>)
 8000fec:	f003 fb80 	bl	80046f0 <HAL_LPTIM_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_LPTIM4_Init+0x62>
  {
    Error_Handler();
 8000ff6:	f000 fa67 	bl	80014c8 <Error_Handler>
  /*
   * To run in stop mode the LPBAM low-power backgroung autonomous mode must be
   * configured
   *
   */
  __HAL_RCC_LPTIM4_CLKAM_ENABLE();
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <MX_LPTIM4_Init+0x80>)
 8000ffc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001000:	4a05      	ldr	r2, [pc, #20]	; (8001018 <MX_LPTIM4_Init+0x80>)
 8001002:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001006:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE END LPTIM4_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200014ac 	.word	0x200014ac
 8001014:	46004c00 	.word	0x46004c00
 8001018:	46020c00 	.word	0x46020c00

0800101c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	; 0x38
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800104a:	4b39      	ldr	r3, [pc, #228]	; (8001130 <MX_RTC_Init+0x114>)
 800104c:	4a39      	ldr	r2, [pc, #228]	; (8001134 <MX_RTC_Init+0x118>)
 800104e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001050:	4b37      	ldr	r3, [pc, #220]	; (8001130 <MX_RTC_Init+0x114>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001056:	4b36      	ldr	r3, [pc, #216]	; (8001130 <MX_RTC_Init+0x114>)
 8001058:	227f      	movs	r2, #127	; 0x7f
 800105a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800105c:	4b34      	ldr	r3, [pc, #208]	; (8001130 <MX_RTC_Init+0x114>)
 800105e:	22ff      	movs	r2, #255	; 0xff
 8001060:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <MX_RTC_Init+0x114>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001068:	4b31      	ldr	r3, [pc, #196]	; (8001130 <MX_RTC_Init+0x114>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800106e:	4b30      	ldr	r3, [pc, #192]	; (8001130 <MX_RTC_Init+0x114>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001074:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <MX_RTC_Init+0x114>)
 8001076:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800107a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <MX_RTC_Init+0x114>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <MX_RTC_Init+0x114>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001088:	4829      	ldr	r0, [pc, #164]	; (8001130 <MX_RTC_Init+0x114>)
 800108a:	f008 f873 	bl	8009174 <HAL_RTC_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001094:	f000 fa18 	bl	80014c8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	4820      	ldr	r0, [pc, #128]	; (8001130 <MX_RTC_Init+0x114>)
 80010b0:	f008 fc96 	bl	80099e0 <HAL_RTCEx_PrivilegeModeSet>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80010ba:	f000 fa05 	bl	80014c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 80010be:	2311      	movs	r3, #17
 80010c0:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	2200      	movs	r2, #0
 80010d8:	4619      	mov	r1, r3
 80010da:	4815      	ldr	r0, [pc, #84]	; (8001130 <MX_RTC_Init+0x114>)
 80010dc:	f008 f8cc 	bl	8009278 <HAL_RTC_SetTime>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80010e6:	f000 f9ef 	bl	80014c8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80010ea:	2303      	movs	r3, #3
 80010ec:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_MAY;
 80010ee:	2305      	movs	r3, #5
 80010f0:	717b      	strb	r3, [r7, #5]
  sDate.Date = 10;
 80010f2:	230a      	movs	r3, #10
 80010f4:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 23;
 80010f6:	2317      	movs	r3, #23
 80010f8:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	4619      	mov	r1, r3
 8001100:	480b      	ldr	r0, [pc, #44]	; (8001130 <MX_RTC_Init+0x114>)
 8001102:	f008 f9c7 	bl	8009494 <HAL_RTC_SetDate>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 800110c:	f000 f9dc 	bl	80014c8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4096, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8001110:	2300      	movs	r3, #0
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_RTC_Init+0x114>)
 800111a:	f008 fb77 	bl	800980c <HAL_RTCEx_SetWakeUpTimer_IT>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8001124:	f000 f9d0 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3738      	adds	r7, #56	; 0x38
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200014fc 	.word	0x200014fc
 8001134:	46007800 	.word	0x46007800

08001138 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001148:	4b31      	ldr	r3, [pc, #196]	; (8001210 <MX_SPI1_Init+0xd8>)
 800114a:	4a32      	ldr	r2, [pc, #200]	; (8001214 <MX_SPI1_Init+0xdc>)
 800114c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114e:	4b30      	ldr	r3, [pc, #192]	; (8001210 <MX_SPI1_Init+0xd8>)
 8001150:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001154:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001156:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <MX_SPI1_Init+0xd8>)
 8001158:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800115c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <MX_SPI1_Init+0xd8>)
 8001160:	2207      	movs	r2, #7
 8001162:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001164:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <MX_SPI1_Init+0xd8>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <MX_SPI1_Init+0xd8>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001170:	4b27      	ldr	r3, [pc, #156]	; (8001210 <MX_SPI1_Init+0xd8>)
 8001172:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001176:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <MX_SPI1_Init+0xd8>)
 800117a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800117e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001180:	4b23      	ldr	r3, [pc, #140]	; (8001210 <MX_SPI1_Init+0xd8>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001186:	4b22      	ldr	r3, [pc, #136]	; (8001210 <MX_SPI1_Init+0xd8>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118c:	4b20      	ldr	r3, [pc, #128]	; (8001210 <MX_SPI1_Init+0xd8>)
 800118e:	2200      	movs	r2, #0
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_SPI1_Init+0xd8>)
 8001194:	2207      	movs	r2, #7
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <MX_SPI1_Init+0xd8>)
 800119a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_SPI1_Init+0xd8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_SPI1_Init+0xd8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_SPI1_Init+0xd8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_SPI1_Init+0xd8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_SPI1_Init+0xd8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_SPI1_Init+0xd8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_SPI1_Init+0xd8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_SPI1_Init+0xd8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_SPI1_Init+0xd8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d6:	480e      	ldr	r0, [pc, #56]	; (8001210 <MX_SPI1_Init+0xd8>)
 80011d8:	f008 fc30 	bl	8009a3c <HAL_SPI_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 80011e2:	f000 f971 	bl	80014c8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80011ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011ee:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_SPI1_Init+0xd8>)
 80011fa:	f009 f83c 	bl	800a276 <HAL_SPIEx_SetConfigAutonomousMode>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8001204:	f000 f960 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000152c 	.word	0x2000152c
 8001214:	40013000 	.word	0x40013000

08001218 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 800121e:	4a23      	ldr	r2, [pc, #140]	; (80012ac <MX_USART1_UART_Init+0x94>)
 8001220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001260:	4811      	ldr	r0, [pc, #68]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001262:	f009 fc33 	bl	800aacc <HAL_UART_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800126c:	f000 f92c 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001270:	2100      	movs	r1, #0
 8001272:	480d      	ldr	r0, [pc, #52]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001274:	f00a f90c 	bl	800b490 <HAL_UARTEx_SetTxFifoThreshold>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800127e:	f000 f923 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001282:	2100      	movs	r1, #0
 8001284:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001286:	f00a f941 	bl	800b50c <HAL_UARTEx_SetRxFifoThreshold>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001290:	f000 f91a 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001296:	f00a f8c2 	bl	800b41e <HAL_UARTEx_DisableFifoMode>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012a0:	f000 f912 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200015bc 	.word	0x200015bc
 80012ac:	40013800 	.word	0x40013800

080012b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b6b      	ldr	r3, [pc, #428]	; (8001474 <MX_GPIO_Init+0x1c4>)
 80012c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012cc:	4a69      	ldr	r2, [pc, #420]	; (8001474 <MX_GPIO_Init+0x1c4>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012d6:	4b67      	ldr	r3, [pc, #412]	; (8001474 <MX_GPIO_Init+0x1c4>)
 80012d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b63      	ldr	r3, [pc, #396]	; (8001474 <MX_GPIO_Init+0x1c4>)
 80012e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012ea:	4a62      	ldr	r2, [pc, #392]	; (8001474 <MX_GPIO_Init+0x1c4>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012f4:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <MX_GPIO_Init+0x1c4>)
 80012f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001302:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <MX_GPIO_Init+0x1c4>)
 8001304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001308:	4a5a      	ldr	r2, [pc, #360]	; (8001474 <MX_GPIO_Init+0x1c4>)
 800130a:	f043 0320 	orr.w	r3, r3, #32
 800130e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001312:	4b58      	ldr	r3, [pc, #352]	; (8001474 <MX_GPIO_Init+0x1c4>)
 8001314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001318:	f003 0320 	and.w	r3, r3, #32
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001320:	4b54      	ldr	r3, [pc, #336]	; (8001474 <MX_GPIO_Init+0x1c4>)
 8001322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001326:	4a53      	ldr	r2, [pc, #332]	; (8001474 <MX_GPIO_Init+0x1c4>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001330:	4b50      	ldr	r3, [pc, #320]	; (8001474 <MX_GPIO_Init+0x1c4>)
 8001332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800133e:	4b4d      	ldr	r3, [pc, #308]	; (8001474 <MX_GPIO_Init+0x1c4>)
 8001340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001344:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <MX_GPIO_Init+0x1c4>)
 8001346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800134e:	4b49      	ldr	r3, [pc, #292]	; (8001474 <MX_GPIO_Init+0x1c4>)
 8001350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PCF8553_CE_Pin|PCF8553_RESET_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2150      	movs	r1, #80	; 0x50
 8001360:	4845      	ldr	r0, [pc, #276]	; (8001478 <MX_GPIO_Init+0x1c8>)
 8001362:	f003 f94b 	bl	80045fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2104      	movs	r1, #4
 800136a:	4844      	ldr	r0, [pc, #272]	; (800147c <MX_GPIO_Init+0x1cc>)
 800136c:	f003 f946 	bl	80045fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port, PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001376:	4842      	ldr	r0, [pc, #264]	; (8001480 <MX_GPIO_Init+0x1d0>)
 8001378:	f003 f940 	bl	80045fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	4840      	ldr	r0, [pc, #256]	; (8001484 <MX_GPIO_Init+0x1d4>)
 8001382:	f003 f93b 	bl	80045fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCF8553_CE_Pin PCF8553_RESET_Pin */
  GPIO_InitStruct.Pin = PCF8553_CE_Pin|PCF8553_RESET_Pin;
 8001386:	2350      	movs	r3, #80	; 0x50
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4836      	ldr	r0, [pc, #216]	; (8001478 <MX_GPIO_Init+0x1c8>)
 800139e:	f002 ff55 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a8:	4b37      	ldr	r3, [pc, #220]	; (8001488 <MX_GPIO_Init+0x1d8>)
 80013aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4833      	ldr	r0, [pc, #204]	; (8001484 <MX_GPIO_Init+0x1d4>)
 80013b8:	f002 ff48 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pin : led_red_Pin */
  GPIO_InitStruct.Pin = led_red_Pin;
 80013bc:	2304      	movs	r3, #4
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_red_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	482a      	ldr	r0, [pc, #168]	; (800147c <MX_GPIO_Init+0x1cc>)
 80013d4:	f002 ff3a 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pin : PCF8553_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = PCF8553_BACKLIGHT_Pin;
 80013d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCF8553_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4823      	ldr	r0, [pc, #140]	; (8001480 <MX_GPIO_Init+0x1d0>)
 80013f2:	f002 ff2b 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_GPIO_Init+0x1d8>)
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	481d      	ldr	r0, [pc, #116]	; (8001480 <MX_GPIO_Init+0x1d0>)
 800140c:	f002 ff1e 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pin : led_blue_Pin */
  GPIO_InitStruct.Pin = led_blue_Pin;
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_blue_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4817      	ldr	r0, [pc, #92]	; (8001484 <MX_GPIO_Init+0x1d4>)
 8001428:	f002 ff10 	bl	800424c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI10_IRQn, 5, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2105      	movs	r1, #5
 8001430:	2015      	movs	r0, #21
 8001432:	f002 fed5 	bl	80041e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8001436:	2015      	movs	r0, #21
 8001438:	f002 feec 	bl	8004214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 5, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2105      	movs	r1, #5
 8001440:	2016      	movs	r0, #22
 8001442:	f002 fecd 	bl	80041e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8001446:	2016      	movs	r0, #22
 8001448:	f002 fee4 	bl	8004214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI12_IRQn, 5, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2105      	movs	r1, #5
 8001450:	2017      	movs	r0, #23
 8001452:	f002 fec5 	bl	80041e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8001456:	2017      	movs	r0, #23
 8001458:	f002 fedc 	bl	8004214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2105      	movs	r1, #5
 8001460:	2018      	movs	r0, #24
 8001462:	f002 febd 	bl	80041e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001466:	2018      	movs	r0, #24
 8001468:	f002 fed4 	bl	8004214 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	46020c00 	.word	0x46020c00
 8001478:	42020000 	.word	0x42020000
 800147c:	42021800 	.word	0x42021800
 8001480:	42020800 	.word	0x42020800
 8001484:	42020400 	.word	0x42020400
 8001488:	10110000 	.word	0x10110000

0800148c <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */

__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f008 fa31 	bl	80098fc <HAL_RTCEx_DeactivateWakeUpTimer>

    /* NOTE : This function should not be modified, when the callback is needed,
     the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
     */
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014b6:	f000 fba9 	bl	8001c0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40001000 	.word	0x40001000

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80014d0:	e7fe      	b.n	80014d0 <Error_Handler+0x8>
	...

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_MspInit+0x30>)
 80014dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e0:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_MspInit+0x30>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_MspInit+0x30>)
 80014ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_PWREx_EnableVddA();
 80014f8:	f003 fd68 	bl	8004fcc <HAL_PWREx_EnableVddA>
  /* USER CODE END MspInit 1 */
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	46020c00 	.word	0x46020c00

08001508 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0b6      	sub	sp, #216	; 0xd8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	22c8      	movs	r2, #200	; 0xc8
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f013 fc99 	bl	8014e50 <memset>
  if(hadc->Instance==ADC1)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <HAL_ADC_MspInit+0x70>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d122      	bne.n	800156e <HAL_ADC_MspInit+0x66>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001528:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_SYSCLK;
 8001534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	4618      	mov	r0, r3
 8001542:	f005 f90d 	bl	8006760 <HAL_RCCEx_PeriphCLKConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 800154c:	f7ff ffbc 	bl	80014c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_ADC_MspInit+0x74>)
 8001552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_ADC_MspInit+0x74>)
 8001558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_ADC_MspInit+0x74>)
 8001562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	37d8      	adds	r7, #216	; 0xd8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	42028000 	.word	0x42028000
 800157c:	46020c00 	.word	0x46020c00

08001580 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0be      	sub	sp, #248	; 0xf8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001598:	f107 0318 	add.w	r3, r7, #24
 800159c:	22c8      	movs	r2, #200	; 0xc8
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f013 fc55 	bl	8014e50 <memset>
  if(hlptim->Instance==LPTIM1)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a40      	ldr	r2, [pc, #256]	; (80016ac <HAL_LPTIM_MspInit+0x12c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d12b      	bne.n	8001608 <HAL_LPTIM_MspInit+0x88>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80015b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80015bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c4:	f107 0318 	add.w	r3, r7, #24
 80015c8:	4618      	mov	r0, r3
 80015ca:	f005 f8c9 	bl	8006760 <HAL_RCCEx_PeriphCLKConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_LPTIM_MspInit+0x58>
    {
      Error_Handler();
 80015d4:	f7ff ff78 	bl	80014c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <HAL_LPTIM_MspInit+0x130>)
 80015da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80015de:	4a34      	ldr	r2, [pc, #208]	; (80016b0 <HAL_LPTIM_MspInit+0x130>)
 80015e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015e4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80015e8:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <HAL_LPTIM_MspInit+0x130>)
 80015ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80015ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697b      	ldr	r3, [r7, #20]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2043      	movs	r0, #67	; 0x43
 80015fc:	f002 fdf0 	bl	80041e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001600:	2043      	movs	r0, #67	; 0x43
 8001602:	f002 fe07 	bl	8004214 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM4_MspInit 1 */

  /* USER CODE END LPTIM4_MspInit 1 */
  }

}
 8001606:	e04c      	b.n	80016a2 <HAL_LPTIM_MspInit+0x122>
  else if(hlptim->Instance==LPTIM4)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a29      	ldr	r2, [pc, #164]	; (80016b4 <HAL_LPTIM_MspInit+0x134>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d147      	bne.n	80016a2 <HAL_LPTIM_MspInit+0x122>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM34;
 8001612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Lptim34ClockSelection = RCC_LPTIM34CLKSOURCE_LSE;
 800161e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001622:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	4618      	mov	r0, r3
 800162c:	f005 f898 	bl	8006760 <HAL_RCCEx_PeriphCLKConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_LPTIM_MspInit+0xba>
      Error_Handler();
 8001636:	f7ff ff47 	bl	80014c8 <Error_Handler>
    __HAL_RCC_LPTIM4_CLK_ENABLE();
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_LPTIM_MspInit+0x130>)
 800163c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001640:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <HAL_LPTIM_MspInit+0x130>)
 8001642:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001646:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_LPTIM_MspInit+0x130>)
 800164c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_LPTIM_MspInit+0x130>)
 800165a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800165e:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <HAL_LPTIM_MspInit+0x130>)
 8001660:	f043 0320 	orr.w	r3, r3, #32
 8001664:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_LPTIM_MspInit+0x130>)
 800166a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001676:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800167a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF13_LPTIM4;
 8001690:	230d      	movs	r3, #13
 8001692:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001696:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800169a:	4619      	mov	r1, r3
 800169c:	4806      	ldr	r0, [pc, #24]	; (80016b8 <HAL_LPTIM_MspInit+0x138>)
 800169e:	f002 fdd5 	bl	800424c <HAL_GPIO_Init>
}
 80016a2:	bf00      	nop
 80016a4:	37f8      	adds	r7, #248	; 0xf8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	46004400 	.word	0x46004400
 80016b0:	46020c00 	.word	0x46020c00
 80016b4:	46004c00 	.word	0x46004c00
 80016b8:	42021400 	.word	0x42021400

080016bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0b6      	sub	sp, #216	; 0xd8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	22c8      	movs	r2, #200	; 0xc8
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f013 fbbf 	bl	8014e50 <memset>
  if(hrtc->Instance==RTC)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a1d      	ldr	r2, [pc, #116]	; (800174c <HAL_RTC_MspInit+0x90>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d132      	bne.n	8001742 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	4618      	mov	r0, r3
 80016f6:	f005 f833 	bl	8006760 <HAL_RCCEx_PeriphCLKConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001700:	f7ff fee2 	bl	80014c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_RTC_MspInit+0x94>)
 8001706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800170a:	4a11      	ldr	r2, [pc, #68]	; (8001750 <HAL_RTC_MspInit+0x94>)
 800170c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001710:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_RTC_MspInit+0x94>)
 8001716:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800171a:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <HAL_RTC_MspInit+0x94>)
 800171c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001720:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_RTC_MspInit+0x94>)
 8001726:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800172a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2002      	movs	r0, #2
 8001738:	f002 fd52 	bl	80041e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800173c:	2002      	movs	r0, #2
 800173e:	f002 fd69 	bl	8004214 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	37d8      	adds	r7, #216	; 0xd8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	46007800 	.word	0x46007800
 8001750:	46020c00 	.word	0x46020c00

08001754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b0bc      	sub	sp, #240	; 0xf0
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	22c8      	movs	r2, #200	; 0xc8
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f013 fb6b 	bl	8014e50 <memset>
  if(hspi->Instance==SPI1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a27      	ldr	r2, [pc, #156]	; (800181c <HAL_SPI_MspInit+0xc8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d146      	bne.n	8001812 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001784:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001790:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	4618      	mov	r0, r3
 800179e:	f004 ffdf 	bl	8006760 <HAL_RCCEx_PeriphCLKConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80017a8:	f7ff fe8e 	bl	80014c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_SPI_MspInit+0xcc>)
 80017ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017b2:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <HAL_SPI_MspInit+0xcc>)
 80017b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_SPI_MspInit+0xcc>)
 80017be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_SPI_MspInit+0xcc>)
 80017cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017d0:	4a13      	ldr	r2, [pc, #76]	; (8001820 <HAL_SPI_MspInit+0xcc>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_SPI_MspInit+0xcc>)
 80017dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PCF8553_SCL_Pin|PCF8553_SDIO_Pin;
 80017e8:	2382      	movs	r3, #130	; 0x82
 80017ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001800:	2305      	movs	r3, #5
 8001802:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <HAL_SPI_MspInit+0xd0>)
 800180e:	f002 fd1d 	bl	800424c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001812:	bf00      	nop
 8001814:	37f0      	adds	r7, #240	; 0xf0
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40013000 	.word	0x40013000
 8001820:	46020c00 	.word	0x46020c00
 8001824:	42020000 	.word	0x42020000

08001828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0bc      	sub	sp, #240	; 0xf0
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	22c8      	movs	r2, #200	; 0xc8
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f013 fb01 	bl	8014e50 <memset>
  if(huart->Instance==USART1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a26      	ldr	r2, [pc, #152]	; (80018ec <HAL_UART_MspInit+0xc4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d145      	bne.n	80018e4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001858:	f04f 0201 	mov.w	r2, #1
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001864:	2301      	movs	r3, #1
 8001866:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	4618      	mov	r0, r3
 800186e:	f004 ff77 	bl	8006760 <HAL_RCCEx_PeriphCLKConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001878:	f7ff fe26 	bl	80014c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_UART_MspInit+0xc8>)
 800187e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001882:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <HAL_UART_MspInit+0xc8>)
 8001884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001888:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_UART_MspInit+0xc8>)
 800188e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_UART_MspInit+0xc8>)
 800189c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018a0:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <HAL_UART_MspInit+0xc8>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_UART_MspInit+0xc8>)
 80018ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018d2:	2307      	movs	r3, #7
 80018d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018dc:	4619      	mov	r1, r3
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <HAL_UART_MspInit+0xcc>)
 80018e0:	f002 fcb4 	bl	800424c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	37f0      	adds	r7, #240	; 0xf0
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40013800 	.word	0x40013800
 80018f0:	46020c00 	.word	0x46020c00
 80018f4:	42020000 	.word	0x42020000

080018f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08e      	sub	sp, #56	; 0x38
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001908:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_InitTick+0xcc>)
 800190a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800190e:	4a2d      	ldr	r2, [pc, #180]	; (80019c4 <HAL_InitTick+0xcc>)
 8001910:	f043 0310 	orr.w	r3, r3, #16
 8001914:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001918:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_InitTick+0xcc>)
 800191a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001926:	f107 0210 	add.w	r2, r7, #16
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f004 fe57 	bl	80065e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001936:	f004 fe19 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 800193a:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800193c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193e:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <HAL_InitTick+0xd0>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	0c9b      	lsrs	r3, r3, #18
 8001946:	3b01      	subs	r3, #1
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_InitTick+0xd4>)
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <HAL_InitTick+0xd8>)
 800194e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <HAL_InitTick+0xd4>)
 8001952:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001956:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001958:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <HAL_InitTick+0xd4>)
 800195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800195e:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <HAL_InitTick+0xd4>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_InitTick+0xd4>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800196a:	4818      	ldr	r0, [pc, #96]	; (80019cc <HAL_InitTick+0xd4>)
 800196c:	f008 fcc4 	bl	800a2f8 <HAL_TIM_Base_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8001976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800197a:	2b00      	cmp	r3, #0
 800197c:	d118      	bne.n	80019b0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800197e:	4813      	ldr	r0, [pc, #76]	; (80019cc <HAL_InitTick+0xd4>)
 8001980:	f008 fd1c 	bl	800a3bc <HAL_TIM_Base_Start_IT>
 8001984:	4603      	mov	r3, r0
 8001986:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 800198a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10e      	bne.n	80019b0 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d808      	bhi.n	80019aa <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001998:	2200      	movs	r2, #0
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	2031      	movs	r0, #49	; 0x31
 800199e:	f002 fc1f 	bl	80041e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019a2:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <HAL_InitTick+0xdc>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	e002      	b.n	80019b0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80019b0:	2031      	movs	r0, #49	; 0x31
 80019b2:	f002 fc2f 	bl	8004214 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80019b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3738      	adds	r7, #56	; 0x38
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	46020c00 	.word	0x46020c00
 80019c8:	431bde83 	.word	0x431bde83
 80019cc:	20001650 	.word	0x20001650
 80019d0:	40001000 	.word	0x40001000
 80019d4:	20000004 	.word	0x20000004

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <NMI_Handler+0x4>

080019de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <MemManage_Handler+0x4>

080019ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <BusFault_Handler+0x4>

080019f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <UsageFault_Handler+0x4>

080019f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <RTC_IRQHandler+0x10>)
 8001a0a:	f007 ffcf 	bl	80099ac <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200014fc 	.word	0x200014fc

08001a18 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001a1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a20:	f002 fe04 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001a2c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a30:	f002 fdfc 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <EXTI12_IRQHandler>:

/**
  * @brief This function handles EXTI Line12 interrupt.
  */
void EXTI12_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI12_IRQn 0 */

  /* USER CODE END EXTI12_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001a3c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a40:	f002 fdf4 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI12_IRQn 1 */

  /* USER CODE END EXTI12_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a50:	f002 fdec 	bl	800462c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <TIM6_IRQHandler+0x10>)
 8001a5e:	f008 fd4d 	bl	800a4fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20001650 	.word	0x20001650

08001a6c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <LPTIM1_IRQHandler+0x10>)
 8001a72:	f002 ff7e 	bl	8004972 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000145c 	.word	0x2000145c

08001a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a88:	4a14      	ldr	r2, [pc, #80]	; (8001adc <_sbrk+0x5c>)
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <_sbrk+0x60>)
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <_sbrk+0x64>)
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <_sbrk+0x68>)
 8001aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d207      	bcs.n	8001ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab0:	f013 f9a4 	bl	8014dfc <__errno>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	e009      	b.n	8001ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <_sbrk+0x64>)
 8001ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200c0000 	.word	0x200c0000
 8001ae0:	00000400 	.word	0x00000400
 8001ae4:	2000169c 	.word	0x2000169c
 8001ae8:	20001ec0 	.word	0x20001ec0

08001aec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <SystemInit+0x68>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af6:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <SystemInit+0x68>)
 8001af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <SystemInit+0x6c>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <SystemInit+0x6c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <SystemInit+0x6c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <SystemInit+0x6c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <SystemInit+0x6c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <SystemInit+0x6c>)
 8001b1e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b22:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b26:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <SystemInit+0x6c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <SystemInit+0x6c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <SystemInit+0x6c>)
 8001b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <SystemInit+0x6c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <SystemInit+0x68>)
 8001b42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b46:	609a      	str	r2, [r3, #8]
  #endif
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00
 8001b58:	46020c00 	.word	0x46020c00

08001b5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b94 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b60:	f7ff ffc4 	bl	8001aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b66:	e003      	b.n	8001b70 <LoopCopyDataInit>

08001b68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b6e:	3104      	adds	r1, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b70:	480a      	ldr	r0, [pc, #40]	; (8001b9c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b78:	d3f6      	bcc.n	8001b68 <CopyDataInit>
	ldr	r2, =_sbss
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b7c:	e002      	b.n	8001b84 <LoopFillZerobss>

08001b7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b80:	f842 3b04 	str.w	r3, [r2], #4

08001b84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <LoopForever+0x16>)
	cmp	r2, r3
 8001b86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b88:	d3f9      	bcc.n	8001b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f013 f93d 	bl	8014e08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b8e:	f7ff f87d 	bl	8000c8c <main>

08001b92 <LoopForever>:

LoopForever:
    b LoopForever
 8001b92:	e7fe      	b.n	8001b92 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001b94:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001b98:	08015c38 	.word	0x08015c38
	ldr	r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ba0:	200001b8 	.word	0x200001b8
	ldr	r2, =_sbss
 8001ba4:	200001b8 	.word	0x200001b8
	ldr	r3, = _ebss
 8001ba8:	20001eb9 	.word	0x20001eb9

08001bac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC1_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_Init+0x4c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a10      	ldr	r2, [pc, #64]	; (8001bfc <HAL_Init+0x4c>)
 8001bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	f002 fb02 	bl	80041ca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001bc6:	f004 fbaf 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <HAL_Init+0x50>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	490b      	ldr	r1, [pc, #44]	; (8001c04 <HAL_Init+0x54>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_Init+0x58>)
 8001bde:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001be0:	200f      	movs	r0, #15
 8001be2:	f7ff fe89 	bl	80018f8 <HAL_InitTick>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e002      	b.n	8001bf6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf0:	f7ff fc70 	bl	80014d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	46020c00 	.word	0x46020c00
 8001c04:	080159c0 	.word	0x080159c0
 8001c08:	20000000 	.word	0x20000000

08001c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	200016a0 	.word	0x200016a0

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	200016a0 	.word	0x200016a0

08001c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d005      	beq.n	8001c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_Delay+0x44>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffde 	bl	8001c34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8f7      	bhi.n	8001c74 <HAL_Delay+0x28>
  {
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008

08001c94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <HAL_GetREVID+0x18>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	b29b      	uxth	r3, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e0044000 	.word	0xe0044000

08001cb0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	601a      	str	r2, [r3, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	601a      	str	r2, [r3, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <LL_ADC_SetResolution+0x3c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d104      	bne.n	8001d38 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f023 020c 	bic.w	r2, r3, #12
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	60da      	str	r2, [r3, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	46021000 	.word	0x46021000

08001d58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3360      	adds	r3, #96	; 0x60
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	430b      	orrs	r3, r1
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001d8e:	bf00      	nop
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b085      	sub	sp, #20
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3360      	adds	r3, #96	; 0x60
 8001da8:	461a      	mov	r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b087      	sub	sp, #28
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3360      	adds	r3, #96	; 0x60
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	601a      	str	r2, [r3, #0]
}
 8001df0:	bf00      	nop
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3360      	adds	r3, #96	; 0x60
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	601a      	str	r2, [r3, #0]
}
 8001e26:	bf00      	nop
 8001e28:	371c      	adds	r7, #28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b087      	sub	sp, #28
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3360      	adds	r3, #96	; 0x60
 8001e42:	461a      	mov	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	601a      	str	r2, [r3, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	2a00      	cmp	r2, #0
 8001e92:	d002      	beq.n	8001e9a <LL_ADC_SetGainCompensation+0x32>
 8001e94:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e98:	e000      	b.n	8001e9c <LL_ADC_SetGainCompensation+0x34>
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2107      	movs	r1, #7
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	401a      	ands	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	431a      	orrs	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a2b      	ldr	r2, [pc, #172]	; (8001fd0 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d020      	beq.n	8001f6a <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3330      	adds	r3, #48	; 0x30
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	4413      	add	r3, r2
 8001f3a:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	211f      	movs	r1, #31
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	0e9b      	lsrs	r3, r3, #26
 8001f54:	f003 011f 	and.w	r1, r3, #31
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	431a      	orrs	r2, r3
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001f68:	e02b      	b.n	8001fc2 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	210f      	movs	r1, #15
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d104      	bne.n	8001f92 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	0e9b      	lsrs	r3, r3, #26
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	e010      	b.n	8001fb4 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e003      	b.n	8001fb4 <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	f001 011f 	and.w	r1, r1, #31
 8001fba:	408b      	lsls	r3, r1
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fc2:	bf00      	nop
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	46021000 	.word	0x46021000

08001fd4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d107      	bne.n	8001ff8 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	0e9b      	lsrs	r3, r3, #26
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	e015      	b.n	8002024 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	60fb      	str	r3, [r7, #12]
  return result;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 800200e:	2320      	movs	r3, #32
 8002010:	e003      	b.n	800201a <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	2201      	movs	r2, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800202e:	bf00      	nop
 8002030:	371c      	adds	r7, #28
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	0e9b      	lsrs	r3, r3, #26
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2101      	movs	r1, #1
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	401a      	ands	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800206c:	b480      	push	{r7}
 800206e:	b08b      	sub	sp, #44	; 0x2c
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4a2d      	ldr	r2, [pc, #180]	; (8002130 <LL_ADC_SetChannelSamplingTime+0xc4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d042      	beq.n	8002106 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d104      	bne.n	8002094 <LL_ADC_SetChannelSamplingTime+0x28>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	0e9b      	lsrs	r3, r3, #26
 800208e:	f003 021f 	and.w	r2, r3, #31
 8002092:	e011      	b.n	80020b8 <LL_ADC_SetChannelSamplingTime+0x4c>
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	617b      	str	r3, [r7, #20]
  return result;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80020aa:	2320      	movs	r3, #32
 80020ac:	e003      	b.n	80020b6 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	0e5b      	lsrs	r3, r3, #25
 80020bc:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80020c0:	460b      	mov	r3, r1
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	1ad2      	subs	r2, r2, r3
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3314      	adds	r3, #20
 80020d6:	461a      	mov	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	0e5b      	lsrs	r3, r3, #25
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	4413      	add	r3, r2
 80020e4:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	2107      	movs	r1, #7
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	401a      	ands	r2, r3
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	431a      	orrs	r2, r3
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002104:	e00e      	b.n	8002124 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	43db      	mvns	r3, r3
 8002110:	401a      	ands	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	0219      	lsls	r1, r3, #8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	400b      	ands	r3, r1
 800211a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800211e:	431a      	orrs	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	615a      	str	r2, [r3, #20]
}
 8002124:	bf00      	nop
 8002126:	372c      	adds	r7, #44	; 0x2c
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	46021000 	.word	0x46021000

08002134 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800214c:	43db      	mvns	r3, r3
 800214e:	401a      	ands	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0318 	and.w	r3, r3, #24
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002158:	40d9      	lsrs	r1, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	400b      	ands	r3, r1
 800215e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002162:	431a      	orrs	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	000fffff 	.word	0x000fffff

0800217c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800218c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6093      	str	r3, [r2, #8]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021b4:	d101      	bne.n	80021ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002204:	d101      	bne.n	800220a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002228:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	609a      	str	r2, [r3, #8]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002250:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002254:	f043 0202 	orr.w	r2, r3, #2
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <LL_ADC_IsEnabled+0x18>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <LL_ADC_IsEnabled+0x1a>
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d101      	bne.n	80022a6 <LL_ADC_IsDisableOngoing+0x18>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <LL_ADC_IsDisableOngoing+0x1a>
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022c8:	f043 0204 	orr.w	r2, r3, #4
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	609a      	str	r2, [r3, #8]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022f0:	f043 0210 	orr.w	r2, r3, #16
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b04      	cmp	r3, #4
 8002316:	d101      	bne.n	800231c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800233a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800233e:	f043 0220 	orr.w	r2, r3, #32
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	609a      	str	r2, [r3, #8]
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b08      	cmp	r3, #8
 8002364:	d101      	bne.n	800236a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e2b3      	b.n	8002900 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a8b      	ldr	r2, [pc, #556]	; (80025d4 <HAL_ADC_Init+0x25c>)
 80023a6:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff f8a9 	bl	8001508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fee9 	bl	80021a0 <LL_ADC_IsDeepPowerDownEnabled>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d004      	beq.n	80023de <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fecf 	bl	800217c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff04 	bl	80021f0 <LL_ADC_IsInternalRegulatorEnabled>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d115      	bne.n	800241a <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fee8 	bl	80021c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023f8:	4b77      	ldr	r3, [pc, #476]	; (80025d8 <HAL_ADC_Init+0x260>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	099b      	lsrs	r3, r3, #6
 80023fe:	4a77      	ldr	r2, [pc, #476]	; (80025dc <HAL_ADC_Init+0x264>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	099b      	lsrs	r3, r3, #6
 8002406:	3301      	adds	r3, #1
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800240c:	e002      	b.n	8002414 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	3b01      	subs	r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f9      	bne.n	800240e <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fee6 	bl	80021f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10e      	bne.n	8002448 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800242e:	f043 0210 	orr.w	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff59 	bl	8002304 <LL_ADC_REG_IsConversionOngoing>
 8002452:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b00      	cmp	r3, #0
 800245e:	f040 8244 	bne.w	80028ea <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f040 8240 	bne.w	80028ea <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800246e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002472:	f043 0202 	orr.w	r2, r3, #2
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fef2 	bl	8002268 <LL_ADC_IsEnabled>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d140      	bne.n	800250c <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a51      	ldr	r2, [pc, #324]	; (80025d4 <HAL_ADC_Init+0x25c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d028      	beq.n	80024e6 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a51      	ldr	r2, [pc, #324]	; (80025e0 <HAL_ADC_Init+0x268>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d109      	bne.n	80024b2 <HAL_ADC_Init+0x13a>
 800249e:	4850      	ldr	r0, [pc, #320]	; (80025e0 <HAL_ADC_Init+0x268>)
 80024a0:	f7ff fee2 	bl	8002268 <LL_ADC_IsEnabled>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf0c      	ite	eq
 80024aa:	2301      	moveq	r3, #1
 80024ac:	2300      	movne	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	e008      	b.n	80024c4 <HAL_ADC_Init+0x14c>
 80024b2:	4848      	ldr	r0, [pc, #288]	; (80025d4 <HAL_ADC_Init+0x25c>)
 80024b4:	f7ff fed8 	bl	8002268 <LL_ADC_IsEnabled>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d021      	beq.n	800250c <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a44      	ldr	r2, [pc, #272]	; (80025e0 <HAL_ADC_Init+0x268>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_Init+0x15e>
 80024d2:	4a44      	ldr	r2, [pc, #272]	; (80025e4 <HAL_ADC_Init+0x26c>)
 80024d4:	e000      	b.n	80024d8 <HAL_ADC_Init+0x160>
 80024d6:	4a44      	ldr	r2, [pc, #272]	; (80025e8 <HAL_ADC_Init+0x270>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4619      	mov	r1, r3
 80024de:	4610      	mov	r0, r2
 80024e0:	f7ff fbe6 	bl	8001cb0 <LL_ADC_SetCommonClock>
 80024e4:	e012      	b.n	800250c <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4619      	mov	r1, r3
 80024f0:	4610      	mov	r0, r2
 80024f2:	f7ff fc11 	bl	8001d18 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80024f6:	4b3c      	ldr	r3, [pc, #240]	; (80025e8 <HAL_ADC_Init+0x270>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002506:	4938      	ldr	r1, [pc, #224]	; (80025e8 <HAL_ADC_Init+0x270>)
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a30      	ldr	r2, [pc, #192]	; (80025d4 <HAL_ADC_Init+0x25c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d010      	beq.n	8002538 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800251c:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002522:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002528:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002530:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002532:	4313      	orrs	r3, r2
 8002534:	623b      	str	r3, [r7, #32]
 8002536:	e030      	b.n	800259a <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7f1b      	ldrb	r3, [r3, #28]
 800253c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002544:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002546:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800254c:	2a00      	cmp	r2, #0
 800254e:	d002      	beq.n	8002556 <HAL_ADC_Init+0x1de>
 8002550:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002554:	e000      	b.n	8002558 <HAL_ADC_Init+0x1e0>
 8002556:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002558:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800255e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	da04      	bge.n	8002572 <HAL_ADC_Init+0x1fa>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002570:	e001      	b.n	8002576 <HAL_ADC_Init+0x1fe>
 8002572:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8002576:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4918      	ldr	r1, [pc, #96]	; (80025e0 <HAL_ADC_Init+0x268>)
 800257e:	428b      	cmp	r3, r1
 8002580:	d103      	bne.n	800258a <HAL_ADC_Init+0x212>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002588:	e003      	b.n	8002592 <HAL_ADC_Init+0x21a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002590:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002592:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002594:	6a3a      	ldr	r2, [r7, #32]
 8002596:	4313      	orrs	r3, r2
 8002598:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d12f      	bne.n	8002604 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <HAL_ADC_Init+0x25c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d007      	beq.n	80025be <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	3b01      	subs	r3, #1
 80025b4:	045b      	lsls	r3, r3, #17
 80025b6:	6a3a      	ldr	r2, [r7, #32]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	623b      	str	r3, [r7, #32]
 80025bc:	e022      	b.n	8002604 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d111      	bne.n	80025ec <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ce:	623b      	str	r3, [r7, #32]
 80025d0:	e018      	b.n	8002604 <HAL_ADC_Init+0x28c>
 80025d2:	bf00      	nop
 80025d4:	46021000 	.word	0x46021000
 80025d8:	20000000 	.word	0x20000000
 80025dc:	053e2d63 	.word	0x053e2d63
 80025e0:	42028000 	.word	0x42028000
 80025e4:	42028308 	.word	0x42028308
 80025e8:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025f0:	f043 0220 	orr.w	r2, r3, #32
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025fc:	f043 0201 	orr.w	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a92      	ldr	r2, [pc, #584]	; (8002854 <HAL_ADC_Init+0x4dc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d018      	beq.n	8002640 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	4313      	orrs	r3, r2
 8002624:	6a3a      	ldr	r2, [r7, #32]
 8002626:	4313      	orrs	r3, r2
 8002628:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	4b89      	ldr	r3, [pc, #548]	; (8002858 <HAL_ADC_Init+0x4e0>)
 8002632:	4013      	ands	r3, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	6a39      	ldr	r1, [r7, #32]
 800263a:	430b      	orrs	r3, r1
 800263c:	60d3      	str	r3, [r2, #12]
 800263e:	e031      	b.n	80026a4 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002644:	2b00      	cmp	r3, #0
 8002646:	d009      	beq.n	800265c <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002654:	4313      	orrs	r3, r2
 8002656:	6a3a      	ldr	r2, [r7, #32]
 8002658:	4313      	orrs	r3, r2
 800265a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	4b7e      	ldr	r3, [pc, #504]	; (800285c <HAL_ADC_Init+0x4e4>)
 8002664:	4013      	ands	r3, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	6a39      	ldr	r1, [r7, #32]
 800266c:	430b      	orrs	r3, r1
 800266e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1a      	ldr	r2, [r3, #32]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d008      	beq.n	80026a4 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a6a      	ldr	r2, [pc, #424]	; (8002854 <HAL_ADC_Init+0x4dc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	f000 8093 	beq.w	80027d6 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fe25 	bl	8002304 <LL_ADC_REG_IsConversionOngoing>
 80026ba:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fe46 	bl	8002352 <LL_ADC_INJ_IsConversionOngoing>
 80026c6:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d161      	bne.n	8002792 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d15e      	bne.n	8002792 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	7f1b      	ldrb	r3, [r3, #28]
 80026d8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4960      	ldr	r1, [pc, #384]	; (8002860 <HAL_ADC_Init+0x4e8>)
 80026e0:	428b      	cmp	r3, r1
 80026e2:	d102      	bne.n	80026ea <HAL_ADC_Init+0x372>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	e002      	b.n	80026f0 <HAL_ADC_Init+0x378>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ee:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026f0:	4313      	orrs	r3, r2
 80026f2:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	6a39      	ldr	r1, [r7, #32]
 8002708:	430b      	orrs	r3, r1
 800270a:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f7ff fba2 	bl	8001e68 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800272a:	2b01      	cmp	r3, #1
 800272c:	d11e      	bne.n	800276c <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002732:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	4b4a      	ldr	r3, [pc, #296]	; (8002864 <HAL_ADC_Init+0x4ec>)
 800273c:	4013      	ands	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002742:	0411      	lsls	r1, r2, #16
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002748:	4311      	orrs	r1, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800274e:	4311      	orrs	r1, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002754:	4311      	orrs	r1, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800275a:	0892      	lsrs	r2, r2, #2
 800275c:	430a      	orrs	r2, r1
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	611a      	str	r2, [r3, #16]
 800276a:	e007      	b.n	800277c <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d10c      	bne.n	80027b4 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	f023 010f 	bic.w	r1, r3, #15
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	1e5a      	subs	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
 80027b2:	e007      	b.n	80027c4 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 020f 	bic.w	r2, r2, #15
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027c8:	f023 0303 	bic.w	r3, r3, #3
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80027d4:	e092      	b.n	80028fc <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d111      	bne.n	8002804 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80027e8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80027ee:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80027f4:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_ADC_Init+0x4f0>)
 800280c:	4013      	ands	r3, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	69f9      	ldr	r1, [r7, #28]
 8002814:	430b      	orrs	r3, r1
 8002816:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002820:	461a      	mov	r2, r3
 8002822:	2100      	movs	r1, #0
 8002824:	f7ff fb43 	bl	8001eae <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002830:	461a      	mov	r2, r3
 8002832:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8002836:	f7ff fb3a 	bl	8001eae <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d114      	bne.n	800286c <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f062 020f 	orn	r2, r2, #15
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
 8002852:	e024      	b.n	800289e <HAL_ADC_Init+0x526>
 8002854:	46021000 	.word	0x46021000
 8002858:	fff0c013 	.word	0xfff0c013
 800285c:	ffde800d 	.word	0xffde800d
 8002860:	42028000 	.word	0x42028000
 8002864:	fc00f81e 	.word	0xfc00f81e
 8002868:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002874:	d113      	bne.n	800289e <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	3b01      	subs	r3, #1
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	f003 031c 	and.w	r3, r3, #28
 8002888:	f06f 020f 	mvn.w	r2, #15
 800288c:	fa02 f103 	lsl.w	r1, r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <HAL_ADC_Init+0x590>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	6a3a      	ldr	r2, [r7, #32]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d10b      	bne.n	80028c6 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b8:	f023 0303 	bic.w	r3, r3, #3
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80028c4:	e01a      	b.n	80028fc <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ca:	f023 0312 	bic.w	r3, r3, #18
 80028ce:	f043 0210 	orr.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028da:	f043 0201 	orr.w	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80028e8:	e008      	b.n	80028fc <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ee:	f043 0210 	orr.w	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 80028fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002900:	4618      	mov	r0, r3
 8002902:	3728      	adds	r7, #40	; 0x28
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	833ffff3 	.word	0x833ffff3

0800290c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fcf3 	bl	8002304 <LL_ADC_REG_IsConversionOngoing>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d15d      	bne.n	80029e0 <HAL_ADC_Start+0xd4>
  {
    __HAL_LOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_ADC_Start+0x26>
 800292e:	2302      	movs	r3, #2
 8002930:	e059      	b.n	80029e6 <HAL_ADC_Start+0xda>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f001 f916 	bl	8003b6c <ADC_Enable>
 8002940:	4603      	mov	r3, r0
 8002942:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d145      	bne.n	80029d6 <HAL_ADC_Start+0xca>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800294e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a23      	ldr	r2, [pc, #140]	; (80029f0 <HAL_ADC_Start+0xe4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d011      	beq.n	800298c <HAL_ADC_Start+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800296c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002974:	d106      	bne.n	8002984 <HAL_ADC_Start+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800297a:	f023 0206 	bic.w	r2, r3, #6
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	67da      	str	r2, [r3, #124]	; 0x7c
 8002982:	e006      	b.n	8002992 <HAL_ADC_Start+0x86>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	67da      	str	r2, [r3, #124]	; 0x7c
 800298a:	e002      	b.n	8002992 <HAL_ADC_Start+0x86>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	221c      	movs	r2, #28
 8002998:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <HAL_ADC_Start+0xe4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_ADC_Start+0xbe>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }

        }
#else
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_ADC_Start+0xbe>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fc70 	bl	80022b4 <LL_ADC_REG_StartConversion>
 80029d4:	e006      	b.n	80029e4 <HAL_ADC_Start+0xd8>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80029de:	e001      	b.n	80029e4 <HAL_ADC_Start+0xd8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
 80029e2:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	46021000 	.word	0x46021000

080029f4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_Stop+0x16>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e023      	b.n	8002a52 <HAL_ADC_Stop+0x5e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002a12:	2103      	movs	r1, #3
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 ffed 	bl	80039f4 <ADC_ConversionStop>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d111      	bne.n	8002a48 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f001 f911 	bl	8003c4c <ADC_Disable>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d102      	bne.n	8002a74 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002a6e:	2308      	movs	r3, #8
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	e027      	b.n	8002ac4 <HAL_ADC_PollForConversion+0x68>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a6a      	ldr	r2, [pc, #424]	; (8002c24 <HAL_ADC_PollForConversion+0x1c8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d011      	beq.n	8002aa2 <HAL_ADC_PollForConversion+0x46>
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_ADC_PollForConversion+0x40>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0be      	b.n	8002c1a <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	e010      	b.n	8002ac4 <HAL_ADC_PollForConversion+0x68>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <HAL_ADC_PollForConversion+0x64>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0ac      	b.n	8002c1a <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002ac4:	f7ff f8b6 	bl	8001c34 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002aca:	e021      	b.n	8002b10 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad2:	d01d      	beq.n	8002b10 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002ad4:	f7ff f8ae 	bl	8001c34 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d302      	bcc.n	8002aea <HAL_ADC_PollForConversion+0x8e>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d112      	bne.n	8002b10 <HAL_ADC_PollForConversion+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <HAL_ADC_PollForConversion+0xb4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e084      	b.n	8002c1a <HAL_ADC_PollForConversion+0x1be>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0d6      	beq.n	8002acc <HAL_ADC_PollForConversion+0x70>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff f9dc 	bl	8001eec <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d06e      	beq.n	8002c18 <HAL_ADC_PollForConversion+0x1bc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d169      	bne.n	8002c18 <HAL_ADC_PollForConversion+0x1bc>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a36      	ldr	r2, [pc, #216]	; (8002c24 <HAL_ADC_PollForConversion+0x1c8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d02e      	beq.n	8002bac <HAL_ADC_PollForConversion+0x150>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d111      	bne.n	8002b80 <HAL_ADC_PollForConversion+0x124>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_ADC_PollForConversion+0x124>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b78:	f043 0201 	orr.w	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	679a      	str	r2, [r3, #120]	; 0x78
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d104      	bne.n	8002b98 <HAL_ADC_PollForConversion+0x13c>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2208      	movs	r2, #8
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e03f      	b.n	8002c18 <HAL_ADC_PollForConversion+0x1bc>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d13a      	bne.n	8002c18 <HAL_ADC_PollForConversion+0x1bc>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	e035      	b.n	8002c18 <HAL_ADC_PollForConversion+0x1bc>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d126      	bne.n	8002c08 <HAL_ADC_PollForConversion+0x1ac>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fba0 	bl	8002304 <LL_ADC_REG_IsConversionOngoing>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d112      	bne.n	8002bf0 <HAL_ADC_PollForConversion+0x194>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 020c 	bic.w	r2, r2, #12
 8002bd8:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be2:	f023 0301 	bic.w	r3, r3, #1
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	679a      	str	r2, [r3, #120]	; 0x78
 8002bee:	e00b      	b.n	8002c08 <HAL_ADC_PollForConversion+0x1ac>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c00:	f043 0201 	orr.w	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7f1b      	ldrb	r3, [r3, #28]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d103      	bne.n	8002c18 <HAL_ADC_PollForConversion+0x1bc>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	220c      	movs	r2, #12
 8002c16:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	46021000 	.word	0x46021000

08002c28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b0bc      	sub	sp, #240	; 0xf0
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4aa8      	ldr	r2, [pc, #672]	; (8002f00 <HAL_ADC_ConfigChannel+0x2bc>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d103      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d102      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x36>
 8002c74:	2302      	movs	r3, #2
 8002c76:	f000 beb5 	b.w	80039e4 <HAL_ADC_ConfigChannel+0xda0>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fb3c 	bl	8002304 <LL_ADC_REG_IsConversionOngoing>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 8695 	bne.w	80039be <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a99      	ldr	r2, [pc, #612]	; (8002f00 <HAL_ADC_ConfigChannel+0x2bc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	f000 83ea 	beq.w	8003474 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d108      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x7a>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	e01d      	b.n	8002cfa <HAL_ADC_ConfigChannel+0xb6>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return result;
 8002cd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (value == 0U)
 8002cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	e004      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	69d1      	ldr	r1, [r2, #28]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	f7ff f8fd 	bl	8001f14 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff faf0 	bl	8002304 <LL_ADC_REG_IsConversionOngoing>
 8002d24:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fb10 	bl	8002352 <LL_ADC_INJ_IsConversionOngoing>
 8002d32:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 81ed 	bne.w	800311a <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f040 81e8 	bne.w	800311a <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f7ff f988 	bl	800206c <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d046      	beq.n	8002e0c <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6919      	ldr	r1, [r3, #16]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d8e:	f7fe ffe3 	bl	8001d58 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6919      	ldr	r1, [r3, #16]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f7ff f811 	bl	8001dc6 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	7e9b      	ldrb	r3, [r3, #26]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d11e      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x17e>
 8002dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dc0:	e000      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x180>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f7ff f834 	bl	8001e32 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d102      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x19c>
 8002dda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002dde:	e000      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x19e>
 8002de0:	2300      	movs	r3, #0
 8002de2:	461a      	mov	r2, r3
 8002de4:	f7ff f80a 	bl	8001dfc <LL_ADC_SetOffsetSignedSaturation>
 8002de8:	e197      	b.n	800311a <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2200      	movs	r2, #0
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7ff f81c 	bl	8001e32 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2200      	movs	r2, #0
 8002e04:	4619      	mov	r1, r3
 8002e06:	f7fe fff9 	bl	8001dfc <LL_ADC_SetOffsetSignedSaturation>
 8002e0a:	e186      	b.n	800311a <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2100      	movs	r1, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe ffc1 	bl	8001d9a <LL_ADC_GetOffsetChannel>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10a      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x1f4>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe ffb6 	bl	8001d9a <LL_ADC_GetOffsetChannel>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	0e9b      	lsrs	r3, r3, #26
 8002e32:	f003 021f 	and.w	r2, r3, #31
 8002e36:	e01e      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x232>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe ffab 	bl	8001d9a <LL_ADC_GetOffsetChannel>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return result;
 8002e56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (value == 0U)
 8002e5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002e66:	2320      	movs	r3, #32
 8002e68:	e004      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d105      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x24a>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	0e9b      	lsrs	r3, r3, #26
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	e018      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x27c>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002ea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ea6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002eaa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	e004      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002eb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d107      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	2100      	movs	r1, #0
 8002ed0:	f7fe ff42 	bl	8001d58 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2101      	movs	r1, #1
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe ff5d 	bl	8001d9a <LL_ADC_GetOffsetChannel>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x2c0>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2101      	movs	r1, #1
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe ff52 	bl	8001d9a <LL_ADC_GetOffsetChannel>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	f003 021f 	and.w	r2, r3, #31
 8002efe:	e020      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x2fe>
 8002f00:	46021000 	.word	0x46021000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe ff45 	bl	8001d9a <LL_ADC_GetOffsetChannel>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002f22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002f2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002f32:	2320      	movs	r3, #32
 8002f34:	e004      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002f36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d105      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x316>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	0e9b      	lsrs	r3, r3, #26
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	e018      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x348>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002f76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8002f7e:	2320      	movs	r3, #32
 8002f80:	e004      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002f82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d107      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	f7fe fedc 	bl	8001d58 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2102      	movs	r1, #2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fef7 	bl	8001d9a <LL_ADC_GetOffsetChannel>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10a      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x388>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2102      	movs	r1, #2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe feec 	bl	8001d9a <LL_ADC_GetOffsetChannel>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	0e9b      	lsrs	r3, r3, #26
 8002fc6:	f003 021f 	and.w	r2, r3, #31
 8002fca:	e01e      	b.n	800300a <HAL_ADC_ConfigChannel+0x3c6>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fee1 	bl	8001d9a <LL_ADC_GetOffsetChannel>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002ff2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	e004      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002ffe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d105      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x3de>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	0e9b      	lsrs	r3, r3, #26
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	e018      	b.n	8003054 <HAL_ADC_ConfigChannel+0x410>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003036:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800303a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800303e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8003046:	2320      	movs	r3, #32
 8003048:	e004      	b.n	8003054 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 800304a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003054:	429a      	cmp	r2, r3
 8003056:	d107      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	2300      	movs	r3, #0
 8003062:	2102      	movs	r1, #2
 8003064:	f7fe fe78 	bl	8001d58 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2103      	movs	r1, #3
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe fe93 	bl	8001d9a <LL_ADC_GetOffsetChannel>
 8003074:	4603      	mov	r3, r0
 8003076:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x450>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2103      	movs	r1, #3
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe fe88 	bl	8001d9a <LL_ADC_GetOffsetChannel>
 800308a:	4603      	mov	r3, r0
 800308c:	0e9b      	lsrs	r3, r3, #26
 800308e:	f003 021f 	and.w	r2, r3, #31
 8003092:	e01a      	b.n	80030ca <HAL_ADC_ConfigChannel+0x486>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2103      	movs	r1, #3
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe fe7d 	bl	8001d9a <LL_ADC_GetOffsetChannel>
 80030a0:	4603      	mov	r3, r0
 80030a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80030ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80030b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 80030ba:	2320      	movs	r3, #32
 80030bc:	e004      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 80030be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d105      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x49e>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	0e9b      	lsrs	r3, r3, #26
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	e011      	b.n	8003106 <HAL_ADC_ConfigChannel+0x4c2>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80030f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 80030fa:	2320      	movs	r3, #32
 80030fc:	e003      	b.n	8003106 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 80030fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003106:	429a      	cmp	r2, r3
 8003108:	d107      	bne.n	800311a <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	2300      	movs	r3, #0
 8003114:	2103      	movs	r1, #3
 8003116:	f7fe fe1f 	bl	8001d58 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff f8a2 	bl	8002268 <LL_ADC_IsEnabled>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 8456 	bne.w	80039d8 <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	461a      	mov	r2, r3
 800313a:	f7fe fffb 	bl	8002134 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003146:	f040 80d6 	bne.w	80032f6 <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10b      	bne.n	800316e <HAL_ADC_ConfigChannel+0x52a>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	0e9b      	lsrs	r3, r3, #26
 800315c:	3301      	adds	r3, #1
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	2b09      	cmp	r3, #9
 8003164:	bf94      	ite	ls
 8003166:	2301      	movls	r3, #1
 8003168:	2300      	movhi	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	e019      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x55e>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800317c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800317e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8003186:	2320      	movs	r3, #32
 8003188:	e003      	b.n	8003192 <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 800318a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	2b09      	cmp	r3, #9
 800319a:	bf94      	ite	ls
 800319c:	2301      	movls	r3, #1
 800319e:	2300      	movhi	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d04d      	beq.n	8003242 <HAL_ADC_ConfigChannel+0x5fe>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d107      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x57e>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	0e9b      	lsrs	r3, r3, #26
 80031b8:	3301      	adds	r3, #1
 80031ba:	069b      	lsls	r3, r3, #26
 80031bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031c0:	e015      	b.n	80031ee <HAL_ADC_ConfigChannel+0x5aa>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80031d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80031d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 80031da:	2320      	movs	r3, #32
 80031dc:	e003      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 80031de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	069b      	lsls	r3, r3, #26
 80031ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_ADC_ConfigChannel+0x5ca>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	0e9b      	lsrs	r3, r3, #26
 8003200:	3301      	adds	r3, #1
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	e017      	b.n	800323e <HAL_ADC_ConfigChannel+0x5fa>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800321c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800321e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8003226:	2320      	movs	r3, #32
 8003228:	e003      	b.n	8003232 <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 800322a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	3301      	adds	r3, #1
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	2101      	movs	r1, #1
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	4313      	orrs	r3, r2
 8003240:	e04e      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x69c>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d107      	bne.n	800325e <HAL_ADC_ConfigChannel+0x61a>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	0e9b      	lsrs	r3, r3, #26
 8003254:	3301      	adds	r3, #1
 8003256:	069b      	lsls	r3, r3, #26
 8003258:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800325c:	e015      	b.n	800328a <HAL_ADC_ConfigChannel+0x646>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800326c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 8003276:	2320      	movs	r3, #32
 8003278:	e003      	b.n	8003282 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 800327a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	3301      	adds	r3, #1
 8003284:	069b      	lsls	r3, r3, #26
 8003286:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x666>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	0e9b      	lsrs	r3, r3, #26
 800329c:	3301      	adds	r3, #1
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	e017      	b.n	80032da <HAL_ADC_ConfigChannel+0x696>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80032bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 80032c2:	2320      	movs	r3, #32
 80032c4:	e003      	b.n	80032ce <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 80032c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	3301      	adds	r3, #1
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	2101      	movs	r1, #1
 80032d6:	fa01 f303 	lsl.w	r3, r1, r3
 80032da:	4313      	orrs	r3, r2
 80032dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	461a      	mov	r2, r3
 80032ee:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80032f2:	f7fe febb 	bl	800206c <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f280 836c 	bge.w	80039d8 <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a97      	ldr	r2, [pc, #604]	; (8003564 <HAL_ADC_ConfigChannel+0x920>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <HAL_ADC_ConfigChannel+0x6ca>
 800330a:	4b97      	ldr	r3, [pc, #604]	; (8003568 <HAL_ADC_ConfigChannel+0x924>)
 800330c:	e000      	b.n	8003310 <HAL_ADC_ConfigChannel+0x6cc>
 800330e:	4b97      	ldr	r3, [pc, #604]	; (800356c <HAL_ADC_ConfigChannel+0x928>)
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe fcf3 	bl	8001cfc <LL_ADC_GetCommonPathInternalCh>
 8003316:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a91      	ldr	r2, [pc, #580]	; (8003564 <HAL_ADC_ConfigChannel+0x920>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d109      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x6f4>
 8003324:	488f      	ldr	r0, [pc, #572]	; (8003564 <HAL_ADC_ConfigChannel+0x920>)
 8003326:	f7fe ff9f 	bl	8002268 <LL_ADC_IsEnabled>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e008      	b.n	800334a <HAL_ADC_ConfigChannel+0x706>
 8003338:	488d      	ldr	r0, [pc, #564]	; (8003570 <HAL_ADC_ConfigChannel+0x92c>)
 800333a:	f7fe ff95 	bl	8002268 <LL_ADC_IsEnabled>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8088 	beq.w	8003460 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a87      	ldr	r2, [pc, #540]	; (8003574 <HAL_ADC_ConfigChannel+0x930>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d132      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800335a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d12c      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a7e      	ldr	r2, [pc, #504]	; (8003564 <HAL_ADC_ConfigChannel+0x920>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d005      	beq.n	800337c <HAL_ADC_ConfigChannel+0x738>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a7e      	ldr	r2, [pc, #504]	; (8003570 <HAL_ADC_ConfigChannel+0x92c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	f040 832b 	bne.w	80039d2 <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a78      	ldr	r2, [pc, #480]	; (8003564 <HAL_ADC_ConfigChannel+0x920>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d101      	bne.n	800338a <HAL_ADC_ConfigChannel+0x746>
 8003386:	4a78      	ldr	r2, [pc, #480]	; (8003568 <HAL_ADC_ConfigChannel+0x924>)
 8003388:	e000      	b.n	800338c <HAL_ADC_ConfigChannel+0x748>
 800338a:	4a78      	ldr	r2, [pc, #480]	; (800356c <HAL_ADC_ConfigChannel+0x928>)
 800338c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f7fe fc9d 	bl	8001cd6 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800339c:	4b76      	ldr	r3, [pc, #472]	; (8003578 <HAL_ADC_ConfigChannel+0x934>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	4a76      	ldr	r2, [pc, #472]	; (800357c <HAL_ADC_ConfigChannel+0x938>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	3301      	adds	r3, #1
 80033ac:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80033ae:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80033b0:	e002      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f9      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033be:	e308      	b.n	80039d2 <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a6e      	ldr	r2, [pc, #440]	; (8003580 <HAL_ADC_ConfigChannel+0x93c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d121      	bne.n	800340e <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d11b      	bne.n	800340e <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a62      	ldr	r2, [pc, #392]	; (8003564 <HAL_ADC_ConfigChannel+0x920>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d005      	beq.n	80033ec <HAL_ADC_ConfigChannel+0x7a8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a62      	ldr	r2, [pc, #392]	; (8003570 <HAL_ADC_ConfigChannel+0x92c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	f040 82f5 	bne.w	80039d6 <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a5c      	ldr	r2, [pc, #368]	; (8003564 <HAL_ADC_ConfigChannel+0x920>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x7b6>
 80033f6:	4a5c      	ldr	r2, [pc, #368]	; (8003568 <HAL_ADC_ConfigChannel+0x924>)
 80033f8:	e000      	b.n	80033fc <HAL_ADC_ConfigChannel+0x7b8>
 80033fa:	4a5c      	ldr	r2, [pc, #368]	; (800356c <HAL_ADC_ConfigChannel+0x928>)
 80033fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003400:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f7fe fc65 	bl	8001cd6 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800340c:	e2e3      	b.n	80039d6 <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a5c      	ldr	r2, [pc, #368]	; (8003584 <HAL_ADC_ConfigChannel+0x940>)
 8003414:	4293      	cmp	r3, r2
 8003416:	f040 82df 	bne.w	80039d8 <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800341a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 82d8 	bne.w	80039d8 <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a4d      	ldr	r2, [pc, #308]	; (8003564 <HAL_ADC_ConfigChannel+0x920>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d005      	beq.n	800343e <HAL_ADC_ConfigChannel+0x7fa>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a4e      	ldr	r2, [pc, #312]	; (8003570 <HAL_ADC_ConfigChannel+0x92c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	f040 82cd 	bne.w	80039d8 <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a48      	ldr	r2, [pc, #288]	; (8003564 <HAL_ADC_ConfigChannel+0x920>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d101      	bne.n	800344c <HAL_ADC_ConfigChannel+0x808>
 8003448:	4a47      	ldr	r2, [pc, #284]	; (8003568 <HAL_ADC_ConfigChannel+0x924>)
 800344a:	e000      	b.n	800344e <HAL_ADC_ConfigChannel+0x80a>
 800344c:	4a47      	ldr	r2, [pc, #284]	; (800356c <HAL_ADC_ConfigChannel+0x928>)
 800344e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003452:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003456:	4619      	mov	r1, r3
 8003458:	4610      	mov	r0, r2
 800345a:	f7fe fc3c 	bl	8001cd6 <LL_ADC_SetCommonPathInternalCh>
 800345e:	e2bb      	b.n	80039d8 <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003464:	f043 0220 	orr.w	r2, r3, #32
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8003472:	e2b1      	b.n	80039d8 <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 800347c:	f7fe fc0a 	bl	8001c94 <HAL_GetREVID>
 8003480:	4603      	mov	r3, r0
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	d130      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a3e      	ldr	r2, [pc, #248]	; (8003588 <HAL_ADC_ConfigChannel+0x944>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d103      	bne.n	800349a <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003492:	4b3e      	ldr	r3, [pc, #248]	; (800358c <HAL_ADC_ConfigChannel+0x948>)
 8003494:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003498:	e027      	b.n	80034ea <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a3c      	ldr	r2, [pc, #240]	; (8003590 <HAL_ADC_ConfigChannel+0x94c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d103      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 80034a4:	4b3b      	ldr	r3, [pc, #236]	; (8003594 <HAL_ADC_ConfigChannel+0x950>)
 80034a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034aa:	e01e      	b.n	80034ea <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a39      	ldr	r2, [pc, #228]	; (8003598 <HAL_ADC_ConfigChannel+0x954>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d103      	bne.n	80034be <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 80034b6:	4b39      	ldr	r3, [pc, #228]	; (800359c <HAL_ADC_ConfigChannel+0x958>)
 80034b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034bc:	e015      	b.n	80034ea <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a37      	ldr	r2, [pc, #220]	; (80035a0 <HAL_ADC_ConfigChannel+0x95c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d103      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 80034c8:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_ADC_ConfigChannel+0x960>)
 80034ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034ce:	e00c      	b.n	80034ea <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a34      	ldr	r2, [pc, #208]	; (80035a8 <HAL_ADC_ConfigChannel+0x964>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d103      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 80034da:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <HAL_ADC_ConfigChannel+0x95c>)
 80034dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034e0:	e003      	b.n	80034ea <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	f000 81a2 	beq.w	8003838 <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034fc:	d004      	beq.n	8003508 <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003502:	4a2a      	ldr	r2, [pc, #168]	; (80035ac <HAL_ADC_ConfigChannel+0x968>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d107      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe fd5f 	bl	8001fd4 <LL_ADC_REG_SetSequencerChAdd>
 8003516:	e0c1      	b.n	800369c <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	210f      	movs	r1, #15
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	401a      	ands	r2, r3
 8003530:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003534:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x904>
 800353c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003540:	0e9b      	lsrs	r3, r3, #26
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	e037      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x974>
 8003548:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d127      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 8003560:	2320      	movs	r3, #32
 8003562:	e029      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x974>
 8003564:	42028000 	.word	0x42028000
 8003568:	42028308 	.word	0x42028308
 800356c:	46021308 	.word	0x46021308
 8003570:	46021000 	.word	0x46021000
 8003574:	ce080000 	.word	0xce080000
 8003578:	20000000 	.word	0x20000000
 800357c:	053e2d63 	.word	0x053e2d63
 8003580:	ca040000 	.word	0xca040000
 8003584:	80000001 	.word	0x80000001
 8003588:	b6002000 	.word	0xb6002000
 800358c:	da400000 	.word	0xda400000
 8003590:	ba004000 	.word	0xba004000
 8003594:	de800000 	.word	0xde800000
 8003598:	b2001000 	.word	0xb2001000
 800359c:	81000001 	.word	0x81000001
 80035a0:	d6200000 	.word	0xd6200000
 80035a4:	d2100000 	.word	0xd2100000
 80035a8:	d7200000 	.word	0xd7200000
 80035ac:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80035b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	6839      	ldr	r1, [r7, #0]
 80035ba:	6849      	ldr	r1, [r1, #4]
 80035bc:	f001 011f 	and.w	r1, r1, #31
 80035c0:	408b      	lsls	r3, r1
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d860      	bhi.n	800369c <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80035da:	f7fe fb5b 	bl	8001c94 <HAL_GetREVID>
 80035de:	4603      	mov	r3, r0
 80035e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e4:	d851      	bhi.n	800368a <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 80035e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x9c4>
 80035f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035f6:	0e9b      	lsrs	r3, r3, #26
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	2b13      	cmp	r3, #19
 80035fe:	bf8c      	ite	hi
 8003600:	2301      	movhi	r3, #1
 8003602:	2300      	movls	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e016      	b.n	8003636 <HAL_ADC_ConfigChannel+0x9f2>
 8003608:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800360c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	fa93 f3a3 	rbit	r3, r3
 8003614:	61bb      	str	r3, [r7, #24]
  return result;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 8003620:	2320      	movs	r3, #32
 8003622:	e003      	b.n	800362c <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b13      	cmp	r3, #19
 800362e:	bf8c      	ite	hi
 8003630:	2301      	movhi	r3, #1
 8003632:	2300      	movls	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d027      	beq.n	800368a <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 800363a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800363e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <HAL_ADC_ConfigChannel+0xa16>
 8003646:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800364a:	0e9b      	lsrs	r3, r3, #26
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	3b09      	subs	r3, #9
 8003652:	2201      	movs	r2, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	e015      	b.n	8003686 <HAL_ADC_ConfigChannel+0xa42>
 800365a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800365e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	60fb      	str	r3, [r7, #12]
  return result;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 8003672:	2320      	movs	r3, #32
 8003674:	e003      	b.n	800367e <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	3b09      	subs	r3, #9
 8003680:	2201      	movs	r2, #1
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003696:	4619      	mov	r1, r3
 8003698:	f7fe fc3c 	bl	8001f14 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	461a      	mov	r2, r3
 80036a6:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80036aa:	f7fe fcdf 	bl	800206c <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f280 8190 	bge.w	80039d8 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a97      	ldr	r2, [pc, #604]	; (800391c <HAL_ADC_ConfigChannel+0xcd8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d101      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0xa82>
 80036c2:	4b97      	ldr	r3, [pc, #604]	; (8003920 <HAL_ADC_ConfigChannel+0xcdc>)
 80036c4:	e000      	b.n	80036c8 <HAL_ADC_ConfigChannel+0xa84>
 80036c6:	4b97      	ldr	r3, [pc, #604]	; (8003924 <HAL_ADC_ConfigChannel+0xce0>)
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe fb17 	bl	8001cfc <LL_ADC_GetCommonPathInternalCh>
 80036ce:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a94      	ldr	r2, [pc, #592]	; (8003928 <HAL_ADC_ConfigChannel+0xce4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d126      	bne.n	800372a <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d120      	bne.n	800372a <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a8b      	ldr	r2, [pc, #556]	; (800391c <HAL_ADC_ConfigChannel+0xcd8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0xab2>
 80036f2:	4a8b      	ldr	r2, [pc, #556]	; (8003920 <HAL_ADC_ConfigChannel+0xcdc>)
 80036f4:	e000      	b.n	80036f8 <HAL_ADC_ConfigChannel+0xab4>
 80036f6:	4a8b      	ldr	r2, [pc, #556]	; (8003924 <HAL_ADC_ConfigChannel+0xce0>)
 80036f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003700:	4619      	mov	r1, r3
 8003702:	4610      	mov	r0, r2
 8003704:	f7fe fae7 	bl	8001cd6 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003708:	4b88      	ldr	r3, [pc, #544]	; (800392c <HAL_ADC_ConfigChannel+0xce8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	099b      	lsrs	r3, r3, #6
 800370e:	4a88      	ldr	r2, [pc, #544]	; (8003930 <HAL_ADC_ConfigChannel+0xcec>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800371a:	e002      	b.n	8003722 <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	3b01      	subs	r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f9      	bne.n	800371c <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003728:	e067      	b.n	80037fa <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a81      	ldr	r2, [pc, #516]	; (8003934 <HAL_ADC_ConfigChannel+0xcf0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d116      	bne.n	8003762 <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800373c:	2b00      	cmp	r3, #0
 800373e:	d110      	bne.n	8003762 <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a75      	ldr	r2, [pc, #468]	; (800391c <HAL_ADC_ConfigChannel+0xcd8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <HAL_ADC_ConfigChannel+0xb0a>
 800374a:	4a75      	ldr	r2, [pc, #468]	; (8003920 <HAL_ADC_ConfigChannel+0xcdc>)
 800374c:	e000      	b.n	8003750 <HAL_ADC_ConfigChannel+0xb0c>
 800374e:	4a75      	ldr	r2, [pc, #468]	; (8003924 <HAL_ADC_ConfigChannel+0xce0>)
 8003750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f7fe fabb 	bl	8001cd6 <LL_ADC_SetCommonPathInternalCh>
 8003760:	e04b      	b.n	80037fa <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a74      	ldr	r2, [pc, #464]	; (8003938 <HAL_ADC_ConfigChannel+0xcf4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d116      	bne.n	800379a <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800376c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d110      	bne.n	800379a <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a67      	ldr	r2, [pc, #412]	; (800391c <HAL_ADC_ConfigChannel+0xcd8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d101      	bne.n	8003786 <HAL_ADC_ConfigChannel+0xb42>
 8003782:	4a67      	ldr	r2, [pc, #412]	; (8003920 <HAL_ADC_ConfigChannel+0xcdc>)
 8003784:	e000      	b.n	8003788 <HAL_ADC_ConfigChannel+0xb44>
 8003786:	4a67      	ldr	r2, [pc, #412]	; (8003924 <HAL_ADC_ConfigChannel+0xce0>)
 8003788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f7fe fa9f 	bl	8001cd6 <LL_ADC_SetCommonPathInternalCh>
 8003798:	e02f      	b.n	80037fa <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a67      	ldr	r2, [pc, #412]	; (800393c <HAL_ADC_ConfigChannel+0xcf8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d12a      	bne.n	80037fa <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d124      	bne.n	80037fa <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a62      	ldr	r2, [pc, #392]	; (8003940 <HAL_ADC_ConfigChannel+0xcfc>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d11f      	bne.n	80037fa <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a57      	ldr	r2, [pc, #348]	; (800391c <HAL_ADC_ConfigChannel+0xcd8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0xb84>
 80037c4:	4a56      	ldr	r2, [pc, #344]	; (8003920 <HAL_ADC_ConfigChannel+0xcdc>)
 80037c6:	e000      	b.n	80037ca <HAL_ADC_ConfigChannel+0xb86>
 80037c8:	4a56      	ldr	r2, [pc, #344]	; (8003924 <HAL_ADC_ConfigChannel+0xce0>)
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f7fe fa7e 	bl	8001cd6 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80037da:	f7fe fa5b 	bl	8001c94 <HAL_GetREVID>
 80037de:	4603      	mov	r3, r0
 80037e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e4:	d809      	bhi.n	80037fa <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80037fa:	f7fe fa4b 	bl	8001c94 <HAL_GetREVID>
 80037fe:	4603      	mov	r3, r0
 8003800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003804:	f040 80e8 	bne.w	80039d8 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a4d      	ldr	r2, [pc, #308]	; (8003944 <HAL_ADC_ConfigChannel+0xd00>)
 800380e:	4293      	cmp	r3, r2
 8003810:	f040 80e2 	bne.w	80039d8 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381c:	2b00      	cmp	r3, #0
 800381e:	f040 80db 	bne.w	80039d8 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8003836:	e0cf      	b.n	80039d8 <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003840:	d004      	beq.n	800384c <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003846:	4a40      	ldr	r2, [pc, #256]	; (8003948 <HAL_ADC_ConfigChannel+0xd04>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d106      	bne.n	800385a <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003854:	4618      	mov	r0, r3
 8003856:	f7fe fbf0 	bl	800203a <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f280 80ba 	bge.w	80039d8 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2c      	ldr	r2, [pc, #176]	; (800391c <HAL_ADC_ConfigChannel+0xcd8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0xc2e>
 800386e:	4b2c      	ldr	r3, [pc, #176]	; (8003920 <HAL_ADC_ConfigChannel+0xcdc>)
 8003870:	e000      	b.n	8003874 <HAL_ADC_ConfigChannel+0xc30>
 8003872:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <HAL_ADC_ConfigChannel+0xce0>)
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe fa41 	bl	8001cfc <LL_ADC_GetCommonPathInternalCh>
 800387a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a32      	ldr	r2, [pc, #200]	; (800394c <HAL_ADC_ConfigChannel+0xd08>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d110      	bne.n	80038aa <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a23      	ldr	r2, [pc, #140]	; (800391c <HAL_ADC_ConfigChannel+0xcd8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_ADC_ConfigChannel+0xc52>
 8003892:	4a23      	ldr	r2, [pc, #140]	; (8003920 <HAL_ADC_ConfigChannel+0xcdc>)
 8003894:	e000      	b.n	8003898 <HAL_ADC_ConfigChannel+0xc54>
 8003896:	4a23      	ldr	r2, [pc, #140]	; (8003924 <HAL_ADC_ConfigChannel+0xce0>)
 8003898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f7fe fa17 	bl	8001cd6 <LL_ADC_SetCommonPathInternalCh>
 80038a8:	e06d      	b.n	8003986 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a28      	ldr	r2, [pc, #160]	; (8003950 <HAL_ADC_ConfigChannel+0xd0c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d110      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a18      	ldr	r2, [pc, #96]	; (800391c <HAL_ADC_ConfigChannel+0xcd8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0xc7e>
 80038be:	4a18      	ldr	r2, [pc, #96]	; (8003920 <HAL_ADC_ConfigChannel+0xcdc>)
 80038c0:	e000      	b.n	80038c4 <HAL_ADC_ConfigChannel+0xc80>
 80038c2:	4a18      	ldr	r2, [pc, #96]	; (8003924 <HAL_ADC_ConfigChannel+0xce0>)
 80038c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f7fe fa01 	bl	8001cd6 <LL_ADC_SetCommonPathInternalCh>
 80038d4:	e057      	b.n	8003986 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a17      	ldr	r2, [pc, #92]	; (8003938 <HAL_ADC_ConfigChannel+0xcf4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d110      	bne.n	8003902 <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a0d      	ldr	r2, [pc, #52]	; (800391c <HAL_ADC_ConfigChannel+0xcd8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d101      	bne.n	80038ee <HAL_ADC_ConfigChannel+0xcaa>
 80038ea:	4a0d      	ldr	r2, [pc, #52]	; (8003920 <HAL_ADC_ConfigChannel+0xcdc>)
 80038ec:	e000      	b.n	80038f0 <HAL_ADC_ConfigChannel+0xcac>
 80038ee:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <HAL_ADC_ConfigChannel+0xce0>)
 80038f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f7fe f9eb 	bl	8001cd6 <LL_ADC_SetCommonPathInternalCh>
 8003900:	e041      	b.n	8003986 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a0d      	ldr	r2, [pc, #52]	; (800393c <HAL_ADC_ConfigChannel+0xcf8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d13c      	bne.n	8003986 <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a02      	ldr	r2, [pc, #8]	; (800391c <HAL_ADC_ConfigChannel+0xcd8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d11e      	bne.n	8003954 <HAL_ADC_ConfigChannel+0xd10>
 8003916:	4a02      	ldr	r2, [pc, #8]	; (8003920 <HAL_ADC_ConfigChannel+0xcdc>)
 8003918:	e01d      	b.n	8003956 <HAL_ADC_ConfigChannel+0xd12>
 800391a:	bf00      	nop
 800391c:	42028000 	.word	0x42028000
 8003920:	42028308 	.word	0x42028308
 8003924:	46021308 	.word	0x46021308
 8003928:	b6002000 	.word	0xb6002000
 800392c:	20000000 	.word	0x20000000
 8003930:	053e2d63 	.word	0x053e2d63
 8003934:	ba004000 	.word	0xba004000
 8003938:	80000001 	.word	0x80000001
 800393c:	b2001000 	.word	0xb2001000
 8003940:	46021000 	.word	0x46021000
 8003944:	d7200000 	.word	0xd7200000
 8003948:	80000010 	.word	0x80000010
 800394c:	ce080000 	.word	0xce080000
 8003950:	ca040000 	.word	0xca040000
 8003954:	4a25      	ldr	r2, [pc, #148]	; (80039ec <HAL_ADC_ConfigChannel+0xda8>)
 8003956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800395e:	4619      	mov	r1, r3
 8003960:	4610      	mov	r0, r2
 8003962:	f7fe f9b8 	bl	8001cd6 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003966:	f7fe f995 	bl	8001c94 <HAL_GetREVID>
 800396a:	4603      	mov	r3, r0
 800396c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003970:	d809      	bhi.n	8003986 <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8003986:	f7fe f985 	bl	8001c94 <HAL_GetREVID>
 800398a:	4603      	mov	r3, r0
 800398c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003990:	d122      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a16      	ldr	r2, [pc, #88]	; (80039f0 <HAL_ADC_ConfigChannel+0xdac>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d11d      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800399c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d117      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0201 	orr.w	r2, r2, #1
 80039b8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80039bc:	e00c      	b.n	80039d8 <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039c2:	f043 0220 	orr.w	r2, r3, #32
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80039d0:	e002      	b.n	80039d8 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039d6:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 80039e0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	37f0      	adds	r7, #240	; 0xf0
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	46021308 	.word	0x46021308
 80039f0:	d7200000 	.word	0xd7200000

080039f4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fc7a 	bl	8002304 <LL_ADC_REG_IsConversionOngoing>
 8003a10:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe fc9b 	bl	8002352 <LL_ADC_INJ_IsConversionOngoing>
 8003a1c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d103      	bne.n	8003a2c <ADC_ConversionStop+0x38>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8099 	beq.w	8003b5e <ADC_ConversionStop+0x16a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d02b      	beq.n	8003a92 <ADC_ConversionStop+0x9e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d126      	bne.n	8003a92 <ADC_ConversionStop+0x9e>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	7f1b      	ldrb	r3, [r3, #28]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d122      	bne.n	8003a92 <ADC_ConversionStop+0x9e>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a50:	e014      	b.n	8003a7c <ADC_ConversionStop+0x88>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4a44      	ldr	r2, [pc, #272]	; (8003b68 <ADC_ConversionStop+0x174>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d90d      	bls.n	8003a76 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a5e:	f043 0210 	orr.w	r2, r3, #16
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a6a:	f043 0201 	orr.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e074      	b.n	8003b60 <ADC_ConversionStop+0x16c>
        }
        conversion_timeout_cpu_cycles++;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d1e3      	bne.n	8003a52 <ADC_ConversionStop+0x5e>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2240      	movs	r2, #64	; 0x40
 8003a90:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d014      	beq.n	8003ac2 <ADC_ConversionStop+0xce>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe fc31 	bl	8002304 <LL_ADC_REG_IsConversionOngoing>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00c      	beq.n	8003ac2 <ADC_ConversionStop+0xce>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fbee 	bl	800228e <LL_ADC_IsDisableOngoing>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d104      	bne.n	8003ac2 <ADC_ConversionStop+0xce>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe fc0d 	bl	80022dc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d014      	beq.n	8003af2 <ADC_ConversionStop+0xfe>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe fc40 	bl	8002352 <LL_ADC_INJ_IsConversionOngoing>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00c      	beq.n	8003af2 <ADC_ConversionStop+0xfe>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe fbd6 	bl	800228e <LL_ADC_IsDisableOngoing>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d104      	bne.n	8003af2 <ADC_ConversionStop+0xfe>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe fc1c 	bl	800232a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d005      	beq.n	8003b04 <ADC_ConversionStop+0x110>
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d105      	bne.n	8003b0a <ADC_ConversionStop+0x116>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003afe:	230c      	movs	r3, #12
 8003b00:	617b      	str	r3, [r7, #20]
        break;
 8003b02:	e005      	b.n	8003b10 <ADC_ConversionStop+0x11c>
      case ADC_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 8003b04:	2308      	movs	r3, #8
 8003b06:	617b      	str	r3, [r7, #20]
        break;
 8003b08:	e002      	b.n	8003b10 <ADC_ConversionStop+0x11c>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 8003b0a:	2304      	movs	r3, #4
 8003b0c:	617b      	str	r3, [r7, #20]
        break;
 8003b0e:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003b10:	f7fe f890 	bl	8001c34 <HAL_GetTick>
 8003b14:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8003b16:	e01b      	b.n	8003b50 <ADC_ConversionStop+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b18:	f7fe f88c 	bl	8001c34 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b05      	cmp	r3, #5
 8003b24:	d914      	bls.n	8003b50 <ADC_ConversionStop+0x15c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00d      	beq.n	8003b50 <ADC_ConversionStop+0x15c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b38:	f043 0210 	orr.w	r2, r3, #16
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b44:	f043 0201 	orr.w	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e007      	b.n	8003b60 <ADC_ConversionStop+0x16c>
    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1dc      	bne.n	8003b18 <ADC_ConversionStop+0x124>
        }
      }
    }
  }

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	000cdbff 	.word	0x000cdbff

08003b6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe fb75 	bl	8002268 <LL_ADC_IsEnabled>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d15a      	bne.n	8003c3a <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	4b2e      	ldr	r3, [pc, #184]	; (8003c44 <ADC_Enable+0xd8>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00d      	beq.n	8003bae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b96:	f043 0210 	orr.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ba2:	f043 0201 	orr.w	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e046      	b.n	8003c3c <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe fb2c 	bl	8002218 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <ADC_Enable+0x66>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <ADC_Enable+0xdc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d033      	beq.n	8003c3a <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003bd2:	f7fe f82f 	bl	8001c34 <HAL_GetTick>
 8003bd6:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bd8:	e028      	b.n	8003c2c <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe fb42 	bl	8002268 <LL_ADC_IsEnabled>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d104      	bne.n	8003bf4 <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fb12 	bl	8002218 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bf4:	f7fe f81e 	bl	8001c34 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d914      	bls.n	8003c2c <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d00d      	beq.n	8003c2c <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c14:	f043 0210 	orr.w	r2, r3, #16
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c20:	f043 0201 	orr.w	r2, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e007      	b.n	8003c3c <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d1cf      	bne.n	8003bda <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	8000003f 	.word	0x8000003f
 8003c48:	46021000 	.word	0x46021000

08003c4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fe fb18 	bl	800228e <LL_ADC_IsDisableOngoing>
 8003c5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe faff 	bl	8002268 <LL_ADC_IsEnabled>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d047      	beq.n	8003d00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d144      	bne.n	8003d00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 030d 	and.w	r3, r3, #13
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d10c      	bne.n	8003c9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe fad9 	bl	8002240 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2203      	movs	r2, #3
 8003c94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c96:	f7fd ffcd 	bl	8001c34 <HAL_GetTick>
 8003c9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c9c:	e029      	b.n	8003cf2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ca2:	f043 0210 	orr.w	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	679a      	str	r2, [r3, #120]	; 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cae:	f043 0201 	orr.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	67da      	str	r2, [r3, #124]	; 0x7c
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e023      	b.n	8003d02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cba:	f7fd ffbb 	bl	8001c34 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d914      	bls.n	8003cf2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00d      	beq.n	8003cf2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cda:	f043 0210 	orr.w	r2, r3, #16
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce6:	f043 0201 	orr.w	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e007      	b.n	8003d02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1dc      	bne.n	8003cba <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <LL_ADC_StartCalibration>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a0f      	ldr	r2, [pc, #60]	; (8003d58 <LL_ADC_StartCalibration+0x4c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00c      	beq.n	8003d38 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <LL_ADC_StartCalibration+0x50>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	609a      	str	r2, [r3, #8]
}
 8003d36:	e009      	b.n	8003d4c <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	609a      	str	r2, [r3, #8]
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	46021000 	.word	0x46021000
 8003d5c:	7ffeffc0 	.word	0x7ffeffc0

08003d60 <LL_ADC_IsCalibrationOnGoing>:
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d74:	d101      	bne.n	8003d7a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	; 0x28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_ADCEx_Calibration_Start+0x1e>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e133      	b.n	800400e <HAL_ADCEx_Calibration_Start+0x286>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f7ff ff4c 	bl	8003c4c <ADC_Disable>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 8119 	bne.w	8003ff6 <HAL_ADCEx_Calibration_Start+0x26e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003dcc:	f023 0302 	bic.w	r3, r3, #2
 8003dd0:	f043 0202 	orr.w	r2, r3, #2
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	679a      	str	r2, [r3, #120]	; 0x78

    if (hadc->Instance == ADC4)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a8e      	ldr	r2, [pc, #568]	; (8004018 <HAL_ADCEx_Calibration_Start+0x290>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d150      	bne.n	8003e84 <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0203 	bic.w	r2, r2, #3
 8003e08:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2100      	movs	r1, #0
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff73 	bl	8003d0c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e26:	e014      	b.n	8003e52 <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4a7a      	ldr	r2, [pc, #488]	; (800401c <HAL_ADCEx_Calibration_Start+0x294>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d90d      	bls.n	8003e52 <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e3a:	f023 0312 	bic.w	r3, r3, #18
 8003e3e:	f043 0210 	orr.w	r2, r3, #16
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	679a      	str	r2, [r3, #120]	; 0x78

          __HAL_UNLOCK(hadc);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e0dd      	b.n	800400e <HAL_ADCEx_Calibration_Start+0x286>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff ff82 	bl	8003d60 <LL_ADC_IsCalibrationOnGoing>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e2      	bne.n	8003e28 <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68d9      	ldr	r1, [r3, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	645a      	str	r2, [r3, #68]	; 0x44
 8003e82:	e0af      	b.n	8003fe4 <HAL_ADCEx_Calibration_Start+0x25c>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8003e84:	4b66      	ldr	r3, [pc, #408]	; (8004020 <HAL_ADCEx_Calibration_Start+0x298>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8c:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8003e8e:	4b64      	ldr	r3, [pc, #400]	; (8004020 <HAL_ADCEx_Calibration_Start+0x298>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	0c1b      	lsrs	r3, r3, #16
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	f240 4255 	movw	r2, #1109	; 0x455
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d012      	beq.n	8003ec8 <HAL_ADCEx_Calibration_Start+0x140>
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	f240 4276 	movw	r2, #1142	; 0x476
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00d      	beq.n	8003ec8 <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f240 4281 	movw	r2, #1153	; 0x481
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <HAL_ADCEx_Calibration_Start+0x138>
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f240 4282 	movw	r2, #1154	; 0x482
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d16d      	bne.n	8003f9c <HAL_ADCEx_Calibration_Start+0x214>
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ec6:	d369      	bcc.n	8003f9c <HAL_ADCEx_Calibration_Start+0x214>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7ff fe4f 	bl	8003b6c <ADC_Enable>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (tmp_hal_status == HAL_OK)
 8003ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f040 8083 	bne.w	8003fe4 <HAL_ADCEx_Calibration_Start+0x25c>
        {
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 6210 	orr.w	r2, r2, #150994944	; 0x9000000
 8003ef0:	609a      	str	r2, [r3, #8]
          MODIFY_REG(hadc->Instance->CALFACT2, 0x00FF0000UL, 0x00020000UL);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003efa:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003f06:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003f1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff fe94 	bl	8003c4c <ADC_Disable>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003f30:	d109      	bne.n	8003f46 <HAL_ADCEx_Calibration_Start+0x1be>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	4b3a      	ldr	r3, [pc, #232]	; (8004024 <HAL_ADCEx_Calibration_Start+0x29c>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f44:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f5c:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f5e:	e014      	b.n	8003f8a <HAL_ADCEx_Calibration_Start+0x202>
          {
            wait_loop_index++;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	3301      	adds	r3, #1
 8003f64:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4a2c      	ldr	r2, [pc, #176]	; (800401c <HAL_ADCEx_Calibration_Start+0x294>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d90d      	bls.n	8003f8a <HAL_ADCEx_Calibration_Start+0x202>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f72:	f023 0312 	bic.w	r3, r3, #18
 8003f76:	f043 0210 	orr.w	r2, r3, #16
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	679a      	str	r2, [r3, #120]	; 0x78

              __HAL_UNLOCK(hadc);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

              return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e041      	b.n	800400e <HAL_ADCEx_Calibration_Start+0x286>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fee6 	bl	8003d60 <LL_ADC_IsCalibrationOnGoing>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1e2      	bne.n	8003f60 <HAL_ADCEx_Calibration_Start+0x1d8>
        if (tmp_hal_status == HAL_OK)
 8003f9a:	e023      	b.n	8003fe4 <HAL_ADCEx_Calibration_Start+0x25c>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff feb2 	bl	8003d0c <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fa8:	e014      	b.n	8003fd4 <HAL_ADCEx_Calibration_Start+0x24c>
        {
          wait_loop_index++;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	3301      	adds	r3, #1
 8003fae:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4a1a      	ldr	r2, [pc, #104]	; (800401c <HAL_ADCEx_Calibration_Start+0x294>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d90d      	bls.n	8003fd4 <HAL_ADCEx_Calibration_Start+0x24c>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fbc:	f023 0312 	bic.w	r3, r3, #18
 8003fc0:	f043 0210 	orr.w	r2, r3, #16
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	679a      	str	r2, [r3, #120]	; 0x78

            __HAL_UNLOCK(hadc);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

            return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e01c      	b.n	800400e <HAL_ADCEx_Calibration_Start+0x286>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fec1 	bl	8003d60 <LL_ADC_IsCalibrationOnGoing>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e2      	bne.n	8003faa <HAL_ADCEx_Calibration_Start+0x222>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe8:	f023 0303 	bic.w	r3, r3, #3
 8003fec:	f043 0201 	orr.w	r2, r3, #1
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	679a      	str	r2, [r3, #120]	; 0x78
 8003ff4:	e005      	b.n	8004002 <HAL_ADCEx_Calibration_Start+0x27a>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ffa:	f043 0210 	orr.w	r2, r3, #16
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	679a      	str	r2, [r3, #120]	; 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 800400a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800400e:	4618      	mov	r0, r3
 8004010:	3728      	adds	r7, #40	; 0x28
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	46021000 	.word	0x46021000
 800401c:	01ba813f 	.word	0x01ba813f
 8004020:	e0044000 	.word	0xe0044000
 8004024:	7ffeffc0 	.word	0x7ffeffc0

08004028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004038:	4b0c      	ldr	r3, [pc, #48]	; (800406c <__NVIC_SetPriorityGrouping+0x44>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004044:	4013      	ands	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800405a:	4a04      	ldr	r2, [pc, #16]	; (800406c <__NVIC_SetPriorityGrouping+0x44>)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	60d3      	str	r3, [r2, #12]
}
 8004060:	bf00      	nop
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	e000ed00 	.word	0xe000ed00

08004070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004074:	4b04      	ldr	r3, [pc, #16]	; (8004088 <__NVIC_GetPriorityGrouping+0x18>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	0a1b      	lsrs	r3, r3, #8
 800407a:	f003 0307 	and.w	r3, r3, #7
}
 800407e:	4618      	mov	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	e000ed00 	.word	0xe000ed00

0800408c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409a:	2b00      	cmp	r3, #0
 800409c:	db0b      	blt.n	80040b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	f003 021f 	and.w	r2, r3, #31
 80040a4:	4907      	ldr	r1, [pc, #28]	; (80040c4 <__NVIC_EnableIRQ+0x38>)
 80040a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2001      	movs	r0, #1
 80040ae:	fa00 f202 	lsl.w	r2, r0, r2
 80040b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	e000e100 	.word	0xe000e100

080040c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	db12      	blt.n	8004100 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	f003 021f 	and.w	r2, r3, #31
 80040e0:	490a      	ldr	r1, [pc, #40]	; (800410c <__NVIC_DisableIRQ+0x44>)
 80040e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	2001      	movs	r0, #1
 80040ea:	fa00 f202 	lsl.w	r2, r0, r2
 80040ee:	3320      	adds	r3, #32
 80040f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80040f4:	f3bf 8f4f 	dsb	sy
}
 80040f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040fa:	f3bf 8f6f 	isb	sy
}
 80040fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	e000e100 	.word	0xe000e100

08004110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	6039      	str	r1, [r7, #0]
 800411a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800411c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004120:	2b00      	cmp	r3, #0
 8004122:	db0a      	blt.n	800413a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	b2da      	uxtb	r2, r3
 8004128:	490c      	ldr	r1, [pc, #48]	; (800415c <__NVIC_SetPriority+0x4c>)
 800412a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412e:	0112      	lsls	r2, r2, #4
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	440b      	add	r3, r1
 8004134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004138:	e00a      	b.n	8004150 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	b2da      	uxtb	r2, r3
 800413e:	4908      	ldr	r1, [pc, #32]	; (8004160 <__NVIC_SetPriority+0x50>)
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	3b04      	subs	r3, #4
 8004148:	0112      	lsls	r2, r2, #4
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	440b      	add	r3, r1
 800414e:	761a      	strb	r2, [r3, #24]
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	e000e100 	.word	0xe000e100
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004164:	b480      	push	{r7}
 8004166:	b089      	sub	sp, #36	; 0x24
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f1c3 0307 	rsb	r3, r3, #7
 800417e:	2b04      	cmp	r3, #4
 8004180:	bf28      	it	cs
 8004182:	2304      	movcs	r3, #4
 8004184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	3304      	adds	r3, #4
 800418a:	2b06      	cmp	r3, #6
 800418c:	d902      	bls.n	8004194 <NVIC_EncodePriority+0x30>
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	3b03      	subs	r3, #3
 8004192:	e000      	b.n	8004196 <NVIC_EncodePriority+0x32>
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004198:	f04f 32ff 	mov.w	r2, #4294967295
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43da      	mvns	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	401a      	ands	r2, r3
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041ac:	f04f 31ff 	mov.w	r1, #4294967295
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	fa01 f303 	lsl.w	r3, r1, r3
 80041b6:	43d9      	mvns	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041bc:	4313      	orrs	r3, r2
         );
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3724      	adds	r7, #36	; 0x24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff ff28 	bl	8004028 <__NVIC_SetPriorityGrouping>
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041ee:	f7ff ff3f 	bl	8004070 <__NVIC_GetPriorityGrouping>
 80041f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	6978      	ldr	r0, [r7, #20]
 80041fa:	f7ff ffb3 	bl	8004164 <NVIC_EncodePriority>
 80041fe:	4602      	mov	r2, r0
 8004200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004204:	4611      	mov	r1, r2
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff ff82 	bl	8004110 <__NVIC_SetPriority>
}
 800420c:	bf00      	nop
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff ff32 	bl	800408c <__NVIC_EnableIRQ>
}
 8004228:	bf00      	nop
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800423a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff ff42 	bl	80040c8 <__NVIC_DisableIRQ>
}
 8004244:	bf00      	nop
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800424c:	b480      	push	{r7}
 800424e:	b089      	sub	sp, #36	; 0x24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800425e:	e1ba      	b.n	80045d6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	2101      	movs	r1, #1
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	fa01 f303 	lsl.w	r3, r1, r3
 800426c:	4013      	ands	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 81aa 	beq.w	80045d0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a55      	ldr	r2, [pc, #340]	; (80043d4 <HAL_GPIO_Init+0x188>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d15d      	bne.n	8004340 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800428a:	2201      	movs	r2, #1
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	4013      	ands	r3, r2
 8004298:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f003 0201 	and.w	r2, r3, #1
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80042b4:	4a48      	ldr	r2, [pc, #288]	; (80043d8 <HAL_GPIO_Init+0x18c>)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042bc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80042be:	4a46      	ldr	r2, [pc, #280]	; (80043d8 <HAL_GPIO_Init+0x18c>)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4413      	add	r3, r2
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	08da      	lsrs	r2, r3, #3
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	3208      	adds	r2, #8
 80042d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	220f      	movs	r2, #15
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	43db      	mvns	r3, r3
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	4013      	ands	r3, r2
 80042ec:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	220b      	movs	r2, #11
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	08da      	lsrs	r2, r3, #3
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	3208      	adds	r2, #8
 800430a:	69f9      	ldr	r1, [r7, #28]
 800430c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	2203      	movs	r2, #3
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	4013      	ands	r3, r2
 8004326:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	2202      	movs	r2, #2
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	4313      	orrs	r3, r2
 8004336:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e067      	b.n	8004410 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d003      	beq.n	8004350 <HAL_GPIO_Init+0x104>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b12      	cmp	r3, #18
 800434e:	d145      	bne.n	80043dc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	08da      	lsrs	r2, r3, #3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3208      	adds	r2, #8
 8004358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800435c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	220f      	movs	r2, #15
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	4013      	ands	r3, r2
 8004372:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f003 020f 	and.w	r2, r3, #15
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	4313      	orrs	r3, r2
 800438c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	08da      	lsrs	r2, r3, #3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3208      	adds	r2, #8
 8004396:	69f9      	ldr	r1, [r7, #28]
 8004398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	2203      	movs	r2, #3
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	43db      	mvns	r3, r3
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	4013      	ands	r3, r2
 80043b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 0203 	and.w	r2, r3, #3
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	e01e      	b.n	8004410 <HAL_GPIO_Init+0x1c4>
 80043d2:	bf00      	nop
 80043d4:	46020000 	.word	0x46020000
 80043d8:	08015a18 	.word	0x08015a18
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	2203      	movs	r2, #3
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	4013      	ands	r3, r2
 80043f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 0203 	and.w	r2, r3, #3
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	4313      	orrs	r3, r2
 8004408:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d00b      	beq.n	8004430 <HAL_GPIO_Init+0x1e4>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d007      	beq.n	8004430 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004424:	2b11      	cmp	r3, #17
 8004426:	d003      	beq.n	8004430 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b12      	cmp	r3, #18
 800442e:	d130      	bne.n	8004492 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	2203      	movs	r2, #3
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	4013      	ands	r3, r2
 8004446:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	4313      	orrs	r3, r2
 8004458:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004466:	2201      	movs	r2, #1
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	4013      	ands	r3, r2
 8004474:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	f003 0201 	and.w	r2, r3, #1
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	4313      	orrs	r3, r2
 800448a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b03      	cmp	r3, #3
 8004498:	d017      	beq.n	80044ca <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	2203      	movs	r2, #3
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d07c      	beq.n	80045d0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80044d6:	4a47      	ldr	r2, [pc, #284]	; (80045f4 <HAL_GPIO_Init+0x3a8>)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	3318      	adds	r3, #24
 80044de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	220f      	movs	r2, #15
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	4013      	ands	r3, r2
 80044f8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	0a9a      	lsrs	r2, r3, #10
 80044fe:	4b3e      	ldr	r3, [pc, #248]	; (80045f8 <HAL_GPIO_Init+0x3ac>)
 8004500:	4013      	ands	r3, r2
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	f002 0203 	and.w	r2, r2, #3
 8004508:	00d2      	lsls	r2, r2, #3
 800450a:	4093      	lsls	r3, r2
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	4313      	orrs	r3, r2
 8004510:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004512:	4938      	ldr	r1, [pc, #224]	; (80045f4 <HAL_GPIO_Init+0x3a8>)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	089b      	lsrs	r3, r3, #2
 8004518:	3318      	adds	r3, #24
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004520:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <HAL_GPIO_Init+0x3a8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	43db      	mvns	r3, r3
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	4013      	ands	r3, r2
 800452e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004544:	4a2b      	ldr	r2, [pc, #172]	; (80045f4 <HAL_GPIO_Init+0x3a8>)
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800454a:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <HAL_GPIO_Init+0x3a8>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	43db      	mvns	r3, r3
 8004554:	69fa      	ldr	r2, [r7, #28]
 8004556:	4013      	ands	r3, r2
 8004558:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800456e:	4a21      	ldr	r2, [pc, #132]	; (80045f4 <HAL_GPIO_Init+0x3a8>)
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004574:	4b1f      	ldr	r3, [pc, #124]	; (80045f4 <HAL_GPIO_Init+0x3a8>)
 8004576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800457a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	43db      	mvns	r3, r3
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	4013      	ands	r3, r2
 8004584:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800459a:	4a16      	ldr	r2, [pc, #88]	; (80045f4 <HAL_GPIO_Init+0x3a8>)
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80045a2:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <HAL_GPIO_Init+0x3a8>)
 80045a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80045c8:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <HAL_GPIO_Init+0x3a8>)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	3301      	adds	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f47f ae3d 	bne.w	8004260 <HAL_GPIO_Init+0x14>
  }
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	3724      	adds	r7, #36	; 0x24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	46022000 	.word	0x46022000
 80045f8:	002f7f7f 	.word	0x002f7f7f

080045fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]
 8004608:	4613      	mov	r3, r2
 800460a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800460c:	787b      	ldrb	r3, [r7, #1]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004612:	887a      	ldrh	r2, [r7, #2]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004618:	e002      	b.n	8004620 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800461a:	887a      	ldrh	r2, [r7, #2]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8004636:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	88fb      	ldrh	r3, [r7, #6]
 800463c:	4013      	ands	r3, r2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d006      	beq.n	8004650 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004642:	4a0c      	ldr	r2, [pc, #48]	; (8004674 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	4618      	mov	r0, r3
 800464c:	f00b fa66 	bl	800fb1c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004650:	4b08      	ldr	r3, [pc, #32]	; (8004674 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	88fb      	ldrh	r3, [r7, #6]
 8004656:	4013      	ands	r3, r2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d006      	beq.n	800466a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800465c:	4a05      	ldr	r2, [pc, #20]	; (8004674 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	4618      	mov	r0, r3
 8004666:	f000 f807 	bl	8004678 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	46022000 	.word	0x46022000

08004678 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800469c:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
 80046ac:	e007      	b.n	80046be <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80046ae:	4b07      	ldr	r3, [pc, #28]	; (80046cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 0204 	bic.w	r2, r3, #4
 80046b6:	4905      	ldr	r1, [pc, #20]	; (80046cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]
  }

  return status;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40030400 	.word	0x40030400

080046d0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_ICACHE_Enable+0x1c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a04      	ldr	r2, [pc, #16]	; (80046ec <HAL_ICACHE_Enable+0x1c>)
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	40030400 	.word	0x40030400

080046f0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0e7      	b.n	80048d2 <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d106      	bne.n	8004722 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7fc ff2f 	bl	8001580 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2202      	movs	r2, #2
 8004726:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0201 	orr.w	r2, r2, #1
 8004738:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004742:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800474c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800474e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fae2 	bl	8004d1c <LPTIM_WaitForFlag>
 8004758:	4603      	mov	r3, r0
 800475a:	2b03      	cmp	r3, #3
 800475c:	d101      	bne.n	8004762 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e0b7      	b.n	80048d2 <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2210      	movs	r2, #16
 8004768:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6a12      	ldr	r2, [r2, #32]
 8004772:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004774:	2110      	movs	r1, #16
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fad0 	bl	8004d1c <LPTIM_WaitForFlag>
 800477c:	4603      	mov	r3, r0
 800477e:	2b03      	cmp	r3, #3
 8004780:	d101      	bne.n	8004786 <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e0a5      	b.n	80048d2 <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10e      	bne.n	80047b2 <HAL_LPTIM_Init+0xc2>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d107      	bne.n	80047b2 <HAL_LPTIM_Init+0xc2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0201 	bic.w	r2, r2, #1
 80047b0:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d004      	beq.n	80047cc <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047ca:	d103      	bne.n	80047d4 <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 031e 	bic.w	r3, r3, #30
 80047d2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047dc:	4293      	cmp	r3, r2
 80047de:	d005      	beq.n	80047ec <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80047e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047ea:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4b3b      	ldr	r3, [pc, #236]	; (80048dc <HAL_LPTIM_Init+0x1ec>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80047fc:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 8004802:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004808:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d107      	bne.n	8004828 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004820:	4313      	orrs	r3, r2
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d004      	beq.n	800483a <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004838:	d107      	bne.n	800484a <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004842:	4313      	orrs	r3, r2
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004852:	4293      	cmp	r3, r2
 8004854:	d00a      	beq.n	800486c <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800485e:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004864:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a19      	ldr	r2, [pc, #100]	; (80048e0 <HAL_LPTIM_Init+0x1f0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d004      	beq.n	8004888 <HAL_LPTIM_Init+0x198>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <HAL_LPTIM_Init+0x1f4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d108      	bne.n	800489a <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	625a      	str	r2, [r3, #36]	; 0x24
 8004898:	e00e      	b.n	80048b8 <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a12      	ldr	r2, [pc, #72]	; (80048e8 <HAL_LPTIM_Init+0x1f8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_LPTIM_Init+0x1be>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a10      	ldr	r2, [pc, #64]	; (80048ec <HAL_LPTIM_Init+0x1fc>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d104      	bne.n	80048b8 <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048b6:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	ff39f1fe 	.word	0xff39f1fe
 80048e0:	46004400 	.word	0x46004400
 80048e4:	40009400 	.word	0x40009400
 80048e8:	46004800 	.word	0x46004800
 80048ec:	46004c00 	.word	0x46004c00

080048f0 <HAL_LPTIM_Counter_Start>:
  * @brief  Start the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d00c      	beq.n	8004922 <HAL_LPTIM_Counter_Start+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004910:	d107      	bne.n	8004922 <HAL_LPTIM_Counter_Start+0x32>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8004920:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0201 	orr.w	r2, r2, #1
 8004930:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0204 	orr.w	r2, r2, #4
 8004940:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69db      	ldr	r3, [r3, #28]
}
 8004966:	4618      	mov	r0, r3
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b01      	cmp	r3, #1
 8004986:	d120      	bne.n	80049ca <HAL_LPTIM_IRQHandler+0x58>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b01      	cmp	r3, #1
 8004994:	d119      	bne.n	80049ca <HAL_LPTIM_IRQHandler+0x58>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2201      	movs	r2, #1
 800499c:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f99c 	bl	8004cf2 <HAL_LPTIM_IC_CaptureCallback>
 80049ba:	e002      	b.n	80049c2 <HAL_LPTIM_IRQHandler+0x50>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f93e 	bl	8004c3e <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d8:	d122      	bne.n	8004a20 <HAL_LPTIM_IRQHandler+0xae>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e8:	d11a      	bne.n	8004a20 <HAL_LPTIM_IRQHandler+0xae>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049f2:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_LPTIM_IRQHandler+0xa0>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f971 	bl	8004cf2 <HAL_LPTIM_IC_CaptureCallback>
 8004a10:	e002      	b.n	8004a18 <HAL_LPTIM_IRQHandler+0xa6>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f913 	bl	8004c3e <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	d117      	bne.n	8004a60 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3e:	d10f      	bne.n	8004a60 <HAL_LPTIM_IRQHandler+0xee>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a48:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f957 	bl	8004d06 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6e:	d117      	bne.n	8004aa0 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7e:	d10f      	bne.n	8004aa0 <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a88:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f937 	bl	8004d06 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d10d      	bne.n	8004aca <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d106      	bne.n	8004aca <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f8c4 	bl	8004c52 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d10d      	bne.n	8004af4 <HAL_LPTIM_IRQHandler+0x182>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d106      	bne.n	8004af4 <HAL_LPTIM_IRQHandler+0x182>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2204      	movs	r2, #4
 8004aec:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f8b9 	bl	8004c66 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d111      	bne.n	8004b26 <HAL_LPTIM_IRQHandler+0x1b4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d10a      	bne.n	8004b26 <HAL_LPTIM_IRQHandler+0x1b4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2208      	movs	r2, #8
 8004b16:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f8aa 	bl	8004c7a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b34:	d113      	bne.n	8004b5e <HAL_LPTIM_IRQHandler+0x1ec>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b44:	d10b      	bne.n	8004b5e <HAL_LPTIM_IRQHandler+0x1ec>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b4e:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f88e 	bl	8004c7a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d10d      	bne.n	8004b88 <HAL_LPTIM_IRQHandler+0x216>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d106      	bne.n	8004b88 <HAL_LPTIM_IRQHandler+0x216>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2210      	movs	r2, #16
 8004b80:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f883 	bl	8004c8e <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d10d      	bne.n	8004bb2 <HAL_LPTIM_IRQHandler+0x240>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d106      	bne.n	8004bb2 <HAL_LPTIM_IRQHandler+0x240>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f878 	bl	8004ca2 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b40      	cmp	r3, #64	; 0x40
 8004bbe:	d10d      	bne.n	8004bdc <HAL_LPTIM_IRQHandler+0x26a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d106      	bne.n	8004bdc <HAL_LPTIM_IRQHandler+0x26a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2240      	movs	r2, #64	; 0x40
 8004bd4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f86d 	bl	8004cb6 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be6:	2b80      	cmp	r3, #128	; 0x80
 8004be8:	d10d      	bne.n	8004c06 <HAL_LPTIM_IRQHandler+0x294>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf4:	2b80      	cmp	r3, #128	; 0x80
 8004bf6:	d106      	bne.n	8004c06 <HAL_LPTIM_IRQHandler+0x294>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2280      	movs	r2, #128	; 0x80
 8004bfe:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f862 	bl	8004cca <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c14:	d10f      	bne.n	8004c36 <HAL_LPTIM_IRQHandler+0x2c4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c24:	d107      	bne.n	8004c36 <HAL_LPTIM_IRQHandler+0x2c4>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c2e:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f854 	bl	8004cde <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004d2a:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <LPTIM_WaitForFlag+0x58>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <LPTIM_WaitForFlag+0x5c>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	0b9b      	lsrs	r3, r3, #14
 8004d36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d3a:	fb02 f303 	mul.w	r3, r2, r3
 8004d3e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d002      	beq.n	8004d66 <LPTIM_WaitForFlag+0x4a>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1ec      	bne.n	8004d40 <LPTIM_WaitForFlag+0x24>

  return result;
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	20000000 	.word	0x20000000
 8004d78:	d1b71759 	.word	0xd1b71759

08004d7c <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004d8c:	bf00      	nop
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	46020800 	.word	0x46020800

08004d9c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004da4:	4b39      	ldr	r3, [pc, #228]	; (8004e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dac:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d10b      	bne.n	8004dce <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbc:	d905      	bls.n	8004dca <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004dbe:	4b33      	ldr	r3, [pc, #204]	; (8004e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	4a32      	ldr	r2, [pc, #200]	; (8004e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dc8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e057      	b.n	8004e7e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd4:	d90a      	bls.n	8004dec <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004dd6:	4b2d      	ldr	r3, [pc, #180]	; (8004e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	4a2a      	ldr	r2, [pc, #168]	; (8004e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004de8:	60d3      	str	r3, [r2, #12]
 8004dea:	e007      	b.n	8004dfc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004dec:	4b27      	ldr	r3, [pc, #156]	; (8004e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004df4:	4925      	ldr	r1, [pc, #148]	; (8004e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004dfc:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a24      	ldr	r2, [pc, #144]	; (8004e94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	099b      	lsrs	r3, r3, #6
 8004e08:	2232      	movs	r2, #50	; 0x32
 8004e0a:	fb02 f303 	mul.w	r3, r2, r3
 8004e0e:	4a21      	ldr	r2, [pc, #132]	; (8004e94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	099b      	lsrs	r3, r3, #6
 8004e16:	3301      	adds	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004e1a:	e002      	b.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004e22:	4b1a      	ldr	r3, [pc, #104]	; (8004e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d102      	bne.n	8004e34 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f3      	bne.n	8004e1c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01b      	beq.n	8004e72 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004e3a:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e40:	fba2 2303 	umull	r2, r3, r2, r3
 8004e44:	099b      	lsrs	r3, r3, #6
 8004e46:	2232      	movs	r2, #50	; 0x32
 8004e48:	fb02 f303 	mul.w	r3, r2, r3
 8004e4c:	4a11      	ldr	r2, [pc, #68]	; (8004e94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	099b      	lsrs	r3, r3, #6
 8004e54:	3301      	adds	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004e58:	e002      	b.n	8004e60 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004e60:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f3      	bne.n	8004e5a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e000      	b.n	8004e7e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	46020800 	.word	0x46020800
 8004e90:	20000000 	.word	0x20000000
 8004e94:	10624dd3 	.word	0x10624dd3

08004e98 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004e9c:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	46020800 	.word	0x46020800

08004eb4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004ebc:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <HAL_PWREx_ConfigSupply+0x94>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a22      	ldr	r2, [pc, #136]	; (8004f4c <HAL_PWREx_ConfigSupply+0x98>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	099b      	lsrs	r3, r3, #6
 8004ec8:	2232      	movs	r2, #50	; 0x32
 8004eca:	fb02 f303 	mul.w	r3, r2, r3
 8004ece:	4a1f      	ldr	r2, [pc, #124]	; (8004f4c <HAL_PWREx_ConfigSupply+0x98>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	099b      	lsrs	r3, r3, #6
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d113      	bne.n	8004f08 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004ee0:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <HAL_PWREx_ConfigSupply+0x9c>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4a1a      	ldr	r2, [pc, #104]	; (8004f50 <HAL_PWREx_ConfigSupply+0x9c>)
 8004ee6:	f023 0302 	bic.w	r3, r3, #2
 8004eea:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004eec:	e002      	b.n	8004ef4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004ef4:	4b16      	ldr	r3, [pc, #88]	; (8004f50 <HAL_PWREx_ConfigSupply+0x9c>)
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d116      	bne.n	8004f2e <HAL_PWREx_ConfigSupply+0x7a>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f3      	bne.n	8004eee <HAL_PWREx_ConfigSupply+0x3a>
 8004f06:	e012      	b.n	8004f2e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004f08:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4a10      	ldr	r2, [pc, #64]	; (8004f50 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f0e:	f043 0302 	orr.w	r3, r3, #2
 8004f12:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004f14:	e002      	b.n	8004f1c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d102      	bne.n	8004f2e <HAL_PWREx_ConfigSupply+0x7a>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f3      	bne.n	8004f16 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e000      	b.n	8004f3a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20000000 	.word	0x20000000
 8004f4c:	10624dd3 	.word	0x10624dd3
 8004f50:	46020800 	.word	0x46020800

08004f54 <HAL_PWREx_EnterSTOP2Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 2 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 8004f5e:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f023 0307 	bic.w	r3, r3, #7
 8004f66:	4a0f      	ldr	r2, [pc, #60]	; (8004fa4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004f68:	f043 0302 	orr.w	r3, r3, #2
 8004f6c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	4a0d      	ldr	r2, [pc, #52]	; (8004fa8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004f74:	f043 0304 	orr.w	r3, r3, #4
 8004f78:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004f80:	bf30      	wfi
 8004f82:	e002      	b.n	8004f8a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004f84:	bf40      	sev
    __WFE();
 8004f86:	bf20      	wfe
    __WFE();
 8004f88:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	4a06      	ldr	r2, [pc, #24]	; (8004fa8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004f90:	f023 0304 	bic.w	r3, r3, #4
 8004f94:	6113      	str	r3, [r2, #16]
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	46020800 	.word	0x46020800
 8004fa8:	e000ed00 	.word	0xe000ed00

08004fac <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	4a04      	ldr	r2, [pc, #16]	; (8004fc8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004fb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fba:	6113      	str	r3, [r2, #16]
}
 8004fbc:	bf00      	nop
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	46020800 	.word	0x46020800

08004fcc <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004fd0:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <HAL_PWREx_EnableVddA+0x1c>)
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	4a04      	ldr	r2, [pc, #16]	; (8004fe8 <HAL_PWREx_EnableVddA+0x1c>)
 8004fd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fda:	6113      	str	r3, [r2, #16]
}
 8004fdc:	bf00      	nop
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	46020800 	.word	0x46020800

08004fec <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004ff0:	4b05      	ldr	r3, [pc, #20]	; (8005008 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	4a04      	ldr	r2, [pc, #16]	; (8005008 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004ffc:	bf00      	nop
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	46020800 	.word	0x46020800

0800500c <HAL_PWREx_DisableRAMsContentStopRetention>:
  *                      This parameter can be one or a combination of the same
  *                      memory @ref PWREx_RAM_Contents_Stop_Retention.
  * @retval None.
  */
void HAL_PWREx_DisableRAMsContentStopRetention(uint32_t RAMSelection)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t dummy;

  /* Check RAM ID */
  switch (RAMSelection & SRAM_ID_MASK)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	0c1b      	lsrs	r3, r3, #16
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800501e:	f000 8090 	beq.w	8005142 <HAL_PWREx_DisableRAMsContentStopRetention+0x136>
 8005022:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005026:	f200 8098 	bhi.w	800515a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 800502a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800502e:	d07c      	beq.n	800512a <HAL_PWREx_DisableRAMsContentStopRetention+0x11e>
 8005030:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005034:	f200 8091 	bhi.w	800515a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8005038:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800503c:	d069      	beq.n	8005112 <HAL_PWREx_DisableRAMsContentStopRetention+0x106>
 800503e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005042:	f200 808a 	bhi.w	800515a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8005046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800504a:	d056      	beq.n	80050fa <HAL_PWREx_DisableRAMsContentStopRetention+0xee>
 800504c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005050:	f200 8083 	bhi.w	800515a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8005054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005058:	d043      	beq.n	80050e2 <HAL_PWREx_DisableRAMsContentStopRetention+0xd6>
 800505a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800505e:	d87c      	bhi.n	800515a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8005060:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005064:	d031      	beq.n	80050ca <HAL_PWREx_DisableRAMsContentStopRetention+0xbe>
 8005066:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800506a:	d876      	bhi.n	800515a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 800506c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005070:	d020      	beq.n	80050b4 <HAL_PWREx_DisableRAMsContentStopRetention+0xa8>
 8005072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005076:	d870      	bhi.n	800515a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507c:	d003      	beq.n	8005086 <HAL_PWREx_DisableRAMsContentStopRetention+0x7a>
 800507e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005082:	d00b      	beq.n	800509c <HAL_PWREx_DisableRAMsContentStopRetention+0x90>
    }
#endif /* defined (PWR_CR5_SRAM6PDS1) */

    default:
    {
      return;
 8005084:	e069      	b.n	800515a <HAL_PWREx_DisableRAMsContentStopRetention+0x14e>
      dummy   = (RAMSelection & ~SRAM_ID_MASK) & (PAGE01_ID | PAGE02_ID | PAGE03_ID);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, dummy);
 800508e:	4b36      	ldr	r3, [pc, #216]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	4935      	ldr	r1, [pc, #212]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	604b      	str	r3, [r1, #4]
      break;
 800509a:	e05f      	b.n	800515c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_SRAM2_FULL_STOP) & ~SRAM_ID_MASK;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM2PDS1_Pos));
 80050a4:	4b30      	ldr	r3, [pc, #192]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	492e      	ldr	r1, [pc, #184]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	604b      	str	r3, [r1, #4]
      break;
 80050b2:	e053      	b.n	800515c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & ~SRAM_ID_MASK) & (PAGE01_ID | PAGE02_ID | PAGE03_ID | PAGE04_ID |
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM3PDS1_Pos));
 80050ba:	4b2b      	ldr	r3, [pc, #172]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	041b      	lsls	r3, r3, #16
 80050c2:	4929      	ldr	r1, [pc, #164]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	604b      	str	r3, [r1, #4]
      break;
 80050c8:	e048      	b.n	800515c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_SRAM4_FULL_STOP) & ~SRAM_ID_MASK;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_SRAM4PDS_Pos));
 80050d2:	4b25      	ldr	r3, [pc, #148]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	019b      	lsls	r3, r3, #6
 80050da:	4923      	ldr	r1, [pc, #140]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	604b      	str	r3, [r1, #4]
      break;
 80050e0:	e03c      	b.n	800515c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_ICACHE_FULL_STOP) & ~SRAM_ID_MASK;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_ICRAMPDS_Pos));
 80050ea:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	491d      	ldr	r1, [pc, #116]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	604b      	str	r3, [r1, #4]
      break;
 80050f8:	e030      	b.n	800515c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_DCACHE1_FULL_STOP) & ~SRAM_ID_MASK;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_DC1RAMPDS_Pos));
 8005102:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	025b      	lsls	r3, r3, #9
 800510a:	4917      	ldr	r1, [pc, #92]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 800510c:	4313      	orrs	r3, r2
 800510e:	604b      	str	r3, [r1, #4]
      break;
 8005110:	e024      	b.n	800515c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_DMA2DRAM_FULL_STOP) & ~SRAM_ID_MASK;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_DMA2DRAMPDS_Pos));
 800511a:	4b13      	ldr	r3, [pc, #76]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	029b      	lsls	r3, r3, #10
 8005122:	4911      	ldr	r1, [pc, #68]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005124:	4313      	orrs	r3, r2
 8005126:	604b      	str	r3, [r1, #4]
      break;
 8005128:	e018      	b.n	800515c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_PERIPHRAM_FULL_STOP) & ~SRAM_ID_MASK;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_PRAMPDS_Pos));
 8005132:	4b0d      	ldr	r3, [pc, #52]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	02db      	lsls	r3, r3, #11
 800513a:	490b      	ldr	r1, [pc, #44]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 800513c:	4313      	orrs	r3, r2
 800513e:	604b      	str	r3, [r1, #4]
      break;
 8005140:	e00c      	b.n	800515c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      dummy = (RAMSelection & PWR_PKA32RAM_FULL_STOP) & ~SRAM_ID_MASK;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	60fb      	str	r3, [r7, #12]
      SET_BIT(PWR->CR2, (dummy << PWR_CR2_PKARAMPDS_Pos));
 800514a:	4b07      	ldr	r3, [pc, #28]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	031b      	lsls	r3, r3, #12
 8005152:	4905      	ldr	r1, [pc, #20]	; (8005168 <HAL_PWREx_DisableRAMsContentStopRetention+0x15c>)
 8005154:	4313      	orrs	r3, r2
 8005156:	604b      	str	r3, [r1, #4]
      break;
 8005158:	e000      	b.n	800515c <HAL_PWREx_DisableRAMsContentStopRetention+0x150>
      return;
 800515a:	bf00      	nop
      break;
    }
  }
}
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	46020800 	.word	0x46020800

0800516c <HAL_PWREx_EnableSRAM4FastWakeUp>:
  *         Stop 0, Stop 1 and Stop 2 modes, and also increases the LPDMA access time
  *         to SRAM4 during Stop modes.
  * @retval None.
  */
void HAL_PWREx_EnableSRAM4FastWakeUp(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_SRAM4FWU);
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <HAL_PWREx_EnableSRAM4FastWakeUp+0x1c>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	4a04      	ldr	r2, [pc, #16]	; (8005188 <HAL_PWREx_EnableSRAM4FastWakeUp+0x1c>)
 8005176:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800517a:	6053      	str	r3, [r2, #4]
}
 800517c:	bf00      	nop
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	46020800 	.word	0x46020800

0800518c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08e      	sub	sp, #56	; 0x38
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005194:	2300      	movs	r3, #0
 8005196:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d102      	bne.n	80051a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	f000 bec8 	b.w	8005f36 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051a6:	4b99      	ldr	r3, [pc, #612]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	f003 030c 	and.w	r3, r3, #12
 80051ae:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051b0:	4b96      	ldr	r3, [pc, #600]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 816c 	beq.w	80054a0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d007      	beq.n	80051de <HAL_RCC_OscConfig+0x52>
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	2b0c      	cmp	r3, #12
 80051d2:	f040 80de 	bne.w	8005392 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	f040 80da 	bne.w	8005392 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	f000 bea5 	b.w	8005f36 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051f0:	4b86      	ldr	r3, [pc, #536]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <HAL_RCC_OscConfig+0x7a>
 80051fc:	4b83      	ldr	r3, [pc, #524]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005204:	e005      	b.n	8005212 <HAL_RCC_OscConfig+0x86>
 8005206:	4b81      	ldr	r3, [pc, #516]	; (800540c <HAL_RCC_OscConfig+0x280>)
 8005208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800520c:	041b      	lsls	r3, r3, #16
 800520e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005212:	4293      	cmp	r3, r2
 8005214:	d255      	bcs.n	80052c2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	4618      	mov	r0, r3
 8005222:	f001 fa17 	bl	8006654 <RCC_SetFlashLatencyFromMSIRange>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	f000 be82 	b.w	8005f36 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005232:	4b76      	ldr	r3, [pc, #472]	; (800540c <HAL_RCC_OscConfig+0x280>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	4a75      	ldr	r2, [pc, #468]	; (800540c <HAL_RCC_OscConfig+0x280>)
 8005238:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800523c:	6093      	str	r3, [r2, #8]
 800523e:	4b73      	ldr	r3, [pc, #460]	; (800540c <HAL_RCC_OscConfig+0x280>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	4970      	ldr	r1, [pc, #448]	; (800540c <HAL_RCC_OscConfig+0x280>)
 800524c:	4313      	orrs	r3, r2
 800524e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005258:	d309      	bcc.n	800526e <HAL_RCC_OscConfig+0xe2>
 800525a:	4b6c      	ldr	r3, [pc, #432]	; (800540c <HAL_RCC_OscConfig+0x280>)
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f023 021f 	bic.w	r2, r3, #31
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	4969      	ldr	r1, [pc, #420]	; (800540c <HAL_RCC_OscConfig+0x280>)
 8005268:	4313      	orrs	r3, r2
 800526a:	60cb      	str	r3, [r1, #12]
 800526c:	e07e      	b.n	800536c <HAL_RCC_OscConfig+0x1e0>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b00      	cmp	r3, #0
 8005274:	da0a      	bge.n	800528c <HAL_RCC_OscConfig+0x100>
 8005276:	4b65      	ldr	r3, [pc, #404]	; (800540c <HAL_RCC_OscConfig+0x280>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	015b      	lsls	r3, r3, #5
 8005284:	4961      	ldr	r1, [pc, #388]	; (800540c <HAL_RCC_OscConfig+0x280>)
 8005286:	4313      	orrs	r3, r2
 8005288:	60cb      	str	r3, [r1, #12]
 800528a:	e06f      	b.n	800536c <HAL_RCC_OscConfig+0x1e0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005294:	d30a      	bcc.n	80052ac <HAL_RCC_OscConfig+0x120>
 8005296:	4b5d      	ldr	r3, [pc, #372]	; (800540c <HAL_RCC_OscConfig+0x280>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	029b      	lsls	r3, r3, #10
 80052a4:	4959      	ldr	r1, [pc, #356]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60cb      	str	r3, [r1, #12]
 80052aa:	e05f      	b.n	800536c <HAL_RCC_OscConfig+0x1e0>
 80052ac:	4b57      	ldr	r3, [pc, #348]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	03db      	lsls	r3, r3, #15
 80052ba:	4954      	ldr	r1, [pc, #336]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	60cb      	str	r3, [r1, #12]
 80052c0:	e054      	b.n	800536c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80052c2:	4b52      	ldr	r3, [pc, #328]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	4a51      	ldr	r2, [pc, #324]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80052c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052cc:	6093      	str	r3, [r2, #8]
 80052ce:	4b4f      	ldr	r3, [pc, #316]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	494c      	ldr	r1, [pc, #304]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80052e8:	d309      	bcc.n	80052fe <HAL_RCC_OscConfig+0x172>
 80052ea:	4b48      	ldr	r3, [pc, #288]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f023 021f 	bic.w	r2, r3, #31
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	4945      	ldr	r1, [pc, #276]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60cb      	str	r3, [r1, #12]
 80052fc:	e028      	b.n	8005350 <HAL_RCC_OscConfig+0x1c4>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	2b00      	cmp	r3, #0
 8005304:	da0a      	bge.n	800531c <HAL_RCC_OscConfig+0x190>
 8005306:	4b41      	ldr	r3, [pc, #260]	; (800540c <HAL_RCC_OscConfig+0x280>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	015b      	lsls	r3, r3, #5
 8005314:	493d      	ldr	r1, [pc, #244]	; (800540c <HAL_RCC_OscConfig+0x280>)
 8005316:	4313      	orrs	r3, r2
 8005318:	60cb      	str	r3, [r1, #12]
 800531a:	e019      	b.n	8005350 <HAL_RCC_OscConfig+0x1c4>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005324:	d30a      	bcc.n	800533c <HAL_RCC_OscConfig+0x1b0>
 8005326:	4b39      	ldr	r3, [pc, #228]	; (800540c <HAL_RCC_OscConfig+0x280>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	029b      	lsls	r3, r3, #10
 8005334:	4935      	ldr	r1, [pc, #212]	; (800540c <HAL_RCC_OscConfig+0x280>)
 8005336:	4313      	orrs	r3, r2
 8005338:	60cb      	str	r3, [r1, #12]
 800533a:	e009      	b.n	8005350 <HAL_RCC_OscConfig+0x1c4>
 800533c:	4b33      	ldr	r3, [pc, #204]	; (800540c <HAL_RCC_OscConfig+0x280>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	03db      	lsls	r3, r3, #15
 800534a:	4930      	ldr	r1, [pc, #192]	; (800540c <HAL_RCC_OscConfig+0x280>)
 800534c:	4313      	orrs	r3, r2
 800534e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	4618      	mov	r0, r3
 800535c:	f001 f97a 	bl	8006654 <RCC_SetFlashLatencyFromMSIRange>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	f000 bde5 	b.w	8005f36 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800536c:	f001 f8e4 	bl	8006538 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005370:	4b27      	ldr	r3, [pc, #156]	; (8005410 <HAL_RCC_OscConfig+0x284>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f7fc fabf 	bl	80018f8 <HAL_InitTick>
 800537a:	4603      	mov	r3, r0
 800537c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8005380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 808a 	beq.w	800549e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800538a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800538e:	f000 bdd2 	b.w	8005f36 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d066      	beq.n	8005468 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800539a:	4b1c      	ldr	r3, [pc, #112]	; (800540c <HAL_RCC_OscConfig+0x280>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1b      	ldr	r2, [pc, #108]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80053a6:	f7fc fc45 	bl	8001c34 <HAL_GetTick>
 80053aa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80053ac:	e009      	b.n	80053c2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053ae:	f7fc fc41 	bl	8001c34 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d902      	bls.n	80053c2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	f000 bdba 	b.w	8005f36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80053c2:	4b12      	ldr	r3, [pc, #72]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0ef      	beq.n	80053ae <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80053ce:	4b0f      	ldr	r3, [pc, #60]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4a0e      	ldr	r2, [pc, #56]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80053d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053d8:	6093      	str	r3, [r2, #8]
 80053da:	4b0c      	ldr	r3, [pc, #48]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	4909      	ldr	r1, [pc, #36]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80053f4:	d30e      	bcc.n	8005414 <HAL_RCC_OscConfig+0x288>
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <HAL_RCC_OscConfig+0x280>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f023 021f 	bic.w	r2, r3, #31
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	4902      	ldr	r1, [pc, #8]	; (800540c <HAL_RCC_OscConfig+0x280>)
 8005404:	4313      	orrs	r3, r2
 8005406:	60cb      	str	r3, [r1, #12]
 8005408:	e04a      	b.n	80054a0 <HAL_RCC_OscConfig+0x314>
 800540a:	bf00      	nop
 800540c:	46020c00 	.word	0x46020c00
 8005410:	20000004 	.word	0x20000004
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	2b00      	cmp	r3, #0
 800541a:	da0a      	bge.n	8005432 <HAL_RCC_OscConfig+0x2a6>
 800541c:	4b98      	ldr	r3, [pc, #608]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	015b      	lsls	r3, r3, #5
 800542a:	4995      	ldr	r1, [pc, #596]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 800542c:	4313      	orrs	r3, r2
 800542e:	60cb      	str	r3, [r1, #12]
 8005430:	e036      	b.n	80054a0 <HAL_RCC_OscConfig+0x314>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543a:	d30a      	bcc.n	8005452 <HAL_RCC_OscConfig+0x2c6>
 800543c:	4b90      	ldr	r3, [pc, #576]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	029b      	lsls	r3, r3, #10
 800544a:	498d      	ldr	r1, [pc, #564]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 800544c:	4313      	orrs	r3, r2
 800544e:	60cb      	str	r3, [r1, #12]
 8005450:	e026      	b.n	80054a0 <HAL_RCC_OscConfig+0x314>
 8005452:	4b8b      	ldr	r3, [pc, #556]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	03db      	lsls	r3, r3, #15
 8005460:	4987      	ldr	r1, [pc, #540]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005462:	4313      	orrs	r3, r2
 8005464:	60cb      	str	r3, [r1, #12]
 8005466:	e01b      	b.n	80054a0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005468:	4b85      	ldr	r3, [pc, #532]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a84      	ldr	r2, [pc, #528]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005474:	f7fc fbde 	bl	8001c34 <HAL_GetTick>
 8005478:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800547a:	e009      	b.n	8005490 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800547c:	f7fc fbda 	bl	8001c34 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d902      	bls.n	8005490 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	f000 bd53 	b.w	8005f36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005490:	4b7b      	ldr	r3, [pc, #492]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1ef      	bne.n	800547c <HAL_RCC_OscConfig+0x2f0>
 800549c:	e000      	b.n	80054a0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800549e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 808b 	beq.w	80055c4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d005      	beq.n	80054c0 <HAL_RCC_OscConfig+0x334>
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	2b0c      	cmp	r3, #12
 80054b8:	d109      	bne.n	80054ce <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d106      	bne.n	80054ce <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d17d      	bne.n	80055c4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f000 bd34 	b.w	8005f36 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d6:	d106      	bne.n	80054e6 <HAL_RCC_OscConfig+0x35a>
 80054d8:	4b69      	ldr	r3, [pc, #420]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a68      	ldr	r2, [pc, #416]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 80054de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	e041      	b.n	800556a <HAL_RCC_OscConfig+0x3de>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054ee:	d112      	bne.n	8005516 <HAL_RCC_OscConfig+0x38a>
 80054f0:	4b63      	ldr	r3, [pc, #396]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a62      	ldr	r2, [pc, #392]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 80054f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	4b60      	ldr	r3, [pc, #384]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a5f      	ldr	r2, [pc, #380]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005502:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	4b5d      	ldr	r3, [pc, #372]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a5c      	ldr	r2, [pc, #368]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 800550e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	e029      	b.n	800556a <HAL_RCC_OscConfig+0x3de>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800551e:	d112      	bne.n	8005546 <HAL_RCC_OscConfig+0x3ba>
 8005520:	4b57      	ldr	r3, [pc, #348]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a56      	ldr	r2, [pc, #344]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	4b54      	ldr	r3, [pc, #336]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a53      	ldr	r2, [pc, #332]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	4b51      	ldr	r3, [pc, #324]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a50      	ldr	r2, [pc, #320]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 800553e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e011      	b.n	800556a <HAL_RCC_OscConfig+0x3de>
 8005546:	4b4e      	ldr	r3, [pc, #312]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a4d      	ldr	r2, [pc, #308]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 800554c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	4b4b      	ldr	r3, [pc, #300]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a4a      	ldr	r2, [pc, #296]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	4b48      	ldr	r3, [pc, #288]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a47      	ldr	r2, [pc, #284]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005564:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005568:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d014      	beq.n	800559c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005572:	f7fc fb5f 	bl	8001c34 <HAL_GetTick>
 8005576:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005578:	e009      	b.n	800558e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800557a:	f7fc fb5b 	bl	8001c34 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b64      	cmp	r3, #100	; 0x64
 8005586:	d902      	bls.n	800558e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	f000 bcd4 	b.w	8005f36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800558e:	4b3c      	ldr	r3, [pc, #240]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0ef      	beq.n	800557a <HAL_RCC_OscConfig+0x3ee>
 800559a:	e013      	b.n	80055c4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800559c:	f7fc fb4a 	bl	8001c34 <HAL_GetTick>
 80055a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055a2:	e009      	b.n	80055b8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055a4:	f7fc fb46 	bl	8001c34 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b64      	cmp	r3, #100	; 0x64
 80055b0:	d902      	bls.n	80055b8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	f000 bcbf 	b.w	8005f36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055b8:	4b31      	ldr	r3, [pc, #196]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1ef      	bne.n	80055a4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d05f      	beq.n	8005690 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d005      	beq.n	80055e2 <HAL_RCC_OscConfig+0x456>
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	2b0c      	cmp	r3, #12
 80055da:	d114      	bne.n	8005606 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d111      	bne.n	8005606 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d102      	bne.n	80055f0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	f000 bca3 	b.w	8005f36 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80055f0:	4b23      	ldr	r3, [pc, #140]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	4920      	ldr	r1, [pc, #128]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005600:	4313      	orrs	r3, r2
 8005602:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005604:	e044      	b.n	8005690 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d024      	beq.n	8005658 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800560e:	4b1c      	ldr	r3, [pc, #112]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005618:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800561a:	f7fc fb0b 	bl	8001c34 <HAL_GetTick>
 800561e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005620:	e009      	b.n	8005636 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005622:	f7fc fb07 	bl	8001c34 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d902      	bls.n	8005636 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	f000 bc80 	b.w	8005f36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005636:	4b12      	ldr	r3, [pc, #72]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0ef      	beq.n	8005622 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005642:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	041b      	lsls	r3, r3, #16
 8005650:	490b      	ldr	r1, [pc, #44]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 8005652:	4313      	orrs	r3, r2
 8005654:	610b      	str	r3, [r1, #16]
 8005656:	e01b      	b.n	8005690 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005658:	4b09      	ldr	r3, [pc, #36]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a08      	ldr	r2, [pc, #32]	; (8005680 <HAL_RCC_OscConfig+0x4f4>)
 800565e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005662:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005664:	f7fc fae6 	bl	8001c34 <HAL_GetTick>
 8005668:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800566a:	e00b      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800566c:	f7fc fae2 	bl	8001c34 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d904      	bls.n	8005684 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	f000 bc5b 	b.w	8005f36 <HAL_RCC_OscConfig+0xdaa>
 8005680:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005684:	4baf      	ldr	r3, [pc, #700]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1ed      	bne.n	800566c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80c8 	beq.w	800582e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a4:	4ba7      	ldr	r3, [pc, #668]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80056a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d111      	bne.n	80056d6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b2:	4ba4      	ldr	r3, [pc, #656]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80056b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056b8:	4aa2      	ldr	r2, [pc, #648]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80056ba:	f043 0304 	orr.w	r3, r3, #4
 80056be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80056c2:	4ba0      	ldr	r3, [pc, #640]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80056c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80056d0:	2301      	movs	r3, #1
 80056d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80056d6:	4b9c      	ldr	r3, [pc, #624]	; (8005948 <HAL_RCC_OscConfig+0x7bc>)
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d119      	bne.n	8005716 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80056e2:	4b99      	ldr	r3, [pc, #612]	; (8005948 <HAL_RCC_OscConfig+0x7bc>)
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	4a98      	ldr	r2, [pc, #608]	; (8005948 <HAL_RCC_OscConfig+0x7bc>)
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ee:	f7fc faa1 	bl	8001c34 <HAL_GetTick>
 80056f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80056f4:	e009      	b.n	800570a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f6:	f7fc fa9d 	bl	8001c34 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d902      	bls.n	800570a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	f000 bc16 	b.w	8005f36 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800570a:	4b8f      	ldr	r3, [pc, #572]	; (8005948 <HAL_RCC_OscConfig+0x7bc>)
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0ef      	beq.n	80056f6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d05f      	beq.n	80057de <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800571e:	4b89      	ldr	r3, [pc, #548]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005724:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005730:	429a      	cmp	r2, r3
 8005732:	d037      	beq.n	80057a4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d006      	beq.n	800574c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e3f4      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01b      	beq.n	800578e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005756:	4b7b      	ldr	r3, [pc, #492]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800575c:	4a79      	ldr	r2, [pc, #484]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 800575e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005762:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8005766:	f7fc fa65 	bl	8001c34 <HAL_GetTick>
 800576a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800576e:	f7fc fa61 	bl	8001c34 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b05      	cmp	r3, #5
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e3da      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005780:	4b70      	ldr	r3, [pc, #448]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1ef      	bne.n	800576e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800578e:	4b6d      	ldr	r3, [pc, #436]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005794:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	4969      	ldr	r1, [pc, #420]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80057a4:	4b67      	ldr	r3, [pc, #412]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80057a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057aa:	4a66      	ldr	r2, [pc, #408]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80057ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80057b4:	f7fc fa3e 	bl	8001c34 <HAL_GetTick>
 80057b8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057bc:	f7fc fa3a 	bl	8001c34 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b05      	cmp	r3, #5
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e3b3      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80057ce:	4b5d      	ldr	r3, [pc, #372]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80057d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0ef      	beq.n	80057bc <HAL_RCC_OscConfig+0x630>
 80057dc:	e01b      	b.n	8005816 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80057de:	4b59      	ldr	r3, [pc, #356]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80057e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057e4:	4a57      	ldr	r2, [pc, #348]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80057e6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80057ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80057ee:	f7fc fa21 	bl	8001c34 <HAL_GetTick>
 80057f2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f6:	f7fc fa1d 	bl	8001c34 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b05      	cmp	r3, #5
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e396      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005808:	4b4e      	ldr	r3, [pc, #312]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 800580a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800580e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1ef      	bne.n	80057f6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005816:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800581a:	2b01      	cmp	r3, #1
 800581c:	d107      	bne.n	800582e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800581e:	4b49      	ldr	r3, [pc, #292]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005824:	4a47      	ldr	r2, [pc, #284]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005826:	f023 0304 	bic.w	r3, r3, #4
 800582a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8111 	beq.w	8005a5e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800583c:	2300      	movs	r3, #0
 800583e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005842:	4b40      	ldr	r3, [pc, #256]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d111      	bne.n	8005874 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005850:	4b3c      	ldr	r3, [pc, #240]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005856:	4a3b      	ldr	r2, [pc, #236]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005858:	f043 0304 	orr.w	r3, r3, #4
 800585c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005860:	4b38      	ldr	r3, [pc, #224]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005874:	4b34      	ldr	r3, [pc, #208]	; (8005948 <HAL_RCC_OscConfig+0x7bc>)
 8005876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d118      	bne.n	80058b2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005880:	4b31      	ldr	r3, [pc, #196]	; (8005948 <HAL_RCC_OscConfig+0x7bc>)
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	4a30      	ldr	r2, [pc, #192]	; (8005948 <HAL_RCC_OscConfig+0x7bc>)
 8005886:	f043 0301 	orr.w	r3, r3, #1
 800588a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800588c:	f7fc f9d2 	bl	8001c34 <HAL_GetTick>
 8005890:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005894:	f7fc f9ce 	bl	8001c34 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e347      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80058a6:	4b28      	ldr	r3, [pc, #160]	; (8005948 <HAL_RCC_OscConfig+0x7bc>)
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f0      	beq.n	8005894 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d01f      	beq.n	80058fe <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d010      	beq.n	80058ec <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058ca:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80058cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058d0:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80058d2:	f043 0304 	orr.w	r3, r3, #4
 80058d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058da:	4b1a      	ldr	r3, [pc, #104]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80058dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058e0:	4a18      	ldr	r2, [pc, #96]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80058ea:	e018      	b.n	800591e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058ec:	4b15      	ldr	r3, [pc, #84]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80058ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058f2:	4a14      	ldr	r2, [pc, #80]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80058fc:	e00f      	b.n	800591e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058fe:	4b11      	ldr	r3, [pc, #68]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005904:	4a0f      	ldr	r2, [pc, #60]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005906:	f023 0301 	bic.w	r3, r3, #1
 800590a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800590e:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005914:	4a0b      	ldr	r2, [pc, #44]	; (8005944 <HAL_RCC_OscConfig+0x7b8>)
 8005916:	f023 0304 	bic.w	r3, r3, #4
 800591a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d057      	beq.n	80059d6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005926:	f7fc f985 	bl	8001c34 <HAL_GetTick>
 800592a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800592c:	e00e      	b.n	800594c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592e:	f7fc f981 	bl	8001c34 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f241 3288 	movw	r2, #5000	; 0x1388
 800593c:	4293      	cmp	r3, r2
 800593e:	d905      	bls.n	800594c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e2f8      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
 8005944:	46020c00 	.word	0x46020c00
 8005948:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800594c:	4b9c      	ldr	r3, [pc, #624]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 800594e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0e9      	beq.n	800592e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01b      	beq.n	800599e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005966:	4b96      	ldr	r3, [pc, #600]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800596c:	4a94      	ldr	r2, [pc, #592]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 800596e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005972:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005976:	e00a      	b.n	800598e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005978:	f7fc f95c 	bl	8001c34 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	f241 3288 	movw	r2, #5000	; 0x1388
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e2d3      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800598e:	4b8c      	ldr	r3, [pc, #560]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0ed      	beq.n	8005978 <HAL_RCC_OscConfig+0x7ec>
 800599c:	e053      	b.n	8005a46 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800599e:	4b88      	ldr	r3, [pc, #544]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 80059a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059a4:	4a86      	ldr	r2, [pc, #536]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 80059a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059ae:	e00a      	b.n	80059c6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b0:	f7fc f940 	bl	8001c34 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e2b7      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059c6:	4b7e      	ldr	r3, [pc, #504]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 80059c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1ed      	bne.n	80059b0 <HAL_RCC_OscConfig+0x824>
 80059d4:	e037      	b.n	8005a46 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80059d6:	f7fc f92d 	bl	8001c34 <HAL_GetTick>
 80059da:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059dc:	e00a      	b.n	80059f4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059de:	f7fc f929 	bl	8001c34 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e2a0      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059f4:	4b72      	ldr	r3, [pc, #456]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 80059f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1ed      	bne.n	80059de <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005a02:	4b6f      	ldr	r3, [pc, #444]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01a      	beq.n	8005a46 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a10:	4b6b      	ldr	r3, [pc, #428]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a16:	4a6a      	ldr	r2, [pc, #424]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a20:	e00a      	b.n	8005a38 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a22:	f7fc f907 	bl	8001c34 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e27e      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a38:	4b61      	ldr	r3, [pc, #388]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005a3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1ed      	bne.n	8005a22 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d107      	bne.n	8005a5e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a4e:	4b5c      	ldr	r3, [pc, #368]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a54:	4a5a      	ldr	r2, [pc, #360]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005a56:	f023 0304 	bic.w	r3, r3, #4
 8005a5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d036      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d019      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005a72:	4b53      	ldr	r3, [pc, #332]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a52      	ldr	r2, [pc, #328]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005a78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a7c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005a7e:	f7fc f8d9 	bl	8001c34 <HAL_GetTick>
 8005a82:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a86:	f7fc f8d5 	bl	8001c34 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e24e      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005a98:	4b49      	ldr	r3, [pc, #292]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0f0      	beq.n	8005a86 <HAL_RCC_OscConfig+0x8fa>
 8005aa4:	e018      	b.n	8005ad8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005aa6:	4b46      	ldr	r3, [pc, #280]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a45      	ldr	r2, [pc, #276]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005aac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ab0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005ab2:	f7fc f8bf 	bl	8001c34 <HAL_GetTick>
 8005ab6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005ab8:	e008      	b.n	8005acc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aba:	f7fc f8bb 	bl	8001c34 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e234      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005acc:	4b3c      	ldr	r3, [pc, #240]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1f0      	bne.n	8005aba <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d036      	beq.n	8005b52 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d019      	beq.n	8005b20 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005aec:	4b34      	ldr	r3, [pc, #208]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a33      	ldr	r2, [pc, #204]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005af6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005af8:	f7fc f89c 	bl	8001c34 <HAL_GetTick>
 8005afc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005b00:	f7fc f898 	bl	8001c34 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e211      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005b12:	4b2b      	ldr	r3, [pc, #172]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0f0      	beq.n	8005b00 <HAL_RCC_OscConfig+0x974>
 8005b1e:	e018      	b.n	8005b52 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005b20:	4b27      	ldr	r3, [pc, #156]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a26      	ldr	r2, [pc, #152]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005b2c:	f7fc f882 	bl	8001c34 <HAL_GetTick>
 8005b30:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005b34:	f7fc f87e 	bl	8001c34 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e1f7      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005b46:	4b1e      	ldr	r3, [pc, #120]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1f0      	bne.n	8005b34 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d07f      	beq.n	8005c5e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d062      	beq.n	8005c2c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005b66:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	4a15      	ldr	r2, [pc, #84]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005b6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b70:	6093      	str	r3, [r2, #8]
 8005b72:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	4910      	ldr	r1, [pc, #64]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005b8c:	d309      	bcc.n	8005ba2 <HAL_RCC_OscConfig+0xa16>
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f023 021f 	bic.w	r2, r3, #31
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	4909      	ldr	r1, [pc, #36]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60cb      	str	r3, [r1, #12]
 8005ba0:	e02a      	b.n	8005bf8 <HAL_RCC_OscConfig+0xa6c>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	da0c      	bge.n	8005bc4 <HAL_RCC_OscConfig+0xa38>
 8005baa:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	015b      	lsls	r3, r3, #5
 8005bb8:	4901      	ldr	r1, [pc, #4]	; (8005bc0 <HAL_RCC_OscConfig+0xa34>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60cb      	str	r3, [r1, #12]
 8005bbe:	e01b      	b.n	8005bf8 <HAL_RCC_OscConfig+0xa6c>
 8005bc0:	46020c00 	.word	0x46020c00
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bcc:	d30a      	bcc.n	8005be4 <HAL_RCC_OscConfig+0xa58>
 8005bce:	4ba1      	ldr	r3, [pc, #644]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	029b      	lsls	r3, r3, #10
 8005bdc:	499d      	ldr	r1, [pc, #628]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60cb      	str	r3, [r1, #12]
 8005be2:	e009      	b.n	8005bf8 <HAL_RCC_OscConfig+0xa6c>
 8005be4:	4b9b      	ldr	r3, [pc, #620]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	03db      	lsls	r3, r3, #15
 8005bf2:	4998      	ldr	r1, [pc, #608]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005bf8:	4b96      	ldr	r3, [pc, #600]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a95      	ldr	r2, [pc, #596]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005bfe:	f043 0310 	orr.w	r3, r3, #16
 8005c02:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005c04:	f7fc f816 	bl	8001c34 <HAL_GetTick>
 8005c08:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005c0c:	f7fc f812 	bl	8001c34 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e18b      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005c1e:	4b8d      	ldr	r3, [pc, #564]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0f0      	beq.n	8005c0c <HAL_RCC_OscConfig+0xa80>
 8005c2a:	e018      	b.n	8005c5e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005c2c:	4b89      	ldr	r3, [pc, #548]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a88      	ldr	r2, [pc, #544]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005c32:	f023 0310 	bic.w	r3, r3, #16
 8005c36:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005c38:	f7fb fffc 	bl	8001c34 <HAL_GetTick>
 8005c3c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005c40:	f7fb fff8 	bl	8001c34 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e171      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005c52:	4b80      	ldr	r3, [pc, #512]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1f0      	bne.n	8005c40 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 8166 	beq.w	8005f34 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c6e:	4b79      	ldr	r3, [pc, #484]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f003 030c 	and.w	r3, r3, #12
 8005c76:	2b0c      	cmp	r3, #12
 8005c78:	f000 80f2 	beq.w	8005e60 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	f040 80c5 	bne.w	8005e10 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005c86:	4b73      	ldr	r3, [pc, #460]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a72      	ldr	r2, [pc, #456]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005c8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c90:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005c92:	f7fb ffcf 	bl	8001c34 <HAL_GetTick>
 8005c96:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005c98:	e008      	b.n	8005cac <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c9a:	f7fb ffcb 	bl	8001c34 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e144      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005cac:	4b69      	ldr	r3, [pc, #420]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1f0      	bne.n	8005c9a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cb8:	4b66      	ldr	r3, [pc, #408]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d111      	bne.n	8005cea <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005cc6:	4b63      	ldr	r3, [pc, #396]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ccc:	4a61      	ldr	r2, [pc, #388]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005cce:	f043 0304 	orr.w	r3, r3, #4
 8005cd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005cd6:	4b5f      	ldr	r3, [pc, #380]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005cea:	4b5b      	ldr	r3, [pc, #364]	; (8005e58 <HAL_RCC_OscConfig+0xccc>)
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cf6:	d102      	bne.n	8005cfe <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005cfe:	4b56      	ldr	r3, [pc, #344]	; (8005e58 <HAL_RCC_OscConfig+0xccc>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	4a55      	ldr	r2, [pc, #340]	; (8005e58 <HAL_RCC_OscConfig+0xccc>)
 8005d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d08:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005d0a:	4b52      	ldr	r3, [pc, #328]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d12:	f023 0303 	bic.w	r3, r3, #3
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d1e:	3a01      	subs	r2, #1
 8005d20:	0212      	lsls	r2, r2, #8
 8005d22:	4311      	orrs	r1, r2
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	494a      	ldr	r1, [pc, #296]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	628b      	str	r3, [r1, #40]	; 0x28
 8005d30:	4b48      	ldr	r3, [pc, #288]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d34:	4b49      	ldr	r3, [pc, #292]	; (8005e5c <HAL_RCC_OscConfig+0xcd0>)
 8005d36:	4013      	ands	r3, r2
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005d3c:	3a01      	subs	r2, #1
 8005d3e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005d46:	3a01      	subs	r2, #1
 8005d48:	0252      	lsls	r2, r2, #9
 8005d4a:	b292      	uxth	r2, r2
 8005d4c:	4311      	orrs	r1, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005d52:	3a01      	subs	r2, #1
 8005d54:	0412      	lsls	r2, r2, #16
 8005d56:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005d5a:	4311      	orrs	r1, r2
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005d60:	3a01      	subs	r2, #1
 8005d62:	0612      	lsls	r2, r2, #24
 8005d64:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	493a      	ldr	r1, [pc, #232]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005d70:	4b38      	ldr	r3, [pc, #224]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	4a37      	ldr	r2, [pc, #220]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005d76:	f023 0310 	bic.w	r3, r3, #16
 8005d7a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d80:	4a34      	ldr	r2, [pc, #208]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005d86:	4b33      	ldr	r3, [pc, #204]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8a:	4a32      	ldr	r2, [pc, #200]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005d8c:	f043 0310 	orr.w	r3, r3, #16
 8005d90:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005d92:	4b30      	ldr	r3, [pc, #192]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d96:	f023 020c 	bic.w	r2, r3, #12
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9e:	492d      	ldr	r1, [pc, #180]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005da4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d105      	bne.n	8005db8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005dac:	4b2a      	ldr	r3, [pc, #168]	; (8005e58 <HAL_RCC_OscConfig+0xccc>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	4a29      	ldr	r2, [pc, #164]	; (8005e58 <HAL_RCC_OscConfig+0xccc>)
 8005db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005db6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005db8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d107      	bne.n	8005dd0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005dc0:	4b24      	ldr	r3, [pc, #144]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dc6:	4a23      	ldr	r2, [pc, #140]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005dc8:	f023 0304 	bic.w	r3, r3, #4
 8005dcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005dd0:	4b20      	ldr	r3, [pc, #128]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd4:	4a1f      	ldr	r2, [pc, #124]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dda:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005ddc:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1c      	ldr	r2, [pc, #112]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005de6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005de8:	f7fb ff24 	bl	8001c34 <HAL_GetTick>
 8005dec:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df0:	f7fb ff20 	bl	8001c34 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e099      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005e02:	4b14      	ldr	r3, [pc, #80]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0f0      	beq.n	8005df0 <HAL_RCC_OscConfig+0xc64>
 8005e0e:	e091      	b.n	8005f34 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005e10:	4b10      	ldr	r3, [pc, #64]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a0f      	ldr	r2, [pc, #60]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e1a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005e1c:	f7fb ff0a 	bl	8001c34 <HAL_GetTick>
 8005e20:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e24:	f7fb ff06 	bl	8001c34 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e07f      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005e36:	4b07      	ldr	r3, [pc, #28]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f0      	bne.n	8005e24 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005e42:	4b04      	ldr	r3, [pc, #16]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e46:	4a03      	ldr	r2, [pc, #12]	; (8005e54 <HAL_RCC_OscConfig+0xcc8>)
 8005e48:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005e4c:	f023 0303 	bic.w	r3, r3, #3
 8005e50:	6293      	str	r3, [r2, #40]	; 0x28
 8005e52:	e06f      	b.n	8005f34 <HAL_RCC_OscConfig+0xda8>
 8005e54:	46020c00 	.word	0x46020c00
 8005e58:	46020800 	.word	0x46020800
 8005e5c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005e60:	4b37      	ldr	r3, [pc, #220]	; (8005f40 <HAL_RCC_OscConfig+0xdb4>)
 8005e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e64:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005e66:	4b36      	ldr	r3, [pc, #216]	; (8005f40 <HAL_RCC_OscConfig+0xdb4>)
 8005e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d039      	beq.n	8005ee8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f003 0203 	and.w	r2, r3, #3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d132      	bne.n	8005ee8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	0a1b      	lsrs	r3, r3, #8
 8005e86:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d129      	bne.n	8005ee8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d122      	bne.n	8005ee8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eac:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d11a      	bne.n	8005ee8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	0a5b      	lsrs	r3, r3, #9
 8005eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d111      	bne.n	8005ee8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	0c1b      	lsrs	r3, r3, #16
 8005ec8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d108      	bne.n	8005ee8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	0e1b      	lsrs	r3, r3, #24
 8005eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d001      	beq.n	8005eec <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e024      	b.n	8005f36 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005eec:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <HAL_RCC_OscConfig+0xdb4>)
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	08db      	lsrs	r3, r3, #3
 8005ef2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d01a      	beq.n	8005f34 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005efe:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <HAL_RCC_OscConfig+0xdb4>)
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	4a0f      	ldr	r2, [pc, #60]	; (8005f40 <HAL_RCC_OscConfig+0xdb4>)
 8005f04:	f023 0310 	bic.w	r3, r3, #16
 8005f08:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0a:	f7fb fe93 	bl	8001c34 <HAL_GetTick>
 8005f0e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005f10:	bf00      	nop
 8005f12:	f7fb fe8f 	bl	8001c34 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d0f9      	beq.n	8005f12 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f22:	4a07      	ldr	r2, [pc, #28]	; (8005f40 <HAL_RCC_OscConfig+0xdb4>)
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005f28:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <HAL_RCC_OscConfig+0xdb4>)
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	4a04      	ldr	r2, [pc, #16]	; (8005f40 <HAL_RCC_OscConfig+0xdb4>)
 8005f2e:	f043 0310 	orr.w	r3, r3, #16
 8005f32:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3738      	adds	r7, #56	; 0x38
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	46020c00 	.word	0x46020c00

08005f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e1d9      	b.n	800630c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f58:	4b9b      	ldr	r3, [pc, #620]	; (80061c8 <HAL_RCC_ClockConfig+0x284>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 030f 	and.w	r3, r3, #15
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d910      	bls.n	8005f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f66:	4b98      	ldr	r3, [pc, #608]	; (80061c8 <HAL_RCC_ClockConfig+0x284>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f023 020f 	bic.w	r2, r3, #15
 8005f6e:	4996      	ldr	r1, [pc, #600]	; (80061c8 <HAL_RCC_ClockConfig+0x284>)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f76:	4b94      	ldr	r3, [pc, #592]	; (80061c8 <HAL_RCC_ClockConfig+0x284>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d001      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e1c1      	b.n	800630c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0310 	and.w	r3, r3, #16
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d010      	beq.n	8005fb6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	695a      	ldr	r2, [r3, #20]
 8005f98:	4b8c      	ldr	r3, [pc, #560]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d908      	bls.n	8005fb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005fa4:	4b89      	ldr	r3, [pc, #548]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	4986      	ldr	r1, [pc, #536]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d012      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	4b81      	ldr	r3, [pc, #516]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	091b      	lsrs	r3, r3, #4
 8005fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d909      	bls.n	8005fe8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005fd4:	4b7d      	ldr	r3, [pc, #500]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	011b      	lsls	r3, r3, #4
 8005fe2:	497a      	ldr	r1, [pc, #488]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d010      	beq.n	8006016 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	4b74      	ldr	r3, [pc, #464]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006000:	429a      	cmp	r2, r3
 8006002:	d908      	bls.n	8006016 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006004:	4b71      	ldr	r3, [pc, #452]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	496e      	ldr	r1, [pc, #440]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8006012:	4313      	orrs	r3, r2
 8006014:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d010      	beq.n	8006044 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	4b69      	ldr	r3, [pc, #420]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	429a      	cmp	r2, r3
 8006030:	d908      	bls.n	8006044 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006032:	4b66      	ldr	r3, [pc, #408]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f023 020f 	bic.w	r2, r3, #15
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	4963      	ldr	r1, [pc, #396]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8006040:	4313      	orrs	r3, r2
 8006042:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 80d2 	beq.w	80061f6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006052:	2300      	movs	r3, #0
 8006054:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2b03      	cmp	r3, #3
 800605c:	d143      	bne.n	80060e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800605e:	4b5b      	ldr	r3, [pc, #364]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8006060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b00      	cmp	r3, #0
 800606a:	d110      	bne.n	800608e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800606c:	4b57      	ldr	r3, [pc, #348]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 800606e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006072:	4a56      	ldr	r2, [pc, #344]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8006074:	f043 0304 	orr.w	r3, r3, #4
 8006078:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800607c:	4b53      	ldr	r3, [pc, #332]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 800607e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	60bb      	str	r3, [r7, #8]
 8006088:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800608a:	2301      	movs	r3, #1
 800608c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800608e:	f7fb fdd1 	bl	8001c34 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006094:	4b4e      	ldr	r3, [pc, #312]	; (80061d0 <HAL_RCC_ClockConfig+0x28c>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00f      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80060a2:	f7fb fdc7 	bl	8001c34 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e12b      	b.n	800630c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80060b4:	4b46      	ldr	r3, [pc, #280]	; (80061d0 <HAL_RCC_ClockConfig+0x28c>)
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0f0      	beq.n	80060a2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d107      	bne.n	80060d6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80060c6:	4b41      	ldr	r3, [pc, #260]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 80060c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060cc:	4a3f      	ldr	r2, [pc, #252]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 80060ce:	f023 0304 	bic.w	r3, r3, #4
 80060d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80060d6:	4b3d      	ldr	r3, [pc, #244]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d121      	bne.n	8006126 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e112      	b.n	800630c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d107      	bne.n	80060fe <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060ee:	4b37      	ldr	r3, [pc, #220]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d115      	bne.n	8006126 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e106      	b.n	800630c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d107      	bne.n	8006116 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006106:	4b31      	ldr	r3, [pc, #196]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e0fa      	b.n	800630c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006116:	4b2d      	ldr	r3, [pc, #180]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e0f2      	b.n	800630c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006126:	4b29      	ldr	r3, [pc, #164]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f023 0203 	bic.w	r2, r3, #3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	4926      	ldr	r1, [pc, #152]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8006134:	4313      	orrs	r3, r2
 8006136:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006138:	f7fb fd7c 	bl	8001c34 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2b03      	cmp	r3, #3
 8006144:	d112      	bne.n	800616c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006146:	e00a      	b.n	800615e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006148:	f7fb fd74 	bl	8001c34 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	f241 3288 	movw	r2, #5000	; 0x1388
 8006156:	4293      	cmp	r3, r2
 8006158:	d901      	bls.n	800615e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e0d6      	b.n	800630c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800615e:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	f003 030c 	and.w	r3, r3, #12
 8006166:	2b0c      	cmp	r3, #12
 8006168:	d1ee      	bne.n	8006148 <HAL_RCC_ClockConfig+0x204>
 800616a:	e044      	b.n	80061f6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d112      	bne.n	800619a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006174:	e00a      	b.n	800618c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006176:	f7fb fd5d 	bl	8001c34 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	f241 3288 	movw	r2, #5000	; 0x1388
 8006184:	4293      	cmp	r3, r2
 8006186:	d901      	bls.n	800618c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e0bf      	b.n	800630c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800618c:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f003 030c 	and.w	r3, r3, #12
 8006194:	2b08      	cmp	r3, #8
 8006196:	d1ee      	bne.n	8006176 <HAL_RCC_ClockConfig+0x232>
 8006198:	e02d      	b.n	80061f6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d123      	bne.n	80061ea <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80061a2:	e00a      	b.n	80061ba <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a4:	f7fb fd46 	bl	8001c34 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e0a8      	b.n	800630c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80061ba:	4b04      	ldr	r3, [pc, #16]	; (80061cc <HAL_RCC_ClockConfig+0x288>)
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f003 030c 	and.w	r3, r3, #12
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1ee      	bne.n	80061a4 <HAL_RCC_ClockConfig+0x260>
 80061c6:	e016      	b.n	80061f6 <HAL_RCC_ClockConfig+0x2b2>
 80061c8:	40022000 	.word	0x40022000
 80061cc:	46020c00 	.word	0x46020c00
 80061d0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061d4:	f7fb fd2e 	bl	8001c34 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e090      	b.n	800630c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80061ea:	4b4a      	ldr	r3, [pc, #296]	; (8006314 <HAL_RCC_ClockConfig+0x3d0>)
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f003 030c 	and.w	r3, r3, #12
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d1ee      	bne.n	80061d4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d010      	beq.n	8006224 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	4b43      	ldr	r3, [pc, #268]	; (8006314 <HAL_RCC_ClockConfig+0x3d0>)
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	429a      	cmp	r2, r3
 8006210:	d208      	bcs.n	8006224 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006212:	4b40      	ldr	r3, [pc, #256]	; (8006314 <HAL_RCC_ClockConfig+0x3d0>)
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f023 020f 	bic.w	r2, r3, #15
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	493d      	ldr	r1, [pc, #244]	; (8006314 <HAL_RCC_ClockConfig+0x3d0>)
 8006220:	4313      	orrs	r3, r2
 8006222:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006224:	4b3c      	ldr	r3, [pc, #240]	; (8006318 <HAL_RCC_ClockConfig+0x3d4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d210      	bcs.n	8006254 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006232:	4b39      	ldr	r3, [pc, #228]	; (8006318 <HAL_RCC_ClockConfig+0x3d4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f023 020f 	bic.w	r2, r3, #15
 800623a:	4937      	ldr	r1, [pc, #220]	; (8006318 <HAL_RCC_ClockConfig+0x3d4>)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006242:	4b35      	ldr	r3, [pc, #212]	; (8006318 <HAL_RCC_ClockConfig+0x3d4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	429a      	cmp	r2, r3
 800624e:	d001      	beq.n	8006254 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e05b      	b.n	800630c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d010      	beq.n	8006282 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	4b2b      	ldr	r3, [pc, #172]	; (8006314 <HAL_RCC_ClockConfig+0x3d0>)
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800626c:	429a      	cmp	r2, r3
 800626e:	d208      	bcs.n	8006282 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006270:	4b28      	ldr	r3, [pc, #160]	; (8006314 <HAL_RCC_ClockConfig+0x3d0>)
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	4925      	ldr	r1, [pc, #148]	; (8006314 <HAL_RCC_ClockConfig+0x3d0>)
 800627e:	4313      	orrs	r3, r2
 8006280:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b00      	cmp	r3, #0
 800628c:	d012      	beq.n	80062b4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	4b20      	ldr	r3, [pc, #128]	; (8006314 <HAL_RCC_ClockConfig+0x3d0>)
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	091b      	lsrs	r3, r3, #4
 8006298:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800629c:	429a      	cmp	r2, r3
 800629e:	d209      	bcs.n	80062b4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80062a0:	4b1c      	ldr	r3, [pc, #112]	; (8006314 <HAL_RCC_ClockConfig+0x3d0>)
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	4919      	ldr	r1, [pc, #100]	; (8006314 <HAL_RCC_ClockConfig+0x3d0>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d010      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	695a      	ldr	r2, [r3, #20]
 80062c4:	4b13      	ldr	r3, [pc, #76]	; (8006314 <HAL_RCC_ClockConfig+0x3d0>)
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d208      	bcs.n	80062e2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80062d0:	4b10      	ldr	r3, [pc, #64]	; (8006314 <HAL_RCC_ClockConfig+0x3d0>)
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	490d      	ldr	r1, [pc, #52]	; (8006314 <HAL_RCC_ClockConfig+0x3d0>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80062e2:	f000 f821 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 80062e6:	4602      	mov	r2, r0
 80062e8:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <HAL_RCC_ClockConfig+0x3d0>)
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	f003 030f 	and.w	r3, r3, #15
 80062f0:	490a      	ldr	r1, [pc, #40]	; (800631c <HAL_RCC_ClockConfig+0x3d8>)
 80062f2:	5ccb      	ldrb	r3, [r1, r3]
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
 80062f8:	4a09      	ldr	r2, [pc, #36]	; (8006320 <HAL_RCC_ClockConfig+0x3dc>)
 80062fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80062fc:	4b09      	ldr	r3, [pc, #36]	; (8006324 <HAL_RCC_ClockConfig+0x3e0>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4618      	mov	r0, r3
 8006302:	f7fb faf9 	bl	80018f8 <HAL_InitTick>
 8006306:	4603      	mov	r3, r0
 8006308:	73fb      	strb	r3, [r7, #15]

  return status;
 800630a:	7bfb      	ldrb	r3, [r7, #15]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	46020c00 	.word	0x46020c00
 8006318:	40022000 	.word	0x40022000
 800631c:	080159c0 	.word	0x080159c0
 8006320:	20000000 	.word	0x20000000
 8006324:	20000004 	.word	0x20000004

08006328 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006328:	b480      	push	{r7}
 800632a:	b08b      	sub	sp, #44	; 0x2c
 800632c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006336:	4b7b      	ldr	r3, [pc, #492]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f003 030c 	and.w	r3, r3, #12
 800633e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006340:	4b78      	ldr	r3, [pc, #480]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	f003 0303 	and.w	r3, r3, #3
 8006348:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_RCC_GetSysClockFreq+0x34>
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	2b0c      	cmp	r3, #12
 8006354:	d121      	bne.n	800639a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d11e      	bne.n	800639a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800635c:	4b71      	ldr	r3, [pc, #452]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d107      	bne.n	8006378 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006368:	4b6e      	ldr	r3, [pc, #440]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800636a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800636e:	0b1b      	lsrs	r3, r3, #12
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
 8006376:	e005      	b.n	8006384 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006378:	4b6a      	ldr	r3, [pc, #424]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	0f1b      	lsrs	r3, r3, #28
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006384:	4a68      	ldr	r2, [pc, #416]	; (8006528 <HAL_RCC_GetSysClockFreq+0x200>)
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800638c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d110      	bne.n	80063b6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006398:	e00d      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800639a:	4b62      	ldr	r3, [pc, #392]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f003 030c 	and.w	r3, r3, #12
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d102      	bne.n	80063ac <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063a6:	4b61      	ldr	r3, [pc, #388]	; (800652c <HAL_RCC_GetSysClockFreq+0x204>)
 80063a8:	623b      	str	r3, [r7, #32]
 80063aa:	e004      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d101      	bne.n	80063b6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063b2:	4b5e      	ldr	r3, [pc, #376]	; (800652c <HAL_RCC_GetSysClockFreq+0x204>)
 80063b4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2b0c      	cmp	r3, #12
 80063ba:	f040 80ac 	bne.w	8006516 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80063be:	4b59      	ldr	r3, [pc, #356]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80063c8:	4b56      	ldr	r3, [pc, #344]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	0a1b      	lsrs	r3, r3, #8
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	3301      	adds	r3, #1
 80063d4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80063d6:	4b53      	ldr	r3, [pc, #332]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063da:	091b      	lsrs	r3, r3, #4
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80063e2:	4b50      	ldr	r3, [pc, #320]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	08db      	lsrs	r3, r3, #3
 80063e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	fb02 f303 	mul.w	r3, r2, r3
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8086 	beq.w	8006512 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b02      	cmp	r3, #2
 800640a:	d003      	beq.n	8006414 <HAL_RCC_GetSysClockFreq+0xec>
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2b03      	cmp	r3, #3
 8006410:	d022      	beq.n	8006458 <HAL_RCC_GetSysClockFreq+0x130>
 8006412:	e043      	b.n	800649c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8006530 <HAL_RCC_GetSysClockFreq+0x208>
 8006422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006426:	4b3f      	ldr	r3, [pc, #252]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006436:	ed97 6a01 	vldr	s12, [r7, #4]
 800643a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006534 <HAL_RCC_GetSysClockFreq+0x20c>
 800643e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006442:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800644a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800644e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006452:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8006456:	e046      	b.n	80064e6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006462:	eddf 6a33 	vldr	s13, [pc, #204]	; 8006530 <HAL_RCC_GetSysClockFreq+0x208>
 8006466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800646a:	4b2e      	ldr	r3, [pc, #184]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800646c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800647a:	ed97 6a01 	vldr	s12, [r7, #4]
 800647e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006534 <HAL_RCC_GetSysClockFreq+0x20c>
 8006482:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006486:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800648a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800648e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006496:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800649a:	e024      	b.n	80064e6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	ee07 3a90 	vmov	s15, r3
 80064ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b4:	4b1b      	ldr	r3, [pc, #108]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80064b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064bc:	ee07 3a90 	vmov	s15, r3
 80064c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80064c4:	ed97 6a01 	vldr	s12, [r7, #4]
 80064c8:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8006534 <HAL_RCC_GetSysClockFreq+0x20c>
 80064cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80064d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e0:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80064e4:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80064e6:	4b0f      	ldr	r3, [pc, #60]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80064e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ea:	0e1b      	lsrs	r3, r3, #24
 80064ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f0:	3301      	adds	r3, #1
 80064f2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800650a:	ee17 3a90 	vmov	r3, s15
 800650e:	623b      	str	r3, [r7, #32]
 8006510:	e001      	b.n	8006516 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8006516:	6a3b      	ldr	r3, [r7, #32]
}
 8006518:	4618      	mov	r0, r3
 800651a:	372c      	adds	r7, #44	; 0x2c
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	46020c00 	.word	0x46020c00
 8006528:	080159d8 	.word	0x080159d8
 800652c:	00f42400 	.word	0x00f42400
 8006530:	4b742400 	.word	0x4b742400
 8006534:	46000000 	.word	0x46000000

08006538 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800653c:	f7ff fef4 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 8006540:	4602      	mov	r2, r0
 8006542:	4b07      	ldr	r3, [pc, #28]	; (8006560 <HAL_RCC_GetHCLKFreq+0x28>)
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	4906      	ldr	r1, [pc, #24]	; (8006564 <HAL_RCC_GetHCLKFreq+0x2c>)
 800654c:	5ccb      	ldrb	r3, [r1, r3]
 800654e:	fa22 f303 	lsr.w	r3, r2, r3
 8006552:	4a05      	ldr	r2, [pc, #20]	; (8006568 <HAL_RCC_GetHCLKFreq+0x30>)
 8006554:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006556:	4b04      	ldr	r3, [pc, #16]	; (8006568 <HAL_RCC_GetHCLKFreq+0x30>)
 8006558:	681b      	ldr	r3, [r3, #0]
}
 800655a:	4618      	mov	r0, r3
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	46020c00 	.word	0x46020c00
 8006564:	080159c0 	.word	0x080159c0
 8006568:	20000000 	.word	0x20000000

0800656c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006570:	f7ff ffe2 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4b05      	ldr	r3, [pc, #20]	; (800658c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	4903      	ldr	r1, [pc, #12]	; (8006590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006582:	5ccb      	ldrb	r3, [r1, r3]
 8006584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006588:	4618      	mov	r0, r3
 800658a:	bd80      	pop	{r7, pc}
 800658c:	46020c00 	.word	0x46020c00
 8006590:	080159d0 	.word	0x080159d0

08006594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006598:	f7ff ffce 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 800659c:	4602      	mov	r2, r0
 800659e:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	0a1b      	lsrs	r3, r3, #8
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	4903      	ldr	r1, [pc, #12]	; (80065b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065aa:	5ccb      	ldrb	r3, [r1, r3]
 80065ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	46020c00 	.word	0x46020c00
 80065b8:	080159d0 	.word	0x080159d0

080065bc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80065c0:	f7ff ffba 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 80065c4:	4602      	mov	r2, r0
 80065c6:	4b05      	ldr	r3, [pc, #20]	; (80065dc <HAL_RCC_GetPCLK3Freq+0x20>)
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	091b      	lsrs	r3, r3, #4
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	4903      	ldr	r1, [pc, #12]	; (80065e0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80065d2:	5ccb      	ldrb	r3, [r1, r3]
 80065d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065d8:	4618      	mov	r0, r3
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	46020c00 	.word	0x46020c00
 80065e0:	080159d0 	.word	0x080159d0

080065e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	221f      	movs	r2, #31
 80065f2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80065f4:	4b15      	ldr	r3, [pc, #84]	; (800664c <HAL_RCC_GetClockConfig+0x68>)
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	f003 0203 	and.w	r2, r3, #3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006600:	4b12      	ldr	r3, [pc, #72]	; (800664c <HAL_RCC_GetClockConfig+0x68>)
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	f003 020f 	and.w	r2, r3, #15
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800660c:	4b0f      	ldr	r3, [pc, #60]	; (800664c <HAL_RCC_GetClockConfig+0x68>)
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8006618:	4b0c      	ldr	r3, [pc, #48]	; (800664c <HAL_RCC_GetClockConfig+0x68>)
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	091b      	lsrs	r3, r3, #4
 800661e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8006626:	4b09      	ldr	r3, [pc, #36]	; (800664c <HAL_RCC_GetClockConfig+0x68>)
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006632:	4b07      	ldr	r3, [pc, #28]	; (8006650 <HAL_RCC_GetClockConfig+0x6c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 020f 	and.w	r2, r3, #15
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	601a      	str	r2, [r3, #0]
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	46020c00 	.word	0x46020c00
 8006650:	40022000 	.word	0x40022000

08006654 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800665c:	4b3e      	ldr	r3, [pc, #248]	; (8006758 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800665e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800666a:	f7fe fc15 	bl	8004e98 <HAL_PWREx_GetVoltageRange>
 800666e:	6178      	str	r0, [r7, #20]
 8006670:	e019      	b.n	80066a6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006672:	4b39      	ldr	r3, [pc, #228]	; (8006758 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006678:	4a37      	ldr	r2, [pc, #220]	; (8006758 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800667a:	f043 0304 	orr.w	r3, r3, #4
 800667e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006682:	4b35      	ldr	r3, [pc, #212]	; (8006758 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006690:	f7fe fc02 	bl	8004e98 <HAL_PWREx_GetVoltageRange>
 8006694:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006696:	4b30      	ldr	r3, [pc, #192]	; (8006758 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800669c:	4a2e      	ldr	r2, [pc, #184]	; (8006758 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800669e:	f023 0304 	bic.w	r3, r3, #4
 80066a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066ac:	d003      	beq.n	80066b6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066b4:	d109      	bne.n	80066ca <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066bc:	d202      	bcs.n	80066c4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80066be:	2301      	movs	r3, #1
 80066c0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80066c2:	e033      	b.n	800672c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80066c4:	2300      	movs	r3, #0
 80066c6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80066c8:	e030      	b.n	800672c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066d0:	d208      	bcs.n	80066e4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d8:	d102      	bne.n	80066e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80066da:	2303      	movs	r3, #3
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	e025      	b.n	800672c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e035      	b.n	8006750 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ea:	d90f      	bls.n	800670c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d109      	bne.n	8006706 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066f8:	d902      	bls.n	8006700 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80066fa:	2300      	movs	r3, #0
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	e015      	b.n	800672c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006700:	2301      	movs	r3, #1
 8006702:	613b      	str	r3, [r7, #16]
 8006704:	e012      	b.n	800672c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006706:	2300      	movs	r3, #0
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	e00f      	b.n	800672c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006712:	d109      	bne.n	8006728 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800671a:	d102      	bne.n	8006722 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800671c:	2301      	movs	r3, #1
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	e004      	b.n	800672c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006722:	2302      	movs	r3, #2
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	e001      	b.n	800672c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006728:	2301      	movs	r3, #1
 800672a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800672c:	4b0b      	ldr	r3, [pc, #44]	; (800675c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f023 020f 	bic.w	r2, r3, #15
 8006734:	4909      	ldr	r1, [pc, #36]	; (800675c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800673c:	4b07      	ldr	r3, [pc, #28]	; (800675c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 030f 	and.w	r3, r3, #15
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	429a      	cmp	r2, r3
 8006748:	d001      	beq.n	800674e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e000      	b.n	8006750 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	46020c00 	.word	0x46020c00
 800675c:	40022000 	.word	0x40022000

08006760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006764:	b0ba      	sub	sp, #232	; 0xe8
 8006766:	af00      	add	r7, sp, #0
 8006768:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800676c:	2300      	movs	r3, #0
 800676e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006772:	2300      	movs	r3, #0
 8006774:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006778:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f002 0401 	and.w	r4, r2, #1
 8006784:	2500      	movs	r5, #0
 8006786:	ea54 0305 	orrs.w	r3, r4, r5
 800678a:	d00b      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800678c:	4bcb      	ldr	r3, [pc, #812]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800678e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006792:	f023 0103 	bic.w	r1, r3, #3
 8006796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800679a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679c:	4ac7      	ldr	r2, [pc, #796]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800679e:	430b      	orrs	r3, r1
 80067a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f002 0802 	and.w	r8, r2, #2
 80067b0:	f04f 0900 	mov.w	r9, #0
 80067b4:	ea58 0309 	orrs.w	r3, r8, r9
 80067b8:	d00b      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80067ba:	4bc0      	ldr	r3, [pc, #768]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067c0:	f023 010c 	bic.w	r1, r3, #12
 80067c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ca:	4abc      	ldr	r2, [pc, #752]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067cc:	430b      	orrs	r3, r1
 80067ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f002 0a04 	and.w	sl, r2, #4
 80067de:	f04f 0b00 	mov.w	fp, #0
 80067e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80067e6:	d00b      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80067e8:	4bb4      	ldr	r3, [pc, #720]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067ee:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80067f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f8:	4ab0      	ldr	r2, [pc, #704]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067fa:	430b      	orrs	r3, r1
 80067fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	f002 0308 	and.w	r3, r2, #8
 800680c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006810:	2300      	movs	r3, #0
 8006812:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006816:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800681a:	460b      	mov	r3, r1
 800681c:	4313      	orrs	r3, r2
 800681e:	d00b      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006820:	4ba6      	ldr	r3, [pc, #664]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006826:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800682a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800682e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006830:	4aa2      	ldr	r2, [pc, #648]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006832:	430b      	orrs	r3, r1
 8006834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006838:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f002 0310 	and.w	r3, r2, #16
 8006844:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006848:	2300      	movs	r3, #0
 800684a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800684e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006852:	460b      	mov	r3, r1
 8006854:	4313      	orrs	r3, r2
 8006856:	d00b      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006858:	4b98      	ldr	r3, [pc, #608]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800685a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800685e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006868:	4a94      	ldr	r2, [pc, #592]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800686a:	430b      	orrs	r3, r1
 800686c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f002 0320 	and.w	r3, r2, #32
 800687c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006880:	2300      	movs	r3, #0
 8006882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006886:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800688a:	460b      	mov	r3, r1
 800688c:	4313      	orrs	r3, r2
 800688e:	d00b      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006890:	4b8a      	ldr	r3, [pc, #552]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006896:	f023 0107 	bic.w	r1, r3, #7
 800689a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800689e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a0:	4a86      	ldr	r2, [pc, #536]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068a2:	430b      	orrs	r3, r1
 80068a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80068b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068b8:	2300      	movs	r3, #0
 80068ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4313      	orrs	r3, r2
 80068c6:	d00b      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80068c8:	4b7c      	ldr	r3, [pc, #496]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068ce:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80068d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068d8:	4a78      	ldr	r2, [pc, #480]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068da:	430b      	orrs	r3, r1
 80068dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80068ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068f0:	2300      	movs	r3, #0
 80068f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068fa:	460b      	mov	r3, r1
 80068fc:	4313      	orrs	r3, r2
 80068fe:	d00b      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006900:	4b6e      	ldr	r3, [pc, #440]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800690a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800690e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006910:	4a6a      	ldr	r2, [pc, #424]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006912:	430b      	orrs	r3, r1
 8006914:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8006924:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006928:	2300      	movs	r3, #0
 800692a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800692e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006932:	460b      	mov	r3, r1
 8006934:	4313      	orrs	r3, r2
 8006936:	d00b      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006938:	4b60      	ldr	r3, [pc, #384]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800693a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800693e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006948:	4a5c      	ldr	r2, [pc, #368]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800694a:	430b      	orrs	r3, r1
 800694c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006958:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800695c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006960:	2300      	movs	r3, #0
 8006962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006966:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800696a:	460b      	mov	r3, r1
 800696c:	4313      	orrs	r3, r2
 800696e:	d00b      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006970:	4b52      	ldr	r3, [pc, #328]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006976:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800697a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800697e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006980:	4a4e      	ldr	r2, [pc, #312]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006982:	430b      	orrs	r3, r1
 8006984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006988:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8006994:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006998:	2300      	movs	r3, #0
 800699a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800699e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80069a2:	460b      	mov	r3, r1
 80069a4:	4313      	orrs	r3, r2
 80069a6:	d00b      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80069a8:	4b44      	ldr	r3, [pc, #272]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069ae:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80069b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069b8:	4a40      	ldr	r2, [pc, #256]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069ba:	430b      	orrs	r3, r1
 80069bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80069c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80069cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069d0:	2300      	movs	r3, #0
 80069d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80069d6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80069da:	460b      	mov	r3, r1
 80069dc:	4313      	orrs	r3, r2
 80069de:	d00b      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80069e0:	4b36      	ldr	r3, [pc, #216]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069e6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80069ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069f0:	4a32      	ldr	r2, [pc, #200]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069f2:	430b      	orrs	r3, r1
 80069f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80069f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006a04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006a12:	460b      	mov	r3, r1
 8006a14:	4313      	orrs	r3, r2
 8006a16:	d00c      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006a18:	4b28      	ldr	r3, [pc, #160]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a2a:	4a24      	ldr	r2, [pc, #144]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006a3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a40:	2300      	movs	r3, #0
 8006a42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a44:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	d04f      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a56:	2b80      	cmp	r3, #128	; 0x80
 8006a58:	d02d      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006a5a:	2b80      	cmp	r3, #128	; 0x80
 8006a5c:	d827      	bhi.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006a5e:	2b60      	cmp	r3, #96	; 0x60
 8006a60:	d02e      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006a62:	2b60      	cmp	r3, #96	; 0x60
 8006a64:	d823      	bhi.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	d006      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006a6a:	2b40      	cmp	r3, #64	; 0x40
 8006a6c:	d81f      	bhi.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d009      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	d011      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006a76:	e01a      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a78:	4b10      	ldr	r3, [pc, #64]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7c:	4a0f      	ldr	r2, [pc, #60]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a82:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006a84:	e01d      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f002 fa41 	bl	8008f14 <RCCEx_PLL2_Config>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006a98:	e013      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a9e:	332c      	adds	r3, #44	; 0x2c
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f002 facf 	bl	8009044 <RCCEx_PLL3_Config>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006aac:	e009      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006ab4:	e005      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8006ab6:	bf00      	nop
 8006ab8:	e003      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006aba:	bf00      	nop
 8006abc:	46020c00 	.word	0x46020c00
        break;
 8006ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10d      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006aca:	4bb6      	ldr	r3, [pc, #728]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006acc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ad0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8006ad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006adc:	4ab1      	ldr	r2, [pc, #708]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006ade:	430b      	orrs	r3, r1
 8006ae0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006ae4:	e003      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006aea:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006afa:	673b      	str	r3, [r7, #112]	; 0x70
 8006afc:	2300      	movs	r3, #0
 8006afe:	677b      	str	r3, [r7, #116]	; 0x74
 8006b00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006b04:	460b      	mov	r3, r1
 8006b06:	4313      	orrs	r3, r2
 8006b08:	d053      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b16:	d033      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b1c:	d82c      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b22:	d02f      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b28:	d826      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b2e:	d008      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b34:	d820      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8006b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b3e:	d011      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006b40:	e01a      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b42:	4b98      	ldr	r3, [pc, #608]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	4a97      	ldr	r2, [pc, #604]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b4c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006b4e:	e01a      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b54:	3308      	adds	r3, #8
 8006b56:	4618      	mov	r0, r3
 8006b58:	f002 f9dc 	bl	8008f14 <RCCEx_PLL2_Config>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006b62:	e010      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b68:	332c      	adds	r3, #44	; 0x2c
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f002 fa6a 	bl	8009044 <RCCEx_PLL3_Config>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006b76:	e006      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006b7e:	e002      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006b80:	bf00      	nop
 8006b82:	e000      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b86:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10d      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006b8e:	4b85      	ldr	r3, [pc, #532]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b94:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006b98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ba0:	4a80      	ldr	r2, [pc, #512]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006ba8:	e003      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006baa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006bae:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006bbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bc4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	d046      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006bd6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006bda:	d028      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006bdc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006be0:	d821      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006be6:	d022      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bec:	d81b      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006bee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bf2:	d01c      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006bf4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bf8:	d815      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bfe:	d008      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c04:	d80f      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d011      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0e:	d00e      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006c10:	e009      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c16:	3308      	adds	r3, #8
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f002 f97b 	bl	8008f14 <RCCEx_PLL2_Config>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006c24:	e004      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006c2c:	e000      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8006c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c30:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10d      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006c38:	4b5a      	ldr	r3, [pc, #360]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006c3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c3e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006c42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c4a:	4a56      	ldr	r2, [pc, #344]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006c52:	e003      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c54:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c58:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006c5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c64:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006c68:	663b      	str	r3, [r7, #96]	; 0x60
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c6e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006c72:	460b      	mov	r3, r1
 8006c74:	4313      	orrs	r3, r2
 8006c76:	d03f      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006c78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d81e      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006c84:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006ccb 	.word	0x08006ccb
 8006c90:	08006ca1 	.word	0x08006ca1
 8006c94:	08006caf 	.word	0x08006caf
 8006c98:	08006ccb 	.word	0x08006ccb
 8006c9c:	08006ccb 	.word	0x08006ccb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ca0:	4b40      	ldr	r3, [pc, #256]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca4:	4a3f      	ldr	r2, [pc, #252]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006caa:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006cac:	e00e      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cb2:	332c      	adds	r3, #44	; 0x2c
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f002 f9c5 	bl	8009044 <RCCEx_PLL3_Config>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006cc0:	e004      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006cc8:	e000      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8006cca:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ccc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10d      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006cd4:	4b33      	ldr	r3, [pc, #204]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006cd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006cda:	f023 0107 	bic.w	r1, r3, #7
 8006cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce6:	4a2f      	ldr	r2, [pc, #188]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006cee:	e003      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006cf4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006cf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d06:	2300      	movs	r3, #0
 8006d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d0a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4313      	orrs	r3, r2
 8006d12:	d04d      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006d14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d20:	d028      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006d22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d26:	d821      	bhi.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006d28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d2c:	d024      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006d2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d32:	d81b      	bhi.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d38:	d00e      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8006d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d3e:	d815      	bhi.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01b      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8006d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d48:	d110      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d4a:	4b16      	ldr	r3, [pc, #88]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	4a15      	ldr	r2, [pc, #84]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d54:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006d56:	e012      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d5c:	332c      	adds	r3, #44	; 0x2c
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f002 f970 	bl	8009044 <RCCEx_PLL3_Config>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006d6a:	e008      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006d72:	e004      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006d74:	bf00      	nop
 8006d76:	e002      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006d78:	bf00      	nop
 8006d7a:	e000      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006d7c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d110      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006d86:	4b07      	ldr	r3, [pc, #28]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d8c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006d90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d98:	4a02      	ldr	r2, [pc, #8]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006d9a:	430b      	orrs	r3, r1
 8006d9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006da0:	e006      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006da2:	bf00      	nop
 8006da4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006dac:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006db0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006dbc:	653b      	str	r3, [r7, #80]	; 0x50
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	657b      	str	r3, [r7, #84]	; 0x54
 8006dc2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	f000 80b5 	beq.w	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dd4:	4b9d      	ldr	r3, [pc, #628]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d113      	bne.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006de2:	4b9a      	ldr	r3, [pc, #616]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006de8:	4a98      	ldr	r2, [pc, #608]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006dea:	f043 0304 	orr.w	r3, r3, #4
 8006dee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006df2:	4b96      	ldr	r3, [pc, #600]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006e04:	2301      	movs	r3, #1
 8006e06:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006e0a:	4b91      	ldr	r3, [pc, #580]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	4a90      	ldr	r2, [pc, #576]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006e10:	f043 0301 	orr.w	r3, r3, #1
 8006e14:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e16:	f7fa ff0d 	bl	8001c34 <HAL_GetTick>
 8006e1a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006e1e:	e00b      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e20:	f7fa ff08 	bl	8001c34 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d903      	bls.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006e36:	e005      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006e38:	4b85      	ldr	r3, [pc, #532]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0ed      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8006e44:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d165      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e4c:	4b7f      	ldr	r3, [pc, #508]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d023      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8006e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e66:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d01b      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e72:	4b76      	ldr	r3, [pc, #472]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e80:	4b72      	ldr	r3, [pc, #456]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e86:	4a71      	ldr	r2, [pc, #452]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e90:	4b6e      	ldr	r3, [pc, #440]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e96:	4a6d      	ldr	r2, [pc, #436]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ea0:	4a6a      	ldr	r2, [pc, #424]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d019      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb6:	f7fa febd 	bl	8001c34 <HAL_GetTick>
 8006eba:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ebe:	e00d      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec0:	f7fa feb8 	bl	8001c34 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eca:	1ad2      	subs	r2, r2, r3
 8006ecc:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d903      	bls.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006eda:	e006      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006edc:	4b5b      	ldr	r3, [pc, #364]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0ea      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006eea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10d      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006ef2:	4b56      	ldr	r3, [pc, #344]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ef8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006efc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006f04:	4a51      	ldr	r2, [pc, #324]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006f06:	430b      	orrs	r3, r1
 8006f08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006f0c:	e008      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006f12:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006f16:	e003      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f18:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006f1c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f20:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d107      	bne.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f28:	4b48      	ldr	r3, [pc, #288]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f2e:	4a47      	ldr	r2, [pc, #284]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006f30:	f023 0304 	bic.w	r3, r3, #4
 8006f34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006f38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f46:	2300      	movs	r3, #0
 8006f48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f4a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4313      	orrs	r3, r2
 8006f52:	d042      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f5c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f60:	d022      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006f62:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006f66:	d81b      	bhi.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f6c:	d011      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006f6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f72:	d815      	bhi.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d019      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006f78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f7c:	d110      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f82:	3308      	adds	r3, #8
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 ffc5 	bl	8008f14 <RCCEx_PLL2_Config>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006f90:	e00d      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f92:	4b2e      	ldr	r3, [pc, #184]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	4a2d      	ldr	r2, [pc, #180]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006f9e:	e006      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006fa6:	e002      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006fa8:	bf00      	nop
 8006faa:	e000      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006fac:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006fae:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10d      	bne.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006fb6:	4b25      	ldr	r3, [pc, #148]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fbc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006fc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fc8:	4a20      	ldr	r2, [pc, #128]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006fca:	430b      	orrs	r3, r1
 8006fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fd0:	e003      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006fd6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006fe6:	643b      	str	r3, [r7, #64]	; 0x40
 8006fe8:	2300      	movs	r3, #0
 8006fea:	647b      	str	r3, [r7, #68]	; 0x44
 8006fec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	d032      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007002:	d00b      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007008:	d804      	bhi.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d008      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800700e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007012:	d007      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800701a:	e004      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800701c:	bf00      	nop
 800701e:	e002      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007020:	bf00      	nop
 8007022:	e000      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007024:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007026:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d112      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800702e:	4b07      	ldr	r3, [pc, #28]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007030:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007034:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007038:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800703c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007040:	4a02      	ldr	r2, [pc, #8]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007042:	430b      	orrs	r3, r1
 8007044:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007048:	e008      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800704a:	bf00      	nop
 800704c:	46020c00 	.word	0x46020c00
 8007050:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007054:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007058:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800705c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007068:	63bb      	str	r3, [r7, #56]	; 0x38
 800706a:	2300      	movs	r3, #0
 800706c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800706e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007072:	460b      	mov	r3, r1
 8007074:	4313      	orrs	r3, r2
 8007076:	d00c      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007078:	4b98      	ldr	r3, [pc, #608]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800707a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800707e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8007082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800708a:	4a94      	ldr	r2, [pc, #592]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800708c:	430b      	orrs	r3, r1
 800708e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800709e:	633b      	str	r3, [r7, #48]	; 0x30
 80070a0:	2300      	movs	r3, #0
 80070a2:	637b      	str	r3, [r7, #52]	; 0x34
 80070a4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80070a8:	460b      	mov	r3, r1
 80070aa:	4313      	orrs	r3, r2
 80070ac:	d019      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80070ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070ba:	d105      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80070bc:	4b87      	ldr	r3, [pc, #540]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c0:	4a86      	ldr	r2, [pc, #536]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c6:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80070c8:	4b84      	ldr	r3, [pc, #528]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80070ce:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80070d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070da:	4a80      	ldr	r2, [pc, #512]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070dc:	430b      	orrs	r3, r1
 80070de:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80070e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80070ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80070f0:	2300      	movs	r3, #0
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80070f8:	460b      	mov	r3, r1
 80070fa:	4313      	orrs	r3, r2
 80070fc:	d00c      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80070fe:	4b77      	ldr	r3, [pc, #476]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007104:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800710c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007110:	4972      	ldr	r1, [pc, #456]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007112:	4313      	orrs	r3, r2
 8007114:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007118:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007120:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007124:	623b      	str	r3, [r7, #32]
 8007126:	2300      	movs	r3, #0
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
 800712a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800712e:	460b      	mov	r3, r1
 8007130:	4313      	orrs	r3, r2
 8007132:	d00c      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007134:	4b69      	ldr	r3, [pc, #420]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800713a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800713e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007142:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007146:	4965      	ldr	r1, [pc, #404]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007148:	4313      	orrs	r3, r2
 800714a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800714e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800715a:	61bb      	str	r3, [r7, #24]
 800715c:	2300      	movs	r3, #0
 800715e:	61fb      	str	r3, [r7, #28]
 8007160:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007164:	460b      	mov	r3, r1
 8007166:	4313      	orrs	r3, r2
 8007168:	d00c      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800716a:	4b5c      	ldr	r3, [pc, #368]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800716c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007170:	f023 0218 	bic.w	r2, r3, #24
 8007174:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007178:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800717c:	4957      	ldr	r1, [pc, #348]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007184:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8007190:	613b      	str	r3, [r7, #16]
 8007192:	2300      	movs	r3, #0
 8007194:	617b      	str	r3, [r7, #20]
 8007196:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800719a:	460b      	mov	r3, r1
 800719c:	4313      	orrs	r3, r2
 800719e:	d032      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80071a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071ac:	d105      	bne.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ae:	4b4b      	ldr	r3, [pc, #300]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80071b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b2:	4a4a      	ldr	r2, [pc, #296]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80071b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b8:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80071ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071c6:	d108      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071cc:	3308      	adds	r3, #8
 80071ce:	4618      	mov	r0, r3
 80071d0:	f001 fea0 	bl	8008f14 <RCCEx_PLL2_Config>
 80071d4:	4603      	mov	r3, r0
 80071d6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80071da:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10d      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80071e2:	4b3e      	ldr	r3, [pc, #248]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80071e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80071e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071f4:	4939      	ldr	r1, [pc, #228]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80071fc:	e003      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007202:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8007212:	60bb      	str	r3, [r7, #8]
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800721c:	460b      	mov	r3, r1
 800721e:	4313      	orrs	r3, r2
 8007220:	d03a      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800722a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800722e:	d00e      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8007230:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007234:	d815      	bhi.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007236:	2b00      	cmp	r3, #0
 8007238:	d017      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800723a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800723e:	d110      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007240:	4b26      	ldr	r3, [pc, #152]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	4a25      	ldr	r2, [pc, #148]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800724a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800724c:	e00e      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800724e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007252:	3308      	adds	r3, #8
 8007254:	4618      	mov	r0, r3
 8007256:	f001 fe5d 	bl	8008f14 <RCCEx_PLL2_Config>
 800725a:	4603      	mov	r3, r0
 800725c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007260:	e004      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007268:	e000      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800726a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800726c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10d      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007274:	4b19      	ldr	r3, [pc, #100]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800727a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800727e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007286:	4915      	ldr	r1, [pc, #84]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007288:	4313      	orrs	r3, r2
 800728a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800728e:	e003      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007290:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007294:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007298:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80072a4:	603b      	str	r3, [r7, #0]
 80072a6:	2300      	movs	r3, #0
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80072ae:	460b      	mov	r3, r1
 80072b0:	4313      	orrs	r3, r2
 80072b2:	d00c      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80072b4:	4b09      	ldr	r3, [pc, #36]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80072b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80072ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80072be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072c6:	4905      	ldr	r1, [pc, #20]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80072ce:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	37e8      	adds	r7, #232	; 0xe8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072dc:	46020c00 	.word	0x46020c00

080072e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b089      	sub	sp, #36	; 0x24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80072e8:	4bad      	ldr	r3, [pc, #692]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80072ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80072f2:	4bab      	ldr	r3, [pc, #684]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80072f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80072fc:	4ba8      	ldr	r3, [pc, #672]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80072fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007300:	0a1b      	lsrs	r3, r3, #8
 8007302:	f003 030f 	and.w	r3, r3, #15
 8007306:	3301      	adds	r3, #1
 8007308:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800730a:	4ba5      	ldr	r3, [pc, #660]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	091b      	lsrs	r3, r3, #4
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007316:	4ba2      	ldr	r3, [pc, #648]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	08db      	lsrs	r3, r3, #3
 800731c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	fb02 f303 	mul.w	r3, r2, r3
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8123 	beq.w	8007580 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2b03      	cmp	r3, #3
 800733e:	d062      	beq.n	8007406 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2b03      	cmp	r3, #3
 8007344:	f200 8081 	bhi.w	800744a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d024      	beq.n	8007398 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b02      	cmp	r3, #2
 8007352:	d17a      	bne.n	800744a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	eddf 6a91 	vldr	s13, [pc, #580]	; 80075a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8007362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007366:	4b8e      	ldr	r3, [pc, #568]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007376:	ed97 6a02 	vldr	s12, [r7, #8]
 800737a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80075a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800737e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007382:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800738a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007396:	e08f      	b.n	80074b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007398:	4b81      	ldr	r3, [pc, #516]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d005      	beq.n	80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 80073a4:	4b7e      	ldr	r3, [pc, #504]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	0f1b      	lsrs	r3, r3, #28
 80073aa:	f003 030f 	and.w	r3, r3, #15
 80073ae:	e006      	b.n	80073be <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80073b0:	4b7b      	ldr	r3, [pc, #492]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80073b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073b6:	041b      	lsls	r3, r3, #16
 80073b8:	0f1b      	lsrs	r3, r3, #28
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	4a7b      	ldr	r2, [pc, #492]	; (80075ac <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80073c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c4:	ee07 3a90 	vmov	s15, r3
 80073c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	ee07 3a90 	vmov	s15, r3
 80073e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80073e8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80075a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80073ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80073fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007400:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007404:	e058      	b.n	80074b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	ee07 3a90 	vmov	s15, r3
 800740c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007410:	eddf 6a64 	vldr	s13, [pc, #400]	; 80075a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8007414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007418:	4b61      	ldr	r3, [pc, #388]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800741a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007420:	ee07 3a90 	vmov	s15, r3
 8007424:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007428:	ed97 6a02 	vldr	s12, [r7, #8]
 800742c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80075a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007430:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007434:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800743c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007444:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007448:	e036      	b.n	80074b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800744a:	4b55      	ldr	r3, [pc, #340]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d005      	beq.n	8007462 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8007456:	4b52      	ldr	r3, [pc, #328]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	0f1b      	lsrs	r3, r3, #28
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	e006      	b.n	8007470 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8007462:	4b4f      	ldr	r3, [pc, #316]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007468:	041b      	lsls	r3, r3, #16
 800746a:	0f1b      	lsrs	r3, r3, #28
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	4a4e      	ldr	r2, [pc, #312]	; (80075ac <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8007472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	ee07 3a90 	vmov	s15, r3
 8007484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007496:	ed97 6a02 	vldr	s12, [r7, #8]
 800749a:	eddf 5a43 	vldr	s11, [pc, #268]	; 80075a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800749e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80074ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074b6:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80074b8:	4b39      	ldr	r3, [pc, #228]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d017      	beq.n	80074f4 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80074c4:	4b36      	ldr	r3, [pc, #216]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80074c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c8:	0a5b      	lsrs	r3, r3, #9
 80074ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80074d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074da:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80074de:	edd7 6a07 	vldr	s13, [r7, #28]
 80074e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ea:	ee17 2a90 	vmov	r2, s15
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	e002      	b.n	80074fa <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80074fa:	4b29      	ldr	r3, [pc, #164]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80074fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d017      	beq.n	8007536 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007506:	4b26      	ldr	r3, [pc, #152]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750a:	0c1b      	lsrs	r3, r3, #16
 800750c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007510:	ee07 3a90 	vmov	s15, r3
 8007514:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800751c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007520:	edd7 6a07 	vldr	s13, [r7, #28]
 8007524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800752c:	ee17 2a90 	vmov	r2, s15
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	605a      	str	r2, [r3, #4]
 8007534:	e002      	b.n	800753c <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800753c:	4b18      	ldr	r3, [pc, #96]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d017      	beq.n	8007578 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007548:	4b15      	ldr	r3, [pc, #84]	; (80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800754a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754c:	0e1b      	lsrs	r3, r3, #24
 800754e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800755a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800755e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007562:	edd7 6a07 	vldr	s13, [r7, #28]
 8007566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800756a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800756e:	ee17 2a90 	vmov	r2, s15
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007576:	e00c      	b.n	8007592 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	609a      	str	r2, [r3, #8]
}
 800757e:	e008      	b.n	8007592 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	609a      	str	r2, [r3, #8]
}
 8007592:	bf00      	nop
 8007594:	3724      	adds	r7, #36	; 0x24
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	46020c00 	.word	0x46020c00
 80075a4:	4b742400 	.word	0x4b742400
 80075a8:	46000000 	.word	0x46000000
 80075ac:	080159d8 	.word	0x080159d8

080075b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b089      	sub	sp, #36	; 0x24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80075b8:	4bad      	ldr	r3, [pc, #692]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80075ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80075c2:	4bab      	ldr	r3, [pc, #684]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	f003 0303 	and.w	r3, r3, #3
 80075ca:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80075cc:	4ba8      	ldr	r3, [pc, #672]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	0a1b      	lsrs	r3, r3, #8
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	3301      	adds	r3, #1
 80075d8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80075da:	4ba5      	ldr	r3, [pc, #660]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80075dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075de:	091b      	lsrs	r3, r3, #4
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80075e6:	4ba2      	ldr	r3, [pc, #648]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ea:	08db      	lsrs	r3, r3, #3
 80075ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	fb02 f303 	mul.w	r3, r2, r3
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 8123 	beq.w	8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b03      	cmp	r3, #3
 800760e:	d062      	beq.n	80076d6 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2b03      	cmp	r3, #3
 8007614:	f200 8081 	bhi.w	800771a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d024      	beq.n	8007668 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d17a      	bne.n	800771a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007874 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8007632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007636:	4b8e      	ldr	r3, [pc, #568]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800763a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007646:	ed97 6a02 	vldr	s12, [r7, #8]
 800764a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007878 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800764e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007652:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800765a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800765e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007666:	e08f      	b.n	8007788 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007668:	4b81      	ldr	r3, [pc, #516]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d005      	beq.n	8007680 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8007674:	4b7e      	ldr	r3, [pc, #504]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	0f1b      	lsrs	r3, r3, #28
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	e006      	b.n	800768e <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8007680:	4b7b      	ldr	r3, [pc, #492]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007682:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007686:	041b      	lsls	r3, r3, #16
 8007688:	0f1b      	lsrs	r3, r3, #28
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	4a7b      	ldr	r2, [pc, #492]	; (800787c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8007690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007694:	ee07 3a90 	vmov	s15, r3
 8007698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	ee07 3a90 	vmov	s15, r3
 80076b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80076b8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007878 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80076bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80076cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076d4:	e058      	b.n	8007788 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	ee07 3a90 	vmov	s15, r3
 80076dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007874 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80076e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076e8:	4b61      	ldr	r3, [pc, #388]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80076ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f0:	ee07 3a90 	vmov	s15, r3
 80076f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80076f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80076fc:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007878 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007700:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007704:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800770c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007714:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007718:	e036      	b.n	8007788 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800771a:	4b55      	ldr	r3, [pc, #340]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d005      	beq.n	8007732 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8007726:	4b52      	ldr	r3, [pc, #328]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	0f1b      	lsrs	r3, r3, #28
 800772c:	f003 030f 	and.w	r3, r3, #15
 8007730:	e006      	b.n	8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8007732:	4b4f      	ldr	r3, [pc, #316]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007738:	041b      	lsls	r3, r3, #16
 800773a:	0f1b      	lsrs	r3, r3, #28
 800773c:	f003 030f 	and.w	r3, r3, #15
 8007740:	4a4e      	ldr	r2, [pc, #312]	; (800787c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8007742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	ee07 3a90 	vmov	s15, r3
 8007754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	ee07 3a90 	vmov	s15, r3
 8007762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007766:	ed97 6a02 	vldr	s12, [r7, #8]
 800776a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007878 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800776e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800777a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800777e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007786:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007788:	4b39      	ldr	r3, [pc, #228]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d017      	beq.n	80077c4 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007794:	4b36      	ldr	r3, [pc, #216]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007798:	0a5b      	lsrs	r3, r3, #9
 800779a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800779e:	ee07 3a90 	vmov	s15, r3
 80077a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80077a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077aa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80077ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80077b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ba:	ee17 2a90 	vmov	r2, s15
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	e002      	b.n	80077ca <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80077ca:	4b29      	ldr	r3, [pc, #164]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d017      	beq.n	8007806 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80077d6:	4b26      	ldr	r3, [pc, #152]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80077d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077da:	0c1b      	lsrs	r3, r3, #16
 80077dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e0:	ee07 3a90 	vmov	s15, r3
 80077e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80077e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077ec:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80077f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077fc:	ee17 2a90 	vmov	r2, s15
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	605a      	str	r2, [r3, #4]
 8007804:	e002      	b.n	800780c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800780c:	4b18      	ldr	r3, [pc, #96]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d017      	beq.n	8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007818:	4b15      	ldr	r3, [pc, #84]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800781a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781c:	0e1b      	lsrs	r3, r3, #24
 800781e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007822:	ee07 3a90 	vmov	s15, r3
 8007826:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800782a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800782e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007832:	edd7 6a07 	vldr	s13, [r7, #28]
 8007836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800783a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800783e:	ee17 2a90 	vmov	r2, s15
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007846:	e00c      	b.n	8007862 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	609a      	str	r2, [r3, #8]
}
 800784e:	e008      	b.n	8007862 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	609a      	str	r2, [r3, #8]
}
 8007862:	bf00      	nop
 8007864:	3724      	adds	r7, #36	; 0x24
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	46020c00 	.word	0x46020c00
 8007874:	4b742400 	.word	0x4b742400
 8007878:	46000000 	.word	0x46000000
 800787c:	080159d8 	.word	0x080159d8

08007880 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007880:	b480      	push	{r7}
 8007882:	b089      	sub	sp, #36	; 0x24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007888:	4bad      	ldr	r3, [pc, #692]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800788a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007890:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007892:	4bab      	ldr	r3, [pc, #684]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800789c:	4ba8      	ldr	r3, [pc, #672]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800789e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a0:	0a1b      	lsrs	r3, r3, #8
 80078a2:	f003 030f 	and.w	r3, r3, #15
 80078a6:	3301      	adds	r3, #1
 80078a8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80078aa:	4ba5      	ldr	r3, [pc, #660]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	091b      	lsrs	r3, r3, #4
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80078b6:	4ba2      	ldr	r3, [pc, #648]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80078b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ba:	08db      	lsrs	r3, r3, #3
 80078bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	fb02 f303 	mul.w	r3, r2, r3
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ce:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 8123 	beq.w	8007b20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d062      	beq.n	80079a6 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	f200 8081 	bhi.w	80079ea <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d024      	beq.n	8007938 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d17a      	bne.n	80079ea <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fe:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007b44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007906:	4b8e      	ldr	r3, [pc, #568]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007916:	ed97 6a02 	vldr	s12, [r7, #8]
 800791a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800791e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007922:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800792a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800792e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007932:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8007936:	e08f      	b.n	8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007938:	4b81      	ldr	r3, [pc, #516]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d005      	beq.n	8007950 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8007944:	4b7e      	ldr	r3, [pc, #504]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	0f1b      	lsrs	r3, r3, #28
 800794a:	f003 030f 	and.w	r3, r3, #15
 800794e:	e006      	b.n	800795e <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8007950:	4b7b      	ldr	r3, [pc, #492]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007952:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007956:	041b      	lsls	r3, r3, #16
 8007958:	0f1b      	lsrs	r3, r3, #28
 800795a:	f003 030f 	and.w	r3, r3, #15
 800795e:	4a7b      	ldr	r2, [pc, #492]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8007960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007964:	ee07 3a90 	vmov	s15, r3
 8007968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	ee07 3a90 	vmov	s15, r3
 8007972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	ee07 3a90 	vmov	s15, r3
 8007980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007984:	ed97 6a02 	vldr	s12, [r7, #8]
 8007988:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800798c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007998:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800799c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079a4:	e058      	b.n	8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	ee07 3a90 	vmov	s15, r3
 80079ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007b44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80079b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b8:	4b61      	ldr	r3, [pc, #388]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80079ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80079c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80079cc:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80079d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80079d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80079d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80079e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079e8:	e036      	b.n	8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80079ea:	4b55      	ldr	r3, [pc, #340]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d005      	beq.n	8007a02 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 80079f6:	4b52      	ldr	r3, [pc, #328]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	0f1b      	lsrs	r3, r3, #28
 80079fc:	f003 030f 	and.w	r3, r3, #15
 8007a00:	e006      	b.n	8007a10 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8007a02:	4b4f      	ldr	r3, [pc, #316]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007a04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a08:	041b      	lsls	r3, r3, #16
 8007a0a:	0f1b      	lsrs	r3, r3, #28
 8007a0c:	f003 030f 	and.w	r3, r3, #15
 8007a10:	4a4e      	ldr	r2, [pc, #312]	; (8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8007a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a16:	ee07 3a90 	vmov	s15, r3
 8007a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	ee07 3a90 	vmov	s15, r3
 8007a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	ee07 3a90 	vmov	s15, r3
 8007a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a3a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a56:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007a58:	4b39      	ldr	r3, [pc, #228]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d017      	beq.n	8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007a64:	4b36      	ldr	r3, [pc, #216]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a68:	0a5b      	lsrs	r3, r3, #9
 8007a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007a76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a7a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007a7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a8a:	ee17 2a90 	vmov	r2, s15
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	e002      	b.n	8007a9a <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007a9a:	4b29      	ldr	r3, [pc, #164]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d017      	beq.n	8007ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007aa6:	4b26      	ldr	r3, [pc, #152]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aaa:	0c1b      	lsrs	r3, r3, #16
 8007aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007ab8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007abc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007ac0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007acc:	ee17 2a90 	vmov	r2, s15
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	605a      	str	r2, [r3, #4]
 8007ad4:	e002      	b.n	8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007adc:	4b18      	ldr	r3, [pc, #96]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d017      	beq.n	8007b18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007ae8:	4b15      	ldr	r3, [pc, #84]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aec:	0e1b      	lsrs	r3, r3, #24
 8007aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007afa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007afe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007b02:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b0e:	ee17 2a90 	vmov	r2, s15
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007b16:	e00c      	b.n	8007b32 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	609a      	str	r2, [r3, #8]
}
 8007b1e:	e008      	b.n	8007b32 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	609a      	str	r2, [r3, #8]
}
 8007b32:	bf00      	nop
 8007b34:	3724      	adds	r7, #36	; 0x24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	46020c00 	.word	0x46020c00
 8007b44:	4b742400 	.word	0x4b742400
 8007b48:	46000000 	.word	0x46000000
 8007b4c:	080159d8 	.word	0x080159d8

08007b50 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08e      	sub	sp, #56	; 0x38
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b5e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8007b62:	430b      	orrs	r3, r1
 8007b64:	d145      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007b66:	4ba7      	ldr	r3, [pc, #668]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b70:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007b72:	4ba4      	ldr	r3, [pc, #656]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b78:	f003 0302 	and.w	r3, r3, #2
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d108      	bne.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b86:	d104      	bne.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b8e:	f001 b9b3 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007b92:	4b9c      	ldr	r3, [pc, #624]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ba0:	d114      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ba8:	d110      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007baa:	4b96      	ldr	r3, [pc, #600]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bb8:	d103      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007bba:	23fa      	movs	r3, #250	; 0xfa
 8007bbc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007bbe:	f001 b99b 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007bc2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007bc6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007bc8:	f001 b996 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007bcc:	4b8d      	ldr	r3, [pc, #564]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bd8:	d107      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007be0:	d103      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8007be2:	4b89      	ldr	r3, [pc, #548]	; (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
 8007be6:	f001 b987 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34
 8007bee:	f001 b983 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bf6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	d151      	bne.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007bfe:	4b81      	ldr	r3, [pc, #516]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007c00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c04:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007c08:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	2b80      	cmp	r3, #128	; 0x80
 8007c0e:	d035      	beq.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	2b80      	cmp	r3, #128	; 0x80
 8007c14:	d841      	bhi.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	2b60      	cmp	r3, #96	; 0x60
 8007c1a:	d02a      	beq.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	2b60      	cmp	r3, #96	; 0x60
 8007c20:	d83b      	bhi.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	2b40      	cmp	r3, #64	; 0x40
 8007c26:	d009      	beq.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2a:	2b40      	cmp	r3, #64	; 0x40
 8007c2c:	d835      	bhi.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00c      	beq.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c36:	2b20      	cmp	r3, #32
 8007c38:	d012      	beq.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007c3a:	e02e      	b.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff fb4d 	bl	80072e0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c4a:	f001 b955 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c4e:	f107 0318 	add.w	r3, r7, #24
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff fcac 	bl	80075b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c5c:	f001 b94c 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c60:	f107 030c 	add.w	r3, r7, #12
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff fe0b 	bl	8007880 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c6e:	f001 b943 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007c72:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007c76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c78:	f001 b93e 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c7c:	4b61      	ldr	r3, [pc, #388]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c88:	d103      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007c8a:	4b60      	ldr	r3, [pc, #384]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c8e:	f001 b933 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c96:	f001 b92f 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c9e:	f001 b92b 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca6:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007caa:	430b      	orrs	r3, r1
 8007cac:	d158      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007cae:	4b55      	ldr	r3, [pc, #340]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007cb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007cb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cb8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc0:	d03b      	beq.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc8:	d846      	bhi.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cd0:	d02e      	beq.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cd8:	d83e      	bhi.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce0:	d00b      	beq.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce8:	d836      	bhi.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00d      	beq.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf6:	d012      	beq.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007cf8:	e02e      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7ff faee 	bl	80072e0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d08:	f001 b8f6 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d0c:	f107 0318 	add.w	r3, r7, #24
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7ff fc4d 	bl	80075b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d1a:	f001 b8ed 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d1e:	f107 030c 	add.w	r3, r7, #12
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff fdac 	bl	8007880 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d2c:	f001 b8e4 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007d30:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007d34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d36:	f001 b8df 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d3a:	4b32      	ldr	r3, [pc, #200]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d46:	d103      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007d48:	4b30      	ldr	r3, [pc, #192]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d4a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d4c:	f001 b8d4 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d54:	f001 b8d0 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d5c:	f001 b8cc 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d64:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007d68:	430b      	orrs	r3, r1
 8007d6a:	d126      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007d6c:	4b25      	ldr	r3, [pc, #148]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d76:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007d78:	4b22      	ldr	r3, [pc, #136]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d84:	d106      	bne.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d103      	bne.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007d8c:	4b1f      	ldr	r3, [pc, #124]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d90:	f001 b8b2 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007d94:	4b1b      	ldr	r3, [pc, #108]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007da0:	d107      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da8:	d103      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007daa:	4b19      	ldr	r3, [pc, #100]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007dac:	637b      	str	r3, [r7, #52]	; 0x34
 8007dae:	f001 b8a3 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
 8007db6:	f001 b89f 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dbe:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8007dc2:	430b      	orrs	r3, r1
 8007dc4:	d16e      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007dc6:	4b0f      	ldr	r3, [pc, #60]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dcc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007dd0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007dd8:	d03d      	beq.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007de0:	d85c      	bhi.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007de8:	d014      	beq.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007df0:	d854      	bhi.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d01f      	beq.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dfe:	d012      	beq.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007e00:	e04c      	b.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007e02:	bf00      	nop
 8007e04:	46020c00 	.word	0x46020c00
 8007e08:	0007a120 	.word	0x0007a120
 8007e0c:	00f42400 	.word	0x00f42400
 8007e10:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff fa61 	bl	80072e0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e22:	f001 b869 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e26:	f107 0318 	add.w	r3, r7, #24
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7ff fbc0 	bl	80075b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e34:	f001 b860 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007e38:	4ba7      	ldr	r3, [pc, #668]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e44:	d103      	bne.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8007e46:	4ba5      	ldr	r3, [pc, #660]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007e48:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e4a:	f001 b855 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e52:	f001 b851 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e56:	4ba0      	ldr	r3, [pc, #640]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b20      	cmp	r3, #32
 8007e60:	d118      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e62:	4b9d      	ldr	r3, [pc, #628]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d005      	beq.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007e6e:	4b9a      	ldr	r3, [pc, #616]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	0e1b      	lsrs	r3, r3, #24
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	e006      	b.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007e7a:	4b97      	ldr	r3, [pc, #604]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e80:	041b      	lsls	r3, r3, #16
 8007e82:	0e1b      	lsrs	r3, r3, #24
 8007e84:	f003 030f 	and.w	r3, r3, #15
 8007e88:	4a95      	ldr	r2, [pc, #596]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e8e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e90:	f001 b832 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e98:	f001 b82e 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ea0:	f001 b82a 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ea8:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007eac:	430b      	orrs	r3, r1
 8007eae:	d17f      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007eb0:	4b89      	ldr	r3, [pc, #548]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007eb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eba:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d165      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007ec2:	4b85      	ldr	r3, [pc, #532]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ec8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007ecc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007ed4:	d034      	beq.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007edc:	d853      	bhi.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ee4:	d00b      	beq.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eec:	d84b      	bhi.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d016      	beq.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007efa:	d009      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007efc:	e043      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff f9ec 	bl	80072e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007f0c:	f000 bff4 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f10:	f107 0318 	add.w	r3, r7, #24
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7ff fb4b 	bl	80075b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007f1e:	f000 bfeb 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007f22:	4b6d      	ldr	r3, [pc, #436]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f2e:	d103      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8007f30:	4b6a      	ldr	r3, [pc, #424]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f32:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007f34:	f000 bfe0 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007f3c:	f000 bfdc 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007f40:	4b65      	ldr	r3, [pc, #404]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0320 	and.w	r3, r3, #32
 8007f48:	2b20      	cmp	r3, #32
 8007f4a:	d118      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f4c:	4b62      	ldr	r3, [pc, #392]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d005      	beq.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007f58:	4b5f      	ldr	r3, [pc, #380]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	0e1b      	lsrs	r3, r3, #24
 8007f5e:	f003 030f 	and.w	r3, r3, #15
 8007f62:	e006      	b.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007f64:	4b5c      	ldr	r3, [pc, #368]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007f66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f6a:	041b      	lsls	r3, r3, #16
 8007f6c:	0e1b      	lsrs	r3, r3, #24
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	4a5b      	ldr	r2, [pc, #364]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f78:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007f7a:	f000 bfbd 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007f82:	f000 bfb9 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007f8a:	f000 bfb5 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f94:	d108      	bne.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff f9a0 	bl	80072e0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fa4:	f000 bfa8 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	637b      	str	r3, [r7, #52]	; 0x34
 8007fac:	f000 bfa4 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fb4:	1e51      	subs	r1, r2, #1
 8007fb6:	430b      	orrs	r3, r1
 8007fb8:	d136      	bne.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007fba:	4b47      	ldr	r3, [pc, #284]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fc0:	f003 0303 	and.w	r3, r3, #3
 8007fc4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d104      	bne.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007fcc:	f7fe fae2 	bl	8006594 <HAL_RCC_GetPCLK2Freq>
 8007fd0:	6378      	str	r0, [r7, #52]	; 0x34
 8007fd2:	f000 bf91 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d104      	bne.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007fdc:	f7fe f9a4 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 8007fe0:	6378      	str	r0, [r7, #52]	; 0x34
 8007fe2:	f000 bf89 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007fe6:	4b3c      	ldr	r3, [pc, #240]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ff2:	d106      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d103      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8007ffa:	4b3a      	ldr	r3, [pc, #232]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ffe:	f000 bf7b 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008002:	4b35      	ldr	r3, [pc, #212]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b02      	cmp	r3, #2
 800800e:	d107      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	2b03      	cmp	r3, #3
 8008014:	d104      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8008016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800801a:	637b      	str	r3, [r7, #52]	; 0x34
 800801c:	f000 bf6c 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	637b      	str	r3, [r7, #52]	; 0x34
 8008024:	f000 bf68 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800802c:	1e91      	subs	r1, r2, #2
 800802e:	430b      	orrs	r3, r1
 8008030:	d136      	bne.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008032:	4b29      	ldr	r3, [pc, #164]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008038:	f003 030c 	and.w	r3, r3, #12
 800803c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	2b00      	cmp	r3, #0
 8008042:	d104      	bne.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008044:	f7fe fa92 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8008048:	6378      	str	r0, [r7, #52]	; 0x34
 800804a:	f000 bf55 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	2b04      	cmp	r3, #4
 8008052:	d104      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008054:	f7fe f968 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 8008058:	6378      	str	r0, [r7, #52]	; 0x34
 800805a:	f000 bf4d 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800805e:	4b1e      	ldr	r3, [pc, #120]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800806a:	d106      	bne.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806e:	2b08      	cmp	r3, #8
 8008070:	d103      	bne.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8008072:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008074:	637b      	str	r3, [r7, #52]	; 0x34
 8008076:	f000 bf3f 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800807a:	4b17      	ldr	r3, [pc, #92]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800807c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b02      	cmp	r3, #2
 8008086:	d107      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	2b0c      	cmp	r3, #12
 800808c:	d104      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800808e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008092:	637b      	str	r3, [r7, #52]	; 0x34
 8008094:	f000 bf30 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
 800809c:	f000 bf2c 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80080a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080a4:	1f11      	subs	r1, r2, #4
 80080a6:	430b      	orrs	r3, r1
 80080a8:	d13f      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80080aa:	4b0b      	ldr	r3, [pc, #44]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80080ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080b4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d104      	bne.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80080bc:	f7fe fa56 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 80080c0:	6378      	str	r0, [r7, #52]	; 0x34
 80080c2:	f000 bf19 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80080c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c8:	2b10      	cmp	r3, #16
 80080ca:	d10d      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80080cc:	f7fe f92c 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 80080d0:	6378      	str	r0, [r7, #52]	; 0x34
 80080d2:	f000 bf11 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80080d6:	bf00      	nop
 80080d8:	46020c00 	.word	0x46020c00
 80080dc:	02dc6c00 	.word	0x02dc6c00
 80080e0:	080159d8 	.word	0x080159d8
 80080e4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80080e8:	4ba6      	ldr	r3, [pc, #664]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080f4:	d106      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	2b20      	cmp	r3, #32
 80080fa:	d103      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80080fc:	4ba2      	ldr	r3, [pc, #648]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80080fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008100:	f000 befa 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008104:	4b9f      	ldr	r3, [pc, #636]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b02      	cmp	r3, #2
 8008110:	d107      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008114:	2b30      	cmp	r3, #48	; 0x30
 8008116:	d104      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8008118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
 800811e:	f000 beeb 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	637b      	str	r3, [r7, #52]	; 0x34
 8008126:	f000 bee7 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800812a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800812e:	f1a2 0108 	sub.w	r1, r2, #8
 8008132:	430b      	orrs	r3, r1
 8008134:	d136      	bne.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008136:	4b93      	ldr	r3, [pc, #588]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800813c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008140:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008148:	f7fe fa10 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 800814c:	6378      	str	r0, [r7, #52]	; 0x34
 800814e:	f000 bed3 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	2b40      	cmp	r3, #64	; 0x40
 8008156:	d104      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008158:	f7fe f8e6 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 800815c:	6378      	str	r0, [r7, #52]	; 0x34
 800815e:	f000 becb 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008162:	4b88      	ldr	r3, [pc, #544]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800816a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800816e:	d106      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8008170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008172:	2b80      	cmp	r3, #128	; 0x80
 8008174:	d103      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8008176:	4b84      	ldr	r3, [pc, #528]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008178:	637b      	str	r3, [r7, #52]	; 0x34
 800817a:	f000 bebd 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800817e:	4b81      	ldr	r3, [pc, #516]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b02      	cmp	r3, #2
 800818a:	d107      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	2bc0      	cmp	r3, #192	; 0xc0
 8008190:	d104      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8008192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008196:	637b      	str	r3, [r7, #52]	; 0x34
 8008198:	f000 beae 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	637b      	str	r3, [r7, #52]	; 0x34
 80081a0:	f000 beaa 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80081a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081a8:	f1a2 0110 	sub.w	r1, r2, #16
 80081ac:	430b      	orrs	r3, r1
 80081ae:	d139      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80081b0:	4b74      	ldr	r3, [pc, #464]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80081b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ba:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d104      	bne.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80081c2:	f7fe f9d3 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 80081c6:	6378      	str	r0, [r7, #52]	; 0x34
 80081c8:	f000 be96 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80081cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d2:	d104      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80081d4:	f7fe f8a8 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 80081d8:	6378      	str	r0, [r7, #52]	; 0x34
 80081da:	f000 be8d 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80081de:	4b69      	ldr	r3, [pc, #420]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ea:	d107      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80081ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081f2:	d103      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80081f4:	4b64      	ldr	r3, [pc, #400]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80081f6:	637b      	str	r3, [r7, #52]	; 0x34
 80081f8:	f000 be7e 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80081fc:	4b61      	ldr	r3, [pc, #388]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80081fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b02      	cmp	r3, #2
 8008208:	d108      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008210:	d104      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8008212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008216:	637b      	str	r3, [r7, #52]	; 0x34
 8008218:	f000 be6e 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	637b      	str	r3, [r7, #52]	; 0x34
 8008220:	f000 be6a 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008228:	f1a2 0120 	sub.w	r1, r2, #32
 800822c:	430b      	orrs	r3, r1
 800822e:	d158      	bne.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008230:	4b54      	ldr	r3, [pc, #336]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008236:	f003 0307 	and.w	r3, r3, #7
 800823a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823e:	2b00      	cmp	r3, #0
 8008240:	d104      	bne.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008242:	f7fe f9bb 	bl	80065bc <HAL_RCC_GetPCLK3Freq>
 8008246:	6378      	str	r0, [r7, #52]	; 0x34
 8008248:	f000 be56 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	2b01      	cmp	r3, #1
 8008250:	d104      	bne.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008252:	f7fe f869 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 8008256:	6378      	str	r0, [r7, #52]	; 0x34
 8008258:	f000 be4e 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800825c:	4b49      	ldr	r3, [pc, #292]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008268:	d106      	bne.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	2b02      	cmp	r3, #2
 800826e:	d103      	bne.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8008270:	4b45      	ldr	r3, [pc, #276]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008272:	637b      	str	r3, [r7, #52]	; 0x34
 8008274:	f000 be40 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008278:	4b42      	ldr	r3, [pc, #264]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800827a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b02      	cmp	r3, #2
 8008284:	d107      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	2b03      	cmp	r3, #3
 800828a:	d104      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800828c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008290:	637b      	str	r3, [r7, #52]	; 0x34
 8008292:	f000 be31 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008296:	4b3b      	ldr	r3, [pc, #236]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0320 	and.w	r3, r3, #32
 800829e:	2b20      	cmp	r3, #32
 80082a0:	d11b      	bne.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d118      	bne.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082a8:	4b36      	ldr	r3, [pc, #216]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80082b4:	4b33      	ldr	r3, [pc, #204]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	0e1b      	lsrs	r3, r3, #24
 80082ba:	f003 030f 	and.w	r3, r3, #15
 80082be:	e006      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 80082c0:	4b30      	ldr	r3, [pc, #192]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80082c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082c6:	041b      	lsls	r3, r3, #16
 80082c8:	0e1b      	lsrs	r3, r3, #24
 80082ca:	f003 030f 	and.w	r3, r3, #15
 80082ce:	4a2f      	ldr	r2, [pc, #188]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80082d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082d4:	637b      	str	r3, [r7, #52]	; 0x34
 80082d6:	f000 be0f 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	637b      	str	r3, [r7, #52]	; 0x34
 80082de:	f000 be0b 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80082e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082e6:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80082ea:	430b      	orrs	r3, r1
 80082ec:	d172      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80082ee:	4b25      	ldr	r3, [pc, #148]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80082f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80082f8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008300:	d104      	bne.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008302:	f7fe f811 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 8008306:	6378      	str	r0, [r7, #52]	; 0x34
 8008308:	f000 bdf6 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008312:	d108      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008314:	f107 0318 	add.w	r3, r7, #24
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff f949 	bl	80075b0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	637b      	str	r3, [r7, #52]	; 0x34
 8008322:	f000 bde9 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800832c:	f7fe f904 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 8008330:	6378      	str	r0, [r7, #52]	; 0x34
 8008332:	f000 bde1 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800833c:	d128      	bne.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800833e:	4b11      	ldr	r3, [pc, #68]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0320 	and.w	r3, r3, #32
 8008346:	2b20      	cmp	r3, #32
 8008348:	d118      	bne.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800834a:	4b0e      	ldr	r3, [pc, #56]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d005      	beq.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8008356:	4b0b      	ldr	r3, [pc, #44]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	0e1b      	lsrs	r3, r3, #24
 800835c:	f003 030f 	and.w	r3, r3, #15
 8008360:	e006      	b.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8008362:	4b08      	ldr	r3, [pc, #32]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008364:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008368:	041b      	lsls	r3, r3, #16
 800836a:	0e1b      	lsrs	r3, r3, #24
 800836c:	f003 030f 	and.w	r3, r3, #15
 8008370:	4a06      	ldr	r2, [pc, #24]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008376:	637b      	str	r3, [r7, #52]	; 0x34
 8008378:	f000 bdbe 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	637b      	str	r3, [r7, #52]	; 0x34
 8008380:	f000 bdba 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008384:	46020c00 	.word	0x46020c00
 8008388:	00f42400 	.word	0x00f42400
 800838c:	080159d8 	.word	0x080159d8
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008390:	4baf      	ldr	r3, [pc, #700]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800839c:	d107      	bne.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083a4:	d103      	bne.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 80083a6:	4bab      	ldr	r3, [pc, #684]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80083a8:	637b      	str	r3, [r7, #52]	; 0x34
 80083aa:	f000 bda5 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80083ae:	4ba8      	ldr	r3, [pc, #672]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ba:	d107      	bne.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083c2:	d103      	bne.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 80083c4:	4ba3      	ldr	r3, [pc, #652]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80083c6:	637b      	str	r3, [r7, #52]	; 0x34
 80083c8:	f000 bd96 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	637b      	str	r3, [r7, #52]	; 0x34
 80083d0:	f000 bd92 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80083d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083d8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80083dc:	430b      	orrs	r3, r1
 80083de:	d158      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80083e0:	4b9b      	ldr	r3, [pc, #620]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80083e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	2b04      	cmp	r3, #4
 80083f0:	d84b      	bhi.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80083f2:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	08008431 	.word	0x08008431
 80083fc:	0800840d 	.word	0x0800840d
 8008400:	0800841f 	.word	0x0800841f
 8008404:	0800843b 	.word	0x0800843b
 8008408:	08008445 	.word	0x08008445
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800840c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008410:	4618      	mov	r0, r3
 8008412:	f7fe ff65 	bl	80072e0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800841a:	f000 bd6d 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800841e:	f107 030c 	add.w	r3, r7, #12
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff fa2c 	bl	8007880 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800842c:	f000 bd64 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008430:	f7fe f882 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 8008434:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008436:	f000 bd5f 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800843a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800843e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008440:	f000 bd5a 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008444:	4b82      	ldr	r3, [pc, #520]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0320 	and.w	r3, r3, #32
 800844c:	2b20      	cmp	r3, #32
 800844e:	d118      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008450:	4b7f      	ldr	r3, [pc, #508]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d005      	beq.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800845c:	4b7c      	ldr	r3, [pc, #496]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	0e1b      	lsrs	r3, r3, #24
 8008462:	f003 030f 	and.w	r3, r3, #15
 8008466:	e006      	b.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008468:	4b79      	ldr	r3, [pc, #484]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800846a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800846e:	041b      	lsls	r3, r3, #16
 8008470:	0e1b      	lsrs	r3, r3, #24
 8008472:	f003 030f 	and.w	r3, r3, #15
 8008476:	4a78      	ldr	r2, [pc, #480]	; (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800847c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800847e:	f000 bd3b 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008486:	f000 bd37 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800848a:	2300      	movs	r3, #0
 800848c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800848e:	f000 bd33 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8008492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008496:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800849a:	430b      	orrs	r3, r1
 800849c:	d167      	bne.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800849e:	4b6c      	ldr	r3, [pc, #432]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80084a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80084a4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80084a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084b0:	d036      	beq.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084b8:	d855      	bhi.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80084c0:	d029      	beq.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80084c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80084c8:	d84d      	bhi.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80084ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084d0:	d013      	beq.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084d8:	d845      	bhi.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d015      	beq.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084e6:	d13e      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fe fef7 	bl	80072e0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084f6:	f000 bcff 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084fa:	f107 030c 	add.w	r3, r7, #12
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff f9be 	bl	8007880 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008508:	f000 bcf6 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800850c:	f7fe f814 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 8008510:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008512:	f000 bcf1 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008516:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800851a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800851c:	f000 bcec 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008520:	4b4b      	ldr	r3, [pc, #300]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0320 	and.w	r3, r3, #32
 8008528:	2b20      	cmp	r3, #32
 800852a:	d118      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800852c:	4b48      	ldr	r3, [pc, #288]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d005      	beq.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8008538:	4b45      	ldr	r3, [pc, #276]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	0e1b      	lsrs	r3, r3, #24
 800853e:	f003 030f 	and.w	r3, r3, #15
 8008542:	e006      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008544:	4b42      	ldr	r3, [pc, #264]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800854a:	041b      	lsls	r3, r3, #16
 800854c:	0e1b      	lsrs	r3, r3, #24
 800854e:	f003 030f 	and.w	r3, r3, #15
 8008552:	4a41      	ldr	r2, [pc, #260]	; (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008558:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800855a:	f000 bccd 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008562:	f000 bcc9 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008566:	2300      	movs	r3, #0
 8008568:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800856a:	f000 bcc5 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800856e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008572:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8008576:	430b      	orrs	r3, r1
 8008578:	d14c      	bne.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800857a:	4b35      	ldr	r3, [pc, #212]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800857c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008580:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008584:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	2b00      	cmp	r3, #0
 800858a:	d104      	bne.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800858c:	f7fd ffee 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8008590:	6378      	str	r0, [r7, #52]	; 0x34
 8008592:	f000 bcb1 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800859c:	d104      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800859e:	f7fd fec3 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 80085a2:	6378      	str	r0, [r7, #52]	; 0x34
 80085a4:	f000 bca8 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80085a8:	4b29      	ldr	r3, [pc, #164]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b4:	d107      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80085b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085bc:	d103      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 80085be:	4b25      	ldr	r3, [pc, #148]	; (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80085c0:	637b      	str	r3, [r7, #52]	; 0x34
 80085c2:	f000 bc99 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80085c6:	4b22      	ldr	r3, [pc, #136]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0320 	and.w	r3, r3, #32
 80085ce:	2b20      	cmp	r3, #32
 80085d0:	d11c      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085d8:	d118      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80085da:	4b1d      	ldr	r3, [pc, #116]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d005      	beq.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80085e6:	4b1a      	ldr	r3, [pc, #104]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	0e1b      	lsrs	r3, r3, #24
 80085ec:	f003 030f 	and.w	r3, r3, #15
 80085f0:	e006      	b.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80085f2:	4b17      	ldr	r3, [pc, #92]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80085f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085f8:	041b      	lsls	r3, r3, #16
 80085fa:	0e1b      	lsrs	r3, r3, #24
 80085fc:	f003 030f 	and.w	r3, r3, #15
 8008600:	4a15      	ldr	r2, [pc, #84]	; (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008606:	637b      	str	r3, [r7, #52]	; 0x34
 8008608:	f000 bc76 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	637b      	str	r3, [r7, #52]	; 0x34
 8008610:	f000 bc72 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008618:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800861c:	430b      	orrs	r3, r1
 800861e:	d153      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008620:	4b0b      	ldr	r3, [pc, #44]	; (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008626:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800862a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800862c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862e:	2b00      	cmp	r3, #0
 8008630:	d104      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008632:	f7fd ff9b 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8008636:	6378      	str	r0, [r7, #52]	; 0x34
 8008638:	f000 bc5e 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008642:	d10b      	bne.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008644:	f7fd fe70 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 8008648:	6378      	str	r0, [r7, #52]	; 0x34
 800864a:	f000 bc55 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800864e:	bf00      	nop
 8008650:	46020c00 	.word	0x46020c00
 8008654:	00f42400 	.word	0x00f42400
 8008658:	080159d8 	.word	0x080159d8
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800865c:	4ba1      	ldr	r3, [pc, #644]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008668:	d107      	bne.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008670:	d103      	bne.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8008672:	4b9d      	ldr	r3, [pc, #628]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008674:	637b      	str	r3, [r7, #52]	; 0x34
 8008676:	f000 bc3f 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800867a:	4b9a      	ldr	r3, [pc, #616]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0320 	and.w	r3, r3, #32
 8008682:	2b20      	cmp	r3, #32
 8008684:	d11c      	bne.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800868c:	d118      	bne.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800868e:	4b95      	ldr	r3, [pc, #596]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d005      	beq.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800869a:	4b92      	ldr	r3, [pc, #584]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	0e1b      	lsrs	r3, r3, #24
 80086a0:	f003 030f 	and.w	r3, r3, #15
 80086a4:	e006      	b.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80086a6:	4b8f      	ldr	r3, [pc, #572]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80086a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80086ac:	041b      	lsls	r3, r3, #16
 80086ae:	0e1b      	lsrs	r3, r3, #24
 80086b0:	f003 030f 	and.w	r3, r3, #15
 80086b4:	4a8d      	ldr	r2, [pc, #564]	; (80088ec <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80086b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086ba:	637b      	str	r3, [r7, #52]	; 0x34
 80086bc:	f000 bc1c 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	637b      	str	r3, [r7, #52]	; 0x34
 80086c4:	f000 bc18 	b.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80086c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086cc:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80086d0:	430b      	orrs	r3, r1
 80086d2:	d151      	bne.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80086d4:	4b83      	ldr	r3, [pc, #524]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80086d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80086da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80086de:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	2bc0      	cmp	r3, #192	; 0xc0
 80086e4:	d024      	beq.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	2bc0      	cmp	r3, #192	; 0xc0
 80086ea:	d842      	bhi.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80086ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ee:	2b80      	cmp	r3, #128	; 0x80
 80086f0:	d00d      	beq.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	2b80      	cmp	r3, #128	; 0x80
 80086f6:	d83c      	bhi.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80086f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	2b40      	cmp	r3, #64	; 0x40
 8008702:	d011      	beq.n	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8008704:	e035      	b.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8008706:	f7fd ff59 	bl	80065bc <HAL_RCC_GetPCLK3Freq>
 800870a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800870c:	e3f4      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800870e:	4b75      	ldr	r3, [pc, #468]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800871a:	d102      	bne.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800871c:	4b72      	ldr	r3, [pc, #456]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800871e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008720:	e3ea      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008726:	e3e7      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008728:	f7fd fdfe 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 800872c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800872e:	e3e3      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008730:	4b6c      	ldr	r3, [pc, #432]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0320 	and.w	r3, r3, #32
 8008738:	2b20      	cmp	r3, #32
 800873a:	d117      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800873c:	4b69      	ldr	r3, [pc, #420]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d005      	beq.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8008748:	4b66      	ldr	r3, [pc, #408]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	0e1b      	lsrs	r3, r3, #24
 800874e:	f003 030f 	and.w	r3, r3, #15
 8008752:	e006      	b.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8008754:	4b63      	ldr	r3, [pc, #396]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800875a:	041b      	lsls	r3, r3, #16
 800875c:	0e1b      	lsrs	r3, r3, #24
 800875e:	f003 030f 	and.w	r3, r3, #15
 8008762:	4a62      	ldr	r2, [pc, #392]	; (80088ec <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008768:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800876a:	e3c5      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008770:	e3c2      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8008772:	2300      	movs	r3, #0
 8008774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008776:	e3bf      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800877c:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8008780:	430b      	orrs	r3, r1
 8008782:	d147      	bne.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008784:	4b57      	ldr	r3, [pc, #348]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800878a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800878e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8008790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008792:	2b00      	cmp	r3, #0
 8008794:	d103      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008796:	f7fd fee9 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 800879a:	6378      	str	r0, [r7, #52]	; 0x34
 800879c:	e3ac      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087a4:	d103      	bne.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80087a6:	f7fd fdbf 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 80087aa:	6378      	str	r0, [r7, #52]	; 0x34
 80087ac:	e3a4      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80087ae:	4b4d      	ldr	r3, [pc, #308]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ba:	d106      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80087bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087c2:	d102      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 80087c4:	4b48      	ldr	r3, [pc, #288]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80087c6:	637b      	str	r3, [r7, #52]	; 0x34
 80087c8:	e396      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80087ca:	4b46      	ldr	r3, [pc, #280]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0320 	and.w	r3, r3, #32
 80087d2:	2b20      	cmp	r3, #32
 80087d4:	d11b      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80087dc:	d117      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80087de:	4b41      	ldr	r3, [pc, #260]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80087ea:	4b3e      	ldr	r3, [pc, #248]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	0e1b      	lsrs	r3, r3, #24
 80087f0:	f003 030f 	and.w	r3, r3, #15
 80087f4:	e006      	b.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 80087f6:	4b3b      	ldr	r3, [pc, #236]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80087f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087fc:	041b      	lsls	r3, r3, #16
 80087fe:	0e1b      	lsrs	r3, r3, #24
 8008800:	f003 030f 	and.w	r3, r3, #15
 8008804:	4a39      	ldr	r2, [pc, #228]	; (80088ec <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800880a:	637b      	str	r3, [r7, #52]	; 0x34
 800880c:	e374      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800880e:	2300      	movs	r3, #0
 8008810:	637b      	str	r3, [r7, #52]	; 0x34
 8008812:	e371      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8008814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008818:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800881c:	430b      	orrs	r3, r1
 800881e:	d16a      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008820:	4b30      	ldr	r3, [pc, #192]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800882a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882e:	2b00      	cmp	r3, #0
 8008830:	d120      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008832:	4b2c      	ldr	r3, [pc, #176]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b20      	cmp	r3, #32
 800883c:	d117      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800883e:	4b29      	ldr	r3, [pc, #164]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d005      	beq.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800884a:	4b26      	ldr	r3, [pc, #152]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	0e1b      	lsrs	r3, r3, #24
 8008850:	f003 030f 	and.w	r3, r3, #15
 8008854:	e006      	b.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008856:	4b23      	ldr	r3, [pc, #140]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008858:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800885c:	041b      	lsls	r3, r3, #16
 800885e:	0e1b      	lsrs	r3, r3, #24
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	4a21      	ldr	r2, [pc, #132]	; (80088ec <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800886a:	637b      	str	r3, [r7, #52]	; 0x34
 800886c:	e344      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	637b      	str	r3, [r7, #52]	; 0x34
 8008872:	e341      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008874:	4b1b      	ldr	r3, [pc, #108]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800887a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800887e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008882:	d112      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800888a:	d10e      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800888c:	4b15      	ldr	r3, [pc, #84]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800888e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800889a:	d102      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 800889c:	23fa      	movs	r3, #250	; 0xfa
 800889e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80088a0:	e32a      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80088a2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80088a6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80088a8:	e326      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80088aa:	4b0e      	ldr	r3, [pc, #56]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088b6:	d106      	bne.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088be:	d102      	bne.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 80088c0:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80088c2:	637b      	str	r3, [r7, #52]	; 0x34
 80088c4:	e318      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80088c6:	4b07      	ldr	r3, [pc, #28]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80088c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d10d      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 80088d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088da:	d109      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 80088dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088e0:	637b      	str	r3, [r7, #52]	; 0x34
 80088e2:	e309      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80088e4:	46020c00 	.word	0x46020c00
 80088e8:	00f42400 	.word	0x00f42400
 80088ec:	080159d8 	.word	0x080159d8
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	637b      	str	r3, [r7, #52]	; 0x34
 80088f4:	e300      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80088f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088fa:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80088fe:	430b      	orrs	r3, r1
 8008900:	d164      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008902:	4ba2      	ldr	r3, [pc, #648]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008908:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800890c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	2b00      	cmp	r3, #0
 8008912:	d120      	bne.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008914:	4b9d      	ldr	r3, [pc, #628]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0320 	and.w	r3, r3, #32
 800891c:	2b20      	cmp	r3, #32
 800891e:	d117      	bne.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008920:	4b9a      	ldr	r3, [pc, #616]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d005      	beq.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800892c:	4b97      	ldr	r3, [pc, #604]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	0e1b      	lsrs	r3, r3, #24
 8008932:	f003 030f 	and.w	r3, r3, #15
 8008936:	e006      	b.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8008938:	4b94      	ldr	r3, [pc, #592]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800893a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800893e:	041b      	lsls	r3, r3, #16
 8008940:	0e1b      	lsrs	r3, r3, #24
 8008942:	f003 030f 	and.w	r3, r3, #15
 8008946:	4a92      	ldr	r2, [pc, #584]	; (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800894c:	637b      	str	r3, [r7, #52]	; 0x34
 800894e:	e2d3      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8008950:	2300      	movs	r3, #0
 8008952:	637b      	str	r3, [r7, #52]	; 0x34
 8008954:	e2d0      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008956:	4b8d      	ldr	r3, [pc, #564]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800895c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008964:	d112      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800896c:	d10e      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800896e:	4b87      	ldr	r3, [pc, #540]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008978:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800897c:	d102      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800897e:	23fa      	movs	r3, #250	; 0xfa
 8008980:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008982:	e2b9      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008984:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008988:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800898a:	e2b5      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800898c:	4b7f      	ldr	r3, [pc, #508]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008998:	d106      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089a0:	d102      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 80089a2:	4b7c      	ldr	r3, [pc, #496]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80089a4:	637b      	str	r3, [r7, #52]	; 0x34
 80089a6:	e2a7      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80089a8:	4b78      	ldr	r3, [pc, #480]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80089aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d107      	bne.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089bc:	d103      	bne.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 80089be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089c2:	637b      	str	r3, [r7, #52]	; 0x34
 80089c4:	e298      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	637b      	str	r3, [r7, #52]	; 0x34
 80089ca:	e295      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80089cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80089d4:	430b      	orrs	r3, r1
 80089d6:	d147      	bne.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80089d8:	4b6c      	ldr	r3, [pc, #432]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80089da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80089e2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d103      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80089ea:	f7fd fdbf 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 80089ee:	6378      	str	r0, [r7, #52]	; 0x34
 80089f0:	e282      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80089f2:	4b66      	ldr	r3, [pc, #408]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80089f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a00:	d112      	bne.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a08:	d10e      	bne.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a0a:	4b60      	ldr	r3, [pc, #384]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a18:	d102      	bne.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8008a1a:	23fa      	movs	r3, #250	; 0xfa
 8008a1c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a1e:	e26b      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008a20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008a24:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a26:	e267      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008a28:	4b58      	ldr	r3, [pc, #352]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a34:	d106      	bne.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a3c:	d102      	bne.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8008a3e:	4b55      	ldr	r3, [pc, #340]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008a40:	637b      	str	r3, [r7, #52]	; 0x34
 8008a42:	e259      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008a44:	4b51      	ldr	r3, [pc, #324]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d107      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8008a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a54:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008a58:	d103      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8008a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a60:	e24a      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	637b      	str	r3, [r7, #52]	; 0x34
 8008a66:	e247      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a6c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8008a70:	430b      	orrs	r3, r1
 8008a72:	d12d      	bne.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008a74:	4b45      	ldr	r3, [pc, #276]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a7a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008a7e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008a80:	4b42      	ldr	r3, [pc, #264]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a8c:	d105      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d102      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8008a94:	4b3f      	ldr	r3, [pc, #252]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008a96:	637b      	str	r3, [r7, #52]	; 0x34
 8008a98:	e22e      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008aa0:	d107      	bne.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fe fc1a 	bl	80072e0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	637b      	str	r3, [r7, #52]	; 0x34
 8008ab0:	e222      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ab8:	d107      	bne.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aba:	f107 0318 	add.w	r3, r7, #24
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fe fd76 	bl	80075b0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ac8:	e216      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008aca:	2300      	movs	r3, #0
 8008acc:	637b      	str	r3, [r7, #52]	; 0x34
 8008ace:	e213      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ad4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8008ad8:	430b      	orrs	r3, r1
 8008ada:	d15d      	bne.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008adc:	4b2b      	ldr	r3, [pc, #172]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ae2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008ae6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aee:	d028      	beq.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8008af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008af6:	d845      	bhi.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008afe:	d013      	beq.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b06:	d83d      	bhi.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d004      	beq.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b14:	d004      	beq.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8008b16:	e035      	b.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008b18:	f7fd fd3c 	bl	8006594 <HAL_RCC_GetPCLK2Freq>
 8008b1c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008b1e:	e1eb      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008b20:	f7fd fc02 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 8008b24:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008b26:	e1e7      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b28:	4b18      	ldr	r3, [pc, #96]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b34:	d102      	bne.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8008b36:	4b17      	ldr	r3, [pc, #92]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008b38:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b3a:	e1dd      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b40:	e1da      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008b42:	4b12      	ldr	r3, [pc, #72]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0320 	and.w	r3, r3, #32
 8008b4a:	2b20      	cmp	r3, #32
 8008b4c:	d117      	bne.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008b4e:	4b0f      	ldr	r3, [pc, #60]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d005      	beq.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8008b5a:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	0e1b      	lsrs	r3, r3, #24
 8008b60:	f003 030f 	and.w	r3, r3, #15
 8008b64:	e006      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8008b66:	4b09      	ldr	r3, [pc, #36]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b6c:	041b      	lsls	r3, r3, #16
 8008b6e:	0e1b      	lsrs	r3, r3, #24
 8008b70:	f003 030f 	and.w	r3, r3, #15
 8008b74:	4a06      	ldr	r2, [pc, #24]	; (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b7c:	e1bc      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b82:	e1b9      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008b84:	2300      	movs	r3, #0
 8008b86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b88:	e1b6      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008b8a:	bf00      	nop
 8008b8c:	46020c00 	.word	0x46020c00
 8008b90:	080159d8 	.word	0x080159d8
 8008b94:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b9c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8008ba0:	430b      	orrs	r3, r1
 8008ba2:	d156      	bne.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008ba4:	4ba5      	ldr	r3, [pc, #660]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008bae:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008bb6:	d028      	beq.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008bbe:	d845      	bhi.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bc6:	d013      	beq.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bce:	d83d      	bhi.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d004      	beq.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bdc:	d004      	beq.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8008bde:	e035      	b.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008be0:	f7fd fcc4 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8008be4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008be6:	e187      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008be8:	f7fd fb9e 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 8008bec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008bee:	e183      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bf0:	4b92      	ldr	r3, [pc, #584]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bfc:	d102      	bne.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8008bfe:	4b90      	ldr	r3, [pc, #576]	; (8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8008c00:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008c02:	e179      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008c04:	2300      	movs	r3, #0
 8008c06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c08:	e176      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008c0a:	4b8c      	ldr	r3, [pc, #560]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0320 	and.w	r3, r3, #32
 8008c12:	2b20      	cmp	r3, #32
 8008c14:	d117      	bne.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008c16:	4b89      	ldr	r3, [pc, #548]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d005      	beq.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8008c22:	4b86      	ldr	r3, [pc, #536]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	0e1b      	lsrs	r3, r3, #24
 8008c28:	f003 030f 	and.w	r3, r3, #15
 8008c2c:	e006      	b.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8008c2e:	4b83      	ldr	r3, [pc, #524]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008c34:	041b      	lsls	r3, r3, #16
 8008c36:	0e1b      	lsrs	r3, r3, #24
 8008c38:	f003 030f 	and.w	r3, r3, #15
 8008c3c:	4a81      	ldr	r2, [pc, #516]	; (8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008c44:	e158      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c4a:	e155      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c50:	e152      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c56:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8008c5a:	430b      	orrs	r3, r1
 8008c5c:	d177      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008c5e:	4b77      	ldr	r3, [pc, #476]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c64:	f003 0318 	and.w	r3, r3, #24
 8008c68:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	2b18      	cmp	r3, #24
 8008c6e:	d86b      	bhi.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8008c70:	a201      	add	r2, pc, #4	; (adr r2, 8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8008c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c76:	bf00      	nop
 8008c78:	08008cdd 	.word	0x08008cdd
 8008c7c:	08008d49 	.word	0x08008d49
 8008c80:	08008d49 	.word	0x08008d49
 8008c84:	08008d49 	.word	0x08008d49
 8008c88:	08008d49 	.word	0x08008d49
 8008c8c:	08008d49 	.word	0x08008d49
 8008c90:	08008d49 	.word	0x08008d49
 8008c94:	08008d49 	.word	0x08008d49
 8008c98:	08008ce5 	.word	0x08008ce5
 8008c9c:	08008d49 	.word	0x08008d49
 8008ca0:	08008d49 	.word	0x08008d49
 8008ca4:	08008d49 	.word	0x08008d49
 8008ca8:	08008d49 	.word	0x08008d49
 8008cac:	08008d49 	.word	0x08008d49
 8008cb0:	08008d49 	.word	0x08008d49
 8008cb4:	08008d49 	.word	0x08008d49
 8008cb8:	08008ced 	.word	0x08008ced
 8008cbc:	08008d49 	.word	0x08008d49
 8008cc0:	08008d49 	.word	0x08008d49
 8008cc4:	08008d49 	.word	0x08008d49
 8008cc8:	08008d49 	.word	0x08008d49
 8008ccc:	08008d49 	.word	0x08008d49
 8008cd0:	08008d49 	.word	0x08008d49
 8008cd4:	08008d49 	.word	0x08008d49
 8008cd8:	08008d07 	.word	0x08008d07
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008cdc:	f7fd fc6e 	bl	80065bc <HAL_RCC_GetPCLK3Freq>
 8008ce0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008ce2:	e109      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008ce4:	f7fd fb20 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 8008ce8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008cea:	e105      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cec:	4b53      	ldr	r3, [pc, #332]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cf8:	d102      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8008cfa:	4b51      	ldr	r3, [pc, #324]	; (8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8008cfc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008cfe:	e0fb      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008d00:	2300      	movs	r3, #0
 8008d02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d04:	e0f8      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008d06:	4b4d      	ldr	r3, [pc, #308]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0320 	and.w	r3, r3, #32
 8008d0e:	2b20      	cmp	r3, #32
 8008d10:	d117      	bne.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008d12:	4b4a      	ldr	r3, [pc, #296]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d005      	beq.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8008d1e:	4b47      	ldr	r3, [pc, #284]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	0e1b      	lsrs	r3, r3, #24
 8008d24:	f003 030f 	and.w	r3, r3, #15
 8008d28:	e006      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8008d2a:	4b44      	ldr	r3, [pc, #272]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d30:	041b      	lsls	r3, r3, #16
 8008d32:	0e1b      	lsrs	r3, r3, #24
 8008d34:	f003 030f 	and.w	r3, r3, #15
 8008d38:	4a42      	ldr	r2, [pc, #264]	; (8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d3e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008d40:	e0da      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d46:	e0d7      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d4c:	e0d4      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d52:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8008d56:	430b      	orrs	r3, r1
 8008d58:	d155      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008d5a:	4b38      	ldr	r3, [pc, #224]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008d5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d60:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008d64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d6c:	d013      	beq.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d74:	d844      	bhi.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d7c:	d013      	beq.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d84:	d83c      	bhi.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d014      	beq.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d92:	d014      	beq.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8008d94:	e034      	b.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d96:	f107 0318 	add.w	r3, r7, #24
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe fc08 	bl	80075b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008da4:	e0a8      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe fa98 	bl	80072e0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008db4:	e0a0      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008db6:	f7fd fab7 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 8008dba:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008dbc:	e09c      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008dbe:	4b1f      	ldr	r3, [pc, #124]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0320 	and.w	r3, r3, #32
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	d117      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008dca:	4b1c      	ldr	r3, [pc, #112]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d005      	beq.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8008dd6:	4b19      	ldr	r3, [pc, #100]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	0e1b      	lsrs	r3, r3, #24
 8008ddc:	f003 030f 	and.w	r3, r3, #15
 8008de0:	e006      	b.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008de2:	4b16      	ldr	r3, [pc, #88]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008de4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008de8:	041b      	lsls	r3, r3, #16
 8008dea:	0e1b      	lsrs	r3, r3, #24
 8008dec:	f003 030f 	and.w	r3, r3, #15
 8008df0:	4a14      	ldr	r2, [pc, #80]	; (8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008df6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008df8:	e07e      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008dfe:	e07b      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e04:	e078      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e0a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8008e0e:	430b      	orrs	r3, r1
 8008e10:	d138      	bne.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008e12:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e1c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008e1e:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d10d      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10a      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8008e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e36:	637b      	str	r3, [r7, #52]	; 0x34
 8008e38:	e05e      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008e3a:	bf00      	nop
 8008e3c:	46020c00 	.word	0x46020c00
 8008e40:	00f42400 	.word	0x00f42400
 8008e44:	080159d8 	.word	0x080159d8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008e48:	4b2e      	ldr	r3, [pc, #184]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008e4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e56:	d112      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e5e:	d10e      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008e60:	4b28      	ldr	r3, [pc, #160]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e6e:	d102      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8008e70:	23fa      	movs	r3, #250	; 0xfa
 8008e72:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008e74:	e040      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008e76:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008e7a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008e7c:	e03c      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	637b      	str	r3, [r7, #52]	; 0x34
 8008e82:	e039      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e88:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008e8c:	430b      	orrs	r3, r1
 8008e8e:	d131      	bne.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008e90:	4b1c      	ldr	r3, [pc, #112]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008e92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008e96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008e9a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008e9c:	4b19      	ldr	r3, [pc, #100]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ea8:	d105      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d102      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8008eb0:	4b15      	ldr	r3, [pc, #84]	; (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8008eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8008eb4:	e020      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008eb6:	4b13      	ldr	r3, [pc, #76]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ec2:	d106      	bne.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eca:	d102      	bne.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008ecc:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8008ece:	637b      	str	r3, [r7, #52]	; 0x34
 8008ed0:	e012      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008ed2:	4b0c      	ldr	r3, [pc, #48]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ede:	d106      	bne.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ee6:	d102      	bne.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8008ee8:	4b09      	ldr	r3, [pc, #36]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8008eea:	637b      	str	r3, [r7, #52]	; 0x34
 8008eec:	e004      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ef2:	e001      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8008ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3738      	adds	r7, #56	; 0x38
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	46020c00 	.word	0x46020c00
 8008f08:	02dc6c00 	.word	0x02dc6c00
 8008f0c:	016e3600 	.word	0x016e3600
 8008f10:	00f42400 	.word	0x00f42400

08008f14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008f1c:	4b47      	ldr	r3, [pc, #284]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a46      	ldr	r2, [pc, #280]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008f22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f28:	f7f8 fe84 	bl	8001c34 <HAL_GetTick>
 8008f2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f2e:	e008      	b.n	8008f42 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f30:	f7f8 fe80 	bl	8001c34 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d901      	bls.n	8008f42 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e077      	b.n	8009032 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f42:	4b3e      	ldr	r3, [pc, #248]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1f0      	bne.n	8008f30 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008f4e:	4b3b      	ldr	r3, [pc, #236]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008f56:	f023 0303 	bic.w	r3, r3, #3
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	6811      	ldr	r1, [r2, #0]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6852      	ldr	r2, [r2, #4]
 8008f62:	3a01      	subs	r2, #1
 8008f64:	0212      	lsls	r2, r2, #8
 8008f66:	430a      	orrs	r2, r1
 8008f68:	4934      	ldr	r1, [pc, #208]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008f6e:	4b33      	ldr	r3, [pc, #204]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f72:	4b33      	ldr	r3, [pc, #204]	; (8009040 <RCCEx_PLL2_Config+0x12c>)
 8008f74:	4013      	ands	r3, r2
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	6892      	ldr	r2, [r2, #8]
 8008f7a:	3a01      	subs	r2, #1
 8008f7c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	68d2      	ldr	r2, [r2, #12]
 8008f84:	3a01      	subs	r2, #1
 8008f86:	0252      	lsls	r2, r2, #9
 8008f88:	b292      	uxth	r2, r2
 8008f8a:	4311      	orrs	r1, r2
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	6912      	ldr	r2, [r2, #16]
 8008f90:	3a01      	subs	r2, #1
 8008f92:	0412      	lsls	r2, r2, #16
 8008f94:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008f98:	4311      	orrs	r1, r2
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	6952      	ldr	r2, [r2, #20]
 8008f9e:	3a01      	subs	r2, #1
 8008fa0:	0612      	lsls	r2, r2, #24
 8008fa2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	4924      	ldr	r1, [pc, #144]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008fae:	4b23      	ldr	r3, [pc, #140]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb2:	f023 020c 	bic.w	r2, r3, #12
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	4920      	ldr	r1, [pc, #128]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008fc0:	4b1e      	ldr	r3, [pc, #120]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a1b      	ldr	r3, [r3, #32]
 8008fc8:	491c      	ldr	r1, [pc, #112]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008fce:	4b1b      	ldr	r3, [pc, #108]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd2:	4a1a      	ldr	r2, [pc, #104]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008fd4:	f023 0310 	bic.w	r3, r3, #16
 8008fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008fda:	4b18      	ldr	r3, [pc, #96]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fe2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	69d2      	ldr	r2, [r2, #28]
 8008fea:	00d2      	lsls	r2, r2, #3
 8008fec:	4913      	ldr	r1, [pc, #76]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008ff2:	4b12      	ldr	r3, [pc, #72]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff6:	4a11      	ldr	r2, [pc, #68]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8008ff8:	f043 0310 	orr.w	r3, r3, #16
 8008ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008ffe:	4b0f      	ldr	r3, [pc, #60]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a0e      	ldr	r2, [pc, #56]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8009004:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009008:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800900a:	f7f8 fe13 	bl	8001c34 <HAL_GetTick>
 800900e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009010:	e008      	b.n	8009024 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009012:	f7f8 fe0f 	bl	8001c34 <HAL_GetTick>
 8009016:	4602      	mov	r2, r0
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	2b02      	cmp	r3, #2
 800901e:	d901      	bls.n	8009024 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e006      	b.n	8009032 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009024:	4b05      	ldr	r3, [pc, #20]	; (800903c <RCCEx_PLL2_Config+0x128>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d0f0      	beq.n	8009012 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009030:	2300      	movs	r3, #0

}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	46020c00 	.word	0x46020c00
 8009040:	80800000 	.word	0x80800000

08009044 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800904c:	4b47      	ldr	r3, [pc, #284]	; (800916c <RCCEx_PLL3_Config+0x128>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a46      	ldr	r2, [pc, #280]	; (800916c <RCCEx_PLL3_Config+0x128>)
 8009052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009056:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009058:	f7f8 fdec 	bl	8001c34 <HAL_GetTick>
 800905c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800905e:	e008      	b.n	8009072 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009060:	f7f8 fde8 	bl	8001c34 <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	2b02      	cmp	r3, #2
 800906c:	d901      	bls.n	8009072 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e077      	b.n	8009162 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009072:	4b3e      	ldr	r3, [pc, #248]	; (800916c <RCCEx_PLL3_Config+0x128>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1f0      	bne.n	8009060 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800907e:	4b3b      	ldr	r3, [pc, #236]	; (800916c <RCCEx_PLL3_Config+0x128>)
 8009080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009082:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009086:	f023 0303 	bic.w	r3, r3, #3
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	6811      	ldr	r1, [r2, #0]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	6852      	ldr	r2, [r2, #4]
 8009092:	3a01      	subs	r2, #1
 8009094:	0212      	lsls	r2, r2, #8
 8009096:	430a      	orrs	r2, r1
 8009098:	4934      	ldr	r1, [pc, #208]	; (800916c <RCCEx_PLL3_Config+0x128>)
 800909a:	4313      	orrs	r3, r2
 800909c:	630b      	str	r3, [r1, #48]	; 0x30
 800909e:	4b33      	ldr	r3, [pc, #204]	; (800916c <RCCEx_PLL3_Config+0x128>)
 80090a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090a2:	4b33      	ldr	r3, [pc, #204]	; (8009170 <RCCEx_PLL3_Config+0x12c>)
 80090a4:	4013      	ands	r3, r2
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	6892      	ldr	r2, [r2, #8]
 80090aa:	3a01      	subs	r2, #1
 80090ac:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	68d2      	ldr	r2, [r2, #12]
 80090b4:	3a01      	subs	r2, #1
 80090b6:	0252      	lsls	r2, r2, #9
 80090b8:	b292      	uxth	r2, r2
 80090ba:	4311      	orrs	r1, r2
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	6912      	ldr	r2, [r2, #16]
 80090c0:	3a01      	subs	r2, #1
 80090c2:	0412      	lsls	r2, r2, #16
 80090c4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80090c8:	4311      	orrs	r1, r2
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	6952      	ldr	r2, [r2, #20]
 80090ce:	3a01      	subs	r2, #1
 80090d0:	0612      	lsls	r2, r2, #24
 80090d2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80090d6:	430a      	orrs	r2, r1
 80090d8:	4924      	ldr	r1, [pc, #144]	; (800916c <RCCEx_PLL3_Config+0x128>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80090de:	4b23      	ldr	r3, [pc, #140]	; (800916c <RCCEx_PLL3_Config+0x128>)
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	f023 020c 	bic.w	r2, r3, #12
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	4920      	ldr	r1, [pc, #128]	; (800916c <RCCEx_PLL3_Config+0x128>)
 80090ec:	4313      	orrs	r3, r2
 80090ee:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80090f0:	4b1e      	ldr	r3, [pc, #120]	; (800916c <RCCEx_PLL3_Config+0x128>)
 80090f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	491c      	ldr	r1, [pc, #112]	; (800916c <RCCEx_PLL3_Config+0x128>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80090fe:	4b1b      	ldr	r3, [pc, #108]	; (800916c <RCCEx_PLL3_Config+0x128>)
 8009100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009102:	4a1a      	ldr	r2, [pc, #104]	; (800916c <RCCEx_PLL3_Config+0x128>)
 8009104:	f023 0310 	bic.w	r3, r3, #16
 8009108:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800910a:	4b18      	ldr	r3, [pc, #96]	; (800916c <RCCEx_PLL3_Config+0x128>)
 800910c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800910e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009112:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	69d2      	ldr	r2, [r2, #28]
 800911a:	00d2      	lsls	r2, r2, #3
 800911c:	4913      	ldr	r1, [pc, #76]	; (800916c <RCCEx_PLL3_Config+0x128>)
 800911e:	4313      	orrs	r3, r2
 8009120:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009122:	4b12      	ldr	r3, [pc, #72]	; (800916c <RCCEx_PLL3_Config+0x128>)
 8009124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009126:	4a11      	ldr	r2, [pc, #68]	; (800916c <RCCEx_PLL3_Config+0x128>)
 8009128:	f043 0310 	orr.w	r3, r3, #16
 800912c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800912e:	4b0f      	ldr	r3, [pc, #60]	; (800916c <RCCEx_PLL3_Config+0x128>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a0e      	ldr	r2, [pc, #56]	; (800916c <RCCEx_PLL3_Config+0x128>)
 8009134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009138:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800913a:	f7f8 fd7b 	bl	8001c34 <HAL_GetTick>
 800913e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009140:	e008      	b.n	8009154 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009142:	f7f8 fd77 	bl	8001c34 <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	2b02      	cmp	r3, #2
 800914e:	d901      	bls.n	8009154 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e006      	b.n	8009162 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009154:	4b05      	ldr	r3, [pc, #20]	; (800916c <RCCEx_PLL3_Config+0x128>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0f0      	beq.n	8009142 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	46020c00 	.word	0x46020c00
 8009170:	80800000 	.word	0x80800000

08009174 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d071      	beq.n	800926a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d106      	bne.n	80091a0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7f8 fa8e 	bl	80016bc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80091a8:	4b32      	ldr	r3, [pc, #200]	; (8009274 <HAL_RTC_Init+0x100>)
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	f003 0310 	and.w	r3, r3, #16
 80091b0:	2b10      	cmp	r3, #16
 80091b2:	d051      	beq.n	8009258 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091b4:	4b2f      	ldr	r3, [pc, #188]	; (8009274 <HAL_RTC_Init+0x100>)
 80091b6:	22ca      	movs	r2, #202	; 0xca
 80091b8:	625a      	str	r2, [r3, #36]	; 0x24
 80091ba:	4b2e      	ldr	r3, [pc, #184]	; (8009274 <HAL_RTC_Init+0x100>)
 80091bc:	2253      	movs	r2, #83	; 0x53
 80091be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fa6d 	bl	80096a0 <RTC_EnterInitMode>
 80091c6:	4603      	mov	r3, r0
 80091c8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d13f      	bne.n	8009250 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80091d0:	4b28      	ldr	r3, [pc, #160]	; (8009274 <HAL_RTC_Init+0x100>)
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	4a27      	ldr	r2, [pc, #156]	; (8009274 <HAL_RTC_Init+0x100>)
 80091d6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80091da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091de:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80091e0:	4b24      	ldr	r3, [pc, #144]	; (8009274 <HAL_RTC_Init+0x100>)
 80091e2:	699a      	ldr	r2, [r3, #24]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6859      	ldr	r1, [r3, #4]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	4319      	orrs	r1, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	430b      	orrs	r3, r1
 80091f4:	491f      	ldr	r1, [pc, #124]	; (8009274 <HAL_RTC_Init+0x100>)
 80091f6:	4313      	orrs	r3, r2
 80091f8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68da      	ldr	r2, [r3, #12]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	041b      	lsls	r3, r3, #16
 8009204:	491b      	ldr	r1, [pc, #108]	; (8009274 <HAL_RTC_Init+0x100>)
 8009206:	4313      	orrs	r3, r2
 8009208:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800920a:	4b1a      	ldr	r3, [pc, #104]	; (8009274 <HAL_RTC_Init+0x100>)
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921a:	430b      	orrs	r3, r1
 800921c:	4915      	ldr	r1, [pc, #84]	; (8009274 <HAL_RTC_Init+0x100>)
 800921e:	4313      	orrs	r3, r2
 8009220:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fa78 	bl	8009718 <RTC_ExitInitMode>
 8009228:	4603      	mov	r3, r0
 800922a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10e      	bne.n	8009250 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8009232:	4b10      	ldr	r3, [pc, #64]	; (8009274 <HAL_RTC_Init+0x100>)
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a19      	ldr	r1, [r3, #32]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	4319      	orrs	r1, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	430b      	orrs	r3, r1
 800924a:	490a      	ldr	r1, [pc, #40]	; (8009274 <HAL_RTC_Init+0x100>)
 800924c:	4313      	orrs	r3, r2
 800924e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009250:	4b08      	ldr	r3, [pc, #32]	; (8009274 <HAL_RTC_Init+0x100>)
 8009252:	22ff      	movs	r2, #255	; 0xff
 8009254:	625a      	str	r2, [r3, #36]	; 0x24
 8009256:	e001      	b.n	800925c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d103      	bne.n	800926a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800926a:	7bfb      	ldrb	r3, [r7, #15]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	46007800 	.word	0x46007800

08009278 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009278:	b590      	push	{r4, r7, lr}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800928a:	2b01      	cmp	r3, #1
 800928c:	d101      	bne.n	8009292 <HAL_RTC_SetTime+0x1a>
 800928e:	2302      	movs	r3, #2
 8009290:	e088      	b.n	80093a4 <HAL_RTC_SetTime+0x12c>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2202      	movs	r2, #2
 800929e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092a2:	4b42      	ldr	r3, [pc, #264]	; (80093ac <HAL_RTC_SetTime+0x134>)
 80092a4:	22ca      	movs	r2, #202	; 0xca
 80092a6:	625a      	str	r2, [r3, #36]	; 0x24
 80092a8:	4b40      	ldr	r3, [pc, #256]	; (80093ac <HAL_RTC_SetTime+0x134>)
 80092aa:	2253      	movs	r2, #83	; 0x53
 80092ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 f9f6 	bl	80096a0 <RTC_EnterInitMode>
 80092b4:	4603      	mov	r3, r0
 80092b6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80092b8:	7cfb      	ldrb	r3, [r7, #19]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d163      	bne.n	8009386 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80092be:	4b3b      	ldr	r3, [pc, #236]	; (80093ac <HAL_RTC_SetTime+0x134>)
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ca:	d057      	beq.n	800937c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d125      	bne.n	800931e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80092d2:	4b36      	ldr	r3, [pc, #216]	; (80093ac <HAL_RTC_SetTime+0x134>)
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d102      	bne.n	80092e4 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	2200      	movs	r2, #0
 80092e2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fa53 	bl	8009794 <RTC_ByteToBcd2>
 80092ee:	4603      	mov	r3, r0
 80092f0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	785b      	ldrb	r3, [r3, #1]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 fa4c 	bl	8009794 <RTC_ByteToBcd2>
 80092fc:	4603      	mov	r3, r0
 80092fe:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009300:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	789b      	ldrb	r3, [r3, #2]
 8009306:	4618      	mov	r0, r3
 8009308:	f000 fa44 	bl	8009794 <RTC_ByteToBcd2>
 800930c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800930e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	78db      	ldrb	r3, [r3, #3]
 8009316:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009318:	4313      	orrs	r3, r2
 800931a:	617b      	str	r3, [r7, #20]
 800931c:	e017      	b.n	800934e <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800931e:	4b23      	ldr	r3, [pc, #140]	; (80093ac <HAL_RTC_SetTime+0x134>)
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009326:	2b00      	cmp	r3, #0
 8009328:	d102      	bne.n	8009330 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	2200      	movs	r2, #0
 800932e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	785b      	ldrb	r3, [r3, #1]
 800933a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800933c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009342:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	78db      	ldrb	r3, [r3, #3]
 8009348:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800934a:	4313      	orrs	r3, r2
 800934c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800934e:	4a17      	ldr	r2, [pc, #92]	; (80093ac <HAL_RTC_SetTime+0x134>)
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009356:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800935a:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800935c:	4b13      	ldr	r3, [pc, #76]	; (80093ac <HAL_RTC_SetTime+0x134>)
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	4a12      	ldr	r2, [pc, #72]	; (80093ac <HAL_RTC_SetTime+0x134>)
 8009362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009366:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8009368:	4b10      	ldr	r3, [pc, #64]	; (80093ac <HAL_RTC_SetTime+0x134>)
 800936a:	699a      	ldr	r2, [r3, #24]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	68d9      	ldr	r1, [r3, #12]
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	430b      	orrs	r3, r1
 8009376:	490d      	ldr	r1, [pc, #52]	; (80093ac <HAL_RTC_SetTime+0x134>)
 8009378:	4313      	orrs	r3, r2
 800937a:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 f9cb 	bl	8009718 <RTC_ExitInitMode>
 8009382:	4603      	mov	r3, r0
 8009384:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009386:	4b09      	ldr	r3, [pc, #36]	; (80093ac <HAL_RTC_SetTime+0x134>)
 8009388:	22ff      	movs	r2, #255	; 0xff
 800938a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800938c:	7cfb      	ldrb	r3, [r7, #19]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d103      	bne.n	800939a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80093a2:	7cfb      	ldrb	r3, [r7, #19]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	371c      	adds	r7, #28
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd90      	pop	{r4, r7, pc}
 80093ac:	46007800 	.word	0x46007800

080093b0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80093bc:	4b34      	ldr	r3, [pc, #208]	; (8009490 <HAL_RTC_GetTime+0xe0>)
 80093be:	689a      	ldr	r2, [r3, #8]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80093c4:	4b32      	ldr	r3, [pc, #200]	; (8009490 <HAL_RTC_GetTime+0xe0>)
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093d0:	d04a      	beq.n	8009468 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80093d2:	4b2f      	ldr	r3, [pc, #188]	; (8009490 <HAL_RTC_GetTime+0xe0>)
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80093de:	4b2c      	ldr	r3, [pc, #176]	; (8009490 <HAL_RTC_GetTime+0xe0>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80093e6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80093ea:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	0c1b      	lsrs	r3, r3, #16
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	0a1b      	lsrs	r3, r3, #8
 8009400:	b2db      	uxtb	r3, r3
 8009402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009406:	b2da      	uxtb	r2, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009414:	b2da      	uxtb	r2, r3
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	0d9b      	lsrs	r3, r3, #22
 800941e:	b2db      	uxtb	r3, r3
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	b2da      	uxtb	r2, r3
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d12a      	bne.n	8009486 <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	4618      	mov	r0, r3
 8009436:	f000 f9cd 	bl	80097d4 <RTC_Bcd2ToByte>
 800943a:	4603      	mov	r3, r0
 800943c:	461a      	mov	r2, r3
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	785b      	ldrb	r3, [r3, #1]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 f9c4 	bl	80097d4 <RTC_Bcd2ToByte>
 800944c:	4603      	mov	r3, r0
 800944e:	461a      	mov	r2, r3
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	789b      	ldrb	r3, [r3, #2]
 8009458:	4618      	mov	r0, r3
 800945a:	f000 f9bb 	bl	80097d4 <RTC_Bcd2ToByte>
 800945e:	4603      	mov	r3, r0
 8009460:	461a      	mov	r2, r3
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	709a      	strb	r2, [r3, #2]
 8009466:	e00e      	b.n	8009486 <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2200      	movs	r2, #0
 800946c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2200      	movs	r2, #0
 8009472:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2200      	movs	r2, #0
 8009478:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	2200      	movs	r2, #0
 800947e:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	2200      	movs	r2, #0
 8009484:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	46007800 	.word	0x46007800

08009494 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009494:	b590      	push	{r4, r7, lr}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d101      	bne.n	80094ae <HAL_RTC_SetDate+0x1a>
 80094aa:	2302      	movs	r3, #2
 80094ac:	e071      	b.n	8009592 <HAL_RTC_SetDate+0xfe>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2202      	movs	r2, #2
 80094ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10e      	bne.n	80094e2 <HAL_RTC_SetDate+0x4e>
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	785b      	ldrb	r3, [r3, #1]
 80094c8:	f003 0310 	and.w	r3, r3, #16
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d008      	beq.n	80094e2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	785b      	ldrb	r3, [r3, #1]
 80094d4:	f023 0310 	bic.w	r3, r3, #16
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	330a      	adds	r3, #10
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d11c      	bne.n	8009522 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	78db      	ldrb	r3, [r3, #3]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f000 f951 	bl	8009794 <RTC_ByteToBcd2>
 80094f2:	4603      	mov	r3, r0
 80094f4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	785b      	ldrb	r3, [r3, #1]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 f94a 	bl	8009794 <RTC_ByteToBcd2>
 8009500:	4603      	mov	r3, r0
 8009502:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009504:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	789b      	ldrb	r3, [r3, #2]
 800950a:	4618      	mov	r0, r3
 800950c:	f000 f942 	bl	8009794 <RTC_ByteToBcd2>
 8009510:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009512:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800951c:	4313      	orrs	r3, r2
 800951e:	617b      	str	r3, [r7, #20]
 8009520:	e00e      	b.n	8009540 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	78db      	ldrb	r3, [r3, #3]
 8009526:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	785b      	ldrb	r3, [r3, #1]
 800952c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800952e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009534:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800953c:	4313      	orrs	r3, r2
 800953e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009540:	4b16      	ldr	r3, [pc, #88]	; (800959c <HAL_RTC_SetDate+0x108>)
 8009542:	22ca      	movs	r2, #202	; 0xca
 8009544:	625a      	str	r2, [r3, #36]	; 0x24
 8009546:	4b15      	ldr	r3, [pc, #84]	; (800959c <HAL_RTC_SetDate+0x108>)
 8009548:	2253      	movs	r2, #83	; 0x53
 800954a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 f8a7 	bl	80096a0 <RTC_EnterInitMode>
 8009552:	4603      	mov	r3, r0
 8009554:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009556:	7cfb      	ldrb	r3, [r7, #19]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10b      	bne.n	8009574 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800955c:	4a0f      	ldr	r2, [pc, #60]	; (800959c <HAL_RTC_SetDate+0x108>)
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009564:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009568:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f000 f8d4 	bl	8009718 <RTC_ExitInitMode>
 8009570:	4603      	mov	r3, r0
 8009572:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009574:	4b09      	ldr	r3, [pc, #36]	; (800959c <HAL_RTC_SetDate+0x108>)
 8009576:	22ff      	movs	r2, #255	; 0xff
 8009578:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800957a:	7cfb      	ldrb	r3, [r7, #19]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d103      	bne.n	8009588 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8009590:	7cfb      	ldrb	r3, [r7, #19]
}
 8009592:	4618      	mov	r0, r3
 8009594:	371c      	adds	r7, #28
 8009596:	46bd      	mov	sp, r7
 8009598:	bd90      	pop	{r4, r7, pc}
 800959a:	bf00      	nop
 800959c:	46007800 	.word	0x46007800

080095a0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80095ac:	4b22      	ldr	r3, [pc, #136]	; (8009638 <HAL_RTC_GetDate+0x98>)
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80095b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	0c1b      	lsrs	r3, r3, #16
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	0a1b      	lsrs	r3, r3, #8
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	f003 031f 	and.w	r3, r3, #31
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	0b5b      	lsrs	r3, r3, #13
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	f003 0307 	and.w	r3, r3, #7
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d11a      	bne.n	800962e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	78db      	ldrb	r3, [r3, #3]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f8e9 	bl	80097d4 <RTC_Bcd2ToByte>
 8009602:	4603      	mov	r3, r0
 8009604:	461a      	mov	r2, r3
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	785b      	ldrb	r3, [r3, #1]
 800960e:	4618      	mov	r0, r3
 8009610:	f000 f8e0 	bl	80097d4 <RTC_Bcd2ToByte>
 8009614:	4603      	mov	r3, r0
 8009616:	461a      	mov	r2, r3
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	789b      	ldrb	r3, [r3, #2]
 8009620:	4618      	mov	r0, r3
 8009622:	f000 f8d7 	bl	80097d4 <RTC_Bcd2ToByte>
 8009626:	4603      	mov	r3, r0
 8009628:	461a      	mov	r2, r3
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3718      	adds	r7, #24
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	46007800 	.word	0x46007800

0800963c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009644:	4b15      	ldr	r3, [pc, #84]	; (800969c <HAL_RTC_WaitForSynchro+0x60>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	4a14      	ldr	r2, [pc, #80]	; (800969c <HAL_RTC_WaitForSynchro+0x60>)
 800964a:	f023 0320 	bic.w	r3, r3, #32
 800964e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009650:	f7f8 faf0 	bl	8001c34 <HAL_GetTick>
 8009654:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009656:	e013      	b.n	8009680 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009658:	f7f8 faec 	bl	8001c34 <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009666:	d90b      	bls.n	8009680 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009668:	4b0c      	ldr	r3, [pc, #48]	; (800969c <HAL_RTC_WaitForSynchro+0x60>)
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10c      	bne.n	800968e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2203      	movs	r2, #3
 8009678:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800967c:	2303      	movs	r3, #3
 800967e:	e008      	b.n	8009692 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009680:	4b06      	ldr	r3, [pc, #24]	; (800969c <HAL_RTC_WaitForSynchro+0x60>)
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	f003 0320 	and.w	r3, r3, #32
 8009688:	2b00      	cmp	r3, #0
 800968a:	d0e5      	beq.n	8009658 <HAL_RTC_WaitForSynchro+0x1c>
 800968c:	e000      	b.n	8009690 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800968e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	46007800 	.word	0x46007800

080096a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80096ac:	4b19      	ldr	r3, [pc, #100]	; (8009714 <RTC_EnterInitMode+0x74>)
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d128      	bne.n	800970a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80096b8:	4b16      	ldr	r3, [pc, #88]	; (8009714 <RTC_EnterInitMode+0x74>)
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	4a15      	ldr	r2, [pc, #84]	; (8009714 <RTC_EnterInitMode+0x74>)
 80096be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80096c4:	f7f8 fab6 	bl	8001c34 <HAL_GetTick>
 80096c8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80096ca:	e013      	b.n	80096f4 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80096cc:	f7f8 fab2 	bl	8001c34 <HAL_GetTick>
 80096d0:	4602      	mov	r2, r0
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096da:	d90b      	bls.n	80096f4 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80096dc:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <RTC_EnterInitMode+0x74>)
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10f      	bne.n	8009708 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80096e8:	2303      	movs	r3, #3
 80096ea:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2203      	movs	r2, #3
 80096f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80096f4:	4b07      	ldr	r3, [pc, #28]	; (8009714 <RTC_EnterInitMode+0x74>)
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d104      	bne.n	800970a <RTC_EnterInitMode+0x6a>
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	2b03      	cmp	r3, #3
 8009704:	d1e2      	bne.n	80096cc <RTC_EnterInitMode+0x2c>
 8009706:	e000      	b.n	800970a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8009708:	bf00      	nop
        }
      }
    }
  }

  return status;
 800970a:	7bfb      	ldrb	r3, [r7, #15]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	46007800 	.word	0x46007800

08009718 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009724:	4b1a      	ldr	r3, [pc, #104]	; (8009790 <RTC_ExitInitMode+0x78>)
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	4a19      	ldr	r2, [pc, #100]	; (8009790 <RTC_ExitInitMode+0x78>)
 800972a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800972e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009730:	4b17      	ldr	r3, [pc, #92]	; (8009790 <RTC_ExitInitMode+0x78>)
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	f003 0320 	and.w	r3, r3, #32
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10c      	bne.n	8009756 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7ff ff7d 	bl	800963c <HAL_RTC_WaitForSynchro>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d01e      	beq.n	8009786 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2203      	movs	r2, #3
 800974c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	73fb      	strb	r3, [r7, #15]
 8009754:	e017      	b.n	8009786 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009756:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <RTC_ExitInitMode+0x78>)
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	4a0d      	ldr	r2, [pc, #52]	; (8009790 <RTC_ExitInitMode+0x78>)
 800975c:	f023 0320 	bic.w	r3, r3, #32
 8009760:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7ff ff6a 	bl	800963c <HAL_RTC_WaitForSynchro>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d005      	beq.n	800977a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2203      	movs	r2, #3
 8009772:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800977a:	4b05      	ldr	r3, [pc, #20]	; (8009790 <RTC_ExitInitMode+0x78>)
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	4a04      	ldr	r2, [pc, #16]	; (8009790 <RTC_ExitInitMode+0x78>)
 8009780:	f043 0320 	orr.w	r3, r3, #32
 8009784:	6193      	str	r3, [r2, #24]
  }
  return status;
 8009786:	7bfb      	ldrb	r3, [r7, #15]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	46007800 	.word	0x46007800

08009794 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	4603      	mov	r3, r0
 800979c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80097a2:	79fb      	ldrb	r3, [r7, #7]
 80097a4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80097a6:	e005      	b.n	80097b4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3301      	adds	r3, #1
 80097ac:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80097ae:	7afb      	ldrb	r3, [r7, #11]
 80097b0:	3b0a      	subs	r3, #10
 80097b2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80097b4:	7afb      	ldrb	r3, [r7, #11]
 80097b6:	2b09      	cmp	r3, #9
 80097b8:	d8f6      	bhi.n	80097a8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	011b      	lsls	r3, r3, #4
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	7afb      	ldrb	r3, [r7, #11]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	b2db      	uxtb	r3, r3
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4603      	mov	r3, r0
 80097dc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80097de:	79fb      	ldrb	r3, [r7, #7]
 80097e0:	091b      	lsrs	r3, r3, #4
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	461a      	mov	r2, r3
 80097e6:	4613      	mov	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4413      	add	r3, r2
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	f003 030f 	and.w	r3, r3, #15
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	4413      	add	r3, r2
 80097fe:	b2db      	uxtb	r3, r3
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009820:	2b01      	cmp	r3, #1
 8009822:	d101      	bne.n	8009828 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8009824:	2302      	movs	r3, #2
 8009826:	e063      	b.n	80098f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2202      	movs	r2, #2
 8009834:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009838:	4b2f      	ldr	r3, [pc, #188]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800983a:	22ca      	movs	r2, #202	; 0xca
 800983c:	625a      	str	r2, [r3, #36]	; 0x24
 800983e:	4b2e      	ldr	r3, [pc, #184]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009840:	2253      	movs	r2, #83	; 0x53
 8009842:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8009844:	4b2c      	ldr	r3, [pc, #176]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	4a2b      	ldr	r2, [pc, #172]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800984a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800984e:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8009850:	4b29      	ldr	r3, [pc, #164]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009852:	2204      	movs	r2, #4
 8009854:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009856:	4b28      	ldr	r3, [pc, #160]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985e:	2b00      	cmp	r3, #0
 8009860:	d126      	bne.n	80098b0 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
  {
    tickstart = HAL_GetTick();
 8009862:	f7f8 f9e7 	bl	8001c34 <HAL_GetTick>
 8009866:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009868:	e01a      	b.n	80098a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800986a:	f7f8 f9e3 	bl	8001c34 <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009878:	d912      	bls.n	80098a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800987a:	4b1f      	ldr	r3, [pc, #124]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	f003 0304 	and.w	r3, r3, #4
 8009882:	2b00      	cmp	r3, #0
 8009884:	d113      	bne.n	80098ae <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009886:	4b1c      	ldr	r3, [pc, #112]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009888:	22ff      	movs	r2, #255	; 0xff
 800988a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2203      	movs	r2, #3
 8009890:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          return HAL_TIMEOUT;
 800989c:	2303      	movs	r3, #3
 800989e:	e027      	b.n	80098f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80098a0:	4b15      	ldr	r3, [pc, #84]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f003 0304 	and.w	r3, r3, #4
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d0de      	beq.n	800986a <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
 80098ac:	e000      	b.n	80098b0 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
        }
        else
        {
          break;
 80098ae:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	041a      	lsls	r2, r3, #16
 80098b4:	4910      	ldr	r1, [pc, #64]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80098bc:	4b0e      	ldr	r3, [pc, #56]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	f023 0207 	bic.w	r2, r3, #7
 80098c4:	490c      	ldr	r1, [pc, #48]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 80098cc:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	4a09      	ldr	r2, [pc, #36]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80098d2:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 80098d6:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098d8:	4b07      	ldr	r3, [pc, #28]	; (80098f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80098da:	22ff      	movs	r2, #255	; 0xff
 80098dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3718      	adds	r7, #24
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	46007800 	.word	0x46007800

080098fc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800990a:	2b01      	cmp	r3, #1
 800990c:	d101      	bne.n	8009912 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800990e:	2302      	movs	r3, #2
 8009910:	e046      	b.n	80099a0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2202      	movs	r2, #2
 800991e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009922:	4b21      	ldr	r3, [pc, #132]	; (80099a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009924:	22ca      	movs	r2, #202	; 0xca
 8009926:	625a      	str	r2, [r3, #36]	; 0x24
 8009928:	4b1f      	ldr	r3, [pc, #124]	; (80099a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800992a:	2253      	movs	r2, #83	; 0x53
 800992c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 800992e:	4b1e      	ldr	r3, [pc, #120]	; (80099a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	4a1d      	ldr	r2, [pc, #116]	; (80099a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009934:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8009938:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 800993a:	f7f8 f97b 	bl	8001c34 <HAL_GetTick>
 800993e:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009940:	e01a      	b.n	8009978 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009942:	f7f8 f977 	bl	8001c34 <HAL_GetTick>
 8009946:	4602      	mov	r2, r0
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009950:	d912      	bls.n	8009978 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009952:	4b15      	ldr	r3, [pc, #84]	; (80099a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	f003 0304 	and.w	r3, r3, #4
 800995a:	2b00      	cmp	r3, #0
 800995c:	d113      	bne.n	8009986 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800995e:	4b12      	ldr	r3, [pc, #72]	; (80099a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009960:	22ff      	movs	r2, #255	; 0xff
 8009962:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2203      	movs	r2, #3
 8009968:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        return HAL_TIMEOUT;
 8009974:	2303      	movs	r3, #3
 8009976:	e013      	b.n	80099a0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009978:	4b0b      	ldr	r3, [pc, #44]	; (80099a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	f003 0304 	and.w	r3, r3, #4
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0de      	beq.n	8009942 <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
 8009984:	e000      	b.n	8009988 <HAL_RTCEx_DeactivateWakeUpTimer+0x8c>
      }
      else
      {
        break;
 8009986:	bf00      	nop
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009988:	4b07      	ldr	r3, [pc, #28]	; (80099a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800998a:	22ff      	movs	r2, #255	; 0xff
 800998c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	46007800 	.word	0x46007800

080099ac <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80099b4:	4b09      	ldr	r3, [pc, #36]	; (80099dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80099b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b8:	f003 0304 	and.w	r3, r3, #4
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d005      	beq.n	80099cc <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80099c0:	4b06      	ldr	r3, [pc, #24]	; (80099dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80099c2:	2204      	movs	r2, #4
 80099c4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7f7 fd60 	bl	800148c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	46007800 	.word	0x46007800

080099e0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	4910      	ldr	r1, [pc, #64]	; (8009a34 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	431a      	orrs	r2, r3
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	490c      	ldr	r1, [pc, #48]	; (8009a38 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8009a0c:	4b0a      	ldr	r3, [pc, #40]	; (8009a38 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009a0e:	6a1b      	ldr	r3, [r3, #32]
 8009a10:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	6919      	ldr	r1, [r3, #16]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	041b      	lsls	r3, r3, #16
 8009a1e:	430b      	orrs	r3, r1
 8009a20:	4905      	ldr	r1, [pc, #20]	; (8009a38 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009a22:	4313      	orrs	r3, r2
 8009a24:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	46007800 	.word	0x46007800
 8009a38:	46007c00 	.word	0x46007c00

08009a3c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e0fb      	b.n	8009c46 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a7f      	ldr	r2, [pc, #508]	; (8009c50 <HAL_SPI_Init+0x214>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d004      	beq.n	8009a62 <HAL_SPI_Init+0x26>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a7d      	ldr	r2, [pc, #500]	; (8009c54 <HAL_SPI_Init+0x218>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	e000      	b.n	8009a64 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009a62:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a78      	ldr	r2, [pc, #480]	; (8009c50 <HAL_SPI_Init+0x214>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d004      	beq.n	8009a7e <HAL_SPI_Init+0x42>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a76      	ldr	r2, [pc, #472]	; (8009c54 <HAL_SPI_Init+0x218>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d105      	bne.n	8009a8a <HAL_SPI_Init+0x4e>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	2b0f      	cmp	r3, #15
 8009a84:	d901      	bls.n	8009a8a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e0dd      	b.n	8009c46 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fbd8 	bl	800a240 <SPI_GetPacketSize>
 8009a90:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a6e      	ldr	r2, [pc, #440]	; (8009c50 <HAL_SPI_Init+0x214>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d004      	beq.n	8009aa6 <HAL_SPI_Init+0x6a>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a6c      	ldr	r2, [pc, #432]	; (8009c54 <HAL_SPI_Init+0x218>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d102      	bne.n	8009aac <HAL_SPI_Init+0x70>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d816      	bhi.n	8009ada <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009ab0:	4a69      	ldr	r2, [pc, #420]	; (8009c58 <HAL_SPI_Init+0x21c>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d00e      	beq.n	8009ad4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a68      	ldr	r2, [pc, #416]	; (8009c5c <HAL_SPI_Init+0x220>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d009      	beq.n	8009ad4 <HAL_SPI_Init+0x98>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a66      	ldr	r2, [pc, #408]	; (8009c60 <HAL_SPI_Init+0x224>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d004      	beq.n	8009ad4 <HAL_SPI_Init+0x98>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a65      	ldr	r2, [pc, #404]	; (8009c64 <HAL_SPI_Init+0x228>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d104      	bne.n	8009ade <HAL_SPI_Init+0xa2>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b10      	cmp	r3, #16
 8009ad8:	d901      	bls.n	8009ade <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e0b3      	b.n	8009c46 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d106      	bne.n	8009af8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7f7 fe2e 	bl	8001754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2202      	movs	r2, #2
 8009afc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f022 0201 	bic.w	r2, r2, #1
 8009b0e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009b1a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b24:	d119      	bne.n	8009b5a <HAL_SPI_Init+0x11e>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b2e:	d103      	bne.n	8009b38 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d008      	beq.n	8009b4a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10c      	bne.n	8009b5a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b48:	d107      	bne.n	8009b5a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009b58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00f      	beq.n	8009b86 <HAL_SPI_Init+0x14a>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	2b06      	cmp	r3, #6
 8009b6c:	d90b      	bls.n	8009b86 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	430a      	orrs	r2, r1
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	e007      	b.n	8009b96 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	69da      	ldr	r2, [r3, #28]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9e:	431a      	orrs	r2, r3
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	431a      	orrs	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba8:	ea42 0103 	orr.w	r1, r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68da      	ldr	r2, [r3, #12]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc0:	431a      	orrs	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc6:	431a      	orrs	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	695b      	ldr	r3, [r3, #20]
 8009bd8:	431a      	orrs	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	431a      	orrs	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	431a      	orrs	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bea:	431a      	orrs	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c02:	ea42 0103 	orr.w	r1, r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00a      	beq.n	8009c34 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	430a      	orrs	r2, r1
 8009c32:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	46002000 	.word	0x46002000
 8009c54:	56002000 	.word	0x56002000
 8009c58:	40013000 	.word	0x40013000
 8009c5c:	50013000 	.word	0x50013000
 8009c60:	40003800 	.word	0x40003800
 8009c64:	50003800 	.word	0x50003800

08009c68 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08a      	sub	sp, #40	; 0x28
 8009c6c:	af02      	add	r7, sp, #8
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	4613      	mov	r3, r2
 8009c76:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3320      	adds	r3, #32
 8009c7e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d101      	bne.n	8009c92 <HAL_SPI_Transmit+0x2a>
 8009c8e:	2302      	movs	r3, #2
 8009c90:	e203      	b.n	800a09a <HAL_SPI_Transmit+0x432>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c9a:	f7f7 ffcb 	bl	8001c34 <HAL_GetTick>
 8009c9e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d007      	beq.n	8009cbc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009cac:	2302      	movs	r3, #2
 8009cae:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8009cb8:	7efb      	ldrb	r3, [r7, #27]
 8009cba:	e1ee      	b.n	800a09a <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d002      	beq.n	8009cc8 <HAL_SPI_Transmit+0x60>
 8009cc2:	88fb      	ldrh	r3, [r7, #6]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d107      	bne.n	8009cd8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8009cd4:	7efb      	ldrb	r3, [r7, #27]
 8009cd6:	e1e0      	b.n	800a09a <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2203      	movs	r2, #3
 8009cdc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	88fa      	ldrh	r2, [r7, #6]
 8009cf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	88fa      	ldrh	r2, [r7, #6]
 8009cfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009d28:	d108      	bne.n	8009d3c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d38:	601a      	str	r2, [r3, #0]
 8009d3a:	e009      	b.n	8009d50 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009d4e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	0c1b      	lsrs	r3, r3, #16
 8009d58:	041b      	lsls	r3, r3, #16
 8009d5a:	88f9      	ldrh	r1, [r7, #6]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	6812      	ldr	r2, [r2, #0]
 8009d60:	430b      	orrs	r3, r1
 8009d62:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f042 0201 	orr.w	r2, r2, #1
 8009d72:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10c      	bne.n	8009d9c <HAL_SPI_Transmit+0x134>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d8a:	d107      	bne.n	8009d9c <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	2b0f      	cmp	r3, #15
 8009da2:	d95b      	bls.n	8009e5c <HAL_SPI_Transmit+0x1f4>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a8f      	ldr	r2, [pc, #572]	; (8009fe8 <HAL_SPI_Transmit+0x380>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d04f      	beq.n	8009e4e <HAL_SPI_Transmit+0x1e6>
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a8e      	ldr	r2, [pc, #568]	; (8009fec <HAL_SPI_Transmit+0x384>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d04a      	beq.n	8009e4e <HAL_SPI_Transmit+0x1e6>
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a8c      	ldr	r2, [pc, #560]	; (8009ff0 <HAL_SPI_Transmit+0x388>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d045      	beq.n	8009e4e <HAL_SPI_Transmit+0x1e6>
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a8b      	ldr	r2, [pc, #556]	; (8009ff4 <HAL_SPI_Transmit+0x38c>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d147      	bne.n	8009e5c <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009dcc:	e03f      	b.n	8009e4e <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	f003 0302 	and.w	r3, r3, #2
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d114      	bne.n	8009e06 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6812      	ldr	r2, [r2, #0]
 8009de6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dec:	1d1a      	adds	r2, r3, #4
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009e04:	e023      	b.n	8009e4e <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e06:	f7f7 ff15 	bl	8001c34 <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d803      	bhi.n	8009e1e <HAL_SPI_Transmit+0x1b6>
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1c:	d102      	bne.n	8009e24 <HAL_SPI_Transmit+0x1bc>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d114      	bne.n	8009e4e <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 f93d 	bl	800a0a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	e125      	b.n	800a09a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1b9      	bne.n	8009dce <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009e5a:	e0f8      	b.n	800a04e <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	2b07      	cmp	r3, #7
 8009e62:	f240 80ed 	bls.w	800a040 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009e66:	e05d      	b.n	8009f24 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	f003 0302 	and.w	r3, r3, #2
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d132      	bne.n	8009edc <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d918      	bls.n	8009eb4 <HAL_SPI_Transmit+0x24c>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d014      	beq.n	8009eb4 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	6812      	ldr	r2, [r2, #0]
 8009e94:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e9a:	1d1a      	adds	r2, r3, #4
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	3b02      	subs	r3, #2
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009eb2:	e037      	b.n	8009f24 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eb8:	881a      	ldrh	r2, [r3, #0]
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ec2:	1c9a      	adds	r2, r3, #2
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009eda:	e023      	b.n	8009f24 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009edc:	f7f7 feaa 	bl	8001c34 <HAL_GetTick>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d803      	bhi.n	8009ef4 <HAL_SPI_Transmit+0x28c>
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef2:	d102      	bne.n	8009efa <HAL_SPI_Transmit+0x292>
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d114      	bne.n	8009f24 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 f8d2 	bl	800a0a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009f20:	2303      	movs	r3, #3
 8009f22:	e0ba      	b.n	800a09a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d19b      	bne.n	8009e68 <HAL_SPI_Transmit+0x200>
 8009f30:	e08d      	b.n	800a04e <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	695b      	ldr	r3, [r3, #20]
 8009f38:	f003 0302 	and.w	r3, r3, #2
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d15b      	bne.n	8009ff8 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	2b03      	cmp	r3, #3
 8009f4a:	d918      	bls.n	8009f7e <HAL_SPI_Transmit+0x316>
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f50:	2b40      	cmp	r3, #64	; 0x40
 8009f52:	d914      	bls.n	8009f7e <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6812      	ldr	r2, [r2, #0]
 8009f5e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f64:	1d1a      	adds	r2, r3, #4
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	3b04      	subs	r3, #4
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009f7c:	e060      	b.n	800a040 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d917      	bls.n	8009fba <HAL_SPI_Transmit+0x352>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d013      	beq.n	8009fba <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f96:	881a      	ldrh	r2, [r3, #0]
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fa0:	1c9a      	adds	r2, r3, #2
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	3b02      	subs	r3, #2
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009fb8:	e042      	b.n	800a040 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3320      	adds	r3, #32
 8009fc4:	7812      	ldrb	r2, [r2, #0]
 8009fc6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fcc:	1c5a      	adds	r2, r3, #1
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009fe4:	e02c      	b.n	800a040 <HAL_SPI_Transmit+0x3d8>
 8009fe6:	bf00      	nop
 8009fe8:	40013000 	.word	0x40013000
 8009fec:	50013000 	.word	0x50013000
 8009ff0:	40003800 	.word	0x40003800
 8009ff4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ff8:	f7f7 fe1c 	bl	8001c34 <HAL_GetTick>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	429a      	cmp	r2, r3
 800a006:	d803      	bhi.n	800a010 <HAL_SPI_Transmit+0x3a8>
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00e:	d102      	bne.n	800a016 <HAL_SPI_Transmit+0x3ae>
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d114      	bne.n	800a040 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 f844 	bl	800a0a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a02a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e02c      	b.n	800a09a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a046:	b29b      	uxth	r3, r3
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f47f af72 	bne.w	8009f32 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	2200      	movs	r2, #0
 800a056:	2108      	movs	r1, #8
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 f8c3 	bl	800a1e4 <SPI_WaitOnFlagUntilTimeout>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d007      	beq.n	800a074 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a06a:	f043 0220 	orr.w	r2, r3, #32
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 f815 	bl	800a0a4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	e000      	b.n	800a09a <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 800a098:	7efb      	ldrb	r3, [r7, #27]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3720      	adds	r7, #32
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop

0800a0a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699a      	ldr	r2, [r3, #24]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f042 0208 	orr.w	r2, r2, #8
 800a0c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699a      	ldr	r2, [r3, #24]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f042 0210 	orr.w	r2, r2, #16
 800a0d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f022 0201 	bic.w	r2, r2, #1
 800a0e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	6812      	ldr	r2, [r2, #0]
 800a0ee:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800a0f2:	f023 0303 	bic.w	r3, r3, #3
 800a0f6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	689a      	ldr	r2, [r3, #8]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a106:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b04      	cmp	r3, #4
 800a112:	d014      	beq.n	800a13e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f003 0320 	and.w	r3, r3, #32
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00f      	beq.n	800a13e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a124:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	699a      	ldr	r2, [r3, #24]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f042 0220 	orr.w	r2, r2, #32
 800a13c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b03      	cmp	r3, #3
 800a148:	d014      	beq.n	800a174 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00f      	beq.n	800a174 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a15a:	f043 0204 	orr.w	r2, r3, #4
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	699a      	ldr	r2, [r3, #24]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a172:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00f      	beq.n	800a19e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a184:	f043 0201 	orr.w	r2, r3, #1
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	699a      	ldr	r2, [r3, #24]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a19c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00f      	beq.n	800a1c8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1ae:	f043 0208 	orr.w	r2, r3, #8
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	699a      	ldr	r2, [r3, #24]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 800a1d8:	bf00      	nop
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	603b      	str	r3, [r7, #0]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a1f4:	e010      	b.n	800a218 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1f6:	f7f7 fd1d 	bl	8001c34 <HAL_GetTick>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	683a      	ldr	r2, [r7, #0]
 800a202:	429a      	cmp	r2, r3
 800a204:	d803      	bhi.n	800a20e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20c:	d102      	bne.n	800a214 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a214:	2303      	movs	r3, #3
 800a216:	e00f      	b.n	800a238 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	695a      	ldr	r2, [r3, #20]
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	4013      	ands	r3, r2
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	429a      	cmp	r2, r3
 800a226:	bf0c      	ite	eq
 800a228:	2301      	moveq	r3, #1
 800a22a:	2300      	movne	r3, #0
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	461a      	mov	r2, r3
 800a230:	79fb      	ldrb	r3, [r7, #7]
 800a232:	429a      	cmp	r2, r3
 800a234:	d0df      	beq.n	800a1f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a24c:	095b      	lsrs	r3, r3, #5
 800a24e:	3301      	adds	r3, #1
 800a250:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	3301      	adds	r3, #1
 800a258:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	3307      	adds	r3, #7
 800a25e:	08db      	lsrs	r3, r3, #3
 800a260:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	fb02 f303 	mul.w	r3, r2, r3
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a286:	b2db      	uxtb	r3, r3
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d12e      	bne.n	800a2ea <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a292:	2b01      	cmp	r3, #1
 800a294:	d101      	bne.n	800a29a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800a296:	2302      	movs	r3, #2
 800a298:	e028      	b.n	800a2ec <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2202      	movs	r2, #2
 800a2a6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f022 0201 	bic.w	r2, r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800a2c6:	ea42 0103 	orr.w	r1, r2, r3
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	689a      	ldr	r2, [r3, #8]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	e000      	b.n	800a2ec <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
  }
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d101      	bne.n	800a30a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e049      	b.n	800a39e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	d106      	bne.n	800a324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f841 	bl	800a3a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3304      	adds	r3, #4
 800a334:	4619      	mov	r1, r3
 800a336:	4610      	mov	r0, r2
 800a338:	f000 fa88 	bl	800a84c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
	...

0800a3bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d001      	beq.n	800a3d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e072      	b.n	800a4ba <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2202      	movs	r2, #2
 800a3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68da      	ldr	r2, [r3, #12]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f042 0201 	orr.w	r2, r2, #1
 800a3ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a35      	ldr	r2, [pc, #212]	; (800a4c8 <HAL_TIM_Base_Start_IT+0x10c>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d040      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0xbc>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a34      	ldr	r2, [pc, #208]	; (800a4cc <HAL_TIM_Base_Start_IT+0x110>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d03b      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0xbc>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a408:	d036      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0xbc>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a412:	d031      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0xbc>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a2d      	ldr	r2, [pc, #180]	; (800a4d0 <HAL_TIM_Base_Start_IT+0x114>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d02c      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0xbc>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a2c      	ldr	r2, [pc, #176]	; (800a4d4 <HAL_TIM_Base_Start_IT+0x118>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d027      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0xbc>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a2a      	ldr	r2, [pc, #168]	; (800a4d8 <HAL_TIM_Base_Start_IT+0x11c>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d022      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0xbc>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a29      	ldr	r2, [pc, #164]	; (800a4dc <HAL_TIM_Base_Start_IT+0x120>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d01d      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0xbc>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a27      	ldr	r2, [pc, #156]	; (800a4e0 <HAL_TIM_Base_Start_IT+0x124>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d018      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0xbc>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a26      	ldr	r2, [pc, #152]	; (800a4e4 <HAL_TIM_Base_Start_IT+0x128>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d013      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0xbc>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a24      	ldr	r2, [pc, #144]	; (800a4e8 <HAL_TIM_Base_Start_IT+0x12c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d00e      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0xbc>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a23      	ldr	r2, [pc, #140]	; (800a4ec <HAL_TIM_Base_Start_IT+0x130>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d009      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0xbc>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a21      	ldr	r2, [pc, #132]	; (800a4f0 <HAL_TIM_Base_Start_IT+0x134>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d004      	beq.n	800a478 <HAL_TIM_Base_Start_IT+0xbc>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a20      	ldr	r2, [pc, #128]	; (800a4f4 <HAL_TIM_Base_Start_IT+0x138>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d115      	bne.n	800a4a4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	689a      	ldr	r2, [r3, #8]
 800a47e:	4b1e      	ldr	r3, [pc, #120]	; (800a4f8 <HAL_TIM_Base_Start_IT+0x13c>)
 800a480:	4013      	ands	r3, r2
 800a482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2b06      	cmp	r3, #6
 800a488:	d015      	beq.n	800a4b6 <HAL_TIM_Base_Start_IT+0xfa>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a490:	d011      	beq.n	800a4b6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f042 0201 	orr.w	r2, r2, #1
 800a4a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4a2:	e008      	b.n	800a4b6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f042 0201 	orr.w	r2, r2, #1
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	e000      	b.n	800a4b8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	40012c00 	.word	0x40012c00
 800a4cc:	50012c00 	.word	0x50012c00
 800a4d0:	40000400 	.word	0x40000400
 800a4d4:	50000400 	.word	0x50000400
 800a4d8:	40000800 	.word	0x40000800
 800a4dc:	50000800 	.word	0x50000800
 800a4e0:	40000c00 	.word	0x40000c00
 800a4e4:	50000c00 	.word	0x50000c00
 800a4e8:	40013400 	.word	0x40013400
 800a4ec:	50013400 	.word	0x50013400
 800a4f0:	40014000 	.word	0x40014000
 800a4f4:	50014000 	.word	0x50014000
 800a4f8:	00010007 	.word	0x00010007

0800a4fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	f003 0302 	and.w	r3, r3, #2
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d122      	bne.n	800a558 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f003 0302 	and.w	r3, r3, #2
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d11b      	bne.n	800a558 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f06f 0202 	mvn.w	r2, #2
 800a528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	f003 0303 	and.w	r3, r3, #3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f965 	bl	800a80e <HAL_TIM_IC_CaptureCallback>
 800a544:	e005      	b.n	800a552 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f957 	bl	800a7fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f968 	bl	800a822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	f003 0304 	and.w	r3, r3, #4
 800a562:	2b04      	cmp	r3, #4
 800a564:	d122      	bne.n	800a5ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	f003 0304 	and.w	r3, r3, #4
 800a570:	2b04      	cmp	r3, #4
 800a572:	d11b      	bne.n	800a5ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f06f 0204 	mvn.w	r2, #4
 800a57c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2202      	movs	r2, #2
 800a582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d003      	beq.n	800a59a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f93b 	bl	800a80e <HAL_TIM_IC_CaptureCallback>
 800a598:	e005      	b.n	800a5a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f92d 	bl	800a7fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 f93e 	bl	800a822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	f003 0308 	and.w	r3, r3, #8
 800a5b6:	2b08      	cmp	r3, #8
 800a5b8:	d122      	bne.n	800a600 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	f003 0308 	and.w	r3, r3, #8
 800a5c4:	2b08      	cmp	r3, #8
 800a5c6:	d11b      	bne.n	800a600 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f06f 0208 	mvn.w	r2, #8
 800a5d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2204      	movs	r2, #4
 800a5d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	f003 0303 	and.w	r3, r3, #3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f911 	bl	800a80e <HAL_TIM_IC_CaptureCallback>
 800a5ec:	e005      	b.n	800a5fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f903 	bl	800a7fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f914 	bl	800a822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	f003 0310 	and.w	r3, r3, #16
 800a60a:	2b10      	cmp	r3, #16
 800a60c:	d122      	bne.n	800a654 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	f003 0310 	and.w	r3, r3, #16
 800a618:	2b10      	cmp	r3, #16
 800a61a:	d11b      	bne.n	800a654 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f06f 0210 	mvn.w	r2, #16
 800a624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2208      	movs	r2, #8
 800a62a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a636:	2b00      	cmp	r3, #0
 800a638:	d003      	beq.n	800a642 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 f8e7 	bl	800a80e <HAL_TIM_IC_CaptureCallback>
 800a640:	e005      	b.n	800a64e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f8d9 	bl	800a7fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f8ea 	bl	800a822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d10e      	bne.n	800a680 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	f003 0301 	and.w	r3, r3, #1
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d107      	bne.n	800a680 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f06f 0201 	mvn.w	r2, #1
 800a678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7f6 ff12 	bl	80014a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a68a:	2b80      	cmp	r3, #128	; 0x80
 800a68c:	d10e      	bne.n	800a6ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a698:	2b80      	cmp	r3, #128	; 0x80
 800a69a:	d107      	bne.n	800a6ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a6a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f9d4 	bl	800aa54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6ba:	d10e      	bne.n	800a6da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6c6:	2b80      	cmp	r3, #128	; 0x80
 800a6c8:	d107      	bne.n	800a6da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a6d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f9c7 	bl	800aa68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e4:	2b40      	cmp	r3, #64	; 0x40
 800a6e6:	d10e      	bne.n	800a706 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f2:	2b40      	cmp	r3, #64	; 0x40
 800a6f4:	d107      	bne.n	800a706 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 f898 	bl	800a836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	f003 0320 	and.w	r3, r3, #32
 800a710:	2b20      	cmp	r3, #32
 800a712:	d10e      	bne.n	800a732 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	f003 0320 	and.w	r3, r3, #32
 800a71e:	2b20      	cmp	r3, #32
 800a720:	d107      	bne.n	800a732 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f06f 0220 	mvn.w	r2, #32
 800a72a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 f987 	bl	800aa40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a73c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a740:	d10f      	bne.n	800a762 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a74c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a750:	d107      	bne.n	800a762 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a75a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 f98d 	bl	800aa7c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a76c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a770:	d10f      	bne.n	800a792 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a77c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a780:	d107      	bne.n	800a792 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a78a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f97f 	bl	800aa90 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a79c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7a0:	d10f      	bne.n	800a7c2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7b0:	d107      	bne.n	800a7c2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a7ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 f971 	bl	800aaa4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7d0:	d10f      	bne.n	800a7f2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7e0:	d107      	bne.n	800a7f2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a7ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f963 	bl	800aab8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a7f2:	bf00      	nop
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b083      	sub	sp, #12
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a802:	bf00      	nop
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a816:	bf00      	nop
 800a818:	370c      	adds	r7, #12
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a822:	b480      	push	{r7}
 800a824:	b083      	sub	sp, #12
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a82a:	bf00      	nop
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a836:	b480      	push	{r7}
 800a838:	b083      	sub	sp, #12
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a83e:	bf00      	nop
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
	...

0800a84c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a68      	ldr	r2, [pc, #416]	; (800aa00 <TIM_Base_SetConfig+0x1b4>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d02b      	beq.n	800a8bc <TIM_Base_SetConfig+0x70>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a67      	ldr	r2, [pc, #412]	; (800aa04 <TIM_Base_SetConfig+0x1b8>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d027      	beq.n	800a8bc <TIM_Base_SetConfig+0x70>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a872:	d023      	beq.n	800a8bc <TIM_Base_SetConfig+0x70>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a87a:	d01f      	beq.n	800a8bc <TIM_Base_SetConfig+0x70>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a62      	ldr	r2, [pc, #392]	; (800aa08 <TIM_Base_SetConfig+0x1bc>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d01b      	beq.n	800a8bc <TIM_Base_SetConfig+0x70>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a61      	ldr	r2, [pc, #388]	; (800aa0c <TIM_Base_SetConfig+0x1c0>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d017      	beq.n	800a8bc <TIM_Base_SetConfig+0x70>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a60      	ldr	r2, [pc, #384]	; (800aa10 <TIM_Base_SetConfig+0x1c4>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d013      	beq.n	800a8bc <TIM_Base_SetConfig+0x70>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	4a5f      	ldr	r2, [pc, #380]	; (800aa14 <TIM_Base_SetConfig+0x1c8>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d00f      	beq.n	800a8bc <TIM_Base_SetConfig+0x70>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a5e      	ldr	r2, [pc, #376]	; (800aa18 <TIM_Base_SetConfig+0x1cc>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d00b      	beq.n	800a8bc <TIM_Base_SetConfig+0x70>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a5d      	ldr	r2, [pc, #372]	; (800aa1c <TIM_Base_SetConfig+0x1d0>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d007      	beq.n	800a8bc <TIM_Base_SetConfig+0x70>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a5c      	ldr	r2, [pc, #368]	; (800aa20 <TIM_Base_SetConfig+0x1d4>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d003      	beq.n	800a8bc <TIM_Base_SetConfig+0x70>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a5b      	ldr	r2, [pc, #364]	; (800aa24 <TIM_Base_SetConfig+0x1d8>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d108      	bne.n	800a8ce <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a4b      	ldr	r2, [pc, #300]	; (800aa00 <TIM_Base_SetConfig+0x1b4>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d043      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a4a      	ldr	r2, [pc, #296]	; (800aa04 <TIM_Base_SetConfig+0x1b8>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d03f      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8e4:	d03b      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8ec:	d037      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a45      	ldr	r2, [pc, #276]	; (800aa08 <TIM_Base_SetConfig+0x1bc>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d033      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a44      	ldr	r2, [pc, #272]	; (800aa0c <TIM_Base_SetConfig+0x1c0>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d02f      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a43      	ldr	r2, [pc, #268]	; (800aa10 <TIM_Base_SetConfig+0x1c4>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d02b      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a42      	ldr	r2, [pc, #264]	; (800aa14 <TIM_Base_SetConfig+0x1c8>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d027      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a41      	ldr	r2, [pc, #260]	; (800aa18 <TIM_Base_SetConfig+0x1cc>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d023      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a40      	ldr	r2, [pc, #256]	; (800aa1c <TIM_Base_SetConfig+0x1d0>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d01f      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a3f      	ldr	r2, [pc, #252]	; (800aa20 <TIM_Base_SetConfig+0x1d4>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d01b      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a3e      	ldr	r2, [pc, #248]	; (800aa24 <TIM_Base_SetConfig+0x1d8>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d017      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a3d      	ldr	r2, [pc, #244]	; (800aa28 <TIM_Base_SetConfig+0x1dc>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d013      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a3c      	ldr	r2, [pc, #240]	; (800aa2c <TIM_Base_SetConfig+0x1e0>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d00f      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a3b      	ldr	r2, [pc, #236]	; (800aa30 <TIM_Base_SetConfig+0x1e4>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d00b      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a3a      	ldr	r2, [pc, #232]	; (800aa34 <TIM_Base_SetConfig+0x1e8>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d007      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a39      	ldr	r2, [pc, #228]	; (800aa38 <TIM_Base_SetConfig+0x1ec>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d003      	beq.n	800a95e <TIM_Base_SetConfig+0x112>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a38      	ldr	r2, [pc, #224]	; (800aa3c <TIM_Base_SetConfig+0x1f0>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d108      	bne.n	800a970 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	689a      	ldr	r2, [r3, #8]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a1a      	ldr	r2, [pc, #104]	; (800aa00 <TIM_Base_SetConfig+0x1b4>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d023      	beq.n	800a9e4 <TIM_Base_SetConfig+0x198>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a19      	ldr	r2, [pc, #100]	; (800aa04 <TIM_Base_SetConfig+0x1b8>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d01f      	beq.n	800a9e4 <TIM_Base_SetConfig+0x198>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a1e      	ldr	r2, [pc, #120]	; (800aa20 <TIM_Base_SetConfig+0x1d4>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d01b      	beq.n	800a9e4 <TIM_Base_SetConfig+0x198>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a1d      	ldr	r2, [pc, #116]	; (800aa24 <TIM_Base_SetConfig+0x1d8>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d017      	beq.n	800a9e4 <TIM_Base_SetConfig+0x198>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a1c      	ldr	r2, [pc, #112]	; (800aa28 <TIM_Base_SetConfig+0x1dc>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d013      	beq.n	800a9e4 <TIM_Base_SetConfig+0x198>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a1b      	ldr	r2, [pc, #108]	; (800aa2c <TIM_Base_SetConfig+0x1e0>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d00f      	beq.n	800a9e4 <TIM_Base_SetConfig+0x198>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a1a      	ldr	r2, [pc, #104]	; (800aa30 <TIM_Base_SetConfig+0x1e4>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d00b      	beq.n	800a9e4 <TIM_Base_SetConfig+0x198>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a19      	ldr	r2, [pc, #100]	; (800aa34 <TIM_Base_SetConfig+0x1e8>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d007      	beq.n	800a9e4 <TIM_Base_SetConfig+0x198>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a18      	ldr	r2, [pc, #96]	; (800aa38 <TIM_Base_SetConfig+0x1ec>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d003      	beq.n	800a9e4 <TIM_Base_SetConfig+0x198>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a17      	ldr	r2, [pc, #92]	; (800aa3c <TIM_Base_SetConfig+0x1f0>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d103      	bne.n	800a9ec <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	691a      	ldr	r2, [r3, #16]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	615a      	str	r2, [r3, #20]
}
 800a9f2:	bf00      	nop
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	40012c00 	.word	0x40012c00
 800aa04:	50012c00 	.word	0x50012c00
 800aa08:	40000400 	.word	0x40000400
 800aa0c:	50000400 	.word	0x50000400
 800aa10:	40000800 	.word	0x40000800
 800aa14:	50000800 	.word	0x50000800
 800aa18:	40000c00 	.word	0x40000c00
 800aa1c:	50000c00 	.word	0x50000c00
 800aa20:	40013400 	.word	0x40013400
 800aa24:	50013400 	.word	0x50013400
 800aa28:	40014000 	.word	0x40014000
 800aa2c:	50014000 	.word	0x50014000
 800aa30:	40014400 	.word	0x40014400
 800aa34:	50014400 	.word	0x50014400
 800aa38:	40014800 	.word	0x40014800
 800aa3c:	50014800 	.word	0x50014800

0800aa40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e042      	b.n	800ab64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d106      	bne.n	800aaf6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f7f6 fe99 	bl	8001828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2224      	movs	r2, #36	; 0x24
 800aafa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f022 0201 	bic.w	r2, r2, #1
 800ab0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f8ca 	bl	800aca8 <UART_SetConfig>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d101      	bne.n	800ab1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e022      	b.n	800ab64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fa60 	bl	800afec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	685a      	ldr	r2, [r3, #4]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	689a      	ldr	r2, [r3, #8]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f042 0201 	orr.w	r2, r2, #1
 800ab5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fae7 	bl	800b130 <UART_CheckIdleState>
 800ab62:	4603      	mov	r3, r0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08a      	sub	sp, #40	; 0x28
 800ab70:	af02      	add	r7, sp, #8
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	603b      	str	r3, [r7, #0]
 800ab78:	4613      	mov	r3, r2
 800ab7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab82:	2b20      	cmp	r3, #32
 800ab84:	f040 808b 	bne.w	800ac9e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <HAL_UART_Transmit+0x28>
 800ab8e:	88fb      	ldrh	r3, [r7, #6]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	e083      	b.n	800aca0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aba2:	2b80      	cmp	r3, #128	; 0x80
 800aba4:	d107      	bne.n	800abb6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	689a      	ldr	r2, [r3, #8]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abb4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2221      	movs	r2, #33	; 0x21
 800abc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abc6:	f7f7 f835 	bl	8001c34 <HAL_GetTick>
 800abca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	88fa      	ldrh	r2, [r7, #6]
 800abd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	88fa      	ldrh	r2, [r7, #6]
 800abd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abe4:	d108      	bne.n	800abf8 <HAL_UART_Transmit+0x8c>
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d104      	bne.n	800abf8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800abee:	2300      	movs	r3, #0
 800abf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	61bb      	str	r3, [r7, #24]
 800abf6:	e003      	b.n	800ac00 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abfc:	2300      	movs	r3, #0
 800abfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ac00:	e030      	b.n	800ac64 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	2180      	movs	r1, #128	; 0x80
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f000 fb39 	bl	800b284 <UART_WaitOnFlagUntilTimeout>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d005      	beq.n	800ac24 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2220      	movs	r2, #32
 800ac1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ac20:	2303      	movs	r3, #3
 800ac22:	e03d      	b.n	800aca0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10b      	bne.n	800ac42 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	3302      	adds	r3, #2
 800ac3e:	61bb      	str	r3, [r7, #24]
 800ac40:	e007      	b.n	800ac52 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	781a      	ldrb	r2, [r3, #0]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1c8      	bne.n	800ac02 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	2200      	movs	r2, #0
 800ac78:	2140      	movs	r1, #64	; 0x40
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f000 fb02 	bl	800b284 <UART_WaitOnFlagUntilTimeout>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d005      	beq.n	800ac92 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2220      	movs	r2, #32
 800ac8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	e006      	b.n	800aca0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2220      	movs	r2, #32
 800ac96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	e000      	b.n	800aca0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800ac9e:	2302      	movs	r3, #2
  }
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3720      	adds	r7, #32
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800acac:	b094      	sub	sp, #80	; 0x50
 800acae:	af00      	add	r7, sp, #0
 800acb0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	4b7e      	ldr	r3, [pc, #504]	; (800aeb8 <UART_SetConfig+0x210>)
 800acbe:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800acc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc2:	689a      	ldr	r2, [r3, #8]
 800acc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	431a      	orrs	r2, r3
 800acca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	431a      	orrs	r2, r3
 800acd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd2:	69db      	ldr	r3, [r3, #28]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800acd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4977      	ldr	r1, [pc, #476]	; (800aebc <UART_SetConfig+0x214>)
 800ace0:	4019      	ands	r1, r3
 800ace2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ace8:	430b      	orrs	r3, r1
 800acea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800acf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf8:	68d9      	ldr	r1, [r3, #12]
 800acfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	ea40 0301 	orr.w	r3, r0, r1
 800ad02:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	699b      	ldr	r3, [r3, #24]
 800ad08:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	4b6a      	ldr	r3, [pc, #424]	; (800aeb8 <UART_SetConfig+0x210>)
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d009      	beq.n	800ad28 <UART_SetConfig+0x80>
 800ad14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	4b69      	ldr	r3, [pc, #420]	; (800aec0 <UART_SetConfig+0x218>)
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d004      	beq.n	800ad28 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad20:	6a1a      	ldr	r2, [r3, #32]
 800ad22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad24:	4313      	orrs	r3, r2
 800ad26:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800ad32:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800ad36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad3c:	430b      	orrs	r3, r1
 800ad3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad46:	f023 000f 	bic.w	r0, r3, #15
 800ad4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ad4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	ea40 0301 	orr.w	r3, r0, r1
 800ad56:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	4b59      	ldr	r3, [pc, #356]	; (800aec4 <UART_SetConfig+0x21c>)
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d102      	bne.n	800ad68 <UART_SetConfig+0xc0>
 800ad62:	2301      	movs	r3, #1
 800ad64:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad66:	e029      	b.n	800adbc <UART_SetConfig+0x114>
 800ad68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	4b56      	ldr	r3, [pc, #344]	; (800aec8 <UART_SetConfig+0x220>)
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d102      	bne.n	800ad78 <UART_SetConfig+0xd0>
 800ad72:	2302      	movs	r3, #2
 800ad74:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad76:	e021      	b.n	800adbc <UART_SetConfig+0x114>
 800ad78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	4b53      	ldr	r3, [pc, #332]	; (800aecc <UART_SetConfig+0x224>)
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d102      	bne.n	800ad88 <UART_SetConfig+0xe0>
 800ad82:	2304      	movs	r3, #4
 800ad84:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad86:	e019      	b.n	800adbc <UART_SetConfig+0x114>
 800ad88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	4b50      	ldr	r3, [pc, #320]	; (800aed0 <UART_SetConfig+0x228>)
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d102      	bne.n	800ad98 <UART_SetConfig+0xf0>
 800ad92:	2308      	movs	r3, #8
 800ad94:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad96:	e011      	b.n	800adbc <UART_SetConfig+0x114>
 800ad98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	4b4d      	ldr	r3, [pc, #308]	; (800aed4 <UART_SetConfig+0x22c>)
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d102      	bne.n	800ada8 <UART_SetConfig+0x100>
 800ada2:	2310      	movs	r3, #16
 800ada4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ada6:	e009      	b.n	800adbc <UART_SetConfig+0x114>
 800ada8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	4b42      	ldr	r3, [pc, #264]	; (800aeb8 <UART_SetConfig+0x210>)
 800adae:	429a      	cmp	r2, r3
 800adb0:	d102      	bne.n	800adb8 <UART_SetConfig+0x110>
 800adb2:	2320      	movs	r3, #32
 800adb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800adb6:	e001      	b.n	800adbc <UART_SetConfig+0x114>
 800adb8:	2300      	movs	r3, #0
 800adba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	4b3d      	ldr	r3, [pc, #244]	; (800aeb8 <UART_SetConfig+0x210>)
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d005      	beq.n	800add2 <UART_SetConfig+0x12a>
 800adc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	4b3d      	ldr	r3, [pc, #244]	; (800aec0 <UART_SetConfig+0x218>)
 800adcc:	429a      	cmp	r2, r3
 800adce:	f040 8085 	bne.w	800aedc <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800add2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800add4:	2200      	movs	r2, #0
 800add6:	623b      	str	r3, [r7, #32]
 800add8:	627a      	str	r2, [r7, #36]	; 0x24
 800adda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800adde:	f7fc feb7 	bl	8007b50 <HAL_RCCEx_GetPeriphCLKFreq>
 800ade2:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800ade4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f000 80e8 	beq.w	800afbc <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf0:	4a39      	ldr	r2, [pc, #228]	; (800aed8 <UART_SetConfig+0x230>)
 800adf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adf6:	461a      	mov	r2, r3
 800adf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800adfe:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae02:	685a      	ldr	r2, [r3, #4]
 800ae04:	4613      	mov	r3, r2
 800ae06:	005b      	lsls	r3, r3, #1
 800ae08:	4413      	add	r3, r2
 800ae0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d305      	bcc.n	800ae1c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d903      	bls.n	800ae24 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ae22:	e048      	b.n	800aeb6 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae26:	2200      	movs	r2, #0
 800ae28:	61bb      	str	r3, [r7, #24]
 800ae2a:	61fa      	str	r2, [r7, #28]
 800ae2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae30:	4a29      	ldr	r2, [pc, #164]	; (800aed8 <UART_SetConfig+0x230>)
 800ae32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	2200      	movs	r2, #0
 800ae3a:	613b      	str	r3, [r7, #16]
 800ae3c:	617a      	str	r2, [r7, #20]
 800ae3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ae42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ae46:	f7f5 fb45 	bl	80004d4 <__aeabi_uldivmod>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	4610      	mov	r0, r2
 800ae50:	4619      	mov	r1, r3
 800ae52:	f04f 0200 	mov.w	r2, #0
 800ae56:	f04f 0300 	mov.w	r3, #0
 800ae5a:	020b      	lsls	r3, r1, #8
 800ae5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae60:	0202      	lsls	r2, r0, #8
 800ae62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae64:	6849      	ldr	r1, [r1, #4]
 800ae66:	0849      	lsrs	r1, r1, #1
 800ae68:	2000      	movs	r0, #0
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	eb12 0804 	adds.w	r8, r2, r4
 800ae72:	eb43 0905 	adc.w	r9, r3, r5
 800ae76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	60bb      	str	r3, [r7, #8]
 800ae7e:	60fa      	str	r2, [r7, #12]
 800ae80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae84:	4640      	mov	r0, r8
 800ae86:	4649      	mov	r1, r9
 800ae88:	f7f5 fb24 	bl	80004d4 <__aeabi_uldivmod>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	4613      	mov	r3, r2
 800ae92:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae9a:	d308      	bcc.n	800aeae <UART_SetConfig+0x206>
 800ae9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aea2:	d204      	bcs.n	800aeae <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800aea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aeaa:	60da      	str	r2, [r3, #12]
 800aeac:	e003      	b.n	800aeb6 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800aeb4:	e082      	b.n	800afbc <UART_SetConfig+0x314>
 800aeb6:	e081      	b.n	800afbc <UART_SetConfig+0x314>
 800aeb8:	46002400 	.word	0x46002400
 800aebc:	cfff69f3 	.word	0xcfff69f3
 800aec0:	56002400 	.word	0x56002400
 800aec4:	40013800 	.word	0x40013800
 800aec8:	40004400 	.word	0x40004400
 800aecc:	40004800 	.word	0x40004800
 800aed0:	40004c00 	.word	0x40004c00
 800aed4:	40005000 	.word	0x40005000
 800aed8:	08015a98 	.word	0x08015a98
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aede:	69db      	ldr	r3, [r3, #28]
 800aee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aee4:	d13c      	bne.n	800af60 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aee8:	2200      	movs	r2, #0
 800aeea:	603b      	str	r3, [r7, #0]
 800aeec:	607a      	str	r2, [r7, #4]
 800aeee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aef2:	f7fc fe2d 	bl	8007b50 <HAL_RCCEx_GetPeriphCLKFreq>
 800aef6:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d05e      	beq.n	800afbc <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af02:	4a39      	ldr	r2, [pc, #228]	; (800afe8 <UART_SetConfig+0x340>)
 800af04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af08:	461a      	mov	r2, r3
 800af0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af10:	005a      	lsls	r2, r3, #1
 800af12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	085b      	lsrs	r3, r3, #1
 800af18:	441a      	add	r2, r3
 800af1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af22:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af26:	2b0f      	cmp	r3, #15
 800af28:	d916      	bls.n	800af58 <UART_SetConfig+0x2b0>
 800af2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af30:	d212      	bcs.n	800af58 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af34:	b29b      	uxth	r3, r3
 800af36:	f023 030f 	bic.w	r3, r3, #15
 800af3a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af3e:	085b      	lsrs	r3, r3, #1
 800af40:	b29b      	uxth	r3, r3
 800af42:	f003 0307 	and.w	r3, r3, #7
 800af46:	b29a      	uxth	r2, r3
 800af48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800af4a:	4313      	orrs	r3, r2
 800af4c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800af4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800af54:	60da      	str	r2, [r3, #12]
 800af56:	e031      	b.n	800afbc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800af5e:	e02d      	b.n	800afbc <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800af60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af62:	2200      	movs	r2, #0
 800af64:	469a      	mov	sl, r3
 800af66:	4693      	mov	fp, r2
 800af68:	4650      	mov	r0, sl
 800af6a:	4659      	mov	r1, fp
 800af6c:	f7fc fdf0 	bl	8007b50 <HAL_RCCEx_GetPeriphCLKFreq>
 800af70:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800af72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af74:	2b00      	cmp	r3, #0
 800af76:	d021      	beq.n	800afbc <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7c:	4a1a      	ldr	r2, [pc, #104]	; (800afe8 <UART_SetConfig+0x340>)
 800af7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af82:	461a      	mov	r2, r3
 800af84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af86:	fbb3 f2f2 	udiv	r2, r3, r2
 800af8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	085b      	lsrs	r3, r3, #1
 800af90:	441a      	add	r2, r3
 800af92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	fbb2 f3f3 	udiv	r3, r2, r3
 800af9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af9e:	2b0f      	cmp	r3, #15
 800afa0:	d909      	bls.n	800afb6 <UART_SetConfig+0x30e>
 800afa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afa8:	d205      	bcs.n	800afb6 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800afaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afac:	b29a      	uxth	r2, r3
 800afae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	60da      	str	r2, [r3, #12]
 800afb4:	e002      	b.n	800afbc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800afbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afbe:	2201      	movs	r2, #1
 800afc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800afc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc6:	2201      	movs	r2, #1
 800afc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afce:	2200      	movs	r2, #0
 800afd0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800afd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd4:	2200      	movs	r2, #0
 800afd6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800afd8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3750      	adds	r7, #80	; 0x50
 800afe0:	46bd      	mov	sp, r7
 800afe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afe6:	bf00      	nop
 800afe8:	08015a98 	.word	0x08015a98

0800afec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff8:	f003 0301 	and.w	r3, r3, #1
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00a      	beq.n	800b016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	430a      	orrs	r2, r1
 800b014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b01a:	f003 0302 	and.w	r3, r3, #2
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00a      	beq.n	800b038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	430a      	orrs	r2, r1
 800b036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03c:	f003 0304 	and.w	r3, r3, #4
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00a      	beq.n	800b05a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	430a      	orrs	r2, r1
 800b058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05e:	f003 0308 	and.w	r3, r3, #8
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00a      	beq.n	800b07c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	430a      	orrs	r2, r1
 800b07a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b080:	f003 0310 	and.w	r3, r3, #16
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00a      	beq.n	800b09e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	430a      	orrs	r2, r1
 800b09c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a2:	f003 0320 	and.w	r3, r3, #32
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00a      	beq.n	800b0c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	430a      	orrs	r2, r1
 800b0be:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d01a      	beq.n	800b102 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0ea:	d10a      	bne.n	800b102 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	430a      	orrs	r2, r1
 800b100:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00a      	beq.n	800b124 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	430a      	orrs	r2, r1
 800b122:	605a      	str	r2, [r3, #4]
  }
}
 800b124:	bf00      	nop
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b098      	sub	sp, #96	; 0x60
 800b134:	af02      	add	r7, sp, #8
 800b136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b140:	f7f6 fd78 	bl	8001c34 <HAL_GetTick>
 800b144:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0308 	and.w	r3, r3, #8
 800b150:	2b08      	cmp	r3, #8
 800b152:	d12f      	bne.n	800b1b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b154:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b15c:	2200      	movs	r2, #0
 800b15e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f88e 	bl	800b284 <UART_WaitOnFlagUntilTimeout>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d022      	beq.n	800b1b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b176:	e853 3f00 	ldrex	r3, [r3]
 800b17a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b17e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b182:	653b      	str	r3, [r7, #80]	; 0x50
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	461a      	mov	r2, r3
 800b18a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b18c:	647b      	str	r3, [r7, #68]	; 0x44
 800b18e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b190:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b194:	e841 2300 	strex	r3, r2, [r1]
 800b198:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1e6      	bne.n	800b16e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2220      	movs	r2, #32
 800b1a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e063      	b.n	800b27c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f003 0304 	and.w	r3, r3, #4
 800b1be:	2b04      	cmp	r3, #4
 800b1c0:	d149      	bne.n	800b256 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f857 	bl	800b284 <UART_WaitOnFlagUntilTimeout>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d03c      	beq.n	800b256 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e4:	e853 3f00 	ldrex	r3, [r3]
 800b1e8:	623b      	str	r3, [r7, #32]
   return(result);
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1fa:	633b      	str	r3, [r7, #48]	; 0x30
 800b1fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b202:	e841 2300 	strex	r3, r2, [r1]
 800b206:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1e6      	bne.n	800b1dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3308      	adds	r3, #8
 800b214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	e853 3f00 	ldrex	r3, [r3]
 800b21c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f023 0301 	bic.w	r3, r3, #1
 800b224:	64bb      	str	r3, [r7, #72]	; 0x48
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	3308      	adds	r3, #8
 800b22c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b22e:	61fa      	str	r2, [r7, #28]
 800b230:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b232:	69b9      	ldr	r1, [r7, #24]
 800b234:	69fa      	ldr	r2, [r7, #28]
 800b236:	e841 2300 	strex	r3, r2, [r1]
 800b23a:	617b      	str	r3, [r7, #20]
   return(result);
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1e5      	bne.n	800b20e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2220      	movs	r2, #32
 800b246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b252:	2303      	movs	r3, #3
 800b254:	e012      	b.n	800b27c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2220      	movs	r2, #32
 800b25a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2220      	movs	r2, #32
 800b262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3758      	adds	r7, #88	; 0x58
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	4613      	mov	r3, r2
 800b292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b294:	e049      	b.n	800b32a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29c:	d045      	beq.n	800b32a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b29e:	f7f6 fcc9 	bl	8001c34 <HAL_GetTick>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	69ba      	ldr	r2, [r7, #24]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d302      	bcc.n	800b2b4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	e048      	b.n	800b34a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f003 0304 	and.w	r3, r3, #4
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d031      	beq.n	800b32a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	69db      	ldr	r3, [r3, #28]
 800b2cc:	f003 0308 	and.w	r3, r3, #8
 800b2d0:	2b08      	cmp	r3, #8
 800b2d2:	d110      	bne.n	800b2f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2208      	movs	r2, #8
 800b2da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f000 f838 	bl	800b352 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2208      	movs	r2, #8
 800b2e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e029      	b.n	800b34a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	69db      	ldr	r3, [r3, #28]
 800b2fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b304:	d111      	bne.n	800b32a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b30e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 f81e 	bl	800b352 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2220      	movs	r2, #32
 800b31a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b326:	2303      	movs	r3, #3
 800b328:	e00f      	b.n	800b34a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	69da      	ldr	r2, [r3, #28]
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	4013      	ands	r3, r2
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	429a      	cmp	r2, r3
 800b338:	bf0c      	ite	eq
 800b33a:	2301      	moveq	r3, #1
 800b33c:	2300      	movne	r3, #0
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	461a      	mov	r2, r3
 800b342:	79fb      	ldrb	r3, [r7, #7]
 800b344:	429a      	cmp	r2, r3
 800b346:	d0a6      	beq.n	800b296 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b352:	b480      	push	{r7}
 800b354:	b095      	sub	sp, #84	; 0x54
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b362:	e853 3f00 	ldrex	r3, [r3]
 800b366:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b36e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	461a      	mov	r2, r3
 800b376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b378:	643b      	str	r3, [r7, #64]	; 0x40
 800b37a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b37e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b380:	e841 2300 	strex	r3, r2, [r1]
 800b384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1e6      	bne.n	800b35a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	3308      	adds	r3, #8
 800b392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b394:	6a3b      	ldr	r3, [r7, #32]
 800b396:	e853 3f00 	ldrex	r3, [r3]
 800b39a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3a2:	f023 0301 	bic.w	r3, r3, #1
 800b3a6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3b8:	e841 2300 	strex	r3, r2, [r1]
 800b3bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d1e3      	bne.n	800b38c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d118      	bne.n	800b3fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	e853 3f00 	ldrex	r3, [r3]
 800b3d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	f023 0310 	bic.w	r3, r3, #16
 800b3e0:	647b      	str	r3, [r7, #68]	; 0x44
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ea:	61bb      	str	r3, [r7, #24]
 800b3ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ee:	6979      	ldr	r1, [r7, #20]
 800b3f0:	69ba      	ldr	r2, [r7, #24]
 800b3f2:	e841 2300 	strex	r3, r2, [r1]
 800b3f6:	613b      	str	r3, [r7, #16]
   return(result);
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1e6      	bne.n	800b3cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2220      	movs	r2, #32
 800b402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b412:	bf00      	nop
 800b414:	3754      	adds	r7, #84	; 0x54
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr

0800b41e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b41e:	b480      	push	{r7}
 800b420:	b085      	sub	sp, #20
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d101      	bne.n	800b434 <HAL_UARTEx_DisableFifoMode+0x16>
 800b430:	2302      	movs	r3, #2
 800b432:	e027      	b.n	800b484 <HAL_UARTEx_DisableFifoMode+0x66>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2224      	movs	r2, #36	; 0x24
 800b440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f022 0201 	bic.w	r2, r2, #1
 800b45a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b462:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2220      	movs	r2, #32
 800b476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d101      	bne.n	800b4a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b4a4:	2302      	movs	r3, #2
 800b4a6:	e02d      	b.n	800b504 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2224      	movs	r2, #36	; 0x24
 800b4b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f022 0201 	bic.w	r2, r2, #1
 800b4ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	430a      	orrs	r2, r1
 800b4e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f84f 	bl	800b588 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68fa      	ldr	r2, [r7, #12]
 800b4f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2220      	movs	r2, #32
 800b4f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d101      	bne.n	800b524 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b520:	2302      	movs	r3, #2
 800b522:	e02d      	b.n	800b580 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2224      	movs	r2, #36	; 0x24
 800b530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f022 0201 	bic.w	r2, r2, #1
 800b54a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	683a      	ldr	r2, [r7, #0]
 800b55c:	430a      	orrs	r2, r1
 800b55e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f811 	bl	800b588 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2220      	movs	r2, #32
 800b572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b594:	2b00      	cmp	r3, #0
 800b596:	d108      	bne.n	800b5aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b5a8:	e031      	b.n	800b60e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b5aa:	2308      	movs	r3, #8
 800b5ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b5ae:	2308      	movs	r3, #8
 800b5b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	0e5b      	lsrs	r3, r3, #25
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	f003 0307 	and.w	r3, r3, #7
 800b5c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	0f5b      	lsrs	r3, r3, #29
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	f003 0307 	and.w	r3, r3, #7
 800b5d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5d2:	7bbb      	ldrb	r3, [r7, #14]
 800b5d4:	7b3a      	ldrb	r2, [r7, #12]
 800b5d6:	4911      	ldr	r1, [pc, #68]	; (800b61c <UARTEx_SetNbDataToProcess+0x94>)
 800b5d8:	5c8a      	ldrb	r2, [r1, r2]
 800b5da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5de:	7b3a      	ldrb	r2, [r7, #12]
 800b5e0:	490f      	ldr	r1, [pc, #60]	; (800b620 <UARTEx_SetNbDataToProcess+0x98>)
 800b5e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
 800b5f2:	7b7a      	ldrb	r2, [r7, #13]
 800b5f4:	4909      	ldr	r1, [pc, #36]	; (800b61c <UARTEx_SetNbDataToProcess+0x94>)
 800b5f6:	5c8a      	ldrb	r2, [r1, r2]
 800b5f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b5fc:	7b7a      	ldrb	r2, [r7, #13]
 800b5fe:	4908      	ldr	r1, [pc, #32]	; (800b620 <UARTEx_SetNbDataToProcess+0x98>)
 800b600:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b602:	fb93 f3f2 	sdiv	r3, r3, r2
 800b606:	b29a      	uxth	r2, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b60e:	bf00      	nop
 800b610:	3714      	adds	r7, #20
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	08015ab0 	.word	0x08015ab0
 800b620:	08015ab8 	.word	0x08015ab8

0800b624 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b096      	sub	sp, #88	; 0x58
 800b628:	af02      	add	r7, sp, #8
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
 800b630:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b632:	2234      	movs	r2, #52	; 0x34
 800b634:	2100      	movs	r1, #0
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f009 fc0a 	bl	8014e50 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	f023 0303 	bic.w	r3, r3, #3
 800b642:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	68ba      	ldr	r2, [r7, #8]
 800b648:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	f1a3 0208 	sub.w	r2, r3, #8
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2202      	movs	r2, #2
 800b670:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	4413      	add	r3, r2
 800b67c:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	3b04      	subs	r3, #4
 800b682:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 800b68c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b68e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b690:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	3b04      	subs	r3, #4
 800b696:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b69c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b6a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6a8:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 800b6aa:	697a      	ldr	r2, [r7, #20]
 800b6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6ae:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6c0:	4a5d      	ldr	r2, [pc, #372]	; (800b838 <_tx_byte_pool_create+0x214>)
 800b6c2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b6ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b6ce:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800b6d2:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b6d4:	b672      	cpsid	i
#endif
    return(int_posture);
 800b6d6:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b6d8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	4a57      	ldr	r2, [pc, #348]	; (800b83c <_tx_byte_pool_create+0x218>)
 800b6de:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b6e0:	4b57      	ldr	r3, [pc, #348]	; (800b840 <_tx_byte_pool_create+0x21c>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d109      	bne.n	800b6fc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b6e8:	4a56      	ldr	r2, [pc, #344]	; (800b844 <_tx_byte_pool_create+0x220>)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	631a      	str	r2, [r3, #48]	; 0x30
 800b6fa:	e011      	b.n	800b720 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b6fc:	4b51      	ldr	r3, [pc, #324]	; (800b844 <_tx_byte_pool_create+0x220>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b706:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b718:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b71e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b720:	4b47      	ldr	r3, [pc, #284]	; (800b840 <_tx_byte_pool_create+0x21c>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	3301      	adds	r3, #1
 800b726:	4a46      	ldr	r2, [pc, #280]	; (800b840 <_tx_byte_pool_create+0x21c>)
 800b728:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 800b72a:	2300      	movs	r3, #0
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	68f9      	ldr	r1, [r7, #12]
 800b734:	2008      	movs	r0, #8
 800b736:	f002 fd6d 	bl	800e214 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 800b73a:	4b43      	ldr	r3, [pc, #268]	; (800b848 <_tx_byte_pool_create+0x224>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b742:	2b00      	cmp	r3, #0
 800b744:	d06c      	beq.n	800b820 <_tx_byte_pool_create+0x1fc>
 800b746:	4b41      	ldr	r3, [pc, #260]	; (800b84c <_tx_byte_pool_create+0x228>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f003 0304 	and.w	r3, r3, #4
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d066      	beq.n	800b820 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b752:	f3ef 8305 	mrs	r3, IPSR
 800b756:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b758:	69fa      	ldr	r2, [r7, #28]
 800b75a:	4b3d      	ldr	r3, [pc, #244]	; (800b850 <_tx_byte_pool_create+0x22c>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4313      	orrs	r3, r2
 800b760:	62bb      	str	r3, [r7, #40]	; 0x28
 800b762:	4b3c      	ldr	r3, [pc, #240]	; (800b854 <_tx_byte_pool_create+0x230>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	64bb      	str	r3, [r7, #72]	; 0x48
 800b768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d10b      	bne.n	800b786 <_tx_byte_pool_create+0x162>
 800b76e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b772:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b778:	041a      	lsls	r2, r3, #16
 800b77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b77c:	4313      	orrs	r3, r2
 800b77e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b782:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b784:	e00e      	b.n	800b7a4 <_tx_byte_pool_create+0x180>
 800b786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b788:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b78c:	d205      	bcs.n	800b79a <_tx_byte_pool_create+0x176>
 800b78e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b790:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b792:	f04f 33ff 	mov.w	r3, #4294967295
 800b796:	64bb      	str	r3, [r7, #72]	; 0x48
 800b798:	e004      	b.n	800b7a4 <_tx_byte_pool_create+0x180>
 800b79a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b79e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a8:	601a      	str	r2, [r3, #0]
 800b7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7ae:	605a      	str	r2, [r3, #4]
 800b7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b2:	2215      	movs	r2, #21
 800b7b4:	609a      	str	r2, [r3, #8]
 800b7b6:	4b28      	ldr	r3, [pc, #160]	; (800b858 <_tx_byte_pool_create+0x234>)
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7bc:	60da      	str	r2, [r3, #12]
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	611a      	str	r2, [r3, #16]
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c8:	615a      	str	r2, [r3, #20]
 800b7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	619a      	str	r2, [r3, #24]
 800b7d0:	f107 0214 	add.w	r2, r7, #20
 800b7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d6:	61da      	str	r2, [r3, #28]
 800b7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7da:	3320      	adds	r3, #32
 800b7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7de:	4b1f      	ldr	r3, [pc, #124]	; (800b85c <_tx_byte_pool_create+0x238>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d314      	bcc.n	800b812 <_tx_byte_pool_create+0x1ee>
 800b7e8:	4b1d      	ldr	r3, [pc, #116]	; (800b860 <_tx_byte_pool_create+0x23c>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7ee:	4a16      	ldr	r2, [pc, #88]	; (800b848 <_tx_byte_pool_create+0x224>)
 800b7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f2:	6013      	str	r3, [r2, #0]
 800b7f4:	4b1b      	ldr	r3, [pc, #108]	; (800b864 <_tx_byte_pool_create+0x240>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7fa:	621a      	str	r2, [r3, #32]
 800b7fc:	4b1a      	ldr	r3, [pc, #104]	; (800b868 <_tx_byte_pool_create+0x244>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00d      	beq.n	800b820 <_tx_byte_pool_create+0x1fc>
 800b804:	4b18      	ldr	r3, [pc, #96]	; (800b868 <_tx_byte_pool_create+0x244>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a16      	ldr	r2, [pc, #88]	; (800b864 <_tx_byte_pool_create+0x240>)
 800b80a:	6812      	ldr	r2, [r2, #0]
 800b80c:	4610      	mov	r0, r2
 800b80e:	4798      	blx	r3
 800b810:	e006      	b.n	800b820 <_tx_byte_pool_create+0x1fc>
 800b812:	4a0d      	ldr	r2, [pc, #52]	; (800b848 <_tx_byte_pool_create+0x224>)
 800b814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	4b12      	ldr	r3, [pc, #72]	; (800b864 <_tx_byte_pool_create+0x240>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b81e:	621a      	str	r2, [r3, #32]
 800b820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b822:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	f383 8810 	msr	PRIMASK, r3
}
 800b82a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3750      	adds	r7, #80	; 0x50
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	ffffeeee 	.word	0xffffeeee
 800b83c:	42595445 	.word	0x42595445
 800b840:	200016d0 	.word	0x200016d0
 800b844:	200016cc 	.word	0x200016cc
 800b848:	20001cf8 	.word	0x20001cf8
 800b84c:	20001cfc 	.word	0x20001cfc
 800b850:	2000000c 	.word	0x2000000c
 800b854:	200016dc 	.word	0x200016dc
 800b858:	e0001004 	.word	0xe0001004
 800b85c:	20001cf4 	.word	0x20001cf4
 800b860:	20001cf0 	.word	0x20001cf0
 800b864:	20001ce4 	.word	0x20001ce4
 800b868:	20001d00 	.word	0x20001d00

0800b86c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 800b870:	f002 fcaa 	bl	800e1c8 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b874:	f001 fbe6 	bl	800d044 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b878:	f002 fa92 	bl	800dda0 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b87c:	4b12      	ldr	r3, [pc, #72]	; (800b8c8 <_tx_initialize_high_level+0x5c>)
 800b87e:	2200      	movs	r2, #0
 800b880:	601a      	str	r2, [r3, #0]
 800b882:	4b12      	ldr	r3, [pc, #72]	; (800b8cc <_tx_initialize_high_level+0x60>)
 800b884:	2200      	movs	r2, #0
 800b886:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b888:	4b11      	ldr	r3, [pc, #68]	; (800b8d0 <_tx_initialize_high_level+0x64>)
 800b88a:	2200      	movs	r2, #0
 800b88c:	601a      	str	r2, [r3, #0]
 800b88e:	4b11      	ldr	r3, [pc, #68]	; (800b8d4 <_tx_initialize_high_level+0x68>)
 800b890:	2200      	movs	r2, #0
 800b892:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b894:	4b10      	ldr	r3, [pc, #64]	; (800b8d8 <_tx_initialize_high_level+0x6c>)
 800b896:	2200      	movs	r2, #0
 800b898:	601a      	str	r2, [r3, #0]
 800b89a:	4b10      	ldr	r3, [pc, #64]	; (800b8dc <_tx_initialize_high_level+0x70>)
 800b89c:	2200      	movs	r2, #0
 800b89e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b8a0:	4b0f      	ldr	r3, [pc, #60]	; (800b8e0 <_tx_initialize_high_level+0x74>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	601a      	str	r2, [r3, #0]
 800b8a6:	4b0f      	ldr	r3, [pc, #60]	; (800b8e4 <_tx_initialize_high_level+0x78>)
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b8ac:	4b0e      	ldr	r3, [pc, #56]	; (800b8e8 <_tx_initialize_high_level+0x7c>)
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	601a      	str	r2, [r3, #0]
 800b8b2:	4b0e      	ldr	r3, [pc, #56]	; (800b8ec <_tx_initialize_high_level+0x80>)
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b8b8:	4b0d      	ldr	r3, [pc, #52]	; (800b8f0 <_tx_initialize_high_level+0x84>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	601a      	str	r2, [r3, #0]
 800b8be:	4b0d      	ldr	r3, [pc, #52]	; (800b8f4 <_tx_initialize_high_level+0x88>)
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	601a      	str	r2, [r3, #0]
#endif
}
 800b8c4:	bf00      	nop
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	200016a4 	.word	0x200016a4
 800b8cc:	200016a8 	.word	0x200016a8
 800b8d0:	200016ac 	.word	0x200016ac
 800b8d4:	200016b0 	.word	0x200016b0
 800b8d8:	200016b4 	.word	0x200016b4
 800b8dc:	200016b8 	.word	0x200016b8
 800b8e0:	200016c4 	.word	0x200016c4
 800b8e4:	200016c8 	.word	0x200016c8
 800b8e8:	200016cc 	.word	0x200016cc
 800b8ec:	200016d0 	.word	0x200016d0
 800b8f0:	200016bc 	.word	0x200016bc
 800b8f4:	200016c0 	.word	0x200016c0

0800b8f8 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b8fc:	4b10      	ldr	r3, [pc, #64]	; (800b940 <_tx_initialize_kernel_enter+0x48>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800b904:	d00c      	beq.n	800b920 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b906:	4b0e      	ldr	r3, [pc, #56]	; (800b940 <_tx_initialize_kernel_enter+0x48>)
 800b908:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b90c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b90e:	f7f4 fcb3 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b912:	f7ff ffab 	bl	800b86c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b916:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <_tx_initialize_kernel_enter+0x4c>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3301      	adds	r3, #1
 800b91c:	4a09      	ldr	r2, [pc, #36]	; (800b944 <_tx_initialize_kernel_enter+0x4c>)
 800b91e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b920:	4b07      	ldr	r3, [pc, #28]	; (800b940 <_tx_initialize_kernel_enter+0x48>)
 800b922:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b926:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b928:	4b07      	ldr	r3, [pc, #28]	; (800b948 <_tx_initialize_kernel_enter+0x50>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7f4 ff61 	bl	80007f4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b932:	4b03      	ldr	r3, [pc, #12]	; (800b940 <_tx_initialize_kernel_enter+0x48>)
 800b934:	2200      	movs	r2, #0
 800b936:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b938:	f7f4 fcda 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b93c:	bf00      	nop
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	2000000c 	.word	0x2000000c
 800b944:	20001774 	.word	0x20001774
 800b948:	200016d4 	.word	0x200016d4

0800b94c <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08e      	sub	sp, #56	; 0x38
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b956:	f3ef 8310 	mrs	r3, PRIMASK
 800b95a:	623b      	str	r3, [r7, #32]
    return(posture);
 800b95c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b95e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b960:	b672      	cpsid	i
    return(int_posture);
 800b962:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800b964:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b96a:	4a37      	ldr	r2, [pc, #220]	; (800ba48 <_tx_queue_cleanup+0xfc>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d161      	bne.n	800ba34 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d15b      	bne.n	800ba34 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b980:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800b982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b984:	2b00      	cmp	r3, #0
 800b986:	d055      	beq.n	800ba34 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800b988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a2f      	ldr	r2, [pc, #188]	; (800ba4c <_tx_queue_cleanup+0x100>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d150      	bne.n	800ba34 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b996:	2b00      	cmp	r3, #0
 800b998:	d04c      	beq.n	800ba34 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a4:	1e5a      	subs	r2, r3, #1
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a8:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ae:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d103      	bne.n	800b9be <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	629a      	str	r2, [r3, #40]	; 0x28
 800b9bc:	e013      	b.n	800b9e6 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9c8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ce:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9d4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800b9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d102      	bne.n	800b9e6 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9e4:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ea:	2b05      	cmp	r3, #5
 800b9ec:	d122      	bne.n	800ba34 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d004      	beq.n	800ba00 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	220b      	movs	r2, #11
 800b9fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b9fe:	e003      	b.n	800ba08 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	220a      	movs	r2, #10
 800ba04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ba08:	4b11      	ldr	r3, [pc, #68]	; (800ba50 <_tx_queue_cleanup+0x104>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	4a10      	ldr	r2, [pc, #64]	; (800ba50 <_tx_queue_cleanup+0x104>)
 800ba10:	6013      	str	r3, [r2, #0]
 800ba12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba14:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	f383 8810 	msr	PRIMASK, r3
}
 800ba1c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f001 fcd6 	bl	800d3d0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba24:	f3ef 8310 	mrs	r3, PRIMASK
 800ba28:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ba2a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ba2c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba2e:	b672      	cpsid	i
    return(int_posture);
 800ba30:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ba32:	637b      	str	r3, [r7, #52]	; 0x34
 800ba34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba36:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f383 8810 	msr	PRIMASK, r3
}
 800ba3e:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ba40:	bf00      	nop
 800ba42:	3738      	adds	r7, #56	; 0x38
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	0800b94d 	.word	0x0800b94d
 800ba4c:	51554555 	.word	0x51554555
 800ba50:	20001774 	.word	0x20001774

0800ba54 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b094      	sub	sp, #80	; 0x50
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
 800ba60:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800ba62:	2238      	movs	r2, #56	; 0x38
 800ba64:	2100      	movs	r1, #0
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f009 f9f2 	bl	8014e50 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba82:	63fb      	str	r3, [r7, #60]	; 0x3c
    used_words =  capacity * message_size;
 800ba84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	fb02 f303 	mul.w	r3, r2, r3
 800ba8c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	699a      	ldr	r2, [r3, #24]
 800ba98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	441a      	add	r2, r3
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	683a      	ldr	r2, [r7, #0]
 800baac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bab2:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bab8:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800baba:	f3ef 8310 	mrs	r3, PRIMASK
 800babe:	623b      	str	r3, [r7, #32]
    return(posture);
 800bac0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bac2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bac4:	b672      	cpsid	i
    return(int_posture);
 800bac6:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800bac8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	4a55      	ldr	r2, [pc, #340]	; (800bc24 <_tx_queue_create+0x1d0>)
 800bace:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800bad0:	4b55      	ldr	r3, [pc, #340]	; (800bc28 <_tx_queue_create+0x1d4>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d109      	bne.n	800baec <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800bad8:	4a54      	ldr	r2, [pc, #336]	; (800bc2c <_tx_queue_create+0x1d8>)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	635a      	str	r2, [r3, #52]	; 0x34
 800baea:	e011      	b.n	800bb10 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800baec:	4b4f      	ldr	r3, [pc, #316]	; (800bc2c <_tx_queue_create+0x1d8>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	633b      	str	r3, [r7, #48]	; 0x30
        previous_queue =  next_queue -> tx_queue_created_previous;
 800baf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf6:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800baf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800bafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb08:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb0e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800bb10:	4b45      	ldr	r3, [pc, #276]	; (800bc28 <_tx_queue_create+0x1d4>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	3301      	adds	r3, #1
 800bb16:	4a44      	ldr	r2, [pc, #272]	; (800bc28 <_tx_queue_create+0x1d4>)
 800bb18:	6013      	str	r3, [r2, #0]

    /* Optional queue create extended processing.  */
    TX_QUEUE_CREATE_EXTENSION(queue_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, name_ptr, queue_size, message_size)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb20:	68ba      	ldr	r2, [r7, #8]
 800bb22:	68f9      	ldr	r1, [r7, #12]
 800bb24:	2003      	movs	r0, #3
 800bb26:	f002 fb75 	bl	800e214 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_CREATE, queue_ptr, message_size, TX_POINTER_TO_ULONG_CONVERT(queue_start), queue_size, TX_TRACE_QUEUE_EVENTS)
 800bb2a:	4b41      	ldr	r3, [pc, #260]	; (800bc30 <_tx_queue_create+0x1dc>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d06b      	beq.n	800bc0e <_tx_queue_create+0x1ba>
 800bb36:	4b3f      	ldr	r3, [pc, #252]	; (800bc34 <_tx_queue_create+0x1e0>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d065      	beq.n	800bc0e <_tx_queue_create+0x1ba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bb42:	f3ef 8305 	mrs	r3, IPSR
 800bb46:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bb48:	69ba      	ldr	r2, [r7, #24]
 800bb4a:	4b3b      	ldr	r3, [pc, #236]	; (800bc38 <_tx_queue_create+0x1e4>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	627b      	str	r3, [r7, #36]	; 0x24
 800bb52:	4b3a      	ldr	r3, [pc, #232]	; (800bc3c <_tx_queue_create+0x1e8>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	643b      	str	r3, [r7, #64]	; 0x40
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10b      	bne.n	800bb76 <_tx_queue_create+0x122>
 800bb5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb62:	647b      	str	r3, [r7, #68]	; 0x44
 800bb64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb68:	041a      	lsls	r2, r3, #16
 800bb6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb72:	647b      	str	r3, [r7, #68]	; 0x44
 800bb74:	e00e      	b.n	800bb94 <_tx_queue_create+0x140>
 800bb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb78:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bb7c:	d205      	bcs.n	800bb8a <_tx_queue_create+0x136>
 800bb7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb80:	647b      	str	r3, [r7, #68]	; 0x44
 800bb82:	f04f 33ff 	mov.w	r3, #4294967295
 800bb86:	643b      	str	r3, [r7, #64]	; 0x40
 800bb88:	e004      	b.n	800bb94 <_tx_queue_create+0x140>
 800bb8a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800bb8e:	643b      	str	r3, [r7, #64]	; 0x40
 800bb90:	2300      	movs	r3, #0
 800bb92:	647b      	str	r3, [r7, #68]	; 0x44
 800bb94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	601a      	str	r2, [r3, #0]
 800bb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb9e:	605a      	str	r2, [r3, #4]
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	223c      	movs	r2, #60	; 0x3c
 800bba4:	609a      	str	r2, [r3, #8]
 800bba6:	4b26      	ldr	r3, [pc, #152]	; (800bc40 <_tx_queue_create+0x1ec>)
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbac:	60da      	str	r2, [r3, #12]
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb2:	611a      	str	r2, [r3, #16]
 800bbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	615a      	str	r2, [r3, #20]
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbe:	619a      	str	r2, [r3, #24]
 800bbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbc4:	61da      	str	r2, [r3, #28]
 800bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc8:	3320      	adds	r3, #32
 800bbca:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbcc:	4b1d      	ldr	r3, [pc, #116]	; (800bc44 <_tx_queue_create+0x1f0>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d314      	bcc.n	800bc00 <_tx_queue_create+0x1ac>
 800bbd6:	4b1c      	ldr	r3, [pc, #112]	; (800bc48 <_tx_queue_create+0x1f4>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbdc:	4a14      	ldr	r2, [pc, #80]	; (800bc30 <_tx_queue_create+0x1dc>)
 800bbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe0:	6013      	str	r3, [r2, #0]
 800bbe2:	4b1a      	ldr	r3, [pc, #104]	; (800bc4c <_tx_queue_create+0x1f8>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbe8:	621a      	str	r2, [r3, #32]
 800bbea:	4b19      	ldr	r3, [pc, #100]	; (800bc50 <_tx_queue_create+0x1fc>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00d      	beq.n	800bc0e <_tx_queue_create+0x1ba>
 800bbf2:	4b17      	ldr	r3, [pc, #92]	; (800bc50 <_tx_queue_create+0x1fc>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a15      	ldr	r2, [pc, #84]	; (800bc4c <_tx_queue_create+0x1f8>)
 800bbf8:	6812      	ldr	r2, [r2, #0]
 800bbfa:	4610      	mov	r0, r2
 800bbfc:	4798      	blx	r3
 800bbfe:	e006      	b.n	800bc0e <_tx_queue_create+0x1ba>
 800bc00:	4a0b      	ldr	r2, [pc, #44]	; (800bc30 <_tx_queue_create+0x1dc>)
 800bc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc04:	6013      	str	r3, [r2, #0]
 800bc06:	4b11      	ldr	r3, [pc, #68]	; (800bc4c <_tx_queue_create+0x1f8>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc0c:	621a      	str	r2, [r3, #32]
 800bc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc10:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	f383 8810 	msr	PRIMASK, r3
}
 800bc18:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3748      	adds	r7, #72	; 0x48
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	51554555 	.word	0x51554555
 800bc28:	200016b0 	.word	0x200016b0
 800bc2c:	200016ac 	.word	0x200016ac
 800bc30:	20001cf8 	.word	0x20001cf8
 800bc34:	20001cfc 	.word	0x20001cfc
 800bc38:	2000000c 	.word	0x2000000c
 800bc3c:	200016dc 	.word	0x200016dc
 800bc40:	e0001004 	.word	0xe0001004
 800bc44:	20001cf4 	.word	0x20001cf4
 800bc48:	20001cf0 	.word	0x20001cf0
 800bc4c:	20001ce4 	.word	0x20001ce4
 800bc50:	20001d00 	.word	0x20001d00

0800bc54 <_tx_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_flush(TX_QUEUE *queue_ptr)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b094      	sub	sp, #80	; 0x50
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
UINT            suspended_count;
TX_THREAD       *thread_ptr;


    /* Initialize the suspended count and list.  */
    suspended_count =  TX_NO_SUSPENSIONS;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	64bb      	str	r3, [r7, #72]	; 0x48
    suspension_list =  TX_NULL;
 800bc60:	2300      	movs	r3, #0
 800bc62:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc64:	f3ef 8310 	mrs	r3, PRIMASK
 800bc68:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800bc6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc6e:	b672      	cpsid	i
    return(int_posture);
 800bc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to reset various queue parameters.  */
    TX_DISABLE
 800bc72:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_FLUSH, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), 0, 0, TX_TRACE_QUEUE_EVENTS)
 800bc74:	4b76      	ldr	r3, [pc, #472]	; (800be50 <_tx_queue_flush+0x1fc>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d06c      	beq.n	800bd5a <_tx_queue_flush+0x106>
 800bc80:	4b74      	ldr	r3, [pc, #464]	; (800be54 <_tx_queue_flush+0x200>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d066      	beq.n	800bd5a <_tx_queue_flush+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc8c:	f3ef 8305 	mrs	r3, IPSR
 800bc90:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800bc92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc94:	4b70      	ldr	r3, [pc, #448]	; (800be58 <_tx_queue_flush+0x204>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc9c:	4b6f      	ldr	r3, [pc, #444]	; (800be5c <_tx_queue_flush+0x208>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	643b      	str	r3, [r7, #64]	; 0x40
 800bca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10b      	bne.n	800bcc0 <_tx_queue_flush+0x6c>
 800bca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcac:	647b      	str	r3, [r7, #68]	; 0x44
 800bcae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcb2:	041a      	lsls	r2, r3, #16
 800bcb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bcbc:	647b      	str	r3, [r7, #68]	; 0x44
 800bcbe:	e00e      	b.n	800bcde <_tx_queue_flush+0x8a>
 800bcc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bcc6:	d205      	bcs.n	800bcd4 <_tx_queue_flush+0x80>
 800bcc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcca:	647b      	str	r3, [r7, #68]	; 0x44
 800bccc:	f04f 33ff 	mov.w	r3, #4294967295
 800bcd0:	643b      	str	r3, [r7, #64]	; 0x40
 800bcd2:	e004      	b.n	800bcde <_tx_queue_flush+0x8a>
 800bcd4:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800bcd8:	643b      	str	r3, [r7, #64]	; 0x40
 800bcda:	2300      	movs	r3, #0
 800bcdc:	647b      	str	r3, [r7, #68]	; 0x44
 800bcde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce2:	601a      	str	r2, [r3, #0]
 800bce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bce8:	605a      	str	r2, [r3, #4]
 800bcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcec:	223e      	movs	r2, #62	; 0x3e
 800bcee:	609a      	str	r2, [r3, #8]
 800bcf0:	4b5b      	ldr	r3, [pc, #364]	; (800be60 <_tx_queue_flush+0x20c>)
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf6:	60da      	str	r2, [r3, #12]
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfc:	611a      	str	r2, [r3, #16]
 800bcfe:	f107 0208 	add.w	r2, r7, #8
 800bd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd04:	615a      	str	r2, [r3, #20]
 800bd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd08:	2200      	movs	r2, #0
 800bd0a:	619a      	str	r2, [r3, #24]
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0e:	2200      	movs	r2, #0
 800bd10:	61da      	str	r2, [r3, #28]
 800bd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd14:	3320      	adds	r3, #32
 800bd16:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd18:	4b52      	ldr	r3, [pc, #328]	; (800be64 <_tx_queue_flush+0x210>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d314      	bcc.n	800bd4c <_tx_queue_flush+0xf8>
 800bd22:	4b51      	ldr	r3, [pc, #324]	; (800be68 <_tx_queue_flush+0x214>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd28:	4a49      	ldr	r2, [pc, #292]	; (800be50 <_tx_queue_flush+0x1fc>)
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2c:	6013      	str	r3, [r2, #0]
 800bd2e:	4b4f      	ldr	r3, [pc, #316]	; (800be6c <_tx_queue_flush+0x218>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd34:	621a      	str	r2, [r3, #32]
 800bd36:	4b4e      	ldr	r3, [pc, #312]	; (800be70 <_tx_queue_flush+0x21c>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00d      	beq.n	800bd5a <_tx_queue_flush+0x106>
 800bd3e:	4b4c      	ldr	r3, [pc, #304]	; (800be70 <_tx_queue_flush+0x21c>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a4a      	ldr	r2, [pc, #296]	; (800be6c <_tx_queue_flush+0x218>)
 800bd44:	6812      	ldr	r2, [r2, #0]
 800bd46:	4610      	mov	r0, r2
 800bd48:	4798      	blx	r3
 800bd4a:	e006      	b.n	800bd5a <_tx_queue_flush+0x106>
 800bd4c:	4a40      	ldr	r2, [pc, #256]	; (800be50 <_tx_queue_flush+0x1fc>)
 800bd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	4b46      	ldr	r3, [pc, #280]	; (800be6c <_tx_queue_flush+0x218>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd58:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_FLUSH_INSERT

    /* Determine if there is something on the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d023      	beq.n	800bdaa <_tx_queue_flush+0x156>
    {

        /* Yes, there is something in the queue.  */

        /* Reset the queue parameters to erase all of the queued messages.  */
        queue_ptr -> tx_queue_enqueued =           TX_NO_MESSAGES;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	611a      	str	r2, [r3, #16]
        queue_ptr -> tx_queue_available_storage =  queue_ptr -> tx_queue_capacity;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	68da      	ldr	r2, [r3, #12]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	615a      	str	r2, [r3, #20]
        queue_ptr -> tx_queue_read =               queue_ptr -> tx_queue_start;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	699a      	ldr	r2, [r3, #24]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	621a      	str	r2, [r3, #32]
        queue_ptr -> tx_queue_write =              queue_ptr -> tx_queue_start;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	699a      	ldr	r2, [r3, #24]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Now determine if there are any threads suspended on a full queue.  */
        if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d010      	beq.n	800bdaa <_tx_queue_flush+0x156>

            /* Yes, there are threads suspended on this queue, they must be
               resumed!  */

            /* Copy the information into temporary variables.  */
            suspension_list =  queue_ptr -> tx_queue_suspension_list;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd8c:	64fb      	str	r3, [r7, #76]	; 0x4c
            suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd92:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the queue variables.  */
            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	629a      	str	r2, [r3, #40]	; 0x28
            queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bda0:	4b34      	ldr	r3, [pc, #208]	; (800be74 <_tx_queue_flush+0x220>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	3301      	adds	r3, #1
 800bda6:	4a33      	ldr	r2, [pc, #204]	; (800be74 <_tx_queue_flush+0x220>)
 800bda8:	6013      	str	r3, [r2, #0]
 800bdaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdac:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb0:	f383 8810 	msr	PRIMASK, r3
}
 800bdb4:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    if (suspended_count != TX_NO_SUSPENSIONS)
 800bdb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d044      	beq.n	800be46 <_tx_queue_flush+0x1f2>
    {

        /* Pickup the thread to resume.  */
        thread_ptr =  suspension_list;
 800bdbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdbe:	60bb      	str	r3, [r7, #8]
        while (suspended_count != ((ULONG) 0))
 800bdc0:	e027      	b.n	800be12 <_tx_queue_flush+0x1be>
        {

            /* Decrement the suspension count.  */
            suspended_count--;
 800bdc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Check for a NULL thread pointer.  */
            if (thread_ptr == TX_NULL)
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d025      	beq.n	800be1a <_tx_queue_flush+0x1c6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bdce:	f3ef 8310 	mrs	r3, PRIMASK
 800bdd2:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bdd4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bdd6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bdd8:	b672      	cpsid	i
    return(int_posture);
 800bdda:	69bb      	ldr	r3, [r7, #24]
            }

            /* Resume the next suspended thread.  */

            /* Lockout interrupts.  */
            TX_DISABLE
 800bddc:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	2200      	movs	r2, #0
 800bde2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set the return status in the thread to TX_SUCCESS.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdf0:	60bb      	str	r3, [r7, #8]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800bdf2:	4b20      	ldr	r3, [pc, #128]	; (800be74 <_tx_queue_flush+0x220>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	4a1e      	ldr	r2, [pc, #120]	; (800be74 <_tx_queue_flush+0x220>)
 800bdfa:	6013      	str	r3, [r2, #0]
 800bdfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdfe:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be00:	6a3b      	ldr	r3, [r7, #32]
 800be02:	f383 8810 	msr	PRIMASK, r3
}
 800be06:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be0c:	4618      	mov	r0, r3
 800be0e:	f001 fadf 	bl	800d3d0 <_tx_thread_system_resume>
        while (suspended_count != ((ULONG) 0))
 800be12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1d4      	bne.n	800bdc2 <_tx_queue_flush+0x16e>
 800be18:	e000      	b.n	800be1c <_tx_queue_flush+0x1c8>
                break;
 800be1a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be1c:	f3ef 8310 	mrs	r3, PRIMASK
 800be20:	613b      	str	r3, [r7, #16]
    return(posture);
 800be22:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800be24:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800be26:	b672      	cpsid	i
    return(int_posture);
 800be28:	68fb      	ldr	r3, [r7, #12]
#endif
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800be2a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Restore previous preempt posture.  */
        _tx_thread_preempt_disable--;
 800be2c:	4b11      	ldr	r3, [pc, #68]	; (800be74 <_tx_queue_flush+0x220>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3b01      	subs	r3, #1
 800be32:	4a10      	ldr	r2, [pc, #64]	; (800be74 <_tx_queue_flush+0x220>)
 800be34:	6013      	str	r3, [r2, #0]
 800be36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be38:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	f383 8810 	msr	PRIMASK, r3
}
 800be40:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800be42:	f001 fa8b 	bl	800d35c <_tx_thread_system_preempt_check>
    }

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800be46:	2300      	movs	r3, #0
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3750      	adds	r7, #80	; 0x50
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	20001cf8 	.word	0x20001cf8
 800be54:	20001cfc 	.word	0x20001cfc
 800be58:	2000000c 	.word	0x2000000c
 800be5c:	200016dc 	.word	0x200016dc
 800be60:	e0001004 	.word	0xe0001004
 800be64:	20001cf4 	.word	0x20001cf4
 800be68:	20001cf0 	.word	0x20001cf0
 800be6c:	20001ce4 	.word	0x20001ce4
 800be70:	20001d00 	.word	0x20001d00
 800be74:	20001774 	.word	0x20001774

0800be78 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b09a      	sub	sp, #104	; 0x68
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800be84:	2300      	movs	r3, #0
 800be86:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be88:	f3ef 8310 	mrs	r3, PRIMASK
 800be8c:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800be8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800be90:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800be92:	b672      	cpsid	i
    return(int_posture);
 800be94:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800be96:	64fb      	str	r3, [r7, #76]	; 0x4c
    queue_ptr -> tx_queue_performance_messages_received_count++;

#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_RECEIVE, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(destination_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800be98:	4b77      	ldr	r3, [pc, #476]	; (800c078 <_tx_queue_receive+0x200>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800be9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d06c      	beq.n	800bf7e <_tx_queue_receive+0x106>
 800bea4:	4b75      	ldr	r3, [pc, #468]	; (800c07c <_tx_queue_receive+0x204>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beac:	2b00      	cmp	r3, #0
 800beae:	d066      	beq.n	800bf7e <_tx_queue_receive+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800beb0:	f3ef 8305 	mrs	r3, IPSR
 800beb4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800beb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beb8:	4b71      	ldr	r3, [pc, #452]	; (800c080 <_tx_queue_receive+0x208>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4313      	orrs	r3, r2
 800bebe:	647b      	str	r3, [r7, #68]	; 0x44
 800bec0:	4b70      	ldr	r3, [pc, #448]	; (800c084 <_tx_queue_receive+0x20c>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	653b      	str	r3, [r7, #80]	; 0x50
 800bec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10b      	bne.n	800bee4 <_tx_queue_receive+0x6c>
 800becc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed0:	657b      	str	r3, [r7, #84]	; 0x54
 800bed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed6:	041a      	lsls	r2, r3, #16
 800bed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beda:	4313      	orrs	r3, r2
 800bedc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bee0:	657b      	str	r3, [r7, #84]	; 0x54
 800bee2:	e00e      	b.n	800bf02 <_tx_queue_receive+0x8a>
 800bee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bee6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800beea:	d205      	bcs.n	800bef8 <_tx_queue_receive+0x80>
 800beec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beee:	657b      	str	r3, [r7, #84]	; 0x54
 800bef0:	f04f 33ff 	mov.w	r3, #4294967295
 800bef4:	653b      	str	r3, [r7, #80]	; 0x50
 800bef6:	e004      	b.n	800bf02 <_tx_queue_receive+0x8a>
 800bef8:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800befc:	653b      	str	r3, [r7, #80]	; 0x50
 800befe:	2300      	movs	r3, #0
 800bf00:	657b      	str	r3, [r7, #84]	; 0x54
 800bf02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf06:	601a      	str	r2, [r3, #0]
 800bf08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf0c:	605a      	str	r2, [r3, #4]
 800bf0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf10:	2244      	movs	r2, #68	; 0x44
 800bf12:	609a      	str	r2, [r3, #8]
 800bf14:	4b5c      	ldr	r3, [pc, #368]	; (800c088 <_tx_queue_receive+0x210>)
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf1a:	60da      	str	r2, [r3, #12]
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf20:	611a      	str	r2, [r3, #16]
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf26:	615a      	str	r2, [r3, #20]
 800bf28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	619a      	str	r2, [r3, #24]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	691a      	ldr	r2, [r3, #16]
 800bf32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf34:	61da      	str	r2, [r3, #28]
 800bf36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf38:	3320      	adds	r3, #32
 800bf3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf3c:	4b53      	ldr	r3, [pc, #332]	; (800c08c <_tx_queue_receive+0x214>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d314      	bcc.n	800bf70 <_tx_queue_receive+0xf8>
 800bf46:	4b52      	ldr	r3, [pc, #328]	; (800c090 <_tx_queue_receive+0x218>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf4c:	4a4a      	ldr	r2, [pc, #296]	; (800c078 <_tx_queue_receive+0x200>)
 800bf4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf50:	6013      	str	r3, [r2, #0]
 800bf52:	4b50      	ldr	r3, [pc, #320]	; (800c094 <_tx_queue_receive+0x21c>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf58:	621a      	str	r2, [r3, #32]
 800bf5a:	4b4f      	ldr	r3, [pc, #316]	; (800c098 <_tx_queue_receive+0x220>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00d      	beq.n	800bf7e <_tx_queue_receive+0x106>
 800bf62:	4b4d      	ldr	r3, [pc, #308]	; (800c098 <_tx_queue_receive+0x220>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a4b      	ldr	r2, [pc, #300]	; (800c094 <_tx_queue_receive+0x21c>)
 800bf68:	6812      	ldr	r2, [r2, #0]
 800bf6a:	4610      	mov	r0, r2
 800bf6c:	4798      	blx	r3
 800bf6e:	e006      	b.n	800bf7e <_tx_queue_receive+0x106>
 800bf70:	4a41      	ldr	r2, [pc, #260]	; (800c078 <_tx_queue_receive+0x200>)
 800bf72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf74:	6013      	str	r3, [r2, #0]
 800bf76:	4b47      	ldr	r3, [pc, #284]	; (800c094 <_tx_queue_receive+0x21c>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf7c:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf82:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f000 8149 	beq.w	800c220 <_tx_queue_receive+0x3a8>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800bf8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d13c      	bne.n	800c00e <_tx_queue_receive+0x196>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6a1b      	ldr	r3, [r3, #32]
 800bf98:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bfa4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bfa6:	1d13      	adds	r3, r2, #4
 800bfa8:	667b      	str	r3, [r7, #100]	; 0x64
 800bfaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfac:	1d19      	adds	r1, r3, #4
 800bfae:	6639      	str	r1, [r7, #96]	; 0x60
 800bfb0:	6812      	ldr	r2, [r2, #0]
 800bfb2:	601a      	str	r2, [r3, #0]
 800bfb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d90e      	bls.n	800bfd8 <_tx_queue_receive+0x160>
 800bfba:	e007      	b.n	800bfcc <_tx_queue_receive+0x154>
 800bfbc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bfbe:	1d13      	adds	r3, r2, #4
 800bfc0:	667b      	str	r3, [r7, #100]	; 0x64
 800bfc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfc4:	1d19      	adds	r1, r3, #4
 800bfc6:	6639      	str	r1, [r7, #96]	; 0x60
 800bfc8:	6812      	ldr	r2, [r2, #0]
 800bfca:	601a      	str	r2, [r3, #0]
 800bfcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bfd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1f1      	bne.n	800bfbc <_tx_queue_receive+0x144>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	69db      	ldr	r3, [r3, #28]
 800bfdc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d102      	bne.n	800bfe8 <_tx_queue_receive+0x170>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	699b      	ldr	r3, [r3, #24]
 800bfe6:	667b      	str	r3, [r7, #100]	; 0x64
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bfec:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	695b      	ldr	r3, [r3, #20]
 800bff2:	1c5a      	adds	r2, r3, #1
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	1e5a      	subs	r2, r3, #1
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	611a      	str	r2, [r3, #16]
 800c002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c004:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c008:	f383 8810 	msr	PRIMASK, r3
}
 800c00c:	e176      	b.n	800c2fc <_tx_queue_receive+0x484>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c012:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800c014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d166      	bne.n	800c0ec <_tx_queue_receive+0x274>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800c01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c022:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c02e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c030:	1d13      	adds	r3, r2, #4
 800c032:	667b      	str	r3, [r7, #100]	; 0x64
 800c034:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c036:	1d19      	adds	r1, r3, #4
 800c038:	6639      	str	r1, [r7, #96]	; 0x60
 800c03a:	6812      	ldr	r2, [r2, #0]
 800c03c:	601a      	str	r2, [r3, #0]
 800c03e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c040:	2b01      	cmp	r3, #1
 800c042:	d90e      	bls.n	800c062 <_tx_queue_receive+0x1ea>
 800c044:	e007      	b.n	800c056 <_tx_queue_receive+0x1de>
 800c046:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c048:	1d13      	adds	r3, r2, #4
 800c04a:	667b      	str	r3, [r7, #100]	; 0x64
 800c04c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c04e:	1d19      	adds	r1, r3, #4
 800c050:	6639      	str	r1, [r7, #96]	; 0x60
 800c052:	6812      	ldr	r2, [r2, #0]
 800c054:	601a      	str	r2, [r3, #0]
 800c056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c058:	3b01      	subs	r3, #1
 800c05a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c05c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1f1      	bne.n	800c046 <_tx_queue_receive+0x1ce>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800c062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c064:	3b01      	subs	r3, #1
 800c066:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800c068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d116      	bne.n	800c09c <_tx_queue_receive+0x224>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2200      	movs	r2, #0
 800c072:	629a      	str	r2, [r3, #40]	; 0x28
 800c074:	e021      	b.n	800c0ba <_tx_queue_receive+0x242>
 800c076:	bf00      	nop
 800c078:	20001cf8 	.word	0x20001cf8
 800c07c:	20001cfc 	.word	0x20001cfc
 800c080:	2000000c 	.word	0x2000000c
 800c084:	200016dc 	.word	0x200016dc
 800c088:	e0001004 	.word	0xe0001004
 800c08c:	20001cf4 	.word	0x20001cf4
 800c090:	20001cf0 	.word	0x20001cf0
 800c094:	20001ce4 	.word	0x20001ce4
 800c098:	20001d00 	.word	0x20001d00
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800c09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c09e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0a0:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0a6:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800c0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0ac:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800c0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0b2:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800c0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0b8:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0be:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800c0ce:	4b8e      	ldr	r3, [pc, #568]	; (800c308 <_tx_queue_receive+0x490>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	4a8c      	ldr	r2, [pc, #560]	; (800c308 <_tx_queue_receive+0x490>)
 800c0d6:	6013      	str	r3, [r2, #0]
 800c0d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0da:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0dc:	6a3b      	ldr	r3, [r7, #32]
 800c0de:	f383 8810 	msr	PRIMASK, r3
}
 800c0e2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800c0e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c0e6:	f001 f973 	bl	800d3d0 <_tx_thread_system_resume>
 800c0ea:	e107      	b.n	800c2fc <_tx_queue_receive+0x484>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6a1b      	ldr	r3, [r3, #32]
 800c0f0:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c0fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c0fe:	1d13      	adds	r3, r2, #4
 800c100:	667b      	str	r3, [r7, #100]	; 0x64
 800c102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c104:	1d19      	adds	r1, r3, #4
 800c106:	6639      	str	r1, [r7, #96]	; 0x60
 800c108:	6812      	ldr	r2, [r2, #0]
 800c10a:	601a      	str	r2, [r3, #0]
 800c10c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d90e      	bls.n	800c130 <_tx_queue_receive+0x2b8>
 800c112:	e007      	b.n	800c124 <_tx_queue_receive+0x2ac>
 800c114:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c116:	1d13      	adds	r3, r2, #4
 800c118:	667b      	str	r3, [r7, #100]	; 0x64
 800c11a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c11c:	1d19      	adds	r1, r3, #4
 800c11e:	6639      	str	r1, [r7, #96]	; 0x60
 800c120:	6812      	ldr	r2, [r2, #0]
 800c122:	601a      	str	r2, [r3, #0]
 800c124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c126:	3b01      	subs	r3, #1
 800c128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c12a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d1f1      	bne.n	800c114 <_tx_queue_receive+0x29c>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	69db      	ldr	r3, [r3, #28]
 800c134:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c136:	429a      	cmp	r2, r3
 800c138:	d102      	bne.n	800c140 <_tx_queue_receive+0x2c8>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	699b      	ldr	r3, [r3, #24]
 800c13e:	667b      	str	r3, [r7, #100]	; 0x64
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c144:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800c146:	4b70      	ldr	r3, [pc, #448]	; (800c308 <_tx_queue_receive+0x490>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	3301      	adds	r3, #1
 800c14c:	4a6e      	ldr	r2, [pc, #440]	; (800c308 <_tx_queue_receive+0x490>)
 800c14e:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800c150:	4b6d      	ldr	r3, [pc, #436]	; (800c308 <_tx_queue_receive+0x490>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	3b01      	subs	r3, #1
 800c156:	4a6c      	ldr	r2, [pc, #432]	; (800c308 <_tx_queue_receive+0x490>)
 800c158:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800c15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c15c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c15e:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  queue_ptr -> tx_queue_write;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c164:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c16c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c16e:	1d13      	adds	r3, r2, #4
 800c170:	667b      	str	r3, [r7, #100]	; 0x64
 800c172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c174:	1d19      	adds	r1, r3, #4
 800c176:	6639      	str	r1, [r7, #96]	; 0x60
 800c178:	6812      	ldr	r2, [r2, #0]
 800c17a:	601a      	str	r2, [r3, #0]
 800c17c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d90e      	bls.n	800c1a0 <_tx_queue_receive+0x328>
 800c182:	e007      	b.n	800c194 <_tx_queue_receive+0x31c>
 800c184:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c186:	1d13      	adds	r3, r2, #4
 800c188:	667b      	str	r3, [r7, #100]	; 0x64
 800c18a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c18c:	1d19      	adds	r1, r3, #4
 800c18e:	6639      	str	r1, [r7, #96]	; 0x60
 800c190:	6812      	ldr	r2, [r2, #0]
 800c192:	601a      	str	r2, [r3, #0]
 800c194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c196:	3b01      	subs	r3, #1
 800c198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c19a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1f1      	bne.n	800c184 <_tx_queue_receive+0x30c>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	69db      	ldr	r3, [r3, #28]
 800c1a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d102      	bne.n	800c1b0 <_tx_queue_receive+0x338>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	699b      	ldr	r3, [r3, #24]
 800c1ae:	663b      	str	r3, [r7, #96]	; 0x60
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1b4:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ba:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800c1bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1be:	3b01      	subs	r3, #1
 800c1c0:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800c1c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d103      	bne.n	800c1d0 <_tx_queue_receive+0x358>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	629a      	str	r2, [r3, #40]	; 0x28
 800c1ce:	e00e      	b.n	800c1ee <_tx_queue_receive+0x376>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800c1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1d4:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1da:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c1dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1e0:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1e6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800c1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1ec:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1f2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800c202:	4b41      	ldr	r3, [pc, #260]	; (800c308 <_tx_queue_receive+0x490>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	3301      	adds	r3, #1
 800c208:	4a3f      	ldr	r2, [pc, #252]	; (800c308 <_tx_queue_receive+0x490>)
 800c20a:	6013      	str	r3, [r2, #0]
 800c20c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c20e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	f383 8810 	msr	PRIMASK, r3
}
 800c216:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800c218:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c21a:	f001 f8d9 	bl	800d3d0 <_tx_thread_system_resume>
 800c21e:	e06d      	b.n	800c2fc <_tx_queue_receive+0x484>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d062      	beq.n	800c2ec <_tx_queue_receive+0x474>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c226:	4b38      	ldr	r3, [pc, #224]	; (800c308 <_tx_queue_receive+0x490>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d008      	beq.n	800c240 <_tx_queue_receive+0x3c8>
 800c22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c230:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	f383 8810 	msr	PRIMASK, r3
}
 800c238:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800c23a:	230a      	movs	r3, #10
 800c23c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c23e:	e05d      	b.n	800c2fc <_tx_queue_receive+0x484>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c240:	4b32      	ldr	r3, [pc, #200]	; (800c30c <_tx_queue_receive+0x494>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800c246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c248:	4a31      	ldr	r2, [pc, #196]	; (800c310 <_tx_queue_receive+0x498>)
 800c24a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800c24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800c252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800c258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c25a:	2200      	movs	r2, #0
 800c25c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c262:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c266:	1c5a      	adds	r2, r3, #1
 800c268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c26a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c26e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c270:	2b00      	cmp	r3, #0
 800c272:	d109      	bne.n	800c288 <_tx_queue_receive+0x410>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c278:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c27c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c27e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c282:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c284:	675a      	str	r2, [r3, #116]	; 0x74
 800c286:	e011      	b.n	800c2ac <_tx_queue_receive+0x434>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c28c:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c28e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c292:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c298:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c29a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c29c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c29e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2a4:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2aa:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800c2ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2ae:	1c5a      	adds	r2, r3, #1
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800c2b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2b6:	2205      	movs	r2, #5
 800c2b8:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2bc:	2201      	movs	r2, #1
 800c2be:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c2c6:	4b10      	ldr	r3, [pc, #64]	; (800c308 <_tx_queue_receive+0x490>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	4a0e      	ldr	r2, [pc, #56]	; (800c308 <_tx_queue_receive+0x490>)
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2d2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	f383 8810 	msr	PRIMASK, r3
}
 800c2da:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c2dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c2de:	f001 fa31 	bl	800d744 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2e8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2ea:	e007      	b.n	800c2fc <_tx_queue_receive+0x484>
 800c2ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	f383 8810 	msr	PRIMASK, r3
}
 800c2f6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800c2f8:	230a      	movs	r3, #10
 800c2fa:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800c2fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3768      	adds	r7, #104	; 0x68
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20001774 	.word	0x20001774
 800c30c:	200016dc 	.word	0x200016dc
 800c310:	0800b94d 	.word	0x0800b94d

0800c314 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b09a      	sub	sp, #104	; 0x68
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c320:	2300      	movs	r3, #0
 800c322:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c324:	f3ef 8310 	mrs	r3, PRIMASK
 800c328:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800c32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800c32c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c32e:	b672      	cpsid	i
    return(int_posture);
 800c330:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800c332:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Increment the number of messages sent to this queue.  */
    queue_ptr -> tx_queue_performance_messages_sent_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_SEND, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(source_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800c334:	4b7a      	ldr	r3, [pc, #488]	; (800c520 <_tx_queue_send+0x20c>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	64bb      	str	r3, [r7, #72]	; 0x48
 800c33a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d06c      	beq.n	800c41a <_tx_queue_send+0x106>
 800c340:	4b78      	ldr	r3, [pc, #480]	; (800c524 <_tx_queue_send+0x210>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d066      	beq.n	800c41a <_tx_queue_send+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c34c:	f3ef 8305 	mrs	r3, IPSR
 800c350:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800c352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c354:	4b74      	ldr	r3, [pc, #464]	; (800c528 <_tx_queue_send+0x214>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4313      	orrs	r3, r2
 800c35a:	647b      	str	r3, [r7, #68]	; 0x44
 800c35c:	4b73      	ldr	r3, [pc, #460]	; (800c52c <_tx_queue_send+0x218>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	653b      	str	r3, [r7, #80]	; 0x50
 800c362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c364:	2b00      	cmp	r3, #0
 800c366:	d10b      	bne.n	800c380 <_tx_queue_send+0x6c>
 800c368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36c:	657b      	str	r3, [r7, #84]	; 0x54
 800c36e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c372:	041a      	lsls	r2, r3, #16
 800c374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c376:	4313      	orrs	r3, r2
 800c378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c37c:	657b      	str	r3, [r7, #84]	; 0x54
 800c37e:	e00e      	b.n	800c39e <_tx_queue_send+0x8a>
 800c380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c382:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c386:	d205      	bcs.n	800c394 <_tx_queue_send+0x80>
 800c388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c38a:	657b      	str	r3, [r7, #84]	; 0x54
 800c38c:	f04f 33ff 	mov.w	r3, #4294967295
 800c390:	653b      	str	r3, [r7, #80]	; 0x50
 800c392:	e004      	b.n	800c39e <_tx_queue_send+0x8a>
 800c394:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c398:	653b      	str	r3, [r7, #80]	; 0x50
 800c39a:	2300      	movs	r3, #0
 800c39c:	657b      	str	r3, [r7, #84]	; 0x54
 800c39e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3a8:	605a      	str	r2, [r3, #4]
 800c3aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3ac:	2245      	movs	r2, #69	; 0x45
 800c3ae:	609a      	str	r2, [r3, #8]
 800c3b0:	4b5f      	ldr	r3, [pc, #380]	; (800c530 <_tx_queue_send+0x21c>)
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3b6:	60da      	str	r2, [r3, #12]
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3bc:	611a      	str	r2, [r3, #16]
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3c2:	615a      	str	r2, [r3, #20]
 800c3c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	619a      	str	r2, [r3, #24]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	691a      	ldr	r2, [r3, #16]
 800c3ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3d0:	61da      	str	r2, [r3, #28]
 800c3d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3d4:	3320      	adds	r3, #32
 800c3d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3d8:	4b56      	ldr	r3, [pc, #344]	; (800c534 <_tx_queue_send+0x220>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d314      	bcc.n	800c40c <_tx_queue_send+0xf8>
 800c3e2:	4b55      	ldr	r3, [pc, #340]	; (800c538 <_tx_queue_send+0x224>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3e8:	4a4d      	ldr	r2, [pc, #308]	; (800c520 <_tx_queue_send+0x20c>)
 800c3ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3ec:	6013      	str	r3, [r2, #0]
 800c3ee:	4b53      	ldr	r3, [pc, #332]	; (800c53c <_tx_queue_send+0x228>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3f4:	621a      	str	r2, [r3, #32]
 800c3f6:	4b52      	ldr	r3, [pc, #328]	; (800c540 <_tx_queue_send+0x22c>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00d      	beq.n	800c41a <_tx_queue_send+0x106>
 800c3fe:	4b50      	ldr	r3, [pc, #320]	; (800c540 <_tx_queue_send+0x22c>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4a4e      	ldr	r2, [pc, #312]	; (800c53c <_tx_queue_send+0x228>)
 800c404:	6812      	ldr	r2, [r2, #0]
 800c406:	4610      	mov	r0, r2
 800c408:	4798      	blx	r3
 800c40a:	e006      	b.n	800c41a <_tx_queue_send+0x106>
 800c40c:	4a44      	ldr	r2, [pc, #272]	; (800c520 <_tx_queue_send+0x20c>)
 800c40e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c410:	6013      	str	r3, [r2, #0]
 800c412:	4b4a      	ldr	r3, [pc, #296]	; (800c53c <_tx_queue_send+0x228>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c418:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	695b      	ldr	r3, [r3, #20]
 800c424:	2b00      	cmp	r3, #0
 800c426:	f000 80ae 	beq.w	800c586 <_tx_queue_send+0x272>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c42a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d13c      	bne.n	800c4aa <_tx_queue_send+0x196>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	695b      	ldr	r3, [r3, #20]
 800c434:	1e5a      	subs	r2, r3, #1
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	1c5a      	adds	r2, r3, #1
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  queue_ptr -> tx_queue_write;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c44c:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c454:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c456:	1d13      	adds	r3, r2, #4
 800c458:	667b      	str	r3, [r7, #100]	; 0x64
 800c45a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c45c:	1d19      	adds	r1, r3, #4
 800c45e:	6639      	str	r1, [r7, #96]	; 0x60
 800c460:	6812      	ldr	r2, [r2, #0]
 800c462:	601a      	str	r2, [r3, #0]
 800c464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c466:	2b01      	cmp	r3, #1
 800c468:	d90e      	bls.n	800c488 <_tx_queue_send+0x174>
 800c46a:	e007      	b.n	800c47c <_tx_queue_send+0x168>
 800c46c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c46e:	1d13      	adds	r3, r2, #4
 800c470:	667b      	str	r3, [r7, #100]	; 0x64
 800c472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c474:	1d19      	adds	r1, r3, #4
 800c476:	6639      	str	r1, [r7, #96]	; 0x60
 800c478:	6812      	ldr	r2, [r2, #0]
 800c47a:	601a      	str	r2, [r3, #0]
 800c47c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c47e:	3b01      	subs	r3, #1
 800c480:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1f1      	bne.n	800c46c <_tx_queue_send+0x158>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	69db      	ldr	r3, [r3, #28]
 800c48c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c48e:	429a      	cmp	r2, r3
 800c490:	d102      	bne.n	800c498 <_tx_queue_send+0x184>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	699b      	ldr	r3, [r3, #24]
 800c496:	663b      	str	r3, [r7, #96]	; 0x60
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c49c:	625a      	str	r2, [r3, #36]	; 0x24
 800c49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4a0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a4:	f383 8810 	msr	PRIMASK, r3
}
 800c4a8:	e0db      	b.n	800c662 <_tx_queue_send+0x34e>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ae:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800c4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	643b      	str	r3, [r7, #64]	; 0x40
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d103      	bne.n	800c4c4 <_tx_queue_send+0x1b0>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	629a      	str	r2, [r3, #40]	; 0x28
 800c4c2:	e012      	b.n	800c4ea <_tx_queue_send+0x1d6>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800c4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800c4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4d0:	63bb      	str	r3, [r7, #56]	; 0x38
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4d6:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c4d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4dc:	637b      	str	r3, [r7, #52]	; 0x34
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4e2:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800c4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4e8:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4ee:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c4f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800c4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4fe:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c506:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c508:	1d13      	adds	r3, r2, #4
 800c50a:	667b      	str	r3, [r7, #100]	; 0x64
 800c50c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c50e:	1d19      	adds	r1, r3, #4
 800c510:	6639      	str	r1, [r7, #96]	; 0x60
 800c512:	6812      	ldr	r2, [r2, #0]
 800c514:	601a      	str	r2, [r3, #0]
 800c516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d921      	bls.n	800c560 <_tx_queue_send+0x24c>
 800c51c:	e01a      	b.n	800c554 <_tx_queue_send+0x240>
 800c51e:	bf00      	nop
 800c520:	20001cf8 	.word	0x20001cf8
 800c524:	20001cfc 	.word	0x20001cfc
 800c528:	2000000c 	.word	0x2000000c
 800c52c:	200016dc 	.word	0x200016dc
 800c530:	e0001004 	.word	0xe0001004
 800c534:	20001cf4 	.word	0x20001cf4
 800c538:	20001cf0 	.word	0x20001cf0
 800c53c:	20001ce4 	.word	0x20001ce4
 800c540:	20001d00 	.word	0x20001d00
 800c544:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c546:	1d13      	adds	r3, r2, #4
 800c548:	667b      	str	r3, [r7, #100]	; 0x64
 800c54a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c54c:	1d19      	adds	r1, r3, #4
 800c54e:	6639      	str	r1, [r7, #96]	; 0x60
 800c550:	6812      	ldr	r2, [r2, #0]
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c556:	3b01      	subs	r3, #1
 800c558:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c55a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d1f1      	bne.n	800c544 <_tx_queue_send+0x230>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c562:	2200      	movs	r2, #0
 800c564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c568:	4b40      	ldr	r3, [pc, #256]	; (800c66c <_tx_queue_send+0x358>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	3301      	adds	r3, #1
 800c56e:	4a3f      	ldr	r2, [pc, #252]	; (800c66c <_tx_queue_send+0x358>)
 800c570:	6013      	str	r3, [r2, #0]
 800c572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c574:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c576:	6a3b      	ldr	r3, [r7, #32]
 800c578:	f383 8810 	msr	PRIMASK, r3
}
 800c57c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800c57e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c580:	f000 ff26 	bl	800d3d0 <_tx_thread_system_resume>
 800c584:	e06d      	b.n	800c662 <_tx_queue_send+0x34e>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d062      	beq.n	800c652 <_tx_queue_send+0x33e>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c58c:	4b37      	ldr	r3, [pc, #220]	; (800c66c <_tx_queue_send+0x358>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d008      	beq.n	800c5a6 <_tx_queue_send+0x292>
 800c594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c596:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	f383 8810 	msr	PRIMASK, r3
}
 800c59e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800c5a0:	230b      	movs	r3, #11
 800c5a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5a4:	e05d      	b.n	800c662 <_tx_queue_send+0x34e>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c5a6:	4b32      	ldr	r3, [pc, #200]	; (800c670 <_tx_queue_send+0x35c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800c5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ae:	4a31      	ldr	r2, [pc, #196]	; (800c674 <_tx_queue_send+0x360>)
 800c5b0:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800c5b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800c5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800c5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c5cc:	1c5a      	adds	r2, r3, #1
 800c5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c5d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d109      	bne.n	800c5ee <_tx_queue_send+0x2da>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5de:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5e4:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5ea:	675a      	str	r2, [r3, #116]	; 0x74
 800c5ec:	e011      	b.n	800c612 <_tx_queue_send+0x2fe>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f2:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5f8:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5fe:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c604:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c60a:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c610:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800c612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c614:	1c5a      	adds	r2, r3, #1
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800c61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c61c:	2205      	movs	r2, #5
 800c61e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c622:	2201      	movs	r2, #1
 800c624:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c62c:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <_tx_queue_send+0x358>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	3301      	adds	r3, #1
 800c632:	4a0e      	ldr	r2, [pc, #56]	; (800c66c <_tx_queue_send+0x358>)
 800c634:	6013      	str	r3, [r2, #0]
 800c636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c638:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	f383 8810 	msr	PRIMASK, r3
}
 800c640:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c642:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c644:	f001 f87e 	bl	800d744 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c64a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c64e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c650:	e007      	b.n	800c662 <_tx_queue_send+0x34e>
 800c652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c654:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	f383 8810 	msr	PRIMASK, r3
}
 800c65c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800c65e:	230b      	movs	r3, #11
 800c660:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800c662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800c664:	4618      	mov	r0, r3
 800c666:	3768      	adds	r7, #104	; 0x68
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	20001774 	.word	0x20001774
 800c670:	200016dc 	.word	0x200016dc
 800c674:	0800b94d 	.word	0x0800b94d

0800c678 <_tx_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b092      	sub	sp, #72	; 0x48
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c682:	2300      	movs	r3, #0
 800c684:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c686:	f3ef 8310 	mrs	r3, PRIMASK
 800c68a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c68c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c68e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c690:	b672      	cpsid	i
    return(int_posture);
 800c692:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800c694:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of puts on this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_put_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CEILING_PUT, semaphore_ptr, semaphore_ptr -> tx_semaphore_count, semaphore_ptr -> tx_semaphore_suspended_count, ceiling, TX_TRACE_SEMAPHORE_EVENTS)
 800c696:	4b67      	ldr	r3, [pc, #412]	; (800c834 <_tx_semaphore_ceiling_put+0x1bc>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	637b      	str	r3, [r7, #52]	; 0x34
 800c69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d06d      	beq.n	800c77e <_tx_semaphore_ceiling_put+0x106>
 800c6a2:	4b65      	ldr	r3, [pc, #404]	; (800c838 <_tx_semaphore_ceiling_put+0x1c0>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d067      	beq.n	800c77e <_tx_semaphore_ceiling_put+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c6ae:	f3ef 8305 	mrs	r3, IPSR
 800c6b2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c6b4:	697a      	ldr	r2, [r7, #20]
 800c6b6:	4b61      	ldr	r3, [pc, #388]	; (800c83c <_tx_semaphore_ceiling_put+0x1c4>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	633b      	str	r3, [r7, #48]	; 0x30
 800c6be:	4b60      	ldr	r3, [pc, #384]	; (800c840 <_tx_semaphore_ceiling_put+0x1c8>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d10b      	bne.n	800c6e2 <_tx_semaphore_ceiling_put+0x6a>
 800c6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ce:	643b      	str	r3, [r7, #64]	; 0x40
 800c6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6d4:	041a      	lsls	r2, r3, #16
 800c6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6de:	643b      	str	r3, [r7, #64]	; 0x40
 800c6e0:	e00e      	b.n	800c700 <_tx_semaphore_ceiling_put+0x88>
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c6e8:	d205      	bcs.n	800c6f6 <_tx_semaphore_ceiling_put+0x7e>
 800c6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ec:	643b      	str	r3, [r7, #64]	; 0x40
 800c6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f4:	e004      	b.n	800c700 <_tx_semaphore_ceiling_put+0x88>
 800c6f6:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	643b      	str	r3, [r7, #64]	; 0x40
 800c700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c704:	601a      	str	r2, [r3, #0]
 800c706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c708:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c70a:	605a      	str	r2, [r3, #4]
 800c70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c70e:	2250      	movs	r2, #80	; 0x50
 800c710:	609a      	str	r2, [r3, #8]
 800c712:	4b4c      	ldr	r3, [pc, #304]	; (800c844 <_tx_semaphore_ceiling_put+0x1cc>)
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c718:	60da      	str	r2, [r3, #12]
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c71e:	611a      	str	r2, [r3, #16]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	689a      	ldr	r2, [r3, #8]
 800c724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c726:	615a      	str	r2, [r3, #20]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	691a      	ldr	r2, [r3, #16]
 800c72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c72e:	619a      	str	r2, [r3, #24]
 800c730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c732:	683a      	ldr	r2, [r7, #0]
 800c734:	61da      	str	r2, [r3, #28]
 800c736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c738:	3320      	adds	r3, #32
 800c73a:	637b      	str	r3, [r7, #52]	; 0x34
 800c73c:	4b42      	ldr	r3, [pc, #264]	; (800c848 <_tx_semaphore_ceiling_put+0x1d0>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c742:	429a      	cmp	r2, r3
 800c744:	d314      	bcc.n	800c770 <_tx_semaphore_ceiling_put+0xf8>
 800c746:	4b41      	ldr	r3, [pc, #260]	; (800c84c <_tx_semaphore_ceiling_put+0x1d4>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	637b      	str	r3, [r7, #52]	; 0x34
 800c74c:	4a39      	ldr	r2, [pc, #228]	; (800c834 <_tx_semaphore_ceiling_put+0x1bc>)
 800c74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c750:	6013      	str	r3, [r2, #0]
 800c752:	4b3f      	ldr	r3, [pc, #252]	; (800c850 <_tx_semaphore_ceiling_put+0x1d8>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c758:	621a      	str	r2, [r3, #32]
 800c75a:	4b3e      	ldr	r3, [pc, #248]	; (800c854 <_tx_semaphore_ceiling_put+0x1dc>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d00d      	beq.n	800c77e <_tx_semaphore_ceiling_put+0x106>
 800c762:	4b3c      	ldr	r3, [pc, #240]	; (800c854 <_tx_semaphore_ceiling_put+0x1dc>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a3a      	ldr	r2, [pc, #232]	; (800c850 <_tx_semaphore_ceiling_put+0x1d8>)
 800c768:	6812      	ldr	r2, [r2, #0]
 800c76a:	4610      	mov	r0, r2
 800c76c:	4798      	blx	r3
 800c76e:	e006      	b.n	800c77e <_tx_semaphore_ceiling_put+0x106>
 800c770:	4a30      	ldr	r2, [pc, #192]	; (800c834 <_tx_semaphore_ceiling_put+0x1bc>)
 800c772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c774:	6013      	str	r3, [r2, #0]
 800c776:	4b36      	ldr	r3, [pc, #216]	; (800c850 <_tx_semaphore_ceiling_put+0x1d8>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c77c:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_CEILING_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800c784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c786:	2b00      	cmp	r3, #0
 800c788:	d11b      	bne.n	800c7c2 <_tx_semaphore_ceiling_put+0x14a>
    {

        /* Determine if the ceiling has been exceeded.  */
        if (semaphore_ptr -> tx_semaphore_count >= ceiling)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	683a      	ldr	r2, [r7, #0]
 800c790:	429a      	cmp	r2, r3
 800c792:	d808      	bhi.n	800c7a6 <_tx_semaphore_ceiling_put+0x12e>
 800c794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c796:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	f383 8810 	msr	PRIMASK, r3
}
 800c79e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Return an error.  */
            status =  TX_CEILING_EXCEEDED;
 800c7a0:	2321      	movs	r3, #33	; 0x21
 800c7a2:	647b      	str	r3, [r7, #68]	; 0x44
 800c7a4:	e041      	b.n	800c82a <_tx_semaphore_ceiling_put+0x1b2>
        }
        else
        {

            /* Increment the semaphore count.  */
            semaphore_ptr -> tx_semaphore_count++;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	1c5a      	adds	r2, r3, #1
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	609a      	str	r2, [r3, #8]
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f383 8810 	msr	PRIMASK, r3
}
 800c7ba:	bf00      	nop
                (semaphore_put_notify)(semaphore_ptr);
            }
#endif

            /* Return successful completion status.  */
            status =  TX_SUCCESS;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	647b      	str	r3, [r7, #68]	; 0x44
 800c7c0:	e033      	b.n	800c82a <_tx_semaphore_ceiling_put+0x1b2>
    {

        /* Remove the suspended thread from the list.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	62bb      	str	r3, [r7, #40]	; 0x28

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d103      	bne.n	800c7dc <_tx_semaphore_ceiling_put+0x164>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	60da      	str	r2, [r3, #12]
 800c7da:	e00e      	b.n	800c7fa <_tx_semaphore_ceiling_put+0x182>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800c7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7e0:	627b      	str	r3, [r7, #36]	; 0x24
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7e6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7ec:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f0:	6a3a      	ldr	r2, [r7, #32]
 800c7f2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c7f4:	6a3b      	ldr	r3, [r7, #32]
 800c7f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7f8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7fe:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c802:	2200      	movs	r2, #0
 800c804:	669a      	str	r2, [r3, #104]	; 0x68

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c808:	2200      	movs	r2, #0
 800c80a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800c80e:	4b12      	ldr	r3, [pc, #72]	; (800c858 <_tx_semaphore_ceiling_put+0x1e0>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	3301      	adds	r3, #1
 800c814:	4a10      	ldr	r2, [pc, #64]	; (800c858 <_tx_semaphore_ceiling_put+0x1e0>)
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	f383 8810 	msr	PRIMASK, r3
}
 800c822:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c826:	f000 fdd3 	bl	800d3d0 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(status);
 800c82a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3748      	adds	r7, #72	; 0x48
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}
 800c834:	20001cf8 	.word	0x20001cf8
 800c838:	20001cfc 	.word	0x20001cfc
 800c83c:	2000000c 	.word	0x2000000c
 800c840:	200016dc 	.word	0x200016dc
 800c844:	e0001004 	.word	0xe0001004
 800c848:	20001cf4 	.word	0x20001cf4
 800c84c:	20001cf0 	.word	0x20001cf0
 800c850:	20001ce4 	.word	0x20001ce4
 800c854:	20001d00 	.word	0x20001d00
 800c858:	20001774 	.word	0x20001774

0800c85c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b08e      	sub	sp, #56	; 0x38
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c866:	f3ef 8310 	mrs	r3, PRIMASK
 800c86a:	623b      	str	r3, [r7, #32]
    return(posture);
 800c86c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c86e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c870:	b672      	cpsid	i
    return(int_posture);
 800c872:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800c874:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c87a:	4a33      	ldr	r2, [pc, #204]	; (800c948 <_tx_semaphore_cleanup+0xec>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d158      	bne.n	800c932 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c886:	683a      	ldr	r2, [r7, #0]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d152      	bne.n	800c932 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c890:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800c892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c894:	2b00      	cmp	r3, #0
 800c896:	d04c      	beq.n	800c932 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800c898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a2b      	ldr	r2, [pc, #172]	; (800c94c <_tx_semaphore_cleanup+0xf0>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d147      	bne.n	800c932 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800c8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a4:	691b      	ldr	r3, [r3, #16]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d043      	beq.n	800c932 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800c8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	1e5a      	subs	r2, r3, #1
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b8:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8bc:	691b      	ldr	r3, [r3, #16]
 800c8be:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d103      	bne.n	800c8ce <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	60da      	str	r2, [r3, #12]
 800c8cc:	e013      	b.n	800c8f6 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8d2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8d8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8de:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8e4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d102      	bne.n	800c8f6 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8f4:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8fa:	2b06      	cmp	r3, #6
 800c8fc:	d119      	bne.n	800c932 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	220d      	movs	r2, #13
 800c902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c906:	4b12      	ldr	r3, [pc, #72]	; (800c950 <_tx_semaphore_cleanup+0xf4>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3301      	adds	r3, #1
 800c90c:	4a10      	ldr	r2, [pc, #64]	; (800c950 <_tx_semaphore_cleanup+0xf4>)
 800c90e:	6013      	str	r3, [r2, #0]
 800c910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c912:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	f383 8810 	msr	PRIMASK, r3
}
 800c91a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 fd57 	bl	800d3d0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c922:	f3ef 8310 	mrs	r3, PRIMASK
 800c926:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c928:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c92a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c92c:	b672      	cpsid	i
    return(int_posture);
 800c92e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c930:	637b      	str	r3, [r7, #52]	; 0x34
 800c932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c934:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f383 8810 	msr	PRIMASK, r3
}
 800c93c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c93e:	bf00      	nop
 800c940:	3738      	adds	r7, #56	; 0x38
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	0800c85d 	.word	0x0800c85d
 800c94c:	53454d41 	.word	0x53454d41
 800c950:	20001774 	.word	0x20001774

0800c954 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b092      	sub	sp, #72	; 0x48
 800c958:	af02      	add	r7, sp, #8
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800c960:	221c      	movs	r2, #28
 800c962:	2100      	movs	r1, #0
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f008 fa73 	bl	8014e50 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c976:	f3ef 8310 	mrs	r3, PRIMASK
 800c97a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c97e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c980:	b672      	cpsid	i
    return(int_posture);
 800c982:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800c984:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	4a56      	ldr	r2, [pc, #344]	; (800cae4 <_tx_semaphore_create+0x190>)
 800c98a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800c98c:	4b56      	ldr	r3, [pc, #344]	; (800cae8 <_tx_semaphore_create+0x194>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d109      	bne.n	800c9a8 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800c994:	4a55      	ldr	r2, [pc, #340]	; (800caec <_tx_semaphore_create+0x198>)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	619a      	str	r2, [r3, #24]
 800c9a6:	e011      	b.n	800c9cc <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800c9a8:	4b50      	ldr	r3, [pc, #320]	; (800caec <_tx_semaphore_create+0x198>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	617b      	str	r3, [r7, #20]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	699b      	ldr	r3, [r3, #24]
 800c9b2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800c9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9c4:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800c9c6:	697a      	ldr	r2, [r7, #20]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800c9cc:	4b46      	ldr	r3, [pc, #280]	; (800cae8 <_tx_semaphore_create+0x194>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	4a45      	ldr	r2, [pc, #276]	; (800cae8 <_tx_semaphore_create+0x194>)
 800c9d4:	6013      	str	r3, [r2, #0]

    /* Optional semaphore create extended processing.  */
    TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, name_ptr, initial_count, 0)
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	68f9      	ldr	r1, [r7, #12]
 800c9e0:	2004      	movs	r0, #4
 800c9e2:	f001 fc17 	bl	800e214 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CREATE, semaphore_ptr, initial_count, TX_POINTER_TO_ULONG_CONVERT(&next_semaphore), 0, TX_TRACE_SEMAPHORE_EVENTS)
 800c9e6:	4b42      	ldr	r3, [pc, #264]	; (800caf0 <_tx_semaphore_create+0x19c>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d06c      	beq.n	800cacc <_tx_semaphore_create+0x178>
 800c9f2:	4b40      	ldr	r3, [pc, #256]	; (800caf4 <_tx_semaphore_create+0x1a0>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d066      	beq.n	800cacc <_tx_semaphore_create+0x178>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c9fe:	f3ef 8305 	mrs	r3, IPSR
 800ca02:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800ca04:	69fa      	ldr	r2, [r7, #28]
 800ca06:	4b3c      	ldr	r3, [pc, #240]	; (800caf8 <_tx_semaphore_create+0x1a4>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca0e:	4b3b      	ldr	r3, [pc, #236]	; (800cafc <_tx_semaphore_create+0x1a8>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d10b      	bne.n	800ca32 <_tx_semaphore_create+0xde>
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca24:	041a      	lsls	r2, r3, #16
 800ca26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca30:	e00e      	b.n	800ca50 <_tx_semaphore_create+0xfc>
 800ca32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca34:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ca38:	d205      	bcs.n	800ca46 <_tx_semaphore_create+0xf2>
 800ca3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca42:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca44:	e004      	b.n	800ca50 <_tx_semaphore_create+0xfc>
 800ca46:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800ca4a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca54:	601a      	str	r2, [r3, #0]
 800ca56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca5a:	605a      	str	r2, [r3, #4]
 800ca5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5e:	2251      	movs	r2, #81	; 0x51
 800ca60:	609a      	str	r2, [r3, #8]
 800ca62:	4b27      	ldr	r3, [pc, #156]	; (800cb00 <_tx_semaphore_create+0x1ac>)
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca68:	60da      	str	r2, [r3, #12]
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6e:	611a      	str	r2, [r3, #16]
 800ca70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	615a      	str	r2, [r3, #20]
 800ca76:	f107 0214 	add.w	r2, r7, #20
 800ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7c:	619a      	str	r2, [r3, #24]
 800ca7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca80:	2200      	movs	r2, #0
 800ca82:	61da      	str	r2, [r3, #28]
 800ca84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca86:	3320      	adds	r3, #32
 800ca88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca8a:	4b1e      	ldr	r3, [pc, #120]	; (800cb04 <_tx_semaphore_create+0x1b0>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d314      	bcc.n	800cabe <_tx_semaphore_create+0x16a>
 800ca94:	4b1c      	ldr	r3, [pc, #112]	; (800cb08 <_tx_semaphore_create+0x1b4>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca9a:	4a15      	ldr	r2, [pc, #84]	; (800caf0 <_tx_semaphore_create+0x19c>)
 800ca9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9e:	6013      	str	r3, [r2, #0]
 800caa0:	4b1a      	ldr	r3, [pc, #104]	; (800cb0c <_tx_semaphore_create+0x1b8>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caa6:	621a      	str	r2, [r3, #32]
 800caa8:	4b19      	ldr	r3, [pc, #100]	; (800cb10 <_tx_semaphore_create+0x1bc>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00d      	beq.n	800cacc <_tx_semaphore_create+0x178>
 800cab0:	4b17      	ldr	r3, [pc, #92]	; (800cb10 <_tx_semaphore_create+0x1bc>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a15      	ldr	r2, [pc, #84]	; (800cb0c <_tx_semaphore_create+0x1b8>)
 800cab6:	6812      	ldr	r2, [r2, #0]
 800cab8:	4610      	mov	r0, r2
 800caba:	4798      	blx	r3
 800cabc:	e006      	b.n	800cacc <_tx_semaphore_create+0x178>
 800cabe:	4a0c      	ldr	r2, [pc, #48]	; (800caf0 <_tx_semaphore_create+0x19c>)
 800cac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac2:	6013      	str	r3, [r2, #0]
 800cac4:	4b11      	ldr	r3, [pc, #68]	; (800cb0c <_tx_semaphore_create+0x1b8>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caca:	621a      	str	r2, [r3, #32]
 800cacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cace:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	f383 8810 	msr	PRIMASK, r3
}
 800cad6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800cad8:	2300      	movs	r3, #0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3740      	adds	r7, #64	; 0x40
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	53454d41 	.word	0x53454d41
 800cae8:	200016a8 	.word	0x200016a8
 800caec:	200016a4 	.word	0x200016a4
 800caf0:	20001cf8 	.word	0x20001cf8
 800caf4:	20001cfc 	.word	0x20001cfc
 800caf8:	2000000c 	.word	0x2000000c
 800cafc:	200016dc 	.word	0x200016dc
 800cb00:	e0001004 	.word	0xe0001004
 800cb04:	20001cf4 	.word	0x20001cf4
 800cb08:	20001cf0 	.word	0x20001cf0
 800cb0c:	20001ce4 	.word	0x20001ce4
 800cb10:	20001d00 	.word	0x20001d00

0800cb14 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b092      	sub	sp, #72	; 0x48
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb22:	f3ef 8310 	mrs	r3, PRIMASK
 800cb26:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800cb2a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb2c:	b672      	cpsid	i
    return(int_posture);
 800cb2e:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800cb30:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of attempts to get this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_get_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_GET, semaphore_ptr, wait_option, semaphore_ptr -> tx_semaphore_count, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_SEMAPHORE_EVENTS)
 800cb32:	4b78      	ldr	r3, [pc, #480]	; (800cd14 <_tx_semaphore_get+0x200>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	637b      	str	r3, [r7, #52]	; 0x34
 800cb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d06d      	beq.n	800cc1a <_tx_semaphore_get+0x106>
 800cb3e:	4b76      	ldr	r3, [pc, #472]	; (800cd18 <_tx_semaphore_get+0x204>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d067      	beq.n	800cc1a <_tx_semaphore_get+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cb4a:	f3ef 8305 	mrs	r3, IPSR
 800cb4e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800cb50:	69fa      	ldr	r2, [r7, #28]
 800cb52:	4b72      	ldr	r3, [pc, #456]	; (800cd1c <_tx_semaphore_get+0x208>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	633b      	str	r3, [r7, #48]	; 0x30
 800cb5a:	4b71      	ldr	r3, [pc, #452]	; (800cd20 <_tx_semaphore_get+0x20c>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d10b      	bne.n	800cb7e <_tx_semaphore_get+0x6a>
 800cb66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6a:	643b      	str	r3, [r7, #64]	; 0x40
 800cb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb70:	041a      	lsls	r2, r3, #16
 800cb72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb74:	4313      	orrs	r3, r2
 800cb76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb7a:	643b      	str	r3, [r7, #64]	; 0x40
 800cb7c:	e00e      	b.n	800cb9c <_tx_semaphore_get+0x88>
 800cb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb80:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cb84:	d205      	bcs.n	800cb92 <_tx_semaphore_get+0x7e>
 800cb86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb88:	643b      	str	r3, [r7, #64]	; 0x40
 800cb8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb90:	e004      	b.n	800cb9c <_tx_semaphore_get+0x88>
 800cb92:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cb96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb98:	2300      	movs	r3, #0
 800cb9a:	643b      	str	r3, [r7, #64]	; 0x40
 800cb9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba0:	601a      	str	r2, [r3, #0]
 800cba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cba6:	605a      	str	r2, [r3, #4]
 800cba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbaa:	2253      	movs	r2, #83	; 0x53
 800cbac:	609a      	str	r2, [r3, #8]
 800cbae:	4b5d      	ldr	r3, [pc, #372]	; (800cd24 <_tx_semaphore_get+0x210>)
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb4:	60da      	str	r2, [r3, #12]
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbba:	611a      	str	r2, [r3, #16]
 800cbbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbbe:	683a      	ldr	r2, [r7, #0]
 800cbc0:	615a      	str	r2, [r3, #20]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	689a      	ldr	r2, [r3, #8]
 800cbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc8:	619a      	str	r2, [r3, #24]
 800cbca:	f107 0208 	add.w	r2, r7, #8
 800cbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd0:	61da      	str	r2, [r3, #28]
 800cbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd4:	3320      	adds	r3, #32
 800cbd6:	637b      	str	r3, [r7, #52]	; 0x34
 800cbd8:	4b53      	ldr	r3, [pc, #332]	; (800cd28 <_tx_semaphore_get+0x214>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d314      	bcc.n	800cc0c <_tx_semaphore_get+0xf8>
 800cbe2:	4b52      	ldr	r3, [pc, #328]	; (800cd2c <_tx_semaphore_get+0x218>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	637b      	str	r3, [r7, #52]	; 0x34
 800cbe8:	4a4a      	ldr	r2, [pc, #296]	; (800cd14 <_tx_semaphore_get+0x200>)
 800cbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbec:	6013      	str	r3, [r2, #0]
 800cbee:	4b50      	ldr	r3, [pc, #320]	; (800cd30 <_tx_semaphore_get+0x21c>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbf4:	621a      	str	r2, [r3, #32]
 800cbf6:	4b4f      	ldr	r3, [pc, #316]	; (800cd34 <_tx_semaphore_get+0x220>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00d      	beq.n	800cc1a <_tx_semaphore_get+0x106>
 800cbfe:	4b4d      	ldr	r3, [pc, #308]	; (800cd34 <_tx_semaphore_get+0x220>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a4b      	ldr	r2, [pc, #300]	; (800cd30 <_tx_semaphore_get+0x21c>)
 800cc04:	6812      	ldr	r2, [r2, #0]
 800cc06:	4610      	mov	r0, r2
 800cc08:	4798      	blx	r3
 800cc0a:	e006      	b.n	800cc1a <_tx_semaphore_get+0x106>
 800cc0c:	4a41      	ldr	r2, [pc, #260]	; (800cd14 <_tx_semaphore_get+0x200>)
 800cc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc10:	6013      	str	r3, [r2, #0]
 800cc12:	4b47      	ldr	r3, [pc, #284]	; (800cd30 <_tx_semaphore_get+0x21c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc18:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00a      	beq.n	800cc38 <_tx_semaphore_get+0x124>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	1e5a      	subs	r2, r3, #1
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	609a      	str	r2, [r3, #8]
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	f383 8810 	msr	PRIMASK, r3
}
 800cc36:	e068      	b.n	800cd0a <_tx_semaphore_get+0x1f6>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d05d      	beq.n	800ccfa <_tx_semaphore_get+0x1e6>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800cc3e:	4b3e      	ldr	r3, [pc, #248]	; (800cd38 <_tx_semaphore_get+0x224>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d008      	beq.n	800cc58 <_tx_semaphore_get+0x144>
 800cc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc48:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	f383 8810 	msr	PRIMASK, r3
}
 800cc50:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800cc52:	230d      	movs	r3, #13
 800cc54:	647b      	str	r3, [r7, #68]	; 0x44
 800cc56:	e058      	b.n	800cd0a <_tx_semaphore_get+0x1f6>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800cc58:	4b31      	ldr	r3, [pc, #196]	; (800cd20 <_tx_semaphore_get+0x20c>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	60bb      	str	r3, [r7, #8]

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	4a36      	ldr	r2, [pc, #216]	; (800cd3c <_tx_semaphore_get+0x228>)
 800cc62:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800cc70:	3201      	adds	r2, #1
 800cc72:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d109      	bne.n	800cc92 <_tx_semaphore_get+0x17e>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800cc7e:	68ba      	ldr	r2, [r7, #8]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	68ba      	ldr	r2, [r7, #8]
 800cc8e:	675a      	str	r2, [r3, #116]	; 0x74
 800cc90:	e011      	b.n	800ccb6 <_tx_semaphore_get+0x1a2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc9c:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800cc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cca2:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cca8:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ccaa:	68ba      	ldr	r2, [r7, #8]
 800ccac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccae:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ccb0:	68ba      	ldr	r2, [r7, #8]
 800ccb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb4:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	1c5a      	adds	r2, r3, #1
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	2206      	movs	r2, #6
 800ccc4:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	683a      	ldr	r2, [r7, #0]
 800ccd0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800ccd2:	4b19      	ldr	r3, [pc, #100]	; (800cd38 <_tx_semaphore_get+0x224>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	4a17      	ldr	r2, [pc, #92]	; (800cd38 <_tx_semaphore_get+0x224>)
 800ccda:	6013      	str	r3, [r2, #0]
 800ccdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccde:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	f383 8810 	msr	PRIMASK, r3
}
 800cce6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 fd2a 	bl	800d744 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccf6:	647b      	str	r3, [r7, #68]	; 0x44
 800ccf8:	e007      	b.n	800cd0a <_tx_semaphore_get+0x1f6>
 800ccfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f383 8810 	msr	PRIMASK, r3
}
 800cd04:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800cd06:	230d      	movs	r3, #13
 800cd08:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800cd0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3748      	adds	r7, #72	; 0x48
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	20001cf8 	.word	0x20001cf8
 800cd18:	20001cfc 	.word	0x20001cfc
 800cd1c:	2000000c 	.word	0x2000000c
 800cd20:	200016dc 	.word	0x200016dc
 800cd24:	e0001004 	.word	0xe0001004
 800cd28:	20001cf4 	.word	0x20001cf4
 800cd2c:	20001cf0 	.word	0x20001cf0
 800cd30:	20001ce4 	.word	0x20001ce4
 800cd34:	20001d00 	.word	0x20001d00
 800cd38:	20001774 	.word	0x20001774
 800cd3c:	0800c85d 	.word	0x0800c85d

0800cd40 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b09a      	sub	sp, #104	; 0x68
 800cd44:	af02      	add	r7, sp, #8
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
 800cd4c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800cd4e:	2300      	movs	r3, #0
 800cd50:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800cd52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd54:	21ef      	movs	r1, #239	; 0xef
 800cd56:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cd58:	f008 f87a 	bl	8014e50 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800cd5c:	22b0      	movs	r2, #176	; 0xb0
 800cd5e:	2100      	movs	r1, #0
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f008 f875 	bl	8014e50 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	68ba      	ldr	r2, [r7, #8]
 800cd6a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	683a      	ldr	r2, [r7, #0]
 800cd76:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd7c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd82:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cd88:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cd8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cd96:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cd9c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2220      	movs	r2, #32
 800cda2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800cda6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cda8:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800cdaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdac:	3b01      	subs	r3, #1
 800cdae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cdb0:	4413      	add	r3, r2
 800cdb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cdb8:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800cdba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cdbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d007      	beq.n	800cdd2 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800cdd0:	e006      	b.n	800cde0 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cdd6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cddc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2203      	movs	r2, #3
 800cde4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	4a86      	ldr	r2, [pc, #536]	; (800d004 <_tx_thread_create+0x2c4>)
 800cdea:	655a      	str	r2, [r3, #84]	; 0x54
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800cdf2:	4985      	ldr	r1, [pc, #532]	; (800d008 <_tx_thread_create+0x2c8>)
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f7f3 fae9 	bl	80003cc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdfa:	f3ef 8310 	mrs	r3, PRIMASK
 800cdfe:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800ce00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800ce02:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce04:	b672      	cpsid	i
    return(int_posture);
 800ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800ce08:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	4a7f      	ldr	r2, [pc, #508]	; (800d00c <_tx_thread_create+0x2cc>)
 800ce0e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800ce10:	4b7f      	ldr	r3, [pc, #508]	; (800d010 <_tx_thread_create+0x2d0>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d10b      	bne.n	800ce30 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800ce18:	4a7e      	ldr	r2, [pc, #504]	; (800d014 <_tx_thread_create+0x2d4>)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	68fa      	ldr	r2, [r7, #12]
 800ce22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800ce2e:	e016      	b.n	800ce5e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800ce30:	4b78      	ldr	r3, [pc, #480]	; (800d014 <_tx_thread_create+0x2d4>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 800ce36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce3c:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800ce3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800ce46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800ce5e:	4b6c      	ldr	r3, [pc, #432]	; (800d010 <_tx_thread_create+0x2d0>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3301      	adds	r3, #1
 800ce64:	4a6a      	ldr	r2, [pc, #424]	; (800d010 <_tx_thread_create+0x2d0>)
 800ce66:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 800ce68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce6c:	9300      	str	r3, [sp, #0]
 800ce6e:	4613      	mov	r3, r2
 800ce70:	68ba      	ldr	r2, [r7, #8]
 800ce72:	68f9      	ldr	r1, [r7, #12]
 800ce74:	2001      	movs	r0, #1
 800ce76:	f001 f9cd 	bl	800e214 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 800ce7a:	4b67      	ldr	r3, [pc, #412]	; (800d018 <_tx_thread_create+0x2d8>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d06b      	beq.n	800cf5e <_tx_thread_create+0x21e>
 800ce86:	4b65      	ldr	r3, [pc, #404]	; (800d01c <_tx_thread_create+0x2dc>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d065      	beq.n	800cf5e <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce92:	f3ef 8305 	mrs	r3, IPSR
 800ce96:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800ce98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce9a:	4b61      	ldr	r3, [pc, #388]	; (800d020 <_tx_thread_create+0x2e0>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	63bb      	str	r3, [r7, #56]	; 0x38
 800cea2:	4b60      	ldr	r3, [pc, #384]	; (800d024 <_tx_thread_create+0x2e4>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	653b      	str	r3, [r7, #80]	; 0x50
 800cea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d10b      	bne.n	800cec6 <_tx_thread_create+0x186>
 800ceae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb2:	657b      	str	r3, [r7, #84]	; 0x54
 800ceb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb8:	041a      	lsls	r2, r3, #16
 800ceba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cebc:	4313      	orrs	r3, r2
 800cebe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cec2:	657b      	str	r3, [r7, #84]	; 0x54
 800cec4:	e00e      	b.n	800cee4 <_tx_thread_create+0x1a4>
 800cec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cecc:	d205      	bcs.n	800ceda <_tx_thread_create+0x19a>
 800cece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ced0:	657b      	str	r3, [r7, #84]	; 0x54
 800ced2:	f04f 33ff 	mov.w	r3, #4294967295
 800ced6:	653b      	str	r3, [r7, #80]	; 0x50
 800ced8:	e004      	b.n	800cee4 <_tx_thread_create+0x1a4>
 800ceda:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cede:	653b      	str	r3, [r7, #80]	; 0x50
 800cee0:	2300      	movs	r3, #0
 800cee2:	657b      	str	r3, [r7, #84]	; 0x54
 800cee4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cee8:	601a      	str	r2, [r3, #0]
 800ceea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ceee:	605a      	str	r2, [r3, #4]
 800cef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cef2:	2264      	movs	r2, #100	; 0x64
 800cef4:	609a      	str	r2, [r3, #8]
 800cef6:	4b4c      	ldr	r3, [pc, #304]	; (800d028 <_tx_thread_create+0x2e8>)
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cefc:	60da      	str	r2, [r3, #12]
 800cefe:	68fa      	ldr	r2, [r7, #12]
 800cf00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf02:	611a      	str	r2, [r3, #16]
 800cf04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf06:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cf08:	615a      	str	r2, [r3, #20]
 800cf0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf0e:	619a      	str	r2, [r3, #24]
 800cf10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf14:	61da      	str	r2, [r3, #28]
 800cf16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf18:	3320      	adds	r3, #32
 800cf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf1c:	4b43      	ldr	r3, [pc, #268]	; (800d02c <_tx_thread_create+0x2ec>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d314      	bcc.n	800cf50 <_tx_thread_create+0x210>
 800cf26:	4b42      	ldr	r3, [pc, #264]	; (800d030 <_tx_thread_create+0x2f0>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf2c:	4a3a      	ldr	r2, [pc, #232]	; (800d018 <_tx_thread_create+0x2d8>)
 800cf2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf30:	6013      	str	r3, [r2, #0]
 800cf32:	4b40      	ldr	r3, [pc, #256]	; (800d034 <_tx_thread_create+0x2f4>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf38:	621a      	str	r2, [r3, #32]
 800cf3a:	4b3f      	ldr	r3, [pc, #252]	; (800d038 <_tx_thread_create+0x2f8>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d00d      	beq.n	800cf5e <_tx_thread_create+0x21e>
 800cf42:	4b3d      	ldr	r3, [pc, #244]	; (800d038 <_tx_thread_create+0x2f8>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a3b      	ldr	r2, [pc, #236]	; (800d034 <_tx_thread_create+0x2f4>)
 800cf48:	6812      	ldr	r2, [r2, #0]
 800cf4a:	4610      	mov	r0, r2
 800cf4c:	4798      	blx	r3
 800cf4e:	e006      	b.n	800cf5e <_tx_thread_create+0x21e>
 800cf50:	4a31      	ldr	r2, [pc, #196]	; (800d018 <_tx_thread_create+0x2d8>)
 800cf52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf54:	6013      	str	r3, [r2, #0]
 800cf56:	4b37      	ldr	r3, [pc, #220]	; (800d034 <_tx_thread_create+0x2f4>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf5c:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cf5e:	4b37      	ldr	r3, [pc, #220]	; (800d03c <_tx_thread_create+0x2fc>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	3301      	adds	r3, #1
 800cf64:	4a35      	ldr	r2, [pc, #212]	; (800d03c <_tx_thread_create+0x2fc>)
 800cf66:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800cf68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d129      	bne.n	800cfc2 <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf6e:	f3ef 8305 	mrs	r3, IPSR
 800cf72:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800cf74:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800cf76:	4b2a      	ldr	r3, [pc, #168]	; (800d020 <_tx_thread_create+0x2e0>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cf80:	d30d      	bcc.n	800cf9e <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800cf82:	4b2f      	ldr	r3, [pc, #188]	; (800d040 <_tx_thread_create+0x300>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800cf88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d009      	beq.n	800cfa2 <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800cf8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf92:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800cf94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf9a:	63da      	str	r2, [r3, #60]	; 0x3c
 800cf9c:	e001      	b.n	800cfa2 <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfa4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa8:	f383 8810 	msr	PRIMASK, r3
}
 800cfac:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	f000 fa0e 	bl	800d3d0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800cfb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d01e      	beq.n	800cff8 <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800cfba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cfbe:	63da      	str	r2, [r3, #60]	; 0x3c
 800cfc0:	e01a      	b.n	800cff8 <_tx_thread_create+0x2b8>
 800cfc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfc4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	f383 8810 	msr	PRIMASK, r3
}
 800cfcc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cfce:	f3ef 8310 	mrs	r3, PRIMASK
 800cfd2:	61fb      	str	r3, [r7, #28]
    return(posture);
 800cfd4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800cfd6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cfd8:	b672      	cpsid	i
    return(int_posture);
 800cfda:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800cfdc:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800cfde:	4b17      	ldr	r3, [pc, #92]	; (800d03c <_tx_thread_create+0x2fc>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	4a15      	ldr	r2, [pc, #84]	; (800d03c <_tx_thread_create+0x2fc>)
 800cfe6:	6013      	str	r3, [r2, #0]
 800cfe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfec:	6a3b      	ldr	r3, [r7, #32]
 800cfee:	f383 8810 	msr	PRIMASK, r3
}
 800cff2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cff4:	f000 f9b2 	bl	800d35c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3760      	adds	r7, #96	; 0x60
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	0800dce5 	.word	0x0800dce5
 800d008:	0800d0c1 	.word	0x0800d0c1
 800d00c:	54485244 	.word	0x54485244
 800d010:	200016e8 	.word	0x200016e8
 800d014:	200016e4 	.word	0x200016e4
 800d018:	20001cf8 	.word	0x20001cf8
 800d01c:	20001cfc 	.word	0x20001cfc
 800d020:	2000000c 	.word	0x2000000c
 800d024:	200016dc 	.word	0x200016dc
 800d028:	e0001004 	.word	0xe0001004
 800d02c:	20001cf4 	.word	0x20001cf4
 800d030:	20001cf0 	.word	0x20001cf0
 800d034:	20001ce4 	.word	0x20001ce4
 800d038:	20001d00 	.word	0x20001d00
 800d03c:	20001774 	.word	0x20001774
 800d040:	200016e0 	.word	0x200016e0

0800d044 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800d048:	4b13      	ldr	r3, [pc, #76]	; (800d098 <_tx_thread_initialize+0x54>)
 800d04a:	2200      	movs	r2, #0
 800d04c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800d04e:	4b13      	ldr	r3, [pc, #76]	; (800d09c <_tx_thread_initialize+0x58>)
 800d050:	2200      	movs	r2, #0
 800d052:	601a      	str	r2, [r3, #0]
 800d054:	4b12      	ldr	r3, [pc, #72]	; (800d0a0 <_tx_thread_initialize+0x5c>)
 800d056:	2200      	movs	r2, #0
 800d058:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d05a:	4b12      	ldr	r3, [pc, #72]	; (800d0a4 <_tx_thread_initialize+0x60>)
 800d05c:	2220      	movs	r2, #32
 800d05e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800d060:	2280      	movs	r2, #128	; 0x80
 800d062:	2100      	movs	r1, #0
 800d064:	4810      	ldr	r0, [pc, #64]	; (800d0a8 <_tx_thread_initialize+0x64>)
 800d066:	f007 fef3 	bl	8014e50 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800d06a:	4b10      	ldr	r3, [pc, #64]	; (800d0ac <_tx_thread_initialize+0x68>)
 800d06c:	2200      	movs	r2, #0
 800d06e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800d070:	4b0f      	ldr	r3, [pc, #60]	; (800d0b0 <_tx_thread_initialize+0x6c>)
 800d072:	2200      	movs	r2, #0
 800d074:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800d076:	4b0f      	ldr	r3, [pc, #60]	; (800d0b4 <_tx_thread_initialize+0x70>)
 800d078:	2200      	movs	r2, #0
 800d07a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800d07c:	4b0e      	ldr	r3, [pc, #56]	; (800d0b8 <_tx_thread_initialize+0x74>)
 800d07e:	2200      	movs	r2, #0
 800d080:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 800d082:	4b0e      	ldr	r3, [pc, #56]	; (800d0bc <_tx_thread_initialize+0x78>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 800d08a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 800d08e:	4a0b      	ldr	r2, [pc, #44]	; (800d0bc <_tx_thread_initialize+0x78>)
 800d090:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800d092:	bf00      	nop
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	200016dc 	.word	0x200016dc
 800d09c:	200016e0 	.word	0x200016e0
 800d0a0:	200016ec 	.word	0x200016ec
 800d0a4:	200016f0 	.word	0x200016f0
 800d0a8:	200016f4 	.word	0x200016f4
 800d0ac:	200016e4 	.word	0x200016e4
 800d0b0:	200016e8 	.word	0x200016e8
 800d0b4:	20001774 	.word	0x20001774
 800d0b8:	20001778 	.word	0x20001778
 800d0bc:	2000177c 	.word	0x2000177c

0800d0c0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b088      	sub	sp, #32
 800d0c4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d0c6:	4b21      	ldr	r3, [pc, #132]	; (800d14c <_tx_thread_shell_entry+0x8c>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800d0cc:	69fb      	ldr	r3, [r7, #28]
 800d0ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0d0:	69fa      	ldr	r2, [r7, #28]
 800d0d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d0d4:	4610      	mov	r0, r2
 800d0d6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800d0d8:	4b1d      	ldr	r3, [pc, #116]	; (800d150 <_tx_thread_shell_entry+0x90>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d003      	beq.n	800d0e8 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800d0e0:	4b1b      	ldr	r3, [pc, #108]	; (800d150 <_tx_thread_shell_entry+0x90>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	69f8      	ldr	r0, [r7, #28]
 800d0e6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0e8:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ec:	607b      	str	r3, [r7, #4]
    return(posture);
 800d0ee:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800d0f0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d0f2:	b672      	cpsid	i
    return(int_posture);
 800d0f4:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800d0f6:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	2201      	movs	r2, #1
 800d102:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	2200      	movs	r2, #0
 800d108:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d10a:	4b12      	ldr	r3, [pc, #72]	; (800d154 <_tx_thread_shell_entry+0x94>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	3301      	adds	r3, #1
 800d110:	4a10      	ldr	r2, [pc, #64]	; (800d154 <_tx_thread_shell_entry+0x94>)
 800d112:	6013      	str	r3, [r2, #0]
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	f383 8810 	msr	PRIMASK, r3
}
 800d11e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800d120:	f3ef 8314 	mrs	r3, CONTROL
 800d124:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800d126:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800d128:	617b      	str	r3, [r7, #20]
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	f023 0304 	bic.w	r3, r3, #4
 800d130:	617b      	str	r3, [r7, #20]
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	f383 8814 	msr	CONTROL, r3
}
 800d13c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800d13e:	69f8      	ldr	r0, [r7, #28]
 800d140:	f000 fb00 	bl	800d744 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800d144:	bf00      	nop
 800d146:	3720      	adds	r7, #32
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	200016dc 	.word	0x200016dc
 800d150:	20001778 	.word	0x20001778
 800d154:	20001774 	.word	0x20001774

0800d158 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b094      	sub	sp, #80	; 0x50
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d160:	f3ef 8310 	mrs	r3, PRIMASK
 800d164:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800d166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800d168:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800d16a:	b672      	cpsid	i
    return(int_posture);
 800d16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d16e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d170:	4b6f      	ldr	r3, [pc, #444]	; (800d330 <_tx_thread_sleep+0x1d8>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800d176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d108      	bne.n	800d18e <_tx_thread_sleep+0x36>
 800d17c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d17e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d182:	f383 8810 	msr	PRIMASK, r3
}
 800d186:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d188:	2313      	movs	r3, #19
 800d18a:	60fb      	str	r3, [r7, #12]
 800d18c:	e0ca      	b.n	800d324 <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d18e:	f3ef 8305 	mrs	r3, IPSR
 800d192:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800d194:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d196:	4b67      	ldr	r3, [pc, #412]	; (800d334 <_tx_thread_sleep+0x1dc>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4313      	orrs	r3, r2
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d008      	beq.n	800d1b2 <_tx_thread_sleep+0x5a>
 800d1a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1a2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	f383 8810 	msr	PRIMASK, r3
}
 800d1aa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d1ac:	2313      	movs	r3, #19
 800d1ae:	60fb      	str	r3, [r7, #12]
 800d1b0:	e0b8      	b.n	800d324 <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800d1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b4:	4a60      	ldr	r2, [pc, #384]	; (800d338 <_tx_thread_sleep+0x1e0>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d108      	bne.n	800d1cc <_tx_thread_sleep+0x74>
 800d1ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1bc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1be:	6a3b      	ldr	r3, [r7, #32]
 800d1c0:	f383 8810 	msr	PRIMASK, r3
}
 800d1c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d1c6:	2313      	movs	r3, #19
 800d1c8:	60fb      	str	r3, [r7, #12]
 800d1ca:	e0ab      	b.n	800d324 <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d108      	bne.n	800d1e4 <_tx_thread_sleep+0x8c>
 800d1d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1d4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	f383 8810 	msr	PRIMASK, r3
}
 800d1dc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	60fb      	str	r3, [r7, #12]
 800d1e2:	e09f      	b.n	800d324 <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800d1e4:	4b55      	ldr	r3, [pc, #340]	; (800d33c <_tx_thread_sleep+0x1e4>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d008      	beq.n	800d1fe <_tx_thread_sleep+0xa6>
 800d1ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1ee:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	f383 8810 	msr	PRIMASK, r3
}
 800d1f6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800d1f8:	2313      	movs	r3, #19
 800d1fa:	60fb      	str	r3, [r7, #12]
 800d1fc:	e092      	b.n	800d324 <_tx_thread_sleep+0x1cc>
        }
        else
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 800d1fe:	4b50      	ldr	r3, [pc, #320]	; (800d340 <_tx_thread_sleep+0x1e8>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d206:	2b00      	cmp	r3, #0
 800d208:	d06d      	beq.n	800d2e6 <_tx_thread_sleep+0x18e>
 800d20a:	4b4e      	ldr	r3, [pc, #312]	; (800d344 <_tx_thread_sleep+0x1ec>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d212:	2b00      	cmp	r3, #0
 800d214:	d067      	beq.n	800d2e6 <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d216:	f3ef 8305 	mrs	r3, IPSR
 800d21a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d21c:	697a      	ldr	r2, [r7, #20]
 800d21e:	4b45      	ldr	r3, [pc, #276]	; (800d334 <_tx_thread_sleep+0x1dc>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4313      	orrs	r3, r2
 800d224:	63bb      	str	r3, [r7, #56]	; 0x38
 800d226:	4b42      	ldr	r3, [pc, #264]	; (800d330 <_tx_thread_sleep+0x1d8>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10b      	bne.n	800d24a <_tx_thread_sleep+0xf2>
 800d232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d236:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d23a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d23c:	041a      	lsls	r2, r3, #16
 800d23e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d240:	4313      	orrs	r3, r2
 800d242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d246:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d248:	e00e      	b.n	800d268 <_tx_thread_sleep+0x110>
 800d24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d250:	d205      	bcs.n	800d25e <_tx_thread_sleep+0x106>
 800d252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d254:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d256:	f04f 33ff 	mov.w	r3, #4294967295
 800d25a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d25c:	e004      	b.n	800d268 <_tx_thread_sleep+0x110>
 800d25e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d262:	64bb      	str	r3, [r7, #72]	; 0x48
 800d264:	2300      	movs	r3, #0
 800d266:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d26a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d270:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d272:	605a      	str	r2, [r3, #4]
 800d274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d276:	2270      	movs	r2, #112	; 0x70
 800d278:	609a      	str	r2, [r3, #8]
 800d27a:	4b33      	ldr	r3, [pc, #204]	; (800d348 <_tx_thread_sleep+0x1f0>)
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d280:	60da      	str	r2, [r3, #12]
 800d282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	611a      	str	r2, [r3, #16]
 800d288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d28a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d28e:	615a      	str	r2, [r3, #20]
 800d290:	f107 020c 	add.w	r2, r7, #12
 800d294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d296:	619a      	str	r2, [r3, #24]
 800d298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d29a:	2200      	movs	r2, #0
 800d29c:	61da      	str	r2, [r3, #28]
 800d29e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2a0:	3320      	adds	r3, #32
 800d2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2a4:	4b29      	ldr	r3, [pc, #164]	; (800d34c <_tx_thread_sleep+0x1f4>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d314      	bcc.n	800d2d8 <_tx_thread_sleep+0x180>
 800d2ae:	4b28      	ldr	r3, [pc, #160]	; (800d350 <_tx_thread_sleep+0x1f8>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2b4:	4a22      	ldr	r2, [pc, #136]	; (800d340 <_tx_thread_sleep+0x1e8>)
 800d2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b8:	6013      	str	r3, [r2, #0]
 800d2ba:	4b26      	ldr	r3, [pc, #152]	; (800d354 <_tx_thread_sleep+0x1fc>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2c0:	621a      	str	r2, [r3, #32]
 800d2c2:	4b25      	ldr	r3, [pc, #148]	; (800d358 <_tx_thread_sleep+0x200>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00d      	beq.n	800d2e6 <_tx_thread_sleep+0x18e>
 800d2ca:	4b23      	ldr	r3, [pc, #140]	; (800d358 <_tx_thread_sleep+0x200>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a21      	ldr	r2, [pc, #132]	; (800d354 <_tx_thread_sleep+0x1fc>)
 800d2d0:	6812      	ldr	r2, [r2, #0]
 800d2d2:	4610      	mov	r0, r2
 800d2d4:	4798      	blx	r3
 800d2d6:	e006      	b.n	800d2e6 <_tx_thread_sleep+0x18e>
 800d2d8:	4a19      	ldr	r2, [pc, #100]	; (800d340 <_tx_thread_sleep+0x1e8>)
 800d2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2dc:	6013      	str	r3, [r2, #0]
 800d2de:	4b1d      	ldr	r3, [pc, #116]	; (800d354 <_tx_thread_sleep+0x1fc>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2e4:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800d2e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2e8:	2204      	movs	r2, #4
 800d2ea:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d2ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800d2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d300:	4b0e      	ldr	r3, [pc, #56]	; (800d33c <_tx_thread_sleep+0x1e4>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	3301      	adds	r3, #1
 800d306:	4a0d      	ldr	r2, [pc, #52]	; (800d33c <_tx_thread_sleep+0x1e4>)
 800d308:	6013      	str	r3, [r2, #0]
 800d30a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d30c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	f383 8810 	msr	PRIMASK, r3
}
 800d314:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d316:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d318:	f000 fa14 	bl	800d744 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800d31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d31e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d322:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Return completion status.  */
    return(status);
 800d324:	68fb      	ldr	r3, [r7, #12]
}
 800d326:	4618      	mov	r0, r3
 800d328:	3750      	adds	r7, #80	; 0x50
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	200016dc 	.word	0x200016dc
 800d334:	2000000c 	.word	0x2000000c
 800d338:	20001824 	.word	0x20001824
 800d33c:	20001774 	.word	0x20001774
 800d340:	20001cf8 	.word	0x20001cf8
 800d344:	20001cfc 	.word	0x20001cfc
 800d348:	e0001004 	.word	0xe0001004
 800d34c:	20001cf4 	.word	0x20001cf4
 800d350:	20001cf0 	.word	0x20001cf0
 800d354:	20001ce4 	.word	0x20001ce4
 800d358:	20001d00 	.word	0x20001d00

0800d35c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b089      	sub	sp, #36	; 0x24
 800d360:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d362:	4b17      	ldr	r3, [pc, #92]	; (800d3c0 <_tx_thread_system_preempt_check+0x64>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d121      	bne.n	800d3b2 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d36e:	4b15      	ldr	r3, [pc, #84]	; (800d3c4 <_tx_thread_system_preempt_check+0x68>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800d374:	4b14      	ldr	r3, [pc, #80]	; (800d3c8 <_tx_thread_system_preempt_check+0x6c>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800d37a:	69ba      	ldr	r2, [r7, #24]
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	429a      	cmp	r2, r3
 800d380:	d017      	beq.n	800d3b2 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d382:	4b12      	ldr	r3, [pc, #72]	; (800d3cc <_tx_thread_system_preempt_check+0x70>)
 800d384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d388:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d38a:	f3ef 8305 	mrs	r3, IPSR
 800d38e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d390:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800d392:	2b00      	cmp	r3, #0
 800d394:	d10c      	bne.n	800d3b0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d396:	f3ef 8310 	mrs	r3, PRIMASK
 800d39a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d39c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800d39e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d3a0:	b662      	cpsie	i
}
 800d3a2:	bf00      	nop
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f383 8810 	msr	PRIMASK, r3
}
 800d3ae:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800d3b0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800d3b2:	bf00      	nop
 800d3b4:	3724      	adds	r7, #36	; 0x24
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	20001774 	.word	0x20001774
 800d3c4:	200016dc 	.word	0x200016dc
 800d3c8:	200016e0 	.word	0x200016e0
 800d3cc:	e000ed04 	.word	0xe000ed04

0800d3d0 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b09e      	sub	sp, #120	; 0x78
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d3d8:	2300      	movs	r3, #0
 800d3da:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d3dc:	f3ef 8310 	mrs	r3, PRIMASK
 800d3e0:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800d3e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800d3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d3e6:	b672      	cpsid	i
    return(int_posture);
 800d3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d3ea:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d005      	beq.n	800d400 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	334c      	adds	r3, #76	; 0x4c
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f000 fdaf 	bl	800df5c <_tx_timer_system_deactivate>
 800d3fe:	e002      	b.n	800d406 <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 800d406:	4b8b      	ldr	r3, [pc, #556]	; (800d634 <_tx_thread_system_resume+0x264>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d40c:	4b89      	ldr	r3, [pc, #548]	; (800d634 <_tx_thread_system_resume+0x264>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	663b      	str	r3, [r7, #96]	; 0x60
 800d412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d414:	2b00      	cmp	r3, #0
 800d416:	d06f      	beq.n	800d4f8 <_tx_thread_system_resume+0x128>
 800d418:	4b87      	ldr	r3, [pc, #540]	; (800d638 <_tx_thread_system_resume+0x268>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	2b00      	cmp	r3, #0
 800d422:	d069      	beq.n	800d4f8 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d424:	f3ef 8305 	mrs	r3, IPSR
 800d428:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 800d42a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d42c:	4b83      	ldr	r3, [pc, #524]	; (800d63c <_tx_thread_system_resume+0x26c>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4313      	orrs	r3, r2
 800d432:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d434:	4b82      	ldr	r3, [pc, #520]	; (800d640 <_tx_thread_system_resume+0x270>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d43a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10b      	bne.n	800d458 <_tx_thread_system_resume+0x88>
 800d440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d444:	673b      	str	r3, [r7, #112]	; 0x70
 800d446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d44a:	041a      	lsls	r2, r3, #16
 800d44c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d44e:	4313      	orrs	r3, r2
 800d450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d454:	673b      	str	r3, [r7, #112]	; 0x70
 800d456:	e00e      	b.n	800d476 <_tx_thread_system_resume+0xa6>
 800d458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d45a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d45e:	d205      	bcs.n	800d46c <_tx_thread_system_resume+0x9c>
 800d460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d462:	673b      	str	r3, [r7, #112]	; 0x70
 800d464:	f04f 33ff 	mov.w	r3, #4294967295
 800d468:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d46a:	e004      	b.n	800d476 <_tx_thread_system_resume+0xa6>
 800d46c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d470:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d472:	2300      	movs	r3, #0
 800d474:	673b      	str	r3, [r7, #112]	; 0x70
 800d476:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d47a:	601a      	str	r2, [r3, #0]
 800d47c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d47e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d480:	605a      	str	r2, [r3, #4]
 800d482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d484:	2201      	movs	r2, #1
 800d486:	609a      	str	r2, [r3, #8]
 800d488:	4b6e      	ldr	r3, [pc, #440]	; (800d644 <_tx_thread_system_resume+0x274>)
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d48e:	60da      	str	r2, [r3, #12]
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d494:	611a      	str	r2, [r3, #16]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d49a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d49c:	615a      	str	r2, [r3, #20]
 800d49e:	f107 020c 	add.w	r2, r7, #12
 800d4a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4a4:	619a      	str	r2, [r3, #24]
 800d4a6:	4b68      	ldr	r3, [pc, #416]	; (800d648 <_tx_thread_system_resume+0x278>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4ae:	61da      	str	r2, [r3, #28]
 800d4b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4b2:	3320      	adds	r3, #32
 800d4b4:	663b      	str	r3, [r7, #96]	; 0x60
 800d4b6:	4b65      	ldr	r3, [pc, #404]	; (800d64c <_tx_thread_system_resume+0x27c>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d314      	bcc.n	800d4ea <_tx_thread_system_resume+0x11a>
 800d4c0:	4b63      	ldr	r3, [pc, #396]	; (800d650 <_tx_thread_system_resume+0x280>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	663b      	str	r3, [r7, #96]	; 0x60
 800d4c6:	4a5b      	ldr	r2, [pc, #364]	; (800d634 <_tx_thread_system_resume+0x264>)
 800d4c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4ca:	6013      	str	r3, [r2, #0]
 800d4cc:	4b61      	ldr	r3, [pc, #388]	; (800d654 <_tx_thread_system_resume+0x284>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4d2:	621a      	str	r2, [r3, #32]
 800d4d4:	4b60      	ldr	r3, [pc, #384]	; (800d658 <_tx_thread_system_resume+0x288>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00d      	beq.n	800d4f8 <_tx_thread_system_resume+0x128>
 800d4dc:	4b5e      	ldr	r3, [pc, #376]	; (800d658 <_tx_thread_system_resume+0x288>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a5c      	ldr	r2, [pc, #368]	; (800d654 <_tx_thread_system_resume+0x284>)
 800d4e2:	6812      	ldr	r2, [r2, #0]
 800d4e4:	4610      	mov	r0, r2
 800d4e6:	4798      	blx	r3
 800d4e8:	e006      	b.n	800d4f8 <_tx_thread_system_resume+0x128>
 800d4ea:	4a52      	ldr	r2, [pc, #328]	; (800d634 <_tx_thread_system_resume+0x264>)
 800d4ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4ee:	6013      	str	r3, [r2, #0]
 800d4f0:	4b58      	ldr	r3, [pc, #352]	; (800d654 <_tx_thread_system_resume+0x284>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4f6:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 800d4f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d002      	beq.n	800d504 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d4fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d504:	4b55      	ldr	r3, [pc, #340]	; (800d65c <_tx_thread_system_resume+0x28c>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	3b01      	subs	r3, #1
 800d50a:	4a54      	ldr	r2, [pc, #336]	; (800d65c <_tx_thread_system_resume+0x28c>)
 800d50c:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d512:	2b00      	cmp	r3, #0
 800d514:	f040 80b3 	bne.w	800d67e <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f000 80c7 	beq.w	800d6b0 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d526:	2b00      	cmp	r3, #0
 800d528:	f040 80a2 	bne.w	800d670 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d536:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800d538:	4a49      	ldr	r2, [pc, #292]	; (800d660 <_tx_thread_system_resume+0x290>)
 800d53a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d540:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 800d542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d544:	2b00      	cmp	r3, #0
 800d546:	d164      	bne.n	800d612 <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800d548:	4945      	ldr	r1, [pc, #276]	; (800d660 <_tx_thread_system_resume+0x290>)
 800d54a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d55e:	2201      	movs	r2, #1
 800d560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d562:	fa02 f303 	lsl.w	r3, r2, r3
 800d566:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d568:	4b3e      	ldr	r3, [pc, #248]	; (800d664 <_tx_thread_system_resume+0x294>)
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d56e:	4313      	orrs	r3, r2
 800d570:	4a3c      	ldr	r2, [pc, #240]	; (800d664 <_tx_thread_system_resume+0x294>)
 800d572:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d574:	4b3c      	ldr	r3, [pc, #240]	; (800d668 <_tx_thread_system_resume+0x298>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d57a:	429a      	cmp	r2, r3
 800d57c:	f080 8098 	bcs.w	800d6b0 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d580:	4a39      	ldr	r2, [pc, #228]	; (800d668 <_tx_thread_system_resume+0x298>)
 800d582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d584:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d586:	4b30      	ldr	r3, [pc, #192]	; (800d648 <_tx_thread_system_resume+0x278>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d103      	bne.n	800d59a <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d592:	4a2d      	ldr	r2, [pc, #180]	; (800d648 <_tx_thread_system_resume+0x278>)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6013      	str	r3, [r2, #0]
 800d598:	e08a      	b.n	800d6b0 <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d59e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	f080 8085 	bcs.w	800d6b0 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d5a6:	4a28      	ldr	r2, [pc, #160]	; (800d648 <_tx_thread_system_resume+0x278>)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 800d5ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d009      	beq.n	800d5c6 <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d5b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d104      	bne.n	800d5c6 <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d5bc:	4b22      	ldr	r3, [pc, #136]	; (800d648 <_tx_thread_system_resume+0x278>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5c4:	61da      	str	r2, [r3, #28]
 800d5c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5c8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5cc:	f383 8810 	msr	PRIMASK, r3
}
 800d5d0:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d5d2:	4b22      	ldr	r3, [pc, #136]	; (800d65c <_tx_thread_system_resume+0x28c>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 800d5d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	f040 80a1 	bne.w	800d722 <_tx_thread_system_resume+0x352>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d5e0:	4b22      	ldr	r3, [pc, #136]	; (800d66c <_tx_thread_system_resume+0x29c>)
 800d5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5e6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d5e8:	f3ef 8305 	mrs	r3, IPSR
 800d5ec:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800d5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (_tx_ipsr_get() == 0)
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f040 8098 	bne.w	800d726 <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d5f6:	f3ef 8310 	mrs	r3, PRIMASK
 800d5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 800d5fe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d600:	b662      	cpsie	i
}
 800d602:	bf00      	nop
 800d604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d606:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60a:	f383 8810 	msr	PRIMASK, r3
}
 800d60e:	bf00      	nop
}
 800d610:	e089      	b.n	800d726 <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800d612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d616:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800d618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800d61e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d628:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d62e:	621a      	str	r2, [r3, #32]
 800d630:	e03e      	b.n	800d6b0 <_tx_thread_system_resume+0x2e0>
 800d632:	bf00      	nop
 800d634:	20001cf8 	.word	0x20001cf8
 800d638:	20001cfc 	.word	0x20001cfc
 800d63c:	2000000c 	.word	0x2000000c
 800d640:	200016dc 	.word	0x200016dc
 800d644:	e0001004 	.word	0xe0001004
 800d648:	200016e0 	.word	0x200016e0
 800d64c:	20001cf4 	.word	0x20001cf4
 800d650:	20001cf0 	.word	0x20001cf0
 800d654:	20001ce4 	.word	0x20001ce4
 800d658:	20001d00 	.word	0x20001d00
 800d65c:	20001774 	.word	0x20001774
 800d660:	200016f4 	.word	0x200016f4
 800d664:	200016ec 	.word	0x200016ec
 800d668:	200016f0 	.word	0x200016f0
 800d66c:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2203      	movs	r2, #3
 800d67a:	631a      	str	r2, [r3, #48]	; 0x30
 800d67c:	e018      	b.n	800d6b0 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d682:	2b01      	cmp	r3, #1
 800d684:	d014      	beq.n	800d6b0 <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68a:	2b02      	cmp	r3, #2
 800d68c:	d010      	beq.n	800d6b0 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d692:	2b00      	cmp	r3, #0
 800d694:	d106      	bne.n	800d6a4 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	631a      	str	r2, [r3, #48]	; 0x30
 800d6a2:	e005      	b.n	800d6b0 <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2203      	movs	r2, #3
 800d6ae:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 800d6b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d009      	beq.n	800d6ca <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d6b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d104      	bne.n	800d6ca <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d6c0:	4b1c      	ldr	r3, [pc, #112]	; (800d734 <_tx_thread_system_resume+0x364>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6c8:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d6ca:	4b1b      	ldr	r3, [pc, #108]	; (800d738 <_tx_thread_system_resume+0x368>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	647b      	str	r3, [r7, #68]	; 0x44
 800d6d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6d2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6d4:	6a3b      	ldr	r3, [r7, #32]
 800d6d6:	f383 8810 	msr	PRIMASK, r3
}
 800d6da:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d6dc:	4b15      	ldr	r3, [pc, #84]	; (800d734 <_tx_thread_system_resume+0x364>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d022      	beq.n	800d72c <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d6e6:	4b15      	ldr	r3, [pc, #84]	; (800d73c <_tx_thread_system_resume+0x36c>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 800d6ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d11c      	bne.n	800d72c <_tx_thread_system_resume+0x35c>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d6f2:	4b13      	ldr	r3, [pc, #76]	; (800d740 <_tx_thread_system_resume+0x370>)
 800d6f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6f8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d6fa:	f3ef 8305 	mrs	r3, IPSR
 800d6fe:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d700:	69fb      	ldr	r3, [r7, #28]
    if (_tx_ipsr_get() == 0)
 800d702:	2b00      	cmp	r3, #0
 800d704:	d111      	bne.n	800d72a <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d706:	f3ef 8310 	mrs	r3, PRIMASK
 800d70a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d70c:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 800d70e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d710:	b662      	cpsie	i
}
 800d712:	bf00      	nop
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	f383 8810 	msr	PRIMASK, r3
}
 800d71e:	bf00      	nop
}
 800d720:	e003      	b.n	800d72a <_tx_thread_system_resume+0x35a>
                                return;
 800d722:	bf00      	nop
 800d724:	e002      	b.n	800d72c <_tx_thread_system_resume+0x35c>
 800d726:	bf00      	nop
 800d728:	e000      	b.n	800d72c <_tx_thread_system_resume+0x35c>
 800d72a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800d72c:	3778      	adds	r7, #120	; 0x78
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	200016e0 	.word	0x200016e0
 800d738:	200016dc 	.word	0x200016dc
 800d73c:	20001774 	.word	0x20001774
 800d740:	e000ed04 	.word	0xe000ed04

0800d744 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b0a4      	sub	sp, #144	; 0x90
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d74c:	2300      	movs	r3, #0
 800d74e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d752:	4b98      	ldr	r3, [pc, #608]	; (800d9b4 <_tx_thread_system_suspend+0x270>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d75a:	f3ef 8310 	mrs	r3, PRIMASK
 800d75e:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 800d760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 800d762:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d764:	b672      	cpsid	i
    return(int_posture);
 800d766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d768:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d770:	429a      	cmp	r2, r3
 800d772:	d112      	bne.n	800d79a <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d778:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800d77a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d008      	beq.n	800d792 <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800d780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d786:	d004      	beq.n	800d792 <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	334c      	adds	r3, #76	; 0x4c
 800d78c:	4618      	mov	r0, r3
 800d78e:	f000 fb83 	bl	800de98 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	69db      	ldr	r3, [r3, #28]
 800d796:	4a88      	ldr	r2, [pc, #544]	; (800d9b8 <_tx_thread_system_suspend+0x274>)
 800d798:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d79a:	4b88      	ldr	r3, [pc, #544]	; (800d9bc <_tx_thread_system_suspend+0x278>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	3b01      	subs	r3, #1
 800d7a0:	4a86      	ldr	r2, [pc, #536]	; (800d9bc <_tx_thread_system_suspend+0x278>)
 800d7a2:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	f040 817d 	bne.w	800daa8 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 800d7ae:	4b84      	ldr	r3, [pc, #528]	; (800d9c0 <_tx_thread_system_suspend+0x27c>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d7b4:	4b82      	ldr	r3, [pc, #520]	; (800d9c0 <_tx_thread_system_suspend+0x27c>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	673b      	str	r3, [r7, #112]	; 0x70
 800d7ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d07c      	beq.n	800d8ba <_tx_thread_system_suspend+0x176>
 800d7c0:	4b80      	ldr	r3, [pc, #512]	; (800d9c4 <_tx_thread_system_suspend+0x280>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d076      	beq.n	800d8ba <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d7cc:	f3ef 8305 	mrs	r3, IPSR
 800d7d0:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800d7d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7d4:	4b7c      	ldr	r3, [pc, #496]	; (800d9c8 <_tx_thread_system_suspend+0x284>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d7dc:	4b75      	ldr	r3, [pc, #468]	; (800d9b4 <_tx_thread_system_suspend+0x270>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d110      	bne.n	800d80c <_tx_thread_system_suspend+0xc8>
 800d7ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d7f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7fa:	041a      	lsls	r2, r3, #16
 800d7fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d800:	4313      	orrs	r3, r2
 800d802:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d806:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d80a:	e013      	b.n	800d834 <_tx_thread_system_suspend+0xf0>
 800d80c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d80e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d812:	d208      	bcs.n	800d826 <_tx_thread_system_suspend+0xe2>
 800d814:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d81c:	f04f 33ff 	mov.w	r3, #4294967295
 800d820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d824:	e006      	b.n	800d834 <_tx_thread_system_suspend+0xf0>
 800d826:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d82a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d82e:	2300      	movs	r3, #0
 800d830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d834:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d83a:	601a      	str	r2, [r3, #0]
 800d83c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d83e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d842:	605a      	str	r2, [r3, #4]
 800d844:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d846:	2202      	movs	r2, #2
 800d848:	609a      	str	r2, [r3, #8]
 800d84a:	4b60      	ldr	r3, [pc, #384]	; (800d9cc <_tx_thread_system_suspend+0x288>)
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d850:	60da      	str	r2, [r3, #12]
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d856:	611a      	str	r2, [r3, #16]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d85c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d85e:	615a      	str	r2, [r3, #20]
 800d860:	f107 0208 	add.w	r2, r7, #8
 800d864:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d866:	619a      	str	r2, [r3, #24]
 800d868:	4b59      	ldr	r3, [pc, #356]	; (800d9d0 <_tx_thread_system_suspend+0x28c>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	461a      	mov	r2, r3
 800d86e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d870:	61da      	str	r2, [r3, #28]
 800d872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d874:	3320      	adds	r3, #32
 800d876:	673b      	str	r3, [r7, #112]	; 0x70
 800d878:	4b56      	ldr	r3, [pc, #344]	; (800d9d4 <_tx_thread_system_suspend+0x290>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d87e:	429a      	cmp	r2, r3
 800d880:	d314      	bcc.n	800d8ac <_tx_thread_system_suspend+0x168>
 800d882:	4b55      	ldr	r3, [pc, #340]	; (800d9d8 <_tx_thread_system_suspend+0x294>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	673b      	str	r3, [r7, #112]	; 0x70
 800d888:	4a4d      	ldr	r2, [pc, #308]	; (800d9c0 <_tx_thread_system_suspend+0x27c>)
 800d88a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d88c:	6013      	str	r3, [r2, #0]
 800d88e:	4b53      	ldr	r3, [pc, #332]	; (800d9dc <_tx_thread_system_suspend+0x298>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d894:	621a      	str	r2, [r3, #32]
 800d896:	4b52      	ldr	r3, [pc, #328]	; (800d9e0 <_tx_thread_system_suspend+0x29c>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d00d      	beq.n	800d8ba <_tx_thread_system_suspend+0x176>
 800d89e:	4b50      	ldr	r3, [pc, #320]	; (800d9e0 <_tx_thread_system_suspend+0x29c>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a4e      	ldr	r2, [pc, #312]	; (800d9dc <_tx_thread_system_suspend+0x298>)
 800d8a4:	6812      	ldr	r2, [r2, #0]
 800d8a6:	4610      	mov	r0, r2
 800d8a8:	4798      	blx	r3
 800d8aa:	e006      	b.n	800d8ba <_tx_thread_system_suspend+0x176>
 800d8ac:	4a44      	ldr	r2, [pc, #272]	; (800d9c0 <_tx_thread_system_suspend+0x27c>)
 800d8ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8b0:	6013      	str	r3, [r2, #0]
 800d8b2:	4b4a      	ldr	r3, [pc, #296]	; (800d9dc <_tx_thread_system_suspend+0x298>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d8b8:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 800d8ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d003      	beq.n	800d8c8 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d8c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d2:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6a1b      	ldr	r3, [r3, #32]
 800d8d8:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800d8da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d016      	beq.n	800d910 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e6:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800d8e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d8ec:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800d8ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d8f2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	4a3b      	ldr	r2, [pc, #236]	; (800d9e4 <_tx_thread_system_suspend+0x2a0>)
 800d8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8fc:	687a      	ldr	r2, [r7, #4]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	f040 8085 	bne.w	800da0e <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	4937      	ldr	r1, [pc, #220]	; (800d9e4 <_tx_thread_system_suspend+0x2a0>)
 800d908:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d90a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d90e:	e07e      	b.n	800da0e <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	4a34      	ldr	r2, [pc, #208]	; (800d9e4 <_tx_thread_system_suspend+0x2a0>)
 800d914:	2100      	movs	r1, #0
 800d916:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	2201      	movs	r2, #1
 800d91e:	fa02 f303 	lsl.w	r3, r2, r3
 800d922:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800d924:	4b30      	ldr	r3, [pc, #192]	; (800d9e8 <_tx_thread_system_suspend+0x2a4>)
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d92a:	43db      	mvns	r3, r3
 800d92c:	4013      	ands	r3, r2
 800d92e:	4a2e      	ldr	r2, [pc, #184]	; (800d9e8 <_tx_thread_system_suspend+0x2a4>)
 800d930:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800d932:	2300      	movs	r3, #0
 800d934:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800d936:	4b2c      	ldr	r3, [pc, #176]	; (800d9e8 <_tx_thread_system_suspend+0x2a4>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800d93c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d158      	bne.n	800d9f4 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d942:	4b2a      	ldr	r3, [pc, #168]	; (800d9ec <_tx_thread_system_suspend+0x2a8>)
 800d944:	2220      	movs	r2, #32
 800d946:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800d948:	4b21      	ldr	r3, [pc, #132]	; (800d9d0 <_tx_thread_system_suspend+0x28c>)
 800d94a:	2200      	movs	r2, #0
 800d94c:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 800d94e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d950:	2b00      	cmp	r3, #0
 800d952:	d008      	beq.n	800d966 <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d102      	bne.n	800d966 <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 800d960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d962:	2200      	movs	r2, #0
 800d964:	61da      	str	r2, [r3, #28]
 800d966:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d968:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d96a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d96c:	f383 8810 	msr	PRIMASK, r3
}
 800d970:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d972:	4b12      	ldr	r3, [pc, #72]	; (800d9bc <_tx_thread_system_suspend+0x278>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 800d978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	f040 80bf 	bne.w	800dafe <_tx_thread_system_suspend+0x3ba>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d980:	4b1b      	ldr	r3, [pc, #108]	; (800d9f0 <_tx_thread_system_suspend+0x2ac>)
 800d982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d986:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d988:	f3ef 8305 	mrs	r3, IPSR
 800d98c:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800d98e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10c      	bne.n	800d9ae <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d994:	f3ef 8310 	mrs	r3, PRIMASK
 800d998:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800d99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800d99c:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d99e:	b662      	cpsie	i
}
 800d9a0:	bf00      	nop
 800d9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9a8:	f383 8810 	msr	PRIMASK, r3
}
 800d9ac:	bf00      	nop
}
 800d9ae:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800d9b0:	e0a5      	b.n	800dafe <_tx_thread_system_suspend+0x3ba>
 800d9b2:	bf00      	nop
 800d9b4:	200016dc 	.word	0x200016dc
 800d9b8:	20001ce0 	.word	0x20001ce0
 800d9bc:	20001774 	.word	0x20001774
 800d9c0:	20001cf8 	.word	0x20001cf8
 800d9c4:	20001cfc 	.word	0x20001cfc
 800d9c8:	2000000c 	.word	0x2000000c
 800d9cc:	e0001004 	.word	0xe0001004
 800d9d0:	200016e0 	.word	0x200016e0
 800d9d4:	20001cf4 	.word	0x20001cf4
 800d9d8:	20001cf0 	.word	0x20001cf0
 800d9dc:	20001ce4 	.word	0x20001ce4
 800d9e0:	20001d00 	.word	0x20001d00
 800d9e4:	200016f4 	.word	0x200016f4
 800d9e8:	200016ec 	.word	0x200016ec
 800d9ec:	200016f0 	.word	0x200016f0
 800d9f0:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800d9f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9f6:	fa93 f3a3 	rbit	r3, r3
 800d9fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9fe:	fab3 f383 	clz	r3, r3
 800da02:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800da04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da08:	4413      	add	r3, r2
 800da0a:	4a41      	ldr	r2, [pc, #260]	; (800db10 <_tx_thread_system_suspend+0x3cc>)
 800da0c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800da0e:	4b41      	ldr	r3, [pc, #260]	; (800db14 <_tx_thread_system_suspend+0x3d0>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	429a      	cmp	r2, r3
 800da16:	d139      	bne.n	800da8c <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800da18:	4b3d      	ldr	r3, [pc, #244]	; (800db10 <_tx_thread_system_suspend+0x3cc>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a3e      	ldr	r2, [pc, #248]	; (800db18 <_tx_thread_system_suspend+0x3d4>)
 800da1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da22:	4a3c      	ldr	r2, [pc, #240]	; (800db14 <_tx_thread_system_suspend+0x3d0>)
 800da24:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 800da26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00a      	beq.n	800da42 <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800da2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800da34:	429a      	cmp	r2, r3
 800da36:	d104      	bne.n	800da42 <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800da38:	4b36      	ldr	r3, [pc, #216]	; (800db14 <_tx_thread_system_suspend+0x3d0>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	461a      	mov	r2, r3
 800da3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da40:	61da      	str	r2, [r3, #28]
 800da42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da44:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	f383 8810 	msr	PRIMASK, r3
}
 800da4c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800da4e:	4b33      	ldr	r3, [pc, #204]	; (800db1c <_tx_thread_system_suspend+0x3d8>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 800da54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da56:	2b00      	cmp	r3, #0
 800da58:	d153      	bne.n	800db02 <_tx_thread_system_suspend+0x3be>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800da5a:	4b31      	ldr	r3, [pc, #196]	; (800db20 <_tx_thread_system_suspend+0x3dc>)
 800da5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da60:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800da62:	f3ef 8305 	mrs	r3, IPSR
 800da66:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800da68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d10c      	bne.n	800da88 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da6e:	f3ef 8310 	mrs	r3, PRIMASK
 800da72:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800da74:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800da76:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800da78:	b662      	cpsie	i
}
 800da7a:	bf00      	nop
 800da7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	f383 8810 	msr	PRIMASK, r3
}
 800da86:	bf00      	nop
}
 800da88:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800da8a:	e03a      	b.n	800db02 <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 800da8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d00a      	beq.n	800daa8 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800da92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d104      	bne.n	800daa8 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800da9e:	4b1d      	ldr	r3, [pc, #116]	; (800db14 <_tx_thread_system_suspend+0x3d0>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	461a      	mov	r2, r3
 800daa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800daa6:	61da      	str	r2, [r3, #28]
 800daa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800daaa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	f383 8810 	msr	PRIMASK, r3
}
 800dab2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800dab4:	4b17      	ldr	r3, [pc, #92]	; (800db14 <_tx_thread_system_suspend+0x3d0>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d022      	beq.n	800db06 <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dac0:	4b16      	ldr	r3, [pc, #88]	; (800db1c <_tx_thread_system_suspend+0x3d8>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 800dac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d11c      	bne.n	800db06 <_tx_thread_system_suspend+0x3c2>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800dacc:	4b14      	ldr	r3, [pc, #80]	; (800db20 <_tx_thread_system_suspend+0x3dc>)
 800dace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dad2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dad4:	f3ef 8305 	mrs	r3, IPSR
 800dad8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800dada:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10c      	bne.n	800dafa <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dae0:	f3ef 8310 	mrs	r3, PRIMASK
 800dae4:	617b      	str	r3, [r7, #20]
    return(posture);
 800dae6:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800dae8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800daea:	b662      	cpsie	i
}
 800daec:	bf00      	nop
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f383 8810 	msr	PRIMASK, r3
}
 800daf8:	bf00      	nop
}
 800dafa:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800dafc:	e003      	b.n	800db06 <_tx_thread_system_suspend+0x3c2>
                return;
 800dafe:	bf00      	nop
 800db00:	e002      	b.n	800db08 <_tx_thread_system_suspend+0x3c4>
            return;
 800db02:	bf00      	nop
 800db04:	e000      	b.n	800db08 <_tx_thread_system_suspend+0x3c4>
    return;
 800db06:	bf00      	nop
}
 800db08:	3790      	adds	r7, #144	; 0x90
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	200016f0 	.word	0x200016f0
 800db14:	200016e0 	.word	0x200016e0
 800db18:	200016f4 	.word	0x200016f4
 800db1c:	20001774 	.word	0x20001774
 800db20:	e000ed04 	.word	0xe000ed04

0800db24 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b08e      	sub	sp, #56	; 0x38
 800db28:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800db2a:	4b5f      	ldr	r3, [pc, #380]	; (800dca8 <_tx_thread_time_slice+0x184>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db30:	f3ef 8310 	mrs	r3, PRIMASK
 800db34:	61bb      	str	r3, [r7, #24]
    return(posture);
 800db36:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800db38:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800db3a:	b672      	cpsid	i
    return(int_posture);
 800db3c:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800db3e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800db40:	4b5a      	ldr	r3, [pc, #360]	; (800dcac <_tx_thread_time_slice+0x188>)
 800db42:	2200      	movs	r2, #0
 800db44:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d024      	beq.n	800db96 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db50:	2b00      	cmp	r3, #0
 800db52:	d120      	bne.n	800db96 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	69d2      	ldr	r2, [r2, #28]
 800db5a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	699b      	ldr	r3, [r3, #24]
 800db60:	4a53      	ldr	r2, [pc, #332]	; (800dcb0 <_tx_thread_time_slice+0x18c>)
 800db62:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a1a      	ldr	r2, [r3, #32]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d013      	beq.n	800db96 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db76:	429a      	cmp	r2, r3
 800db78:	d10d      	bne.n	800db96 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db80:	6a12      	ldr	r2, [r2, #32]
 800db82:	494c      	ldr	r1, [pc, #304]	; (800dcb4 <_tx_thread_time_slice+0x190>)
 800db84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800db88:	4b4b      	ldr	r3, [pc, #300]	; (800dcb8 <_tx_thread_time_slice+0x194>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a49      	ldr	r2, [pc, #292]	; (800dcb4 <_tx_thread_time_slice+0x190>)
 800db8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db92:	4a4a      	ldr	r2, [pc, #296]	; (800dcbc <_tx_thread_time_slice+0x198>)
 800db94:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800db96:	f3ef 8305 	mrs	r3, IPSR
 800db9a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800db9c:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 800db9e:	4b48      	ldr	r3, [pc, #288]	; (800dcc0 <_tx_thread_time_slice+0x19c>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4313      	orrs	r3, r2
 800dba4:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 800dba6:	4b47      	ldr	r3, [pc, #284]	; (800dcc4 <_tx_thread_time_slice+0x1a0>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 800dbac:	4b46      	ldr	r3, [pc, #280]	; (800dcc8 <_tx_thread_time_slice+0x1a4>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	623b      	str	r3, [r7, #32]
 800dbb2:	6a3b      	ldr	r3, [r7, #32]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d06d      	beq.n	800dc94 <_tx_thread_time_slice+0x170>
 800dbb8:	4b44      	ldr	r3, [pc, #272]	; (800dccc <_tx_thread_time_slice+0x1a8>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f003 0301 	and.w	r3, r3, #1
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d067      	beq.n	800dc94 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dbc4:	f3ef 8305 	mrs	r3, IPSR
 800dbc8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	4b3c      	ldr	r3, [pc, #240]	; (800dcc0 <_tx_thread_time_slice+0x19c>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	61fb      	str	r3, [r7, #28]
 800dbd4:	4b34      	ldr	r3, [pc, #208]	; (800dca8 <_tx_thread_time_slice+0x184>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	633b      	str	r3, [r7, #48]	; 0x30
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d10b      	bne.n	800dbf8 <_tx_thread_time_slice+0xd4>
 800dbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe4:	637b      	str	r3, [r7, #52]	; 0x34
 800dbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbea:	041a      	lsls	r2, r3, #16
 800dbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dbf4:	637b      	str	r3, [r7, #52]	; 0x34
 800dbf6:	e00e      	b.n	800dc16 <_tx_thread_time_slice+0xf2>
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800dbfe:	d205      	bcs.n	800dc0c <_tx_thread_time_slice+0xe8>
 800dc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc02:	637b      	str	r3, [r7, #52]	; 0x34
 800dc04:	f04f 33ff 	mov.w	r3, #4294967295
 800dc08:	633b      	str	r3, [r7, #48]	; 0x30
 800dc0a:	e004      	b.n	800dc16 <_tx_thread_time_slice+0xf2>
 800dc0c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800dc10:	633b      	str	r3, [r7, #48]	; 0x30
 800dc12:	2300      	movs	r3, #0
 800dc14:	637b      	str	r3, [r7, #52]	; 0x34
 800dc16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc18:	6a3b      	ldr	r3, [r7, #32]
 800dc1a:	601a      	str	r2, [r3, #0]
 800dc1c:	6a3b      	ldr	r3, [r7, #32]
 800dc1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc20:	605a      	str	r2, [r3, #4]
 800dc22:	6a3b      	ldr	r3, [r7, #32]
 800dc24:	2205      	movs	r2, #5
 800dc26:	609a      	str	r2, [r3, #8]
 800dc28:	4b29      	ldr	r3, [pc, #164]	; (800dcd0 <_tx_thread_time_slice+0x1ac>)
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	6a3b      	ldr	r3, [r7, #32]
 800dc2e:	60da      	str	r2, [r3, #12]
 800dc30:	4b22      	ldr	r3, [pc, #136]	; (800dcbc <_tx_thread_time_slice+0x198>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	461a      	mov	r2, r3
 800dc36:	6a3b      	ldr	r3, [r7, #32]
 800dc38:	611a      	str	r2, [r3, #16]
 800dc3a:	6a3b      	ldr	r3, [r7, #32]
 800dc3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc3e:	615a      	str	r2, [r3, #20]
 800dc40:	6a3b      	ldr	r3, [r7, #32]
 800dc42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc44:	619a      	str	r2, [r3, #24]
 800dc46:	1d3a      	adds	r2, r7, #4
 800dc48:	6a3b      	ldr	r3, [r7, #32]
 800dc4a:	61da      	str	r2, [r3, #28]
 800dc4c:	6a3b      	ldr	r3, [r7, #32]
 800dc4e:	3320      	adds	r3, #32
 800dc50:	623b      	str	r3, [r7, #32]
 800dc52:	4b20      	ldr	r3, [pc, #128]	; (800dcd4 <_tx_thread_time_slice+0x1b0>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	6a3a      	ldr	r2, [r7, #32]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d314      	bcc.n	800dc86 <_tx_thread_time_slice+0x162>
 800dc5c:	4b1e      	ldr	r3, [pc, #120]	; (800dcd8 <_tx_thread_time_slice+0x1b4>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	623b      	str	r3, [r7, #32]
 800dc62:	4a19      	ldr	r2, [pc, #100]	; (800dcc8 <_tx_thread_time_slice+0x1a4>)
 800dc64:	6a3b      	ldr	r3, [r7, #32]
 800dc66:	6013      	str	r3, [r2, #0]
 800dc68:	4b1c      	ldr	r3, [pc, #112]	; (800dcdc <_tx_thread_time_slice+0x1b8>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	6a3a      	ldr	r2, [r7, #32]
 800dc6e:	621a      	str	r2, [r3, #32]
 800dc70:	4b1b      	ldr	r3, [pc, #108]	; (800dce0 <_tx_thread_time_slice+0x1bc>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00d      	beq.n	800dc94 <_tx_thread_time_slice+0x170>
 800dc78:	4b19      	ldr	r3, [pc, #100]	; (800dce0 <_tx_thread_time_slice+0x1bc>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a17      	ldr	r2, [pc, #92]	; (800dcdc <_tx_thread_time_slice+0x1b8>)
 800dc7e:	6812      	ldr	r2, [r2, #0]
 800dc80:	4610      	mov	r0, r2
 800dc82:	4798      	blx	r3
 800dc84:	e006      	b.n	800dc94 <_tx_thread_time_slice+0x170>
 800dc86:	4a10      	ldr	r2, [pc, #64]	; (800dcc8 <_tx_thread_time_slice+0x1a4>)
 800dc88:	6a3b      	ldr	r3, [r7, #32]
 800dc8a:	6013      	str	r3, [r2, #0]
 800dc8c:	4b13      	ldr	r3, [pc, #76]	; (800dcdc <_tx_thread_time_slice+0x1b8>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	6a3a      	ldr	r2, [r7, #32]
 800dc92:	621a      	str	r2, [r3, #32]
 800dc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc96:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	f383 8810 	msr	PRIMASK, r3
}
 800dc9e:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800dca0:	bf00      	nop
 800dca2:	3738      	adds	r7, #56	; 0x38
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	200016dc 	.word	0x200016dc
 800dcac:	20001784 	.word	0x20001784
 800dcb0:	20001ce0 	.word	0x20001ce0
 800dcb4:	200016f4 	.word	0x200016f4
 800dcb8:	200016f0 	.word	0x200016f0
 800dcbc:	200016e0 	.word	0x200016e0
 800dcc0:	2000000c 	.word	0x2000000c
 800dcc4:	20001774 	.word	0x20001774
 800dcc8:	20001cf8 	.word	0x20001cf8
 800dccc:	20001cfc 	.word	0x20001cfc
 800dcd0:	e0001004 	.word	0xe0001004
 800dcd4:	20001cf4 	.word	0x20001cf4
 800dcd8:	20001cf0 	.word	0x20001cf0
 800dcdc:	20001ce4 	.word	0x20001ce4
 800dce0:	20001d00 	.word	0x20001d00

0800dce4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b08a      	sub	sp, #40	; 0x28
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dcf0:	f3ef 8310 	mrs	r3, PRIMASK
 800dcf4:	617b      	str	r3, [r7, #20]
    return(posture);
 800dcf6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800dcf8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dcfa:	b672      	cpsid	i
    return(int_posture);
 800dcfc:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800dcfe:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd04:	2b04      	cmp	r3, #4
 800dd06:	d10e      	bne.n	800dd26 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800dd08:	4b13      	ldr	r3, [pc, #76]	; (800dd58 <_tx_thread_timeout+0x74>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	4a12      	ldr	r2, [pc, #72]	; (800dd58 <_tx_thread_timeout+0x74>)
 800dd10:	6013      	str	r3, [r2, #0]
 800dd12:	6a3b      	ldr	r3, [r7, #32]
 800dd14:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f383 8810 	msr	PRIMASK, r3
}
 800dd1c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800dd1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd20:	f7ff fb56 	bl	800d3d0 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800dd24:	e013      	b.n	800dd4e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd2a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800dd32:	61bb      	str	r3, [r7, #24]
 800dd34:	6a3b      	ldr	r3, [r7, #32]
 800dd36:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	f383 8810 	msr	PRIMASK, r3
}
 800dd3e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d003      	beq.n	800dd4e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	69b9      	ldr	r1, [r7, #24]
 800dd4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd4c:	4798      	blx	r3
}
 800dd4e:	bf00      	nop
 800dd50:	3728      	adds	r7, #40	; 0x28
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	20001774 	.word	0x20001774

0800dd5c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd62:	f3ef 8310 	mrs	r3, PRIMASK
 800dd66:	607b      	str	r3, [r7, #4]
    return(posture);
 800dd68:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800dd6a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dd6c:	b672      	cpsid	i
    return(int_posture);
 800dd6e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800dd70:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800dd72:	4b09      	ldr	r3, [pc, #36]	; (800dd98 <_tx_timer_expiration_process+0x3c>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	3301      	adds	r3, #1
 800dd78:	4a07      	ldr	r2, [pc, #28]	; (800dd98 <_tx_timer_expiration_process+0x3c>)
 800dd7a:	6013      	str	r3, [r2, #0]
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	f383 8810 	msr	PRIMASK, r3
}
 800dd86:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800dd88:	4804      	ldr	r0, [pc, #16]	; (800dd9c <_tx_timer_expiration_process+0x40>)
 800dd8a:	f7ff fb21 	bl	800d3d0 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800dd8e:	bf00      	nop
 800dd90:	3710      	adds	r7, #16
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20001774 	.word	0x20001774
 800dd9c:	20001824 	.word	0x20001824

0800dda0 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800dda0:	b590      	push	{r4, r7, lr}
 800dda2:	b089      	sub	sp, #36	; 0x24
 800dda4:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800dda6:	4b28      	ldr	r3, [pc, #160]	; (800de48 <_tx_timer_initialize+0xa8>)
 800dda8:	2200      	movs	r2, #0
 800ddaa:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800ddac:	4b27      	ldr	r3, [pc, #156]	; (800de4c <_tx_timer_initialize+0xac>)
 800ddae:	2200      	movs	r2, #0
 800ddb0:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800ddb2:	4b27      	ldr	r3, [pc, #156]	; (800de50 <_tx_timer_initialize+0xb0>)
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800ddb8:	4b26      	ldr	r3, [pc, #152]	; (800de54 <_tx_timer_initialize+0xb4>)
 800ddba:	2200      	movs	r2, #0
 800ddbc:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800ddbe:	4b26      	ldr	r3, [pc, #152]	; (800de58 <_tx_timer_initialize+0xb8>)
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800ddc4:	2280      	movs	r2, #128	; 0x80
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	4824      	ldr	r0, [pc, #144]	; (800de5c <_tx_timer_initialize+0xbc>)
 800ddca:	f007 f841 	bl	8014e50 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800ddce:	4b24      	ldr	r3, [pc, #144]	; (800de60 <_tx_timer_initialize+0xc0>)
 800ddd0:	4a22      	ldr	r2, [pc, #136]	; (800de5c <_tx_timer_initialize+0xbc>)
 800ddd2:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800ddd4:	4b23      	ldr	r3, [pc, #140]	; (800de64 <_tx_timer_initialize+0xc4>)
 800ddd6:	4a21      	ldr	r2, [pc, #132]	; (800de5c <_tx_timer_initialize+0xbc>)
 800ddd8:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800ddda:	4b23      	ldr	r3, [pc, #140]	; (800de68 <_tx_timer_initialize+0xc8>)
 800dddc:	4a23      	ldr	r2, [pc, #140]	; (800de6c <_tx_timer_initialize+0xcc>)
 800ddde:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800dde0:	4b21      	ldr	r3, [pc, #132]	; (800de68 <_tx_timer_initialize+0xc8>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	3304      	adds	r3, #4
 800dde6:	4a20      	ldr	r2, [pc, #128]	; (800de68 <_tx_timer_initialize+0xc8>)
 800dde8:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800ddea:	4b21      	ldr	r3, [pc, #132]	; (800de70 <_tx_timer_initialize+0xd0>)
 800ddec:	4a21      	ldr	r2, [pc, #132]	; (800de74 <_tx_timer_initialize+0xd4>)
 800ddee:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800ddf0:	4b21      	ldr	r3, [pc, #132]	; (800de78 <_tx_timer_initialize+0xd8>)
 800ddf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ddf6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800ddf8:	4b20      	ldr	r3, [pc, #128]	; (800de7c <_tx_timer_initialize+0xdc>)
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800ddfe:	4b1c      	ldr	r3, [pc, #112]	; (800de70 <_tx_timer_initialize+0xd0>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4a1d      	ldr	r2, [pc, #116]	; (800de78 <_tx_timer_initialize+0xd8>)
 800de04:	6812      	ldr	r2, [r2, #0]
 800de06:	491d      	ldr	r1, [pc, #116]	; (800de7c <_tx_timer_initialize+0xdc>)
 800de08:	6809      	ldr	r1, [r1, #0]
 800de0a:	481c      	ldr	r0, [pc, #112]	; (800de7c <_tx_timer_initialize+0xdc>)
 800de0c:	6800      	ldr	r0, [r0, #0]
 800de0e:	2400      	movs	r4, #0
 800de10:	9405      	str	r4, [sp, #20]
 800de12:	2400      	movs	r4, #0
 800de14:	9404      	str	r4, [sp, #16]
 800de16:	9003      	str	r0, [sp, #12]
 800de18:	9102      	str	r1, [sp, #8]
 800de1a:	9201      	str	r2, [sp, #4]
 800de1c:	9300      	str	r3, [sp, #0]
 800de1e:	4b18      	ldr	r3, [pc, #96]	; (800de80 <_tx_timer_initialize+0xe0>)
 800de20:	4a18      	ldr	r2, [pc, #96]	; (800de84 <_tx_timer_initialize+0xe4>)
 800de22:	4919      	ldr	r1, [pc, #100]	; (800de88 <_tx_timer_initialize+0xe8>)
 800de24:	4819      	ldr	r0, [pc, #100]	; (800de8c <_tx_timer_initialize+0xec>)
 800de26:	f7fe ff8b 	bl	800cd40 <_tx_thread_create>
 800de2a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d1e5      	bne.n	800ddfe <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800de32:	4b17      	ldr	r3, [pc, #92]	; (800de90 <_tx_timer_initialize+0xf0>)
 800de34:	2200      	movs	r2, #0
 800de36:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800de38:	4b16      	ldr	r3, [pc, #88]	; (800de94 <_tx_timer_initialize+0xf4>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800de3e:	bf00      	nop
 800de40:	370c      	adds	r7, #12
 800de42:	46bd      	mov	sp, r7
 800de44:	bd90      	pop	{r4, r7, pc}
 800de46:	bf00      	nop
 800de48:	20001780 	.word	0x20001780
 800de4c:	20001ce0 	.word	0x20001ce0
 800de50:	20001784 	.word	0x20001784
 800de54:	20001814 	.word	0x20001814
 800de58:	20001820 	.word	0x20001820
 800de5c:	20001788 	.word	0x20001788
 800de60:	20001808 	.word	0x20001808
 800de64:	20001810 	.word	0x20001810
 800de68:	2000180c 	.word	0x2000180c
 800de6c:	20001804 	.word	0x20001804
 800de70:	200018d4 	.word	0x200018d4
 800de74:	200018e0 	.word	0x200018e0
 800de78:	200018d8 	.word	0x200018d8
 800de7c:	200018dc 	.word	0x200018dc
 800de80:	4154494d 	.word	0x4154494d
 800de84:	0800dfcd 	.word	0x0800dfcd
 800de88:	08015968 	.word	0x08015968
 800de8c:	20001824 	.word	0x20001824
 800de90:	20001818 	.word	0x20001818
 800de94:	2000181c 	.word	0x2000181c

0800de98 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800de98:	b480      	push	{r7}
 800de9a:	b089      	sub	sp, #36	; 0x24
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d04a      	beq.n	800df42 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb2:	d046      	beq.n	800df42 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	699b      	ldr	r3, [r3, #24]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d142      	bne.n	800df42 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	2b20      	cmp	r3, #32
 800dec0:	d902      	bls.n	800dec8 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800dec2:	231f      	movs	r3, #31
 800dec4:	61bb      	str	r3, [r7, #24]
 800dec6:	e002      	b.n	800dece <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	3b01      	subs	r3, #1
 800decc:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800dece:	4b20      	ldr	r3, [pc, #128]	; (800df50 <_tx_timer_system_activate+0xb8>)
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	4413      	add	r3, r2
 800ded8:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800deda:	4b1e      	ldr	r3, [pc, #120]	; (800df54 <_tx_timer_system_activate+0xbc>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	69fa      	ldr	r2, [r7, #28]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d30b      	bcc.n	800defc <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800dee4:	4b1b      	ldr	r3, [pc, #108]	; (800df54 <_tx_timer_system_activate+0xbc>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	69fa      	ldr	r2, [r7, #28]
 800deea:	1ad3      	subs	r3, r2, r3
 800deec:	109b      	asrs	r3, r3, #2
 800deee:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800def0:	4b19      	ldr	r3, [pc, #100]	; (800df58 <_tx_timer_system_activate+0xc0>)
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	4413      	add	r3, r2
 800defa:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800defc:	69fb      	ldr	r3, [r7, #28]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d109      	bne.n	800df18 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	601a      	str	r2, [r3, #0]
 800df16:	e011      	b.n	800df3c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	68fa      	ldr	r2, [r7, #12]
 800df34:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	69fa      	ldr	r2, [r7, #28]
 800df40:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800df42:	bf00      	nop
 800df44:	3724      	adds	r7, #36	; 0x24
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	20001810 	.word	0x20001810
 800df54:	2000180c 	.word	0x2000180c
 800df58:	20001808 	.word	0x20001808

0800df5c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b087      	sub	sp, #28
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	699b      	ldr	r3, [r3, #24]
 800df68:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d026      	beq.n	800dfbe <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	691b      	ldr	r3, [r3, #16]
 800df74:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d108      	bne.n	800df90 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	429a      	cmp	r2, r3
 800df86:	d117      	bne.n	800dfb8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	2200      	movs	r2, #0
 800df8c:	601a      	str	r2, [r3, #0]
 800df8e:	e013      	b.n	800dfb8 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	695b      	ldr	r3, [r3, #20]
 800df94:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	693a      	ldr	r2, [r7, #16]
 800dfa0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d105      	bne.n	800dfb8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	697a      	ldr	r2, [r7, #20]
 800dfb0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	693a      	ldr	r2, [r7, #16]
 800dfb6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	619a      	str	r2, [r3, #24]
    }
}
 800dfbe:	bf00      	nop
 800dfc0:	371c      	adds	r7, #28
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr
	...

0800dfcc <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b098      	sub	sp, #96	; 0x60
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	4a73      	ldr	r2, [pc, #460]	; (800e1a8 <_tx_timer_thread_entry+0x1dc>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	f040 80de 	bne.w	800e19e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dfe2:	f3ef 8310 	mrs	r3, PRIMASK
 800dfe6:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800dfe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800dfea:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800dfec:	b672      	cpsid	i
    return(int_posture);
 800dfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800dff0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800dff2:	4b6e      	ldr	r3, [pc, #440]	; (800e1ac <_tx_timer_thread_entry+0x1e0>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d003      	beq.n	800e008 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f107 020c 	add.w	r2, r7, #12
 800e006:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800e008:	4b68      	ldr	r3, [pc, #416]	; (800e1ac <_tx_timer_thread_entry+0x1e0>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	2200      	movs	r2, #0
 800e00e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800e010:	4b66      	ldr	r3, [pc, #408]	; (800e1ac <_tx_timer_thread_entry+0x1e0>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	3304      	adds	r3, #4
 800e016:	4a65      	ldr	r2, [pc, #404]	; (800e1ac <_tx_timer_thread_entry+0x1e0>)
 800e018:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800e01a:	4b64      	ldr	r3, [pc, #400]	; (800e1ac <_tx_timer_thread_entry+0x1e0>)
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	4b64      	ldr	r3, [pc, #400]	; (800e1b0 <_tx_timer_thread_entry+0x1e4>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	429a      	cmp	r2, r3
 800e024:	d103      	bne.n	800e02e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800e026:	4b63      	ldr	r3, [pc, #396]	; (800e1b4 <_tx_timer_thread_entry+0x1e8>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4a60      	ldr	r2, [pc, #384]	; (800e1ac <_tx_timer_thread_entry+0x1e0>)
 800e02c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800e02e:	4b62      	ldr	r3, [pc, #392]	; (800e1b8 <_tx_timer_thread_entry+0x1ec>)
 800e030:	2200      	movs	r2, #0
 800e032:	601a      	str	r2, [r3, #0]
 800e034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e036:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03a:	f383 8810 	msr	PRIMASK, r3
}
 800e03e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e040:	f3ef 8310 	mrs	r3, PRIMASK
 800e044:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800e046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800e048:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800e04a:	b672      	cpsid	i
    return(int_posture);
 800e04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800e04e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800e050:	e07f      	b.n	800e152 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	691b      	ldr	r3, [r3, #16]
 800e05a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800e05c:	2300      	movs	r3, #0
 800e05e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800e060:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e064:	429a      	cmp	r2, r3
 800e066:	d102      	bne.n	800e06e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800e068:	2300      	movs	r3, #0
 800e06a:	60fb      	str	r3, [r7, #12]
 800e06c:	e00e      	b.n	800e08c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800e06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e070:	695b      	ldr	r3, [r3, #20]
 800e072:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800e074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e078:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800e07a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e07c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e07e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800e080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e082:	f107 020c 	add.w	r2, r7, #12
 800e086:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800e088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e08a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b20      	cmp	r3, #32
 800e092:	d911      	bls.n	800e0b8 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800e094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800e09c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e09e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e0a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0a6:	f107 0208 	add.w	r2, r7, #8
 800e0aa:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800e0ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0b0:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800e0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0b4:	60bb      	str	r3, [r7, #8]
 800e0b6:	e01a      	b.n	800e0ee <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800e0b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800e0be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800e0c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0c6:	685a      	ldr	r2, [r3, #4]
 800e0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ca:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800e0cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d009      	beq.n	800e0e8 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e0d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0d6:	f107 0208 	add.w	r2, r7, #8
 800e0da:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800e0dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0e0:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800e0e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0e4:	60bb      	str	r3, [r7, #8]
 800e0e6:	e002      	b.n	800e0ee <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800e0e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800e0ee:	4a33      	ldr	r2, [pc, #204]	; (800e1bc <_tx_timer_thread_entry+0x1f0>)
 800e0f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0f2:	6013      	str	r3, [r2, #0]
 800e0f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fa:	f383 8810 	msr	PRIMASK, r3
}
 800e0fe:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800e100:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e102:	2b00      	cmp	r3, #0
 800e104:	d002      	beq.n	800e10c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800e106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e108:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e10a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e10c:	f3ef 8310 	mrs	r3, PRIMASK
 800e110:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e112:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e114:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e116:	b672      	cpsid	i
    return(int_posture);
 800e118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800e11a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800e11c:	4b27      	ldr	r3, [pc, #156]	; (800e1bc <_tx_timer_thread_entry+0x1f0>)
 800e11e:	2200      	movs	r2, #0
 800e120:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e126:	429a      	cmp	r2, r3
 800e128:	d105      	bne.n	800e136 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800e12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e12c:	2200      	movs	r2, #0
 800e12e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800e130:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e132:	f7ff feb1 	bl	800de98 <_tx_timer_system_activate>
 800e136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e138:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	f383 8810 	msr	PRIMASK, r3
}
 800e140:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e142:	f3ef 8310 	mrs	r3, PRIMASK
 800e146:	623b      	str	r3, [r7, #32]
    return(posture);
 800e148:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e14a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e14c:	b672      	cpsid	i
    return(int_posture);
 800e14e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800e150:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2b00      	cmp	r3, #0
 800e156:	f47f af7c 	bne.w	800e052 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800e15a:	4b17      	ldr	r3, [pc, #92]	; (800e1b8 <_tx_timer_thread_entry+0x1ec>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d116      	bne.n	800e190 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800e162:	4b17      	ldr	r3, [pc, #92]	; (800e1c0 <_tx_timer_thread_entry+0x1f4>)
 800e164:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800e166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e168:	2203      	movs	r2, #3
 800e16a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e16c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e16e:	2201      	movs	r2, #1
 800e170:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800e172:	4b14      	ldr	r3, [pc, #80]	; (800e1c4 <_tx_timer_thread_entry+0x1f8>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	3301      	adds	r3, #1
 800e178:	4a12      	ldr	r2, [pc, #72]	; (800e1c4 <_tx_timer_thread_entry+0x1f8>)
 800e17a:	6013      	str	r3, [r2, #0]
 800e17c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e17e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	f383 8810 	msr	PRIMASK, r3
}
 800e186:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800e188:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e18a:	f7ff fadb 	bl	800d744 <_tx_thread_system_suspend>
 800e18e:	e728      	b.n	800dfe2 <_tx_timer_thread_entry+0x16>
 800e190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e192:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	f383 8810 	msr	PRIMASK, r3
}
 800e19a:	bf00      	nop
            TX_DISABLE
 800e19c:	e721      	b.n	800dfe2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800e19e:	bf00      	nop
 800e1a0:	3760      	adds	r7, #96	; 0x60
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	4154494d 	.word	0x4154494d
 800e1ac:	20001810 	.word	0x20001810
 800e1b0:	2000180c 	.word	0x2000180c
 800e1b4:	20001808 	.word	0x20001808
 800e1b8:	20001814 	.word	0x20001814
 800e1bc:	20001820 	.word	0x20001820
 800e1c0:	20001824 	.word	0x20001824
 800e1c4:	20001774 	.word	0x20001774

0800e1c8 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 800e1cc:	4b0b      	ldr	r3, [pc, #44]	; (800e1fc <_tx_trace_initialize+0x34>)
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 800e1d2:	4b0b      	ldr	r3, [pc, #44]	; (800e200 <_tx_trace_initialize+0x38>)
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 800e1d8:	4b0a      	ldr	r3, [pc, #40]	; (800e204 <_tx_trace_initialize+0x3c>)
 800e1da:	2200      	movs	r2, #0
 800e1dc:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 800e1de:	4b0a      	ldr	r3, [pc, #40]	; (800e208 <_tx_trace_initialize+0x40>)
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 800e1e4:	4b09      	ldr	r3, [pc, #36]	; (800e20c <_tx_trace_initialize+0x44>)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 800e1ea:	4b09      	ldr	r3, [pc, #36]	; (800e210 <_tx_trace_initialize+0x48>)
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 800e1f0:	bf00      	nop
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop
 800e1fc:	20001ce4 	.word	0x20001ce4
 800e200:	20001ce8 	.word	0x20001ce8
 800e204:	20001cec 	.word	0x20001cec
 800e208:	20001cf0 	.word	0x20001cf0
 800e20c:	20001cf4 	.word	0x20001cf4
 800e210:	20001cf8 	.word	0x20001cf8

0800e214 <_tx_trace_object_register>:
/*                                            check for null name,        */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 800e214:	b480      	push	{r7}
 800e216:	b08d      	sub	sp, #52	; 0x34
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60b9      	str	r1, [r7, #8]
 800e21c:	607a      	str	r2, [r7, #4]
 800e21e:	603b      	str	r3, [r7, #0]
 800e220:	4603      	mov	r3, r0
 800e222:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 800e224:	4b6f      	ldr	r3, [pc, #444]	; (800e3e4 <_tx_trace_object_register+0x1d0>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f000 80d5 	beq.w	800e3d8 <_tx_trace_object_register+0x1c4>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 800e22e:	4b6e      	ldr	r3, [pc, #440]	; (800e3e8 <_tx_trace_object_register+0x1d4>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 800e234:	4b6d      	ldr	r3, [pc, #436]	; (800e3ec <_tx_trace_object_register+0x1d8>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	f000 80cd 	beq.w	800e3d8 <_tx_trace_object_register+0x1c4>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 800e23e:	6a3b      	ldr	r3, [r7, #32]
 800e240:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 800e242:	2300      	movs	r3, #0
 800e244:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 800e246:	4b6a      	ldr	r3, [pc, #424]	; (800e3f0 <_tx_trace_object_register+0x1dc>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800e24c:	4b65      	ldr	r3, [pc, #404]	; (800e3e4 <_tx_trace_object_register+0x1d0>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 800e252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e254:	4613      	mov	r3, r2
 800e256:	005b      	lsls	r3, r3, #1
 800e258:	4413      	add	r3, r2
 800e25a:	011b      	lsls	r3, r3, #4
 800e25c:	461a      	mov	r2, r3
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	4413      	add	r3, r2
 800e262:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d103      	bne.n	800e278 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800e270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e272:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800e274:	2301      	movs	r3, #1
 800e276:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	685a      	ldr	r2, [r3, #4]
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	429a      	cmp	r2, r3
 800e280:	d103      	bne.n	800e28a <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e284:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800e286:	2301      	movs	r3, #1
 800e288:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 800e28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d02d      	beq.n	800e2ec <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 800e290:	69bb      	ldr	r3, [r7, #24]
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d11a      	bne.n	800e2ce <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 800e298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d102      	bne.n	800e2a6 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 800e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2a4:	e013      	b.n	800e2ce <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800e2a6:	4b4f      	ldr	r3, [pc, #316]	; (800e3e4 <_tx_trace_object_register+0x1d0>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800e2ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	005b      	lsls	r3, r3, #1
 800e2b2:	4413      	add	r3, r2
 800e2b4:	011b      	lsls	r3, r3, #4
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 800e2c2:	69bb      	ldr	r3, [r7, #24]
 800e2c4:	785b      	ldrb	r3, [r3, #1]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d001      	beq.n	800e2ce <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 800e2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2cc:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 800e2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 800e2d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2d6:	6a3b      	ldr	r3, [r7, #32]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d301      	bcc.n	800e2e0 <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 800e2dc:	2300      	movs	r3, #0
 800e2de:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 800e2e0:	4b43      	ldr	r3, [pc, #268]	; (800e3f0 <_tx_trace_object_register+0x1dc>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d1b0      	bne.n	800e24c <_tx_trace_object_register+0x38>
 800e2ea:	e000      	b.n	800e2ee <_tx_trace_object_register+0xda>
                    break;
 800e2ec:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 800e2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2f0:	6a3b      	ldr	r3, [r7, #32]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d270      	bcs.n	800e3d8 <_tx_trace_object_register+0x1c4>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 800e2f6:	4b3d      	ldr	r3, [pc, #244]	; (800e3ec <_tx_trace_object_register+0x1d8>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	4a3b      	ldr	r2, [pc, #236]	; (800e3ec <_tx_trace_object_register+0x1d8>)
 800e2fe:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 800e300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e302:	3301      	adds	r3, #1
 800e304:	6a3a      	ldr	r2, [r7, #32]
 800e306:	429a      	cmp	r2, r3
 800e308:	d904      	bls.n	800e314 <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 800e30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30c:	3301      	adds	r3, #1
 800e30e:	4a38      	ldr	r2, [pc, #224]	; (800e3f0 <_tx_trace_object_register+0x1dc>)
 800e310:	6013      	str	r3, [r2, #0]
 800e312:	e002      	b.n	800e31a <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 800e314:	4b36      	ldr	r3, [pc, #216]	; (800e3f0 <_tx_trace_object_register+0x1dc>)
 800e316:	2200      	movs	r2, #0
 800e318:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800e31a:	4b32      	ldr	r3, [pc, #200]	; (800e3e4 <_tx_trace_object_register+0x1d0>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800e320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e322:	4613      	mov	r3, r2
 800e324:	005b      	lsls	r3, r3, #1
 800e326:	4413      	add	r3, r2
 800e328:	011b      	lsls	r3, r3, #4
 800e32a:	461a      	mov	r2, r3
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	4413      	add	r3, r2
 800e330:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 800e336:	69bb      	ldr	r3, [r7, #24]
 800e338:	2200      	movs	r2, #0
 800e33a:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	7bfa      	ldrb	r2, [r7, #15]
 800e340:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 800e342:	68ba      	ldr	r2, [r7, #8]
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	683a      	ldr	r2, [r7, #0]
 800e34c:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e352:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800e354:	2300      	movs	r3, #0
 800e356:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e358:	e017      	b.n	800e38a <_tx_trace_object_register+0x176>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 800e35e:	69fa      	ldr	r2, [r7, #28]
 800e360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e362:	4413      	add	r3, r2
 800e364:	61fb      	str	r3, [r7, #28]

                    /* Determine if object_name (work_ptr) is null.  */
                    if (work_ptr == TX_NULL)
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d012      	beq.n	800e392 <_tx_trace_object_register+0x17e>
                    {
                        break;
                    }

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	7819      	ldrb	r1, [r3, #0]
 800e370:	69ba      	ldr	r2, [r7, #24]
 800e372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e374:	4413      	add	r3, r2
 800e376:	3310      	adds	r3, #16
 800e378:	460a      	mov	r2, r1
 800e37a:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d008      	beq.n	800e396 <_tx_trace_object_register+0x182>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800e384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e386:	3301      	adds	r3, #1
 800e388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38c:	2b1e      	cmp	r3, #30
 800e38e:	d9e4      	bls.n	800e35a <_tx_trace_object_register+0x146>
 800e390:	e002      	b.n	800e398 <_tx_trace_object_register+0x184>
                        break;
 800e392:	bf00      	nop
 800e394:	e000      	b.n	800e398 <_tx_trace_object_register+0x184>
                    {
                        break;
 800e396:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 800e398:	69ba      	ldr	r2, [r7, #24]
 800e39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39c:	4413      	add	r3, r2
 800e39e:	3310      	adds	r3, #16
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 800e3a4:	7bfb      	ldrb	r3, [r7, #15]
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d110      	bne.n	800e3cc <_tx_trace_object_register+0x1b8>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b2:	0a1b      	lsrs	r3, r3, #8
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e3ba:	b2da      	uxtb	r2, r3
 800e3bc:	69bb      	ldr	r3, [r7, #24]
 800e3be:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c4:	b2da      	uxtb	r2, r3
 800e3c6:	69bb      	ldr	r3, [r7, #24]
 800e3c8:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 800e3ca:	e005      	b.n	800e3d8 <_tx_trace_object_register+0x1c4>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 800e3cc:	69bb      	ldr	r3, [r7, #24]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 800e3d2:	69bb      	ldr	r3, [r7, #24]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	70da      	strb	r2, [r3, #3]
}
 800e3d8:	bf00      	nop
 800e3da:	3734      	adds	r7, #52	; 0x34
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr
 800e3e4:	20001ce8 	.word	0x20001ce8
 800e3e8:	20001d04 	.word	0x20001d04
 800e3ec:	20001d08 	.word	0x20001d08
 800e3f0:	20001d0c 	.word	0x20001d0c

0800e3f4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b092      	sub	sp, #72	; 0x48
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	60b9      	str	r1, [r7, #8]
 800e3fe:	607a      	str	r2, [r7, #4]
 800e400:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e402:	2300      	movs	r3, #0
 800e404:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d102      	bne.n	800e412 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e40c:	2302      	movs	r3, #2
 800e40e:	647b      	str	r3, [r7, #68]	; 0x44
 800e410:	e075      	b.n	800e4fe <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800e412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e414:	2b34      	cmp	r3, #52	; 0x34
 800e416:	d002      	beq.n	800e41e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e418:	2302      	movs	r3, #2
 800e41a:	647b      	str	r3, [r7, #68]	; 0x44
 800e41c:	e06f      	b.n	800e4fe <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e41e:	f3ef 8310 	mrs	r3, PRIMASK
 800e422:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e426:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e428:	b672      	cpsid	i
    return(int_posture);
 800e42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e42c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e42e:	4b3b      	ldr	r3, [pc, #236]	; (800e51c <_txe_byte_pool_create+0x128>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	3301      	adds	r3, #1
 800e434:	4a39      	ldr	r2, [pc, #228]	; (800e51c <_txe_byte_pool_create+0x128>)
 800e436:	6013      	str	r3, [r2, #0]
 800e438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43e:	f383 8810 	msr	PRIMASK, r3
}
 800e442:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800e444:	4b36      	ldr	r3, [pc, #216]	; (800e520 <_txe_byte_pool_create+0x12c>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e44a:	2300      	movs	r3, #0
 800e44c:	643b      	str	r3, [r7, #64]	; 0x40
 800e44e:	e009      	b.n	800e464 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800e450:	68fa      	ldr	r2, [r7, #12]
 800e452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e454:	429a      	cmp	r2, r3
 800e456:	d00b      	beq.n	800e470 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800e458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e45e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e460:	3301      	adds	r3, #1
 800e462:	643b      	str	r3, [r7, #64]	; 0x40
 800e464:	4b2f      	ldr	r3, [pc, #188]	; (800e524 <_txe_byte_pool_create+0x130>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d3f0      	bcc.n	800e450 <_txe_byte_pool_create+0x5c>
 800e46e:	e000      	b.n	800e472 <_txe_byte_pool_create+0x7e>
                break;
 800e470:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e472:	f3ef 8310 	mrs	r3, PRIMASK
 800e476:	623b      	str	r3, [r7, #32]
    return(posture);
 800e478:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e47a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e47c:	b672      	cpsid	i
    return(int_posture);
 800e47e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e480:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e482:	4b26      	ldr	r3, [pc, #152]	; (800e51c <_txe_byte_pool_create+0x128>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	3b01      	subs	r3, #1
 800e488:	4a24      	ldr	r2, [pc, #144]	; (800e51c <_txe_byte_pool_create+0x128>)
 800e48a:	6013      	str	r3, [r2, #0]
 800e48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	f383 8810 	msr	PRIMASK, r3
}
 800e496:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e498:	f7fe ff60 	bl	800d35c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800e49c:	68fa      	ldr	r2, [r7, #12]
 800e49e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d102      	bne.n	800e4aa <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800e4a4:	2302      	movs	r3, #2
 800e4a6:	647b      	str	r3, [r7, #68]	; 0x44
 800e4a8:	e029      	b.n	800e4fe <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d102      	bne.n	800e4b6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800e4b0:	2303      	movs	r3, #3
 800e4b2:	647b      	str	r3, [r7, #68]	; 0x44
 800e4b4:	e023      	b.n	800e4fe <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	2b63      	cmp	r3, #99	; 0x63
 800e4ba:	d802      	bhi.n	800e4c2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800e4bc:	2305      	movs	r3, #5
 800e4be:	647b      	str	r3, [r7, #68]	; 0x44
 800e4c0:	e01d      	b.n	800e4fe <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e4c2:	4b19      	ldr	r3, [pc, #100]	; (800e528 <_txe_byte_pool_create+0x134>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ca:	4a18      	ldr	r2, [pc, #96]	; (800e52c <_txe_byte_pool_create+0x138>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d101      	bne.n	800e4d4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e4d0:	2313      	movs	r3, #19
 800e4d2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e4d4:	f3ef 8305 	mrs	r3, IPSR
 800e4d8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e4da:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e4dc:	4b14      	ldr	r3, [pc, #80]	; (800e530 <_txe_byte_pool_create+0x13c>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4313      	orrs	r3, r2
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00b      	beq.n	800e4fe <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e4e6:	f3ef 8305 	mrs	r3, IPSR
 800e4ea:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e4ec:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e4ee:	4b10      	ldr	r3, [pc, #64]	; (800e530 <_txe_byte_pool_create+0x13c>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e4f8:	d201      	bcs.n	800e4fe <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e4fa:	2313      	movs	r3, #19
 800e4fc:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e4fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e500:	2b00      	cmp	r3, #0
 800e502:	d106      	bne.n	800e512 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	687a      	ldr	r2, [r7, #4]
 800e508:	68b9      	ldr	r1, [r7, #8]
 800e50a:	68f8      	ldr	r0, [r7, #12]
 800e50c:	f7fd f88a 	bl	800b624 <_tx_byte_pool_create>
 800e510:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e514:	4618      	mov	r0, r3
 800e516:	3748      	adds	r7, #72	; 0x48
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	20001774 	.word	0x20001774
 800e520:	200016cc 	.word	0x200016cc
 800e524:	200016d0 	.word	0x200016d0
 800e528:	200016dc 	.word	0x200016dc
 800e52c:	20001824 	.word	0x20001824
 800e530:	2000000c 	.word	0x2000000c

0800e534 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b094      	sub	sp, #80	; 0x50
 800e538:	af02      	add	r7, sp, #8
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	607a      	str	r2, [r7, #4]
 800e540:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e542:	2300      	movs	r3, #0
 800e544:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d102      	bne.n	800e552 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e54c:	2309      	movs	r3, #9
 800e54e:	647b      	str	r3, [r7, #68]	; 0x44
 800e550:	e083      	b.n	800e65a <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800e552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e554:	2b38      	cmp	r3, #56	; 0x38
 800e556:	d002      	beq.n	800e55e <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e558:	2309      	movs	r3, #9
 800e55a:	647b      	str	r3, [r7, #68]	; 0x44
 800e55c:	e07d      	b.n	800e65a <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e55e:	f3ef 8310 	mrs	r3, PRIMASK
 800e562:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e566:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e568:	b672      	cpsid	i
    return(int_posture);
 800e56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e56c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e56e:	4b43      	ldr	r3, [pc, #268]	; (800e67c <_txe_queue_create+0x148>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	3301      	adds	r3, #1
 800e574:	4a41      	ldr	r2, [pc, #260]	; (800e67c <_txe_queue_create+0x148>)
 800e576:	6013      	str	r3, [r2, #0]
 800e578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57e:	f383 8810 	msr	PRIMASK, r3
}
 800e582:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800e584:	4b3e      	ldr	r3, [pc, #248]	; (800e680 <_txe_queue_create+0x14c>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e58a:	2300      	movs	r3, #0
 800e58c:	643b      	str	r3, [r7, #64]	; 0x40
 800e58e:	e009      	b.n	800e5a4 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800e590:	68fa      	ldr	r2, [r7, #12]
 800e592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e594:	429a      	cmp	r2, r3
 800e596:	d00b      	beq.n	800e5b0 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800e598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e59c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e59e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	643b      	str	r3, [r7, #64]	; 0x40
 800e5a4:	4b37      	ldr	r3, [pc, #220]	; (800e684 <_txe_queue_create+0x150>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d3f0      	bcc.n	800e590 <_txe_queue_create+0x5c>
 800e5ae:	e000      	b.n	800e5b2 <_txe_queue_create+0x7e>
                break;
 800e5b0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e5b2:	f3ef 8310 	mrs	r3, PRIMASK
 800e5b6:	623b      	str	r3, [r7, #32]
    return(posture);
 800e5b8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e5ba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e5bc:	b672      	cpsid	i
    return(int_posture);
 800e5be:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e5c0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e5c2:	4b2e      	ldr	r3, [pc, #184]	; (800e67c <_txe_queue_create+0x148>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	4a2c      	ldr	r2, [pc, #176]	; (800e67c <_txe_queue_create+0x148>)
 800e5ca:	6013      	str	r3, [r2, #0]
 800e5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ce:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d2:	f383 8810 	msr	PRIMASK, r3
}
 800e5d6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e5d8:	f7fe fec0 	bl	800d35c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800e5dc:	68fa      	ldr	r2, [r7, #12]
 800e5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d102      	bne.n	800e5ea <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800e5e4:	2309      	movs	r3, #9
 800e5e6:	647b      	str	r3, [r7, #68]	; 0x44
 800e5e8:	e037      	b.n	800e65a <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d102      	bne.n	800e5f6 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800e5f0:	2303      	movs	r3, #3
 800e5f2:	647b      	str	r3, [r7, #68]	; 0x44
 800e5f4:	e031      	b.n	800e65a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d102      	bne.n	800e602 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e5fc:	2305      	movs	r3, #5
 800e5fe:	647b      	str	r3, [r7, #68]	; 0x44
 800e600:	e02b      	b.n	800e65a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2b10      	cmp	r3, #16
 800e606:	d902      	bls.n	800e60e <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e608:	2305      	movs	r3, #5
 800e60a:	647b      	str	r3, [r7, #68]	; 0x44
 800e60c:	e025      	b.n	800e65a <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800e60e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e610:	089b      	lsrs	r3, r3, #2
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	429a      	cmp	r2, r3
 800e616:	d902      	bls.n	800e61e <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800e618:	2305      	movs	r3, #5
 800e61a:	647b      	str	r3, [r7, #68]	; 0x44
 800e61c:	e01d      	b.n	800e65a <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e61e:	4b1a      	ldr	r3, [pc, #104]	; (800e688 <_txe_queue_create+0x154>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e626:	4a19      	ldr	r2, [pc, #100]	; (800e68c <_txe_queue_create+0x158>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d101      	bne.n	800e630 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e62c:	2313      	movs	r3, #19
 800e62e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e630:	f3ef 8305 	mrs	r3, IPSR
 800e634:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e636:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e638:	4b15      	ldr	r3, [pc, #84]	; (800e690 <_txe_queue_create+0x15c>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d00b      	beq.n	800e65a <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e642:	f3ef 8305 	mrs	r3, IPSR
 800e646:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e648:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e64a:	4b11      	ldr	r3, [pc, #68]	; (800e690 <_txe_queue_create+0x15c>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	4313      	orrs	r3, r2
 800e650:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e654:	d201      	bcs.n	800e65a <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e656:	2313      	movs	r3, #19
 800e658:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d108      	bne.n	800e672 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800e660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e662:	9300      	str	r3, [sp, #0]
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	68b9      	ldr	r1, [r7, #8]
 800e66a:	68f8      	ldr	r0, [r7, #12]
 800e66c:	f7fd f9f2 	bl	800ba54 <_tx_queue_create>
 800e670:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e674:	4618      	mov	r0, r3
 800e676:	3748      	adds	r7, #72	; 0x48
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	20001774 	.word	0x20001774
 800e680:	200016ac 	.word	0x200016ac
 800e684:	200016b0 	.word	0x200016b0
 800e688:	200016dc 	.word	0x200016dc
 800e68c:	20001824 	.word	0x20001824
 800e690:	2000000c 	.word	0x2000000c

0800e694 <_txe_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d102      	bne.n	800e6a8 <_txe_queue_flush+0x14>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e6a2:	2309      	movs	r3, #9
 800e6a4:	60fb      	str	r3, [r7, #12]
 800e6a6:	e00b      	b.n	800e6c0 <_txe_queue_flush+0x2c>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4a07      	ldr	r2, [pc, #28]	; (800e6cc <_txe_queue_flush+0x38>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d002      	beq.n	800e6b8 <_txe_queue_flush+0x24>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e6b2:	2309      	movs	r3, #9
 800e6b4:	60fb      	str	r3, [r7, #12]
 800e6b6:	e003      	b.n	800e6c0 <_txe_queue_flush+0x2c>
    }
    else
    {

        /* Call actual queue flush function.  */
        status =  _tx_queue_flush(queue_ptr);
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f7fd facb 	bl	800bc54 <_tx_queue_flush>
 800e6be:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3710      	adds	r7, #16
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	51554555 	.word	0x51554555

0800e6d0 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b088      	sub	sp, #32
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d102      	bne.n	800e6ec <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e6e6:	2309      	movs	r3, #9
 800e6e8:	61fb      	str	r3, [r7, #28]
 800e6ea:	e025      	b.n	800e738 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a18      	ldr	r2, [pc, #96]	; (800e754 <_txe_queue_receive+0x84>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d002      	beq.n	800e6fc <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e6f6:	2309      	movs	r3, #9
 800e6f8:	61fb      	str	r3, [r7, #28]
 800e6fa:	e01d      	b.n	800e738 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d102      	bne.n	800e708 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e702:	2303      	movs	r3, #3
 800e704:	61fb      	str	r3, [r7, #28]
 800e706:	e017      	b.n	800e738 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d014      	beq.n	800e738 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e70e:	f3ef 8305 	mrs	r3, IPSR
 800e712:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e714:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e716:	4b10      	ldr	r3, [pc, #64]	; (800e758 <_txe_queue_receive+0x88>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4313      	orrs	r3, r2
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e720:	2304      	movs	r3, #4
 800e722:	61fb      	str	r3, [r7, #28]
 800e724:	e008      	b.n	800e738 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e726:	4b0d      	ldr	r3, [pc, #52]	; (800e75c <_txe_queue_receive+0x8c>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	4a0c      	ldr	r2, [pc, #48]	; (800e760 <_txe_queue_receive+0x90>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d101      	bne.n	800e738 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e734:	2304      	movs	r3, #4
 800e736:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e738:	69fb      	ldr	r3, [r7, #28]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d105      	bne.n	800e74a <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	68b9      	ldr	r1, [r7, #8]
 800e742:	68f8      	ldr	r0, [r7, #12]
 800e744:	f7fd fb98 	bl	800be78 <_tx_queue_receive>
 800e748:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e74a:	69fb      	ldr	r3, [r7, #28]
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3720      	adds	r7, #32
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	51554555 	.word	0x51554555
 800e758:	2000000c 	.word	0x2000000c
 800e75c:	200016dc 	.word	0x200016dc
 800e760:	20001824 	.word	0x20001824

0800e764 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b088      	sub	sp, #32
 800e768:	af00      	add	r7, sp, #0
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e770:	2300      	movs	r3, #0
 800e772:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d102      	bne.n	800e780 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e77a:	2309      	movs	r3, #9
 800e77c:	61fb      	str	r3, [r7, #28]
 800e77e:	e025      	b.n	800e7cc <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a18      	ldr	r2, [pc, #96]	; (800e7e8 <_txe_queue_send+0x84>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d002      	beq.n	800e790 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e78a:	2309      	movs	r3, #9
 800e78c:	61fb      	str	r3, [r7, #28]
 800e78e:	e01d      	b.n	800e7cc <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d102      	bne.n	800e79c <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e796:	2303      	movs	r3, #3
 800e798:	61fb      	str	r3, [r7, #28]
 800e79a:	e017      	b.n	800e7cc <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d014      	beq.n	800e7cc <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e7a2:	f3ef 8305 	mrs	r3, IPSR
 800e7a6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e7a8:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e7aa:	4b10      	ldr	r3, [pc, #64]	; (800e7ec <_txe_queue_send+0x88>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d002      	beq.n	800e7ba <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e7b4:	2304      	movs	r3, #4
 800e7b6:	61fb      	str	r3, [r7, #28]
 800e7b8:	e008      	b.n	800e7cc <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e7ba:	4b0d      	ldr	r3, [pc, #52]	; (800e7f0 <_txe_queue_send+0x8c>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	4a0c      	ldr	r2, [pc, #48]	; (800e7f4 <_txe_queue_send+0x90>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d101      	bne.n	800e7cc <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e7c8:	2304      	movs	r3, #4
 800e7ca:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d105      	bne.n	800e7de <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800e7d2:	687a      	ldr	r2, [r7, #4]
 800e7d4:	68b9      	ldr	r1, [r7, #8]
 800e7d6:	68f8      	ldr	r0, [r7, #12]
 800e7d8:	f7fd fd9c 	bl	800c314 <_tx_queue_send>
 800e7dc:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e7de:	69fb      	ldr	r3, [r7, #28]
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3720      	adds	r7, #32
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}
 800e7e8:	51554555 	.word	0x51554555
 800e7ec:	2000000c 	.word	0x2000000c
 800e7f0:	200016dc 	.word	0x200016dc
 800e7f4:	20001824 	.word	0x20001824

0800e7f8 <_txe_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d102      	bne.n	800e80e <_txe_semaphore_ceiling_put+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e808:	230c      	movs	r3, #12
 800e80a:	60fb      	str	r3, [r7, #12]
 800e80c:	e012      	b.n	800e834 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	4a0b      	ldr	r2, [pc, #44]	; (800e840 <_txe_semaphore_ceiling_put+0x48>)
 800e814:	4293      	cmp	r3, r2
 800e816:	d002      	beq.n	800e81e <_txe_semaphore_ceiling_put+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e818:	230c      	movs	r3, #12
 800e81a:	60fb      	str	r3, [r7, #12]
 800e81c:	e00a      	b.n	800e834 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Determine if the ceiling is valid - must be greater than 1.  */
    else if (ceiling == ((ULONG) 0))
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d102      	bne.n	800e82a <_txe_semaphore_ceiling_put+0x32>
    {

        /* Invalid ceiling, return error.  */
        status =  TX_INVALID_CEILING;
 800e824:	2322      	movs	r3, #34	; 0x22
 800e826:	60fb      	str	r3, [r7, #12]
 800e828:	e004      	b.n	800e834 <_txe_semaphore_ceiling_put+0x3c>
    }
    else
    {

        /* Call actual semaphore ceiling put function.  */
        status =  _tx_semaphore_ceiling_put(semaphore_ptr, ceiling);
 800e82a:	6839      	ldr	r1, [r7, #0]
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f7fd ff23 	bl	800c678 <_tx_semaphore_ceiling_put>
 800e832:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e834:	68fb      	ldr	r3, [r7, #12]
}
 800e836:	4618      	mov	r0, r3
 800e838:	3710      	adds	r7, #16
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	53454d41 	.word	0x53454d41

0800e844 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b092      	sub	sp, #72	; 0x48
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	607a      	str	r2, [r7, #4]
 800e850:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e852:	2300      	movs	r3, #0
 800e854:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d102      	bne.n	800e862 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e85c:	230c      	movs	r3, #12
 800e85e:	647b      	str	r3, [r7, #68]	; 0x44
 800e860:	e054      	b.n	800e90c <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	2b1c      	cmp	r3, #28
 800e866:	d002      	beq.n	800e86e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e868:	230c      	movs	r3, #12
 800e86a:	647b      	str	r3, [r7, #68]	; 0x44
 800e86c:	e04e      	b.n	800e90c <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e86e:	f3ef 8310 	mrs	r3, PRIMASK
 800e872:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e876:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e878:	b672      	cpsid	i
    return(int_posture);
 800e87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e87c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e87e:	4b36      	ldr	r3, [pc, #216]	; (800e958 <_txe_semaphore_create+0x114>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	3301      	adds	r3, #1
 800e884:	4a34      	ldr	r2, [pc, #208]	; (800e958 <_txe_semaphore_create+0x114>)
 800e886:	6013      	str	r3, [r2, #0]
 800e888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e88a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88e:	f383 8810 	msr	PRIMASK, r3
}
 800e892:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800e894:	4b31      	ldr	r3, [pc, #196]	; (800e95c <_txe_semaphore_create+0x118>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e89a:	2300      	movs	r3, #0
 800e89c:	643b      	str	r3, [r7, #64]	; 0x40
 800e89e:	e009      	b.n	800e8b4 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800e8a0:	68fa      	ldr	r2, [r7, #12]
 800e8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d00b      	beq.n	800e8c0 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800e8a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8aa:	695b      	ldr	r3, [r3, #20]
 800e8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e8ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	643b      	str	r3, [r7, #64]	; 0x40
 800e8b4:	4b2a      	ldr	r3, [pc, #168]	; (800e960 <_txe_semaphore_create+0x11c>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d3f0      	bcc.n	800e8a0 <_txe_semaphore_create+0x5c>
 800e8be:	e000      	b.n	800e8c2 <_txe_semaphore_create+0x7e>
                break;
 800e8c0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e8c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e8c6:	623b      	str	r3, [r7, #32]
    return(posture);
 800e8c8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e8ca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e8cc:	b672      	cpsid	i
    return(int_posture);
 800e8ce:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e8d0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e8d2:	4b21      	ldr	r3, [pc, #132]	; (800e958 <_txe_semaphore_create+0x114>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	3b01      	subs	r3, #1
 800e8d8:	4a1f      	ldr	r2, [pc, #124]	; (800e958 <_txe_semaphore_create+0x114>)
 800e8da:	6013      	str	r3, [r2, #0]
 800e8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8de:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e2:	f383 8810 	msr	PRIMASK, r3
}
 800e8e6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e8e8:	f7fe fd38 	bl	800d35c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800e8ec:	68fa      	ldr	r2, [r7, #12]
 800e8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d102      	bne.n	800e8fa <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800e8f4:	230c      	movs	r3, #12
 800e8f6:	647b      	str	r3, [r7, #68]	; 0x44
 800e8f8:	e008      	b.n	800e90c <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e8fa:	4b1a      	ldr	r3, [pc, #104]	; (800e964 <_txe_semaphore_create+0x120>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e902:	4a19      	ldr	r2, [pc, #100]	; (800e968 <_txe_semaphore_create+0x124>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d101      	bne.n	800e90c <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e908:	2313      	movs	r3, #19
 800e90a:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e90c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d114      	bne.n	800e93c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e912:	f3ef 8305 	mrs	r3, IPSR
 800e916:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e918:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e91a:	4b14      	ldr	r3, [pc, #80]	; (800e96c <_txe_semaphore_create+0x128>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4313      	orrs	r3, r2
 800e920:	2b00      	cmp	r3, #0
 800e922:	d00b      	beq.n	800e93c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e924:	f3ef 8305 	mrs	r3, IPSR
 800e928:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e92a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e92c:	4b0f      	ldr	r3, [pc, #60]	; (800e96c <_txe_semaphore_create+0x128>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4313      	orrs	r3, r2
 800e932:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e936:	d201      	bcs.n	800e93c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e938:	2313      	movs	r3, #19
 800e93a:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e93c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d105      	bne.n	800e94e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	68b9      	ldr	r1, [r7, #8]
 800e946:	68f8      	ldr	r0, [r7, #12]
 800e948:	f7fe f804 	bl	800c954 <_tx_semaphore_create>
 800e94c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e94e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e950:	4618      	mov	r0, r3
 800e952:	3748      	adds	r7, #72	; 0x48
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}
 800e958:	20001774 	.word	0x20001774
 800e95c:	200016a4 	.word	0x200016a4
 800e960:	200016a8 	.word	0x200016a8
 800e964:	200016dc 	.word	0x200016dc
 800e968:	20001824 	.word	0x20001824
 800e96c:	2000000c 	.word	0x2000000c

0800e970 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b086      	sub	sp, #24
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e97a:	2300      	movs	r3, #0
 800e97c:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d102      	bne.n	800e98a <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e984:	230c      	movs	r3, #12
 800e986:	617b      	str	r3, [r7, #20]
 800e988:	e01f      	b.n	800e9ca <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4a15      	ldr	r2, [pc, #84]	; (800e9e4 <_txe_semaphore_get+0x74>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d002      	beq.n	800e99a <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e994:	230c      	movs	r3, #12
 800e996:	617b      	str	r3, [r7, #20]
 800e998:	e017      	b.n	800e9ca <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d014      	beq.n	800e9ca <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e9a0:	f3ef 8305 	mrs	r3, IPSR
 800e9a4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e9a6:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e9a8:	4b0f      	ldr	r3, [pc, #60]	; (800e9e8 <_txe_semaphore_get+0x78>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d002      	beq.n	800e9b8 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e9b2:	2304      	movs	r3, #4
 800e9b4:	617b      	str	r3, [r7, #20]
 800e9b6:	e008      	b.n	800e9ca <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e9b8:	4b0c      	ldr	r3, [pc, #48]	; (800e9ec <_txe_semaphore_get+0x7c>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	4a0b      	ldr	r2, [pc, #44]	; (800e9f0 <_txe_semaphore_get+0x80>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d101      	bne.n	800e9ca <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e9c6:	2304      	movs	r3, #4
 800e9c8:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d104      	bne.n	800e9da <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800e9d0:	6839      	ldr	r1, [r7, #0]
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f7fe f89e 	bl	800cb14 <_tx_semaphore_get>
 800e9d8:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800e9da:	697b      	ldr	r3, [r7, #20]
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3718      	adds	r7, #24
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	53454d41 	.word	0x53454d41
 800e9e8:	2000000c 	.word	0x2000000c
 800e9ec:	200016dc 	.word	0x200016dc
 800e9f0:	20001824 	.word	0x20001824

0800e9f4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b09a      	sub	sp, #104	; 0x68
 800e9f8:	af06      	add	r7, sp, #24
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	607a      	str	r2, [r7, #4]
 800ea00:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ea02:	2300      	movs	r3, #0
 800ea04:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d102      	bne.n	800ea12 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ea0c:	230e      	movs	r3, #14
 800ea0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea10:	e0bb      	b.n	800eb8a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800ea12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea14:	2bb0      	cmp	r3, #176	; 0xb0
 800ea16:	d002      	beq.n	800ea1e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ea18:	230e      	movs	r3, #14
 800ea1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea1c:	e0b5      	b.n	800eb8a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ea1e:	f3ef 8310 	mrs	r3, PRIMASK
 800ea22:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800ea24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800ea26:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800ea28:	b672      	cpsid	i
    return(int_posture);
 800ea2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800ea2c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800ea2e:	4b64      	ldr	r3, [pc, #400]	; (800ebc0 <_txe_thread_create+0x1cc>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	3301      	adds	r3, #1
 800ea34:	4a62      	ldr	r2, [pc, #392]	; (800ebc0 <_txe_thread_create+0x1cc>)
 800ea36:	6013      	str	r3, [r2, #0]
 800ea38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3e:	f383 8810 	msr	PRIMASK, r3
}
 800ea42:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800ea44:	2300      	movs	r3, #0
 800ea46:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800ea48:	4b5e      	ldr	r3, [pc, #376]	; (800ebc4 <_txe_thread_create+0x1d0>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800ea4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea50:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800ea52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea54:	3b01      	subs	r3, #1
 800ea56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea58:	4413      	add	r3, r2
 800ea5a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800ea5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea5e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800ea60:	2300      	movs	r3, #0
 800ea62:	647b      	str	r3, [r7, #68]	; 0x44
 800ea64:	e02b      	b.n	800eabe <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800ea66:	68fa      	ldr	r2, [r7, #12]
 800ea68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d101      	bne.n	800ea72 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800ea72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d028      	beq.n	800eaca <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800ea78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d308      	bcc.n	800ea94 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800ea82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea84:	691b      	ldr	r3, [r3, #16]
 800ea86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d203      	bcs.n	800ea94 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800ea90:	2301      	movs	r3, #1
 800ea92:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800ea94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d308      	bcc.n	800eab0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800ea9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaa0:	691b      	ldr	r3, [r3, #16]
 800eaa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d203      	bcs.n	800eab0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800eaac:	2301      	movs	r3, #1
 800eaae:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800eab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eab6:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800eab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaba:	3301      	adds	r3, #1
 800eabc:	647b      	str	r3, [r7, #68]	; 0x44
 800eabe:	4b42      	ldr	r3, [pc, #264]	; (800ebc8 <_txe_thread_create+0x1d4>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d3ce      	bcc.n	800ea66 <_txe_thread_create+0x72>
 800eac8:	e000      	b.n	800eacc <_txe_thread_create+0xd8>
                break;
 800eaca:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eacc:	f3ef 8310 	mrs	r3, PRIMASK
 800ead0:	61fb      	str	r3, [r7, #28]
    return(posture);
 800ead2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800ead4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ead6:	b672      	cpsid	i
    return(int_posture);
 800ead8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800eada:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800eadc:	4b38      	ldr	r3, [pc, #224]	; (800ebc0 <_txe_thread_create+0x1cc>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	3b01      	subs	r3, #1
 800eae2:	4a37      	ldr	r2, [pc, #220]	; (800ebc0 <_txe_thread_create+0x1cc>)
 800eae4:	6013      	str	r3, [r2, #0]
 800eae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eae8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eaea:	6a3b      	ldr	r3, [r7, #32]
 800eaec:	f383 8810 	msr	PRIMASK, r3
}
 800eaf0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800eaf2:	f7fe fc33 	bl	800d35c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d102      	bne.n	800eb04 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800eafe:	230e      	movs	r3, #14
 800eb00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb02:	e042      	b.n	800eb8a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800eb04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d102      	bne.n	800eb10 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800eb0a:	2303      	movs	r3, #3
 800eb0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb0e:	e03c      	b.n	800eb8a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d102      	bne.n	800eb1c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800eb16:	2303      	movs	r3, #3
 800eb18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb1a:	e036      	b.n	800eb8a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800eb1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb1e:	2bc7      	cmp	r3, #199	; 0xc7
 800eb20:	d802      	bhi.n	800eb28 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800eb22:	2305      	movs	r3, #5
 800eb24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb26:	e030      	b.n	800eb8a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800eb28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb2a:	2b1f      	cmp	r3, #31
 800eb2c:	d902      	bls.n	800eb34 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800eb2e:	230f      	movs	r3, #15
 800eb30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb32:	e02a      	b.n	800eb8a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800eb34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eb36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d902      	bls.n	800eb42 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800eb3c:	2318      	movs	r3, #24
 800eb3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb40:	e023      	b.n	800eb8a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800eb42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d902      	bls.n	800eb4e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800eb48:	2310      	movs	r3, #16
 800eb4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb4c:	e01d      	b.n	800eb8a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800eb4e:	4b1f      	ldr	r3, [pc, #124]	; (800ebcc <_txe_thread_create+0x1d8>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800eb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb56:	4a1e      	ldr	r2, [pc, #120]	; (800ebd0 <_txe_thread_create+0x1dc>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d101      	bne.n	800eb60 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800eb5c:	2313      	movs	r3, #19
 800eb5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800eb60:	f3ef 8305 	mrs	r3, IPSR
 800eb64:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800eb66:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800eb68:	4b1a      	ldr	r3, [pc, #104]	; (800ebd4 <_txe_thread_create+0x1e0>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4313      	orrs	r3, r2
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d00b      	beq.n	800eb8a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800eb72:	f3ef 8305 	mrs	r3, IPSR
 800eb76:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800eb78:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800eb7a:	4b16      	ldr	r3, [pc, #88]	; (800ebd4 <_txe_thread_create+0x1e0>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	4313      	orrs	r3, r2
 800eb80:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800eb84:	d201      	bcs.n	800eb8a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800eb86:	2313      	movs	r3, #19
 800eb88:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800eb8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d112      	bne.n	800ebb6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800eb90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb92:	9305      	str	r3, [sp, #20]
 800eb94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb96:	9304      	str	r3, [sp, #16]
 800eb98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb9a:	9303      	str	r3, [sp, #12]
 800eb9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb9e:	9302      	str	r3, [sp, #8]
 800eba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eba2:	9301      	str	r3, [sp, #4]
 800eba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eba6:	9300      	str	r3, [sp, #0]
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	68b9      	ldr	r1, [r7, #8]
 800ebae:	68f8      	ldr	r0, [r7, #12]
 800ebb0:	f7fe f8c6 	bl	800cd40 <_tx_thread_create>
 800ebb4:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800ebb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3750      	adds	r7, #80	; 0x50
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	20001774 	.word	0x20001774
 800ebc4:	200016e4 	.word	0x200016e4
 800ebc8:	200016e8 	.word	0x200016e8
 800ebcc:	200016dc 	.word	0x200016dc
 800ebd0:	20001824 	.word	0x20001824
 800ebd4:	2000000c 	.word	0x2000000c

0800ebd8 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b086      	sub	sp, #24
 800ebdc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ebde:	f3ef 8310 	mrs	r3, PRIMASK
 800ebe2:	60fb      	str	r3, [r7, #12]
    return(posture);
 800ebe4:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800ebe6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ebe8:	b672      	cpsid	i
    return(int_posture);
 800ebea:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 800ebec:	617b      	str	r3, [r7, #20]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 800ebee:	463b      	mov	r3, r7
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f000 f835 	bl	800ec60 <tx_timer_get_next>
 800ebf6:	6138      	str	r0, [r7, #16]
        tx_low_power_next_expiration = 0xFFFFFFFF;
        timers_active = TX_TRUE;
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	2b01      	cmp	r3, #1
 800ebfc:	d103      	bne.n	800ec06 <tx_low_power_enter+0x2e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7f1 fe85 	bl	8000910 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 800ec06:	4b07      	ldr	r3, [pc, #28]	; (800ec24 <tx_low_power_enter+0x4c>)
 800ec08:	2201      	movs	r2, #1
 800ec0a:	601a      	str	r2, [r3, #0]
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f383 8810 	msr	PRIMASK, r3
}
 800ec16:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 800ec18:	f7f1 feae 	bl	8000978 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 800ec1c:	bf00      	nop
 800ec1e:	3718      	adds	r7, #24
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	20001d10 	.word	0x20001d10

0800ec28 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 800ec2e:	4b0b      	ldr	r3, [pc, #44]	; (800ec5c <tx_low_power_exit+0x34>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d00d      	beq.n	800ec52 <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 800ec36:	4b09      	ldr	r3, [pc, #36]	; (800ec5c <tx_low_power_exit+0x34>)
 800ec38:	2200      	movs	r2, #0
 800ec3a:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 800ec3c:	f7f1 feaa 	bl	8000994 <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 800ec40:	f7f1 ff06 	bl	8000a50 <App_ThreadX_LowPower_Timer_Adjust>
 800ec44:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d002      	beq.n	800ec52 <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f000 f86f 	bl	800ed30 <tx_time_increment>
        }
    }
}
 800ec52:	bf00      	nop
 800ec54:	3708      	adds	r7, #8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	20001d10 	.word	0x20001d10

0800ec60 <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b08d      	sub	sp, #52	; 0x34
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 800ec68:	f04f 33ff 	mov.w	r3, #4294967295
 800ec6c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ec6e:	f3ef 8310 	mrs	r3, PRIMASK
 800ec72:	617b      	str	r3, [r7, #20]
    return(posture);
 800ec74:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ec76:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ec78:	b672      	cpsid	i
    return(int_posture);
 800ec7a:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 800ec7c:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 800ec7e:	4b29      	ldr	r3, [pc, #164]	; (800ed24 <tx_timer_get_next+0xc4>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800ec84:	2300      	movs	r3, #0
 800ec86:	627b      	str	r3, [r7, #36]	; 0x24
 800ec88:	e02f      	b.n	800ecea <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 800ec8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d01d      	beq.n	800ecce <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800ec92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800ec98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b20      	cmp	r3, #32
 800ec9e:	d906      	bls.n	800ecae <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 800eca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca6:	4413      	add	r3, r2
 800eca8:	3b20      	subs	r3, #32
 800ecaa:	623b      	str	r3, [r7, #32]
 800ecac:	e001      	b.n	800ecb2 <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 800ecae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb0:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 800ecb2:	69fa      	ldr	r2, [r7, #28]
 800ecb4:	6a3b      	ldr	r3, [r7, #32]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d901      	bls.n	800ecbe <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 800ecba:	6a3b      	ldr	r3, [r7, #32]
 800ecbc:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800ecbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc0:	691b      	ldr	r3, [r3, #16]
 800ecc2:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 800ecc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d1e4      	bne.n	800ec98 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 800ecce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd0:	3304      	adds	r3, #4
 800ecd2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 800ecd4:	4b14      	ldr	r3, [pc, #80]	; (800ed28 <tx_timer_get_next+0xc8>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d302      	bcc.n	800ece4 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800ecde:	4b13      	ldr	r3, [pc, #76]	; (800ed2c <tx_timer_get_next+0xcc>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800ece4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece6:	3301      	adds	r3, #1
 800ece8:	627b      	str	r3, [r7, #36]	; 0x24
 800ecea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecec:	2b1f      	cmp	r3, #31
 800ecee:	d9cc      	bls.n	800ec8a <tx_timer_get_next+0x2a>
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f383 8810 	msr	PRIMASK, r3
}
 800ecfa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed02:	d004      	beq.n	800ed0e <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	69fa      	ldr	r2, [r7, #28]
 800ed08:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	e003      	b.n	800ed16 <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2200      	movs	r2, #0
 800ed12:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 800ed14:	2300      	movs	r3, #0
    }
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3734      	adds	r7, #52	; 0x34
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr
 800ed22:	bf00      	nop
 800ed24:	20001810 	.word	0x20001810
 800ed28:	2000180c 	.word	0x2000180c
 800ed2c:	20001808 	.word	0x20001808

0800ed30 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b08a      	sub	sp, #40	; 0x28
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	f000 809b 	beq.w	800ee76 <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ed40:	f3ef 8310 	mrs	r3, PRIMASK
 800ed44:	613b      	str	r3, [r7, #16]
    return(posture);
 800ed46:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ed48:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ed4a:	b672      	cpsid	i
    return(int_posture);
 800ed4c:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800ed4e:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 800ed50:	4b4b      	ldr	r3, [pc, #300]	; (800ee80 <tx_time_increment+0x150>)
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	4413      	add	r3, r2
 800ed58:	4a49      	ldr	r2, [pc, #292]	; (800ee80 <tx_time_increment+0x150>)
 800ed5a:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 800ed5c:	4b49      	ldr	r3, [pc, #292]	; (800ee84 <tx_time_increment+0x154>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d00e      	beq.n	800ed82 <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 800ed64:	4b47      	ldr	r3, [pc, #284]	; (800ee84 <tx_time_increment+0x154>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	687a      	ldr	r2, [r7, #4]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d206      	bcs.n	800ed7c <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800ed6e:	4b45      	ldr	r3, [pc, #276]	; (800ee84 <tx_time_increment+0x154>)
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	1ad3      	subs	r3, r2, r3
 800ed76:	4a43      	ldr	r2, [pc, #268]	; (800ee84 <tx_time_increment+0x154>)
 800ed78:	6013      	str	r3, [r2, #0]
 800ed7a:	e002      	b.n	800ed82 <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 800ed7c:	4b41      	ldr	r3, [pc, #260]	; (800ee84 <tx_time_increment+0x154>)
 800ed7e:	2201      	movs	r2, #1
 800ed80:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800ed82:	4b41      	ldr	r3, [pc, #260]	; (800ee88 <tx_time_increment+0x158>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	627b      	str	r3, [r7, #36]	; 0x24
 800ed90:	e046      	b.n	800ee20 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800ed92:	6a3b      	ldr	r3, [r7, #32]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d034      	beq.n	800ee04 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800ed9a:	6a3b      	ldr	r3, [r7, #32]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2b20      	cmp	r3, #32
 800eda6:	d908      	bls.n	800edba <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	681a      	ldr	r2, [r3, #0]
 800edac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edae:	4413      	add	r3, r2
 800edb0:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	601a      	str	r2, [r3, #0]
 800edb8:	e003      	b.n	800edc2 <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 800edba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbc:	1c5a      	adds	r2, r3, #1
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800edc2:	69fb      	ldr	r3, [r7, #28]
 800edc4:	691b      	ldr	r3, [r3, #16]
 800edc6:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 800edc8:	6a3b      	ldr	r3, [r7, #32]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	69fa      	ldr	r2, [r7, #28]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d1e6      	bne.n	800eda0 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800edd2:	6a3b      	ldr	r3, [r7, #32]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	695b      	ldr	r3, [r3, #20]
 800edd8:	2200      	movs	r2, #0
 800edda:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d103      	bne.n	800edea <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 800ede2:	6a3b      	ldr	r3, [r7, #32]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	61bb      	str	r3, [r7, #24]
 800ede8:	e009      	b.n	800edfe <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 800edea:	69bb      	ldr	r3, [r7, #24]
 800edec:	695b      	ldr	r3, [r3, #20]
 800edee:	6a3a      	ldr	r2, [r7, #32]
 800edf0:	6812      	ldr	r2, [r2, #0]
 800edf2:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 800edf4:	6a3b      	ldr	r3, [r7, #32]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	695a      	ldr	r2, [r3, #20]
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 800edfe:	6a3b      	ldr	r3, [r7, #32]
 800ee00:	2200      	movs	r2, #0
 800ee02:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 800ee04:	6a3b      	ldr	r3, [r7, #32]
 800ee06:	3304      	adds	r3, #4
 800ee08:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 800ee0a:	4b20      	ldr	r3, [pc, #128]	; (800ee8c <tx_time_increment+0x15c>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	6a3a      	ldr	r2, [r7, #32]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d302      	bcc.n	800ee1a <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800ee14:	4b1e      	ldr	r3, [pc, #120]	; (800ee90 <tx_time_increment+0x160>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800ee1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ee20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee22:	2b1f      	cmp	r3, #31
 800ee24:	d9b5      	bls.n	800ed92 <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 800ee26:	4b1a      	ldr	r3, [pc, #104]	; (800ee90 <tx_time_increment+0x160>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4a17      	ldr	r2, [pc, #92]	; (800ee88 <tx_time_increment+0x158>)
 800ee2c:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 800ee2e:	e019      	b.n	800ee64 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 800ee34:	69fb      	ldr	r3, [r7, #28]
 800ee36:	691b      	ldr	r3, [r3, #16]
 800ee38:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 800ee3a:	69fb      	ldr	r3, [r7, #28]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d206      	bcs.n	800ee52 <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	1ad2      	subs	r2, r2, r3
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	601a      	str	r2, [r3, #0]
 800ee50:	e002      	b.n	800ee58 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	2201      	movs	r2, #1
 800ee56:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 800ee58:	69fb      	ldr	r3, [r7, #28]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 800ee5e:	69f8      	ldr	r0, [r7, #28]
 800ee60:	f7ff f81a 	bl	800de98 <_tx_timer_system_activate>
    while (temp_list_head)
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d1e2      	bne.n	800ee30 <tx_time_increment+0x100>
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	f383 8810 	msr	PRIMASK, r3
}
 800ee74:	e000      	b.n	800ee78 <tx_time_increment+0x148>
        return;
 800ee76:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800ee78:	3728      	adds	r7, #40	; 0x28
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	20001780 	.word	0x20001780
 800ee84:	20001ce0 	.word	0x20001ce0
 800ee88:	20001810 	.word	0x20001810
 800ee8c:	2000180c 	.word	0x2000180c
 800ee90:	20001808 	.word	0x20001808

0800ee94 <fm_calendar_format_date>:
 * en fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_date()
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b088      	sub	sp, #32
 800ee98:	af02      	add	r7, sp, #8
    int date_int = 0;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	617b      	str	r3, [r7, #20]
    char date_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800ee9e:	f000 f845 	bl	800ef2c <fm_calendar_get>
    sprintf(date_arr, "%02d%02d20%02d", sDate.Date, sDate.Month, sDate.Year);
 800eea2:	4b0d      	ldr	r3, [pc, #52]	; (800eed8 <fm_calendar_format_date+0x44>)
 800eea4:	789b      	ldrb	r3, [r3, #2]
 800eea6:	461a      	mov	r2, r3
 800eea8:	4b0b      	ldr	r3, [pc, #44]	; (800eed8 <fm_calendar_format_date+0x44>)
 800eeaa:	785b      	ldrb	r3, [r3, #1]
 800eeac:	4619      	mov	r1, r3
 800eeae:	4b0a      	ldr	r3, [pc, #40]	; (800eed8 <fm_calendar_format_date+0x44>)
 800eeb0:	78db      	ldrb	r3, [r3, #3]
 800eeb2:	4638      	mov	r0, r7
 800eeb4:	9300      	str	r3, [sp, #0]
 800eeb6:	460b      	mov	r3, r1
 800eeb8:	4908      	ldr	r1, [pc, #32]	; (800eedc <fm_calendar_format_date+0x48>)
 800eeba:	f006 f805 	bl	8014ec8 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    date_int = atoi(date_arr);
 800eebe:	463b      	mov	r3, r7
 800eec0:	4618      	mov	r0, r3
 800eec2:	f005 ff97 	bl	8014df4 <atoi>
 800eec6:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_date(date_int);
 800eec8:	6978      	ldr	r0, [r7, #20]
 800eeca:	f000 fa33 	bl	800f334 <fm_factory_modify_fp_date>
}
 800eece:	bf00      	nop
 800eed0:	3718      	adds	r7, #24
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	20001d28 	.word	0x20001d28
 800eedc:	0801597c 	.word	0x0801597c

0800eee0 <fm_calendar_format_time>:
 * fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_time()
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b088      	sub	sp, #32
 800eee4:	af02      	add	r7, sp, #8
    int time_int = 0;
 800eee6:	2300      	movs	r3, #0
 800eee8:	617b      	str	r3, [r7, #20]
    char time_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800eeea:	f000 f81f 	bl	800ef2c <fm_calendar_get>
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800eeee:	4b0d      	ldr	r3, [pc, #52]	; (800ef24 <fm_calendar_format_time+0x44>)
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	461a      	mov	r2, r3
 800eef4:	4b0b      	ldr	r3, [pc, #44]	; (800ef24 <fm_calendar_format_time+0x44>)
 800eef6:	785b      	ldrb	r3, [r3, #1]
 800eef8:	4619      	mov	r1, r3
    sTime.Seconds);
 800eefa:	4b0a      	ldr	r3, [pc, #40]	; (800ef24 <fm_calendar_format_time+0x44>)
 800eefc:	789b      	ldrb	r3, [r3, #2]
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800eefe:	4638      	mov	r0, r7
 800ef00:	9300      	str	r3, [sp, #0]
 800ef02:	460b      	mov	r3, r1
 800ef04:	4908      	ldr	r1, [pc, #32]	; (800ef28 <fm_calendar_format_time+0x48>)
 800ef06:	f005 ffdf 	bl	8014ec8 <siprintf>
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */

    time_int = atoi(time_arr);
 800ef0a:	463b      	mov	r3, r7
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f005 ff71 	bl	8014df4 <atoi>
 800ef12:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_time(time_int);
 800ef14:	6978      	ldr	r0, [r7, #20]
 800ef16:	f000 fa1d 	bl	800f354 <fm_factory_modify_fp_time>
}
 800ef1a:	bf00      	nop
 800ef1c:	3718      	adds	r7, #24
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	20001d14 	.word	0x20001d14
 800ef28:	0801598c 	.word	0x0801598c

0800ef2c <fm_calendar_get>:
 * usa.
 * @param None
 * @retval None
 */
void fm_calendar_get()
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	af00      	add	r7, sp, #0
     *     __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
     *     HAL_RTC_WaitForSynchro(&hrtc);
     *     __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
     */

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800ef30:	2200      	movs	r2, #0
 800ef32:	4905      	ldr	r1, [pc, #20]	; (800ef48 <fm_calendar_get+0x1c>)
 800ef34:	4805      	ldr	r0, [pc, #20]	; (800ef4c <fm_calendar_get+0x20>)
 800ef36:	f7fa fa3b 	bl	80093b0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	4904      	ldr	r1, [pc, #16]	; (800ef50 <fm_calendar_get+0x24>)
 800ef3e:	4803      	ldr	r0, [pc, #12]	; (800ef4c <fm_calendar_get+0x20>)
 800ef40:	f7fa fb2e 	bl	80095a0 <HAL_RTC_GetDate>
}
 800ef44:	bf00      	nop
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	20001d14 	.word	0x20001d14
 800ef4c:	200014fc 	.word	0x200014fc
 800ef50:	20001d28 	.word	0x20001d28

0800ef54 <fm_calendar_get_day>:
 * @brief Función que lee el día desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Día leido del calendario.
 */
int fm_calendar_get_day()
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ef58:	f7ff ffe8 	bl	800ef2c <fm_calendar_get>
    return (sDate.Date);
 800ef5c:	4b01      	ldr	r3, [pc, #4]	; (800ef64 <fm_calendar_get_day+0x10>)
 800ef5e:	789b      	ldrb	r3, [r3, #2]
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	bd80      	pop	{r7, pc}
 800ef64:	20001d28 	.word	0x20001d28

0800ef68 <fm_calendar_get_hour>:
 * @brief Función que lee la hora desde el RTC y la devuelve como parámetro.
 * @param None
 * @retval Hora leida del calendario.
 */
int fm_calendar_get_hour()
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ef6c:	f7ff ffde 	bl	800ef2c <fm_calendar_get>
    return (sTime.Hours);
 800ef70:	4b01      	ldr	r3, [pc, #4]	; (800ef78 <fm_calendar_get_hour+0x10>)
 800ef72:	781b      	ldrb	r3, [r3, #0]
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	20001d14 	.word	0x20001d14

0800ef7c <fm_calendar_get_minute>:
 * parámetro.
 * @param None
 * @retval Minutos leidos del calendario.
 */
int fm_calendar_get_minute()
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ef80:	f7ff ffd4 	bl	800ef2c <fm_calendar_get>
    return (sTime.Minutes);
 800ef84:	4b01      	ldr	r3, [pc, #4]	; (800ef8c <fm_calendar_get_minute+0x10>)
 800ef86:	785b      	ldrb	r3, [r3, #1]
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	20001d14 	.word	0x20001d14

0800ef90 <fm_calendar_get_month>:
 * @brief Función que lee el mes desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Mes leido del calendario.
 */
int fm_calendar_get_month()
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ef94:	f7ff ffca 	bl	800ef2c <fm_calendar_get>
    return (sDate.Month);
 800ef98:	4b01      	ldr	r3, [pc, #4]	; (800efa0 <fm_calendar_get_month+0x10>)
 800ef9a:	785b      	ldrb	r3, [r3, #1]
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	20001d28 	.word	0x20001d28

0800efa4 <fm_calendar_get_second>:
 * parámetro.
 * @param None
 * @retval Segundos leidos del calendario.
 */
int fm_calendar_get_second()
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800efa8:	f7ff ffc0 	bl	800ef2c <fm_calendar_get>
    return (sTime.Seconds);
 800efac:	4b01      	ldr	r3, [pc, #4]	; (800efb4 <fm_calendar_get_second+0x10>)
 800efae:	789b      	ldrb	r3, [r3, #2]
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	20001d14 	.word	0x20001d14

0800efb8 <fm_calendar_get_year>:
 * @brief Función que lee el año desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Año leido del calendario.
 */
int fm_calendar_get_year()
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800efbc:	f7ff ffb6 	bl	800ef2c <fm_calendar_get>
    return (sDate.Year);
 800efc0:	4b01      	ldr	r3, [pc, #4]	; (800efc8 <fm_calendar_get_year+0x10>)
 800efc2:	78db      	ldrb	r3, [r3, #3]
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	20001d28 	.word	0x20001d28

0800efcc <fm_factory_get_acm>:
 * @brief Función que devuelve el parámetro ACM almacenado en fm_factory.
 * @param None
 * @retval Parámetro ACM como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_acm()
{
 800efcc:	b4b0      	push	{r4, r5, r7}
 800efce:	b083      	sub	sp, #12
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
    return (acm_config);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a07      	ldr	r2, [pc, #28]	; (800eff4 <fm_factory_get_acm+0x28>)
 800efd8:	461c      	mov	r4, r3
 800efda:	4615      	mov	r5, r2
 800efdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efe0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800efe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	bcb0      	pop	{r4, r5, r7}
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop
 800eff4:	20000030 	.word	0x20000030

0800eff8 <fm_factory_get_date_time>:
 * @param None
 * @retval Hora, minutos, segundos, día, mes y año almacenados en
 * date_time_config.
 */
fmc_date_time_t fm_factory_get_date_time()
{
 800eff8:	b4b0      	push	{r4, r5, r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
    return (date_time_config);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	4a07      	ldr	r2, [pc, #28]	; (800f020 <fm_factory_get_date_time+0x28>)
 800f004:	461c      	mov	r4, r3
 800f006:	4615      	mov	r5, r2
 800f008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f00a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f00c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f010:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	370c      	adds	r7, #12
 800f018:	46bd      	mov	sp, r7
 800f01a:	bcb0      	pop	{r4, r5, r7}
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	2000007c 	.word	0x2000007c

0800f024 <fm_factory_get_fp_date>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha.
 */
fmc_fp_t fm_factory_get_fp_date()
{
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
    return (date_user);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	4a05      	ldr	r2, [pc, #20]	; (800f044 <fm_factory_get_fp_date+0x20>)
 800f030:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f034:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	370c      	adds	r7, #12
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr
 800f044:	20000104 	.word	0x20000104

0800f048 <fm_factory_get_fp_date_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha congelada.
 */
fmc_fp_t fm_factory_get_fp_date_conf()
{
 800f048:	b480      	push	{r7}
 800f04a:	b083      	sub	sp, #12
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
    return (date_config);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	4a05      	ldr	r2, [pc, #20]	; (800f068 <fm_factory_get_fp_date_conf+0x20>)
 800f054:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f058:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	370c      	adds	r7, #12
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr
 800f068:	20000114 	.word	0x20000114

0800f06c <fm_factory_get_fp_time>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora.
 */
fmc_fp_t fm_factory_get_fp_time()
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
    return (time_user);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4a05      	ldr	r2, [pc, #20]	; (800f08c <fm_factory_get_fp_time+0x20>)
 800f078:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f07c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	370c      	adds	r7, #12
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr
 800f08c:	200000fc 	.word	0x200000fc

0800f090 <fm_factory_get_fp_time_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora congelada.
 */
fmc_fp_t fm_factory_get_fp_time_conf()
{
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
    return (time_config);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	4a05      	ldr	r2, [pc, #20]	; (800f0b0 <fm_factory_get_fp_time_conf+0x20>)
 800f09c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0a0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	370c      	adds	r7, #12
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr
 800f0b0:	2000010c 	.word	0x2000010c

0800f0b4 <fm_factory_get_frec_lin>:

fmc_fp_t fm_factory_get_frec_lin(sel_k k_sel)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	460b      	mov	r3, r1
 800f0be:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t frec_lin_selected;

    if (k_sel == K_LIN_1)
 800f0c0:	78fb      	ldrb	r3, [r7, #3]
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	d106      	bne.n	800f0d4 <fm_factory_get_frec_lin+0x20>
    {
        frec_lin_selected = frec_lin_1;
 800f0c6:	4b1d      	ldr	r3, [pc, #116]	; (800f13c <fm_factory_get_frec_lin+0x88>)
 800f0c8:	4a1d      	ldr	r2, [pc, #116]	; (800f140 <fm_factory_get_frec_lin+0x8c>)
 800f0ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0ce:	e883 0003 	stmia.w	r3, {r0, r1}
 800f0d2:	e026      	b.n	800f122 <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_2)
 800f0d4:	78fb      	ldrb	r3, [r7, #3]
 800f0d6:	2b02      	cmp	r3, #2
 800f0d8:	d106      	bne.n	800f0e8 <fm_factory_get_frec_lin+0x34>
    {
        frec_lin_selected = frec_lin_2;
 800f0da:	4b18      	ldr	r3, [pc, #96]	; (800f13c <fm_factory_get_frec_lin+0x88>)
 800f0dc:	4a19      	ldr	r2, [pc, #100]	; (800f144 <fm_factory_get_frec_lin+0x90>)
 800f0de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0e2:	e883 0003 	stmia.w	r3, {r0, r1}
 800f0e6:	e01c      	b.n	800f122 <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_3)
 800f0e8:	78fb      	ldrb	r3, [r7, #3]
 800f0ea:	2b03      	cmp	r3, #3
 800f0ec:	d106      	bne.n	800f0fc <fm_factory_get_frec_lin+0x48>
    {
        frec_lin_selected = frec_lin_3;
 800f0ee:	4b13      	ldr	r3, [pc, #76]	; (800f13c <fm_factory_get_frec_lin+0x88>)
 800f0f0:	4a15      	ldr	r2, [pc, #84]	; (800f148 <fm_factory_get_frec_lin+0x94>)
 800f0f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0f6:	e883 0003 	stmia.w	r3, {r0, r1}
 800f0fa:	e012      	b.n	800f122 <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_4)
 800f0fc:	78fb      	ldrb	r3, [r7, #3]
 800f0fe:	2b04      	cmp	r3, #4
 800f100:	d106      	bne.n	800f110 <fm_factory_get_frec_lin+0x5c>
    {
        frec_lin_selected = frec_lin_4;
 800f102:	4b0e      	ldr	r3, [pc, #56]	; (800f13c <fm_factory_get_frec_lin+0x88>)
 800f104:	4a11      	ldr	r2, [pc, #68]	; (800f14c <fm_factory_get_frec_lin+0x98>)
 800f106:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f10a:	e883 0003 	stmia.w	r3, {r0, r1}
 800f10e:	e008      	b.n	800f122 <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_5)
 800f110:	78fb      	ldrb	r3, [r7, #3]
 800f112:	2b05      	cmp	r3, #5
 800f114:	d105      	bne.n	800f122 <fm_factory_get_frec_lin+0x6e>
    {
        frec_lin_selected = frec_lin_5;
 800f116:	4b09      	ldr	r3, [pc, #36]	; (800f13c <fm_factory_get_frec_lin+0x88>)
 800f118:	4a0d      	ldr	r2, [pc, #52]	; (800f150 <fm_factory_get_frec_lin+0x9c>)
 800f11a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f11e:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (frec_lin_selected);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4a05      	ldr	r2, [pc, #20]	; (800f13c <fm_factory_get_frec_lin+0x88>)
 800f126:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f12a:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	370c      	adds	r7, #12
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop
 800f13c:	20001d44 	.word	0x20001d44
 800f140:	200000a4 	.word	0x200000a4
 800f144:	200000ac 	.word	0x200000ac
 800f148:	200000b4 	.word	0x200000b4
 800f14c:	200000bc 	.word	0x200000bc
 800f150:	200000c4 	.word	0x200000c4

0800f154 <fm_factory_get_k_factor>:
 * @brief Función que devuelve el factor K almacenado en fm_factory.
 * @param None
 * @retval Factor K.
 */
fmc_fp_t fm_factory_get_k_factor(sel_k k_sel)
{
 800f154:	b480      	push	{r7}
 800f156:	b083      	sub	sp, #12
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	460b      	mov	r3, r1
 800f15e:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t k_selected;
    if (k_sel == K_FACTOR)
 800f160:	78fb      	ldrb	r3, [r7, #3]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d106      	bne.n	800f174 <fm_factory_get_k_factor+0x20>
    {
        k_selected = k_factor_config;
 800f166:	4b22      	ldr	r3, [pc, #136]	; (800f1f0 <fm_factory_get_k_factor+0x9c>)
 800f168:	4a22      	ldr	r2, [pc, #136]	; (800f1f4 <fm_factory_get_k_factor+0xa0>)
 800f16a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f16e:	e883 0003 	stmia.w	r3, {r0, r1}
 800f172:	e030      	b.n	800f1d6 <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_1)
 800f174:	78fb      	ldrb	r3, [r7, #3]
 800f176:	2b01      	cmp	r3, #1
 800f178:	d106      	bne.n	800f188 <fm_factory_get_k_factor+0x34>
    {
        k_selected = k_lin_1_config;
 800f17a:	4b1d      	ldr	r3, [pc, #116]	; (800f1f0 <fm_factory_get_k_factor+0x9c>)
 800f17c:	4a1e      	ldr	r2, [pc, #120]	; (800f1f8 <fm_factory_get_k_factor+0xa4>)
 800f17e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f182:	e883 0003 	stmia.w	r3, {r0, r1}
 800f186:	e026      	b.n	800f1d6 <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_2)
 800f188:	78fb      	ldrb	r3, [r7, #3]
 800f18a:	2b02      	cmp	r3, #2
 800f18c:	d106      	bne.n	800f19c <fm_factory_get_k_factor+0x48>
    {
        k_selected = k_lin_2_config;
 800f18e:	4b18      	ldr	r3, [pc, #96]	; (800f1f0 <fm_factory_get_k_factor+0x9c>)
 800f190:	4a1a      	ldr	r2, [pc, #104]	; (800f1fc <fm_factory_get_k_factor+0xa8>)
 800f192:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f196:	e883 0003 	stmia.w	r3, {r0, r1}
 800f19a:	e01c      	b.n	800f1d6 <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_3)
 800f19c:	78fb      	ldrb	r3, [r7, #3]
 800f19e:	2b03      	cmp	r3, #3
 800f1a0:	d106      	bne.n	800f1b0 <fm_factory_get_k_factor+0x5c>
    {
        k_selected = k_lin_3_config;
 800f1a2:	4b13      	ldr	r3, [pc, #76]	; (800f1f0 <fm_factory_get_k_factor+0x9c>)
 800f1a4:	4a16      	ldr	r2, [pc, #88]	; (800f200 <fm_factory_get_k_factor+0xac>)
 800f1a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1aa:	e883 0003 	stmia.w	r3, {r0, r1}
 800f1ae:	e012      	b.n	800f1d6 <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_4)
 800f1b0:	78fb      	ldrb	r3, [r7, #3]
 800f1b2:	2b04      	cmp	r3, #4
 800f1b4:	d106      	bne.n	800f1c4 <fm_factory_get_k_factor+0x70>
    {
        k_selected = k_lin_4_config;
 800f1b6:	4b0e      	ldr	r3, [pc, #56]	; (800f1f0 <fm_factory_get_k_factor+0x9c>)
 800f1b8:	4a12      	ldr	r2, [pc, #72]	; (800f204 <fm_factory_get_k_factor+0xb0>)
 800f1ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1be:	e883 0003 	stmia.w	r3, {r0, r1}
 800f1c2:	e008      	b.n	800f1d6 <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_5)
 800f1c4:	78fb      	ldrb	r3, [r7, #3]
 800f1c6:	2b05      	cmp	r3, #5
 800f1c8:	d105      	bne.n	800f1d6 <fm_factory_get_k_factor+0x82>
    {
        k_selected = k_lin_5_config;
 800f1ca:	4b09      	ldr	r3, [pc, #36]	; (800f1f0 <fm_factory_get_k_factor+0x9c>)
 800f1cc:	4a0e      	ldr	r2, [pc, #56]	; (800f208 <fm_factory_get_k_factor+0xb4>)
 800f1ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1d2:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (k_selected);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4a05      	ldr	r2, [pc, #20]	; (800f1f0 <fm_factory_get_k_factor+0x9c>)
 800f1da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1de:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	370c      	adds	r7, #12
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ec:	4770      	bx	lr
 800f1ee:	bf00      	nop
 800f1f0:	20001d4c 	.word	0x20001d4c
 800f1f4:	200000f4 	.word	0x200000f4
 800f1f8:	200000cc 	.word	0x200000cc
 800f1fc:	200000d4 	.word	0x200000d4
 800f200:	200000dc 	.word	0x200000dc
 800f204:	200000e4 	.word	0x200000e4
 800f208:	200000ec 	.word	0x200000ec

0800f20c <fm_factory_get_rate>:
 * @brief Función que devuelve el parámetro RATE almacenado en fm_factory.
 * @param None
 * @retval Parámetro RATE como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_rate()
{
 800f20c:	b4b0      	push	{r4, r5, r7}
 800f20e:	b083      	sub	sp, #12
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
    return (rate_config);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	4a07      	ldr	r2, [pc, #28]	; (800f234 <fm_factory_get_rate+0x28>)
 800f218:	461c      	mov	r4, r3
 800f21a:	4615      	mov	r5, r2
 800f21c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f21e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f220:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f224:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	370c      	adds	r7, #12
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bcb0      	pop	{r4, r5, r7}
 800f230:	4770      	bx	lr
 800f232:	bf00      	nop
 800f234:	20000050 	.word	0x20000050

0800f238 <fm_factory_get_temp>:
 * fm_factory.
 * @param None
 * @retval Temperatura interna del micro como estructura de tipo fmc_temp_t.
 */
fmc_temp_t fm_factory_get_temp()
{
 800f238:	b480      	push	{r7}
 800f23a:	b083      	sub	sp, #12
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
    return (temperature_config);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	4a05      	ldr	r2, [pc, #20]	; (800f258 <fm_factory_get_temp+0x20>)
 800f244:	ca07      	ldmia	r2, {r0, r1, r2}
 800f246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	370c      	adds	r7, #12
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop
 800f258:	20000070 	.word	0x20000070

0800f25c <fm_factory_get_ttl>:
 * @brief Función que devuelve el parámetro TTL almacenado en fm_factory.
 * @param None
 * @retval Parámetro TTL como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_ttl()
{
 800f25c:	b4b0      	push	{r4, r5, r7}
 800f25e:	b083      	sub	sp, #12
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
    return (ttl_config);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4a07      	ldr	r2, [pc, #28]	; (800f284 <fm_factory_get_ttl+0x28>)
 800f268:	461c      	mov	r4, r3
 800f26a:	4615      	mov	r5, r2
 800f26c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f26e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f270:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	370c      	adds	r7, #12
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bcb0      	pop	{r4, r5, r7}
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	20000010 	.word	0x20000010

0800f288 <fm_factory_get_units_tim>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_tim()
{
 800f288:	b480      	push	{r7}
 800f28a:	b083      	sub	sp, #12
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
    return (units_digits_tim);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	4a05      	ldr	r2, [pc, #20]	; (800f2a8 <fm_factory_get_units_tim+0x20>)
 800f294:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f298:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	370c      	adds	r7, #12
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr
 800f2a8:	20000094 	.word	0x20000094

0800f2ac <fm_factory_get_units_vol>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_vol()
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
    return (units_digits_vol);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	4a05      	ldr	r2, [pc, #20]	; (800f2cc <fm_factory_get_units_vol+0x20>)
 800f2b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2bc:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr
 800f2cc:	2000009c 	.word	0x2000009c

0800f2d0 <fm_factory_modify_date>:
 * fijo.
 * @param día, mes y año leídos del calendario.
 * @retval None
 */
void fm_factory_modify_date(int mod_day, int mod_month, int mod_year)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b085      	sub	sp, #20
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	60b9      	str	r1, [r7, #8]
 800f2da:	607a      	str	r2, [r7, #4]
    static const int century = 2000;
    static const int day_mult = 1000000;
    static const int month_mult = 10000;

    date_time_config.day = mod_day;
 800f2dc:	4a10      	ldr	r2, [pc, #64]	; (800f320 <fm_factory_modify_date+0x50>)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	6013      	str	r3, [r2, #0]
    date_time_config.month = mod_month;
 800f2e2:	4a0f      	ldr	r2, [pc, #60]	; (800f320 <fm_factory_modify_date+0x50>)
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	6053      	str	r3, [r2, #4]
    date_time_config.year = mod_year;
 800f2e8:	4a0d      	ldr	r2, [pc, #52]	; (800f320 <fm_factory_modify_date+0x50>)
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6093      	str	r3, [r2, #8]

    date_config.num = mod_day * day_mult + mod_month * month_mult + century
 800f2ee:	4b0d      	ldr	r3, [pc, #52]	; (800f324 <fm_factory_modify_date+0x54>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	68fa      	ldr	r2, [r7, #12]
 800f2f4:	fb03 f202 	mul.w	r2, r3, r2
 800f2f8:	4b0b      	ldr	r3, [pc, #44]	; (800f328 <fm_factory_modify_date+0x58>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	68b9      	ldr	r1, [r7, #8]
 800f2fe:	fb01 f303 	mul.w	r3, r1, r3
 800f302:	441a      	add	r2, r3
 800f304:	4b09      	ldr	r3, [pc, #36]	; (800f32c <fm_factory_modify_date+0x5c>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	441a      	add	r2, r3
    + mod_year;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4413      	add	r3, r2
 800f30e:	461a      	mov	r2, r3
    date_config.num = mod_day * day_mult + mod_month * month_mult + century
 800f310:	4b07      	ldr	r3, [pc, #28]	; (800f330 <fm_factory_modify_date+0x60>)
 800f312:	601a      	str	r2, [r3, #0]
}
 800f314:	bf00      	nop
 800f316:	3714      	adds	r7, #20
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr
 800f320:	2000007c 	.word	0x2000007c
 800f324:	08015ac0 	.word	0x08015ac0
 800f328:	08015ac4 	.word	0x08015ac4
 800f32c:	08015ac8 	.word	0x08015ac8
 800f330:	20000114 	.word	0x20000114

0800f334 <fm_factory_modify_fp_date>:
 * fijo.
 * @param Fecha a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_date(int date)
{
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
    date_user.num = date;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	4a04      	ldr	r2, [pc, #16]	; (800f350 <fm_factory_modify_fp_date+0x1c>)
 800f340:	6013      	str	r3, [r2, #0]
}
 800f342:	bf00      	nop
 800f344:	370c      	adds	r7, #12
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	20000104 	.word	0x20000104

0800f354 <fm_factory_modify_fp_time>:
 * fijo.
 * @param Hora a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_time(int time)
{
 800f354:	b480      	push	{r7}
 800f356:	b083      	sub	sp, #12
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
    time_user.num = time;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	4a04      	ldr	r2, [pc, #16]	; (800f370 <fm_factory_modify_fp_time+0x1c>)
 800f360:	6013      	str	r3, [r2, #0]
}
 800f362:	bf00      	nop
 800f364:	370c      	adds	r7, #12
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	200000fc 	.word	0x200000fc

0800f374 <fm_factory_modify_k_factor_add>:
 * @brief Función que suma uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_add(sel_digit_t digit_k)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	4603      	mov	r3, r0
 800f37c:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800f37e:	2300      	movs	r3, #0
 800f380:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800f382:	f000 fb27 	bl	800f9d4 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] < VAL_9)
 800f386:	79fb      	ldrb	r3, [r7, #7]
 800f388:	f1c3 0307 	rsb	r3, r3, #7
 800f38c:	4a17      	ldr	r2, [pc, #92]	; (800f3ec <fm_factory_modify_k_factor_add+0x78>)
 800f38e:	5cd3      	ldrb	r3, [r2, r3]
 800f390:	2b08      	cmp	r3, #8
 800f392:	d809      	bhi.n	800f3a8 <fm_factory_modify_k_factor_add+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]++;
 800f394:	79fb      	ldrb	r3, [r7, #7]
 800f396:	f1c3 0307 	rsb	r3, r3, #7
 800f39a:	4a14      	ldr	r2, [pc, #80]	; (800f3ec <fm_factory_modify_k_factor_add+0x78>)
 800f39c:	5cd2      	ldrb	r2, [r2, r3]
 800f39e:	3201      	adds	r2, #1
 800f3a0:	b2d1      	uxtb	r1, r2
 800f3a2:	4a12      	ldr	r2, [pc, #72]	; (800f3ec <fm_factory_modify_k_factor_add+0x78>)
 800f3a4:	54d1      	strb	r1, [r2, r3]
 800f3a6:	e005      	b.n	800f3b4 <fm_factory_modify_k_factor_add+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_0;
 800f3a8:	79fb      	ldrb	r3, [r7, #7]
 800f3aa:	f1c3 0307 	rsb	r3, r3, #7
 800f3ae:	4a0f      	ldr	r2, [pc, #60]	; (800f3ec <fm_factory_modify_k_factor_add+0x78>)
 800f3b0:	2100      	movs	r1, #0
 800f3b2:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	60bb      	str	r3, [r7, #8]
 800f3b8:	e00d      	b.n	800f3d6 <fm_factory_modify_k_factor_add+0x62>
    {
        k_new_num = (k_new_num * ten_multipllier) + k_array[i];
 800f3ba:	230a      	movs	r3, #10
 800f3bc:	461a      	mov	r2, r3
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	fb02 f303 	mul.w	r3, r2, r3
 800f3c4:	4909      	ldr	r1, [pc, #36]	; (800f3ec <fm_factory_modify_k_factor_add+0x78>)
 800f3c6:	68ba      	ldr	r2, [r7, #8]
 800f3c8:	440a      	add	r2, r1
 800f3ca:	7812      	ldrb	r2, [r2, #0]
 800f3cc:	4413      	add	r3, r2
 800f3ce:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	60bb      	str	r3, [r7, #8]
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	2b07      	cmp	r3, #7
 800f3da:	ddee      	ble.n	800f3ba <fm_factory_modify_k_factor_add+0x46>
    }

    k_factor_config.num = k_new_num;
 800f3dc:	4a04      	ldr	r2, [pc, #16]	; (800f3f0 <fm_factory_modify_k_factor_add+0x7c>)
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6013      	str	r3, [r2, #0]
}
 800f3e2:	bf00      	nop
 800f3e4:	3710      	adds	r7, #16
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	20001d2c 	.word	0x20001d2c
 800f3f0:	200000f4 	.word	0x200000f4

0800f3f4 <fm_factory_modify_k_factor_subs>:
 * @brief Función que resta uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_subs(sel_digit_t digit_k)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b084      	sub	sp, #16
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800f3fe:	2300      	movs	r3, #0
 800f400:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800f402:	f000 fae7 	bl	800f9d4 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] > VAL_0)
 800f406:	79fb      	ldrb	r3, [r7, #7]
 800f408:	f1c3 0307 	rsb	r3, r3, #7
 800f40c:	4a17      	ldr	r2, [pc, #92]	; (800f46c <fm_factory_modify_k_factor_subs+0x78>)
 800f40e:	5cd3      	ldrb	r3, [r2, r3]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d009      	beq.n	800f428 <fm_factory_modify_k_factor_subs+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]--;
 800f414:	79fb      	ldrb	r3, [r7, #7]
 800f416:	f1c3 0307 	rsb	r3, r3, #7
 800f41a:	4a14      	ldr	r2, [pc, #80]	; (800f46c <fm_factory_modify_k_factor_subs+0x78>)
 800f41c:	5cd2      	ldrb	r2, [r2, r3]
 800f41e:	3a01      	subs	r2, #1
 800f420:	b2d1      	uxtb	r1, r2
 800f422:	4a12      	ldr	r2, [pc, #72]	; (800f46c <fm_factory_modify_k_factor_subs+0x78>)
 800f424:	54d1      	strb	r1, [r2, r3]
 800f426:	e005      	b.n	800f434 <fm_factory_modify_k_factor_subs+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_9;
 800f428:	79fb      	ldrb	r3, [r7, #7]
 800f42a:	f1c3 0307 	rsb	r3, r3, #7
 800f42e:	4a0f      	ldr	r2, [pc, #60]	; (800f46c <fm_factory_modify_k_factor_subs+0x78>)
 800f430:	2109      	movs	r1, #9
 800f432:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f434:	2300      	movs	r3, #0
 800f436:	60bb      	str	r3, [r7, #8]
 800f438:	e00d      	b.n	800f456 <fm_factory_modify_k_factor_subs+0x62>
    {
        k_new_num = (k_new_num * ten_multipllier) + k_array[i];
 800f43a:	230a      	movs	r3, #10
 800f43c:	461a      	mov	r2, r3
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	fb02 f303 	mul.w	r3, r2, r3
 800f444:	4909      	ldr	r1, [pc, #36]	; (800f46c <fm_factory_modify_k_factor_subs+0x78>)
 800f446:	68ba      	ldr	r2, [r7, #8]
 800f448:	440a      	add	r2, r1
 800f44a:	7812      	ldrb	r2, [r2, #0]
 800f44c:	4413      	add	r3, r2
 800f44e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	3301      	adds	r3, #1
 800f454:	60bb      	str	r3, [r7, #8]
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	2b07      	cmp	r3, #7
 800f45a:	ddee      	ble.n	800f43a <fm_factory_modify_k_factor_subs+0x46>
    }

    k_factor_config.num = k_new_num;
 800f45c:	4a04      	ldr	r2, [pc, #16]	; (800f470 <fm_factory_modify_k_factor_subs+0x7c>)
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	6013      	str	r3, [r2, #0]
}
 800f462:	bf00      	nop
 800f464:	3710      	adds	r7, #16
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
 800f46a:	bf00      	nop
 800f46c:	20001d2c 	.word	0x20001d2c
 800f470:	200000f4 	.word	0x200000f4

0800f474 <fm_factory_modify_k_lin_add>:
 * @param Digito a modificar del factor K de la enumeración sel_digit_k_lin_t y
 * factor k linealizado seleccionado.
 * @retval None
 */
void fm_factory_modify_k_lin_add(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b086      	sub	sp, #24
 800f478:	af00      	add	r7, sp, #0
 800f47a:	4603      	mov	r3, r0
 800f47c:	460a      	mov	r2, r1
 800f47e:	71fb      	strb	r3, [r7, #7]
 800f480:	4613      	mov	r3, r2
 800f482:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f484:	2300      	movs	r3, #0
 800f486:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f488:	2300      	movs	r3, #0
 800f48a:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f48c:	79bb      	ldrb	r3, [r7, #6]
 800f48e:	4618      	mov	r0, r3
 800f490:	f000 fad8 	bl	800fa44 <fm_factory_separate_k_lin_and_frec>
    if (digit_k_lin <= DIG_LIN_7)
 800f494:	79fb      	ldrb	r3, [r7, #7]
 800f496:	2b07      	cmp	r3, #7
 800f498:	d84d      	bhi.n	800f536 <fm_factory_modify_k_lin_add+0xc2>
    {
        if (k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] < VAL_9)
 800f49a:	79fb      	ldrb	r3, [r7, #7]
 800f49c:	f1c3 0307 	rsb	r3, r3, #7
 800f4a0:	4a5d      	ldr	r2, [pc, #372]	; (800f618 <fm_factory_modify_k_lin_add+0x1a4>)
 800f4a2:	5cd3      	ldrb	r3, [r2, r3]
 800f4a4:	2b08      	cmp	r3, #8
 800f4a6:	d809      	bhi.n	800f4bc <fm_factory_modify_k_lin_add+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]++;
 800f4a8:	79fb      	ldrb	r3, [r7, #7]
 800f4aa:	f1c3 0307 	rsb	r3, r3, #7
 800f4ae:	4a5a      	ldr	r2, [pc, #360]	; (800f618 <fm_factory_modify_k_lin_add+0x1a4>)
 800f4b0:	5cd2      	ldrb	r2, [r2, r3]
 800f4b2:	3201      	adds	r2, #1
 800f4b4:	b2d1      	uxtb	r1, r2
 800f4b6:	4a58      	ldr	r2, [pc, #352]	; (800f618 <fm_factory_modify_k_lin_add+0x1a4>)
 800f4b8:	54d1      	strb	r1, [r2, r3]
 800f4ba:	e005      	b.n	800f4c8 <fm_factory_modify_k_lin_add+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_0;
 800f4bc:	79fb      	ldrb	r3, [r7, #7]
 800f4be:	f1c3 0307 	rsb	r3, r3, #7
 800f4c2:	4a55      	ldr	r2, [pc, #340]	; (800f618 <fm_factory_modify_k_lin_add+0x1a4>)
 800f4c4:	2100      	movs	r1, #0
 800f4c6:	54d1      	strb	r1, [r2, r3]
        }

        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	60fb      	str	r3, [r7, #12]
 800f4cc:	e00d      	b.n	800f4ea <fm_factory_modify_k_lin_add+0x76>
        {
            k_lin_new_num = (k_lin_new_num * ten_multipllier) + k_lin_array[i];
 800f4ce:	230a      	movs	r3, #10
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	fb02 f303 	mul.w	r3, r2, r3
 800f4d8:	494f      	ldr	r1, [pc, #316]	; (800f618 <fm_factory_modify_k_lin_add+0x1a4>)
 800f4da:	68fa      	ldr	r2, [r7, #12]
 800f4dc:	440a      	add	r2, r1
 800f4de:	7812      	ldrb	r2, [r2, #0]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	617b      	str	r3, [r7, #20]
        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	60fb      	str	r3, [r7, #12]
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	2b07      	cmp	r3, #7
 800f4ee:	ddee      	ble.n	800f4ce <fm_factory_modify_k_lin_add+0x5a>
        }

        if (k_sel == K_LIN_1)
 800f4f0:	79bb      	ldrb	r3, [r7, #6]
 800f4f2:	2b01      	cmp	r3, #1
 800f4f4:	d103      	bne.n	800f4fe <fm_factory_modify_k_lin_add+0x8a>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f4f6:	4a49      	ldr	r2, [pc, #292]	; (800f61c <fm_factory_modify_k_lin_add+0x1a8>)
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	6013      	str	r3, [r2, #0]
        else if (k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f4fc:	e088      	b.n	800f610 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_2)
 800f4fe:	79bb      	ldrb	r3, [r7, #6]
 800f500:	2b02      	cmp	r3, #2
 800f502:	d103      	bne.n	800f50c <fm_factory_modify_k_lin_add+0x98>
            k_lin_2_config.num = k_lin_new_num;
 800f504:	4a46      	ldr	r2, [pc, #280]	; (800f620 <fm_factory_modify_k_lin_add+0x1ac>)
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	6013      	str	r3, [r2, #0]
}
 800f50a:	e081      	b.n	800f610 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_3)
 800f50c:	79bb      	ldrb	r3, [r7, #6]
 800f50e:	2b03      	cmp	r3, #3
 800f510:	d103      	bne.n	800f51a <fm_factory_modify_k_lin_add+0xa6>
            k_lin_3_config.num = k_lin_new_num;
 800f512:	4a44      	ldr	r2, [pc, #272]	; (800f624 <fm_factory_modify_k_lin_add+0x1b0>)
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	6013      	str	r3, [r2, #0]
}
 800f518:	e07a      	b.n	800f610 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_4)
 800f51a:	79bb      	ldrb	r3, [r7, #6]
 800f51c:	2b04      	cmp	r3, #4
 800f51e:	d103      	bne.n	800f528 <fm_factory_modify_k_lin_add+0xb4>
            k_lin_4_config.num = k_lin_new_num;
 800f520:	4a41      	ldr	r2, [pc, #260]	; (800f628 <fm_factory_modify_k_lin_add+0x1b4>)
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	6013      	str	r3, [r2, #0]
}
 800f526:	e073      	b.n	800f610 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_5)
 800f528:	79bb      	ldrb	r3, [r7, #6]
 800f52a:	2b05      	cmp	r3, #5
 800f52c:	d170      	bne.n	800f610 <fm_factory_modify_k_lin_add+0x19c>
            k_lin_5_config.num = k_lin_new_num;
 800f52e:	4a3f      	ldr	r2, [pc, #252]	; (800f62c <fm_factory_modify_k_lin_add+0x1b8>)
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	6013      	str	r3, [r2, #0]
}
 800f534:	e06c      	b.n	800f610 <fm_factory_modify_k_lin_add+0x19c>
    else if (digit_k_lin > DIG_LIN_7)
 800f536:	79fb      	ldrb	r3, [r7, #7]
 800f538:	2b07      	cmp	r3, #7
 800f53a:	d969      	bls.n	800f610 <fm_factory_modify_k_lin_add+0x19c>
        if (LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f53c:	79fb      	ldrb	r3, [r7, #7]
 800f53e:	f1c3 030e 	rsb	r3, r3, #14
 800f542:	2b03      	cmp	r3, #3
 800f544:	d017      	beq.n	800f576 <fm_factory_modify_k_lin_add+0x102>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_9)
 800f546:	79fb      	ldrb	r3, [r7, #7]
 800f548:	f1c3 030e 	rsb	r3, r3, #14
 800f54c:	4a38      	ldr	r2, [pc, #224]	; (800f630 <fm_factory_modify_k_lin_add+0x1bc>)
 800f54e:	5cd3      	ldrb	r3, [r2, r3]
 800f550:	2b08      	cmp	r3, #8
 800f552:	d809      	bhi.n	800f568 <fm_factory_modify_k_lin_add+0xf4>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f554:	79fb      	ldrb	r3, [r7, #7]
 800f556:	f1c3 030e 	rsb	r3, r3, #14
 800f55a:	4a35      	ldr	r2, [pc, #212]	; (800f630 <fm_factory_modify_k_lin_add+0x1bc>)
 800f55c:	5cd2      	ldrb	r2, [r2, r3]
 800f55e:	3201      	adds	r2, #1
 800f560:	b2d1      	uxtb	r1, r2
 800f562:	4a33      	ldr	r2, [pc, #204]	; (800f630 <fm_factory_modify_k_lin_add+0x1bc>)
 800f564:	54d1      	strb	r1, [r2, r3]
 800f566:	e01d      	b.n	800f5a4 <fm_factory_modify_k_lin_add+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f568:	79fb      	ldrb	r3, [r7, #7]
 800f56a:	f1c3 030e 	rsb	r3, r3, #14
 800f56e:	4a30      	ldr	r2, [pc, #192]	; (800f630 <fm_factory_modify_k_lin_add+0x1bc>)
 800f570:	2100      	movs	r1, #0
 800f572:	54d1      	strb	r1, [r2, r3]
 800f574:	e016      	b.n	800f5a4 <fm_factory_modify_k_lin_add+0x130>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_1)
 800f576:	79fb      	ldrb	r3, [r7, #7]
 800f578:	f1c3 030e 	rsb	r3, r3, #14
 800f57c:	4a2c      	ldr	r2, [pc, #176]	; (800f630 <fm_factory_modify_k_lin_add+0x1bc>)
 800f57e:	5cd3      	ldrb	r3, [r2, r3]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d109      	bne.n	800f598 <fm_factory_modify_k_lin_add+0x124>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f584:	79fb      	ldrb	r3, [r7, #7]
 800f586:	f1c3 030e 	rsb	r3, r3, #14
 800f58a:	4a29      	ldr	r2, [pc, #164]	; (800f630 <fm_factory_modify_k_lin_add+0x1bc>)
 800f58c:	5cd2      	ldrb	r2, [r2, r3]
 800f58e:	3201      	adds	r2, #1
 800f590:	b2d1      	uxtb	r1, r2
 800f592:	4a27      	ldr	r2, [pc, #156]	; (800f630 <fm_factory_modify_k_lin_add+0x1bc>)
 800f594:	54d1      	strb	r1, [r2, r3]
 800f596:	e005      	b.n	800f5a4 <fm_factory_modify_k_lin_add+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f598:	79fb      	ldrb	r3, [r7, #7]
 800f59a:	f1c3 030e 	rsb	r3, r3, #14
 800f59e:	4a24      	ldr	r2, [pc, #144]	; (800f630 <fm_factory_modify_k_lin_add+0x1bc>)
 800f5a0:	2100      	movs	r1, #0
 800f5a2:	54d1      	strb	r1, [r2, r3]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	60bb      	str	r3, [r7, #8]
 800f5a8:	e00d      	b.n	800f5c6 <fm_factory_modify_k_lin_add+0x152>
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f5aa:	230a      	movs	r3, #10
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	fb02 f303 	mul.w	r3, r2, r3
            + frec_array[j];
 800f5b4:	491e      	ldr	r1, [pc, #120]	; (800f630 <fm_factory_modify_k_lin_add+0x1bc>)
 800f5b6:	68ba      	ldr	r2, [r7, #8]
 800f5b8:	440a      	add	r2, r1
 800f5ba:	7812      	ldrb	r2, [r2, #0]
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f5bc:	4413      	add	r3, r2
 800f5be:	613b      	str	r3, [r7, #16]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	60bb      	str	r3, [r7, #8]
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	2b06      	cmp	r3, #6
 800f5ca:	ddee      	ble.n	800f5aa <fm_factory_modify_k_lin_add+0x136>
        if (k_sel == K_LIN_1)
 800f5cc:	79bb      	ldrb	r3, [r7, #6]
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d103      	bne.n	800f5da <fm_factory_modify_k_lin_add+0x166>
            frec_lin_1.num = frec_lin_new_num;
 800f5d2:	4a18      	ldr	r2, [pc, #96]	; (800f634 <fm_factory_modify_k_lin_add+0x1c0>)
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	6013      	str	r3, [r2, #0]
}
 800f5d8:	e01a      	b.n	800f610 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_2)
 800f5da:	79bb      	ldrb	r3, [r7, #6]
 800f5dc:	2b02      	cmp	r3, #2
 800f5de:	d103      	bne.n	800f5e8 <fm_factory_modify_k_lin_add+0x174>
            frec_lin_2.num = frec_lin_new_num;
 800f5e0:	4a15      	ldr	r2, [pc, #84]	; (800f638 <fm_factory_modify_k_lin_add+0x1c4>)
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	6013      	str	r3, [r2, #0]
}
 800f5e6:	e013      	b.n	800f610 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_3)
 800f5e8:	79bb      	ldrb	r3, [r7, #6]
 800f5ea:	2b03      	cmp	r3, #3
 800f5ec:	d103      	bne.n	800f5f6 <fm_factory_modify_k_lin_add+0x182>
            frec_lin_3.num = frec_lin_new_num;
 800f5ee:	4a13      	ldr	r2, [pc, #76]	; (800f63c <fm_factory_modify_k_lin_add+0x1c8>)
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	6013      	str	r3, [r2, #0]
}
 800f5f4:	e00c      	b.n	800f610 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_4)
 800f5f6:	79bb      	ldrb	r3, [r7, #6]
 800f5f8:	2b04      	cmp	r3, #4
 800f5fa:	d103      	bne.n	800f604 <fm_factory_modify_k_lin_add+0x190>
            frec_lin_4.num = frec_lin_new_num;
 800f5fc:	4a10      	ldr	r2, [pc, #64]	; (800f640 <fm_factory_modify_k_lin_add+0x1cc>)
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	6013      	str	r3, [r2, #0]
}
 800f602:	e005      	b.n	800f610 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_5)
 800f604:	79bb      	ldrb	r3, [r7, #6]
 800f606:	2b05      	cmp	r3, #5
 800f608:	d102      	bne.n	800f610 <fm_factory_modify_k_lin_add+0x19c>
            frec_lin_5.num = frec_lin_new_num;
 800f60a:	4a0e      	ldr	r2, [pc, #56]	; (800f644 <fm_factory_modify_k_lin_add+0x1d0>)
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	6013      	str	r3, [r2, #0]
}
 800f610:	bf00      	nop
 800f612:	3718      	adds	r7, #24
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}
 800f618:	20001d34 	.word	0x20001d34
 800f61c:	200000cc 	.word	0x200000cc
 800f620:	200000d4 	.word	0x200000d4
 800f624:	200000dc 	.word	0x200000dc
 800f628:	200000e4 	.word	0x200000e4
 800f62c:	200000ec 	.word	0x200000ec
 800f630:	20001d3c 	.word	0x20001d3c
 800f634:	200000a4 	.word	0x200000a4
 800f638:	200000ac 	.word	0x200000ac
 800f63c:	200000b4 	.word	0x200000b4
 800f640:	200000bc 	.word	0x200000bc
 800f644:	200000c4 	.word	0x200000c4

0800f648 <fm_factory_modify_k_lin_subs>:
 * @param Digito a modificar del factor K de la enumeración sel_digit_k_lin_t y
 * factor k linealizado seleccionado.
 * @retval None
 */
void fm_factory_modify_k_lin_subs(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b086      	sub	sp, #24
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	4603      	mov	r3, r0
 800f650:	460a      	mov	r2, r1
 800f652:	71fb      	strb	r3, [r7, #7]
 800f654:	4613      	mov	r3, r2
 800f656:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f658:	2300      	movs	r3, #0
 800f65a:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f65c:	2300      	movs	r3, #0
 800f65e:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f660:	79bb      	ldrb	r3, [r7, #6]
 800f662:	4618      	mov	r0, r3
 800f664:	f000 f9ee 	bl	800fa44 <fm_factory_separate_k_lin_and_frec>
    if (digit_k_lin <= DIG_LIN_7)
 800f668:	79fb      	ldrb	r3, [r7, #7]
 800f66a:	2b07      	cmp	r3, #7
 800f66c:	d84d      	bhi.n	800f70a <fm_factory_modify_k_lin_subs+0xc2>
    {
        if (k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] > VAL_0)
 800f66e:	79fb      	ldrb	r3, [r7, #7]
 800f670:	f1c3 0307 	rsb	r3, r3, #7
 800f674:	4a5d      	ldr	r2, [pc, #372]	; (800f7ec <fm_factory_modify_k_lin_subs+0x1a4>)
 800f676:	5cd3      	ldrb	r3, [r2, r3]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d009      	beq.n	800f690 <fm_factory_modify_k_lin_subs+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]--;
 800f67c:	79fb      	ldrb	r3, [r7, #7]
 800f67e:	f1c3 0307 	rsb	r3, r3, #7
 800f682:	4a5a      	ldr	r2, [pc, #360]	; (800f7ec <fm_factory_modify_k_lin_subs+0x1a4>)
 800f684:	5cd2      	ldrb	r2, [r2, r3]
 800f686:	3a01      	subs	r2, #1
 800f688:	b2d1      	uxtb	r1, r2
 800f68a:	4a58      	ldr	r2, [pc, #352]	; (800f7ec <fm_factory_modify_k_lin_subs+0x1a4>)
 800f68c:	54d1      	strb	r1, [r2, r3]
 800f68e:	e005      	b.n	800f69c <fm_factory_modify_k_lin_subs+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_9;
 800f690:	79fb      	ldrb	r3, [r7, #7]
 800f692:	f1c3 0307 	rsb	r3, r3, #7
 800f696:	4a55      	ldr	r2, [pc, #340]	; (800f7ec <fm_factory_modify_k_lin_subs+0x1a4>)
 800f698:	2109      	movs	r1, #9
 800f69a:	54d1      	strb	r1, [r2, r3]
        }

        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f69c:	2300      	movs	r3, #0
 800f69e:	60fb      	str	r3, [r7, #12]
 800f6a0:	e00d      	b.n	800f6be <fm_factory_modify_k_lin_subs+0x76>
        {
            k_lin_new_num = (k_lin_new_num * ten_multipllier) + k_lin_array[i];
 800f6a2:	230a      	movs	r3, #10
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	fb02 f303 	mul.w	r3, r2, r3
 800f6ac:	494f      	ldr	r1, [pc, #316]	; (800f7ec <fm_factory_modify_k_lin_subs+0x1a4>)
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	440a      	add	r2, r1
 800f6b2:	7812      	ldrb	r2, [r2, #0]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	617b      	str	r3, [r7, #20]
        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	60fb      	str	r3, [r7, #12]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	2b07      	cmp	r3, #7
 800f6c2:	ddee      	ble.n	800f6a2 <fm_factory_modify_k_lin_subs+0x5a>
        }

        if (k_sel == K_LIN_1)
 800f6c4:	79bb      	ldrb	r3, [r7, #6]
 800f6c6:	2b01      	cmp	r3, #1
 800f6c8:	d103      	bne.n	800f6d2 <fm_factory_modify_k_lin_subs+0x8a>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f6ca:	4a49      	ldr	r2, [pc, #292]	; (800f7f0 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	6013      	str	r3, [r2, #0]
        else if (k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f6d0:	e088      	b.n	800f7e4 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_2)
 800f6d2:	79bb      	ldrb	r3, [r7, #6]
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	d103      	bne.n	800f6e0 <fm_factory_modify_k_lin_subs+0x98>
            k_lin_2_config.num = k_lin_new_num;
 800f6d8:	4a46      	ldr	r2, [pc, #280]	; (800f7f4 <fm_factory_modify_k_lin_subs+0x1ac>)
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	6013      	str	r3, [r2, #0]
}
 800f6de:	e081      	b.n	800f7e4 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_3)
 800f6e0:	79bb      	ldrb	r3, [r7, #6]
 800f6e2:	2b03      	cmp	r3, #3
 800f6e4:	d103      	bne.n	800f6ee <fm_factory_modify_k_lin_subs+0xa6>
            k_lin_3_config.num = k_lin_new_num;
 800f6e6:	4a44      	ldr	r2, [pc, #272]	; (800f7f8 <fm_factory_modify_k_lin_subs+0x1b0>)
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	6013      	str	r3, [r2, #0]
}
 800f6ec:	e07a      	b.n	800f7e4 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_4)
 800f6ee:	79bb      	ldrb	r3, [r7, #6]
 800f6f0:	2b04      	cmp	r3, #4
 800f6f2:	d103      	bne.n	800f6fc <fm_factory_modify_k_lin_subs+0xb4>
            k_lin_4_config.num = k_lin_new_num;
 800f6f4:	4a41      	ldr	r2, [pc, #260]	; (800f7fc <fm_factory_modify_k_lin_subs+0x1b4>)
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	6013      	str	r3, [r2, #0]
}
 800f6fa:	e073      	b.n	800f7e4 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_5)
 800f6fc:	79bb      	ldrb	r3, [r7, #6]
 800f6fe:	2b05      	cmp	r3, #5
 800f700:	d170      	bne.n	800f7e4 <fm_factory_modify_k_lin_subs+0x19c>
            k_lin_5_config.num = k_lin_new_num;
 800f702:	4a3f      	ldr	r2, [pc, #252]	; (800f800 <fm_factory_modify_k_lin_subs+0x1b8>)
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	6013      	str	r3, [r2, #0]
}
 800f708:	e06c      	b.n	800f7e4 <fm_factory_modify_k_lin_subs+0x19c>
    else if (digit_k_lin > DIG_LIN_7)
 800f70a:	79fb      	ldrb	r3, [r7, #7]
 800f70c:	2b07      	cmp	r3, #7
 800f70e:	d969      	bls.n	800f7e4 <fm_factory_modify_k_lin_subs+0x19c>
        if (LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f710:	79fb      	ldrb	r3, [r7, #7]
 800f712:	f1c3 030e 	rsb	r3, r3, #14
 800f716:	2b03      	cmp	r3, #3
 800f718:	d017      	beq.n	800f74a <fm_factory_modify_k_lin_subs+0x102>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f71a:	79fb      	ldrb	r3, [r7, #7]
 800f71c:	f1c3 030e 	rsb	r3, r3, #14
 800f720:	4a38      	ldr	r2, [pc, #224]	; (800f804 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f722:	5cd3      	ldrb	r3, [r2, r3]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d009      	beq.n	800f73c <fm_factory_modify_k_lin_subs+0xf4>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f728:	79fb      	ldrb	r3, [r7, #7]
 800f72a:	f1c3 030e 	rsb	r3, r3, #14
 800f72e:	4a35      	ldr	r2, [pc, #212]	; (800f804 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f730:	5cd2      	ldrb	r2, [r2, r3]
 800f732:	3a01      	subs	r2, #1
 800f734:	b2d1      	uxtb	r1, r2
 800f736:	4a33      	ldr	r2, [pc, #204]	; (800f804 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f738:	54d1      	strb	r1, [r2, r3]
 800f73a:	e01d      	b.n	800f778 <fm_factory_modify_k_lin_subs+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_9;
 800f73c:	79fb      	ldrb	r3, [r7, #7]
 800f73e:	f1c3 030e 	rsb	r3, r3, #14
 800f742:	4a30      	ldr	r2, [pc, #192]	; (800f804 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f744:	2109      	movs	r1, #9
 800f746:	54d1      	strb	r1, [r2, r3]
 800f748:	e016      	b.n	800f778 <fm_factory_modify_k_lin_subs+0x130>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f74a:	79fb      	ldrb	r3, [r7, #7]
 800f74c:	f1c3 030e 	rsb	r3, r3, #14
 800f750:	4a2c      	ldr	r2, [pc, #176]	; (800f804 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f752:	5cd3      	ldrb	r3, [r2, r3]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d009      	beq.n	800f76c <fm_factory_modify_k_lin_subs+0x124>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f758:	79fb      	ldrb	r3, [r7, #7]
 800f75a:	f1c3 030e 	rsb	r3, r3, #14
 800f75e:	4a29      	ldr	r2, [pc, #164]	; (800f804 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f760:	5cd2      	ldrb	r2, [r2, r3]
 800f762:	3a01      	subs	r2, #1
 800f764:	b2d1      	uxtb	r1, r2
 800f766:	4a27      	ldr	r2, [pc, #156]	; (800f804 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f768:	54d1      	strb	r1, [r2, r3]
 800f76a:	e005      	b.n	800f778 <fm_factory_modify_k_lin_subs+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_1;
 800f76c:	79fb      	ldrb	r3, [r7, #7]
 800f76e:	f1c3 030e 	rsb	r3, r3, #14
 800f772:	4a24      	ldr	r2, [pc, #144]	; (800f804 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f774:	2101      	movs	r1, #1
 800f776:	54d1      	strb	r1, [r2, r3]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f778:	2300      	movs	r3, #0
 800f77a:	60bb      	str	r3, [r7, #8]
 800f77c:	e00d      	b.n	800f79a <fm_factory_modify_k_lin_subs+0x152>
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f77e:	230a      	movs	r3, #10
 800f780:	461a      	mov	r2, r3
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	fb02 f303 	mul.w	r3, r2, r3
            + frec_array[j];
 800f788:	491e      	ldr	r1, [pc, #120]	; (800f804 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f78a:	68ba      	ldr	r2, [r7, #8]
 800f78c:	440a      	add	r2, r1
 800f78e:	7812      	ldrb	r2, [r2, #0]
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f790:	4413      	add	r3, r2
 800f792:	613b      	str	r3, [r7, #16]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	3301      	adds	r3, #1
 800f798:	60bb      	str	r3, [r7, #8]
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	2b06      	cmp	r3, #6
 800f79e:	ddee      	ble.n	800f77e <fm_factory_modify_k_lin_subs+0x136>
        if (k_sel == K_LIN_1)
 800f7a0:	79bb      	ldrb	r3, [r7, #6]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d103      	bne.n	800f7ae <fm_factory_modify_k_lin_subs+0x166>
            frec_lin_1.num = frec_lin_new_num;
 800f7a6:	4a18      	ldr	r2, [pc, #96]	; (800f808 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f7a8:	693b      	ldr	r3, [r7, #16]
 800f7aa:	6013      	str	r3, [r2, #0]
}
 800f7ac:	e01a      	b.n	800f7e4 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_2)
 800f7ae:	79bb      	ldrb	r3, [r7, #6]
 800f7b0:	2b02      	cmp	r3, #2
 800f7b2:	d103      	bne.n	800f7bc <fm_factory_modify_k_lin_subs+0x174>
            frec_lin_2.num = frec_lin_new_num;
 800f7b4:	4a15      	ldr	r2, [pc, #84]	; (800f80c <fm_factory_modify_k_lin_subs+0x1c4>)
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	6013      	str	r3, [r2, #0]
}
 800f7ba:	e013      	b.n	800f7e4 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_3)
 800f7bc:	79bb      	ldrb	r3, [r7, #6]
 800f7be:	2b03      	cmp	r3, #3
 800f7c0:	d103      	bne.n	800f7ca <fm_factory_modify_k_lin_subs+0x182>
            frec_lin_3.num = frec_lin_new_num;
 800f7c2:	4a13      	ldr	r2, [pc, #76]	; (800f810 <fm_factory_modify_k_lin_subs+0x1c8>)
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	6013      	str	r3, [r2, #0]
}
 800f7c8:	e00c      	b.n	800f7e4 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_4)
 800f7ca:	79bb      	ldrb	r3, [r7, #6]
 800f7cc:	2b04      	cmp	r3, #4
 800f7ce:	d103      	bne.n	800f7d8 <fm_factory_modify_k_lin_subs+0x190>
            frec_lin_4.num = frec_lin_new_num;
 800f7d0:	4a10      	ldr	r2, [pc, #64]	; (800f814 <fm_factory_modify_k_lin_subs+0x1cc>)
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	6013      	str	r3, [r2, #0]
}
 800f7d6:	e005      	b.n	800f7e4 <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_5)
 800f7d8:	79bb      	ldrb	r3, [r7, #6]
 800f7da:	2b05      	cmp	r3, #5
 800f7dc:	d102      	bne.n	800f7e4 <fm_factory_modify_k_lin_subs+0x19c>
            frec_lin_5.num = frec_lin_new_num;
 800f7de:	4a0e      	ldr	r2, [pc, #56]	; (800f818 <fm_factory_modify_k_lin_subs+0x1d0>)
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	6013      	str	r3, [r2, #0]
}
 800f7e4:	bf00      	nop
 800f7e6:	3718      	adds	r7, #24
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	20001d34 	.word	0x20001d34
 800f7f0:	200000cc 	.word	0x200000cc
 800f7f4:	200000d4 	.word	0x200000d4
 800f7f8:	200000dc 	.word	0x200000dc
 800f7fc:	200000e4 	.word	0x200000e4
 800f800:	200000ec 	.word	0x200000ec
 800f804:	20001d3c 	.word	0x20001d3c
 800f808:	200000a4 	.word	0x200000a4
 800f80c:	200000ac 	.word	0x200000ac
 800f810:	200000b4 	.word	0x200000b4
 800f814:	200000bc 	.word	0x200000bc
 800f818:	200000c4 	.word	0x200000c4

0800f81c <fm_factory_modify_pulse_acm_ttl>:
 * @brief Actualizo el valor de los pulsos de volumen.
 * @param Pulsos a añadir a los ya existentes.
 * @retval None
 */
void fm_factory_modify_pulse_acm_ttl(uint16_t added_pulses)
{
 800f81c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f820:	b085      	sub	sp, #20
 800f822:	af00      	add	r7, sp, #0
 800f824:	4603      	mov	r3, r0
 800f826:	81fb      	strh	r3, [r7, #14]
    acm_config.pulse += added_pulses;
 800f828:	4b12      	ldr	r3, [pc, #72]	; (800f874 <fm_factory_modify_pulse_acm_ttl+0x58>)
 800f82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82e:	89f9      	ldrh	r1, [r7, #14]
 800f830:	2000      	movs	r0, #0
 800f832:	4688      	mov	r8, r1
 800f834:	4681      	mov	r9, r0
 800f836:	eb12 0108 	adds.w	r1, r2, r8
 800f83a:	6039      	str	r1, [r7, #0]
 800f83c:	eb43 0309 	adc.w	r3, r3, r9
 800f840:	607b      	str	r3, [r7, #4]
 800f842:	4b0c      	ldr	r3, [pc, #48]	; (800f874 <fm_factory_modify_pulse_acm_ttl+0x58>)
 800f844:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f848:	e9c3 1200 	strd	r1, r2, [r3]
    ttl_config.pulse += added_pulses;
 800f84c:	4b0a      	ldr	r3, [pc, #40]	; (800f878 <fm_factory_modify_pulse_acm_ttl+0x5c>)
 800f84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f852:	89f9      	ldrh	r1, [r7, #14]
 800f854:	2000      	movs	r0, #0
 800f856:	460c      	mov	r4, r1
 800f858:	4605      	mov	r5, r0
 800f85a:	eb12 0a04 	adds.w	sl, r2, r4
 800f85e:	eb43 0b05 	adc.w	fp, r3, r5
 800f862:	4b05      	ldr	r3, [pc, #20]	; (800f878 <fm_factory_modify_pulse_acm_ttl+0x5c>)
 800f864:	e9c3 ab00 	strd	sl, fp, [r3]

}
 800f868:	bf00      	nop
 800f86a:	3714      	adds	r7, #20
 800f86c:	46bd      	mov	sp, r7
 800f86e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f872:	4770      	bx	lr
 800f874:	20000030 	.word	0x20000030
 800f878:	20000010 	.word	0x20000010

0800f87c <fm_factory_modify_res_acm_ttl>:
 * @param Resoluciones de fabrica, y de los parámetros ACM y TTL.
 * @retval None
 */
void fm_factory_modify_res_acm_ttl(sel_resolution_t units_res,
sel_resolution_t acm_res, sel_resolution_t ttl_res)
{
 800f87c:	b480      	push	{r7}
 800f87e:	b083      	sub	sp, #12
 800f880:	af00      	add	r7, sp, #0
 800f882:	4603      	mov	r3, r0
 800f884:	71fb      	strb	r3, [r7, #7]
 800f886:	460b      	mov	r3, r1
 800f888:	71bb      	strb	r3, [r7, #6]
 800f88a:	4613      	mov	r3, r2
 800f88c:	717b      	strb	r3, [r7, #5]
    units_digits_vol.res = units_res;
 800f88e:	4a07      	ldr	r2, [pc, #28]	; (800f8ac <fm_factory_modify_res_acm_ttl+0x30>)
 800f890:	79fb      	ldrb	r3, [r7, #7]
 800f892:	7113      	strb	r3, [r2, #4]
    acm_config.volume.res = acm_res;
 800f894:	4a06      	ldr	r2, [pc, #24]	; (800f8b0 <fm_factory_modify_res_acm_ttl+0x34>)
 800f896:	79bb      	ldrb	r3, [r7, #6]
 800f898:	7313      	strb	r3, [r2, #12]
    ttl_config.volume.res = ttl_res;
 800f89a:	4a06      	ldr	r2, [pc, #24]	; (800f8b4 <fm_factory_modify_res_acm_ttl+0x38>)
 800f89c:	797b      	ldrb	r3, [r7, #5]
 800f89e:	7313      	strb	r3, [r2, #12]
}
 800f8a0:	bf00      	nop
 800f8a2:	370c      	adds	r7, #12
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr
 800f8ac:	2000009c 	.word	0x2000009c
 800f8b0:	20000030 	.word	0x20000030
 800f8b4:	20000010 	.word	0x20000010

0800f8b8 <fm_factory_modify_res_rate>:
 * @param Resolución de fabrica, y del parámetro rate.
 * @retval None
 */
void fm_factory_modify_res_rate(sel_resolution_t units_res,
sel_resolution_t rate_res)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b083      	sub	sp, #12
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	4603      	mov	r3, r0
 800f8c0:	460a      	mov	r2, r1
 800f8c2:	71fb      	strb	r3, [r7, #7]
 800f8c4:	4613      	mov	r3, r2
 800f8c6:	71bb      	strb	r3, [r7, #6]
    units_digits_tim.res = units_res;
 800f8c8:	4a05      	ldr	r2, [pc, #20]	; (800f8e0 <fm_factory_modify_res_rate+0x28>)
 800f8ca:	79fb      	ldrb	r3, [r7, #7]
 800f8cc:	7113      	strb	r3, [r2, #4]
    rate_config.volume.res = rate_res;
 800f8ce:	4a05      	ldr	r2, [pc, #20]	; (800f8e4 <fm_factory_modify_res_rate+0x2c>)
 800f8d0:	79bb      	ldrb	r3, [r7, #6]
 800f8d2:	7313      	strb	r3, [r2, #12]
}
 800f8d4:	bf00      	nop
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr
 800f8e0:	20000094 	.word	0x20000094
 800f8e4:	20000050 	.word	0x20000050

0800f8e8 <fm_factory_modify_time>:
 * fijo.
 * @param Hora, minutos y segundos leídos del calendario.
 * @retval None
 */
void fm_factory_modify_time(int mod_hour, int mod_minute, int mod_second)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	607a      	str	r2, [r7, #4]
    static const int hour_mult = 10000;
    static const int min_mult = 100;

    date_time_config.hour = mod_hour;
 800f8f4:	4a0f      	ldr	r2, [pc, #60]	; (800f934 <fm_factory_modify_time+0x4c>)
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	60d3      	str	r3, [r2, #12]
    date_time_config.minute = mod_minute;
 800f8fa:	4a0e      	ldr	r2, [pc, #56]	; (800f934 <fm_factory_modify_time+0x4c>)
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	6113      	str	r3, [r2, #16]
    date_time_config.second = mod_second;
 800f900:	4a0c      	ldr	r2, [pc, #48]	; (800f934 <fm_factory_modify_time+0x4c>)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6153      	str	r3, [r2, #20]

    time_config.num = mod_hour * hour_mult + mod_minute * min_mult + mod_second;
 800f906:	4b0c      	ldr	r3, [pc, #48]	; (800f938 <fm_factory_modify_time+0x50>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	68fa      	ldr	r2, [r7, #12]
 800f90c:	fb03 f202 	mul.w	r2, r3, r2
 800f910:	4b0a      	ldr	r3, [pc, #40]	; (800f93c <fm_factory_modify_time+0x54>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	68b9      	ldr	r1, [r7, #8]
 800f916:	fb01 f303 	mul.w	r3, r1, r3
 800f91a:	441a      	add	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4413      	add	r3, r2
 800f920:	461a      	mov	r2, r3
 800f922:	4b07      	ldr	r3, [pc, #28]	; (800f940 <fm_factory_modify_time+0x58>)
 800f924:	601a      	str	r2, [r3, #0]
}
 800f926:	bf00      	nop
 800f928:	3714      	adds	r7, #20
 800f92a:	46bd      	mov	sp, r7
 800f92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f930:	4770      	bx	lr
 800f932:	bf00      	nop
 800f934:	2000007c 	.word	0x2000007c
 800f938:	08015acc 	.word	0x08015acc
 800f93c:	08015ad0 	.word	0x08015ad0
 800f940:	2000010c 	.word	0x2000010c

0800f944 <fm_factory_modify_time_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_time_units(fmc_unit_time_t time_units)
{
 800f944:	b480      	push	{r7}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
 800f94a:	4603      	mov	r3, r0
 800f94c:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_time = time_units;
 800f94e:	4a07      	ldr	r2, [pc, #28]	; (800f96c <fm_factory_modify_time_units+0x28>)
 800f950:	79fb      	ldrb	r3, [r7, #7]
 800f952:	7653      	strb	r3, [r2, #25]
    ttl_config.unit_time = time_units;
 800f954:	4a06      	ldr	r2, [pc, #24]	; (800f970 <fm_factory_modify_time_units+0x2c>)
 800f956:	79fb      	ldrb	r3, [r7, #7]
 800f958:	7653      	strb	r3, [r2, #25]
    rate_config.unit_time = time_units;
 800f95a:	4a06      	ldr	r2, [pc, #24]	; (800f974 <fm_factory_modify_time_units+0x30>)
 800f95c:	79fb      	ldrb	r3, [r7, #7]
 800f95e:	7653      	strb	r3, [r2, #25]
}
 800f960:	bf00      	nop
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr
 800f96c:	20000030 	.word	0x20000030
 800f970:	20000010 	.word	0x20000010
 800f974:	20000050 	.word	0x20000050

0800f978 <fm_factory_modify_volume_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_volume_units(fmc_unit_volume_t volume_units)
{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	4603      	mov	r3, r0
 800f980:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_volume = volume_units;
 800f982:	4a07      	ldr	r2, [pc, #28]	; (800f9a0 <fm_factory_modify_volume_units+0x28>)
 800f984:	79fb      	ldrb	r3, [r7, #7]
 800f986:	7613      	strb	r3, [r2, #24]
    ttl_config.unit_volume = volume_units;
 800f988:	4a06      	ldr	r2, [pc, #24]	; (800f9a4 <fm_factory_modify_volume_units+0x2c>)
 800f98a:	79fb      	ldrb	r3, [r7, #7]
 800f98c:	7613      	strb	r3, [r2, #24]
    rate_config.unit_volume = volume_units;
 800f98e:	4a06      	ldr	r2, [pc, #24]	; (800f9a8 <fm_factory_modify_volume_units+0x30>)
 800f990:	79fb      	ldrb	r3, [r7, #7]
 800f992:	7613      	strb	r3, [r2, #24]
}
 800f994:	bf00      	nop
 800f996:	370c      	adds	r7, #12
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr
 800f9a0:	20000030 	.word	0x20000030
 800f9a4:	20000010 	.word	0x20000010
 800f9a8:	20000050 	.word	0x20000050

0800f9ac <fm_factory_reset_acm>:
 * funcionalidad del botón ENTER en el menú de usuario ACM-RATE.
 * @param None
 * @retval None
 */
void fm_factory_reset_acm()
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	af00      	add	r7, sp, #0
    acm_config.pulse = 0;
 800f9b0:	4907      	ldr	r1, [pc, #28]	; (800f9d0 <fm_factory_reset_acm+0x24>)
 800f9b2:	f04f 0200 	mov.w	r2, #0
 800f9b6:	f04f 0300 	mov.w	r3, #0
 800f9ba:	e9c1 2300 	strd	r2, r3, [r1]
    acm_config.volume.num = 0;
 800f9be:	4b04      	ldr	r3, [pc, #16]	; (800f9d0 <fm_factory_reset_acm+0x24>)
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	609a      	str	r2, [r3, #8]
}
 800f9c4:	bf00      	nop
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9cc:	4770      	bx	lr
 800f9ce:	bf00      	nop
 800f9d0:	20000030 	.word	0x20000030

0800f9d4 <fm_factory_separate_k_factor>:
 * global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_factor()
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b084      	sub	sp, #16
 800f9d8:	af00      	add	r7, sp, #0
    uint32_t k_num;
    int i = 7;
 800f9da:	2307      	movs	r3, #7
 800f9dc:	60bb      	str	r3, [r7, #8]
    k_num = fm_factory_get_k_factor(K_FACTOR).num;
 800f9de:	463b      	mov	r3, r7
 800f9e0:	2100      	movs	r1, #0
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7ff fbb6 	bl	800f154 <fm_factory_get_k_factor>
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	60fb      	str	r3, [r7, #12]

    while (i >= 0)
 800f9ec:	e01f      	b.n	800fa2e <fm_factory_separate_k_factor+0x5a>
    {
        if (k_num > 0)
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d014      	beq.n	800fa1e <fm_factory_separate_k_factor+0x4a>
        {
            k_array[i] = k_num % ten_multipllier;
 800f9f4:	230a      	movs	r3, #10
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9fe:	fb01 f202 	mul.w	r2, r1, r2
 800fa02:	1a9b      	subs	r3, r3, r2
 800fa04:	b2d9      	uxtb	r1, r3
 800fa06:	4a0e      	ldr	r2, [pc, #56]	; (800fa40 <fm_factory_separate_k_factor+0x6c>)
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	460a      	mov	r2, r1
 800fa0e:	701a      	strb	r2, [r3, #0]
            k_num /= ten_multipllier;
 800fa10:	230a      	movs	r3, #10
 800fa12:	461a      	mov	r2, r3
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa1a:	60fb      	str	r3, [r7, #12]
 800fa1c:	e004      	b.n	800fa28 <fm_factory_separate_k_factor+0x54>
        }
        else
        {
            k_array[i] = 0;
 800fa1e:	4a08      	ldr	r2, [pc, #32]	; (800fa40 <fm_factory_separate_k_factor+0x6c>)
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	4413      	add	r3, r2
 800fa24:	2200      	movs	r2, #0
 800fa26:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	3b01      	subs	r3, #1
 800fa2c:	60bb      	str	r3, [r7, #8]
    while (i >= 0)
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	dadc      	bge.n	800f9ee <fm_factory_separate_k_factor+0x1a>
    }
}
 800fa34:	bf00      	nop
 800fa36:	bf00      	nop
 800fa38:	3710      	adds	r7, #16
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	20001d2c 	.word	0x20001d2c

0800fa44 <fm_factory_separate_k_lin_and_frec>:
 * y los guarda en un arreglo global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_lin_and_frec(sel_k k_sel)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b08a      	sub	sp, #40	; 0x28
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	71fb      	strb	r3, [r7, #7]
    uint32_t k_lin_num;
    uint32_t frec_num;

    int i = 7; //Contador que funciona solo en el while de esta función.
 800fa4e:	2307      	movs	r3, #7
 800fa50:	61fb      	str	r3, [r7, #28]
    int j = 6; //Contador que funciona solo en el while de esta función.
 800fa52:	2306      	movs	r3, #6
 800fa54:	61bb      	str	r3, [r7, #24]
    k_lin_num = fm_factory_get_k_factor(k_sel).num;
 800fa56:	f107 0308 	add.w	r3, r7, #8
 800fa5a:	79fa      	ldrb	r2, [r7, #7]
 800fa5c:	4611      	mov	r1, r2
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7ff fb78 	bl	800f154 <fm_factory_get_k_factor>
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	627b      	str	r3, [r7, #36]	; 0x24
    frec_num = fm_factory_get_frec_lin(k_sel).num;
 800fa68:	f107 0310 	add.w	r3, r7, #16
 800fa6c:	79fa      	ldrb	r2, [r7, #7]
 800fa6e:	4611      	mov	r1, r2
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7ff fb1f 	bl	800f0b4 <fm_factory_get_frec_lin>
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	623b      	str	r3, [r7, #32]

    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800fa7a:	e01f      	b.n	800fabc <fm_factory_separate_k_lin_and_frec+0x78>
    {
        if (k_lin_num > 0)
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d014      	beq.n	800faac <fm_factory_separate_k_lin_and_frec+0x68>
        {
            k_lin_array[i] = k_lin_num % ten_multipllier;
 800fa82:	230a      	movs	r3, #10
 800fa84:	461a      	mov	r2, r3
 800fa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa88:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa8c:	fb01 f202 	mul.w	r2, r1, r2
 800fa90:	1a9b      	subs	r3, r3, r2
 800fa92:	b2d9      	uxtb	r1, r3
 800fa94:	4a1f      	ldr	r2, [pc, #124]	; (800fb14 <fm_factory_separate_k_lin_and_frec+0xd0>)
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	4413      	add	r3, r2
 800fa9a:	460a      	mov	r2, r1
 800fa9c:	701a      	strb	r2, [r3, #0]
            k_lin_num /= ten_multipllier;
 800fa9e:	230a      	movs	r3, #10
 800faa0:	461a      	mov	r2, r3
 800faa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa4:	fbb3 f3f2 	udiv	r3, r3, r2
 800faa8:	627b      	str	r3, [r7, #36]	; 0x24
 800faaa:	e004      	b.n	800fab6 <fm_factory_separate_k_lin_and_frec+0x72>
        }
        else
        {
            k_lin_array[i] = 0;
 800faac:	4a19      	ldr	r2, [pc, #100]	; (800fb14 <fm_factory_separate_k_lin_and_frec+0xd0>)
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	4413      	add	r3, r2
 800fab2:	2200      	movs	r2, #0
 800fab4:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800fab6:	69fb      	ldr	r3, [r7, #28]
 800fab8:	3b01      	subs	r3, #1
 800faba:	61fb      	str	r3, [r7, #28]
    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800fabc:	69fb      	ldr	r3, [r7, #28]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	dadc      	bge.n	800fa7c <fm_factory_separate_k_lin_and_frec+0x38>
    }

    while (j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800fac2:	e01f      	b.n	800fb04 <fm_factory_separate_k_lin_and_frec+0xc0>
    {
        if (frec_num > 0)
 800fac4:	6a3b      	ldr	r3, [r7, #32]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d014      	beq.n	800faf4 <fm_factory_separate_k_lin_and_frec+0xb0>
        {
            frec_array[j] = frec_num % ten_multipllier;
 800faca:	230a      	movs	r3, #10
 800facc:	461a      	mov	r2, r3
 800face:	6a3b      	ldr	r3, [r7, #32]
 800fad0:	fbb3 f1f2 	udiv	r1, r3, r2
 800fad4:	fb01 f202 	mul.w	r2, r1, r2
 800fad8:	1a9b      	subs	r3, r3, r2
 800fada:	b2d9      	uxtb	r1, r3
 800fadc:	4a0e      	ldr	r2, [pc, #56]	; (800fb18 <fm_factory_separate_k_lin_and_frec+0xd4>)
 800fade:	69bb      	ldr	r3, [r7, #24]
 800fae0:	4413      	add	r3, r2
 800fae2:	460a      	mov	r2, r1
 800fae4:	701a      	strb	r2, [r3, #0]
            frec_num /= ten_multipllier;
 800fae6:	230a      	movs	r3, #10
 800fae8:	461a      	mov	r2, r3
 800faea:	6a3b      	ldr	r3, [r7, #32]
 800faec:	fbb3 f3f2 	udiv	r3, r3, r2
 800faf0:	623b      	str	r3, [r7, #32]
 800faf2:	e004      	b.n	800fafe <fm_factory_separate_k_lin_and_frec+0xba>
        }
        else
        {
            frec_array[j] = 0;
 800faf4:	4a08      	ldr	r2, [pc, #32]	; (800fb18 <fm_factory_separate_k_lin_and_frec+0xd4>)
 800faf6:	69bb      	ldr	r3, [r7, #24]
 800faf8:	4413      	add	r3, r2
 800fafa:	2200      	movs	r2, #0
 800fafc:	701a      	strb	r2, [r3, #0]
        }
        j--;
 800fafe:	69bb      	ldr	r3, [r7, #24]
 800fb00:	3b01      	subs	r3, #1
 800fb02:	61bb      	str	r3, [r7, #24]
    while (j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800fb04:	69bb      	ldr	r3, [r7, #24]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	dadc      	bge.n	800fac4 <fm_factory_separate_k_lin_and_frec+0x80>
    }
}
 800fb0a:	bf00      	nop
 800fb0c:	bf00      	nop
 800fb0e:	3728      	adds	r7, #40	; 0x28
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	20001d34 	.word	0x20001d34
 800fb18:	20001d3c 	.word	0x20001d3c

0800fb1c <HAL_GPIO_EXTI_Rising_Callback>:
// Private function bodies.

// Interrupts

void HAL_GPIO_EXTI_Rising_Callback(uint16_t gpio_pin) // @suppress("Name convention for function")
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b084      	sub	sp, #16
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	4603      	mov	r3, r0
 800fb24:	80fb      	strh	r3, [r7, #6]
    /*
     * Deshabilito interrupciones para evitar rebotes de los botones, hasta que
     * la tarea task_debounce termine su ejecución y se bloquee.
     */
    HAL_NVIC_DisableIRQ(EXTI10_IRQn);
 800fb26:	2015      	movs	r0, #21
 800fb28:	f7f4 fb82 	bl	8004230 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI11_IRQn);
 800fb2c:	2016      	movs	r0, #22
 800fb2e:	f7f4 fb7f 	bl	8004230 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI12_IRQn);
 800fb32:	2017      	movs	r0, #23
 800fb34:	f7f4 fb7c 	bl	8004230 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI13_IRQn);
 800fb38:	2018      	movs	r0, #24
 800fb3a:	f7f4 fb79 	bl	8004230 <HAL_NVIC_DisableIRQ>
    fm_event_t event_now;

    /*
     * Compruebo qué botón fue el presionado.
     */
    switch (gpio_pin)
 800fb3e:	88fb      	ldrh	r3, [r7, #6]
 800fb40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb44:	d018      	beq.n	800fb78 <HAL_GPIO_EXTI_Rising_Callback+0x5c>
 800fb46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb4a:	dc18      	bgt.n	800fb7e <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800fb4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb50:	d00f      	beq.n	800fb72 <HAL_GPIO_EXTI_Rising_Callback+0x56>
 800fb52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb56:	dc12      	bgt.n	800fb7e <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800fb58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb5c:	d003      	beq.n	800fb66 <HAL_GPIO_EXTI_Rising_Callback+0x4a>
 800fb5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb62:	d003      	beq.n	800fb6c <HAL_GPIO_EXTI_Rising_Callback+0x50>
        break;
        case KEY_ESC:
            event_now = EVENT_KEY_ESC;
        break;
        default:
        break;
 800fb64:	e00b      	b.n	800fb7e <HAL_GPIO_EXTI_Rising_Callback+0x62>
            event_now = EVENT_KEY_UP;
 800fb66:	2302      	movs	r3, #2
 800fb68:	73fb      	strb	r3, [r7, #15]
        break;
 800fb6a:	e009      	b.n	800fb80 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_DOWN;
 800fb6c:	2303      	movs	r3, #3
 800fb6e:	73fb      	strb	r3, [r7, #15]
        break;
 800fb70:	e006      	b.n	800fb80 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ENTER;
 800fb72:	2304      	movs	r3, #4
 800fb74:	73fb      	strb	r3, [r7, #15]
        break;
 800fb76:	e003      	b.n	800fb80 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ESC;
 800fb78:	2305      	movs	r3, #5
 800fb7a:	73fb      	strb	r3, [r7, #15]
        break;
 800fb7c:	e000      	b.n	800fb80 <HAL_GPIO_EXTI_Rising_Callback+0x64>
        break;
 800fb7e:	bf00      	nop
    /*
     * Pongo el nombre del botón presionado en la cola de eventos y libero el
     * semáforo de la tarea task_debounce, para que esta se bloquee durante el
     * tiempo necesario para que no haya rebotes de los botones.
     */
    tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800fb80:	f107 030f 	add.w	r3, r7, #15
 800fb84:	2200      	movs	r2, #0
 800fb86:	4619      	mov	r1, r3
 800fb88:	4805      	ldr	r0, [pc, #20]	; (800fba0 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 800fb8a:	f7fe fdeb 	bl	800e764 <_txe_queue_send>
    tx_semaphore_ceiling_put(&debounce_semaphore_ptr, 1);
 800fb8e:	2101      	movs	r1, #1
 800fb90:	4804      	ldr	r0, [pc, #16]	; (800fba4 <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 800fb92:	f7fe fe31 	bl	800e7f8 <_txe_semaphore_ceiling_put>
}
 800fb96:	bf00      	nop
 800fb98:	3710      	adds	r7, #16
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}
 800fb9e:	bf00      	nop
 800fba0:	20001388 	.word	0x20001388
 800fba4:	2000136c 	.word	0x2000136c

0800fba8 <fm_lcd_acm_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_rate()
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b0b8      	sub	sp, #224	; 0xe0
 800fbac:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800fbae:	f107 0318 	add.w	r3, r7, #24
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f004 ffda 	bl	8014b6c <fmc_get_acm>
 800fbb8:	2314      	movs	r3, #20
 800fbba:	9301      	str	r3, [sp, #4]
 800fbbc:	1d3b      	adds	r3, r7, #4
 800fbbe:	9300      	str	r3, [sp, #0]
 800fbc0:	2309      	movs	r3, #9
 800fbc2:	2220      	movs	r2, #32
 800fbc4:	f107 0120 	add.w	r1, r7, #32
 800fbc8:	c903      	ldmia	r1, {r0, r1}
 800fbca:	f000 fa13 	bl	800fff4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800fbce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f004 ffca 	bl	8014b6c <fmc_get_acm>
 800fbd8:	1d3a      	adds	r2, r7, #4
 800fbda:	2314      	movs	r3, #20
 800fbdc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800fbe0:	c903      	ldmia	r1, {r0, r1}
 800fbe2:	f000 f9c3 	bl	800ff6c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fbe6:	1d3b      	adds	r3, r7, #4
 800fbe8:	2100      	movs	r1, #0
 800fbea:	4618      	mov	r0, r3
 800fbec:	f000 fbea 	bl	80103c4 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800fbf0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f004 fff9 	bl	8014bec <fmc_get_rate>
 800fbfa:	2314      	movs	r3, #20
 800fbfc:	9301      	str	r3, [sp, #4]
 800fbfe:	1d3b      	adds	r3, r7, #4
 800fc00:	9300      	str	r3, [sp, #0]
 800fc02:	2308      	movs	r3, #8
 800fc04:	2220      	movs	r2, #32
 800fc06:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800fc0a:	c903      	ldmia	r1, {r0, r1}
 800fc0c:	f000 f9f2 	bl	800fff4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800fc10:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800fc14:	4618      	mov	r0, r3
 800fc16:	f004 ffe9 	bl	8014bec <fmc_get_rate>
 800fc1a:	1d3a      	adds	r2, r7, #4
 800fc1c:	2314      	movs	r3, #20
 800fc1e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800fc22:	c903      	ldmia	r1, {r0, r1}
 800fc24:	f000 f9a2 	bl	800ff6c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fc28:	1d3b      	adds	r3, r7, #4
 800fc2a:	2101      	movs	r1, #1
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f000 fbc9 	bl	80103c4 <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800fc32:	2100      	movs	r1, #0
 800fc34:	2006      	movs	r0, #6
 800fc36:	f001 ff2b 	bl	8011a90 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800fc3a:	2100      	movs	r1, #0
 800fc3c:	2002      	movs	r0, #2
 800fc3e:	f001 ff27 	bl	8011a90 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800fc42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800fc46:	4618      	mov	r0, r3
 800fc48:	f004 ff90 	bl	8014b6c <fmc_get_acm>
 800fc4c:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800fc50:	2100      	movs	r1, #0
 800fc52:	4618      	mov	r0, r3
 800fc54:	f002 fadc 	bl	8012210 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800fc58:	2100      	movs	r1, #0
 800fc5a:	2007      	movs	r0, #7
 800fc5c:	f001 ff18 	bl	8011a90 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_acm().unit_time, 0x0);
 800fc60:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800fc64:	4618      	mov	r0, r3
 800fc66:	f004 ff81 	bl	8014b6c <fmc_get_acm>
 800fc6a:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800fc6e:	2100      	movs	r1, #0
 800fc70:	4618      	mov	r0, r3
 800fc72:	f002 fa8b 	bl	801218c <lcd_set_time_unit>
}
 800fc76:	bf00      	nop
 800fc78:	37d8      	adds	r7, #216	; 0xd8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <fm_lcd_acm_temp>:
 * de forma personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_temp()
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b0a2      	sub	sp, #136	; 0x88
 800fc82:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800fc84:	f107 0318 	add.w	r3, r7, #24
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f004 ff6f 	bl	8014b6c <fmc_get_acm>
 800fc8e:	2314      	movs	r3, #20
 800fc90:	9301      	str	r3, [sp, #4]
 800fc92:	1d3b      	adds	r3, r7, #4
 800fc94:	9300      	str	r3, [sp, #0]
 800fc96:	2309      	movs	r3, #9
 800fc98:	2220      	movs	r2, #32
 800fc9a:	f107 0120 	add.w	r1, r7, #32
 800fc9e:	c903      	ldmia	r1, {r0, r1}
 800fca0:	f000 f9a8 	bl	800fff4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800fca4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f004 ff5f 	bl	8014b6c <fmc_get_acm>
 800fcae:	1d3a      	adds	r2, r7, #4
 800fcb0:	2314      	movs	r3, #20
 800fcb2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800fcb6:	c903      	ldmia	r1, {r0, r1}
 800fcb8:	f000 f958 	bl	800ff6c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fcbc:	1d3b      	adds	r3, r7, #4
 800fcbe:	2100      	movs	r1, #0
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f000 fb7f 	bl	80103c4 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_stm32_temp().temperature, ' ', LINE_1_DIGITS,
 800fcc6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fcca:	4618      	mov	r0, r3
 800fccc:	f004 ffce 	bl	8014c6c <fmc_get_stm32_temp>
 800fcd0:	2314      	movs	r3, #20
 800fcd2:	9301      	str	r3, [sp, #4]
 800fcd4:	1d3b      	adds	r3, r7, #4
 800fcd6:	9300      	str	r3, [sp, #0]
 800fcd8:	2308      	movs	r3, #8
 800fcda:	2220      	movs	r2, #32
 800fcdc:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800fce0:	c903      	ldmia	r1, {r0, r1}
 800fce2:	f000 f987 	bl	800fff4 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_stm32_temp().temperature, lcd_msg,
 800fce6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fcea:	4618      	mov	r0, r3
 800fcec:	f004 ffbe 	bl	8014c6c <fmc_get_stm32_temp>
 800fcf0:	1d3a      	adds	r2, r7, #4
 800fcf2:	2314      	movs	r3, #20
 800fcf4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800fcf8:	c903      	ldmia	r1, {r0, r1}
 800fcfa:	f000 f937 	bl	800ff6c <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fcfe:	1d3b      	adds	r3, r7, #4
 800fd00:	2101      	movs	r1, #1
 800fd02:	4618      	mov	r0, r3
 800fd04:	f000 fb5e 	bl	80103c4 <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800fd08:	2100      	movs	r1, #0
 800fd0a:	2006      	movs	r0, #6
 800fd0c:	f001 fec0 	bl	8011a90 <lcd_set_symbol>
    lcd_set_vol_unit(fmc_get_stm32_temp().unit_volume_temp, 0x0);
 800fd10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fd14:	4618      	mov	r0, r3
 800fd16:	f004 ffa9 	bl	8014c6c <fmc_get_stm32_temp>
 800fd1a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800fd1e:	2100      	movs	r1, #0
 800fd20:	4618      	mov	r0, r3
 800fd22:	f002 fa75 	bl	8012210 <lcd_set_vol_unit>
}
 800fd26:	bf00      	nop
 800fd28:	3780      	adds	r7, #128	; 0x80
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <fm_lcd_clear>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void fm_lcd_clear()
{
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800fd32:	f000 fd5f 	bl	80107f4 <lcd_clear_all>
}
 800fd36:	bf00      	nop
 800fd38:	bd80      	pop	{r7, pc}
	...

0800fd3c <fm_lcd_date_hour>:
 * @param Campo seleccionado el cual debe titilar.
 * @retval None
 */
void fm_lcd_date_hour(user_or_configuration_t configuration,
fm_event_t event_id, sel_date_time_field_t field)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b090      	sub	sp, #64	; 0x40
 800fd40:	af02      	add	r7, sp, #8
 800fd42:	4603      	mov	r3, r0
 800fd44:	73fb      	strb	r3, [r7, #15]
 800fd46:	460b      	mov	r3, r1
 800fd48:	73bb      	strb	r3, [r7, #14]
 800fd4a:	4613      	mov	r3, r2
 800fd4c:	737b      	strb	r3, [r7, #13]
    char lcd_msg[PCF8553_DATA_SIZE];

    /*
     * Se comprueba si se está en el menú de configuración o de usuario.
     */
    if (configuration)
 800fd4e:	7bfb      	ldrb	r3, [r7, #15]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d00a      	beq.n	800fd6a <fm_lcd_date_hour+0x2e>
    {
        date_to_str = fm_factory_get_fp_date_conf();
 800fd54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7ff f975 	bl	800f048 <fm_factory_get_fp_date_conf>
        time_to_str = fm_factory_get_fp_time_conf();
 800fd5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7ff f994 	bl	800f090 <fm_factory_get_fp_time_conf>
 800fd68:	e019      	b.n	800fd9e <fm_lcd_date_hour+0x62>
    }
    else
    {
        fm_calendar_format_date();
 800fd6a:	f7ff f893 	bl	800ee94 <fm_calendar_format_date>
        fm_calendar_format_time();
 800fd6e:	f7ff f8b7 	bl	800eee0 <fm_calendar_format_time>

        date_to_str = fm_factory_get_fp_date();
 800fd72:	463b      	mov	r3, r7
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7ff f955 	bl	800f024 <fm_factory_get_fp_date>
 800fd7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd7e:	463a      	mov	r2, r7
 800fd80:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd84:	e883 0003 	stmia.w	r3, {r0, r1}
        time_to_str = fm_factory_get_fp_time();
 800fd88:	463b      	mov	r3, r7
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7ff f96e 	bl	800f06c <fm_factory_get_fp_time>
 800fd90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fd94:	463a      	mov	r2, r7
 800fd96:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd9a:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    fm_lcd_fp_to_str(date_to_str, '0', LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
 800fd9e:	2314      	movs	r3, #20
 800fda0:	9301      	str	r3, [sp, #4]
 800fda2:	f107 0314 	add.w	r3, r7, #20
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	2309      	movs	r3, #9
 800fdaa:	2230      	movs	r2, #48	; 0x30
 800fdac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fdb0:	c903      	ldmia	r1, {r0, r1}
 800fdb2:	f000 f91f 	bl	800fff4 <fm_lcd_fp_to_str>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fdb6:	f107 0314 	add.w	r3, r7, #20
 800fdba:	2100      	movs	r1, #0
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f000 fb01 	bl	80103c4 <fm_lcd_puts>
    lcd_set_point(HIGH_ROW, PNT_1);
 800fdc2:	2101      	movs	r1, #1
 800fdc4:	2000      	movs	r0, #0
 800fdc6:	f001 fdb7 	bl	8011938 <lcd_set_point>
    lcd_set_point(HIGH_ROW, PNT_3);
 800fdca:	2103      	movs	r1, #3
 800fdcc:	2000      	movs	r0, #0
 800fdce:	f001 fdb3 	bl	8011938 <lcd_set_point>

    fm_lcd_fp_to_str(time_to_str, '0', LINE_1_DIGITS, lcd_msg, sizeof(lcd_msg));
 800fdd2:	2314      	movs	r3, #20
 800fdd4:	9301      	str	r3, [sp, #4]
 800fdd6:	f107 0314 	add.w	r3, r7, #20
 800fdda:	9300      	str	r3, [sp, #0]
 800fddc:	2308      	movs	r3, #8
 800fdde:	2230      	movs	r2, #48	; 0x30
 800fde0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fde4:	c903      	ldmia	r1, {r0, r1}
 800fde6:	f000 f905 	bl	800fff4 <fm_lcd_fp_to_str>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fdea:	f107 0314 	add.w	r3, r7, #20
 800fdee:	2101      	movs	r1, #1
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f000 fae7 	bl	80103c4 <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800fdf6:	2101      	movs	r1, #1
 800fdf8:	2000      	movs	r0, #0
 800fdfa:	f000 fd23 	bl	8010844 <lcd_clear_digit>
    lcd_set_point(LOW_ROW, PNT_2);
 800fdfe:	2102      	movs	r1, #2
 800fe00:	2001      	movs	r0, #1
 800fe02:	f001 fd99 	bl	8011938 <lcd_set_point>
    lcd_set_point(LOW_ROW, PNT_4);
 800fe06:	2104      	movs	r1, #4
 800fe08:	2001      	movs	r0, #1
 800fe0a:	f001 fd95 	bl	8011938 <lcd_set_point>

    if (configuration)
 800fe0e:	7bfb      	ldrb	r3, [r7, #15]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d07e      	beq.n	800ff12 <fm_lcd_date_hour+0x1d6>
    {
        if (event_id == EVENT_KEY_ENTER
 800fe14:	7bbb      	ldrb	r3, [r7, #14]
 800fe16:	2b04      	cmp	r3, #4
 800fe18:	d006      	beq.n	800fe28 <fm_lcd_date_hour+0xec>
        || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fe1a:	4b40      	ldr	r3, [pc, #256]	; (800ff1c <fm_lcd_date_hour+0x1e0>)
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	2b04      	cmp	r3, #4
 800fe20:	d106      	bne.n	800fe30 <fm_lcd_date_hour+0xf4>
 800fe22:	7bbb      	ldrb	r3, [r7, #14]
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	d103      	bne.n	800fe30 <fm_lcd_date_hour+0xf4>
        {
            blink = 1;
 800fe28:	4b3d      	ldr	r3, [pc, #244]	; (800ff20 <fm_lcd_date_hour+0x1e4>)
 800fe2a:	2201      	movs	r2, #1
 800fe2c:	601a      	str	r2, [r3, #0]
 800fe2e:	e016      	b.n	800fe5e <fm_lcd_date_hour+0x122>
        }
        else if (event_id == EVENT_KEY_DOWN
 800fe30:	7bbb      	ldrb	r3, [r7, #14]
 800fe32:	2b03      	cmp	r3, #3
 800fe34:	d010      	beq.n	800fe58 <fm_lcd_date_hour+0x11c>
        || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 800fe36:	4b39      	ldr	r3, [pc, #228]	; (800ff1c <fm_lcd_date_hour+0x1e0>)
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	2b03      	cmp	r3, #3
 800fe3c:	d102      	bne.n	800fe44 <fm_lcd_date_hour+0x108>
 800fe3e:	7bbb      	ldrb	r3, [r7, #14]
 800fe40:	2b01      	cmp	r3, #1
 800fe42:	d009      	beq.n	800fe58 <fm_lcd_date_hour+0x11c>
        || event_id == EVENT_KEY_UP
 800fe44:	7bbb      	ldrb	r3, [r7, #14]
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d006      	beq.n	800fe58 <fm_lcd_date_hour+0x11c>
        || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fe4a:	4b34      	ldr	r3, [pc, #208]	; (800ff1c <fm_lcd_date_hour+0x1e0>)
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	d105      	bne.n	800fe5e <fm_lcd_date_hour+0x122>
 800fe52:	7bbb      	ldrb	r3, [r7, #14]
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d102      	bne.n	800fe5e <fm_lcd_date_hour+0x122>
        {
            blink = 0;
 800fe58:	4b31      	ldr	r3, [pc, #196]	; (800ff20 <fm_lcd_date_hour+0x1e4>)
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	601a      	str	r2, [r3, #0]
        }

        if (blink == 1)
 800fe5e:	4b30      	ldr	r3, [pc, #192]	; (800ff20 <fm_lcd_date_hour+0x1e4>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d152      	bne.n	800ff0c <fm_lcd_date_hour+0x1d0>
        {
            if (field == DAY)
 800fe66:	7b7b      	ldrb	r3, [r7, #13]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d108      	bne.n	800fe7e <fm_lcd_date_hour+0x142>
            {
                lcd_clear_digit(DIGIT_1, HIGH_ROW);
 800fe6c:	2100      	movs	r1, #0
 800fe6e:	2001      	movs	r0, #1
 800fe70:	f000 fce8 	bl	8010844 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_0, HIGH_ROW);
 800fe74:	2100      	movs	r1, #0
 800fe76:	2000      	movs	r0, #0
 800fe78:	f000 fce4 	bl	8010844 <lcd_clear_digit>
 800fe7c:	e042      	b.n	800ff04 <fm_lcd_date_hour+0x1c8>
            }
            else if (field == MONTH)
 800fe7e:	7b7b      	ldrb	r3, [r7, #13]
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d108      	bne.n	800fe96 <fm_lcd_date_hour+0x15a>
            {
                lcd_clear_digit(DIGIT_3, HIGH_ROW);
 800fe84:	2100      	movs	r1, #0
 800fe86:	2003      	movs	r0, #3
 800fe88:	f000 fcdc 	bl	8010844 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_2, HIGH_ROW);
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	2002      	movs	r0, #2
 800fe90:	f000 fcd8 	bl	8010844 <lcd_clear_digit>
 800fe94:	e036      	b.n	800ff04 <fm_lcd_date_hour+0x1c8>
            }
            else if (field == YEAR)
 800fe96:	7b7b      	ldrb	r3, [r7, #13]
 800fe98:	2b02      	cmp	r3, #2
 800fe9a:	d110      	bne.n	800febe <fm_lcd_date_hour+0x182>
            {
                lcd_clear_digit(DIGIT_7, HIGH_ROW);
 800fe9c:	2100      	movs	r1, #0
 800fe9e:	2007      	movs	r0, #7
 800fea0:	f000 fcd0 	bl	8010844 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_6, HIGH_ROW);
 800fea4:	2100      	movs	r1, #0
 800fea6:	2006      	movs	r0, #6
 800fea8:	f000 fccc 	bl	8010844 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, HIGH_ROW);
 800feac:	2100      	movs	r1, #0
 800feae:	2005      	movs	r0, #5
 800feb0:	f000 fcc8 	bl	8010844 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_4, HIGH_ROW);
 800feb4:	2100      	movs	r1, #0
 800feb6:	2004      	movs	r0, #4
 800feb8:	f000 fcc4 	bl	8010844 <lcd_clear_digit>
 800febc:	e022      	b.n	800ff04 <fm_lcd_date_hour+0x1c8>
            }
            else if (field == HOUR)
 800febe:	7b7b      	ldrb	r3, [r7, #13]
 800fec0:	2b03      	cmp	r3, #3
 800fec2:	d108      	bne.n	800fed6 <fm_lcd_date_hour+0x19a>
            {
                lcd_clear_digit(DIGIT_2, LOW_ROW);
 800fec4:	2101      	movs	r1, #1
 800fec6:	2002      	movs	r0, #2
 800fec8:	f000 fcbc 	bl	8010844 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_1, LOW_ROW);
 800fecc:	2101      	movs	r1, #1
 800fece:	2001      	movs	r0, #1
 800fed0:	f000 fcb8 	bl	8010844 <lcd_clear_digit>
 800fed4:	e016      	b.n	800ff04 <fm_lcd_date_hour+0x1c8>
            }
            else if (field == MINUTE)
 800fed6:	7b7b      	ldrb	r3, [r7, #13]
 800fed8:	2b04      	cmp	r3, #4
 800feda:	d108      	bne.n	800feee <fm_lcd_date_hour+0x1b2>
            {
                lcd_clear_digit(DIGIT_4, LOW_ROW);
 800fedc:	2101      	movs	r1, #1
 800fede:	2004      	movs	r0, #4
 800fee0:	f000 fcb0 	bl	8010844 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_3, LOW_ROW);
 800fee4:	2101      	movs	r1, #1
 800fee6:	2003      	movs	r0, #3
 800fee8:	f000 fcac 	bl	8010844 <lcd_clear_digit>
 800feec:	e00a      	b.n	800ff04 <fm_lcd_date_hour+0x1c8>
            }
            else if (field == SECOND)
 800feee:	7b7b      	ldrb	r3, [r7, #13]
 800fef0:	2b05      	cmp	r3, #5
 800fef2:	d107      	bne.n	800ff04 <fm_lcd_date_hour+0x1c8>
            {
                lcd_clear_digit(DIGIT_6, LOW_ROW);
 800fef4:	2101      	movs	r1, #1
 800fef6:	2006      	movs	r0, #6
 800fef8:	f000 fca4 	bl	8010844 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, LOW_ROW);
 800fefc:	2101      	movs	r1, #1
 800fefe:	2005      	movs	r0, #5
 800ff00:	f000 fca0 	bl	8010844 <lcd_clear_digit>
            }

            blink = 0;
 800ff04:	4b06      	ldr	r3, [pc, #24]	; (800ff20 <fm_lcd_date_hour+0x1e4>)
 800ff06:	2200      	movs	r2, #0
 800ff08:	601a      	str	r2, [r3, #0]
        else
        {
            blink = 1;
        }
    }
}
 800ff0a:	e002      	b.n	800ff12 <fm_lcd_date_hour+0x1d6>
            blink = 1;
 800ff0c:	4b04      	ldr	r3, [pc, #16]	; (800ff20 <fm_lcd_date_hour+0x1e4>)
 800ff0e:	2201      	movs	r2, #1
 800ff10:	601a      	str	r2, [r3, #0]
}
 800ff12:	bf00      	nop
 800ff14:	3738      	adds	r7, #56	; 0x38
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	20001e13 	.word	0x20001e13
 800ff20:	2000011c 	.word	0x2000011c

0800ff24 <fm_lcd_format_number_in_line>:
 * @param Longitud de este String.
 * @retval arreglo con la información formateada tipo char.
 */
void fm_lcd_format_number_in_line(rows_t line, uint32_t data, char *p_str,
int length)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b084      	sub	sp, #16
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	60b9      	str	r1, [r7, #8]
 800ff2c:	607a      	str	r2, [r7, #4]
 800ff2e:	603b      	str	r3, [r7, #0]
 800ff30:	4603      	mov	r3, r0
 800ff32:	73fb      	strb	r3, [r7, #15]
    if (line == HIGH_ROW)
 800ff34:	7bfb      	ldrb	r3, [r7, #15]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d106      	bne.n	800ff48 <fm_lcd_format_number_in_line+0x24>
    {
        snprintf(p_str, length, "%8lu", data);
 800ff3a:	6839      	ldr	r1, [r7, #0]
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	4a09      	ldr	r2, [pc, #36]	; (800ff64 <fm_lcd_format_number_in_line+0x40>)
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f004 ff8d 	bl	8014e60 <sniprintf>
    }
    else if (line == LOW_ROW)
    {
        snprintf(p_str, length, "%7lu", data);
    }
}
 800ff46:	e008      	b.n	800ff5a <fm_lcd_format_number_in_line+0x36>
    else if (line == LOW_ROW)
 800ff48:	7bfb      	ldrb	r3, [r7, #15]
 800ff4a:	2b01      	cmp	r3, #1
 800ff4c:	d105      	bne.n	800ff5a <fm_lcd_format_number_in_line+0x36>
        snprintf(p_str, length, "%7lu", data);
 800ff4e:	6839      	ldr	r1, [r7, #0]
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	4a05      	ldr	r2, [pc, #20]	; (800ff68 <fm_lcd_format_number_in_line+0x44>)
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f004 ff83 	bl	8014e60 <sniprintf>
}
 800ff5a:	bf00      	nop
 800ff5c:	3710      	adds	r7, #16
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
 800ff62:	bf00      	nop
 800ff64:	0801599c 	.word	0x0801599c
 800ff68:	080159a4 	.word	0x080159a4

0800ff6c <fm_lcd_fp_add_dot>:
 * @param str_size tamaño del string.
 * @retval int.
 *
 */
int fm_lcd_fp_add_dot(fmc_fp_t fp, char *p_str, int str_size)
{
 800ff6c:	b590      	push	{r4, r7, lr}
 800ff6e:	b087      	sub	sp, #28
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	f107 0408 	add.w	r4, r7, #8
 800ff76:	e884 0003 	stmia.w	r4, {r0, r1}
 800ff7a:	607a      	str	r2, [r7, #4]
 800ff7c:	603b      	str	r3, [r7, #0]
    int idx_now;

    /*
     * Si la resolución asignada por el usuario es 0, no hay nada que hacer.
     */
    if (fp.res == 0)
 800ff7e:	7b3b      	ldrb	r3, [r7, #12]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d101      	bne.n	800ff88 <fm_lcd_fp_add_dot+0x1c>
    {
        return (0);
 800ff84:	2300      	movs	r3, #0
 800ff86:	e031      	b.n	800ffec <fm_lcd_fp_add_dot+0x80>
    }

    idx_now = strlen(p_str); //Como indice apunta a terminador nulo.
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7f0 fa9b 	bl	80004c4 <strlen>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	617b      	str	r3, [r7, #20]

    /*
     * Chequeo de contorno para ver si entra el punto o no.
     */

    if ((idx_now + 1 + 1) >= str_size)
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	3302      	adds	r3, #2
 800ff96:	683a      	ldr	r2, [r7, #0]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	dc02      	bgt.n	800ffa2 <fm_lcd_fp_add_dot+0x36>
    {
        return (-1);
 800ff9c:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa0:	e024      	b.n	800ffec <fm_lcd_fp_add_dot+0x80>
    }

    idx_end = idx_now - fp.res; //Como índice apunta a donde debe ir el '.'
 800ffa2:	7b3b      	ldrb	r3, [r7, #12]
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	1a9b      	subs	r3, r3, r2
 800ffaa:	613b      	str	r3, [r7, #16]

    /*
     * Desplazo posiciones en el arreglo hasta llegar a la posición donde debe
     * ir ubicado el '.'
     */
    while (idx_now != idx_end)
 800ffac:	e00b      	b.n	800ffc6 <fm_lcd_fp_add_dot+0x5a>
    {
        p_str[idx_now + 1] = p_str[idx_now];
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	687a      	ldr	r2, [r7, #4]
 800ffb2:	441a      	add	r2, r3
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	6879      	ldr	r1, [r7, #4]
 800ffba:	440b      	add	r3, r1
 800ffbc:	7812      	ldrb	r2, [r2, #0]
 800ffbe:	701a      	strb	r2, [r3, #0]
        idx_now--;
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	3b01      	subs	r3, #1
 800ffc4:	617b      	str	r3, [r7, #20]
    while (idx_now != idx_end)
 800ffc6:	697a      	ldr	r2, [r7, #20]
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d1ef      	bne.n	800ffae <fm_lcd_fp_add_dot+0x42>
    }
    p_str[idx_now + 1] = p_str[idx_now];
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	687a      	ldr	r2, [r7, #4]
 800ffd2:	441a      	add	r2, r3
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	6879      	ldr	r1, [r7, #4]
 800ffda:	440b      	add	r3, r1
 800ffdc:	7812      	ldrb	r2, [r2, #0]
 800ffde:	701a      	strb	r2, [r3, #0]
    p_str[idx_now] = '.';
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	4413      	add	r3, r2
 800ffe6:	222e      	movs	r2, #46	; 0x2e
 800ffe8:	701a      	strb	r2, [r3, #0]

    return (0);
 800ffea:	2300      	movs	r3, #0
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	371c      	adds	r7, #28
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd90      	pop	{r4, r7, pc}

0800fff4 <fm_lcd_fp_to_str>:
 * @param str_size tamaño del string.
 * @retval int.
 */
int fm_lcd_fp_to_str(fmc_fp_t fp, char leading_char, int str_width, char *p_str,
int str_size)
{
 800fff4:	b490      	push	{r4, r7}
 800fff6:	b088      	sub	sp, #32
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	f107 0408 	add.w	r4, r7, #8
 800fffe:	e884 0003 	stmia.w	r4, {r0, r1}
 8010002:	603b      	str	r3, [r7, #0]
 8010004:	4613      	mov	r3, r2
 8010006:	71fb      	strb	r3, [r7, #7]
    int idx_1 = 0;
 8010008:	2300      	movs	r3, #0
 801000a:	61fb      	str	r3, [r7, #28]
    /*
     * Este es el unico chequeo de contorno. Verifica que el tamaño del string
     * no sea menor a PCF8553_DATA_SIZE, calculado como suficiente para operar
     * con las líneas del lcd.
     */
    if (str_size < PCF8553_DATA_SIZE)
 801000c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801000e:	2b13      	cmp	r3, #19
 8010010:	dc02      	bgt.n	8010018 <fm_lcd_fp_to_str+0x24>
    {
        return (-1);
 8010012:	f04f 33ff 	mov.w	r3, #4294967295
 8010016:	e07d      	b.n	8010114 <fm_lcd_fp_to_str+0x120>
    }

    /*
     * Esta linea es necesaria para representa bien a num = 0
     */
    p_str[idx_1] = fp.num % ten_multiplier + '0';
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	220a      	movs	r2, #10
 801001c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010020:	fb01 f202 	mul.w	r2, r1, r2
 8010024:	1a9b      	subs	r3, r3, r2
 8010026:	b2da      	uxtb	r2, r3
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801002c:	440b      	add	r3, r1
 801002e:	3230      	adds	r2, #48	; 0x30
 8010030:	b2d2      	uxtb	r2, r2
 8010032:	701a      	strb	r2, [r3, #0]

    uint32_t num_aux = fp.num;
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	617b      	str	r3, [r7, #20]

    /*
     * Almaceno el número de atrás para adelante hasta que llegar al primer
     * dígito inclusive
     */
    while (fp.num / ten_multiplier)
 8010038:	e015      	b.n	8010066 <fm_lcd_fp_to_str+0x72>
    {
        idx_1++;
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	3301      	adds	r3, #1
 801003e:	61fb      	str	r3, [r7, #28]
        fp.num /= ten_multiplier;
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	220a      	movs	r2, #10
 8010044:	fbb3 f3f2 	udiv	r3, r3, r2
 8010048:	60bb      	str	r3, [r7, #8]
        p_str[idx_1] = fp.num % ten_multiplier + '0';
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	220a      	movs	r2, #10
 801004e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010052:	fb01 f202 	mul.w	r2, r1, r2
 8010056:	1a9b      	subs	r3, r3, r2
 8010058:	b2da      	uxtb	r2, r3
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801005e:	440b      	add	r3, r1
 8010060:	3230      	adds	r2, #48	; 0x30
 8010062:	b2d2      	uxtb	r2, r2
 8010064:	701a      	strb	r2, [r3, #0]
    while (fp.num / ten_multiplier)
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	220a      	movs	r2, #10
 801006a:	4293      	cmp	r3, r2
 801006c:	d2e5      	bcs.n	801003a <fm_lcd_fp_to_str+0x46>

    /*
     * Si se midió 0 pulsos, se rellena con 0 hasta pasar el punto y asi se
     * mantiene la resolución deseada.
     */
    if (num_aux == 0)
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d116      	bne.n	80100a2 <fm_lcd_fp_to_str+0xae>
    {
        while (idx_1 < fp.res)
 8010074:	e010      	b.n	8010098 <fm_lcd_fp_to_str+0xa4>
        {
            idx_1++;
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	3301      	adds	r3, #1
 801007a:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = fp.num % ten_multiplier + '0';
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	220a      	movs	r2, #10
 8010080:	fbb3 f1f2 	udiv	r1, r3, r2
 8010084:	fb01 f202 	mul.w	r2, r1, r2
 8010088:	1a9b      	subs	r3, r3, r2
 801008a:	b2da      	uxtb	r2, r3
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010090:	440b      	add	r3, r1
 8010092:	3230      	adds	r2, #48	; 0x30
 8010094:	b2d2      	uxtb	r2, r2
 8010096:	701a      	strb	r2, [r3, #0]
        while (idx_1 < fp.res)
 8010098:	7b3b      	ldrb	r3, [r7, #12]
 801009a:	461a      	mov	r2, r3
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	4293      	cmp	r3, r2
 80100a0:	dbe9      	blt.n	8010076 <fm_lcd_fp_to_str+0x82>

    /*
     * Si el caracter a completar no es 0, se lo debe agregar al final del
     * arreglo hasta completar el largo de la linea (7 u 8 caracteres + \0).
     */
    if (leading_char)
 80100a2:	79fb      	ldrb	r3, [r7, #7]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d00d      	beq.n	80100c4 <fm_lcd_fp_to_str+0xd0>
    {
        while (idx_1 < str_width - 1)
 80100a8:	e007      	b.n	80100ba <fm_lcd_fp_to_str+0xc6>
        {
            idx_1++;
 80100aa:	69fb      	ldr	r3, [r7, #28]
 80100ac:	3301      	adds	r3, #1
 80100ae:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = leading_char;
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100b4:	4413      	add	r3, r2
 80100b6:	79fa      	ldrb	r2, [r7, #7]
 80100b8:	701a      	strb	r2, [r3, #0]
        while (idx_1 < str_width - 1)
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	3b01      	subs	r3, #1
 80100be:	69fa      	ldr	r2, [r7, #28]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	dbf2      	blt.n	80100aa <fm_lcd_fp_to_str+0xb6>
        }
    }
    p_str[idx_1] = '\0';
 80100c4:	69fb      	ldr	r3, [r7, #28]
 80100c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100c8:	4413      	add	r3, r2
 80100ca:	2200      	movs	r2, #0
 80100cc:	701a      	strb	r2, [r3, #0]
    idx_1--;
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	3b01      	subs	r3, #1
 80100d2:	61fb      	str	r3, [r7, #28]

    /*
     *Esta sección da vuelta el arreglo ya que se completó al revés.
     */
    int idx_2 = 0;
 80100d4:	2300      	movs	r3, #0
 80100d6:	61bb      	str	r3, [r7, #24]
    char ch_temp;

    while (idx_1 > idx_2)
 80100d8:	e017      	b.n	801010a <fm_lcd_fp_to_str+0x116>
    {
        ch_temp = p_str[idx_1];
 80100da:	69fb      	ldr	r3, [r7, #28]
 80100dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100de:	4413      	add	r3, r2
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	74fb      	strb	r3, [r7, #19]
        p_str[idx_1] = p_str[idx_2];
 80100e4:	69bb      	ldr	r3, [r7, #24]
 80100e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100e8:	441a      	add	r2, r3
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80100ee:	440b      	add	r3, r1
 80100f0:	7812      	ldrb	r2, [r2, #0]
 80100f2:	701a      	strb	r2, [r3, #0]
        p_str[idx_2] = ch_temp;
 80100f4:	69bb      	ldr	r3, [r7, #24]
 80100f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100f8:	4413      	add	r3, r2
 80100fa:	7cfa      	ldrb	r2, [r7, #19]
 80100fc:	701a      	strb	r2, [r3, #0]
        idx_1--;
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	3b01      	subs	r3, #1
 8010102:	61fb      	str	r3, [r7, #28]
        idx_2++;
 8010104:	69bb      	ldr	r3, [r7, #24]
 8010106:	3301      	adds	r3, #1
 8010108:	61bb      	str	r3, [r7, #24]
    while (idx_1 > idx_2)
 801010a:	69fa      	ldr	r2, [r7, #28]
 801010c:	69bb      	ldr	r3, [r7, #24]
 801010e:	429a      	cmp	r2, r3
 8010110:	dce3      	bgt.n	80100da <fm_lcd_fp_to_str+0xe6>
    }

    return (0);
 8010112:	2300      	movs	r3, #0
}
 8010114:	4618      	mov	r0, r3
 8010116:	3720      	adds	r7, #32
 8010118:	46bd      	mov	sp, r7
 801011a:	bc90      	pop	{r4, r7}
 801011c:	4770      	bx	lr

0801011e <fm_lcd_init>:
 * @brief Es la primera instrucción a llamar para usar el lcd.
 * @param  None
 * @retval None
 */
void fm_lcd_init()
{
 801011e:	b580      	push	{r7, lr}
 8010120:	af00      	add	r7, sp, #0
    lcd_clear_all();
 8010122:	f000 fb67 	bl	80107f4 <lcd_clear_all>
    lcd_init();
 8010126:	f001 f9fd 	bl	8011524 <lcd_init>
}
 801012a:	bf00      	nop
 801012c:	bd80      	pop	{r7, pc}
	...

08010130 <fm_lcd_k_factor>:
 * @param Evento actual con el que se imprime esta pantalla.
 * @param Dígito a modificar el cual debe titilar.
 * @retval None
 */
void fm_lcd_k_factor(fm_event_t event_id, sel_digit_t digit_modify)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b08e      	sub	sp, #56	; 0x38
 8010134:	af02      	add	r7, sp, #8
 8010136:	4603      	mov	r3, r0
 8010138:	460a      	mov	r2, r1
 801013a:	71fb      	strb	r3, [r7, #7]
 801013c:	4613      	mov	r3, r2
 801013e:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(K_FACTOR), '0',
 8010140:	f107 0320 	add.w	r3, r7, #32
 8010144:	2100      	movs	r1, #0
 8010146:	4618      	mov	r0, r3
 8010148:	f7ff f804 	bl	800f154 <fm_factory_get_k_factor>
 801014c:	2314      	movs	r3, #20
 801014e:	9301      	str	r3, [sp, #4]
 8010150:	f107 030c 	add.w	r3, r7, #12
 8010154:	9300      	str	r3, [sp, #0]
 8010156:	2309      	movs	r3, #9
 8010158:	2230      	movs	r2, #48	; 0x30
 801015a:	f107 0120 	add.w	r1, r7, #32
 801015e:	c903      	ldmia	r1, {r0, r1}
 8010160:	f7ff ff48 	bl	800fff4 <fm_lcd_fp_to_str>
    LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(K_FACTOR), lcd_msg,
 8010164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010168:	2100      	movs	r1, #0
 801016a:	4618      	mov	r0, r3
 801016c:	f7fe fff2 	bl	800f154 <fm_factory_get_k_factor>
 8010170:	f107 020c 	add.w	r2, r7, #12
 8010174:	2314      	movs	r3, #20
 8010176:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801017a:	c903      	ldmia	r1, {r0, r1}
 801017c:	f7ff fef6 	bl	800ff6c <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 8010180:	f107 030c 	add.w	r3, r7, #12
 8010184:	2100      	movs	r1, #0
 8010186:	4618      	mov	r0, r3
 8010188:	f000 f91c 	bl	80103c4 <fm_lcd_puts>

    if (event_id == EVENT_KEY_ENTER
 801018c:	79fb      	ldrb	r3, [r7, #7]
 801018e:	2b04      	cmp	r3, #4
 8010190:	d006      	beq.n	80101a0 <fm_lcd_k_factor+0x70>
    || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 8010192:	4b1e      	ldr	r3, [pc, #120]	; (801020c <fm_lcd_k_factor+0xdc>)
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	2b04      	cmp	r3, #4
 8010198:	d106      	bne.n	80101a8 <fm_lcd_k_factor+0x78>
 801019a:	79fb      	ldrb	r3, [r7, #7]
 801019c:	2b01      	cmp	r3, #1
 801019e:	d103      	bne.n	80101a8 <fm_lcd_k_factor+0x78>
    {
        blink = 1;
 80101a0:	4b1b      	ldr	r3, [pc, #108]	; (8010210 <fm_lcd_k_factor+0xe0>)
 80101a2:	2201      	movs	r2, #1
 80101a4:	601a      	str	r2, [r3, #0]
 80101a6:	e016      	b.n	80101d6 <fm_lcd_k_factor+0xa6>
    }
    else if (event_id == EVENT_KEY_DOWN
 80101a8:	79fb      	ldrb	r3, [r7, #7]
 80101aa:	2b03      	cmp	r3, #3
 80101ac:	d010      	beq.n	80101d0 <fm_lcd_k_factor+0xa0>
    || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 80101ae:	4b17      	ldr	r3, [pc, #92]	; (801020c <fm_lcd_k_factor+0xdc>)
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	2b03      	cmp	r3, #3
 80101b4:	d102      	bne.n	80101bc <fm_lcd_k_factor+0x8c>
 80101b6:	79fb      	ldrb	r3, [r7, #7]
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d009      	beq.n	80101d0 <fm_lcd_k_factor+0xa0>
    || event_id == EVENT_KEY_UP
 80101bc:	79fb      	ldrb	r3, [r7, #7]
 80101be:	2b02      	cmp	r3, #2
 80101c0:	d006      	beq.n	80101d0 <fm_lcd_k_factor+0xa0>
    || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 80101c2:	4b12      	ldr	r3, [pc, #72]	; (801020c <fm_lcd_k_factor+0xdc>)
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	2b02      	cmp	r3, #2
 80101c8:	d105      	bne.n	80101d6 <fm_lcd_k_factor+0xa6>
 80101ca:	79fb      	ldrb	r3, [r7, #7]
 80101cc:	2b01      	cmp	r3, #1
 80101ce:	d102      	bne.n	80101d6 <fm_lcd_k_factor+0xa6>
    {
        blink = 0;
 80101d0:	4b0f      	ldr	r3, [pc, #60]	; (8010210 <fm_lcd_k_factor+0xe0>)
 80101d2:	2200      	movs	r2, #0
 80101d4:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 80101d6:	4b0e      	ldr	r3, [pc, #56]	; (8010210 <fm_lcd_k_factor+0xe0>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2b01      	cmp	r3, #1
 80101dc:	d10b      	bne.n	80101f6 <fm_lcd_k_factor+0xc6>
    {
        lcd_clear_digit(DIG_7 - digit_modify, HIGH_ROW);
 80101de:	79bb      	ldrb	r3, [r7, #6]
 80101e0:	f1c3 0307 	rsb	r3, r3, #7
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	2100      	movs	r1, #0
 80101e8:	4618      	mov	r0, r3
 80101ea:	f000 fb2b 	bl	8010844 <lcd_clear_digit>
        blink = 0;
 80101ee:	4b08      	ldr	r3, [pc, #32]	; (8010210 <fm_lcd_k_factor+0xe0>)
 80101f0:	2200      	movs	r2, #0
 80101f2:	601a      	str	r2, [r3, #0]
 80101f4:	e002      	b.n	80101fc <fm_lcd_k_factor+0xcc>
    }
    else
    {
        blink = 1;
 80101f6:	4b06      	ldr	r3, [pc, #24]	; (8010210 <fm_lcd_k_factor+0xe0>)
 80101f8:	2201      	movs	r2, #1
 80101fa:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(K, 0x00);
 80101fc:	2100      	movs	r1, #0
 80101fe:	200b      	movs	r0, #11
 8010200:	f001 fc46 	bl	8011a90 <lcd_set_symbol>
}
 8010204:	bf00      	nop
 8010206:	3730      	adds	r7, #48	; 0x30
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}
 801020c:	20001e13 	.word	0x20001e13
 8010210:	2000011c 	.word	0x2000011c

08010214 <fm_lcd_k_lin>:
 * @param Evento actual con el que se imprimió esta pantalla.
 * @param Digito a modificar, el cual debe parpadear.
 */
void fm_lcd_k_lin(sel_k k_sel, fm_event_t event_id,
sel_digit_k_lin_t digit_lin_modify)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b090      	sub	sp, #64	; 0x40
 8010218:	af02      	add	r7, sp, #8
 801021a:	4603      	mov	r3, r0
 801021c:	71fb      	strb	r3, [r7, #7]
 801021e:	460b      	mov	r3, r1
 8010220:	71bb      	strb	r3, [r7, #6]
 8010222:	4613      	mov	r3, r2
 8010224:	717b      	strb	r3, [r7, #5]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(k_sel), '0', LINE_0_DIGITS,
 8010226:	f107 0320 	add.w	r3, r7, #32
 801022a:	79fa      	ldrb	r2, [r7, #7]
 801022c:	4611      	mov	r1, r2
 801022e:	4618      	mov	r0, r3
 8010230:	f7fe ff90 	bl	800f154 <fm_factory_get_k_factor>
 8010234:	2314      	movs	r3, #20
 8010236:	9301      	str	r3, [sp, #4]
 8010238:	f107 030c 	add.w	r3, r7, #12
 801023c:	9300      	str	r3, [sp, #0]
 801023e:	2309      	movs	r3, #9
 8010240:	2230      	movs	r2, #48	; 0x30
 8010242:	f107 0120 	add.w	r1, r7, #32
 8010246:	c903      	ldmia	r1, {r0, r1}
 8010248:	f7ff fed4 	bl	800fff4 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(k_sel), lcd_msg, sizeof(lcd_msg));
 801024c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010250:	79fa      	ldrb	r2, [r7, #7]
 8010252:	4611      	mov	r1, r2
 8010254:	4618      	mov	r0, r3
 8010256:	f7fe ff7d 	bl	800f154 <fm_factory_get_k_factor>
 801025a:	f107 020c 	add.w	r2, r7, #12
 801025e:	2314      	movs	r3, #20
 8010260:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010264:	c903      	ldmia	r1, {r0, r1}
 8010266:	f7ff fe81 	bl	800ff6c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 801026a:	f107 030c 	add.w	r3, r7, #12
 801026e:	2100      	movs	r1, #0
 8010270:	4618      	mov	r0, r3
 8010272:	f000 f8a7 	bl	80103c4 <fm_lcd_puts>

    fm_lcd_fp_to_str(fm_factory_get_frec_lin(k_sel), '0', LINE_1_DIGITS,
 8010276:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801027a:	79fa      	ldrb	r2, [r7, #7]
 801027c:	4611      	mov	r1, r2
 801027e:	4618      	mov	r0, r3
 8010280:	f7fe ff18 	bl	800f0b4 <fm_factory_get_frec_lin>
 8010284:	2314      	movs	r3, #20
 8010286:	9301      	str	r3, [sp, #4]
 8010288:	f107 030c 	add.w	r3, r7, #12
 801028c:	9300      	str	r3, [sp, #0]
 801028e:	2308      	movs	r3, #8
 8010290:	2230      	movs	r2, #48	; 0x30
 8010292:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010296:	c903      	ldmia	r1, {r0, r1}
 8010298:	f7ff feac 	bl	800fff4 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 801029c:	f107 030c 	add.w	r3, r7, #12
 80102a0:	2101      	movs	r1, #1
 80102a2:	4618      	mov	r0, r3
 80102a4:	f000 f88e 	bl	80103c4 <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 80102a8:	2101      	movs	r1, #1
 80102aa:	2000      	movs	r0, #0
 80102ac:	f000 faca 	bl	8010844 <lcd_clear_digit>
    lcd_clear_digit(DIGIT_1, LOW_ROW);
 80102b0:	2101      	movs	r1, #1
 80102b2:	2001      	movs	r0, #1
 80102b4:	f000 fac6 	bl	8010844 <lcd_clear_digit>
    lcd_clear_digit(DIGIT_2, LOW_ROW);
 80102b8:	2101      	movs	r1, #1
 80102ba:	2002      	movs	r0, #2
 80102bc:	f000 fac2 	bl	8010844 <lcd_clear_digit>

    if (event_id == EVENT_KEY_ENTER
 80102c0:	79bb      	ldrb	r3, [r7, #6]
 80102c2:	2b04      	cmp	r3, #4
 80102c4:	d006      	beq.n	80102d4 <fm_lcd_k_lin+0xc0>
    || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 80102c6:	4b3d      	ldr	r3, [pc, #244]	; (80103bc <fm_lcd_k_lin+0x1a8>)
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	2b04      	cmp	r3, #4
 80102cc:	d106      	bne.n	80102dc <fm_lcd_k_lin+0xc8>
 80102ce:	79bb      	ldrb	r3, [r7, #6]
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d103      	bne.n	80102dc <fm_lcd_k_lin+0xc8>
    {
        blink = 1;
 80102d4:	4b3a      	ldr	r3, [pc, #232]	; (80103c0 <fm_lcd_k_lin+0x1ac>)
 80102d6:	2201      	movs	r2, #1
 80102d8:	601a      	str	r2, [r3, #0]
 80102da:	e016      	b.n	801030a <fm_lcd_k_lin+0xf6>
    }
    else if (event_id == EVENT_KEY_DOWN
 80102dc:	79bb      	ldrb	r3, [r7, #6]
 80102de:	2b03      	cmp	r3, #3
 80102e0:	d010      	beq.n	8010304 <fm_lcd_k_lin+0xf0>
    || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 80102e2:	4b36      	ldr	r3, [pc, #216]	; (80103bc <fm_lcd_k_lin+0x1a8>)
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	2b03      	cmp	r3, #3
 80102e8:	d102      	bne.n	80102f0 <fm_lcd_k_lin+0xdc>
 80102ea:	79bb      	ldrb	r3, [r7, #6]
 80102ec:	2b01      	cmp	r3, #1
 80102ee:	d009      	beq.n	8010304 <fm_lcd_k_lin+0xf0>
    || event_id == EVENT_KEY_UP
 80102f0:	79bb      	ldrb	r3, [r7, #6]
 80102f2:	2b02      	cmp	r3, #2
 80102f4:	d006      	beq.n	8010304 <fm_lcd_k_lin+0xf0>
    || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 80102f6:	4b31      	ldr	r3, [pc, #196]	; (80103bc <fm_lcd_k_lin+0x1a8>)
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	2b02      	cmp	r3, #2
 80102fc:	d105      	bne.n	801030a <fm_lcd_k_lin+0xf6>
 80102fe:	79bb      	ldrb	r3, [r7, #6]
 8010300:	2b01      	cmp	r3, #1
 8010302:	d102      	bne.n	801030a <fm_lcd_k_lin+0xf6>
    {
        blink = 0;
 8010304:	4b2e      	ldr	r3, [pc, #184]	; (80103c0 <fm_lcd_k_lin+0x1ac>)
 8010306:	2200      	movs	r2, #0
 8010308:	601a      	str	r2, [r3, #0]
    }

    if (digit_lin_modify <= DIG_LIN_7)
 801030a:	797b      	ldrb	r3, [r7, #5]
 801030c:	2b07      	cmp	r3, #7
 801030e:	d813      	bhi.n	8010338 <fm_lcd_k_lin+0x124>
    {
        if (blink == 1)
 8010310:	4b2b      	ldr	r3, [pc, #172]	; (80103c0 <fm_lcd_k_lin+0x1ac>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2b01      	cmp	r3, #1
 8010316:	d10b      	bne.n	8010330 <fm_lcd_k_lin+0x11c>
        {
            lcd_clear_digit(DIG_LIN_7 - digit_lin_modify, HIGH_ROW);
 8010318:	797b      	ldrb	r3, [r7, #5]
 801031a:	f1c3 0307 	rsb	r3, r3, #7
 801031e:	b2db      	uxtb	r3, r3
 8010320:	2100      	movs	r1, #0
 8010322:	4618      	mov	r0, r3
 8010324:	f000 fa8e 	bl	8010844 <lcd_clear_digit>
            blink = 0;
 8010328:	4b25      	ldr	r3, [pc, #148]	; (80103c0 <fm_lcd_k_lin+0x1ac>)
 801032a:	2200      	movs	r2, #0
 801032c:	601a      	str	r2, [r3, #0]
 801032e:	e016      	b.n	801035e <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 8010330:	4b23      	ldr	r3, [pc, #140]	; (80103c0 <fm_lcd_k_lin+0x1ac>)
 8010332:	2201      	movs	r2, #1
 8010334:	601a      	str	r2, [r3, #0]
 8010336:	e012      	b.n	801035e <fm_lcd_k_lin+0x14a>
        }
    }
    else
    {
        if (blink == 1)
 8010338:	4b21      	ldr	r3, [pc, #132]	; (80103c0 <fm_lcd_k_lin+0x1ac>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	2b01      	cmp	r3, #1
 801033e:	d10b      	bne.n	8010358 <fm_lcd_k_lin+0x144>
        {
            lcd_clear_digit(DIG_LIN_6 - digit_lin_modify + DIG_LIN_8, LOW_ROW);
 8010340:	797b      	ldrb	r3, [r7, #5]
 8010342:	f1c3 030e 	rsb	r3, r3, #14
 8010346:	b2db      	uxtb	r3, r3
 8010348:	2101      	movs	r1, #1
 801034a:	4618      	mov	r0, r3
 801034c:	f000 fa7a 	bl	8010844 <lcd_clear_digit>
            blink = 0;
 8010350:	4b1b      	ldr	r3, [pc, #108]	; (80103c0 <fm_lcd_k_lin+0x1ac>)
 8010352:	2200      	movs	r2, #0
 8010354:	601a      	str	r2, [r3, #0]
 8010356:	e002      	b.n	801035e <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 8010358:	4b19      	ldr	r3, [pc, #100]	; (80103c0 <fm_lcd_k_lin+0x1ac>)
 801035a:	2201      	movs	r2, #1
 801035c:	601a      	str	r2, [r3, #0]
        }
    }

    lcd_set_symbol(F, 0x00);
 801035e:	2100      	movs	r1, #0
 8010360:	2010      	movs	r0, #16
 8010362:	f001 fb95 	bl	8011a90 <lcd_set_symbol>
    if (k_sel == K_LIN_1)
 8010366:	79fb      	ldrb	r3, [r7, #7]
 8010368:	2b01      	cmp	r3, #1
 801036a:	d103      	bne.n	8010374 <fm_lcd_k_lin+0x160>
    {
        lcd_set_symbol(LIN_1, 0x00);
 801036c:	2100      	movs	r1, #0
 801036e:	2011      	movs	r0, #17
 8010370:	f001 fb8e 	bl	8011a90 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_2)
 8010374:	79fb      	ldrb	r3, [r7, #7]
 8010376:	2b02      	cmp	r3, #2
 8010378:	d103      	bne.n	8010382 <fm_lcd_k_lin+0x16e>
    {
        lcd_set_symbol(LIN_2, 0x00);
 801037a:	2100      	movs	r1, #0
 801037c:	2012      	movs	r0, #18
 801037e:	f001 fb87 	bl	8011a90 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_3)
 8010382:	79fb      	ldrb	r3, [r7, #7]
 8010384:	2b03      	cmp	r3, #3
 8010386:	d103      	bne.n	8010390 <fm_lcd_k_lin+0x17c>
    {
        lcd_set_symbol(LIN_3, 0x00);
 8010388:	2100      	movs	r1, #0
 801038a:	2013      	movs	r0, #19
 801038c:	f001 fb80 	bl	8011a90 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_4)
 8010390:	79fb      	ldrb	r3, [r7, #7]
 8010392:	2b04      	cmp	r3, #4
 8010394:	d103      	bne.n	801039e <fm_lcd_k_lin+0x18a>
    {
        lcd_set_symbol(LIN_4, 0x00);
 8010396:	2100      	movs	r1, #0
 8010398:	2014      	movs	r0, #20
 801039a:	f001 fb79 	bl	8011a90 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_5)
 801039e:	79fb      	ldrb	r3, [r7, #7]
 80103a0:	2b05      	cmp	r3, #5
 80103a2:	d103      	bne.n	80103ac <fm_lcd_k_lin+0x198>
    {
        lcd_set_symbol(LIN_5, 0x00);
 80103a4:	2100      	movs	r1, #0
 80103a6:	2015      	movs	r0, #21
 80103a8:	f001 fb72 	bl	8011a90 <lcd_set_symbol>
    }
    lcd_set_symbol(HZ, 0x00);
 80103ac:	2100      	movs	r1, #0
 80103ae:	2016      	movs	r0, #22
 80103b0:	f001 fb6e 	bl	8011a90 <lcd_set_symbol>
}
 80103b4:	bf00      	nop
 80103b6:	3738      	adds	r7, #56	; 0x38
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	20001e13 	.word	0x20001e13
 80103c0:	2000011c 	.word	0x2000011c

080103c4 <fm_lcd_puts>:
 * @param Arreglo a imprimir.
 * @param Fila donde se coloca el arreglo a imprimir.
 * @retval None
 */
void fm_lcd_puts(const char *c, const rows_t row)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b084      	sub	sp, #16
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	460b      	mov	r3, r1
 80103ce:	70fb      	strb	r3, [r7, #3]
    uint8_t col = 0;
 80103d0:	2300      	movs	r3, #0
 80103d2:	73fb      	strb	r3, [r7, #15]
    uint8_t col_limit;

    if (row == 0)
 80103d4:	78fb      	ldrb	r3, [r7, #3]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d102      	bne.n	80103e0 <fm_lcd_puts+0x1c>
    {
        col_limit = LINE_0_DIGITS - 1;
 80103da:	2308      	movs	r3, #8
 80103dc:	73bb      	strb	r3, [r7, #14]
 80103de:	e026      	b.n	801042e <fm_lcd_puts+0x6a>
    }
    else
    {
        col_limit = LINE_1_DIGITS - 1;
 80103e0:	2307      	movs	r3, #7
 80103e2:	73bb      	strb	r3, [r7, #14]
    }

    while ((*c) && (col < col_limit))
 80103e4:	e023      	b.n	801042e <fm_lcd_puts+0x6a>
    {
        if (((*c >= '0') && (*c <= '9')) || (*c == ' ') || (*c == '.'))
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	2b2f      	cmp	r3, #47	; 0x2f
 80103ec:	d903      	bls.n	80103f6 <fm_lcd_puts+0x32>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	2b39      	cmp	r3, #57	; 0x39
 80103f4:	d907      	bls.n	8010406 <fm_lcd_puts+0x42>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	781b      	ldrb	r3, [r3, #0]
 80103fa:	2b20      	cmp	r3, #32
 80103fc:	d003      	beq.n	8010406 <fm_lcd_puts+0x42>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	2b2e      	cmp	r3, #46	; 0x2e
 8010404:	d106      	bne.n	8010414 <fm_lcd_puts+0x50>
        {
            lcd_put_char(*c, col, row);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	781b      	ldrb	r3, [r3, #0]
 801040a:	78fa      	ldrb	r2, [r7, #3]
 801040c:	7bf9      	ldrb	r1, [r7, #15]
 801040e:	4618      	mov	r0, r3
 8010410:	f001 f88e 	bl	8011530 <lcd_put_char>
        }
        col++;
 8010414:	7bfb      	ldrb	r3, [r7, #15]
 8010416:	3301      	adds	r3, #1
 8010418:	73fb      	strb	r3, [r7, #15]
        c++;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	3301      	adds	r3, #1
 801041e:	607b      	str	r3, [r7, #4]
        if (*c == '.')
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	2b2e      	cmp	r3, #46	; 0x2e
 8010426:	d102      	bne.n	801042e <fm_lcd_puts+0x6a>
        {
            col--;
 8010428:	7bfb      	ldrb	r3, [r7, #15]
 801042a:	3b01      	subs	r3, #1
 801042c:	73fb      	strb	r3, [r7, #15]
    while ((*c) && (col < col_limit))
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d003      	beq.n	801043e <fm_lcd_puts+0x7a>
 8010436:	7bfa      	ldrb	r2, [r7, #15]
 8010438:	7bbb      	ldrb	r3, [r7, #14]
 801043a:	429a      	cmp	r2, r3
 801043c:	d3d3      	bcc.n	80103e6 <fm_lcd_puts+0x22>
        }
    }
}
 801043e:	bf00      	nop
 8010440:	3710      	adds	r7, #16
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <fm_lcd_refresh>:
 * la librería de mas bajo nivel 'lcd.h'.
 * @param  None
 * @retval None
 */
void fm_lcd_refresh()
{
 8010446:	b580      	push	{r7, lr}
 8010448:	af00      	add	r7, sp, #0
    lcd_refresh();
 801044a:	f001 fa6f 	bl	801192c <lcd_refresh>
}
 801044e:	bf00      	nop
 8010450:	bd80      	pop	{r7, pc}

08010452 <fm_lcd_ttl_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_ttl_rate()
{
 8010452:	b580      	push	{r7, lr}
 8010454:	b0b8      	sub	sp, #224	; 0xe0
 8010456:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_ttl().volume, ' ', LINE_0_DIGITS, lcd_msg,
 8010458:	f107 0318 	add.w	r3, r7, #24
 801045c:	4618      	mov	r0, r3
 801045e:	f004 fc2b 	bl	8014cb8 <fmc_get_ttl>
 8010462:	2314      	movs	r3, #20
 8010464:	9301      	str	r3, [sp, #4]
 8010466:	1d3b      	adds	r3, r7, #4
 8010468:	9300      	str	r3, [sp, #0]
 801046a:	2309      	movs	r3, #9
 801046c:	2220      	movs	r2, #32
 801046e:	f107 0120 	add.w	r1, r7, #32
 8010472:	c903      	ldmia	r1, {r0, r1}
 8010474:	f7ff fdbe 	bl	800fff4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_ttl().volume, lcd_msg, sizeof(lcd_msg));
 8010478:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801047c:	4618      	mov	r0, r3
 801047e:	f004 fc1b 	bl	8014cb8 <fmc_get_ttl>
 8010482:	1d3a      	adds	r2, r7, #4
 8010484:	2314      	movs	r3, #20
 8010486:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801048a:	c903      	ldmia	r1, {r0, r1}
 801048c:	f7ff fd6e 	bl	800ff6c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 8010490:	1d3b      	adds	r3, r7, #4
 8010492:	2100      	movs	r1, #0
 8010494:	4618      	mov	r0, r3
 8010496:	f7ff ff95 	bl	80103c4 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 801049a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801049e:	4618      	mov	r0, r3
 80104a0:	f004 fba4 	bl	8014bec <fmc_get_rate>
 80104a4:	2314      	movs	r3, #20
 80104a6:	9301      	str	r3, [sp, #4]
 80104a8:	1d3b      	adds	r3, r7, #4
 80104aa:	9300      	str	r3, [sp, #0]
 80104ac:	2308      	movs	r3, #8
 80104ae:	2220      	movs	r2, #32
 80104b0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80104b4:	c903      	ldmia	r1, {r0, r1}
 80104b6:	f7ff fd9d 	bl	800fff4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 80104ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80104be:	4618      	mov	r0, r3
 80104c0:	f004 fb94 	bl	8014bec <fmc_get_rate>
 80104c4:	1d3a      	adds	r2, r7, #4
 80104c6:	2314      	movs	r3, #20
 80104c8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80104cc:	c903      	ldmia	r1, {r0, r1}
 80104ce:	f7ff fd4d 	bl	800ff6c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 80104d2:	1d3b      	adds	r3, r7, #4
 80104d4:	2101      	movs	r1, #1
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7ff ff74 	bl	80103c4 <fm_lcd_puts>

    lcd_set_symbol(TTL, 0x0);
 80104dc:	2100      	movs	r1, #0
 80104de:	2005      	movs	r0, #5
 80104e0:	f001 fad6 	bl	8011a90 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 80104e4:	2100      	movs	r1, #0
 80104e6:	2002      	movs	r0, #2
 80104e8:	f001 fad2 	bl	8011a90 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_ttl().unit_volume, 0x0);
 80104ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80104f0:	4618      	mov	r0, r3
 80104f2:	f004 fbe1 	bl	8014cb8 <fmc_get_ttl>
 80104f6:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80104fa:	2100      	movs	r1, #0
 80104fc:	4618      	mov	r0, r3
 80104fe:	f001 fe87 	bl	8012210 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 8010502:	2100      	movs	r1, #0
 8010504:	2007      	movs	r0, #7
 8010506:	f001 fac3 	bl	8011a90 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_ttl().unit_time, 0x0);
 801050a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801050e:	4618      	mov	r0, r3
 8010510:	f004 fbd2 	bl	8014cb8 <fmc_get_ttl>
 8010514:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8010518:	2100      	movs	r1, #0
 801051a:	4618      	mov	r0, r3
 801051c:	f001 fe36 	bl	801218c <lcd_set_time_unit>
}
 8010520:	bf00      	nop
 8010522:	37d8      	adds	r7, #216	; 0xd8
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <fm_lcd_units_tim>:
 * configuración de unidades tiempo y la resolución del factor RATE.
 * @param  Evento actual con el que se imprime la pantalla.
 * @retval None
 */
void fm_lcd_units_tim(fm_event_t event_id)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b0a6      	sub	sp, #152	; 0x98
 801052c:	af02      	add	r7, sp, #8
 801052e:	4603      	mov	r3, r0
 8010530:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_tim(), '0', LINE_1_DIGITS, lcd_msg,
 8010532:	f107 0320 	add.w	r3, r7, #32
 8010536:	4618      	mov	r0, r3
 8010538:	f7fe fea6 	bl	800f288 <fm_factory_get_units_tim>
 801053c:	2314      	movs	r3, #20
 801053e:	9301      	str	r3, [sp, #4]
 8010540:	f107 030c 	add.w	r3, r7, #12
 8010544:	9300      	str	r3, [sp, #0]
 8010546:	2308      	movs	r3, #8
 8010548:	2230      	movs	r2, #48	; 0x30
 801054a:	f107 0120 	add.w	r1, r7, #32
 801054e:	c903      	ldmia	r1, {r0, r1}
 8010550:	f7ff fd50 	bl	800fff4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_tim(), lcd_msg, sizeof(lcd_msg));
 8010554:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010558:	4618      	mov	r0, r3
 801055a:	f7fe fe95 	bl	800f288 <fm_factory_get_units_tim>
 801055e:	f107 020c 	add.w	r2, r7, #12
 8010562:	2314      	movs	r3, #20
 8010564:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010568:	c903      	ldmia	r1, {r0, r1}
 801056a:	f7ff fcff 	bl	800ff6c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 801056e:	f107 030c 	add.w	r3, r7, #12
 8010572:	2101      	movs	r1, #1
 8010574:	4618      	mov	r0, r3
 8010576:	f7ff ff25 	bl	80103c4 <fm_lcd_puts>

    if (event_id != EVENT_LCD_REFRESH
 801057a:	79fb      	ldrb	r3, [r7, #7]
 801057c:	2b01      	cmp	r3, #1
 801057e:	d106      	bne.n	801058e <fm_lcd_units_tim+0x66>
    || (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 8010580:	4b35      	ldr	r3, [pc, #212]	; (8010658 <fm_lcd_units_tim+0x130>)
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	2b01      	cmp	r3, #1
 8010586:	d005      	beq.n	8010594 <fm_lcd_units_tim+0x6c>
 8010588:	79fb      	ldrb	r3, [r7, #7]
 801058a:	2b01      	cmp	r3, #1
 801058c:	d102      	bne.n	8010594 <fm_lcd_units_tim+0x6c>
    {
        blink = 0;
 801058e:	4b33      	ldr	r3, [pc, #204]	; (801065c <fm_lcd_units_tim+0x134>)
 8010590:	2200      	movs	r2, #0
 8010592:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 8010594:	4b31      	ldr	r3, [pc, #196]	; (801065c <fm_lcd_units_tim+0x134>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2b01      	cmp	r3, #1
 801059a:	d146      	bne.n	801062a <fm_lcd_units_tim+0x102>
    {
        if (fm_factory_get_units_tim().res == DECIMAL_1)
 801059c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7fe fe71 	bl	800f288 <fm_factory_get_units_tim>
 80105a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d109      	bne.n	80105c2 <fm_lcd_units_tim+0x9a>
        {
            resolution_modify = PNT_5;
 80105ae:	2305      	movs	r3, #5
 80105b0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 80105b4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80105b8:	4619      	mov	r1, r3
 80105ba:	2001      	movs	r0, #1
 80105bc:	f000 fc80 	bl	8010ec0 <lcd_clear_point>
 80105c0:	e024      	b.n	801060c <fm_lcd_units_tim+0xe4>
        }
        else if (fm_factory_get_units_tim().res == DECIMAL_2)
 80105c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7fe fe5e 	bl	800f288 <fm_factory_get_units_tim>
 80105cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80105d0:	2b02      	cmp	r3, #2
 80105d2:	d109      	bne.n	80105e8 <fm_lcd_units_tim+0xc0>
        {
            resolution_modify = PNT_4;
 80105d4:	2304      	movs	r3, #4
 80105d6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 80105da:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80105de:	4619      	mov	r1, r3
 80105e0:	2001      	movs	r0, #1
 80105e2:	f000 fc6d 	bl	8010ec0 <lcd_clear_point>
 80105e6:	e011      	b.n	801060c <fm_lcd_units_tim+0xe4>
        }
        else if (fm_factory_get_units_tim().res == DECIMAL_3)
 80105e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7fe fe4b 	bl	800f288 <fm_factory_get_units_tim>
 80105f2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80105f6:	2b03      	cmp	r3, #3
 80105f8:	d108      	bne.n	801060c <fm_lcd_units_tim+0xe4>
        {
            resolution_modify = PNT_3;
 80105fa:	2303      	movs	r3, #3
 80105fc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 8010600:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010604:	4619      	mov	r1, r3
 8010606:	2001      	movs	r0, #1
 8010608:	f000 fc5a 	bl	8010ec0 <lcd_clear_point>
        }

        lcd_clear_time_unit(fmc_get_rate().unit_time, 0x0);
 801060c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010610:	4618      	mov	r0, r3
 8010612:	f004 faeb 	bl	8014bec <fmc_get_rate>
 8010616:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 801061a:	2100      	movs	r1, #0
 801061c:	4618      	mov	r0, r3
 801061e:	f000 fcfb 	bl	8011018 <lcd_clear_time_unit>

        blink = 0;
 8010622:	4b0e      	ldr	r3, [pc, #56]	; (801065c <fm_lcd_units_tim+0x134>)
 8010624:	2200      	movs	r2, #0
 8010626:	601a      	str	r2, [r3, #0]
 8010628:	e00d      	b.n	8010646 <fm_lcd_units_tim+0x11e>
    }
    else
    {
        lcd_set_time_unit(fmc_get_rate().unit_time, 0x0);
 801062a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801062e:	4618      	mov	r0, r3
 8010630:	f004 fadc 	bl	8014bec <fmc_get_rate>
 8010634:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010638:	2100      	movs	r1, #0
 801063a:	4618      	mov	r0, r3
 801063c:	f001 fda6 	bl	801218c <lcd_set_time_unit>
        blink = 1;
 8010640:	4b06      	ldr	r3, [pc, #24]	; (801065c <fm_lcd_units_tim+0x134>)
 8010642:	2201      	movs	r2, #1
 8010644:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(RATE, 0x00);
 8010646:	2100      	movs	r1, #0
 8010648:	2002      	movs	r0, #2
 801064a:	f001 fa21 	bl	8011a90 <lcd_set_symbol>
}
 801064e:	bf00      	nop
 8010650:	3790      	adds	r7, #144	; 0x90
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
 8010656:	bf00      	nop
 8010658:	20001e13 	.word	0x20001e13
 801065c:	2000011c 	.word	0x2000011c

08010660 <fm_lcd_units_vol>:
 * TTL.
 * @param  Evento actual con el que se imprime la pantalla.
 * @retval None
 */
void fm_lcd_units_vol(fm_event_t event_id)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b0a6      	sub	sp, #152	; 0x98
 8010664:	af02      	add	r7, sp, #8
 8010666:	4603      	mov	r3, r0
 8010668:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_vol(), '0', LINE_0_DIGITS, lcd_msg,
 801066a:	f107 0320 	add.w	r3, r7, #32
 801066e:	4618      	mov	r0, r3
 8010670:	f7fe fe1c 	bl	800f2ac <fm_factory_get_units_vol>
 8010674:	2314      	movs	r3, #20
 8010676:	9301      	str	r3, [sp, #4]
 8010678:	f107 030c 	add.w	r3, r7, #12
 801067c:	9300      	str	r3, [sp, #0]
 801067e:	2309      	movs	r3, #9
 8010680:	2230      	movs	r2, #48	; 0x30
 8010682:	f107 0120 	add.w	r1, r7, #32
 8010686:	c903      	ldmia	r1, {r0, r1}
 8010688:	f7ff fcb4 	bl	800fff4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_vol(), lcd_msg, sizeof(lcd_msg));
 801068c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010690:	4618      	mov	r0, r3
 8010692:	f7fe fe0b 	bl	800f2ac <fm_factory_get_units_vol>
 8010696:	f107 020c 	add.w	r2, r7, #12
 801069a:	2314      	movs	r3, #20
 801069c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80106a0:	c903      	ldmia	r1, {r0, r1}
 80106a2:	f7ff fc63 	bl	800ff6c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 80106a6:	f107 030c 	add.w	r3, r7, #12
 80106aa:	2100      	movs	r1, #0
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7ff fe89 	bl	80103c4 <fm_lcd_puts>

    if (event_id != EVENT_LCD_REFRESH
 80106b2:	79fb      	ldrb	r3, [r7, #7]
 80106b4:	2b01      	cmp	r3, #1
 80106b6:	d106      	bne.n	80106c6 <fm_lcd_units_vol+0x66>
    || (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 80106b8:	4b37      	ldr	r3, [pc, #220]	; (8010798 <fm_lcd_units_vol+0x138>)
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d005      	beq.n	80106cc <fm_lcd_units_vol+0x6c>
 80106c0:	79fb      	ldrb	r3, [r7, #7]
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	d102      	bne.n	80106cc <fm_lcd_units_vol+0x6c>
    {
        blink = 0;
 80106c6:	4b35      	ldr	r3, [pc, #212]	; (801079c <fm_lcd_units_vol+0x13c>)
 80106c8:	2200      	movs	r2, #0
 80106ca:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 80106cc:	4b33      	ldr	r3, [pc, #204]	; (801079c <fm_lcd_units_vol+0x13c>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	2b01      	cmp	r3, #1
 80106d2:	d146      	bne.n	8010762 <fm_lcd_units_vol+0x102>
    {
        if (fm_factory_get_units_vol().res == DECIMAL_1)
 80106d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80106d8:	4618      	mov	r0, r3
 80106da:	f7fe fde7 	bl	800f2ac <fm_factory_get_units_vol>
 80106de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80106e2:	2b01      	cmp	r3, #1
 80106e4:	d109      	bne.n	80106fa <fm_lcd_units_vol+0x9a>
        {
            resolution_modify = PNT_6;
 80106e6:	2306      	movs	r3, #6
 80106e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 80106ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80106f0:	4619      	mov	r1, r3
 80106f2:	2000      	movs	r0, #0
 80106f4:	f000 fbe4 	bl	8010ec0 <lcd_clear_point>
 80106f8:	e024      	b.n	8010744 <fm_lcd_units_vol+0xe4>
        }
        else if (fm_factory_get_units_vol().res == DECIMAL_2)
 80106fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fe fdd4 	bl	800f2ac <fm_factory_get_units_vol>
 8010704:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010708:	2b02      	cmp	r3, #2
 801070a:	d109      	bne.n	8010720 <fm_lcd_units_vol+0xc0>
        {
            resolution_modify = PNT_5;
 801070c:	2305      	movs	r3, #5
 801070e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 8010712:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010716:	4619      	mov	r1, r3
 8010718:	2000      	movs	r0, #0
 801071a:	f000 fbd1 	bl	8010ec0 <lcd_clear_point>
 801071e:	e011      	b.n	8010744 <fm_lcd_units_vol+0xe4>
        }
        else if (fm_factory_get_units_vol().res == DECIMAL_3)
 8010720:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010724:	4618      	mov	r0, r3
 8010726:	f7fe fdc1 	bl	800f2ac <fm_factory_get_units_vol>
 801072a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801072e:	2b03      	cmp	r3, #3
 8010730:	d108      	bne.n	8010744 <fm_lcd_units_vol+0xe4>
        {
            resolution_modify = PNT_4;
 8010732:	2304      	movs	r3, #4
 8010734:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 8010738:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801073c:	4619      	mov	r1, r3
 801073e:	2000      	movs	r0, #0
 8010740:	f000 fbbe 	bl	8010ec0 <lcd_clear_point>
        }

        lcd_clear_vol_unit(fmc_get_acm().unit_volume, 0x0);
 8010744:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010748:	4618      	mov	r0, r3
 801074a:	f004 fa0f 	bl	8014b6c <fmc_get_acm>
 801074e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8010752:	2100      	movs	r1, #0
 8010754:	4618      	mov	r0, r3
 8010756:	f000 fca1 	bl	801109c <lcd_clear_vol_unit>

        blink = 0;
 801075a:	4b10      	ldr	r3, [pc, #64]	; (801079c <fm_lcd_units_vol+0x13c>)
 801075c:	2200      	movs	r2, #0
 801075e:	601a      	str	r2, [r3, #0]
 8010760:	e00d      	b.n	801077e <fm_lcd_units_vol+0x11e>
    }
    else
    {
        lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 8010762:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010766:	4618      	mov	r0, r3
 8010768:	f004 fa00 	bl	8014b6c <fmc_get_acm>
 801076c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010770:	2100      	movs	r1, #0
 8010772:	4618      	mov	r0, r3
 8010774:	f001 fd4c 	bl	8012210 <lcd_set_vol_unit>
        blink = 1;
 8010778:	4b08      	ldr	r3, [pc, #32]	; (801079c <fm_lcd_units_vol+0x13c>)
 801077a:	2201      	movs	r2, #1
 801077c:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(ACM, 0x00);
 801077e:	2100      	movs	r1, #0
 8010780:	2006      	movs	r0, #6
 8010782:	f001 f985 	bl	8011a90 <lcd_set_symbol>
    lcd_set_symbol(TTL, 0x00);
 8010786:	2100      	movs	r1, #0
 8010788:	2005      	movs	r0, #5
 801078a:	f001 f981 	bl	8011a90 <lcd_set_symbol>
}
 801078e:	bf00      	nop
 8010790:	3790      	adds	r7, #144	; 0x90
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	20001e13 	.word	0x20001e13
 801079c:	2000011c 	.word	0x2000011c

080107a0 <fm_lcd_version>:
 * según las opciones que se elijan.
 * @param puntos de la fila inferior a imprimir, de tipo point_t.
 * @retval None
 */
void fm_lcd_version(point_t low_point1, point_t low_point2)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b086      	sub	sp, #24
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	4603      	mov	r3, r0
 80107a8:	460a      	mov	r2, r1
 80107aa:	71fb      	strb	r3, [r7, #7]
 80107ac:	4613      	mov	r3, r2
 80107ae:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[MSG_LENGTH];

    fm_lcd_format_number_in_line(LOW_ROW, fm_version_get(), lcd_msg,
 80107b0:	f004 f9c2 	bl	8014b38 <fm_version_get>
 80107b4:	4601      	mov	r1, r0
 80107b6:	f107 020c 	add.w	r2, r7, #12
 80107ba:	230c      	movs	r3, #12
 80107bc:	2001      	movs	r0, #1
 80107be:	f7ff fbb1 	bl	800ff24 <fm_lcd_format_number_in_line>
    MSG_LENGTH);
    fm_lcd_puts(lcd_msg, LOW_ROW);
 80107c2:	f107 030c 	add.w	r3, r7, #12
 80107c6:	2101      	movs	r1, #1
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7ff fdfb 	bl	80103c4 <fm_lcd_puts>
    lcd_set_point(LOW_ROW, low_point1);
 80107ce:	79fb      	ldrb	r3, [r7, #7]
 80107d0:	4619      	mov	r1, r3
 80107d2:	2001      	movs	r0, #1
 80107d4:	f001 f8b0 	bl	8011938 <lcd_set_point>
    lcd_set_point(LOW_ROW, low_point2);
 80107d8:	79bb      	ldrb	r3, [r7, #6]
 80107da:	4619      	mov	r1, r3
 80107dc:	2001      	movs	r0, #1
 80107de:	f001 f8ab 	bl	8011938 <lcd_set_point>

    lcd_set_symbol(VE, 0x0);
 80107e2:	2100      	movs	r1, #0
 80107e4:	2009      	movs	r0, #9
 80107e6:	f001 f953 	bl	8011a90 <lcd_set_symbol>
}
 80107ea:	bf00      	nop
 80107ec:	3718      	adds	r7, #24
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
	...

080107f4 <lcd_clear_all>:
 * bits de los segmentos a imprimir.
 * @param  None
 * @retval None
 */
void lcd_clear_all()
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b082      	sub	sp, #8
 80107f8:	af00      	add	r7, sp, #0
    pcf8553_clear_buff();
 80107fa:	f002 f873 	bl	80128e4 <pcf8553_clear_buff>
     * Limpia el buffer intermedio de los números que aparecen en las filas HIGH
     * y LOW de la pantalla LCD. No es muy eficiente si se pretende usar al
     * refrescar la pantalla cada x tiempo, pero será necesario usarla por el
     * momento al pasar de una pantalla a otra.
     */
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 80107fe:	2300      	movs	r3, #0
 8010800:	607b      	str	r3, [r7, #4]
 8010802:	e013      	b.n	801082c <lcd_clear_all+0x38>
    {
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 8010804:	2300      	movs	r3, #0
 8010806:	603b      	str	r3, [r7, #0]
 8010808:	e00a      	b.n	8010820 <lcd_clear_all+0x2c>
        {
            g_buf[cont_buff_row][cont_buff_col] = 0;
 801080a:	4a0d      	ldr	r2, [pc, #52]	; (8010840 <lcd_clear_all+0x4c>)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	00db      	lsls	r3, r3, #3
 8010810:	441a      	add	r2, r3
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	4413      	add	r3, r2
 8010816:	2200      	movs	r2, #0
 8010818:	701a      	strb	r2, [r3, #0]
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	3301      	adds	r3, #1
 801081e:	603b      	str	r3, [r7, #0]
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	2b07      	cmp	r3, #7
 8010824:	ddf1      	ble.n	801080a <lcd_clear_all+0x16>
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	3301      	adds	r3, #1
 801082a:	607b      	str	r3, [r7, #4]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2b01      	cmp	r3, #1
 8010830:	dde8      	ble.n	8010804 <lcd_clear_all+0x10>
        }
    }

    pcf8553_write_all(NONE_SEGMENTS);
 8010832:	2000      	movs	r0, #0
 8010834:	f002 f8e6 	bl	8012a04 <pcf8553_write_all>
}
 8010838:	bf00      	nop
 801083a:	3708      	adds	r7, #8
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	20001d54 	.word	0x20001d54

08010844 <lcd_clear_digit>:
 * @param Dígito a borrar de la pantalla.
 * @param Fila de este dígito.
 * @retval None
 */
void lcd_clear_digit(screen_digits_t digit, rows_t line)
{
 8010844:	b480      	push	{r7}
 8010846:	b083      	sub	sp, #12
 8010848:	af00      	add	r7, sp, #0
 801084a:	4603      	mov	r3, r0
 801084c:	460a      	mov	r2, r1
 801084e:	71fb      	strb	r3, [r7, #7]
 8010850:	4613      	mov	r3, r2
 8010852:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8010854:	79bb      	ldrb	r3, [r7, #6]
 8010856:	2b00      	cmp	r3, #0
 8010858:	f040 81aa 	bne.w	8010bb0 <lcd_clear_digit+0x36c>
    {
        switch (digit)
 801085c:	79fb      	ldrb	r3, [r7, #7]
 801085e:	2b07      	cmp	r3, #7
 8010860:	f200 8320 	bhi.w	8010ea4 <lcd_clear_digit+0x660>
 8010864:	a201      	add	r2, pc, #4	; (adr r2, 801086c <lcd_clear_digit+0x28>)
 8010866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801086a:	bf00      	nop
 801086c:	0801088d 	.word	0x0801088d
 8010870:	080108f1 	.word	0x080108f1
 8010874:	08010955 	.word	0x08010955
 8010878:	080109b9 	.word	0x080109b9
 801087c:	08010a1d 	.word	0x08010a1d
 8010880:	08010a81 	.word	0x08010a81
 8010884:	08010ae9 	.word	0x08010ae9
 8010888:	08010b4d 	.word	0x08010b4d
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_7);
 801088c:	4b95      	ldr	r3, [pc, #596]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 801088e:	7b1b      	ldrb	r3, [r3, #12]
 8010890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010894:	b2da      	uxtb	r2, r3
 8010896:	4b93      	ldr	r3, [pc, #588]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010898:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_6);
 801089a:	4b92      	ldr	r3, [pc, #584]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 801089c:	7b1b      	ldrb	r3, [r3, #12]
 801089e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108a2:	b2da      	uxtb	r2, r3
 80108a4:	4b8f      	ldr	r3, [pc, #572]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80108a6:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_7);
 80108a8:	4b8e      	ldr	r3, [pc, #568]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80108aa:	7c5b      	ldrb	r3, [r3, #17]
 80108ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108b0:	b2da      	uxtb	r2, r3
 80108b2:	4b8c      	ldr	r3, [pc, #560]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80108b4:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_6);
 80108b6:	4b8b      	ldr	r3, [pc, #556]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80108b8:	7c5b      	ldrb	r3, [r3, #17]
 80108ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108be:	b2da      	uxtb	r2, r3
 80108c0:	4b88      	ldr	r3, [pc, #544]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80108c2:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_6);
 80108c4:	4b87      	ldr	r3, [pc, #540]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80108c6:	789b      	ldrb	r3, [r3, #2]
 80108c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108cc:	b2da      	uxtb	r2, r3
 80108ce:	4b85      	ldr	r3, [pc, #532]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80108d0:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_7);
 80108d2:	4b84      	ldr	r3, [pc, #528]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80108d4:	789b      	ldrb	r3, [r3, #2]
 80108d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108da:	b2da      	uxtb	r2, r3
 80108dc:	4b81      	ldr	r3, [pc, #516]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80108de:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_6);
 80108e0:	4b80      	ldr	r3, [pc, #512]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80108e2:	79db      	ldrb	r3, [r3, #7]
 80108e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108e8:	b2da      	uxtb	r2, r3
 80108ea:	4b7e      	ldr	r3, [pc, #504]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80108ec:	71da      	strb	r2, [r3, #7]
            break;
 80108ee:	e2de      	b.n	8010eae <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_13] &= ~(1 << BIT_1);
 80108f0:	4b7c      	ldr	r3, [pc, #496]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80108f2:	7b5b      	ldrb	r3, [r3, #13]
 80108f4:	f023 0302 	bic.w	r3, r3, #2
 80108f8:	b2da      	uxtb	r2, r3
 80108fa:	4b7a      	ldr	r3, [pc, #488]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80108fc:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_0);
 80108fe:	4b79      	ldr	r3, [pc, #484]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010900:	7b5b      	ldrb	r3, [r3, #13]
 8010902:	f023 0301 	bic.w	r3, r3, #1
 8010906:	b2da      	uxtb	r2, r3
 8010908:	4b76      	ldr	r3, [pc, #472]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 801090a:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_1);
 801090c:	4b75      	ldr	r3, [pc, #468]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 801090e:	7c9b      	ldrb	r3, [r3, #18]
 8010910:	f023 0302 	bic.w	r3, r3, #2
 8010914:	b2da      	uxtb	r2, r3
 8010916:	4b73      	ldr	r3, [pc, #460]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010918:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_0);
 801091a:	4b72      	ldr	r3, [pc, #456]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 801091c:	7c9b      	ldrb	r3, [r3, #18]
 801091e:	f023 0301 	bic.w	r3, r3, #1
 8010922:	b2da      	uxtb	r2, r3
 8010924:	4b6f      	ldr	r3, [pc, #444]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010926:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_0);
 8010928:	4b6e      	ldr	r3, [pc, #440]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 801092a:	78db      	ldrb	r3, [r3, #3]
 801092c:	f023 0301 	bic.w	r3, r3, #1
 8010930:	b2da      	uxtb	r2, r3
 8010932:	4b6c      	ldr	r3, [pc, #432]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010934:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_1);
 8010936:	4b6b      	ldr	r3, [pc, #428]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010938:	78db      	ldrb	r3, [r3, #3]
 801093a:	f023 0302 	bic.w	r3, r3, #2
 801093e:	b2da      	uxtb	r2, r3
 8010940:	4b68      	ldr	r3, [pc, #416]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010942:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_0);
 8010944:	4b67      	ldr	r3, [pc, #412]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010946:	7a1b      	ldrb	r3, [r3, #8]
 8010948:	f023 0301 	bic.w	r3, r3, #1
 801094c:	b2da      	uxtb	r2, r3
 801094e:	4b65      	ldr	r3, [pc, #404]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010950:	721a      	strb	r2, [r3, #8]
            break;
 8010952:	e2ac      	b.n	8010eae <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_13] &= ~(1 << BIT_3);
 8010954:	4b63      	ldr	r3, [pc, #396]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010956:	7b5b      	ldrb	r3, [r3, #13]
 8010958:	f023 0308 	bic.w	r3, r3, #8
 801095c:	b2da      	uxtb	r2, r3
 801095e:	4b61      	ldr	r3, [pc, #388]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010960:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_2);
 8010962:	4b60      	ldr	r3, [pc, #384]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010964:	7b5b      	ldrb	r3, [r3, #13]
 8010966:	f023 0304 	bic.w	r3, r3, #4
 801096a:	b2da      	uxtb	r2, r3
 801096c:	4b5d      	ldr	r3, [pc, #372]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 801096e:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_3);
 8010970:	4b5c      	ldr	r3, [pc, #368]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010972:	7c9b      	ldrb	r3, [r3, #18]
 8010974:	f023 0308 	bic.w	r3, r3, #8
 8010978:	b2da      	uxtb	r2, r3
 801097a:	4b5a      	ldr	r3, [pc, #360]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 801097c:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_2);
 801097e:	4b59      	ldr	r3, [pc, #356]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010980:	7c9b      	ldrb	r3, [r3, #18]
 8010982:	f023 0304 	bic.w	r3, r3, #4
 8010986:	b2da      	uxtb	r2, r3
 8010988:	4b56      	ldr	r3, [pc, #344]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 801098a:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_2);
 801098c:	4b55      	ldr	r3, [pc, #340]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 801098e:	78db      	ldrb	r3, [r3, #3]
 8010990:	f023 0304 	bic.w	r3, r3, #4
 8010994:	b2da      	uxtb	r2, r3
 8010996:	4b53      	ldr	r3, [pc, #332]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010998:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_3);
 801099a:	4b52      	ldr	r3, [pc, #328]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 801099c:	78db      	ldrb	r3, [r3, #3]
 801099e:	f023 0308 	bic.w	r3, r3, #8
 80109a2:	b2da      	uxtb	r2, r3
 80109a4:	4b4f      	ldr	r3, [pc, #316]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80109a6:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_2);
 80109a8:	4b4e      	ldr	r3, [pc, #312]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80109aa:	7a1b      	ldrb	r3, [r3, #8]
 80109ac:	f023 0304 	bic.w	r3, r3, #4
 80109b0:	b2da      	uxtb	r2, r3
 80109b2:	4b4c      	ldr	r3, [pc, #304]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80109b4:	721a      	strb	r2, [r3, #8]
            break;
 80109b6:	e27a      	b.n	8010eae <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_13] &= ~(1 << BIT_5);
 80109b8:	4b4a      	ldr	r3, [pc, #296]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80109ba:	7b5b      	ldrb	r3, [r3, #13]
 80109bc:	f023 0320 	bic.w	r3, r3, #32
 80109c0:	b2da      	uxtb	r2, r3
 80109c2:	4b48      	ldr	r3, [pc, #288]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80109c4:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_4);
 80109c6:	4b47      	ldr	r3, [pc, #284]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80109c8:	7b5b      	ldrb	r3, [r3, #13]
 80109ca:	f023 0310 	bic.w	r3, r3, #16
 80109ce:	b2da      	uxtb	r2, r3
 80109d0:	4b44      	ldr	r3, [pc, #272]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80109d2:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_5);
 80109d4:	4b43      	ldr	r3, [pc, #268]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80109d6:	7c9b      	ldrb	r3, [r3, #18]
 80109d8:	f023 0320 	bic.w	r3, r3, #32
 80109dc:	b2da      	uxtb	r2, r3
 80109de:	4b41      	ldr	r3, [pc, #260]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80109e0:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_4);
 80109e2:	4b40      	ldr	r3, [pc, #256]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80109e4:	7c9b      	ldrb	r3, [r3, #18]
 80109e6:	f023 0310 	bic.w	r3, r3, #16
 80109ea:	b2da      	uxtb	r2, r3
 80109ec:	4b3d      	ldr	r3, [pc, #244]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80109ee:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_4);
 80109f0:	4b3c      	ldr	r3, [pc, #240]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80109f2:	78db      	ldrb	r3, [r3, #3]
 80109f4:	f023 0310 	bic.w	r3, r3, #16
 80109f8:	b2da      	uxtb	r2, r3
 80109fa:	4b3a      	ldr	r3, [pc, #232]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 80109fc:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_5);
 80109fe:	4b39      	ldr	r3, [pc, #228]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a00:	78db      	ldrb	r3, [r3, #3]
 8010a02:	f023 0320 	bic.w	r3, r3, #32
 8010a06:	b2da      	uxtb	r2, r3
 8010a08:	4b36      	ldr	r3, [pc, #216]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a0a:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_4);
 8010a0c:	4b35      	ldr	r3, [pc, #212]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a0e:	7a1b      	ldrb	r3, [r3, #8]
 8010a10:	f023 0310 	bic.w	r3, r3, #16
 8010a14:	b2da      	uxtb	r2, r3
 8010a16:	4b33      	ldr	r3, [pc, #204]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a18:	721a      	strb	r2, [r3, #8]
            break;
 8010a1a:	e248      	b.n	8010eae <lcd_clear_digit+0x66a>
            case DIGIT_4:
                g_lcd_map[REG_13] &= ~(1 << BIT_7);
 8010a1c:	4b31      	ldr	r3, [pc, #196]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a1e:	7b5b      	ldrb	r3, [r3, #13]
 8010a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a24:	b2da      	uxtb	r2, r3
 8010a26:	4b2f      	ldr	r3, [pc, #188]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a28:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_6);
 8010a2a:	4b2e      	ldr	r3, [pc, #184]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a2c:	7b5b      	ldrb	r3, [r3, #13]
 8010a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a32:	b2da      	uxtb	r2, r3
 8010a34:	4b2b      	ldr	r3, [pc, #172]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a36:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_7);
 8010a38:	4b2a      	ldr	r3, [pc, #168]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a3a:	7c9b      	ldrb	r3, [r3, #18]
 8010a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a40:	b2da      	uxtb	r2, r3
 8010a42:	4b28      	ldr	r3, [pc, #160]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a44:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_6);
 8010a46:	4b27      	ldr	r3, [pc, #156]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a48:	7c9b      	ldrb	r3, [r3, #18]
 8010a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a4e:	b2da      	uxtb	r2, r3
 8010a50:	4b24      	ldr	r3, [pc, #144]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a52:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_6);
 8010a54:	4b23      	ldr	r3, [pc, #140]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a56:	78db      	ldrb	r3, [r3, #3]
 8010a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a5c:	b2da      	uxtb	r2, r3
 8010a5e:	4b21      	ldr	r3, [pc, #132]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a60:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_7);
 8010a62:	4b20      	ldr	r3, [pc, #128]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a64:	78db      	ldrb	r3, [r3, #3]
 8010a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a6a:	b2da      	uxtb	r2, r3
 8010a6c:	4b1d      	ldr	r3, [pc, #116]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a6e:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_6);
 8010a70:	4b1c      	ldr	r3, [pc, #112]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a72:	7a1b      	ldrb	r3, [r3, #8]
 8010a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a78:	b2da      	uxtb	r2, r3
 8010a7a:	4b1a      	ldr	r3, [pc, #104]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a7c:	721a      	strb	r2, [r3, #8]
            break;
 8010a7e:	e216      	b.n	8010eae <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_14] &= ~(1 << BIT_1);
 8010a80:	4b18      	ldr	r3, [pc, #96]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a82:	7b9b      	ldrb	r3, [r3, #14]
 8010a84:	f023 0302 	bic.w	r3, r3, #2
 8010a88:	b2da      	uxtb	r2, r3
 8010a8a:	4b16      	ldr	r3, [pc, #88]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a8c:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_0);
 8010a8e:	4b15      	ldr	r3, [pc, #84]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a90:	7b9b      	ldrb	r3, [r3, #14]
 8010a92:	f023 0301 	bic.w	r3, r3, #1
 8010a96:	b2da      	uxtb	r2, r3
 8010a98:	4b12      	ldr	r3, [pc, #72]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a9a:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_1);
 8010a9c:	4b11      	ldr	r3, [pc, #68]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010a9e:	7cdb      	ldrb	r3, [r3, #19]
 8010aa0:	f023 0302 	bic.w	r3, r3, #2
 8010aa4:	b2da      	uxtb	r2, r3
 8010aa6:	4b0f      	ldr	r3, [pc, #60]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010aa8:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_0);
 8010aaa:	4b0e      	ldr	r3, [pc, #56]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010aac:	7cdb      	ldrb	r3, [r3, #19]
 8010aae:	f023 0301 	bic.w	r3, r3, #1
 8010ab2:	b2da      	uxtb	r2, r3
 8010ab4:	4b0b      	ldr	r3, [pc, #44]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010ab6:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_0);
 8010ab8:	4b0a      	ldr	r3, [pc, #40]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010aba:	791b      	ldrb	r3, [r3, #4]
 8010abc:	f023 0301 	bic.w	r3, r3, #1
 8010ac0:	b2da      	uxtb	r2, r3
 8010ac2:	4b08      	ldr	r3, [pc, #32]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010ac4:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_1);
 8010ac6:	4b07      	ldr	r3, [pc, #28]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010ac8:	791b      	ldrb	r3, [r3, #4]
 8010aca:	f023 0302 	bic.w	r3, r3, #2
 8010ace:	b2da      	uxtb	r2, r3
 8010ad0:	4b04      	ldr	r3, [pc, #16]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010ad2:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_0);
 8010ad4:	4b03      	ldr	r3, [pc, #12]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010ad6:	7a5b      	ldrb	r3, [r3, #9]
 8010ad8:	f023 0301 	bic.w	r3, r3, #1
 8010adc:	b2da      	uxtb	r2, r3
 8010ade:	4b01      	ldr	r3, [pc, #4]	; (8010ae4 <lcd_clear_digit+0x2a0>)
 8010ae0:	725a      	strb	r2, [r3, #9]
            break;
 8010ae2:	e1e4      	b.n	8010eae <lcd_clear_digit+0x66a>
 8010ae4:	20001df8 	.word	0x20001df8
            case DIGIT_6:
                g_lcd_map[REG_14] &= ~(1 << BIT_3);
 8010ae8:	4ba2      	ldr	r3, [pc, #648]	; (8010d74 <lcd_clear_digit+0x530>)
 8010aea:	7b9b      	ldrb	r3, [r3, #14]
 8010aec:	f023 0308 	bic.w	r3, r3, #8
 8010af0:	b2da      	uxtb	r2, r3
 8010af2:	4ba0      	ldr	r3, [pc, #640]	; (8010d74 <lcd_clear_digit+0x530>)
 8010af4:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_2);
 8010af6:	4b9f      	ldr	r3, [pc, #636]	; (8010d74 <lcd_clear_digit+0x530>)
 8010af8:	7b9b      	ldrb	r3, [r3, #14]
 8010afa:	f023 0304 	bic.w	r3, r3, #4
 8010afe:	b2da      	uxtb	r2, r3
 8010b00:	4b9c      	ldr	r3, [pc, #624]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b02:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_3);
 8010b04:	4b9b      	ldr	r3, [pc, #620]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b06:	7cdb      	ldrb	r3, [r3, #19]
 8010b08:	f023 0308 	bic.w	r3, r3, #8
 8010b0c:	b2da      	uxtb	r2, r3
 8010b0e:	4b99      	ldr	r3, [pc, #612]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b10:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_2);
 8010b12:	4b98      	ldr	r3, [pc, #608]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b14:	7cdb      	ldrb	r3, [r3, #19]
 8010b16:	f023 0304 	bic.w	r3, r3, #4
 8010b1a:	b2da      	uxtb	r2, r3
 8010b1c:	4b95      	ldr	r3, [pc, #596]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b1e:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_2);
 8010b20:	4b94      	ldr	r3, [pc, #592]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b22:	791b      	ldrb	r3, [r3, #4]
 8010b24:	f023 0304 	bic.w	r3, r3, #4
 8010b28:	b2da      	uxtb	r2, r3
 8010b2a:	4b92      	ldr	r3, [pc, #584]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b2c:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_3);
 8010b2e:	4b91      	ldr	r3, [pc, #580]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b30:	791b      	ldrb	r3, [r3, #4]
 8010b32:	f023 0308 	bic.w	r3, r3, #8
 8010b36:	b2da      	uxtb	r2, r3
 8010b38:	4b8e      	ldr	r3, [pc, #568]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b3a:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_2);
 8010b3c:	4b8d      	ldr	r3, [pc, #564]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b3e:	7a5b      	ldrb	r3, [r3, #9]
 8010b40:	f023 0304 	bic.w	r3, r3, #4
 8010b44:	b2da      	uxtb	r2, r3
 8010b46:	4b8b      	ldr	r3, [pc, #556]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b48:	725a      	strb	r2, [r3, #9]
            break;
 8010b4a:	e1b0      	b.n	8010eae <lcd_clear_digit+0x66a>
            case DIGIT_7:
                g_lcd_map[REG_14] &= ~(1 << BIT_5);
 8010b4c:	4b89      	ldr	r3, [pc, #548]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b4e:	7b9b      	ldrb	r3, [r3, #14]
 8010b50:	f023 0320 	bic.w	r3, r3, #32
 8010b54:	b2da      	uxtb	r2, r3
 8010b56:	4b87      	ldr	r3, [pc, #540]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b58:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_4);
 8010b5a:	4b86      	ldr	r3, [pc, #536]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b5c:	7b9b      	ldrb	r3, [r3, #14]
 8010b5e:	f023 0310 	bic.w	r3, r3, #16
 8010b62:	b2da      	uxtb	r2, r3
 8010b64:	4b83      	ldr	r3, [pc, #524]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b66:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_5);
 8010b68:	4b82      	ldr	r3, [pc, #520]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b6a:	7cdb      	ldrb	r3, [r3, #19]
 8010b6c:	f023 0320 	bic.w	r3, r3, #32
 8010b70:	b2da      	uxtb	r2, r3
 8010b72:	4b80      	ldr	r3, [pc, #512]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b74:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_4);
 8010b76:	4b7f      	ldr	r3, [pc, #508]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b78:	7cdb      	ldrb	r3, [r3, #19]
 8010b7a:	f023 0310 	bic.w	r3, r3, #16
 8010b7e:	b2da      	uxtb	r2, r3
 8010b80:	4b7c      	ldr	r3, [pc, #496]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b82:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_4);
 8010b84:	4b7b      	ldr	r3, [pc, #492]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b86:	791b      	ldrb	r3, [r3, #4]
 8010b88:	f023 0310 	bic.w	r3, r3, #16
 8010b8c:	b2da      	uxtb	r2, r3
 8010b8e:	4b79      	ldr	r3, [pc, #484]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b90:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_5);
 8010b92:	4b78      	ldr	r3, [pc, #480]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b94:	791b      	ldrb	r3, [r3, #4]
 8010b96:	f023 0320 	bic.w	r3, r3, #32
 8010b9a:	b2da      	uxtb	r2, r3
 8010b9c:	4b75      	ldr	r3, [pc, #468]	; (8010d74 <lcd_clear_digit+0x530>)
 8010b9e:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_4);
 8010ba0:	4b74      	ldr	r3, [pc, #464]	; (8010d74 <lcd_clear_digit+0x530>)
 8010ba2:	7a5b      	ldrb	r3, [r3, #9]
 8010ba4:	f023 0310 	bic.w	r3, r3, #16
 8010ba8:	b2da      	uxtb	r2, r3
 8010baa:	4b72      	ldr	r3, [pc, #456]	; (8010d74 <lcd_clear_digit+0x530>)
 8010bac:	725a      	strb	r2, [r3, #9]
            break;
 8010bae:	e17e      	b.n	8010eae <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8010bb0:	79bb      	ldrb	r3, [r7, #6]
 8010bb2:	2b01      	cmp	r3, #1
 8010bb4:	f040 8178 	bne.w	8010ea8 <lcd_clear_digit+0x664>
    {
        switch (digit)
 8010bb8:	79fb      	ldrb	r3, [r7, #7]
 8010bba:	2b06      	cmp	r3, #6
 8010bbc:	f200 8176 	bhi.w	8010eac <lcd_clear_digit+0x668>
 8010bc0:	a201      	add	r2, pc, #4	; (adr r2, 8010bc8 <lcd_clear_digit+0x384>)
 8010bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bc6:	bf00      	nop
 8010bc8:	08010be5 	.word	0x08010be5
 8010bcc:	08010c49 	.word	0x08010c49
 8010bd0:	08010cad 	.word	0x08010cad
 8010bd4:	08010d11 	.word	0x08010d11
 8010bd8:	08010d79 	.word	0x08010d79
 8010bdc:	08010ddd 	.word	0x08010ddd
 8010be0:	08010e41 	.word	0x08010e41
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_2);
 8010be4:	4b63      	ldr	r3, [pc, #396]	; (8010d74 <lcd_clear_digit+0x530>)
 8010be6:	7b1b      	ldrb	r3, [r3, #12]
 8010be8:	f023 0304 	bic.w	r3, r3, #4
 8010bec:	b2da      	uxtb	r2, r3
 8010bee:	4b61      	ldr	r3, [pc, #388]	; (8010d74 <lcd_clear_digit+0x530>)
 8010bf0:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_3);
 8010bf2:	4b60      	ldr	r3, [pc, #384]	; (8010d74 <lcd_clear_digit+0x530>)
 8010bf4:	7b1b      	ldrb	r3, [r3, #12]
 8010bf6:	f023 0308 	bic.w	r3, r3, #8
 8010bfa:	b2da      	uxtb	r2, r3
 8010bfc:	4b5d      	ldr	r3, [pc, #372]	; (8010d74 <lcd_clear_digit+0x530>)
 8010bfe:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_2);
 8010c00:	4b5c      	ldr	r3, [pc, #368]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c02:	7c5b      	ldrb	r3, [r3, #17]
 8010c04:	f023 0304 	bic.w	r3, r3, #4
 8010c08:	b2da      	uxtb	r2, r3
 8010c0a:	4b5a      	ldr	r3, [pc, #360]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c0c:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_3);
 8010c0e:	4b59      	ldr	r3, [pc, #356]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c10:	7c5b      	ldrb	r3, [r3, #17]
 8010c12:	f023 0308 	bic.w	r3, r3, #8
 8010c16:	b2da      	uxtb	r2, r3
 8010c18:	4b56      	ldr	r3, [pc, #344]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c1a:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_2);
 8010c1c:	4b55      	ldr	r3, [pc, #340]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c1e:	789b      	ldrb	r3, [r3, #2]
 8010c20:	f023 0304 	bic.w	r3, r3, #4
 8010c24:	b2da      	uxtb	r2, r3
 8010c26:	4b53      	ldr	r3, [pc, #332]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c28:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_3);
 8010c2a:	4b52      	ldr	r3, [pc, #328]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c2c:	789b      	ldrb	r3, [r3, #2]
 8010c2e:	f023 0308 	bic.w	r3, r3, #8
 8010c32:	b2da      	uxtb	r2, r3
 8010c34:	4b4f      	ldr	r3, [pc, #316]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c36:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_3);
 8010c38:	4b4e      	ldr	r3, [pc, #312]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c3a:	79db      	ldrb	r3, [r3, #7]
 8010c3c:	f023 0308 	bic.w	r3, r3, #8
 8010c40:	b2da      	uxtb	r2, r3
 8010c42:	4b4c      	ldr	r3, [pc, #304]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c44:	71da      	strb	r2, [r3, #7]
            break;
 8010c46:	e132      	b.n	8010eae <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_12] &= ~(1 << BIT_0);
 8010c48:	4b4a      	ldr	r3, [pc, #296]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c4a:	7b1b      	ldrb	r3, [r3, #12]
 8010c4c:	f023 0301 	bic.w	r3, r3, #1
 8010c50:	b2da      	uxtb	r2, r3
 8010c52:	4b48      	ldr	r3, [pc, #288]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c54:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_1);
 8010c56:	4b47      	ldr	r3, [pc, #284]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c58:	7b1b      	ldrb	r3, [r3, #12]
 8010c5a:	f023 0302 	bic.w	r3, r3, #2
 8010c5e:	b2da      	uxtb	r2, r3
 8010c60:	4b44      	ldr	r3, [pc, #272]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c62:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_0);
 8010c64:	4b43      	ldr	r3, [pc, #268]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c66:	7c5b      	ldrb	r3, [r3, #17]
 8010c68:	f023 0301 	bic.w	r3, r3, #1
 8010c6c:	b2da      	uxtb	r2, r3
 8010c6e:	4b41      	ldr	r3, [pc, #260]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c70:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_1);
 8010c72:	4b40      	ldr	r3, [pc, #256]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c74:	7c5b      	ldrb	r3, [r3, #17]
 8010c76:	f023 0302 	bic.w	r3, r3, #2
 8010c7a:	b2da      	uxtb	r2, r3
 8010c7c:	4b3d      	ldr	r3, [pc, #244]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c7e:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_0);
 8010c80:	4b3c      	ldr	r3, [pc, #240]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c82:	789b      	ldrb	r3, [r3, #2]
 8010c84:	f023 0301 	bic.w	r3, r3, #1
 8010c88:	b2da      	uxtb	r2, r3
 8010c8a:	4b3a      	ldr	r3, [pc, #232]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c8c:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_1);
 8010c8e:	4b39      	ldr	r3, [pc, #228]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c90:	789b      	ldrb	r3, [r3, #2]
 8010c92:	f023 0302 	bic.w	r3, r3, #2
 8010c96:	b2da      	uxtb	r2, r3
 8010c98:	4b36      	ldr	r3, [pc, #216]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c9a:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_1);
 8010c9c:	4b35      	ldr	r3, [pc, #212]	; (8010d74 <lcd_clear_digit+0x530>)
 8010c9e:	79db      	ldrb	r3, [r3, #7]
 8010ca0:	f023 0302 	bic.w	r3, r3, #2
 8010ca4:	b2da      	uxtb	r2, r3
 8010ca6:	4b33      	ldr	r3, [pc, #204]	; (8010d74 <lcd_clear_digit+0x530>)
 8010ca8:	71da      	strb	r2, [r3, #7]
            break;
 8010caa:	e100      	b.n	8010eae <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_11] &= ~(1 << BIT_6);
 8010cac:	4b31      	ldr	r3, [pc, #196]	; (8010d74 <lcd_clear_digit+0x530>)
 8010cae:	7adb      	ldrb	r3, [r3, #11]
 8010cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010cb4:	b2da      	uxtb	r2, r3
 8010cb6:	4b2f      	ldr	r3, [pc, #188]	; (8010d74 <lcd_clear_digit+0x530>)
 8010cb8:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_7);
 8010cba:	4b2e      	ldr	r3, [pc, #184]	; (8010d74 <lcd_clear_digit+0x530>)
 8010cbc:	7adb      	ldrb	r3, [r3, #11]
 8010cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cc2:	b2da      	uxtb	r2, r3
 8010cc4:	4b2b      	ldr	r3, [pc, #172]	; (8010d74 <lcd_clear_digit+0x530>)
 8010cc6:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_6);
 8010cc8:	4b2a      	ldr	r3, [pc, #168]	; (8010d74 <lcd_clear_digit+0x530>)
 8010cca:	7c1b      	ldrb	r3, [r3, #16]
 8010ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010cd0:	b2da      	uxtb	r2, r3
 8010cd2:	4b28      	ldr	r3, [pc, #160]	; (8010d74 <lcd_clear_digit+0x530>)
 8010cd4:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_7);
 8010cd6:	4b27      	ldr	r3, [pc, #156]	; (8010d74 <lcd_clear_digit+0x530>)
 8010cd8:	7c1b      	ldrb	r3, [r3, #16]
 8010cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cde:	b2da      	uxtb	r2, r3
 8010ce0:	4b24      	ldr	r3, [pc, #144]	; (8010d74 <lcd_clear_digit+0x530>)
 8010ce2:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_6);
 8010ce4:	4b23      	ldr	r3, [pc, #140]	; (8010d74 <lcd_clear_digit+0x530>)
 8010ce6:	785b      	ldrb	r3, [r3, #1]
 8010ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010cec:	b2da      	uxtb	r2, r3
 8010cee:	4b21      	ldr	r3, [pc, #132]	; (8010d74 <lcd_clear_digit+0x530>)
 8010cf0:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_7);
 8010cf2:	4b20      	ldr	r3, [pc, #128]	; (8010d74 <lcd_clear_digit+0x530>)
 8010cf4:	785b      	ldrb	r3, [r3, #1]
 8010cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cfa:	b2da      	uxtb	r2, r3
 8010cfc:	4b1d      	ldr	r3, [pc, #116]	; (8010d74 <lcd_clear_digit+0x530>)
 8010cfe:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_7);
 8010d00:	4b1c      	ldr	r3, [pc, #112]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d02:	799b      	ldrb	r3, [r3, #6]
 8010d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d08:	b2da      	uxtb	r2, r3
 8010d0a:	4b1a      	ldr	r3, [pc, #104]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d0c:	719a      	strb	r2, [r3, #6]
            break;
 8010d0e:	e0ce      	b.n	8010eae <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_11] &= ~(1 << BIT_4);
 8010d10:	4b18      	ldr	r3, [pc, #96]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d12:	7adb      	ldrb	r3, [r3, #11]
 8010d14:	f023 0310 	bic.w	r3, r3, #16
 8010d18:	b2da      	uxtb	r2, r3
 8010d1a:	4b16      	ldr	r3, [pc, #88]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d1c:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_5);
 8010d1e:	4b15      	ldr	r3, [pc, #84]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d20:	7adb      	ldrb	r3, [r3, #11]
 8010d22:	f023 0320 	bic.w	r3, r3, #32
 8010d26:	b2da      	uxtb	r2, r3
 8010d28:	4b12      	ldr	r3, [pc, #72]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d2a:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_4);
 8010d2c:	4b11      	ldr	r3, [pc, #68]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d2e:	7c1b      	ldrb	r3, [r3, #16]
 8010d30:	f023 0310 	bic.w	r3, r3, #16
 8010d34:	b2da      	uxtb	r2, r3
 8010d36:	4b0f      	ldr	r3, [pc, #60]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d38:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_5);
 8010d3a:	4b0e      	ldr	r3, [pc, #56]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d3c:	7c1b      	ldrb	r3, [r3, #16]
 8010d3e:	f023 0320 	bic.w	r3, r3, #32
 8010d42:	b2da      	uxtb	r2, r3
 8010d44:	4b0b      	ldr	r3, [pc, #44]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d46:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_4);
 8010d48:	4b0a      	ldr	r3, [pc, #40]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d4a:	785b      	ldrb	r3, [r3, #1]
 8010d4c:	f023 0310 	bic.w	r3, r3, #16
 8010d50:	b2da      	uxtb	r2, r3
 8010d52:	4b08      	ldr	r3, [pc, #32]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d54:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_5);
 8010d56:	4b07      	ldr	r3, [pc, #28]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d58:	785b      	ldrb	r3, [r3, #1]
 8010d5a:	f023 0320 	bic.w	r3, r3, #32
 8010d5e:	b2da      	uxtb	r2, r3
 8010d60:	4b04      	ldr	r3, [pc, #16]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d62:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_5);
 8010d64:	4b03      	ldr	r3, [pc, #12]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d66:	799b      	ldrb	r3, [r3, #6]
 8010d68:	f023 0320 	bic.w	r3, r3, #32
 8010d6c:	b2da      	uxtb	r2, r3
 8010d6e:	4b01      	ldr	r3, [pc, #4]	; (8010d74 <lcd_clear_digit+0x530>)
 8010d70:	719a      	strb	r2, [r3, #6]
            break;
 8010d72:	e09c      	b.n	8010eae <lcd_clear_digit+0x66a>
 8010d74:	20001df8 	.word	0x20001df8
            case DIGIT_4:
                g_lcd_map[REG_11] &= ~(1 << BIT_2);
 8010d78:	4b50      	ldr	r3, [pc, #320]	; (8010ebc <lcd_clear_digit+0x678>)
 8010d7a:	7adb      	ldrb	r3, [r3, #11]
 8010d7c:	f023 0304 	bic.w	r3, r3, #4
 8010d80:	b2da      	uxtb	r2, r3
 8010d82:	4b4e      	ldr	r3, [pc, #312]	; (8010ebc <lcd_clear_digit+0x678>)
 8010d84:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_3);
 8010d86:	4b4d      	ldr	r3, [pc, #308]	; (8010ebc <lcd_clear_digit+0x678>)
 8010d88:	7adb      	ldrb	r3, [r3, #11]
 8010d8a:	f023 0308 	bic.w	r3, r3, #8
 8010d8e:	b2da      	uxtb	r2, r3
 8010d90:	4b4a      	ldr	r3, [pc, #296]	; (8010ebc <lcd_clear_digit+0x678>)
 8010d92:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_2);
 8010d94:	4b49      	ldr	r3, [pc, #292]	; (8010ebc <lcd_clear_digit+0x678>)
 8010d96:	7c1b      	ldrb	r3, [r3, #16]
 8010d98:	f023 0304 	bic.w	r3, r3, #4
 8010d9c:	b2da      	uxtb	r2, r3
 8010d9e:	4b47      	ldr	r3, [pc, #284]	; (8010ebc <lcd_clear_digit+0x678>)
 8010da0:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_3);
 8010da2:	4b46      	ldr	r3, [pc, #280]	; (8010ebc <lcd_clear_digit+0x678>)
 8010da4:	7c1b      	ldrb	r3, [r3, #16]
 8010da6:	f023 0308 	bic.w	r3, r3, #8
 8010daa:	b2da      	uxtb	r2, r3
 8010dac:	4b43      	ldr	r3, [pc, #268]	; (8010ebc <lcd_clear_digit+0x678>)
 8010dae:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_2);
 8010db0:	4b42      	ldr	r3, [pc, #264]	; (8010ebc <lcd_clear_digit+0x678>)
 8010db2:	785b      	ldrb	r3, [r3, #1]
 8010db4:	f023 0304 	bic.w	r3, r3, #4
 8010db8:	b2da      	uxtb	r2, r3
 8010dba:	4b40      	ldr	r3, [pc, #256]	; (8010ebc <lcd_clear_digit+0x678>)
 8010dbc:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_3);
 8010dbe:	4b3f      	ldr	r3, [pc, #252]	; (8010ebc <lcd_clear_digit+0x678>)
 8010dc0:	785b      	ldrb	r3, [r3, #1]
 8010dc2:	f023 0308 	bic.w	r3, r3, #8
 8010dc6:	b2da      	uxtb	r2, r3
 8010dc8:	4b3c      	ldr	r3, [pc, #240]	; (8010ebc <lcd_clear_digit+0x678>)
 8010dca:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_3);
 8010dcc:	4b3b      	ldr	r3, [pc, #236]	; (8010ebc <lcd_clear_digit+0x678>)
 8010dce:	799b      	ldrb	r3, [r3, #6]
 8010dd0:	f023 0308 	bic.w	r3, r3, #8
 8010dd4:	b2da      	uxtb	r2, r3
 8010dd6:	4b39      	ldr	r3, [pc, #228]	; (8010ebc <lcd_clear_digit+0x678>)
 8010dd8:	719a      	strb	r2, [r3, #6]
            break;
 8010dda:	e068      	b.n	8010eae <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_11] &= ~(1 << BIT_0);
 8010ddc:	4b37      	ldr	r3, [pc, #220]	; (8010ebc <lcd_clear_digit+0x678>)
 8010dde:	7adb      	ldrb	r3, [r3, #11]
 8010de0:	f023 0301 	bic.w	r3, r3, #1
 8010de4:	b2da      	uxtb	r2, r3
 8010de6:	4b35      	ldr	r3, [pc, #212]	; (8010ebc <lcd_clear_digit+0x678>)
 8010de8:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_1);
 8010dea:	4b34      	ldr	r3, [pc, #208]	; (8010ebc <lcd_clear_digit+0x678>)
 8010dec:	7adb      	ldrb	r3, [r3, #11]
 8010dee:	f023 0302 	bic.w	r3, r3, #2
 8010df2:	b2da      	uxtb	r2, r3
 8010df4:	4b31      	ldr	r3, [pc, #196]	; (8010ebc <lcd_clear_digit+0x678>)
 8010df6:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_0);
 8010df8:	4b30      	ldr	r3, [pc, #192]	; (8010ebc <lcd_clear_digit+0x678>)
 8010dfa:	7c1b      	ldrb	r3, [r3, #16]
 8010dfc:	f023 0301 	bic.w	r3, r3, #1
 8010e00:	b2da      	uxtb	r2, r3
 8010e02:	4b2e      	ldr	r3, [pc, #184]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e04:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_1);
 8010e06:	4b2d      	ldr	r3, [pc, #180]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e08:	7c1b      	ldrb	r3, [r3, #16]
 8010e0a:	f023 0302 	bic.w	r3, r3, #2
 8010e0e:	b2da      	uxtb	r2, r3
 8010e10:	4b2a      	ldr	r3, [pc, #168]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e12:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_0);
 8010e14:	4b29      	ldr	r3, [pc, #164]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e16:	785b      	ldrb	r3, [r3, #1]
 8010e18:	f023 0301 	bic.w	r3, r3, #1
 8010e1c:	b2da      	uxtb	r2, r3
 8010e1e:	4b27      	ldr	r3, [pc, #156]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e20:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_1);
 8010e22:	4b26      	ldr	r3, [pc, #152]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e24:	785b      	ldrb	r3, [r3, #1]
 8010e26:	f023 0302 	bic.w	r3, r3, #2
 8010e2a:	b2da      	uxtb	r2, r3
 8010e2c:	4b23      	ldr	r3, [pc, #140]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e2e:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_1);
 8010e30:	4b22      	ldr	r3, [pc, #136]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e32:	799b      	ldrb	r3, [r3, #6]
 8010e34:	f023 0302 	bic.w	r3, r3, #2
 8010e38:	b2da      	uxtb	r2, r3
 8010e3a:	4b20      	ldr	r3, [pc, #128]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e3c:	719a      	strb	r2, [r3, #6]
            break;
 8010e3e:	e036      	b.n	8010eae <lcd_clear_digit+0x66a>
            case DIGIT_6:
                g_lcd_map[REG_10] &= ~(1 << BIT_6);
 8010e40:	4b1e      	ldr	r3, [pc, #120]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e42:	7a9b      	ldrb	r3, [r3, #10]
 8010e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e48:	b2da      	uxtb	r2, r3
 8010e4a:	4b1c      	ldr	r3, [pc, #112]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e4c:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_10] &= ~(1 << BIT_7);
 8010e4e:	4b1b      	ldr	r3, [pc, #108]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e50:	7a9b      	ldrb	r3, [r3, #10]
 8010e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e56:	b2da      	uxtb	r2, r3
 8010e58:	4b18      	ldr	r3, [pc, #96]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e5a:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_15] &= ~(1 << BIT_6);
 8010e5c:	4b17      	ldr	r3, [pc, #92]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e5e:	7bdb      	ldrb	r3, [r3, #15]
 8010e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e64:	b2da      	uxtb	r2, r3
 8010e66:	4b15      	ldr	r3, [pc, #84]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e68:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_15] &= ~(1 << BIT_7);
 8010e6a:	4b14      	ldr	r3, [pc, #80]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e6c:	7bdb      	ldrb	r3, [r3, #15]
 8010e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e72:	b2da      	uxtb	r2, r3
 8010e74:	4b11      	ldr	r3, [pc, #68]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e76:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_0] &= ~(1 << BIT_6);
 8010e78:	4b10      	ldr	r3, [pc, #64]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e80:	b2da      	uxtb	r2, r3
 8010e82:	4b0e      	ldr	r3, [pc, #56]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e84:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_0] &= ~(1 << BIT_7);
 8010e86:	4b0d      	ldr	r3, [pc, #52]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e8e:	b2da      	uxtb	r2, r3
 8010e90:	4b0a      	ldr	r3, [pc, #40]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e92:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_5] &= ~(1 << BIT_7);
 8010e94:	4b09      	ldr	r3, [pc, #36]	; (8010ebc <lcd_clear_digit+0x678>)
 8010e96:	795b      	ldrb	r3, [r3, #5]
 8010e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e9c:	b2da      	uxtb	r2, r3
 8010e9e:	4b07      	ldr	r3, [pc, #28]	; (8010ebc <lcd_clear_digit+0x678>)
 8010ea0:	715a      	strb	r2, [r3, #5]
            break;
 8010ea2:	e004      	b.n	8010eae <lcd_clear_digit+0x66a>
            break;
 8010ea4:	bf00      	nop
 8010ea6:	e002      	b.n	8010eae <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
 8010ea8:	bf00      	nop
 8010eaa:	e000      	b.n	8010eae <lcd_clear_digit+0x66a>
            break;
 8010eac:	bf00      	nop
}
 8010eae:	bf00      	nop
 8010eb0:	370c      	adds	r7, #12
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb8:	4770      	bx	lr
 8010eba:	bf00      	nop
 8010ebc:	20001df8 	.word	0x20001df8

08010ec0 <lcd_clear_point>:
 * pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_clear_point(rows_t line, point_t point)
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b083      	sub	sp, #12
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	460a      	mov	r2, r1
 8010eca:	71fb      	strb	r3, [r7, #7]
 8010ecc:	4613      	mov	r3, r2
 8010ece:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8010ed0:	79fb      	ldrb	r3, [r7, #7]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d14c      	bne.n	8010f70 <lcd_clear_point+0xb0>
    {
        switch (point)
 8010ed6:	79bb      	ldrb	r3, [r7, #6]
 8010ed8:	2b06      	cmp	r3, #6
 8010eda:	f200 808f 	bhi.w	8010ffc <lcd_clear_point+0x13c>
 8010ede:	a201      	add	r2, pc, #4	; (adr r2, 8010ee4 <lcd_clear_point+0x24>)
 8010ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ee4:	08010f01 	.word	0x08010f01
 8010ee8:	08010f11 	.word	0x08010f11
 8010eec:	08010f21 	.word	0x08010f21
 8010ef0:	08010f31 	.word	0x08010f31
 8010ef4:	08010f41 	.word	0x08010f41
 8010ef8:	08010f51 	.word	0x08010f51
 8010efc:	08010f61 	.word	0x08010f61
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_7);
 8010f00:	4b44      	ldr	r3, [pc, #272]	; (8011014 <lcd_clear_point+0x154>)
 8010f02:	79db      	ldrb	r3, [r3, #7]
 8010f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f08:	b2da      	uxtb	r2, r3
 8010f0a:	4b42      	ldr	r3, [pc, #264]	; (8011014 <lcd_clear_point+0x154>)
 8010f0c:	71da      	strb	r2, [r3, #7]
            break;
 8010f0e:	e07a      	b.n	8011006 <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] &= ~(1 << BIT_1);
 8010f10:	4b40      	ldr	r3, [pc, #256]	; (8011014 <lcd_clear_point+0x154>)
 8010f12:	7a1b      	ldrb	r3, [r3, #8]
 8010f14:	f023 0302 	bic.w	r3, r3, #2
 8010f18:	b2da      	uxtb	r2, r3
 8010f1a:	4b3e      	ldr	r3, [pc, #248]	; (8011014 <lcd_clear_point+0x154>)
 8010f1c:	721a      	strb	r2, [r3, #8]
            break;
 8010f1e:	e072      	b.n	8011006 <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] &= ~(1 << BIT_3);
 8010f20:	4b3c      	ldr	r3, [pc, #240]	; (8011014 <lcd_clear_point+0x154>)
 8010f22:	7a1b      	ldrb	r3, [r3, #8]
 8010f24:	f023 0308 	bic.w	r3, r3, #8
 8010f28:	b2da      	uxtb	r2, r3
 8010f2a:	4b3a      	ldr	r3, [pc, #232]	; (8011014 <lcd_clear_point+0x154>)
 8010f2c:	721a      	strb	r2, [r3, #8]
            break;
 8010f2e:	e06a      	b.n	8011006 <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] &= ~(1 << BIT_5);
 8010f30:	4b38      	ldr	r3, [pc, #224]	; (8011014 <lcd_clear_point+0x154>)
 8010f32:	7a1b      	ldrb	r3, [r3, #8]
 8010f34:	f023 0320 	bic.w	r3, r3, #32
 8010f38:	b2da      	uxtb	r2, r3
 8010f3a:	4b36      	ldr	r3, [pc, #216]	; (8011014 <lcd_clear_point+0x154>)
 8010f3c:	721a      	strb	r2, [r3, #8]
            break;
 8010f3e:	e062      	b.n	8011006 <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] &= ~(1 << BIT_7);
 8010f40:	4b34      	ldr	r3, [pc, #208]	; (8011014 <lcd_clear_point+0x154>)
 8010f42:	7a1b      	ldrb	r3, [r3, #8]
 8010f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f48:	b2da      	uxtb	r2, r3
 8010f4a:	4b32      	ldr	r3, [pc, #200]	; (8011014 <lcd_clear_point+0x154>)
 8010f4c:	721a      	strb	r2, [r3, #8]
            break;
 8010f4e:	e05a      	b.n	8011006 <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] &= ~(1 << BIT_1);
 8010f50:	4b30      	ldr	r3, [pc, #192]	; (8011014 <lcd_clear_point+0x154>)
 8010f52:	7a5b      	ldrb	r3, [r3, #9]
 8010f54:	f023 0302 	bic.w	r3, r3, #2
 8010f58:	b2da      	uxtb	r2, r3
 8010f5a:	4b2e      	ldr	r3, [pc, #184]	; (8011014 <lcd_clear_point+0x154>)
 8010f5c:	725a      	strb	r2, [r3, #9]
            break;
 8010f5e:	e052      	b.n	8011006 <lcd_clear_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] &= ~(1 << BIT_3);
 8010f60:	4b2c      	ldr	r3, [pc, #176]	; (8011014 <lcd_clear_point+0x154>)
 8010f62:	7a5b      	ldrb	r3, [r3, #9]
 8010f64:	f023 0308 	bic.w	r3, r3, #8
 8010f68:	b2da      	uxtb	r2, r3
 8010f6a:	4b2a      	ldr	r3, [pc, #168]	; (8011014 <lcd_clear_point+0x154>)
 8010f6c:	725a      	strb	r2, [r3, #9]
            break;
 8010f6e:	e04a      	b.n	8011006 <lcd_clear_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8010f70:	79fb      	ldrb	r3, [r7, #7]
 8010f72:	2b01      	cmp	r3, #1
 8010f74:	d144      	bne.n	8011000 <lcd_clear_point+0x140>
    {
        switch (point)
 8010f76:	79bb      	ldrb	r3, [r7, #6]
 8010f78:	2b05      	cmp	r3, #5
 8010f7a:	d843      	bhi.n	8011004 <lcd_clear_point+0x144>
 8010f7c:	a201      	add	r2, pc, #4	; (adr r2, 8010f84 <lcd_clear_point+0xc4>)
 8010f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f82:	bf00      	nop
 8010f84:	08010f9d 	.word	0x08010f9d
 8010f88:	08010fad 	.word	0x08010fad
 8010f8c:	08010fbd 	.word	0x08010fbd
 8010f90:	08010fcd 	.word	0x08010fcd
 8010f94:	08010fdd 	.word	0x08010fdd
 8010f98:	08010fed 	.word	0x08010fed
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_2);
 8010f9c:	4b1d      	ldr	r3, [pc, #116]	; (8011014 <lcd_clear_point+0x154>)
 8010f9e:	79db      	ldrb	r3, [r3, #7]
 8010fa0:	f023 0304 	bic.w	r3, r3, #4
 8010fa4:	b2da      	uxtb	r2, r3
 8010fa6:	4b1b      	ldr	r3, [pc, #108]	; (8011014 <lcd_clear_point+0x154>)
 8010fa8:	71da      	strb	r2, [r3, #7]
            break;
 8010faa:	e02c      	b.n	8011006 <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] &= ~(1 << BIT_0);
 8010fac:	4b19      	ldr	r3, [pc, #100]	; (8011014 <lcd_clear_point+0x154>)
 8010fae:	79db      	ldrb	r3, [r3, #7]
 8010fb0:	f023 0301 	bic.w	r3, r3, #1
 8010fb4:	b2da      	uxtb	r2, r3
 8010fb6:	4b17      	ldr	r3, [pc, #92]	; (8011014 <lcd_clear_point+0x154>)
 8010fb8:	71da      	strb	r2, [r3, #7]
            break;
 8010fba:	e024      	b.n	8011006 <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] &= ~(1 << BIT_6);
 8010fbc:	4b15      	ldr	r3, [pc, #84]	; (8011014 <lcd_clear_point+0x154>)
 8010fbe:	799b      	ldrb	r3, [r3, #6]
 8010fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010fc4:	b2da      	uxtb	r2, r3
 8010fc6:	4b13      	ldr	r3, [pc, #76]	; (8011014 <lcd_clear_point+0x154>)
 8010fc8:	719a      	strb	r2, [r3, #6]
            break;
 8010fca:	e01c      	b.n	8011006 <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] &= ~(1 << BIT_4);
 8010fcc:	4b11      	ldr	r3, [pc, #68]	; (8011014 <lcd_clear_point+0x154>)
 8010fce:	799b      	ldrb	r3, [r3, #6]
 8010fd0:	f023 0310 	bic.w	r3, r3, #16
 8010fd4:	b2da      	uxtb	r2, r3
 8010fd6:	4b0f      	ldr	r3, [pc, #60]	; (8011014 <lcd_clear_point+0x154>)
 8010fd8:	719a      	strb	r2, [r3, #6]
            break;
 8010fda:	e014      	b.n	8011006 <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] &= ~(1 << BIT_2);
 8010fdc:	4b0d      	ldr	r3, [pc, #52]	; (8011014 <lcd_clear_point+0x154>)
 8010fde:	799b      	ldrb	r3, [r3, #6]
 8010fe0:	f023 0304 	bic.w	r3, r3, #4
 8010fe4:	b2da      	uxtb	r2, r3
 8010fe6:	4b0b      	ldr	r3, [pc, #44]	; (8011014 <lcd_clear_point+0x154>)
 8010fe8:	719a      	strb	r2, [r3, #6]
            break;
 8010fea:	e00c      	b.n	8011006 <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] &= ~(1 << BIT_0);
 8010fec:	4b09      	ldr	r3, [pc, #36]	; (8011014 <lcd_clear_point+0x154>)
 8010fee:	799b      	ldrb	r3, [r3, #6]
 8010ff0:	f023 0301 	bic.w	r3, r3, #1
 8010ff4:	b2da      	uxtb	r2, r3
 8010ff6:	4b07      	ldr	r3, [pc, #28]	; (8011014 <lcd_clear_point+0x154>)
 8010ff8:	719a      	strb	r2, [r3, #6]
            break;
 8010ffa:	e004      	b.n	8011006 <lcd_clear_point+0x146>
            break;
 8010ffc:	bf00      	nop
 8010ffe:	e002      	b.n	8011006 <lcd_clear_point+0x146>
            default:
            break;
        }
    }
 8011000:	bf00      	nop
 8011002:	e000      	b.n	8011006 <lcd_clear_point+0x146>
            break;
 8011004:	bf00      	nop
}
 8011006:	bf00      	nop
 8011008:	370c      	adds	r7, #12
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr
 8011012:	bf00      	nop
 8011014:	20001df8 	.word	0x20001df8

08011018 <lcd_clear_time_unit>:
 * @param Unidad a borrar.
 * @param Velocidad de parpadeo de la pantalla.
 * @retval None
 */
void lcd_clear_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	4603      	mov	r3, r0
 8011020:	460a      	mov	r2, r1
 8011022:	71fb      	strb	r3, [r7, #7]
 8011024:	4613      	mov	r3, r2
 8011026:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8011028:	79fb      	ldrb	r3, [r7, #7]
 801102a:	2b03      	cmp	r3, #3
 801102c:	d82a      	bhi.n	8011084 <lcd_clear_time_unit+0x6c>
 801102e:	a201      	add	r2, pc, #4	; (adr r2, 8011034 <lcd_clear_time_unit+0x1c>)
 8011030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011034:	08011045 	.word	0x08011045
 8011038:	08011055 	.word	0x08011055
 801103c:	08011065 	.word	0x08011065
 8011040:	08011075 	.word	0x08011075
    {
        case H:
            g_lcd_map[REG_5] &= ~(1 << BIT_6);
 8011044:	4b14      	ldr	r3, [pc, #80]	; (8011098 <lcd_clear_time_unit+0x80>)
 8011046:	795b      	ldrb	r3, [r3, #5]
 8011048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801104c:	b2da      	uxtb	r2, r3
 801104e:	4b12      	ldr	r3, [pc, #72]	; (8011098 <lcd_clear_time_unit+0x80>)
 8011050:	715a      	strb	r2, [r3, #5]
        break;
 8011052:	e018      	b.n	8011086 <lcd_clear_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] &= ~(1 << BIT_5);
 8011054:	4b10      	ldr	r3, [pc, #64]	; (8011098 <lcd_clear_time_unit+0x80>)
 8011056:	7a5b      	ldrb	r3, [r3, #9]
 8011058:	f023 0320 	bic.w	r3, r3, #32
 801105c:	b2da      	uxtb	r2, r3
 801105e:	4b0e      	ldr	r3, [pc, #56]	; (8011098 <lcd_clear_time_unit+0x80>)
 8011060:	725a      	strb	r2, [r3, #9]
        break;
 8011062:	e010      	b.n	8011086 <lcd_clear_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] &= ~(1 << BIT_5);
 8011064:	4b0c      	ldr	r3, [pc, #48]	; (8011098 <lcd_clear_time_unit+0x80>)
 8011066:	7a9b      	ldrb	r3, [r3, #10]
 8011068:	f023 0320 	bic.w	r3, r3, #32
 801106c:	b2da      	uxtb	r2, r3
 801106e:	4b0a      	ldr	r3, [pc, #40]	; (8011098 <lcd_clear_time_unit+0x80>)
 8011070:	729a      	strb	r2, [r3, #10]
        break;
 8011072:	e008      	b.n	8011086 <lcd_clear_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] &= ~(1 << BIT_7);
 8011074:	4b08      	ldr	r3, [pc, #32]	; (8011098 <lcd_clear_time_unit+0x80>)
 8011076:	7a5b      	ldrb	r3, [r3, #9]
 8011078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801107c:	b2da      	uxtb	r2, r3
 801107e:	4b06      	ldr	r3, [pc, #24]	; (8011098 <lcd_clear_time_unit+0x80>)
 8011080:	725a      	strb	r2, [r3, #9]
        break;
 8011082:	e000      	b.n	8011086 <lcd_clear_time_unit+0x6e>
        default:
        break;
 8011084:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8011086:	79bb      	ldrb	r3, [r7, #6]
 8011088:	4618      	mov	r0, r3
 801108a:	f001 fbff 	bl	801288c <pcf8553_blink>
}
 801108e:	bf00      	nop
 8011090:	3708      	adds	r7, #8
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}
 8011096:	bf00      	nop
 8011098:	20001df8 	.word	0x20001df8

0801109c <lcd_clear_vol_unit>:
 * @param Unidad a borrar.
 * @param Velocidad de parpadeo de la pantalla.
 * @retval None
 */
void lcd_clear_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	4603      	mov	r3, r0
 80110a4:	460a      	mov	r2, r1
 80110a6:	71fb      	strb	r3, [r7, #7]
 80110a8:	4613      	mov	r3, r2
 80110aa:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 80110ac:	79fb      	ldrb	r3, [r7, #7]
 80110ae:	2b07      	cmp	r3, #7
 80110b0:	f200 822c 	bhi.w	801150c <lcd_clear_vol_unit+0x470>
 80110b4:	a201      	add	r2, pc, #4	; (adr r2, 80110bc <lcd_clear_vol_unit+0x20>)
 80110b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110ba:	bf00      	nop
 80110bc:	080110dd 	.word	0x080110dd
 80110c0:	080111cf 	.word	0x080111cf
 80110c4:	08011279 	.word	0x08011279
 80110c8:	08011133 	.word	0x08011133
 80110cc:	080113d3 	.word	0x080113d3
 80110d0:	0801130d 	.word	0x0801130d
 80110d4:	08011453 	.word	0x08011453
 80110d8:	080114d3 	.word	0x080114d3
    {
        case LT:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 80110dc:	4b8a      	ldr	r3, [pc, #552]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80110de:	7bdb      	ldrb	r3, [r3, #15]
 80110e0:	f023 0320 	bic.w	r3, r3, #32
 80110e4:	b2da      	uxtb	r2, r3
 80110e6:	4b88      	ldr	r3, [pc, #544]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80110e8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 80110ea:	4b87      	ldr	r3, [pc, #540]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80110ec:	781b      	ldrb	r3, [r3, #0]
 80110ee:	f023 0320 	bic.w	r3, r3, #32
 80110f2:	b2da      	uxtb	r2, r3
 80110f4:	4b84      	ldr	r3, [pc, #528]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80110f6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 80110f8:	4b83      	ldr	r3, [pc, #524]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80110fa:	795b      	ldrb	r3, [r3, #5]
 80110fc:	f023 0320 	bic.w	r3, r3, #32
 8011100:	b2da      	uxtb	r2, r3
 8011102:	4b81      	ldr	r3, [pc, #516]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011104:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8011106:	4b80      	ldr	r3, [pc, #512]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011108:	7b9b      	ldrb	r3, [r3, #14]
 801110a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801110e:	b2da      	uxtb	r2, r3
 8011110:	4b7d      	ldr	r3, [pc, #500]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011112:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] &= ~(1 << BIT_0);
 8011114:	4b7c      	ldr	r3, [pc, #496]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011116:	7a9b      	ldrb	r3, [r3, #10]
 8011118:	f023 0301 	bic.w	r3, r3, #1
 801111c:	b2da      	uxtb	r2, r3
 801111e:	4b7a      	ldr	r3, [pc, #488]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011120:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] &= ~(1 << BIT_6);
 8011122:	4b79      	ldr	r3, [pc, #484]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011124:	7a5b      	ldrb	r3, [r3, #9]
 8011126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801112a:	b2da      	uxtb	r2, r3
 801112c:	4b76      	ldr	r3, [pc, #472]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 801112e:	725a      	strb	r2, [r3, #9]
        break;
 8011130:	e1ed      	b.n	801150e <lcd_clear_vol_unit+0x472>
        case KG:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8011132:	4b75      	ldr	r3, [pc, #468]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011134:	7bdb      	ldrb	r3, [r3, #15]
 8011136:	f023 0320 	bic.w	r3, r3, #32
 801113a:	b2da      	uxtb	r2, r3
 801113c:	4b72      	ldr	r3, [pc, #456]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 801113e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8011140:	4b71      	ldr	r3, [pc, #452]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011142:	7bdb      	ldrb	r3, [r3, #15]
 8011144:	f023 0310 	bic.w	r3, r3, #16
 8011148:	b2da      	uxtb	r2, r3
 801114a:	4b6f      	ldr	r3, [pc, #444]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 801114c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 801114e:	4b6e      	ldr	r3, [pc, #440]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011150:	7bdb      	ldrb	r3, [r3, #15]
 8011152:	f023 0304 	bic.w	r3, r3, #4
 8011156:	b2da      	uxtb	r2, r3
 8011158:	4b6b      	ldr	r3, [pc, #428]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 801115a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 801115c:	4b6a      	ldr	r3, [pc, #424]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	f023 0320 	bic.w	r3, r3, #32
 8011164:	b2da      	uxtb	r2, r3
 8011166:	4b68      	ldr	r3, [pc, #416]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011168:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_4);
 801116a:	4b67      	ldr	r3, [pc, #412]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 801116c:	795b      	ldrb	r3, [r3, #5]
 801116e:	f023 0310 	bic.w	r3, r3, #16
 8011172:	b2da      	uxtb	r2, r3
 8011174:	4b64      	ldr	r3, [pc, #400]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011176:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8011178:	4b63      	ldr	r3, [pc, #396]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 801117a:	7b9b      	ldrb	r3, [r3, #14]
 801117c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011180:	b2da      	uxtb	r2, r3
 8011182:	4b61      	ldr	r3, [pc, #388]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011184:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8011186:	4b60      	ldr	r3, [pc, #384]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011188:	7bdb      	ldrb	r3, [r3, #15]
 801118a:	f023 0302 	bic.w	r3, r3, #2
 801118e:	b2da      	uxtb	r2, r3
 8011190:	4b5d      	ldr	r3, [pc, #372]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011192:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8011194:	4b5c      	ldr	r3, [pc, #368]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	f023 0301 	bic.w	r3, r3, #1
 801119c:	b2da      	uxtb	r2, r3
 801119e:	4b5a      	ldr	r3, [pc, #360]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80111a0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 80111a2:	4b59      	ldr	r3, [pc, #356]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	f023 0302 	bic.w	r3, r3, #2
 80111aa:	b2da      	uxtb	r2, r3
 80111ac:	4b56      	ldr	r3, [pc, #344]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80111ae:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 80111b0:	4b55      	ldr	r3, [pc, #340]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80111b2:	791b      	ldrb	r3, [r3, #4]
 80111b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111b8:	b2da      	uxtb	r2, r3
 80111ba:	4b53      	ldr	r3, [pc, #332]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80111bc:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 80111be:	4b52      	ldr	r3, [pc, #328]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80111c0:	795b      	ldrb	r3, [r3, #5]
 80111c2:	f023 0302 	bic.w	r3, r3, #2
 80111c6:	b2da      	uxtb	r2, r3
 80111c8:	4b4f      	ldr	r3, [pc, #316]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80111ca:	715a      	strb	r2, [r3, #5]
        break;
 80111cc:	e19f      	b.n	801150e <lcd_clear_vol_unit+0x472>
        case M3:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 80111ce:	4b4e      	ldr	r3, [pc, #312]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80111d0:	7bdb      	ldrb	r3, [r3, #15]
 80111d2:	f023 0320 	bic.w	r3, r3, #32
 80111d6:	b2da      	uxtb	r2, r3
 80111d8:	4b4b      	ldr	r3, [pc, #300]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80111da:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 80111dc:	4b4a      	ldr	r3, [pc, #296]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80111de:	7a9b      	ldrb	r3, [r3, #10]
 80111e0:	f023 0304 	bic.w	r3, r3, #4
 80111e4:	b2da      	uxtb	r2, r3
 80111e6:	4b48      	ldr	r3, [pc, #288]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80111e8:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 80111ea:	4b47      	ldr	r3, [pc, #284]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80111ec:	7bdb      	ldrb	r3, [r3, #15]
 80111ee:	f023 0310 	bic.w	r3, r3, #16
 80111f2:	b2da      	uxtb	r2, r3
 80111f4:	4b44      	ldr	r3, [pc, #272]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80111f6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 80111f8:	4b43      	ldr	r3, [pc, #268]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80111fa:	7bdb      	ldrb	r3, [r3, #15]
 80111fc:	f023 0308 	bic.w	r3, r3, #8
 8011200:	b2da      	uxtb	r2, r3
 8011202:	4b41      	ldr	r3, [pc, #260]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011204:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8011206:	4b40      	ldr	r3, [pc, #256]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	f023 0320 	bic.w	r3, r3, #32
 801120e:	b2da      	uxtb	r2, r3
 8011210:	4b3d      	ldr	r3, [pc, #244]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011212:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8011214:	4b3c      	ldr	r3, [pc, #240]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	f023 0308 	bic.w	r3, r3, #8
 801121c:	b2da      	uxtb	r2, r3
 801121e:	4b3a      	ldr	r3, [pc, #232]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011220:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8011222:	4b39      	ldr	r3, [pc, #228]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011224:	7b9b      	ldrb	r3, [r3, #14]
 8011226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801122a:	b2da      	uxtb	r2, r3
 801122c:	4b36      	ldr	r3, [pc, #216]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 801122e:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 8011230:	4b35      	ldr	r3, [pc, #212]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011232:	7cdb      	ldrb	r3, [r3, #19]
 8011234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011238:	b2da      	uxtb	r2, r3
 801123a:	4b33      	ldr	r3, [pc, #204]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 801123c:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 801123e:	4b32      	ldr	r3, [pc, #200]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011240:	7cdb      	ldrb	r3, [r3, #19]
 8011242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011246:	b2da      	uxtb	r2, r3
 8011248:	4b2f      	ldr	r3, [pc, #188]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 801124a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 801124c:	4b2e      	ldr	r3, [pc, #184]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	f023 0301 	bic.w	r3, r3, #1
 8011254:	b2da      	uxtb	r2, r3
 8011256:	4b2c      	ldr	r3, [pc, #176]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011258:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 801125a:	4b2b      	ldr	r3, [pc, #172]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 801125c:	791b      	ldrb	r3, [r3, #4]
 801125e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011262:	b2da      	uxtb	r2, r3
 8011264:	4b28      	ldr	r3, [pc, #160]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011266:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8011268:	4b27      	ldr	r3, [pc, #156]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 801126a:	795b      	ldrb	r3, [r3, #5]
 801126c:	f023 0302 	bic.w	r3, r3, #2
 8011270:	b2da      	uxtb	r2, r3
 8011272:	4b25      	ldr	r3, [pc, #148]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011274:	715a      	strb	r2, [r3, #5]
        break;
 8011276:	e14a      	b.n	801150e <lcd_clear_vol_unit+0x472>
        case MC:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8011278:	4b23      	ldr	r3, [pc, #140]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 801127a:	7bdb      	ldrb	r3, [r3, #15]
 801127c:	f023 0320 	bic.w	r3, r3, #32
 8011280:	b2da      	uxtb	r2, r3
 8011282:	4b21      	ldr	r3, [pc, #132]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011284:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 8011286:	4b20      	ldr	r3, [pc, #128]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011288:	7a9b      	ldrb	r3, [r3, #10]
 801128a:	f023 0304 	bic.w	r3, r3, #4
 801128e:	b2da      	uxtb	r2, r3
 8011290:	4b1d      	ldr	r3, [pc, #116]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011292:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8011294:	4b1c      	ldr	r3, [pc, #112]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011296:	7bdb      	ldrb	r3, [r3, #15]
 8011298:	f023 0310 	bic.w	r3, r3, #16
 801129c:	b2da      	uxtb	r2, r3
 801129e:	4b1a      	ldr	r3, [pc, #104]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80112a0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 80112a2:	4b19      	ldr	r3, [pc, #100]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80112a4:	7bdb      	ldrb	r3, [r3, #15]
 80112a6:	f023 0308 	bic.w	r3, r3, #8
 80112aa:	b2da      	uxtb	r2, r3
 80112ac:	4b16      	ldr	r3, [pc, #88]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80112ae:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 80112b0:	4b15      	ldr	r3, [pc, #84]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	f023 0320 	bic.w	r3, r3, #32
 80112b8:	b2da      	uxtb	r2, r3
 80112ba:	4b13      	ldr	r3, [pc, #76]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80112bc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 80112be:	4b12      	ldr	r3, [pc, #72]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	f023 0308 	bic.w	r3, r3, #8
 80112c6:	b2da      	uxtb	r2, r3
 80112c8:	4b0f      	ldr	r3, [pc, #60]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80112ca:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 80112cc:	4b0e      	ldr	r3, [pc, #56]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80112ce:	7b9b      	ldrb	r3, [r3, #14]
 80112d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112d4:	b2da      	uxtb	r2, r3
 80112d6:	4b0c      	ldr	r3, [pc, #48]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80112d8:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 80112da:	4b0b      	ldr	r3, [pc, #44]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80112dc:	7bdb      	ldrb	r3, [r3, #15]
 80112de:	f023 0302 	bic.w	r3, r3, #2
 80112e2:	b2da      	uxtb	r2, r3
 80112e4:	4b08      	ldr	r3, [pc, #32]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80112e6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 80112e8:	4b07      	ldr	r3, [pc, #28]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	f023 0302 	bic.w	r3, r3, #2
 80112f0:	b2da      	uxtb	r2, r3
 80112f2:	4b05      	ldr	r3, [pc, #20]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80112f4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 80112f6:	4b04      	ldr	r3, [pc, #16]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 80112f8:	795b      	ldrb	r3, [r3, #5]
 80112fa:	f023 0302 	bic.w	r3, r3, #2
 80112fe:	b2da      	uxtb	r2, r3
 8011300:	4b01      	ldr	r3, [pc, #4]	; (8011308 <lcd_clear_vol_unit+0x26c>)
 8011302:	715a      	strb	r2, [r3, #5]
        break;
 8011304:	e103      	b.n	801150e <lcd_clear_vol_unit+0x472>
 8011306:	bf00      	nop
 8011308:	20001df8 	.word	0x20001df8
        case BR:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 801130c:	4b84      	ldr	r3, [pc, #528]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801130e:	7a9b      	ldrb	r3, [r3, #10]
 8011310:	f023 0308 	bic.w	r3, r3, #8
 8011314:	b2da      	uxtb	r2, r3
 8011316:	4b82      	ldr	r3, [pc, #520]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011318:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] &= ~(1 << BIT_4);
 801131a:	4b81      	ldr	r3, [pc, #516]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801131c:	7a9b      	ldrb	r3, [r3, #10]
 801131e:	f023 0310 	bic.w	r3, r3, #16
 8011322:	b2da      	uxtb	r2, r3
 8011324:	4b7e      	ldr	r3, [pc, #504]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011326:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8011328:	4b7d      	ldr	r3, [pc, #500]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801132a:	7bdb      	ldrb	r3, [r3, #15]
 801132c:	f023 0308 	bic.w	r3, r3, #8
 8011330:	b2da      	uxtb	r2, r3
 8011332:	4b7b      	ldr	r3, [pc, #492]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011334:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8011336:	4b7a      	ldr	r3, [pc, #488]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	f023 0310 	bic.w	r3, r3, #16
 801133e:	b2da      	uxtb	r2, r3
 8011340:	4b77      	ldr	r3, [pc, #476]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011342:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_2);
 8011344:	4b76      	ldr	r3, [pc, #472]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011346:	795b      	ldrb	r3, [r3, #5]
 8011348:	f023 0304 	bic.w	r3, r3, #4
 801134c:	b2da      	uxtb	r2, r3
 801134e:	4b74      	ldr	r3, [pc, #464]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011350:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8011352:	4b73      	ldr	r3, [pc, #460]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	f023 0308 	bic.w	r3, r3, #8
 801135a:	b2da      	uxtb	r2, r3
 801135c:	4b70      	ldr	r3, [pc, #448]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801135e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8011360:	4b6f      	ldr	r3, [pc, #444]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011362:	795b      	ldrb	r3, [r3, #5]
 8011364:	f023 0320 	bic.w	r3, r3, #32
 8011368:	b2da      	uxtb	r2, r3
 801136a:	4b6d      	ldr	r3, [pc, #436]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801136c:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 801136e:	4b6c      	ldr	r3, [pc, #432]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011370:	7b9b      	ldrb	r3, [r3, #14]
 8011372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011376:	b2da      	uxtb	r2, r3
 8011378:	4b69      	ldr	r3, [pc, #420]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801137a:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 801137c:	4b68      	ldr	r3, [pc, #416]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801137e:	7bdb      	ldrb	r3, [r3, #15]
 8011380:	f023 0302 	bic.w	r3, r3, #2
 8011384:	b2da      	uxtb	r2, r3
 8011386:	4b66      	ldr	r3, [pc, #408]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011388:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 801138a:	4b65      	ldr	r3, [pc, #404]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801138c:	7cdb      	ldrb	r3, [r3, #19]
 801138e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011392:	b2da      	uxtb	r2, r3
 8011394:	4b62      	ldr	r3, [pc, #392]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011396:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8011398:	4b61      	ldr	r3, [pc, #388]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801139a:	7cdb      	ldrb	r3, [r3, #19]
 801139c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80113a0:	b2da      	uxtb	r2, r3
 80113a2:	4b5f      	ldr	r3, [pc, #380]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80113a4:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 80113a6:	4b5e      	ldr	r3, [pc, #376]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	f023 0301 	bic.w	r3, r3, #1
 80113ae:	b2da      	uxtb	r2, r3
 80113b0:	4b5b      	ldr	r3, [pc, #364]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80113b2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 80113b4:	4b5a      	ldr	r3, [pc, #360]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	f023 0302 	bic.w	r3, r3, #2
 80113bc:	b2da      	uxtb	r2, r3
 80113be:	4b58      	ldr	r3, [pc, #352]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80113c0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_0);
 80113c2:	4b57      	ldr	r3, [pc, #348]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80113c4:	795b      	ldrb	r3, [r3, #5]
 80113c6:	f023 0301 	bic.w	r3, r3, #1
 80113ca:	b2da      	uxtb	r2, r3
 80113cc:	4b54      	ldr	r3, [pc, #336]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80113ce:	715a      	strb	r2, [r3, #5]
        break;
 80113d0:	e09d      	b.n	801150e <lcd_clear_vol_unit+0x472>
        case GL:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 80113d2:	4b53      	ldr	r3, [pc, #332]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80113d4:	7a9b      	ldrb	r3, [r3, #10]
 80113d6:	f023 0308 	bic.w	r3, r3, #8
 80113da:	b2da      	uxtb	r2, r3
 80113dc:	4b50      	ldr	r3, [pc, #320]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80113de:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 80113e0:	4b4f      	ldr	r3, [pc, #316]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80113e2:	7bdb      	ldrb	r3, [r3, #15]
 80113e4:	f023 0320 	bic.w	r3, r3, #32
 80113e8:	b2da      	uxtb	r2, r3
 80113ea:	4b4d      	ldr	r3, [pc, #308]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80113ec:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 80113ee:	4b4c      	ldr	r3, [pc, #304]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	f023 0310 	bic.w	r3, r3, #16
 80113f6:	b2da      	uxtb	r2, r3
 80113f8:	4b49      	ldr	r3, [pc, #292]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80113fa:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 80113fc:	4b48      	ldr	r3, [pc, #288]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	f023 0320 	bic.w	r3, r3, #32
 8011404:	b2da      	uxtb	r2, r3
 8011406:	4b46      	ldr	r3, [pc, #280]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011408:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 801140a:	4b45      	ldr	r3, [pc, #276]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	f023 0308 	bic.w	r3, r3, #8
 8011412:	b2da      	uxtb	r2, r3
 8011414:	4b42      	ldr	r3, [pc, #264]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011416:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8011418:	4b41      	ldr	r3, [pc, #260]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801141a:	795b      	ldrb	r3, [r3, #5]
 801141c:	f023 0320 	bic.w	r3, r3, #32
 8011420:	b2da      	uxtb	r2, r3
 8011422:	4b3f      	ldr	r3, [pc, #252]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011424:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8011426:	4b3e      	ldr	r3, [pc, #248]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011428:	7bdb      	ldrb	r3, [r3, #15]
 801142a:	f023 0302 	bic.w	r3, r3, #2
 801142e:	b2da      	uxtb	r2, r3
 8011430:	4b3b      	ldr	r3, [pc, #236]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011432:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8011434:	4b3a      	ldr	r3, [pc, #232]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	f023 0302 	bic.w	r3, r3, #2
 801143c:	b2da      	uxtb	r2, r3
 801143e:	4b38      	ldr	r3, [pc, #224]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011440:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8011442:	4b37      	ldr	r3, [pc, #220]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011444:	795b      	ldrb	r3, [r3, #5]
 8011446:	f023 0302 	bic.w	r3, r3, #2
 801144a:	b2da      	uxtb	r2, r3
 801144c:	4b34      	ldr	r3, [pc, #208]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801144e:	715a      	strb	r2, [r3, #5]
        break;
 8011450:	e05d      	b.n	801150e <lcd_clear_vol_unit+0x472>
        case CELSIUS:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8011452:	4b33      	ldr	r3, [pc, #204]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011454:	7a9b      	ldrb	r3, [r3, #10]
 8011456:	f023 0308 	bic.w	r3, r3, #8
 801145a:	b2da      	uxtb	r2, r3
 801145c:	4b30      	ldr	r3, [pc, #192]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801145e:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8011460:	4b2f      	ldr	r3, [pc, #188]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011462:	7bdb      	ldrb	r3, [r3, #15]
 8011464:	f023 0320 	bic.w	r3, r3, #32
 8011468:	b2da      	uxtb	r2, r3
 801146a:	4b2d      	ldr	r3, [pc, #180]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801146c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 801146e:	4b2c      	ldr	r3, [pc, #176]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011470:	7bdb      	ldrb	r3, [r3, #15]
 8011472:	f023 0308 	bic.w	r3, r3, #8
 8011476:	b2da      	uxtb	r2, r3
 8011478:	4b29      	ldr	r3, [pc, #164]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801147a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 801147c:	4b28      	ldr	r3, [pc, #160]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801147e:	7bdb      	ldrb	r3, [r3, #15]
 8011480:	f023 0304 	bic.w	r3, r3, #4
 8011484:	b2da      	uxtb	r2, r3
 8011486:	4b26      	ldr	r3, [pc, #152]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011488:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 801148a:	4b25      	ldr	r3, [pc, #148]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	f023 0310 	bic.w	r3, r3, #16
 8011492:	b2da      	uxtb	r2, r3
 8011494:	4b22      	ldr	r3, [pc, #136]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011496:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8011498:	4b21      	ldr	r3, [pc, #132]	; (8011520 <lcd_clear_vol_unit+0x484>)
 801149a:	7b9b      	ldrb	r3, [r3, #14]
 801149c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114a0:	b2da      	uxtb	r2, r3
 80114a2:	4b1f      	ldr	r3, [pc, #124]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80114a4:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 80114a6:	4b1e      	ldr	r3, [pc, #120]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80114a8:	7bdb      	ldrb	r3, [r3, #15]
 80114aa:	f023 0302 	bic.w	r3, r3, #2
 80114ae:	b2da      	uxtb	r2, r3
 80114b0:	4b1b      	ldr	r3, [pc, #108]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80114b2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 80114b4:	4b1a      	ldr	r3, [pc, #104]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	f023 0302 	bic.w	r3, r3, #2
 80114bc:	b2da      	uxtb	r2, r3
 80114be:	4b18      	ldr	r3, [pc, #96]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80114c0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 80114c2:	4b17      	ldr	r3, [pc, #92]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80114c4:	795b      	ldrb	r3, [r3, #5]
 80114c6:	f023 0302 	bic.w	r3, r3, #2
 80114ca:	b2da      	uxtb	r2, r3
 80114cc:	4b14      	ldr	r3, [pc, #80]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80114ce:	715a      	strb	r2, [r3, #5]
        break;
 80114d0:	e01d      	b.n	801150e <lcd_clear_vol_unit+0x472>
        case NOTHING:
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 80114d2:	4b13      	ldr	r3, [pc, #76]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80114d4:	7bdb      	ldrb	r3, [r3, #15]
 80114d6:	f023 0304 	bic.w	r3, r3, #4
 80114da:	b2da      	uxtb	r2, r3
 80114dc:	4b10      	ldr	r3, [pc, #64]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80114de:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 80114e0:	4b0f      	ldr	r3, [pc, #60]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	f023 0310 	bic.w	r3, r3, #16
 80114e8:	b2da      	uxtb	r2, r3
 80114ea:	4b0d      	ldr	r3, [pc, #52]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80114ec:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 80114ee:	4b0c      	ldr	r3, [pc, #48]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80114f0:	7cdb      	ldrb	r3, [r3, #19]
 80114f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114f6:	b2da      	uxtb	r2, r3
 80114f8:	4b09      	ldr	r3, [pc, #36]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80114fa:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 80114fc:	4b08      	ldr	r3, [pc, #32]	; (8011520 <lcd_clear_vol_unit+0x484>)
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	f023 0301 	bic.w	r3, r3, #1
 8011504:	b2da      	uxtb	r2, r3
 8011506:	4b06      	ldr	r3, [pc, #24]	; (8011520 <lcd_clear_vol_unit+0x484>)
 8011508:	701a      	strb	r2, [r3, #0]
        break;
 801150a:	e000      	b.n	801150e <lcd_clear_vol_unit+0x472>
        default:
        break;
 801150c:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 801150e:	79bb      	ldrb	r3, [r7, #6]
 8011510:	4618      	mov	r0, r3
 8011512:	f001 f9bb 	bl	801288c <pcf8553_blink>
}
 8011516:	bf00      	nop
 8011518:	3708      	adds	r7, #8
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	20001df8 	.word	0x20001df8

08011524 <lcd_init>:
 * @brief Inicialización de la pantalla LCD mediante el puerto SPI1.
 * @param  None
 * @retval None
 */
void lcd_init()
{
 8011524:	b580      	push	{r7, lr}
 8011526:	af00      	add	r7, sp, #0
    pcf8553_init();
 8011528:	f001 fa22 	bl	8012970 <pcf8553_init>
}
 801152c:	bf00      	nop
 801152e:	bd80      	pop	{r7, pc}

08011530 <lcd_put_char>:
 * elegida.
 * @param caracter a escribir tipo char, columna y fila de tipo uint8_t
 * @retval None
 */
void lcd_put_char(char c, uint8_t col, uint8_t row)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b082      	sub	sp, #8
 8011534:	af00      	add	r7, sp, #0
 8011536:	4603      	mov	r3, r0
 8011538:	71fb      	strb	r3, [r7, #7]
 801153a:	460b      	mov	r3, r1
 801153c:	71bb      	strb	r3, [r7, #6]
 801153e:	4613      	mov	r3, r2
 8011540:	717b      	strb	r3, [r7, #5]
    g_row = row + 1;
 8011542:	797b      	ldrb	r3, [r7, #5]
 8011544:	3301      	adds	r3, #1
 8011546:	b2da      	uxtb	r2, r3
 8011548:	4bde      	ldr	r3, [pc, #888]	; (80118c4 <lcd_put_char+0x394>)
 801154a:	701a      	strb	r2, [r3, #0]
     *
     * No se activa esta funcionalidad si se está en el menú de configuración,
     * debido a que entra en conflicto con la funcionalidad del parpadeo de los
     * campos a modificar.
     */
    if (in_configuration == 0)
 801154c:	4bde      	ldr	r3, [pc, #888]	; (80118c8 <lcd_put_char+0x398>)
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d10a      	bne.n	801156a <lcd_put_char+0x3a>
    {
        if (g_buf[row][col] == c)
 8011554:	797a      	ldrb	r2, [r7, #5]
 8011556:	79bb      	ldrb	r3, [r7, #6]
 8011558:	49dc      	ldr	r1, [pc, #880]	; (80118cc <lcd_put_char+0x39c>)
 801155a:	00d2      	lsls	r2, r2, #3
 801155c:	440a      	add	r2, r1
 801155e:	4413      	add	r3, r2
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	79fa      	ldrb	r2, [r7, #7]
 8011564:	429a      	cmp	r2, r3
 8011566:	f000 81d6 	beq.w	8011916 <lcd_put_char+0x3e6>
        {
            return;
        }
    }

    g_buf[row][col] = c;
 801156a:	797a      	ldrb	r2, [r7, #5]
 801156c:	79bb      	ldrb	r3, [r7, #6]
 801156e:	49d7      	ldr	r1, [pc, #860]	; (80118cc <lcd_put_char+0x39c>)
 8011570:	00d2      	lsls	r2, r2, #3
 8011572:	440a      	add	r2, r1
 8011574:	4413      	add	r3, r2
 8011576:	79fa      	ldrb	r2, [r7, #7]
 8011578:	701a      	strb	r2, [r3, #0]

    switch (row)
 801157a:	797b      	ldrb	r3, [r7, #5]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d002      	beq.n	8011586 <lcd_put_char+0x56>
 8011580:	2b01      	cmp	r3, #1
 8011582:	d008      	beq.n	8011596 <lcd_put_char+0x66>
                return;
            }

        break;
        default:
            return;
 8011584:	e1ce      	b.n	8011924 <lcd_put_char+0x3f4>
            if (col < LINE_0_DIGITS - 1)
 8011586:	79bb      	ldrb	r3, [r7, #6]
 8011588:	2b07      	cmp	r3, #7
 801158a:	f200 81c6 	bhi.w	801191a <lcd_put_char+0x3ea>
                g_col = col;
 801158e:	4ad0      	ldr	r2, [pc, #832]	; (80118d0 <lcd_put_char+0x3a0>)
 8011590:	79bb      	ldrb	r3, [r7, #6]
 8011592:	7013      	strb	r3, [r2, #0]
        break;
 8011594:	e00a      	b.n	80115ac <lcd_put_char+0x7c>
            if (col < LINE_1_DIGITS - 1)
 8011596:	79bb      	ldrb	r3, [r7, #6]
 8011598:	2b06      	cmp	r3, #6
 801159a:	f200 81c0 	bhi.w	801191e <lcd_put_char+0x3ee>
                g_col = 6 - col; // @suppress("Avoid magic numbers")
 801159e:	79bb      	ldrb	r3, [r7, #6]
 80115a0:	f1c3 0306 	rsb	r3, r3, #6
 80115a4:	b2da      	uxtb	r2, r3
 80115a6:	4bca      	ldr	r3, [pc, #808]	; (80118d0 <lcd_put_char+0x3a0>)
 80115a8:	701a      	strb	r2, [r3, #0]
        break;
 80115aa:	bf00      	nop
        break;
    }

    switch (c)
 80115ac:	79fb      	ldrb	r3, [r7, #7]
 80115ae:	3b20      	subs	r3, #32
 80115b0:	2b19      	cmp	r3, #25
 80115b2:	f200 81b6 	bhi.w	8011922 <lcd_put_char+0x3f2>
 80115b6:	a201      	add	r2, pc, #4	; (adr r2, 80115bc <lcd_put_char+0x8c>)
 80115b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115bc:	08011625 	.word	0x08011625
 80115c0:	08011923 	.word	0x08011923
 80115c4:	08011923 	.word	0x08011923
 80115c8:	08011923 	.word	0x08011923
 80115cc:	08011923 	.word	0x08011923
 80115d0:	08011923 	.word	0x08011923
 80115d4:	08011923 	.word	0x08011923
 80115d8:	08011923 	.word	0x08011923
 80115dc:	08011923 	.word	0x08011923
 80115e0:	08011923 	.word	0x08011923
 80115e4:	08011923 	.word	0x08011923
 80115e8:	08011923 	.word	0x08011923
 80115ec:	08011923 	.word	0x08011923
 80115f0:	08011923 	.word	0x08011923
 80115f4:	08011667 	.word	0x08011667
 80115f8:	08011923 	.word	0x08011923
 80115fc:	08011671 	.word	0x08011671
 8011600:	080116b3 	.word	0x080116b3
 8011604:	080116f5 	.word	0x080116f5
 8011608:	08011737 	.word	0x08011737
 801160c:	08011779 	.word	0x08011779
 8011610:	080117bb 	.word	0x080117bb
 8011614:	080117fd 	.word	0x080117fd
 8011618:	0801183f 	.word	0x0801183f
 801161c:	08011881 	.word	0x08011881
 8011620:	080118d5 	.word	0x080118d5
    {
        case ' ':
            lcd_write_line(SEG_A, 0);
 8011624:	2100      	movs	r1, #0
 8011626:	2000      	movs	r0, #0
 8011628:	f001 f836 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 801162c:	2100      	movs	r1, #0
 801162e:	2001      	movs	r0, #1
 8011630:	f001 f832 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 8011634:	2100      	movs	r1, #0
 8011636:	2002      	movs	r0, #2
 8011638:	f001 f82e 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 801163c:	2100      	movs	r1, #0
 801163e:	2003      	movs	r0, #3
 8011640:	f001 f82a 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 8011644:	2100      	movs	r1, #0
 8011646:	2004      	movs	r0, #4
 8011648:	f001 f826 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 801164c:	2100      	movs	r1, #0
 801164e:	2005      	movs	r0, #5
 8011650:	f001 f822 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 8011654:	2100      	movs	r1, #0
 8011656:	2006      	movs	r0, #6
 8011658:	f001 f81e 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801165c:	2100      	movs	r1, #0
 801165e:	2007      	movs	r0, #7
 8011660:	f001 f81a 	bl	8012698 <lcd_write_line>
        break;
 8011664:	e15e      	b.n	8011924 <lcd_put_char+0x3f4>
        case '.':
            lcd_write_line(SEG_H, 1);
 8011666:	2101      	movs	r1, #1
 8011668:	2007      	movs	r0, #7
 801166a:	f001 f815 	bl	8012698 <lcd_write_line>
        break;
 801166e:	e159      	b.n	8011924 <lcd_put_char+0x3f4>
        case '0':
            lcd_write_line(SEG_A, 1);
 8011670:	2101      	movs	r1, #1
 8011672:	2000      	movs	r0, #0
 8011674:	f001 f810 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011678:	2101      	movs	r1, #1
 801167a:	2001      	movs	r0, #1
 801167c:	f001 f80c 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011680:	2101      	movs	r1, #1
 8011682:	2002      	movs	r0, #2
 8011684:	f001 f808 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011688:	2100      	movs	r1, #0
 801168a:	2003      	movs	r0, #3
 801168c:	f001 f804 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011690:	2101      	movs	r1, #1
 8011692:	2004      	movs	r0, #4
 8011694:	f001 f800 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011698:	2101      	movs	r1, #1
 801169a:	2005      	movs	r0, #5
 801169c:	f000 fffc 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80116a0:	2101      	movs	r1, #1
 80116a2:	2006      	movs	r0, #6
 80116a4:	f000 fff8 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80116a8:	2100      	movs	r1, #0
 80116aa:	2007      	movs	r0, #7
 80116ac:	f000 fff4 	bl	8012698 <lcd_write_line>
        break;
 80116b0:	e138      	b.n	8011924 <lcd_put_char+0x3f4>
        case '1':
            lcd_write_line(SEG_A, 0);
 80116b2:	2100      	movs	r1, #0
 80116b4:	2000      	movs	r0, #0
 80116b6:	f000 ffef 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80116ba:	2100      	movs	r1, #0
 80116bc:	2001      	movs	r0, #1
 80116be:	f000 ffeb 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80116c2:	2101      	movs	r1, #1
 80116c4:	2002      	movs	r0, #2
 80116c6:	f000 ffe7 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 80116ca:	2100      	movs	r1, #0
 80116cc:	2003      	movs	r0, #3
 80116ce:	f000 ffe3 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 80116d2:	2100      	movs	r1, #0
 80116d4:	2004      	movs	r0, #4
 80116d6:	f000 ffdf 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80116da:	2101      	movs	r1, #1
 80116dc:	2005      	movs	r0, #5
 80116de:	f000 ffdb 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 80116e2:	2100      	movs	r1, #0
 80116e4:	2006      	movs	r0, #6
 80116e6:	f000 ffd7 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80116ea:	2100      	movs	r1, #0
 80116ec:	2007      	movs	r0, #7
 80116ee:	f000 ffd3 	bl	8012698 <lcd_write_line>
        break;
 80116f2:	e117      	b.n	8011924 <lcd_put_char+0x3f4>
        case '2':
            lcd_write_line(SEG_A, 1);
 80116f4:	2101      	movs	r1, #1
 80116f6:	2000      	movs	r0, #0
 80116f8:	f000 ffce 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80116fc:	2101      	movs	r1, #1
 80116fe:	2001      	movs	r0, #1
 8011700:	f000 ffca 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 8011704:	2100      	movs	r1, #0
 8011706:	2002      	movs	r0, #2
 8011708:	f000 ffc6 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 801170c:	2101      	movs	r1, #1
 801170e:	2003      	movs	r0, #3
 8011710:	f000 ffc2 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 8011714:	2100      	movs	r1, #0
 8011716:	2004      	movs	r0, #4
 8011718:	f000 ffbe 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 801171c:	2101      	movs	r1, #1
 801171e:	2005      	movs	r0, #5
 8011720:	f000 ffba 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011724:	2101      	movs	r1, #1
 8011726:	2006      	movs	r0, #6
 8011728:	f000 ffb6 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801172c:	2100      	movs	r1, #0
 801172e:	2007      	movs	r0, #7
 8011730:	f000 ffb2 	bl	8012698 <lcd_write_line>
        break;
 8011734:	e0f6      	b.n	8011924 <lcd_put_char+0x3f4>
        case '3':
            lcd_write_line(SEG_A, 1);
 8011736:	2101      	movs	r1, #1
 8011738:	2000      	movs	r0, #0
 801173a:	f000 ffad 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 801173e:	2100      	movs	r1, #0
 8011740:	2001      	movs	r0, #1
 8011742:	f000 ffa9 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011746:	2101      	movs	r1, #1
 8011748:	2002      	movs	r0, #2
 801174a:	f000 ffa5 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 801174e:	2101      	movs	r1, #1
 8011750:	2003      	movs	r0, #3
 8011752:	f000 ffa1 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 8011756:	2100      	movs	r1, #0
 8011758:	2004      	movs	r0, #4
 801175a:	f000 ff9d 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 801175e:	2101      	movs	r1, #1
 8011760:	2005      	movs	r0, #5
 8011762:	f000 ff99 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011766:	2101      	movs	r1, #1
 8011768:	2006      	movs	r0, #6
 801176a:	f000 ff95 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801176e:	2100      	movs	r1, #0
 8011770:	2007      	movs	r0, #7
 8011772:	f000 ff91 	bl	8012698 <lcd_write_line>
        break;
 8011776:	e0d5      	b.n	8011924 <lcd_put_char+0x3f4>
        case '4':
            lcd_write_line(SEG_A, 0);
 8011778:	2100      	movs	r1, #0
 801177a:	2000      	movs	r0, #0
 801177c:	f000 ff8c 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011780:	2100      	movs	r1, #0
 8011782:	2001      	movs	r0, #1
 8011784:	f000 ff88 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011788:	2101      	movs	r1, #1
 801178a:	2002      	movs	r0, #2
 801178c:	f000 ff84 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011790:	2101      	movs	r1, #1
 8011792:	2003      	movs	r0, #3
 8011794:	f000 ff80 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011798:	2101      	movs	r1, #1
 801179a:	2004      	movs	r0, #4
 801179c:	f000 ff7c 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80117a0:	2101      	movs	r1, #1
 80117a2:	2005      	movs	r0, #5
 80117a4:	f000 ff78 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 80117a8:	2100      	movs	r1, #0
 80117aa:	2006      	movs	r0, #6
 80117ac:	f000 ff74 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80117b0:	2100      	movs	r1, #0
 80117b2:	2007      	movs	r0, #7
 80117b4:	f000 ff70 	bl	8012698 <lcd_write_line>
        break;
 80117b8:	e0b4      	b.n	8011924 <lcd_put_char+0x3f4>
        case '5':
            lcd_write_line(SEG_A, 1);
 80117ba:	2101      	movs	r1, #1
 80117bc:	2000      	movs	r0, #0
 80117be:	f000 ff6b 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80117c2:	2100      	movs	r1, #0
 80117c4:	2001      	movs	r0, #1
 80117c6:	f000 ff67 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80117ca:	2101      	movs	r1, #1
 80117cc:	2002      	movs	r0, #2
 80117ce:	f000 ff63 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80117d2:	2101      	movs	r1, #1
 80117d4:	2003      	movs	r0, #3
 80117d6:	f000 ff5f 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80117da:	2101      	movs	r1, #1
 80117dc:	2004      	movs	r0, #4
 80117de:	f000 ff5b 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 80117e2:	2100      	movs	r1, #0
 80117e4:	2005      	movs	r0, #5
 80117e6:	f000 ff57 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80117ea:	2101      	movs	r1, #1
 80117ec:	2006      	movs	r0, #6
 80117ee:	f000 ff53 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80117f2:	2100      	movs	r1, #0
 80117f4:	2007      	movs	r0, #7
 80117f6:	f000 ff4f 	bl	8012698 <lcd_write_line>
        break;
 80117fa:	e093      	b.n	8011924 <lcd_put_char+0x3f4>
        case '6':
            lcd_write_line(SEG_A, 1);
 80117fc:	2101      	movs	r1, #1
 80117fe:	2000      	movs	r0, #0
 8011800:	f000 ff4a 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011804:	2101      	movs	r1, #1
 8011806:	2001      	movs	r0, #1
 8011808:	f000 ff46 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801180c:	2101      	movs	r1, #1
 801180e:	2002      	movs	r0, #2
 8011810:	f000 ff42 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011814:	2101      	movs	r1, #1
 8011816:	2003      	movs	r0, #3
 8011818:	f000 ff3e 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 801181c:	2101      	movs	r1, #1
 801181e:	2004      	movs	r0, #4
 8011820:	f000 ff3a 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 8011824:	2100      	movs	r1, #0
 8011826:	2005      	movs	r0, #5
 8011828:	f000 ff36 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801182c:	2101      	movs	r1, #1
 801182e:	2006      	movs	r0, #6
 8011830:	f000 ff32 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011834:	2100      	movs	r1, #0
 8011836:	2007      	movs	r0, #7
 8011838:	f000 ff2e 	bl	8012698 <lcd_write_line>
        break;
 801183c:	e072      	b.n	8011924 <lcd_put_char+0x3f4>
        case '7':
            lcd_write_line(SEG_A, 0);
 801183e:	2100      	movs	r1, #0
 8011840:	2000      	movs	r0, #0
 8011842:	f000 ff29 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011846:	2100      	movs	r1, #0
 8011848:	2001      	movs	r0, #1
 801184a:	f000 ff25 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801184e:	2101      	movs	r1, #1
 8011850:	2002      	movs	r0, #2
 8011852:	f000 ff21 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011856:	2100      	movs	r1, #0
 8011858:	2003      	movs	r0, #3
 801185a:	f000 ff1d 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801185e:	2100      	movs	r1, #0
 8011860:	2004      	movs	r0, #4
 8011862:	f000 ff19 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011866:	2101      	movs	r1, #1
 8011868:	2005      	movs	r0, #5
 801186a:	f000 ff15 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801186e:	2101      	movs	r1, #1
 8011870:	2006      	movs	r0, #6
 8011872:	f000 ff11 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011876:	2100      	movs	r1, #0
 8011878:	2007      	movs	r0, #7
 801187a:	f000 ff0d 	bl	8012698 <lcd_write_line>
        break;
 801187e:	e051      	b.n	8011924 <lcd_put_char+0x3f4>
        case '8':
            lcd_write_line(SEG_A, 1);
 8011880:	2101      	movs	r1, #1
 8011882:	2000      	movs	r0, #0
 8011884:	f000 ff08 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011888:	2101      	movs	r1, #1
 801188a:	2001      	movs	r0, #1
 801188c:	f000 ff04 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011890:	2101      	movs	r1, #1
 8011892:	2002      	movs	r0, #2
 8011894:	f000 ff00 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011898:	2101      	movs	r1, #1
 801189a:	2003      	movs	r0, #3
 801189c:	f000 fefc 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80118a0:	2101      	movs	r1, #1
 80118a2:	2004      	movs	r0, #4
 80118a4:	f000 fef8 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80118a8:	2101      	movs	r1, #1
 80118aa:	2005      	movs	r0, #5
 80118ac:	f000 fef4 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80118b0:	2101      	movs	r1, #1
 80118b2:	2006      	movs	r0, #6
 80118b4:	f000 fef0 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80118b8:	2100      	movs	r1, #0
 80118ba:	2007      	movs	r0, #7
 80118bc:	f000 feec 	bl	8012698 <lcd_write_line>
        break;
 80118c0:	e030      	b.n	8011924 <lcd_put_char+0x3f4>
 80118c2:	bf00      	nop
 80118c4:	20001d65 	.word	0x20001d65
 80118c8:	20001e14 	.word	0x20001e14
 80118cc:	20001d54 	.word	0x20001d54
 80118d0:	20001d64 	.word	0x20001d64
        case '9':
            lcd_write_line(SEG_A, 0);
 80118d4:	2100      	movs	r1, #0
 80118d6:	2000      	movs	r0, #0
 80118d8:	f000 fede 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80118dc:	2100      	movs	r1, #0
 80118de:	2001      	movs	r0, #1
 80118e0:	f000 feda 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80118e4:	2101      	movs	r1, #1
 80118e6:	2002      	movs	r0, #2
 80118e8:	f000 fed6 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80118ec:	2101      	movs	r1, #1
 80118ee:	2003      	movs	r0, #3
 80118f0:	f000 fed2 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80118f4:	2101      	movs	r1, #1
 80118f6:	2004      	movs	r0, #4
 80118f8:	f000 fece 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80118fc:	2101      	movs	r1, #1
 80118fe:	2005      	movs	r0, #5
 8011900:	f000 feca 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011904:	2101      	movs	r1, #1
 8011906:	2006      	movs	r0, #6
 8011908:	f000 fec6 	bl	8012698 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801190c:	2100      	movs	r1, #0
 801190e:	2007      	movs	r0, #7
 8011910:	f000 fec2 	bl	8012698 <lcd_write_line>
        break;
 8011914:	e006      	b.n	8011924 <lcd_put_char+0x3f4>
            return;
 8011916:	bf00      	nop
 8011918:	e004      	b.n	8011924 <lcd_put_char+0x3f4>
                return;
 801191a:	bf00      	nop
 801191c:	e002      	b.n	8011924 <lcd_put_char+0x3f4>
                return;
 801191e:	bf00      	nop
 8011920:	e000      	b.n	8011924 <lcd_put_char+0x3f4>
        default:
        break;
 8011922:	bf00      	nop
    }
}
 8011924:	3708      	adds	r7, #8
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop

0801192c <lcd_refresh>:
 * enviar en dicho buffer y luego enviar todo junto.
 * @param None
 * @retval None
 */
void lcd_refresh()
{
 801192c:	b580      	push	{r7, lr}
 801192e:	af00      	add	r7, sp, #0
    pcf8553_dump();
 8011930:	f000 fff2 	bl	8012918 <pcf8553_dump>
}
 8011934:	bf00      	nop
 8011936:	bd80      	pop	{r7, pc}

08011938 <lcd_set_point>:
 * @brief Función que escribe un punto en específico en la pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_set_point(rows_t line, point_t point)
{
 8011938:	b480      	push	{r7}
 801193a:	b083      	sub	sp, #12
 801193c:	af00      	add	r7, sp, #0
 801193e:	4603      	mov	r3, r0
 8011940:	460a      	mov	r2, r1
 8011942:	71fb      	strb	r3, [r7, #7]
 8011944:	4613      	mov	r3, r2
 8011946:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8011948:	79fb      	ldrb	r3, [r7, #7]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d14c      	bne.n	80119e8 <lcd_set_point+0xb0>
    {
        switch (point)
 801194e:	79bb      	ldrb	r3, [r7, #6]
 8011950:	2b06      	cmp	r3, #6
 8011952:	f200 808f 	bhi.w	8011a74 <lcd_set_point+0x13c>
 8011956:	a201      	add	r2, pc, #4	; (adr r2, 801195c <lcd_set_point+0x24>)
 8011958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801195c:	08011979 	.word	0x08011979
 8011960:	08011989 	.word	0x08011989
 8011964:	08011999 	.word	0x08011999
 8011968:	080119a9 	.word	0x080119a9
 801196c:	080119b9 	.word	0x080119b9
 8011970:	080119c9 	.word	0x080119c9
 8011974:	080119d9 	.word	0x080119d9
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_7);
 8011978:	4b44      	ldr	r3, [pc, #272]	; (8011a8c <lcd_set_point+0x154>)
 801197a:	79db      	ldrb	r3, [r3, #7]
 801197c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011980:	b2da      	uxtb	r2, r3
 8011982:	4b42      	ldr	r3, [pc, #264]	; (8011a8c <lcd_set_point+0x154>)
 8011984:	71da      	strb	r2, [r3, #7]
            break;
 8011986:	e07a      	b.n	8011a7e <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] |= (1 << BIT_1);
 8011988:	4b40      	ldr	r3, [pc, #256]	; (8011a8c <lcd_set_point+0x154>)
 801198a:	7a1b      	ldrb	r3, [r3, #8]
 801198c:	f043 0302 	orr.w	r3, r3, #2
 8011990:	b2da      	uxtb	r2, r3
 8011992:	4b3e      	ldr	r3, [pc, #248]	; (8011a8c <lcd_set_point+0x154>)
 8011994:	721a      	strb	r2, [r3, #8]
            break;
 8011996:	e072      	b.n	8011a7e <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] |= (1 << BIT_3);
 8011998:	4b3c      	ldr	r3, [pc, #240]	; (8011a8c <lcd_set_point+0x154>)
 801199a:	7a1b      	ldrb	r3, [r3, #8]
 801199c:	f043 0308 	orr.w	r3, r3, #8
 80119a0:	b2da      	uxtb	r2, r3
 80119a2:	4b3a      	ldr	r3, [pc, #232]	; (8011a8c <lcd_set_point+0x154>)
 80119a4:	721a      	strb	r2, [r3, #8]
            break;
 80119a6:	e06a      	b.n	8011a7e <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] |= (1 << BIT_5);
 80119a8:	4b38      	ldr	r3, [pc, #224]	; (8011a8c <lcd_set_point+0x154>)
 80119aa:	7a1b      	ldrb	r3, [r3, #8]
 80119ac:	f043 0320 	orr.w	r3, r3, #32
 80119b0:	b2da      	uxtb	r2, r3
 80119b2:	4b36      	ldr	r3, [pc, #216]	; (8011a8c <lcd_set_point+0x154>)
 80119b4:	721a      	strb	r2, [r3, #8]
            break;
 80119b6:	e062      	b.n	8011a7e <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] |= (1 << BIT_7);
 80119b8:	4b34      	ldr	r3, [pc, #208]	; (8011a8c <lcd_set_point+0x154>)
 80119ba:	7a1b      	ldrb	r3, [r3, #8]
 80119bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80119c0:	b2da      	uxtb	r2, r3
 80119c2:	4b32      	ldr	r3, [pc, #200]	; (8011a8c <lcd_set_point+0x154>)
 80119c4:	721a      	strb	r2, [r3, #8]
            break;
 80119c6:	e05a      	b.n	8011a7e <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] |= (1 << BIT_1);
 80119c8:	4b30      	ldr	r3, [pc, #192]	; (8011a8c <lcd_set_point+0x154>)
 80119ca:	7a5b      	ldrb	r3, [r3, #9]
 80119cc:	f043 0302 	orr.w	r3, r3, #2
 80119d0:	b2da      	uxtb	r2, r3
 80119d2:	4b2e      	ldr	r3, [pc, #184]	; (8011a8c <lcd_set_point+0x154>)
 80119d4:	725a      	strb	r2, [r3, #9]
            break;
 80119d6:	e052      	b.n	8011a7e <lcd_set_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] |= (1 << BIT_3);
 80119d8:	4b2c      	ldr	r3, [pc, #176]	; (8011a8c <lcd_set_point+0x154>)
 80119da:	7a5b      	ldrb	r3, [r3, #9]
 80119dc:	f043 0308 	orr.w	r3, r3, #8
 80119e0:	b2da      	uxtb	r2, r3
 80119e2:	4b2a      	ldr	r3, [pc, #168]	; (8011a8c <lcd_set_point+0x154>)
 80119e4:	725a      	strb	r2, [r3, #9]
            break;
 80119e6:	e04a      	b.n	8011a7e <lcd_set_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 80119e8:	79fb      	ldrb	r3, [r7, #7]
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	d144      	bne.n	8011a78 <lcd_set_point+0x140>
    {
        switch (point)
 80119ee:	79bb      	ldrb	r3, [r7, #6]
 80119f0:	2b05      	cmp	r3, #5
 80119f2:	d843      	bhi.n	8011a7c <lcd_set_point+0x144>
 80119f4:	a201      	add	r2, pc, #4	; (adr r2, 80119fc <lcd_set_point+0xc4>)
 80119f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119fa:	bf00      	nop
 80119fc:	08011a15 	.word	0x08011a15
 8011a00:	08011a25 	.word	0x08011a25
 8011a04:	08011a35 	.word	0x08011a35
 8011a08:	08011a45 	.word	0x08011a45
 8011a0c:	08011a55 	.word	0x08011a55
 8011a10:	08011a65 	.word	0x08011a65
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_2);
 8011a14:	4b1d      	ldr	r3, [pc, #116]	; (8011a8c <lcd_set_point+0x154>)
 8011a16:	79db      	ldrb	r3, [r3, #7]
 8011a18:	f043 0304 	orr.w	r3, r3, #4
 8011a1c:	b2da      	uxtb	r2, r3
 8011a1e:	4b1b      	ldr	r3, [pc, #108]	; (8011a8c <lcd_set_point+0x154>)
 8011a20:	71da      	strb	r2, [r3, #7]
            break;
 8011a22:	e02c      	b.n	8011a7e <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] |= (1 << BIT_0);
 8011a24:	4b19      	ldr	r3, [pc, #100]	; (8011a8c <lcd_set_point+0x154>)
 8011a26:	79db      	ldrb	r3, [r3, #7]
 8011a28:	f043 0301 	orr.w	r3, r3, #1
 8011a2c:	b2da      	uxtb	r2, r3
 8011a2e:	4b17      	ldr	r3, [pc, #92]	; (8011a8c <lcd_set_point+0x154>)
 8011a30:	71da      	strb	r2, [r3, #7]
            break;
 8011a32:	e024      	b.n	8011a7e <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] |= (1 << BIT_6);
 8011a34:	4b15      	ldr	r3, [pc, #84]	; (8011a8c <lcd_set_point+0x154>)
 8011a36:	799b      	ldrb	r3, [r3, #6]
 8011a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a3c:	b2da      	uxtb	r2, r3
 8011a3e:	4b13      	ldr	r3, [pc, #76]	; (8011a8c <lcd_set_point+0x154>)
 8011a40:	719a      	strb	r2, [r3, #6]
            break;
 8011a42:	e01c      	b.n	8011a7e <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] |= (1 << BIT_4);
 8011a44:	4b11      	ldr	r3, [pc, #68]	; (8011a8c <lcd_set_point+0x154>)
 8011a46:	799b      	ldrb	r3, [r3, #6]
 8011a48:	f043 0310 	orr.w	r3, r3, #16
 8011a4c:	b2da      	uxtb	r2, r3
 8011a4e:	4b0f      	ldr	r3, [pc, #60]	; (8011a8c <lcd_set_point+0x154>)
 8011a50:	719a      	strb	r2, [r3, #6]
            break;
 8011a52:	e014      	b.n	8011a7e <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] |= (1 << BIT_2);
 8011a54:	4b0d      	ldr	r3, [pc, #52]	; (8011a8c <lcd_set_point+0x154>)
 8011a56:	799b      	ldrb	r3, [r3, #6]
 8011a58:	f043 0304 	orr.w	r3, r3, #4
 8011a5c:	b2da      	uxtb	r2, r3
 8011a5e:	4b0b      	ldr	r3, [pc, #44]	; (8011a8c <lcd_set_point+0x154>)
 8011a60:	719a      	strb	r2, [r3, #6]
            break;
 8011a62:	e00c      	b.n	8011a7e <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] |= (1 << BIT_0);
 8011a64:	4b09      	ldr	r3, [pc, #36]	; (8011a8c <lcd_set_point+0x154>)
 8011a66:	799b      	ldrb	r3, [r3, #6]
 8011a68:	f043 0301 	orr.w	r3, r3, #1
 8011a6c:	b2da      	uxtb	r2, r3
 8011a6e:	4b07      	ldr	r3, [pc, #28]	; (8011a8c <lcd_set_point+0x154>)
 8011a70:	719a      	strb	r2, [r3, #6]
            break;
 8011a72:	e004      	b.n	8011a7e <lcd_set_point+0x146>
            break;
 8011a74:	bf00      	nop
 8011a76:	e002      	b.n	8011a7e <lcd_set_point+0x146>
            default:
            break;
        }
    }
 8011a78:	bf00      	nop
 8011a7a:	e000      	b.n	8011a7e <lcd_set_point+0x146>
            break;
 8011a7c:	bf00      	nop
}
 8011a7e:	bf00      	nop
 8011a80:	370c      	adds	r7, #12
 8011a82:	46bd      	mov	sp, r7
 8011a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a88:	4770      	bx	lr
 8011a8a:	bf00      	nop
 8011a8c:	20001df8 	.word	0x20001df8

08011a90 <lcd_set_symbol>:
 * @brief Función que escribe un símbolo en específico en la pantalla.
 * @param Enumeraciones symbols_t y blink_t de lcd.h
 * @retval None
 */
void lcd_set_symbol(symbols_t symbol, blink_t blink_speed)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b082      	sub	sp, #8
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	4603      	mov	r3, r0
 8011a98:	460a      	mov	r2, r1
 8011a9a:	71fb      	strb	r3, [r7, #7]
 8011a9c:	4613      	mov	r3, r2
 8011a9e:	71bb      	strb	r3, [r7, #6]
    switch (symbol)
 8011aa0:	79fb      	ldrb	r3, [r7, #7]
 8011aa2:	2b16      	cmp	r3, #22
 8011aa4:	f200 8366 	bhi.w	8012174 <lcd_set_symbol+0x6e4>
 8011aa8:	a201      	add	r2, pc, #4	; (adr r2, 8011ab0 <lcd_set_symbol+0x20>)
 8011aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aae:	bf00      	nop
 8011ab0:	08011b1d 	.word	0x08011b1d
 8011ab4:	08011b0d 	.word	0x08011b0d
 8011ab8:	08011b3d 	.word	0x08011b3d
 8011abc:	08011b4d 	.word	0x08011b4d
 8011ac0:	08011b2d 	.word	0x08011b2d
 8011ac4:	08011b7d 	.word	0x08011b7d
 8011ac8:	08011b6d 	.word	0x08011b6d
 8011acc:	08011b8d 	.word	0x08011b8d
 8011ad0:	08011b5d 	.word	0x08011b5d
 8011ad4:	08011b9d 	.word	0x08011b9d
 8011ad8:	08011c2b 	.word	0x08011c2b
 8011adc:	08011d59 	.word	0x08011d59
 8011ae0:	08011da1 	.word	0x08011da1
 8011ae4:	08011e2f 	.word	0x08011e2f
 8011ae8:	08011e93 	.word	0x08011e93
 8011aec:	08011ef7 	.word	0x08011ef7
 8011af0:	08011f5b 	.word	0x08011f5b
 8011af4:	08011f95 	.word	0x08011f95
 8011af8:	08011fb9 	.word	0x08011fb9
 8011afc:	08012001 	.word	0x08012001
 8011b00:	08012049 	.word	0x08012049
 8011b04:	08012083 	.word	0x08012083
 8011b08:	080120cb 	.word	0x080120cb
    {
        case POWER:
            g_lcd_map[REG_2] |= (1 << BIT_5);
 8011b0c:	4b91      	ldr	r3, [pc, #580]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b0e:	789b      	ldrb	r3, [r3, #2]
 8011b10:	f043 0320 	orr.w	r3, r3, #32
 8011b14:	b2da      	uxtb	r2, r3
 8011b16:	4b8f      	ldr	r3, [pc, #572]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b18:	709a      	strb	r2, [r3, #2]
        break;
 8011b1a:	e32c      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case BATTERY:
            g_lcd_map[REG_7] |= (1 << BIT_5);
 8011b1c:	4b8d      	ldr	r3, [pc, #564]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b1e:	79db      	ldrb	r3, [r3, #7]
 8011b20:	f043 0320 	orr.w	r3, r3, #32
 8011b24:	b2da      	uxtb	r2, r3
 8011b26:	4b8b      	ldr	r3, [pc, #556]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b28:	71da      	strb	r2, [r3, #7]
        break;
 8011b2a:	e324      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case BATCH:
            g_lcd_map[REG_12] |= (1 << BIT_5);
 8011b2c:	4b89      	ldr	r3, [pc, #548]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b2e:	7b1b      	ldrb	r3, [r3, #12]
 8011b30:	f043 0320 	orr.w	r3, r3, #32
 8011b34:	b2da      	uxtb	r2, r3
 8011b36:	4b87      	ldr	r3, [pc, #540]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b38:	731a      	strb	r2, [r3, #12]
        break;
 8011b3a:	e31c      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case RATE:
            g_lcd_map[REG_17] |= (1 << BIT_5);
 8011b3c:	4b85      	ldr	r3, [pc, #532]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b3e:	7c5b      	ldrb	r3, [r3, #17]
 8011b40:	f043 0320 	orr.w	r3, r3, #32
 8011b44:	b2da      	uxtb	r2, r3
 8011b46:	4b83      	ldr	r3, [pc, #524]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b48:	745a      	strb	r2, [r3, #17]
        break;
 8011b4a:	e314      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case E:
            g_lcd_map[REG_2] |= (1 << BIT_4);
 8011b4c:	4b81      	ldr	r3, [pc, #516]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b4e:	789b      	ldrb	r3, [r3, #2]
 8011b50:	f043 0310 	orr.w	r3, r3, #16
 8011b54:	b2da      	uxtb	r2, r3
 8011b56:	4b7f      	ldr	r3, [pc, #508]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b58:	709a      	strb	r2, [r3, #2]
        break;
 8011b5a:	e30c      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case POINT:
            g_lcd_map[REG_7] |= (1 << BIT_4);
 8011b5c:	4b7d      	ldr	r3, [pc, #500]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b5e:	79db      	ldrb	r3, [r3, #7]
 8011b60:	f043 0310 	orr.w	r3, r3, #16
 8011b64:	b2da      	uxtb	r2, r3
 8011b66:	4b7b      	ldr	r3, [pc, #492]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b68:	71da      	strb	r2, [r3, #7]
        break;
 8011b6a:	e304      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case ACM:
            g_lcd_map[REG_12] |= (1 << BIT_4);
 8011b6c:	4b79      	ldr	r3, [pc, #484]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b6e:	7b1b      	ldrb	r3, [r3, #12]
 8011b70:	f043 0310 	orr.w	r3, r3, #16
 8011b74:	b2da      	uxtb	r2, r3
 8011b76:	4b77      	ldr	r3, [pc, #476]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b78:	731a      	strb	r2, [r3, #12]
        break;
 8011b7a:	e2fc      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case TTL:
            g_lcd_map[REG_17] |= (1 << BIT_4);
 8011b7c:	4b75      	ldr	r3, [pc, #468]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b7e:	7c5b      	ldrb	r3, [r3, #17]
 8011b80:	f043 0310 	orr.w	r3, r3, #16
 8011b84:	b2da      	uxtb	r2, r3
 8011b86:	4b73      	ldr	r3, [pc, #460]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b88:	745a      	strb	r2, [r3, #17]
        break;
 8011b8a:	e2f4      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case BACKSLASH:
            g_lcd_map[REG_10] |= (1 << BIT_1);
 8011b8c:	4b71      	ldr	r3, [pc, #452]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b8e:	7a9b      	ldrb	r3, [r3, #10]
 8011b90:	f043 0302 	orr.w	r3, r3, #2
 8011b94:	b2da      	uxtb	r2, r3
 8011b96:	4b6f      	ldr	r3, [pc, #444]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b98:	729a      	strb	r2, [r3, #10]
        break;
 8011b9a:	e2ec      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case VE:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011b9c:	4b6d      	ldr	r3, [pc, #436]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011b9e:	7bdb      	ldrb	r3, [r3, #15]
 8011ba0:	f043 0320 	orr.w	r3, r3, #32
 8011ba4:	b2da      	uxtb	r2, r3
 8011ba6:	4b6b      	ldr	r3, [pc, #428]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011ba8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011baa:	4b6a      	ldr	r3, [pc, #424]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011bac:	7bdb      	ldrb	r3, [r3, #15]
 8011bae:	f043 0310 	orr.w	r3, r3, #16
 8011bb2:	b2da      	uxtb	r2, r3
 8011bb4:	4b67      	ldr	r3, [pc, #412]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011bb6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011bb8:	4b66      	ldr	r3, [pc, #408]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	f043 0320 	orr.w	r3, r3, #32
 8011bc0:	b2da      	uxtb	r2, r3
 8011bc2:	4b64      	ldr	r3, [pc, #400]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011bc4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_2);
 8011bc6:	4b63      	ldr	r3, [pc, #396]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	f043 0304 	orr.w	r3, r3, #4
 8011bce:	b2da      	uxtb	r2, r3
 8011bd0:	4b60      	ldr	r3, [pc, #384]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011bd2:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011bd4:	4b5f      	ldr	r3, [pc, #380]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011bd6:	7b9b      	ldrb	r3, [r3, #14]
 8011bd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011bdc:	b2da      	uxtb	r2, r3
 8011bde:	4b5d      	ldr	r3, [pc, #372]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011be0:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011be2:	4b5c      	ldr	r3, [pc, #368]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011be4:	7bdb      	ldrb	r3, [r3, #15]
 8011be6:	f043 0302 	orr.w	r3, r3, #2
 8011bea:	b2da      	uxtb	r2, r3
 8011bec:	4b59      	ldr	r3, [pc, #356]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011bee:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011bf0:	4b58      	ldr	r3, [pc, #352]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011bf2:	7cdb      	ldrb	r3, [r3, #19]
 8011bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bf8:	b2da      	uxtb	r2, r3
 8011bfa:	4b56      	ldr	r3, [pc, #344]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011bfc:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011bfe:	4b55      	ldr	r3, [pc, #340]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	f043 0301 	orr.w	r3, r3, #1
 8011c06:	b2da      	uxtb	r2, r3
 8011c08:	4b52      	ldr	r3, [pc, #328]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c0a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011c0c:	4b51      	ldr	r3, [pc, #324]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	f043 0302 	orr.w	r3, r3, #2
 8011c14:	b2da      	uxtb	r2, r3
 8011c16:	4b4f      	ldr	r3, [pc, #316]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c18:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011c1a:	4b4e      	ldr	r3, [pc, #312]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c1c:	795b      	ldrb	r3, [r3, #5]
 8011c1e:	f043 0302 	orr.w	r3, r3, #2
 8011c22:	b2da      	uxtb	r2, r3
 8011c24:	4b4b      	ldr	r3, [pc, #300]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c26:	715a      	strb	r2, [r3, #5]
        break;
 8011c28:	e2a5      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case PASS:
            g_lcd_map[REG_13] |= (1 << BIT_1);
 8011c2a:	4b4a      	ldr	r3, [pc, #296]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c2c:	7b5b      	ldrb	r3, [r3, #13]
 8011c2e:	f043 0302 	orr.w	r3, r3, #2
 8011c32:	b2da      	uxtb	r2, r3
 8011c34:	4b47      	ldr	r3, [pc, #284]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c36:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_0);
 8011c38:	4b46      	ldr	r3, [pc, #280]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c3a:	7b5b      	ldrb	r3, [r3, #13]
 8011c3c:	f043 0301 	orr.w	r3, r3, #1
 8011c40:	b2da      	uxtb	r2, r3
 8011c42:	4b44      	ldr	r3, [pc, #272]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c44:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_1);
 8011c46:	4b43      	ldr	r3, [pc, #268]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c48:	7c9b      	ldrb	r3, [r3, #18]
 8011c4a:	f043 0302 	orr.w	r3, r3, #2
 8011c4e:	b2da      	uxtb	r2, r3
 8011c50:	4b40      	ldr	r3, [pc, #256]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c52:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_0);
 8011c54:	4b3f      	ldr	r3, [pc, #252]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c56:	7c9b      	ldrb	r3, [r3, #18]
 8011c58:	f043 0301 	orr.w	r3, r3, #1
 8011c5c:	b2da      	uxtb	r2, r3
 8011c5e:	4b3d      	ldr	r3, [pc, #244]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c60:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_0);
 8011c62:	4b3c      	ldr	r3, [pc, #240]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c64:	78db      	ldrb	r3, [r3, #3]
 8011c66:	f043 0301 	orr.w	r3, r3, #1
 8011c6a:	b2da      	uxtb	r2, r3
 8011c6c:	4b39      	ldr	r3, [pc, #228]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c6e:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_3);
 8011c70:	4b38      	ldr	r3, [pc, #224]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c72:	7b5b      	ldrb	r3, [r3, #13]
 8011c74:	f043 0308 	orr.w	r3, r3, #8
 8011c78:	b2da      	uxtb	r2, r3
 8011c7a:	4b36      	ldr	r3, [pc, #216]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c7c:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_2);
 8011c7e:	4b35      	ldr	r3, [pc, #212]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c80:	7b5b      	ldrb	r3, [r3, #13]
 8011c82:	f043 0304 	orr.w	r3, r3, #4
 8011c86:	b2da      	uxtb	r2, r3
 8011c88:	4b32      	ldr	r3, [pc, #200]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c8a:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_3);
 8011c8c:	4b31      	ldr	r3, [pc, #196]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c8e:	7c9b      	ldrb	r3, [r3, #18]
 8011c90:	f043 0308 	orr.w	r3, r3, #8
 8011c94:	b2da      	uxtb	r2, r3
 8011c96:	4b2f      	ldr	r3, [pc, #188]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c98:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_2);
 8011c9a:	4b2e      	ldr	r3, [pc, #184]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011c9c:	7c9b      	ldrb	r3, [r3, #18]
 8011c9e:	f043 0304 	orr.w	r3, r3, #4
 8011ca2:	b2da      	uxtb	r2, r3
 8011ca4:	4b2b      	ldr	r3, [pc, #172]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011ca6:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_2);
 8011ca8:	4b2a      	ldr	r3, [pc, #168]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011caa:	78db      	ldrb	r3, [r3, #3]
 8011cac:	f043 0304 	orr.w	r3, r3, #4
 8011cb0:	b2da      	uxtb	r2, r3
 8011cb2:	4b28      	ldr	r3, [pc, #160]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011cb4:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_3] |= (1 << BIT_3);
 8011cb6:	4b27      	ldr	r3, [pc, #156]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011cb8:	78db      	ldrb	r3, [r3, #3]
 8011cba:	f043 0308 	orr.w	r3, r3, #8
 8011cbe:	b2da      	uxtb	r2, r3
 8011cc0:	4b24      	ldr	r3, [pc, #144]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011cc2:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_5);
 8011cc4:	4b23      	ldr	r3, [pc, #140]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011cc6:	7b5b      	ldrb	r3, [r3, #13]
 8011cc8:	f043 0320 	orr.w	r3, r3, #32
 8011ccc:	b2da      	uxtb	r2, r3
 8011cce:	4b21      	ldr	r3, [pc, #132]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011cd0:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_4);
 8011cd2:	4b20      	ldr	r3, [pc, #128]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011cd4:	7b5b      	ldrb	r3, [r3, #13]
 8011cd6:	f043 0310 	orr.w	r3, r3, #16
 8011cda:	b2da      	uxtb	r2, r3
 8011cdc:	4b1d      	ldr	r3, [pc, #116]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011cde:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_4);
 8011ce0:	4b1c      	ldr	r3, [pc, #112]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011ce2:	7c9b      	ldrb	r3, [r3, #18]
 8011ce4:	f043 0310 	orr.w	r3, r3, #16
 8011ce8:	b2da      	uxtb	r2, r3
 8011cea:	4b1a      	ldr	r3, [pc, #104]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011cec:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_5);
 8011cee:	4b19      	ldr	r3, [pc, #100]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011cf0:	78db      	ldrb	r3, [r3, #3]
 8011cf2:	f043 0320 	orr.w	r3, r3, #32
 8011cf6:	b2da      	uxtb	r2, r3
 8011cf8:	4b16      	ldr	r3, [pc, #88]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011cfa:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_4);
 8011cfc:	4b15      	ldr	r3, [pc, #84]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011cfe:	7a1b      	ldrb	r3, [r3, #8]
 8011d00:	f043 0310 	orr.w	r3, r3, #16
 8011d04:	b2da      	uxtb	r2, r3
 8011d06:	4b13      	ldr	r3, [pc, #76]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011d08:	721a      	strb	r2, [r3, #8]

            g_lcd_map[REG_13] |= (1 << BIT_7);
 8011d0a:	4b12      	ldr	r3, [pc, #72]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011d0c:	7b5b      	ldrb	r3, [r3, #13]
 8011d0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d12:	b2da      	uxtb	r2, r3
 8011d14:	4b0f      	ldr	r3, [pc, #60]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011d16:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_6);
 8011d18:	4b0e      	ldr	r3, [pc, #56]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011d1a:	7b5b      	ldrb	r3, [r3, #13]
 8011d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d20:	b2da      	uxtb	r2, r3
 8011d22:	4b0c      	ldr	r3, [pc, #48]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011d24:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_6);
 8011d26:	4b0b      	ldr	r3, [pc, #44]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011d28:	7c9b      	ldrb	r3, [r3, #18]
 8011d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d2e:	b2da      	uxtb	r2, r3
 8011d30:	4b08      	ldr	r3, [pc, #32]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011d32:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_7);
 8011d34:	4b07      	ldr	r3, [pc, #28]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011d36:	78db      	ldrb	r3, [r3, #3]
 8011d38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d3c:	b2da      	uxtb	r2, r3
 8011d3e:	4b05      	ldr	r3, [pc, #20]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011d40:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_6);
 8011d42:	4b04      	ldr	r3, [pc, #16]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011d44:	7a1b      	ldrb	r3, [r3, #8]
 8011d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d4a:	b2da      	uxtb	r2, r3
 8011d4c:	4b01      	ldr	r3, [pc, #4]	; (8011d54 <lcd_set_symbol+0x2c4>)
 8011d4e:	721a      	strb	r2, [r3, #8]

        break;
 8011d50:	e211      	b.n	8012176 <lcd_set_symbol+0x6e6>
 8011d52:	bf00      	nop
 8011d54:	20001df8 	.word	0x20001df8
        case K:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011d58:	4b96      	ldr	r3, [pc, #600]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011d5a:	7bdb      	ldrb	r3, [r3, #15]
 8011d5c:	f043 0320 	orr.w	r3, r3, #32
 8011d60:	b2da      	uxtb	r2, r3
 8011d62:	4b94      	ldr	r3, [pc, #592]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011d64:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011d66:	4b93      	ldr	r3, [pc, #588]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011d68:	7bdb      	ldrb	r3, [r3, #15]
 8011d6a:	f043 0310 	orr.w	r3, r3, #16
 8011d6e:	b2da      	uxtb	r2, r3
 8011d70:	4b90      	ldr	r3, [pc, #576]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011d72:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011d74:	4b8f      	ldr	r3, [pc, #572]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011d76:	7bdb      	ldrb	r3, [r3, #15]
 8011d78:	f043 0304 	orr.w	r3, r3, #4
 8011d7c:	b2da      	uxtb	r2, r3
 8011d7e:	4b8d      	ldr	r3, [pc, #564]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011d80:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011d82:	4b8c      	ldr	r3, [pc, #560]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011d84:	781b      	ldrb	r3, [r3, #0]
 8011d86:	f043 0320 	orr.w	r3, r3, #32
 8011d8a:	b2da      	uxtb	r2, r3
 8011d8c:	4b89      	ldr	r3, [pc, #548]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011d8e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011d90:	4b88      	ldr	r3, [pc, #544]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011d92:	795b      	ldrb	r3, [r3, #5]
 8011d94:	f043 0310 	orr.w	r3, r3, #16
 8011d98:	b2da      	uxtb	r2, r3
 8011d9a:	4b86      	ldr	r3, [pc, #536]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011d9c:	715a      	strb	r2, [r3, #5]
        break;
 8011d9e:	e1ea      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case KO:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011da0:	4b84      	ldr	r3, [pc, #528]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011da2:	7bdb      	ldrb	r3, [r3, #15]
 8011da4:	f043 0320 	orr.w	r3, r3, #32
 8011da8:	b2da      	uxtb	r2, r3
 8011daa:	4b82      	ldr	r3, [pc, #520]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011dac:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011dae:	4b81      	ldr	r3, [pc, #516]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011db0:	7bdb      	ldrb	r3, [r3, #15]
 8011db2:	f043 0310 	orr.w	r3, r3, #16
 8011db6:	b2da      	uxtb	r2, r3
 8011db8:	4b7e      	ldr	r3, [pc, #504]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011dba:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011dbc:	4b7d      	ldr	r3, [pc, #500]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011dbe:	7bdb      	ldrb	r3, [r3, #15]
 8011dc0:	f043 0304 	orr.w	r3, r3, #4
 8011dc4:	b2da      	uxtb	r2, r3
 8011dc6:	4b7b      	ldr	r3, [pc, #492]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011dc8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011dca:	4b7a      	ldr	r3, [pc, #488]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	f043 0320 	orr.w	r3, r3, #32
 8011dd2:	b2da      	uxtb	r2, r3
 8011dd4:	4b77      	ldr	r3, [pc, #476]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011dd6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011dd8:	4b76      	ldr	r3, [pc, #472]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011dda:	795b      	ldrb	r3, [r3, #5]
 8011ddc:	f043 0310 	orr.w	r3, r3, #16
 8011de0:	b2da      	uxtb	r2, r3
 8011de2:	4b74      	ldr	r3, [pc, #464]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011de4:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011de6:	4b73      	ldr	r3, [pc, #460]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011de8:	7cdb      	ldrb	r3, [r3, #19]
 8011dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dee:	b2da      	uxtb	r2, r3
 8011df0:	4b70      	ldr	r3, [pc, #448]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011df2:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011df4:	4b6f      	ldr	r3, [pc, #444]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	f043 0301 	orr.w	r3, r3, #1
 8011dfc:	b2da      	uxtb	r2, r3
 8011dfe:	4b6d      	ldr	r3, [pc, #436]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e00:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011e02:	4b6c      	ldr	r3, [pc, #432]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	f043 0302 	orr.w	r3, r3, #2
 8011e0a:	b2da      	uxtb	r2, r3
 8011e0c:	4b69      	ldr	r3, [pc, #420]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e0e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011e10:	4b68      	ldr	r3, [pc, #416]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e12:	791b      	ldrb	r3, [r3, #4]
 8011e14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e18:	b2da      	uxtb	r2, r3
 8011e1a:	4b66      	ldr	r3, [pc, #408]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e1c:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011e1e:	4b65      	ldr	r3, [pc, #404]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e20:	795b      	ldrb	r3, [r3, #5]
 8011e22:	f043 0302 	orr.w	r3, r3, #2
 8011e26:	b2da      	uxtb	r2, r3
 8011e28:	4b62      	ldr	r3, [pc, #392]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e2a:	715a      	strb	r2, [r3, #5]
        break;
 8011e2c:	e1a3      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case PASS1:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011e2e:	4b61      	ldr	r3, [pc, #388]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e30:	7b1b      	ldrb	r3, [r3, #12]
 8011e32:	f043 0301 	orr.w	r3, r3, #1
 8011e36:	b2da      	uxtb	r2, r3
 8011e38:	4b5e      	ldr	r3, [pc, #376]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e3a:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011e3c:	4b5d      	ldr	r3, [pc, #372]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e3e:	7b1b      	ldrb	r3, [r3, #12]
 8011e40:	f043 0302 	orr.w	r3, r3, #2
 8011e44:	b2da      	uxtb	r2, r3
 8011e46:	4b5b      	ldr	r3, [pc, #364]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e48:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011e4a:	4b5a      	ldr	r3, [pc, #360]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e4c:	7c5b      	ldrb	r3, [r3, #17]
 8011e4e:	f043 0301 	orr.w	r3, r3, #1
 8011e52:	b2da      	uxtb	r2, r3
 8011e54:	4b57      	ldr	r3, [pc, #348]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e56:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011e58:	4b56      	ldr	r3, [pc, #344]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e5a:	7c5b      	ldrb	r3, [r3, #17]
 8011e5c:	f043 0302 	orr.w	r3, r3, #2
 8011e60:	b2da      	uxtb	r2, r3
 8011e62:	4b54      	ldr	r3, [pc, #336]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e64:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 8011e66:	4b53      	ldr	r3, [pc, #332]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e68:	789b      	ldrb	r3, [r3, #2]
 8011e6a:	f043 0302 	orr.w	r3, r3, #2
 8011e6e:	b2da      	uxtb	r2, r3
 8011e70:	4b50      	ldr	r3, [pc, #320]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e72:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011e74:	4b4f      	ldr	r3, [pc, #316]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e76:	789b      	ldrb	r3, [r3, #2]
 8011e78:	f043 0301 	orr.w	r3, r3, #1
 8011e7c:	b2da      	uxtb	r2, r3
 8011e7e:	4b4d      	ldr	r3, [pc, #308]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e80:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011e82:	4b4c      	ldr	r3, [pc, #304]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e84:	79db      	ldrb	r3, [r3, #7]
 8011e86:	f043 0302 	orr.w	r3, r3, #2
 8011e8a:	b2da      	uxtb	r2, r3
 8011e8c:	4b49      	ldr	r3, [pc, #292]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e8e:	71da      	strb	r2, [r3, #7]
        break;
 8011e90:	e171      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case PASS2:
            g_lcd_map[REG_11] |= (1 << BIT_6);
 8011e92:	4b48      	ldr	r3, [pc, #288]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e94:	7adb      	ldrb	r3, [r3, #11]
 8011e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e9a:	b2da      	uxtb	r2, r3
 8011e9c:	4b45      	ldr	r3, [pc, #276]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011e9e:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_7);
 8011ea0:	4b44      	ldr	r3, [pc, #272]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011ea2:	7adb      	ldrb	r3, [r3, #11]
 8011ea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ea8:	b2da      	uxtb	r2, r3
 8011eaa:	4b42      	ldr	r3, [pc, #264]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011eac:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_6);
 8011eae:	4b41      	ldr	r3, [pc, #260]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011eb0:	7c1b      	ldrb	r3, [r3, #16]
 8011eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eb6:	b2da      	uxtb	r2, r3
 8011eb8:	4b3e      	ldr	r3, [pc, #248]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011eba:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_7);
 8011ebc:	4b3d      	ldr	r3, [pc, #244]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011ebe:	7c1b      	ldrb	r3, [r3, #16]
 8011ec0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ec4:	b2da      	uxtb	r2, r3
 8011ec6:	4b3b      	ldr	r3, [pc, #236]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011ec8:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_7);
 8011eca:	4b3a      	ldr	r3, [pc, #232]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011ecc:	785b      	ldrb	r3, [r3, #1]
 8011ece:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ed2:	b2da      	uxtb	r2, r3
 8011ed4:	4b37      	ldr	r3, [pc, #220]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011ed6:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_6);
 8011ed8:	4b36      	ldr	r3, [pc, #216]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011eda:	785b      	ldrb	r3, [r3, #1]
 8011edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ee0:	b2da      	uxtb	r2, r3
 8011ee2:	4b34      	ldr	r3, [pc, #208]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011ee4:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_7);
 8011ee6:	4b33      	ldr	r3, [pc, #204]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011ee8:	799b      	ldrb	r3, [r3, #6]
 8011eea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011eee:	b2da      	uxtb	r2, r3
 8011ef0:	4b30      	ldr	r3, [pc, #192]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011ef2:	719a      	strb	r2, [r3, #6]
        break;
 8011ef4:	e13f      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case PASS3:
            g_lcd_map[REG_11] |= (1 << BIT_4);
 8011ef6:	4b2f      	ldr	r3, [pc, #188]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011ef8:	7adb      	ldrb	r3, [r3, #11]
 8011efa:	f043 0310 	orr.w	r3, r3, #16
 8011efe:	b2da      	uxtb	r2, r3
 8011f00:	4b2c      	ldr	r3, [pc, #176]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f02:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_5);
 8011f04:	4b2b      	ldr	r3, [pc, #172]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f06:	7adb      	ldrb	r3, [r3, #11]
 8011f08:	f043 0320 	orr.w	r3, r3, #32
 8011f0c:	b2da      	uxtb	r2, r3
 8011f0e:	4b29      	ldr	r3, [pc, #164]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f10:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_4);
 8011f12:	4b28      	ldr	r3, [pc, #160]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f14:	7c1b      	ldrb	r3, [r3, #16]
 8011f16:	f043 0310 	orr.w	r3, r3, #16
 8011f1a:	b2da      	uxtb	r2, r3
 8011f1c:	4b25      	ldr	r3, [pc, #148]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f1e:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_5);
 8011f20:	4b24      	ldr	r3, [pc, #144]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f22:	7c1b      	ldrb	r3, [r3, #16]
 8011f24:	f043 0320 	orr.w	r3, r3, #32
 8011f28:	b2da      	uxtb	r2, r3
 8011f2a:	4b22      	ldr	r3, [pc, #136]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f2c:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_5);
 8011f2e:	4b21      	ldr	r3, [pc, #132]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f30:	785b      	ldrb	r3, [r3, #1]
 8011f32:	f043 0320 	orr.w	r3, r3, #32
 8011f36:	b2da      	uxtb	r2, r3
 8011f38:	4b1e      	ldr	r3, [pc, #120]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f3a:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_4);
 8011f3c:	4b1d      	ldr	r3, [pc, #116]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f3e:	785b      	ldrb	r3, [r3, #1]
 8011f40:	f043 0310 	orr.w	r3, r3, #16
 8011f44:	b2da      	uxtb	r2, r3
 8011f46:	4b1b      	ldr	r3, [pc, #108]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f48:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_5);
 8011f4a:	4b1a      	ldr	r3, [pc, #104]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f4c:	799b      	ldrb	r3, [r3, #6]
 8011f4e:	f043 0320 	orr.w	r3, r3, #32
 8011f52:	b2da      	uxtb	r2, r3
 8011f54:	4b17      	ldr	r3, [pc, #92]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f56:	719a      	strb	r2, [r3, #6]
        break;
 8011f58:	e10d      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case F:
            g_lcd_map[REG_12] |= (1 << BIT_2);
 8011f5a:	4b16      	ldr	r3, [pc, #88]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f5c:	7b1b      	ldrb	r3, [r3, #12]
 8011f5e:	f043 0304 	orr.w	r3, r3, #4
 8011f62:	b2da      	uxtb	r2, r3
 8011f64:	4b13      	ldr	r3, [pc, #76]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f66:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_3);
 8011f68:	4b12      	ldr	r3, [pc, #72]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f6a:	7b1b      	ldrb	r3, [r3, #12]
 8011f6c:	f043 0308 	orr.w	r3, r3, #8
 8011f70:	b2da      	uxtb	r2, r3
 8011f72:	4b10      	ldr	r3, [pc, #64]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f74:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_3);
 8011f76:	4b0f      	ldr	r3, [pc, #60]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f78:	7c5b      	ldrb	r3, [r3, #17]
 8011f7a:	f043 0308 	orr.w	r3, r3, #8
 8011f7e:	b2da      	uxtb	r2, r3
 8011f80:	4b0c      	ldr	r3, [pc, #48]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f82:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_3);
 8011f84:	4b0b      	ldr	r3, [pc, #44]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f86:	789b      	ldrb	r3, [r3, #2]
 8011f88:	f043 0308 	orr.w	r3, r3, #8
 8011f8c:	b2da      	uxtb	r2, r3
 8011f8e:	4b09      	ldr	r3, [pc, #36]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f90:	709a      	strb	r2, [r3, #2]
        break;
 8011f92:	e0f0      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case LIN_1:
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011f94:	4b07      	ldr	r3, [pc, #28]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011f96:	7c5b      	ldrb	r3, [r3, #17]
 8011f98:	f043 0301 	orr.w	r3, r3, #1
 8011f9c:	b2da      	uxtb	r2, r3
 8011f9e:	4b05      	ldr	r3, [pc, #20]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011fa0:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011fa2:	4b04      	ldr	r3, [pc, #16]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011fa4:	789b      	ldrb	r3, [r3, #2]
 8011fa6:	f043 0301 	orr.w	r3, r3, #1
 8011faa:	b2da      	uxtb	r2, r3
 8011fac:	4b01      	ldr	r3, [pc, #4]	; (8011fb4 <lcd_set_symbol+0x524>)
 8011fae:	709a      	strb	r2, [r3, #2]
        break;
 8011fb0:	e0e1      	b.n	8012176 <lcd_set_symbol+0x6e6>
 8011fb2:	bf00      	nop
 8011fb4:	20001df8 	.word	0x20001df8
        case LIN_2:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011fb8:	4b73      	ldr	r3, [pc, #460]	; (8012188 <lcd_set_symbol+0x6f8>)
 8011fba:	7b1b      	ldrb	r3, [r3, #12]
 8011fbc:	f043 0301 	orr.w	r3, r3, #1
 8011fc0:	b2da      	uxtb	r2, r3
 8011fc2:	4b71      	ldr	r3, [pc, #452]	; (8012188 <lcd_set_symbol+0x6f8>)
 8011fc4:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011fc6:	4b70      	ldr	r3, [pc, #448]	; (8012188 <lcd_set_symbol+0x6f8>)
 8011fc8:	7c5b      	ldrb	r3, [r3, #17]
 8011fca:	f043 0301 	orr.w	r3, r3, #1
 8011fce:	b2da      	uxtb	r2, r3
 8011fd0:	4b6d      	ldr	r3, [pc, #436]	; (8012188 <lcd_set_symbol+0x6f8>)
 8011fd2:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011fd4:	4b6c      	ldr	r3, [pc, #432]	; (8012188 <lcd_set_symbol+0x6f8>)
 8011fd6:	7c5b      	ldrb	r3, [r3, #17]
 8011fd8:	f043 0302 	orr.w	r3, r3, #2
 8011fdc:	b2da      	uxtb	r2, r3
 8011fde:	4b6a      	ldr	r3, [pc, #424]	; (8012188 <lcd_set_symbol+0x6f8>)
 8011fe0:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 8011fe2:	4b69      	ldr	r3, [pc, #420]	; (8012188 <lcd_set_symbol+0x6f8>)
 8011fe4:	789b      	ldrb	r3, [r3, #2]
 8011fe6:	f043 0302 	orr.w	r3, r3, #2
 8011fea:	b2da      	uxtb	r2, r3
 8011fec:	4b66      	ldr	r3, [pc, #408]	; (8012188 <lcd_set_symbol+0x6f8>)
 8011fee:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011ff0:	4b65      	ldr	r3, [pc, #404]	; (8012188 <lcd_set_symbol+0x6f8>)
 8011ff2:	79db      	ldrb	r3, [r3, #7]
 8011ff4:	f043 0302 	orr.w	r3, r3, #2
 8011ff8:	b2da      	uxtb	r2, r3
 8011ffa:	4b63      	ldr	r3, [pc, #396]	; (8012188 <lcd_set_symbol+0x6f8>)
 8011ffc:	71da      	strb	r2, [r3, #7]
        break;
 8011ffe:	e0ba      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case LIN_3:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8012000:	4b61      	ldr	r3, [pc, #388]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012002:	7b1b      	ldrb	r3, [r3, #12]
 8012004:	f043 0301 	orr.w	r3, r3, #1
 8012008:	b2da      	uxtb	r2, r3
 801200a:	4b5f      	ldr	r3, [pc, #380]	; (8012188 <lcd_set_symbol+0x6f8>)
 801200c:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 801200e:	4b5e      	ldr	r3, [pc, #376]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012010:	7c5b      	ldrb	r3, [r3, #17]
 8012012:	f043 0301 	orr.w	r3, r3, #1
 8012016:	b2da      	uxtb	r2, r3
 8012018:	4b5b      	ldr	r3, [pc, #364]	; (8012188 <lcd_set_symbol+0x6f8>)
 801201a:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 801201c:	4b5a      	ldr	r3, [pc, #360]	; (8012188 <lcd_set_symbol+0x6f8>)
 801201e:	7c5b      	ldrb	r3, [r3, #17]
 8012020:	f043 0302 	orr.w	r3, r3, #2
 8012024:	b2da      	uxtb	r2, r3
 8012026:	4b58      	ldr	r3, [pc, #352]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012028:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 801202a:	4b57      	ldr	r3, [pc, #348]	; (8012188 <lcd_set_symbol+0x6f8>)
 801202c:	789b      	ldrb	r3, [r3, #2]
 801202e:	f043 0301 	orr.w	r3, r3, #1
 8012032:	b2da      	uxtb	r2, r3
 8012034:	4b54      	ldr	r3, [pc, #336]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012036:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8012038:	4b53      	ldr	r3, [pc, #332]	; (8012188 <lcd_set_symbol+0x6f8>)
 801203a:	79db      	ldrb	r3, [r3, #7]
 801203c:	f043 0302 	orr.w	r3, r3, #2
 8012040:	b2da      	uxtb	r2, r3
 8012042:	4b51      	ldr	r3, [pc, #324]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012044:	71da      	strb	r2, [r3, #7]
        break;
 8012046:	e096      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case LIN_4:
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8012048:	4b4f      	ldr	r3, [pc, #316]	; (8012188 <lcd_set_symbol+0x6f8>)
 801204a:	7b1b      	ldrb	r3, [r3, #12]
 801204c:	f043 0302 	orr.w	r3, r3, #2
 8012050:	b2da      	uxtb	r2, r3
 8012052:	4b4d      	ldr	r3, [pc, #308]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012054:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8012056:	4b4c      	ldr	r3, [pc, #304]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012058:	7c5b      	ldrb	r3, [r3, #17]
 801205a:	f043 0301 	orr.w	r3, r3, #1
 801205e:	b2da      	uxtb	r2, r3
 8012060:	4b49      	ldr	r3, [pc, #292]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012062:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8012064:	4b48      	ldr	r3, [pc, #288]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012066:	7c5b      	ldrb	r3, [r3, #17]
 8012068:	f043 0302 	orr.w	r3, r3, #2
 801206c:	b2da      	uxtb	r2, r3
 801206e:	4b46      	ldr	r3, [pc, #280]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012070:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8012072:	4b45      	ldr	r3, [pc, #276]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012074:	789b      	ldrb	r3, [r3, #2]
 8012076:	f043 0301 	orr.w	r3, r3, #1
 801207a:	b2da      	uxtb	r2, r3
 801207c:	4b42      	ldr	r3, [pc, #264]	; (8012188 <lcd_set_symbol+0x6f8>)
 801207e:	709a      	strb	r2, [r3, #2]
        break;
 8012080:	e079      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case LIN_5:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8012082:	4b41      	ldr	r3, [pc, #260]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012084:	7b1b      	ldrb	r3, [r3, #12]
 8012086:	f043 0301 	orr.w	r3, r3, #1
 801208a:	b2da      	uxtb	r2, r3
 801208c:	4b3e      	ldr	r3, [pc, #248]	; (8012188 <lcd_set_symbol+0x6f8>)
 801208e:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8012090:	4b3d      	ldr	r3, [pc, #244]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012092:	7b1b      	ldrb	r3, [r3, #12]
 8012094:	f043 0302 	orr.w	r3, r3, #2
 8012098:	b2da      	uxtb	r2, r3
 801209a:	4b3b      	ldr	r3, [pc, #236]	; (8012188 <lcd_set_symbol+0x6f8>)
 801209c:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 801209e:	4b3a      	ldr	r3, [pc, #232]	; (8012188 <lcd_set_symbol+0x6f8>)
 80120a0:	7c5b      	ldrb	r3, [r3, #17]
 80120a2:	f043 0302 	orr.w	r3, r3, #2
 80120a6:	b2da      	uxtb	r2, r3
 80120a8:	4b37      	ldr	r3, [pc, #220]	; (8012188 <lcd_set_symbol+0x6f8>)
 80120aa:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 80120ac:	4b36      	ldr	r3, [pc, #216]	; (8012188 <lcd_set_symbol+0x6f8>)
 80120ae:	789b      	ldrb	r3, [r3, #2]
 80120b0:	f043 0301 	orr.w	r3, r3, #1
 80120b4:	b2da      	uxtb	r2, r3
 80120b6:	4b34      	ldr	r3, [pc, #208]	; (8012188 <lcd_set_symbol+0x6f8>)
 80120b8:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 80120ba:	4b33      	ldr	r3, [pc, #204]	; (8012188 <lcd_set_symbol+0x6f8>)
 80120bc:	79db      	ldrb	r3, [r3, #7]
 80120be:	f043 0302 	orr.w	r3, r3, #2
 80120c2:	b2da      	uxtb	r2, r3
 80120c4:	4b30      	ldr	r3, [pc, #192]	; (8012188 <lcd_set_symbol+0x6f8>)
 80120c6:	71da      	strb	r2, [r3, #7]
        break;
 80120c8:	e055      	b.n	8012176 <lcd_set_symbol+0x6e6>
        case HZ:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80120ca:	4b2f      	ldr	r3, [pc, #188]	; (8012188 <lcd_set_symbol+0x6f8>)
 80120cc:	7bdb      	ldrb	r3, [r3, #15]
 80120ce:	f043 0320 	orr.w	r3, r3, #32
 80120d2:	b2da      	uxtb	r2, r3
 80120d4:	4b2c      	ldr	r3, [pc, #176]	; (8012188 <lcd_set_symbol+0x6f8>)
 80120d6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 80120d8:	4b2b      	ldr	r3, [pc, #172]	; (8012188 <lcd_set_symbol+0x6f8>)
 80120da:	7bdb      	ldrb	r3, [r3, #15]
 80120dc:	f043 0308 	orr.w	r3, r3, #8
 80120e0:	b2da      	uxtb	r2, r3
 80120e2:	4b29      	ldr	r3, [pc, #164]	; (8012188 <lcd_set_symbol+0x6f8>)
 80120e4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 80120e6:	4b28      	ldr	r3, [pc, #160]	; (8012188 <lcd_set_symbol+0x6f8>)
 80120e8:	7bdb      	ldrb	r3, [r3, #15]
 80120ea:	f043 0304 	orr.w	r3, r3, #4
 80120ee:	b2da      	uxtb	r2, r3
 80120f0:	4b25      	ldr	r3, [pc, #148]	; (8012188 <lcd_set_symbol+0x6f8>)
 80120f2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 80120f4:	4b24      	ldr	r3, [pc, #144]	; (8012188 <lcd_set_symbol+0x6f8>)
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	f043 0310 	orr.w	r3, r3, #16
 80120fc:	b2da      	uxtb	r2, r3
 80120fe:	4b22      	ldr	r3, [pc, #136]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012100:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8012102:	4b21      	ldr	r3, [pc, #132]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012104:	781b      	ldrb	r3, [r3, #0]
 8012106:	f043 0320 	orr.w	r3, r3, #32
 801210a:	b2da      	uxtb	r2, r3
 801210c:	4b1e      	ldr	r3, [pc, #120]	; (8012188 <lcd_set_symbol+0x6f8>)
 801210e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8012110:	4b1d      	ldr	r3, [pc, #116]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	f043 0308 	orr.w	r3, r3, #8
 8012118:	b2da      	uxtb	r2, r3
 801211a:	4b1b      	ldr	r3, [pc, #108]	; (8012188 <lcd_set_symbol+0x6f8>)
 801211c:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 801211e:	4b1a      	ldr	r3, [pc, #104]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012120:	7b9b      	ldrb	r3, [r3, #14]
 8012122:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012126:	b2da      	uxtb	r2, r3
 8012128:	4b17      	ldr	r3, [pc, #92]	; (8012188 <lcd_set_symbol+0x6f8>)
 801212a:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_0);
 801212c:	4b16      	ldr	r3, [pc, #88]	; (8012188 <lcd_set_symbol+0x6f8>)
 801212e:	7bdb      	ldrb	r3, [r3, #15]
 8012130:	f043 0301 	orr.w	r3, r3, #1
 8012134:	b2da      	uxtb	r2, r3
 8012136:	4b14      	ldr	r3, [pc, #80]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012138:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 801213a:	4b13      	ldr	r3, [pc, #76]	; (8012188 <lcd_set_symbol+0x6f8>)
 801213c:	7cdb      	ldrb	r3, [r3, #19]
 801213e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012142:	b2da      	uxtb	r2, r3
 8012144:	4b10      	ldr	r3, [pc, #64]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012146:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8012148:	4b0f      	ldr	r3, [pc, #60]	; (8012188 <lcd_set_symbol+0x6f8>)
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	f043 0301 	orr.w	r3, r3, #1
 8012150:	b2da      	uxtb	r2, r3
 8012152:	4b0d      	ldr	r3, [pc, #52]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012154:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_6);
 8012156:	4b0c      	ldr	r3, [pc, #48]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012158:	791b      	ldrb	r3, [r3, #4]
 801215a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801215e:	b2da      	uxtb	r2, r3
 8012160:	4b09      	ldr	r3, [pc, #36]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012162:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8012164:	4b08      	ldr	r3, [pc, #32]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012166:	795b      	ldrb	r3, [r3, #5]
 8012168:	f043 0302 	orr.w	r3, r3, #2
 801216c:	b2da      	uxtb	r2, r3
 801216e:	4b06      	ldr	r3, [pc, #24]	; (8012188 <lcd_set_symbol+0x6f8>)
 8012170:	715a      	strb	r2, [r3, #5]
        break;
 8012172:	e000      	b.n	8012176 <lcd_set_symbol+0x6e6>
        default:
        break;
 8012174:	bf00      	nop
    }

    pcf8553_blink(blink_speed);
 8012176:	79bb      	ldrb	r3, [r7, #6]
 8012178:	4618      	mov	r0, r3
 801217a:	f000 fb87 	bl	801288c <pcf8553_blink>
}
 801217e:	bf00      	nop
 8012180:	3708      	adds	r7, #8
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}
 8012186:	bf00      	nop
 8012188:	20001df8 	.word	0x20001df8

0801218c <lcd_set_time_unit>:
 * pantalla LCD custom.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b082      	sub	sp, #8
 8012190:	af00      	add	r7, sp, #0
 8012192:	4603      	mov	r3, r0
 8012194:	460a      	mov	r2, r1
 8012196:	71fb      	strb	r3, [r7, #7]
 8012198:	4613      	mov	r3, r2
 801219a:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 801219c:	79fb      	ldrb	r3, [r7, #7]
 801219e:	2b03      	cmp	r3, #3
 80121a0:	d82a      	bhi.n	80121f8 <lcd_set_time_unit+0x6c>
 80121a2:	a201      	add	r2, pc, #4	; (adr r2, 80121a8 <lcd_set_time_unit+0x1c>)
 80121a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121a8:	080121b9 	.word	0x080121b9
 80121ac:	080121c9 	.word	0x080121c9
 80121b0:	080121d9 	.word	0x080121d9
 80121b4:	080121e9 	.word	0x080121e9
    {
        case H:
            g_lcd_map[REG_5] |= (1 << BIT_6);
 80121b8:	4b14      	ldr	r3, [pc, #80]	; (801220c <lcd_set_time_unit+0x80>)
 80121ba:	795b      	ldrb	r3, [r3, #5]
 80121bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121c0:	b2da      	uxtb	r2, r3
 80121c2:	4b12      	ldr	r3, [pc, #72]	; (801220c <lcd_set_time_unit+0x80>)
 80121c4:	715a      	strb	r2, [r3, #5]
        break;
 80121c6:	e018      	b.n	80121fa <lcd_set_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] |= (1 << BIT_5);
 80121c8:	4b10      	ldr	r3, [pc, #64]	; (801220c <lcd_set_time_unit+0x80>)
 80121ca:	7a5b      	ldrb	r3, [r3, #9]
 80121cc:	f043 0320 	orr.w	r3, r3, #32
 80121d0:	b2da      	uxtb	r2, r3
 80121d2:	4b0e      	ldr	r3, [pc, #56]	; (801220c <lcd_set_time_unit+0x80>)
 80121d4:	725a      	strb	r2, [r3, #9]
        break;
 80121d6:	e010      	b.n	80121fa <lcd_set_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] |= (1 << BIT_5);
 80121d8:	4b0c      	ldr	r3, [pc, #48]	; (801220c <lcd_set_time_unit+0x80>)
 80121da:	7a9b      	ldrb	r3, [r3, #10]
 80121dc:	f043 0320 	orr.w	r3, r3, #32
 80121e0:	b2da      	uxtb	r2, r3
 80121e2:	4b0a      	ldr	r3, [pc, #40]	; (801220c <lcd_set_time_unit+0x80>)
 80121e4:	729a      	strb	r2, [r3, #10]
        break;
 80121e6:	e008      	b.n	80121fa <lcd_set_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] |= (1 << BIT_7);
 80121e8:	4b08      	ldr	r3, [pc, #32]	; (801220c <lcd_set_time_unit+0x80>)
 80121ea:	7a5b      	ldrb	r3, [r3, #9]
 80121ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80121f0:	b2da      	uxtb	r2, r3
 80121f2:	4b06      	ldr	r3, [pc, #24]	; (801220c <lcd_set_time_unit+0x80>)
 80121f4:	725a      	strb	r2, [r3, #9]
        break;
 80121f6:	e000      	b.n	80121fa <lcd_set_time_unit+0x6e>
        default:
        break;
 80121f8:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 80121fa:	79bb      	ldrb	r3, [r7, #6]
 80121fc:	4618      	mov	r0, r3
 80121fe:	f000 fb45 	bl	801288c <pcf8553_blink>
}
 8012202:	bf00      	nop
 8012204:	3708      	adds	r7, #8
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
 801220a:	bf00      	nop
 801220c:	20001df8 	.word	0x20001df8

08012210 <lcd_set_vol_unit>:
 * @brief Función que imprime la unidad de volumen a utilizar.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b082      	sub	sp, #8
 8012214:	af00      	add	r7, sp, #0
 8012216:	4603      	mov	r3, r0
 8012218:	460a      	mov	r2, r1
 801221a:	71fb      	strb	r3, [r7, #7]
 801221c:	4613      	mov	r3, r2
 801221e:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8012220:	79fb      	ldrb	r3, [r7, #7]
 8012222:	2b07      	cmp	r3, #7
 8012224:	f200 822c 	bhi.w	8012680 <lcd_set_vol_unit+0x470>
 8012228:	a201      	add	r2, pc, #4	; (adr r2, 8012230 <lcd_set_vol_unit+0x20>)
 801222a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801222e:	bf00      	nop
 8012230:	08012251 	.word	0x08012251
 8012234:	08012343 	.word	0x08012343
 8012238:	080123ed 	.word	0x080123ed
 801223c:	080122a7 	.word	0x080122a7
 8012240:	08012547 	.word	0x08012547
 8012244:	08012481 	.word	0x08012481
 8012248:	080125c7 	.word	0x080125c7
 801224c:	08012647 	.word	0x08012647
    {
        case LT:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8012250:	4b8a      	ldr	r3, [pc, #552]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012252:	7bdb      	ldrb	r3, [r3, #15]
 8012254:	f043 0320 	orr.w	r3, r3, #32
 8012258:	b2da      	uxtb	r2, r3
 801225a:	4b88      	ldr	r3, [pc, #544]	; (801247c <lcd_set_vol_unit+0x26c>)
 801225c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 801225e:	4b87      	ldr	r3, [pc, #540]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012260:	781b      	ldrb	r3, [r3, #0]
 8012262:	f043 0320 	orr.w	r3, r3, #32
 8012266:	b2da      	uxtb	r2, r3
 8012268:	4b84      	ldr	r3, [pc, #528]	; (801247c <lcd_set_vol_unit+0x26c>)
 801226a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 801226c:	4b83      	ldr	r3, [pc, #524]	; (801247c <lcd_set_vol_unit+0x26c>)
 801226e:	795b      	ldrb	r3, [r3, #5]
 8012270:	f043 0320 	orr.w	r3, r3, #32
 8012274:	b2da      	uxtb	r2, r3
 8012276:	4b81      	ldr	r3, [pc, #516]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012278:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 801227a:	4b80      	ldr	r3, [pc, #512]	; (801247c <lcd_set_vol_unit+0x26c>)
 801227c:	7b9b      	ldrb	r3, [r3, #14]
 801227e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012282:	b2da      	uxtb	r2, r3
 8012284:	4b7d      	ldr	r3, [pc, #500]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012286:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] |= (1 << BIT_0);
 8012288:	4b7c      	ldr	r3, [pc, #496]	; (801247c <lcd_set_vol_unit+0x26c>)
 801228a:	7a9b      	ldrb	r3, [r3, #10]
 801228c:	f043 0301 	orr.w	r3, r3, #1
 8012290:	b2da      	uxtb	r2, r3
 8012292:	4b7a      	ldr	r3, [pc, #488]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012294:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] |= (1 << BIT_6);
 8012296:	4b79      	ldr	r3, [pc, #484]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012298:	7a5b      	ldrb	r3, [r3, #9]
 801229a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801229e:	b2da      	uxtb	r2, r3
 80122a0:	4b76      	ldr	r3, [pc, #472]	; (801247c <lcd_set_vol_unit+0x26c>)
 80122a2:	725a      	strb	r2, [r3, #9]
        break;
 80122a4:	e1ed      	b.n	8012682 <lcd_set_vol_unit+0x472>
        case KG:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80122a6:	4b75      	ldr	r3, [pc, #468]	; (801247c <lcd_set_vol_unit+0x26c>)
 80122a8:	7bdb      	ldrb	r3, [r3, #15]
 80122aa:	f043 0320 	orr.w	r3, r3, #32
 80122ae:	b2da      	uxtb	r2, r3
 80122b0:	4b72      	ldr	r3, [pc, #456]	; (801247c <lcd_set_vol_unit+0x26c>)
 80122b2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 80122b4:	4b71      	ldr	r3, [pc, #452]	; (801247c <lcd_set_vol_unit+0x26c>)
 80122b6:	7bdb      	ldrb	r3, [r3, #15]
 80122b8:	f043 0310 	orr.w	r3, r3, #16
 80122bc:	b2da      	uxtb	r2, r3
 80122be:	4b6f      	ldr	r3, [pc, #444]	; (801247c <lcd_set_vol_unit+0x26c>)
 80122c0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 80122c2:	4b6e      	ldr	r3, [pc, #440]	; (801247c <lcd_set_vol_unit+0x26c>)
 80122c4:	7bdb      	ldrb	r3, [r3, #15]
 80122c6:	f043 0304 	orr.w	r3, r3, #4
 80122ca:	b2da      	uxtb	r2, r3
 80122cc:	4b6b      	ldr	r3, [pc, #428]	; (801247c <lcd_set_vol_unit+0x26c>)
 80122ce:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80122d0:	4b6a      	ldr	r3, [pc, #424]	; (801247c <lcd_set_vol_unit+0x26c>)
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	f043 0320 	orr.w	r3, r3, #32
 80122d8:	b2da      	uxtb	r2, r3
 80122da:	4b68      	ldr	r3, [pc, #416]	; (801247c <lcd_set_vol_unit+0x26c>)
 80122dc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 80122de:	4b67      	ldr	r3, [pc, #412]	; (801247c <lcd_set_vol_unit+0x26c>)
 80122e0:	795b      	ldrb	r3, [r3, #5]
 80122e2:	f043 0310 	orr.w	r3, r3, #16
 80122e6:	b2da      	uxtb	r2, r3
 80122e8:	4b64      	ldr	r3, [pc, #400]	; (801247c <lcd_set_vol_unit+0x26c>)
 80122ea:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 80122ec:	4b63      	ldr	r3, [pc, #396]	; (801247c <lcd_set_vol_unit+0x26c>)
 80122ee:	7b9b      	ldrb	r3, [r3, #14]
 80122f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80122f4:	b2da      	uxtb	r2, r3
 80122f6:	4b61      	ldr	r3, [pc, #388]	; (801247c <lcd_set_vol_unit+0x26c>)
 80122f8:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 80122fa:	4b60      	ldr	r3, [pc, #384]	; (801247c <lcd_set_vol_unit+0x26c>)
 80122fc:	7bdb      	ldrb	r3, [r3, #15]
 80122fe:	f043 0302 	orr.w	r3, r3, #2
 8012302:	b2da      	uxtb	r2, r3
 8012304:	4b5d      	ldr	r3, [pc, #372]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012306:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8012308:	4b5c      	ldr	r3, [pc, #368]	; (801247c <lcd_set_vol_unit+0x26c>)
 801230a:	781b      	ldrb	r3, [r3, #0]
 801230c:	f043 0301 	orr.w	r3, r3, #1
 8012310:	b2da      	uxtb	r2, r3
 8012312:	4b5a      	ldr	r3, [pc, #360]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012314:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012316:	4b59      	ldr	r3, [pc, #356]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	f043 0302 	orr.w	r3, r3, #2
 801231e:	b2da      	uxtb	r2, r3
 8012320:	4b56      	ldr	r3, [pc, #344]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012322:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8012324:	4b55      	ldr	r3, [pc, #340]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012326:	791b      	ldrb	r3, [r3, #4]
 8012328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801232c:	b2da      	uxtb	r2, r3
 801232e:	4b53      	ldr	r3, [pc, #332]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012330:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8012332:	4b52      	ldr	r3, [pc, #328]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012334:	795b      	ldrb	r3, [r3, #5]
 8012336:	f043 0302 	orr.w	r3, r3, #2
 801233a:	b2da      	uxtb	r2, r3
 801233c:	4b4f      	ldr	r3, [pc, #316]	; (801247c <lcd_set_vol_unit+0x26c>)
 801233e:	715a      	strb	r2, [r3, #5]
        break;
 8012340:	e19f      	b.n	8012682 <lcd_set_vol_unit+0x472>
        case M3:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8012342:	4b4e      	ldr	r3, [pc, #312]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012344:	7bdb      	ldrb	r3, [r3, #15]
 8012346:	f043 0320 	orr.w	r3, r3, #32
 801234a:	b2da      	uxtb	r2, r3
 801234c:	4b4b      	ldr	r3, [pc, #300]	; (801247c <lcd_set_vol_unit+0x26c>)
 801234e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 8012350:	4b4a      	ldr	r3, [pc, #296]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012352:	7a9b      	ldrb	r3, [r3, #10]
 8012354:	f043 0304 	orr.w	r3, r3, #4
 8012358:	b2da      	uxtb	r2, r3
 801235a:	4b48      	ldr	r3, [pc, #288]	; (801247c <lcd_set_vol_unit+0x26c>)
 801235c:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 801235e:	4b47      	ldr	r3, [pc, #284]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012360:	7bdb      	ldrb	r3, [r3, #15]
 8012362:	f043 0310 	orr.w	r3, r3, #16
 8012366:	b2da      	uxtb	r2, r3
 8012368:	4b44      	ldr	r3, [pc, #272]	; (801247c <lcd_set_vol_unit+0x26c>)
 801236a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 801236c:	4b43      	ldr	r3, [pc, #268]	; (801247c <lcd_set_vol_unit+0x26c>)
 801236e:	7bdb      	ldrb	r3, [r3, #15]
 8012370:	f043 0308 	orr.w	r3, r3, #8
 8012374:	b2da      	uxtb	r2, r3
 8012376:	4b41      	ldr	r3, [pc, #260]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012378:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 801237a:	4b40      	ldr	r3, [pc, #256]	; (801247c <lcd_set_vol_unit+0x26c>)
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	f043 0320 	orr.w	r3, r3, #32
 8012382:	b2da      	uxtb	r2, r3
 8012384:	4b3d      	ldr	r3, [pc, #244]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012386:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8012388:	4b3c      	ldr	r3, [pc, #240]	; (801247c <lcd_set_vol_unit+0x26c>)
 801238a:	781b      	ldrb	r3, [r3, #0]
 801238c:	f043 0308 	orr.w	r3, r3, #8
 8012390:	b2da      	uxtb	r2, r3
 8012392:	4b3a      	ldr	r3, [pc, #232]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012394:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012396:	4b39      	ldr	r3, [pc, #228]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012398:	7b9b      	ldrb	r3, [r3, #14]
 801239a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801239e:	b2da      	uxtb	r2, r3
 80123a0:	4b36      	ldr	r3, [pc, #216]	; (801247c <lcd_set_vol_unit+0x26c>)
 80123a2:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 80123a4:	4b35      	ldr	r3, [pc, #212]	; (801247c <lcd_set_vol_unit+0x26c>)
 80123a6:	7cdb      	ldrb	r3, [r3, #19]
 80123a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80123ac:	b2da      	uxtb	r2, r3
 80123ae:	4b33      	ldr	r3, [pc, #204]	; (801247c <lcd_set_vol_unit+0x26c>)
 80123b0:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 80123b2:	4b32      	ldr	r3, [pc, #200]	; (801247c <lcd_set_vol_unit+0x26c>)
 80123b4:	7cdb      	ldrb	r3, [r3, #19]
 80123b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123ba:	b2da      	uxtb	r2, r3
 80123bc:	4b2f      	ldr	r3, [pc, #188]	; (801247c <lcd_set_vol_unit+0x26c>)
 80123be:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 80123c0:	4b2e      	ldr	r3, [pc, #184]	; (801247c <lcd_set_vol_unit+0x26c>)
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	f043 0301 	orr.w	r3, r3, #1
 80123c8:	b2da      	uxtb	r2, r3
 80123ca:	4b2c      	ldr	r3, [pc, #176]	; (801247c <lcd_set_vol_unit+0x26c>)
 80123cc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 80123ce:	4b2b      	ldr	r3, [pc, #172]	; (801247c <lcd_set_vol_unit+0x26c>)
 80123d0:	791b      	ldrb	r3, [r3, #4]
 80123d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80123d6:	b2da      	uxtb	r2, r3
 80123d8:	4b28      	ldr	r3, [pc, #160]	; (801247c <lcd_set_vol_unit+0x26c>)
 80123da:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 80123dc:	4b27      	ldr	r3, [pc, #156]	; (801247c <lcd_set_vol_unit+0x26c>)
 80123de:	795b      	ldrb	r3, [r3, #5]
 80123e0:	f043 0302 	orr.w	r3, r3, #2
 80123e4:	b2da      	uxtb	r2, r3
 80123e6:	4b25      	ldr	r3, [pc, #148]	; (801247c <lcd_set_vol_unit+0x26c>)
 80123e8:	715a      	strb	r2, [r3, #5]
        break;
 80123ea:	e14a      	b.n	8012682 <lcd_set_vol_unit+0x472>
        case MC:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80123ec:	4b23      	ldr	r3, [pc, #140]	; (801247c <lcd_set_vol_unit+0x26c>)
 80123ee:	7bdb      	ldrb	r3, [r3, #15]
 80123f0:	f043 0320 	orr.w	r3, r3, #32
 80123f4:	b2da      	uxtb	r2, r3
 80123f6:	4b21      	ldr	r3, [pc, #132]	; (801247c <lcd_set_vol_unit+0x26c>)
 80123f8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 80123fa:	4b20      	ldr	r3, [pc, #128]	; (801247c <lcd_set_vol_unit+0x26c>)
 80123fc:	7a9b      	ldrb	r3, [r3, #10]
 80123fe:	f043 0304 	orr.w	r3, r3, #4
 8012402:	b2da      	uxtb	r2, r3
 8012404:	4b1d      	ldr	r3, [pc, #116]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012406:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8012408:	4b1c      	ldr	r3, [pc, #112]	; (801247c <lcd_set_vol_unit+0x26c>)
 801240a:	7bdb      	ldrb	r3, [r3, #15]
 801240c:	f043 0310 	orr.w	r3, r3, #16
 8012410:	b2da      	uxtb	r2, r3
 8012412:	4b1a      	ldr	r3, [pc, #104]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012414:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8012416:	4b19      	ldr	r3, [pc, #100]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012418:	7bdb      	ldrb	r3, [r3, #15]
 801241a:	f043 0308 	orr.w	r3, r3, #8
 801241e:	b2da      	uxtb	r2, r3
 8012420:	4b16      	ldr	r3, [pc, #88]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012422:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8012424:	4b15      	ldr	r3, [pc, #84]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012426:	781b      	ldrb	r3, [r3, #0]
 8012428:	f043 0320 	orr.w	r3, r3, #32
 801242c:	b2da      	uxtb	r2, r3
 801242e:	4b13      	ldr	r3, [pc, #76]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012430:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8012432:	4b12      	ldr	r3, [pc, #72]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	f043 0308 	orr.w	r3, r3, #8
 801243a:	b2da      	uxtb	r2, r3
 801243c:	4b0f      	ldr	r3, [pc, #60]	; (801247c <lcd_set_vol_unit+0x26c>)
 801243e:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012440:	4b0e      	ldr	r3, [pc, #56]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012442:	7b9b      	ldrb	r3, [r3, #14]
 8012444:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012448:	b2da      	uxtb	r2, r3
 801244a:	4b0c      	ldr	r3, [pc, #48]	; (801247c <lcd_set_vol_unit+0x26c>)
 801244c:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 801244e:	4b0b      	ldr	r3, [pc, #44]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012450:	7bdb      	ldrb	r3, [r3, #15]
 8012452:	f043 0302 	orr.w	r3, r3, #2
 8012456:	b2da      	uxtb	r2, r3
 8012458:	4b08      	ldr	r3, [pc, #32]	; (801247c <lcd_set_vol_unit+0x26c>)
 801245a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 801245c:	4b07      	ldr	r3, [pc, #28]	; (801247c <lcd_set_vol_unit+0x26c>)
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	f043 0302 	orr.w	r3, r3, #2
 8012464:	b2da      	uxtb	r2, r3
 8012466:	4b05      	ldr	r3, [pc, #20]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012468:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 801246a:	4b04      	ldr	r3, [pc, #16]	; (801247c <lcd_set_vol_unit+0x26c>)
 801246c:	795b      	ldrb	r3, [r3, #5]
 801246e:	f043 0302 	orr.w	r3, r3, #2
 8012472:	b2da      	uxtb	r2, r3
 8012474:	4b01      	ldr	r3, [pc, #4]	; (801247c <lcd_set_vol_unit+0x26c>)
 8012476:	715a      	strb	r2, [r3, #5]
        break;
 8012478:	e103      	b.n	8012682 <lcd_set_vol_unit+0x472>
 801247a:	bf00      	nop
 801247c:	20001df8 	.word	0x20001df8
        case BR:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 8012480:	4b84      	ldr	r3, [pc, #528]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012482:	7a9b      	ldrb	r3, [r3, #10]
 8012484:	f043 0308 	orr.w	r3, r3, #8
 8012488:	b2da      	uxtb	r2, r3
 801248a:	4b82      	ldr	r3, [pc, #520]	; (8012694 <lcd_set_vol_unit+0x484>)
 801248c:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] |= (1 << BIT_4);
 801248e:	4b81      	ldr	r3, [pc, #516]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012490:	7a9b      	ldrb	r3, [r3, #10]
 8012492:	f043 0310 	orr.w	r3, r3, #16
 8012496:	b2da      	uxtb	r2, r3
 8012498:	4b7e      	ldr	r3, [pc, #504]	; (8012694 <lcd_set_vol_unit+0x484>)
 801249a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 801249c:	4b7d      	ldr	r3, [pc, #500]	; (8012694 <lcd_set_vol_unit+0x484>)
 801249e:	7bdb      	ldrb	r3, [r3, #15]
 80124a0:	f043 0308 	orr.w	r3, r3, #8
 80124a4:	b2da      	uxtb	r2, r3
 80124a6:	4b7b      	ldr	r3, [pc, #492]	; (8012694 <lcd_set_vol_unit+0x484>)
 80124a8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 80124aa:	4b7a      	ldr	r3, [pc, #488]	; (8012694 <lcd_set_vol_unit+0x484>)
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	f043 0310 	orr.w	r3, r3, #16
 80124b2:	b2da      	uxtb	r2, r3
 80124b4:	4b77      	ldr	r3, [pc, #476]	; (8012694 <lcd_set_vol_unit+0x484>)
 80124b6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_2);
 80124b8:	4b76      	ldr	r3, [pc, #472]	; (8012694 <lcd_set_vol_unit+0x484>)
 80124ba:	795b      	ldrb	r3, [r3, #5]
 80124bc:	f043 0304 	orr.w	r3, r3, #4
 80124c0:	b2da      	uxtb	r2, r3
 80124c2:	4b74      	ldr	r3, [pc, #464]	; (8012694 <lcd_set_vol_unit+0x484>)
 80124c4:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 80124c6:	4b73      	ldr	r3, [pc, #460]	; (8012694 <lcd_set_vol_unit+0x484>)
 80124c8:	781b      	ldrb	r3, [r3, #0]
 80124ca:	f043 0308 	orr.w	r3, r3, #8
 80124ce:	b2da      	uxtb	r2, r3
 80124d0:	4b70      	ldr	r3, [pc, #448]	; (8012694 <lcd_set_vol_unit+0x484>)
 80124d2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 80124d4:	4b6f      	ldr	r3, [pc, #444]	; (8012694 <lcd_set_vol_unit+0x484>)
 80124d6:	795b      	ldrb	r3, [r3, #5]
 80124d8:	f043 0320 	orr.w	r3, r3, #32
 80124dc:	b2da      	uxtb	r2, r3
 80124de:	4b6d      	ldr	r3, [pc, #436]	; (8012694 <lcd_set_vol_unit+0x484>)
 80124e0:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 80124e2:	4b6c      	ldr	r3, [pc, #432]	; (8012694 <lcd_set_vol_unit+0x484>)
 80124e4:	7b9b      	ldrb	r3, [r3, #14]
 80124e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80124ea:	b2da      	uxtb	r2, r3
 80124ec:	4b69      	ldr	r3, [pc, #420]	; (8012694 <lcd_set_vol_unit+0x484>)
 80124ee:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 80124f0:	4b68      	ldr	r3, [pc, #416]	; (8012694 <lcd_set_vol_unit+0x484>)
 80124f2:	7bdb      	ldrb	r3, [r3, #15]
 80124f4:	f043 0302 	orr.w	r3, r3, #2
 80124f8:	b2da      	uxtb	r2, r3
 80124fa:	4b66      	ldr	r3, [pc, #408]	; (8012694 <lcd_set_vol_unit+0x484>)
 80124fc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 80124fe:	4b65      	ldr	r3, [pc, #404]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012500:	7cdb      	ldrb	r3, [r3, #19]
 8012502:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012506:	b2da      	uxtb	r2, r3
 8012508:	4b62      	ldr	r3, [pc, #392]	; (8012694 <lcd_set_vol_unit+0x484>)
 801250a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 801250c:	4b61      	ldr	r3, [pc, #388]	; (8012694 <lcd_set_vol_unit+0x484>)
 801250e:	7cdb      	ldrb	r3, [r3, #19]
 8012510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012514:	b2da      	uxtb	r2, r3
 8012516:	4b5f      	ldr	r3, [pc, #380]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012518:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 801251a:	4b5e      	ldr	r3, [pc, #376]	; (8012694 <lcd_set_vol_unit+0x484>)
 801251c:	781b      	ldrb	r3, [r3, #0]
 801251e:	f043 0301 	orr.w	r3, r3, #1
 8012522:	b2da      	uxtb	r2, r3
 8012524:	4b5b      	ldr	r3, [pc, #364]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012526:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012528:	4b5a      	ldr	r3, [pc, #360]	; (8012694 <lcd_set_vol_unit+0x484>)
 801252a:	781b      	ldrb	r3, [r3, #0]
 801252c:	f043 0302 	orr.w	r3, r3, #2
 8012530:	b2da      	uxtb	r2, r3
 8012532:	4b58      	ldr	r3, [pc, #352]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012534:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_0);
 8012536:	4b57      	ldr	r3, [pc, #348]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012538:	795b      	ldrb	r3, [r3, #5]
 801253a:	f043 0301 	orr.w	r3, r3, #1
 801253e:	b2da      	uxtb	r2, r3
 8012540:	4b54      	ldr	r3, [pc, #336]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012542:	715a      	strb	r2, [r3, #5]
        break;
 8012544:	e09d      	b.n	8012682 <lcd_set_vol_unit+0x472>
        case GL:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 8012546:	4b53      	ldr	r3, [pc, #332]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012548:	7a9b      	ldrb	r3, [r3, #10]
 801254a:	f043 0308 	orr.w	r3, r3, #8
 801254e:	b2da      	uxtb	r2, r3
 8012550:	4b50      	ldr	r3, [pc, #320]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012552:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8012554:	4b4f      	ldr	r3, [pc, #316]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012556:	7bdb      	ldrb	r3, [r3, #15]
 8012558:	f043 0320 	orr.w	r3, r3, #32
 801255c:	b2da      	uxtb	r2, r3
 801255e:	4b4d      	ldr	r3, [pc, #308]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012560:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8012562:	4b4c      	ldr	r3, [pc, #304]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012564:	781b      	ldrb	r3, [r3, #0]
 8012566:	f043 0310 	orr.w	r3, r3, #16
 801256a:	b2da      	uxtb	r2, r3
 801256c:	4b49      	ldr	r3, [pc, #292]	; (8012694 <lcd_set_vol_unit+0x484>)
 801256e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8012570:	4b48      	ldr	r3, [pc, #288]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012572:	781b      	ldrb	r3, [r3, #0]
 8012574:	f043 0320 	orr.w	r3, r3, #32
 8012578:	b2da      	uxtb	r2, r3
 801257a:	4b46      	ldr	r3, [pc, #280]	; (8012694 <lcd_set_vol_unit+0x484>)
 801257c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 801257e:	4b45      	ldr	r3, [pc, #276]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012580:	781b      	ldrb	r3, [r3, #0]
 8012582:	f043 0308 	orr.w	r3, r3, #8
 8012586:	b2da      	uxtb	r2, r3
 8012588:	4b42      	ldr	r3, [pc, #264]	; (8012694 <lcd_set_vol_unit+0x484>)
 801258a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 801258c:	4b41      	ldr	r3, [pc, #260]	; (8012694 <lcd_set_vol_unit+0x484>)
 801258e:	795b      	ldrb	r3, [r3, #5]
 8012590:	f043 0320 	orr.w	r3, r3, #32
 8012594:	b2da      	uxtb	r2, r3
 8012596:	4b3f      	ldr	r3, [pc, #252]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012598:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] |= (1 << BIT_1);
 801259a:	4b3e      	ldr	r3, [pc, #248]	; (8012694 <lcd_set_vol_unit+0x484>)
 801259c:	7bdb      	ldrb	r3, [r3, #15]
 801259e:	f043 0302 	orr.w	r3, r3, #2
 80125a2:	b2da      	uxtb	r2, r3
 80125a4:	4b3b      	ldr	r3, [pc, #236]	; (8012694 <lcd_set_vol_unit+0x484>)
 80125a6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80125a8:	4b3a      	ldr	r3, [pc, #232]	; (8012694 <lcd_set_vol_unit+0x484>)
 80125aa:	781b      	ldrb	r3, [r3, #0]
 80125ac:	f043 0302 	orr.w	r3, r3, #2
 80125b0:	b2da      	uxtb	r2, r3
 80125b2:	4b38      	ldr	r3, [pc, #224]	; (8012694 <lcd_set_vol_unit+0x484>)
 80125b4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 80125b6:	4b37      	ldr	r3, [pc, #220]	; (8012694 <lcd_set_vol_unit+0x484>)
 80125b8:	795b      	ldrb	r3, [r3, #5]
 80125ba:	f043 0302 	orr.w	r3, r3, #2
 80125be:	b2da      	uxtb	r2, r3
 80125c0:	4b34      	ldr	r3, [pc, #208]	; (8012694 <lcd_set_vol_unit+0x484>)
 80125c2:	715a      	strb	r2, [r3, #5]
        break;
 80125c4:	e05d      	b.n	8012682 <lcd_set_vol_unit+0x472>
        case CELSIUS:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 80125c6:	4b33      	ldr	r3, [pc, #204]	; (8012694 <lcd_set_vol_unit+0x484>)
 80125c8:	7a9b      	ldrb	r3, [r3, #10]
 80125ca:	f043 0308 	orr.w	r3, r3, #8
 80125ce:	b2da      	uxtb	r2, r3
 80125d0:	4b30      	ldr	r3, [pc, #192]	; (8012694 <lcd_set_vol_unit+0x484>)
 80125d2:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80125d4:	4b2f      	ldr	r3, [pc, #188]	; (8012694 <lcd_set_vol_unit+0x484>)
 80125d6:	7bdb      	ldrb	r3, [r3, #15]
 80125d8:	f043 0320 	orr.w	r3, r3, #32
 80125dc:	b2da      	uxtb	r2, r3
 80125de:	4b2d      	ldr	r3, [pc, #180]	; (8012694 <lcd_set_vol_unit+0x484>)
 80125e0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 80125e2:	4b2c      	ldr	r3, [pc, #176]	; (8012694 <lcd_set_vol_unit+0x484>)
 80125e4:	7bdb      	ldrb	r3, [r3, #15]
 80125e6:	f043 0308 	orr.w	r3, r3, #8
 80125ea:	b2da      	uxtb	r2, r3
 80125ec:	4b29      	ldr	r3, [pc, #164]	; (8012694 <lcd_set_vol_unit+0x484>)
 80125ee:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 80125f0:	4b28      	ldr	r3, [pc, #160]	; (8012694 <lcd_set_vol_unit+0x484>)
 80125f2:	7bdb      	ldrb	r3, [r3, #15]
 80125f4:	f043 0304 	orr.w	r3, r3, #4
 80125f8:	b2da      	uxtb	r2, r3
 80125fa:	4b26      	ldr	r3, [pc, #152]	; (8012694 <lcd_set_vol_unit+0x484>)
 80125fc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 80125fe:	4b25      	ldr	r3, [pc, #148]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012600:	781b      	ldrb	r3, [r3, #0]
 8012602:	f043 0310 	orr.w	r3, r3, #16
 8012606:	b2da      	uxtb	r2, r3
 8012608:	4b22      	ldr	r3, [pc, #136]	; (8012694 <lcd_set_vol_unit+0x484>)
 801260a:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 801260c:	4b21      	ldr	r3, [pc, #132]	; (8012694 <lcd_set_vol_unit+0x484>)
 801260e:	7b9b      	ldrb	r3, [r3, #14]
 8012610:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012614:	b2da      	uxtb	r2, r3
 8012616:	4b1f      	ldr	r3, [pc, #124]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012618:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 801261a:	4b1e      	ldr	r3, [pc, #120]	; (8012694 <lcd_set_vol_unit+0x484>)
 801261c:	7bdb      	ldrb	r3, [r3, #15]
 801261e:	f043 0302 	orr.w	r3, r3, #2
 8012622:	b2da      	uxtb	r2, r3
 8012624:	4b1b      	ldr	r3, [pc, #108]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012626:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012628:	4b1a      	ldr	r3, [pc, #104]	; (8012694 <lcd_set_vol_unit+0x484>)
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	f043 0302 	orr.w	r3, r3, #2
 8012630:	b2da      	uxtb	r2, r3
 8012632:	4b18      	ldr	r3, [pc, #96]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012634:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8012636:	4b17      	ldr	r3, [pc, #92]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012638:	795b      	ldrb	r3, [r3, #5]
 801263a:	f043 0302 	orr.w	r3, r3, #2
 801263e:	b2da      	uxtb	r2, r3
 8012640:	4b14      	ldr	r3, [pc, #80]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012642:	715a      	strb	r2, [r3, #5]
        break;
 8012644:	e01d      	b.n	8012682 <lcd_set_vol_unit+0x472>
        case NOTHING:
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8012646:	4b13      	ldr	r3, [pc, #76]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012648:	7bdb      	ldrb	r3, [r3, #15]
 801264a:	f043 0304 	orr.w	r3, r3, #4
 801264e:	b2da      	uxtb	r2, r3
 8012650:	4b10      	ldr	r3, [pc, #64]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012652:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8012654:	4b0f      	ldr	r3, [pc, #60]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012656:	781b      	ldrb	r3, [r3, #0]
 8012658:	f043 0310 	orr.w	r3, r3, #16
 801265c:	b2da      	uxtb	r2, r3
 801265e:	4b0d      	ldr	r3, [pc, #52]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012660:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8012662:	4b0c      	ldr	r3, [pc, #48]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012664:	7cdb      	ldrb	r3, [r3, #19]
 8012666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801266a:	b2da      	uxtb	r2, r3
 801266c:	4b09      	ldr	r3, [pc, #36]	; (8012694 <lcd_set_vol_unit+0x484>)
 801266e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8012670:	4b08      	ldr	r3, [pc, #32]	; (8012694 <lcd_set_vol_unit+0x484>)
 8012672:	781b      	ldrb	r3, [r3, #0]
 8012674:	f043 0301 	orr.w	r3, r3, #1
 8012678:	b2da      	uxtb	r2, r3
 801267a:	4b06      	ldr	r3, [pc, #24]	; (8012694 <lcd_set_vol_unit+0x484>)
 801267c:	701a      	strb	r2, [r3, #0]
        break;
 801267e:	e000      	b.n	8012682 <lcd_set_vol_unit+0x472>
        default:
        break;
 8012680:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8012682:	79bb      	ldrb	r3, [r7, #6]
 8012684:	4618      	mov	r0, r3
 8012686:	f000 f901 	bl	801288c <pcf8553_blink>
}
 801268a:	bf00      	nop
 801268c:	3708      	adds	r7, #8
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	20001df8 	.word	0x20001df8

08012698 <lcd_write_line>:
 * la primera posicion de cada linea.
 * @param
 * @retval None
 */
void lcd_write_line(uint8_t seg, uint8_t data)
{
 8012698:	b480      	push	{r7}
 801269a:	b085      	sub	sp, #20
 801269c:	af00      	add	r7, sp, #0
 801269e:	4603      	mov	r3, r0
 80126a0:	460a      	mov	r2, r1
 80126a2:	71fb      	strb	r3, [r7, #7]
 80126a4:	4613      	mov	r3, r2
 80126a6:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = 0;
 80126a8:	2300      	movs	r3, #0
 80126aa:	73fb      	strb	r3, [r7, #15]
    uint8_t pos = 0;
 80126ac:	2300      	movs	r3, #0
 80126ae:	73bb      	strb	r3, [r7, #14]

    /*
     *
     *
     */
    switch (g_row)
 80126b0:	4b33      	ldr	r3, [pc, #204]	; (8012780 <lcd_write_line+0xe8>)
 80126b2:	781b      	ldrb	r3, [r3, #0]
 80126b4:	2b01      	cmp	r3, #1
 80126b6:	d002      	beq.n	80126be <lcd_write_line+0x26>
 80126b8:	2b02      	cmp	r3, #2
 80126ba:	d01b      	beq.n	80126f4 <lcd_write_line+0x5c>
            pos += g_col * 2;
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
            pos = pos % 8; // @suppress("Avoid magic numbers")
        break;
        default:
        break;
 80126bc:	e035      	b.n	801272a <lcd_write_line+0x92>
            pos = octal_1[seg].pos;
 80126be:	79fb      	ldrb	r3, [r7, #7]
 80126c0:	4a30      	ldr	r2, [pc, #192]	; (8012784 <lcd_write_line+0xec>)
 80126c2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80126c6:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 80126c8:	4b2f      	ldr	r3, [pc, #188]	; (8012788 <lcd_write_line+0xf0>)
 80126ca:	781b      	ldrb	r3, [r3, #0]
 80126cc:	005b      	lsls	r3, r3, #1
 80126ce:	b2da      	uxtb	r2, r3
 80126d0:	7bbb      	ldrb	r3, [r7, #14]
 80126d2:	4413      	add	r3, r2
 80126d4:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_1[seg].reg; // @suppress("Avoid magic numbers")
 80126d6:	7bbb      	ldrb	r3, [r7, #14]
 80126d8:	08db      	lsrs	r3, r3, #3
 80126da:	b2da      	uxtb	r2, r3
 80126dc:	79fb      	ldrb	r3, [r7, #7]
 80126de:	4929      	ldr	r1, [pc, #164]	; (8012784 <lcd_write_line+0xec>)
 80126e0:	005b      	lsls	r3, r3, #1
 80126e2:	440b      	add	r3, r1
 80126e4:	785b      	ldrb	r3, [r3, #1]
 80126e6:	4413      	add	r3, r2
 80126e8:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 80126ea:	7bbb      	ldrb	r3, [r7, #14]
 80126ec:	f003 0307 	and.w	r3, r3, #7
 80126f0:	73bb      	strb	r3, [r7, #14]
        break;
 80126f2:	e01a      	b.n	801272a <lcd_write_line+0x92>
            pos = octal_2[seg].pos;
 80126f4:	79fb      	ldrb	r3, [r7, #7]
 80126f6:	4a25      	ldr	r2, [pc, #148]	; (801278c <lcd_write_line+0xf4>)
 80126f8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80126fc:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 80126fe:	4b22      	ldr	r3, [pc, #136]	; (8012788 <lcd_write_line+0xf0>)
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	005b      	lsls	r3, r3, #1
 8012704:	b2da      	uxtb	r2, r3
 8012706:	7bbb      	ldrb	r3, [r7, #14]
 8012708:	4413      	add	r3, r2
 801270a:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
 801270c:	7bbb      	ldrb	r3, [r7, #14]
 801270e:	08db      	lsrs	r3, r3, #3
 8012710:	b2da      	uxtb	r2, r3
 8012712:	79fb      	ldrb	r3, [r7, #7]
 8012714:	491d      	ldr	r1, [pc, #116]	; (801278c <lcd_write_line+0xf4>)
 8012716:	005b      	lsls	r3, r3, #1
 8012718:	440b      	add	r3, r1
 801271a:	785b      	ldrb	r3, [r3, #1]
 801271c:	4413      	add	r3, r2
 801271e:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 8012720:	7bbb      	ldrb	r3, [r7, #14]
 8012722:	f003 0307 	and.w	r3, r3, #7
 8012726:	73bb      	strb	r3, [r7, #14]
        break;
 8012728:	bf00      	nop
    }

    if (data)
 801272a:	79bb      	ldrb	r3, [r7, #6]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d00f      	beq.n	8012750 <lcd_write_line+0xb8>
    {
        g_lcd_map[reg] |= 1 << pos;
 8012730:	7bfb      	ldrb	r3, [r7, #15]
 8012732:	4a17      	ldr	r2, [pc, #92]	; (8012790 <lcd_write_line+0xf8>)
 8012734:	5cd3      	ldrb	r3, [r2, r3]
 8012736:	b25a      	sxtb	r2, r3
 8012738:	7bbb      	ldrb	r3, [r7, #14]
 801273a:	2101      	movs	r1, #1
 801273c:	fa01 f303 	lsl.w	r3, r1, r3
 8012740:	b25b      	sxtb	r3, r3
 8012742:	4313      	orrs	r3, r2
 8012744:	b25a      	sxtb	r2, r3
 8012746:	7bfb      	ldrb	r3, [r7, #15]
 8012748:	b2d1      	uxtb	r1, r2
 801274a:	4a11      	ldr	r2, [pc, #68]	; (8012790 <lcd_write_line+0xf8>)
 801274c:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        g_lcd_map[reg] &= ~(1 << pos);
    }
}
 801274e:	e010      	b.n	8012772 <lcd_write_line+0xda>
        g_lcd_map[reg] &= ~(1 << pos);
 8012750:	7bfb      	ldrb	r3, [r7, #15]
 8012752:	4a0f      	ldr	r2, [pc, #60]	; (8012790 <lcd_write_line+0xf8>)
 8012754:	5cd3      	ldrb	r3, [r2, r3]
 8012756:	b25a      	sxtb	r2, r3
 8012758:	7bbb      	ldrb	r3, [r7, #14]
 801275a:	2101      	movs	r1, #1
 801275c:	fa01 f303 	lsl.w	r3, r1, r3
 8012760:	b25b      	sxtb	r3, r3
 8012762:	43db      	mvns	r3, r3
 8012764:	b25b      	sxtb	r3, r3
 8012766:	4013      	ands	r3, r2
 8012768:	b25a      	sxtb	r2, r3
 801276a:	7bfb      	ldrb	r3, [r7, #15]
 801276c:	b2d1      	uxtb	r1, r2
 801276e:	4a08      	ldr	r2, [pc, #32]	; (8012790 <lcd_write_line+0xf8>)
 8012770:	54d1      	strb	r1, [r2, r3]
}
 8012772:	bf00      	nop
 8012774:	3714      	adds	r7, #20
 8012776:	46bd      	mov	sp, r7
 8012778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277c:	4770      	bx	lr
 801277e:	bf00      	nop
 8012780:	20001d65 	.word	0x20001d65
 8012784:	20000120 	.word	0x20000120
 8012788:	20001d64 	.word	0x20001d64
 801278c:	20000130 	.word	0x20000130
 8012790:	20001df8 	.word	0x20001df8

08012794 <prepare_to_send>:
 * COM_0_ADDRESS
 * COM_1_ADDRESS
 *
 */
void static prepare_to_send(uint8_t add)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b084      	sub	sp, #16
 8012798:	af00      	add	r7, sp, #0
 801279a:	4603      	mov	r3, r0
 801279c:	71fb      	strb	r3, [r7, #7]
    register_address_t reg;
    reg.bits.address = add;
 801279e:	79fb      	ldrb	r3, [r7, #7]
 80127a0:	f003 031f 	and.w	r3, r3, #31
 80127a4:	b2da      	uxtb	r2, r3
 80127a6:	7b3b      	ldrb	r3, [r7, #12]
 80127a8:	f362 0304 	bfi	r3, r2, #0, #5
 80127ac:	733b      	strb	r3, [r7, #12]
    reg.bits.not_used = 0;
 80127ae:	7b3b      	ldrb	r3, [r7, #12]
 80127b0:	f36f 1346 	bfc	r3, #5, #2
 80127b4:	733b      	strb	r3, [r7, #12]
    reg.bits.read_write = WRITE_DATA;
 80127b6:	7b3b      	ldrb	r3, [r7, #12]
 80127b8:	f36f 13c7 	bfc	r3, #7, #1
 80127bc:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(&h_spi1, &(reg.data), 1, DEFAULT_DELAY);
 80127be:	2314      	movs	r3, #20
 80127c0:	f107 010c 	add.w	r1, r7, #12
 80127c4:	2201      	movs	r2, #1
 80127c6:	4803      	ldr	r0, [pc, #12]	; (80127d4 <prepare_to_send+0x40>)
 80127c8:	f7f7 fa4e 	bl	8009c68 <HAL_SPI_Transmit>
}
 80127cc:	bf00      	nop
 80127ce:	3710      	adds	r7, #16
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	20001d68 	.word	0x20001d68

080127d8 <spi1_init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void spi1_init(void)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	af00      	add	r7, sp, #0
    h_spi1.Instance = SPI1;
 80127dc:	4b29      	ldr	r3, [pc, #164]	; (8012884 <spi1_init+0xac>)
 80127de:	4a2a      	ldr	r2, [pc, #168]	; (8012888 <spi1_init+0xb0>)
 80127e0:	601a      	str	r2, [r3, #0]
    h_spi1.Init.Mode = SPI_MODE_MASTER;
 80127e2:	4b28      	ldr	r3, [pc, #160]	; (8012884 <spi1_init+0xac>)
 80127e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80127e8:	605a      	str	r2, [r3, #4]
    h_spi1.Init.Direction = SPI_DIRECTION_1LINE;
 80127ea:	4b26      	ldr	r3, [pc, #152]	; (8012884 <spi1_init+0xac>)
 80127ec:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80127f0:	609a      	str	r2, [r3, #8]
    h_spi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80127f2:	4b24      	ldr	r3, [pc, #144]	; (8012884 <spi1_init+0xac>)
 80127f4:	2207      	movs	r2, #7
 80127f6:	60da      	str	r2, [r3, #12]
    h_spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80127f8:	4b22      	ldr	r3, [pc, #136]	; (8012884 <spi1_init+0xac>)
 80127fa:	2200      	movs	r2, #0
 80127fc:	611a      	str	r2, [r3, #16]
    h_spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80127fe:	4b21      	ldr	r3, [pc, #132]	; (8012884 <spi1_init+0xac>)
 8012800:	2200      	movs	r2, #0
 8012802:	615a      	str	r2, [r3, #20]
    h_spi1.Init.NSS = SPI_NSS_SOFT;
 8012804:	4b1f      	ldr	r3, [pc, #124]	; (8012884 <spi1_init+0xac>)
 8012806:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801280a:	619a      	str	r2, [r3, #24]
    h_spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 801280c:	4b1d      	ldr	r3, [pc, #116]	; (8012884 <spi1_init+0xac>)
 801280e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8012812:	61da      	str	r2, [r3, #28]
    h_spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012814:	4b1b      	ldr	r3, [pc, #108]	; (8012884 <spi1_init+0xac>)
 8012816:	2200      	movs	r2, #0
 8012818:	621a      	str	r2, [r3, #32]
    h_spi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801281a:	4b1a      	ldr	r3, [pc, #104]	; (8012884 <spi1_init+0xac>)
 801281c:	2200      	movs	r2, #0
 801281e:	625a      	str	r2, [r3, #36]	; 0x24
    h_spi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012820:	4b18      	ldr	r3, [pc, #96]	; (8012884 <spi1_init+0xac>)
 8012822:	2200      	movs	r2, #0
 8012824:	629a      	str	r2, [r3, #40]	; 0x28
    h_spi1.Init.CRCPolynomial = 7; // @suppress("Avoid magic numbers")
 8012826:	4b17      	ldr	r3, [pc, #92]	; (8012884 <spi1_init+0xac>)
 8012828:	2207      	movs	r2, #7
 801282a:	62da      	str	r2, [r3, #44]	; 0x2c
    h_spi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801282c:	4b15      	ldr	r3, [pc, #84]	; (8012884 <spi1_init+0xac>)
 801282e:	2200      	movs	r2, #0
 8012830:	631a      	str	r2, [r3, #48]	; 0x30
    h_spi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8012832:	4b14      	ldr	r3, [pc, #80]	; (8012884 <spi1_init+0xac>)
 8012834:	2200      	movs	r2, #0
 8012836:	635a      	str	r2, [r3, #52]	; 0x34
    h_spi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8012838:	4b12      	ldr	r3, [pc, #72]	; (8012884 <spi1_init+0xac>)
 801283a:	2200      	movs	r2, #0
 801283c:	639a      	str	r2, [r3, #56]	; 0x38
    h_spi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 801283e:	4b11      	ldr	r3, [pc, #68]	; (8012884 <spi1_init+0xac>)
 8012840:	2200      	movs	r2, #0
 8012842:	63da      	str	r2, [r3, #60]	; 0x3c
    h_spi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8012844:	4b0f      	ldr	r3, [pc, #60]	; (8012884 <spi1_init+0xac>)
 8012846:	2200      	movs	r2, #0
 8012848:	649a      	str	r2, [r3, #72]	; 0x48
    h_spi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 801284a:	4b0e      	ldr	r3, [pc, #56]	; (8012884 <spi1_init+0xac>)
 801284c:	2200      	movs	r2, #0
 801284e:	64da      	str	r2, [r3, #76]	; 0x4c
    h_spi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8012850:	4b0c      	ldr	r3, [pc, #48]	; (8012884 <spi1_init+0xac>)
 8012852:	2200      	movs	r2, #0
 8012854:	651a      	str	r2, [r3, #80]	; 0x50
    h_spi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8012856:	4b0b      	ldr	r3, [pc, #44]	; (8012884 <spi1_init+0xac>)
 8012858:	2200      	movs	r2, #0
 801285a:	655a      	str	r2, [r3, #84]	; 0x54
    h_spi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 801285c:	4b09      	ldr	r3, [pc, #36]	; (8012884 <spi1_init+0xac>)
 801285e:	2200      	movs	r2, #0
 8012860:	659a      	str	r2, [r3, #88]	; 0x58
    h_spi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8012862:	4b08      	ldr	r3, [pc, #32]	; (8012884 <spi1_init+0xac>)
 8012864:	2200      	movs	r2, #0
 8012866:	65da      	str	r2, [r3, #92]	; 0x5c
    h_spi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8012868:	4b06      	ldr	r3, [pc, #24]	; (8012884 <spi1_init+0xac>)
 801286a:	2200      	movs	r2, #0
 801286c:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_SPI_Init(&h_spi1) != HAL_OK)
 801286e:	4805      	ldr	r0, [pc, #20]	; (8012884 <spi1_init+0xac>)
 8012870:	f7f7 f8e4 	bl	8009a3c <HAL_SPI_Init>
 8012874:	4603      	mov	r3, r0
 8012876:	2b00      	cmp	r3, #0
 8012878:	d001      	beq.n	801287e <spi1_init+0xa6>
    {
        Error_Handler();
 801287a:	f7ee fe25 	bl	80014c8 <Error_Handler>
    }
}
 801287e:	bf00      	nop
 8012880:	bd80      	pop	{r7, pc}
 8012882:	bf00      	nop
 8012884:	20001d68 	.word	0x20001d68
 8012888:	40013000 	.word	0x40013000

0801288c <pcf8553_blink>:
 * PCF_BLINK_ONE_SECOND,
 * PCF_BLINK_HALF_SECOND
 * @retval None
 */
void pcf8553_blink(blink_t mode)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b082      	sub	sp, #8
 8012890:	af00      	add	r7, sp, #0
 8012892:	4603      	mov	r3, r0
 8012894:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 8012896:	2200      	movs	r2, #0
 8012898:	2110      	movs	r1, #16
 801289a:	480f      	ldr	r0, [pc, #60]	; (80128d8 <pcf8553_blink+0x4c>)
 801289c:	f7f1 feae 	bl	80045fc <HAL_GPIO_WritePin>
    g_display_ctrl_2.reg_bits.blink = mode;
 80128a0:	79fb      	ldrb	r3, [r7, #7]
 80128a2:	f003 0303 	and.w	r3, r3, #3
 80128a6:	b2d9      	uxtb	r1, r3
 80128a8:	4a0c      	ldr	r2, [pc, #48]	; (80128dc <pcf8553_blink+0x50>)
 80128aa:	7813      	ldrb	r3, [r2, #0]
 80128ac:	f361 0342 	bfi	r3, r1, #1, #2
 80128b0:	7013      	strb	r3, [r2, #0]
    prepare_to_send(DISPLAY_CTRL_2_ADDRESS);
 80128b2:	2003      	movs	r0, #3
 80128b4:	f7ff ff6e 	bl	8012794 <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 80128b8:	2314      	movs	r3, #20
 80128ba:	2201      	movs	r2, #1
 80128bc:	4907      	ldr	r1, [pc, #28]	; (80128dc <pcf8553_blink+0x50>)
 80128be:	4808      	ldr	r0, [pc, #32]	; (80128e0 <pcf8553_blink+0x54>)
 80128c0:	f7f7 f9d2 	bl	8009c68 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 80128c4:	2201      	movs	r2, #1
 80128c6:	2110      	movs	r1, #16
 80128c8:	4803      	ldr	r0, [pc, #12]	; (80128d8 <pcf8553_blink+0x4c>)
 80128ca:	f7f1 fe97 	bl	80045fc <HAL_GPIO_WritePin>
}
 80128ce:	bf00      	nop
 80128d0:	3708      	adds	r7, #8
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop
 80128d8:	42020000 	.word	0x42020000
 80128dc:	20001e10 	.word	0x20001e10
 80128e0:	20001d68 	.word	0x20001d68

080128e4 <pcf8553_clear_buff>:

void pcf8553_clear_buff()
{
 80128e4:	b480      	push	{r7}
 80128e6:	b083      	sub	sp, #12
 80128e8:	af00      	add	r7, sp, #0
    /*
     * Limpia el buffer final, que es mandado directamente al controlador de la
     * pantalla LCD.
     */
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 80128ea:	2300      	movs	r3, #0
 80128ec:	607b      	str	r3, [r7, #4]
 80128ee:	e007      	b.n	8012900 <pcf8553_clear_buff+0x1c>
    {
        g_lcd_map[cont_buff_t] = 0;
 80128f0:	4a08      	ldr	r2, [pc, #32]	; (8012914 <pcf8553_clear_buff+0x30>)
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	4413      	add	r3, r2
 80128f6:	2200      	movs	r2, #0
 80128f8:	701a      	strb	r2, [r3, #0]
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	3301      	adds	r3, #1
 80128fe:	607b      	str	r3, [r7, #4]
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2b13      	cmp	r3, #19
 8012904:	ddf4      	ble.n	80128f0 <pcf8553_clear_buff+0xc>
    }
}
 8012906:	bf00      	nop
 8012908:	bf00      	nop
 801290a:	370c      	adds	r7, #12
 801290c:	46bd      	mov	sp, r7
 801290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012912:	4770      	bx	lr
 8012914:	20001df8 	.word	0x20001df8

08012918 <pcf8553_dump>:
 *
 * @param None
 * @retval None
 */
void pcf8553_dump()
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b082      	sub	sp, #8
 801291c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 801291e:	2200      	movs	r2, #0
 8012920:	2110      	movs	r1, #16
 8012922:	4810      	ldr	r0, [pc, #64]	; (8012964 <pcf8553_dump+0x4c>)
 8012924:	f7f1 fe6a 	bl	80045fc <HAL_GPIO_WritePin>
    prepare_to_send(DATA_ADDRESS);
 8012928:	2004      	movs	r0, #4
 801292a:	f7ff ff33 	bl	8012794 <prepare_to_send>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 801292e:	2300      	movs	r3, #0
 8012930:	607b      	str	r3, [r7, #4]
 8012932:	e00a      	b.n	801294a <pcf8553_dump+0x32>
    {
        HAL_SPI_Transmit(&h_spi1, g_lcd_map + i, 1, DEFAULT_DELAY);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	4a0c      	ldr	r2, [pc, #48]	; (8012968 <pcf8553_dump+0x50>)
 8012938:	1899      	adds	r1, r3, r2
 801293a:	2314      	movs	r3, #20
 801293c:	2201      	movs	r2, #1
 801293e:	480b      	ldr	r0, [pc, #44]	; (801296c <pcf8553_dump+0x54>)
 8012940:	f7f7 f992 	bl	8009c68 <HAL_SPI_Transmit>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	3301      	adds	r3, #1
 8012948:	607b      	str	r3, [r7, #4]
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2b13      	cmp	r3, #19
 801294e:	ddf1      	ble.n	8012934 <pcf8553_dump+0x1c>
    }
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 8012950:	2201      	movs	r2, #1
 8012952:	2110      	movs	r1, #16
 8012954:	4803      	ldr	r0, [pc, #12]	; (8012964 <pcf8553_dump+0x4c>)
 8012956:	f7f1 fe51 	bl	80045fc <HAL_GPIO_WritePin>
}
 801295a:	bf00      	nop
 801295c:	3708      	adds	r7, #8
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	42020000 	.word	0x42020000
 8012968:	20001df8 	.word	0x20001df8
 801296c:	20001d68 	.word	0x20001d68

08012970 <pcf8553_init>:
 * @brief Llamar a esta función antes de empezar a trabajar con el driver.
 * @param None
 * @retval None
 */
void pcf8553_init()
{
 8012970:	b580      	push	{r7, lr}
 8012972:	af00      	add	r7, sp, #0
    spi1_init();
 8012974:	f7ff ff30 	bl	80127d8 <spi1_init>
    pcf8553_reset();
 8012978:	f000 f830 	bl	80129dc <pcf8553_reset>
    HAL_Delay(DEFAULT_DELAY);
 801297c:	2314      	movs	r3, #20
 801297e:	4618      	mov	r0, r3
 8012980:	f7ef f964 	bl	8001c4c <HAL_Delay>
     * @brief El pcf8553 tiene un pin de chip select, la siguiente instruccion
     * habilita el chip, el parametro GPIO_PIN_RESET es muy parecido a un
     * numero magico, se debe buscar una mejor solucion.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 8012984:	2200      	movs	r2, #0
 8012986:	2110      	movs	r1, #16
 8012988:	480f      	ldr	r0, [pc, #60]	; (80129c8 <pcf8553_init+0x58>)
 801298a:	f7f1 fe37 	bl	80045fc <HAL_GPIO_WritePin>
     *  Display_crtl_2 = 1 to enable display.
     *  Luego de un tiempo olvidé porque hice este comentario, no parece
     *  tener sentido.
     *
     */
    prepare_to_send(0x1);
 801298e:	2001      	movs	r0, #1
 8012990:	f7ff ff00 	bl	8012794 <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_device_ctrl.reg_data), 1, DEFAULT_DELAY);
 8012994:	2314      	movs	r3, #20
 8012996:	2201      	movs	r2, #1
 8012998:	490c      	ldr	r1, [pc, #48]	; (80129cc <pcf8553_init+0x5c>)
 801299a:	480d      	ldr	r0, [pc, #52]	; (80129d0 <pcf8553_init+0x60>)
 801299c:	f7f7 f964 	bl	8009c68 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_1.reg_data), 1, DEFAULT_DELAY);
 80129a0:	2314      	movs	r3, #20
 80129a2:	2201      	movs	r2, #1
 80129a4:	490b      	ldr	r1, [pc, #44]	; (80129d4 <pcf8553_init+0x64>)
 80129a6:	480a      	ldr	r0, [pc, #40]	; (80129d0 <pcf8553_init+0x60>)
 80129a8:	f7f7 f95e 	bl	8009c68 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 80129ac:	2314      	movs	r3, #20
 80129ae:	2201      	movs	r2, #1
 80129b0:	4909      	ldr	r1, [pc, #36]	; (80129d8 <pcf8553_init+0x68>)
 80129b2:	4807      	ldr	r0, [pc, #28]	; (80129d0 <pcf8553_init+0x60>)
 80129b4:	f7f7 f958 	bl	8009c68 <HAL_SPI_Transmit>

    /*
     *  Chip disable.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 80129b8:	2201      	movs	r2, #1
 80129ba:	2110      	movs	r1, #16
 80129bc:	4802      	ldr	r0, [pc, #8]	; (80129c8 <pcf8553_init+0x58>)
 80129be:	f7f1 fe1d 	bl	80045fc <HAL_GPIO_WritePin>
}
 80129c2:	bf00      	nop
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	42020000 	.word	0x42020000
 80129cc:	20001e0c 	.word	0x20001e0c
 80129d0:	20001d68 	.word	0x20001d68
 80129d4:	20000140 	.word	0x20000140
 80129d8:	20001e10 	.word	0x20001e10

080129dc <pcf8553_reset>:
 * at least 10 μs.
 * @param  None
 * @retval None
 */
void pcf8553_reset()
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_PIN, GPIO_PIN_RESET);
 80129e0:	2200      	movs	r2, #0
 80129e2:	2140      	movs	r1, #64	; 0x40
 80129e4:	4806      	ldr	r0, [pc, #24]	; (8012a00 <pcf8553_reset+0x24>)
 80129e6:	f7f1 fe09 	bl	80045fc <HAL_GPIO_WritePin>
    HAL_Delay(DEFAULT_DELAY);
 80129ea:	2314      	movs	r3, #20
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7ef f92d 	bl	8001c4c <HAL_Delay>
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_Pin, GPIO_PIN_SET);
 80129f2:	2201      	movs	r2, #1
 80129f4:	2140      	movs	r1, #64	; 0x40
 80129f6:	4802      	ldr	r0, [pc, #8]	; (8012a00 <pcf8553_reset+0x24>)
 80129f8:	f7f1 fe00 	bl	80045fc <HAL_GPIO_WritePin>
}
 80129fc:	bf00      	nop
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	42020000 	.word	0x42020000

08012a04 <pcf8553_write_all>:
 * futuro se hará con una enumeración que lo deje claro, ya sea en esta función
 * o en una de mas alto nivel.
 * @retval None
 */
void pcf8553_write_all(uint8_t data)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012a0e:	2300      	movs	r3, #0
 8012a10:	60fb      	str	r3, [r7, #12]
 8012a12:	e007      	b.n	8012a24 <pcf8553_write_all+0x20>
    {
        g_lcd_map[i] = data;
 8012a14:	4a08      	ldr	r2, [pc, #32]	; (8012a38 <pcf8553_write_all+0x34>)
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	4413      	add	r3, r2
 8012a1a:	79fa      	ldrb	r2, [r7, #7]
 8012a1c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	3301      	adds	r3, #1
 8012a22:	60fb      	str	r3, [r7, #12]
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	2b13      	cmp	r3, #19
 8012a28:	ddf4      	ble.n	8012a14 <pcf8553_write_all+0x10>
    }
    pcf8553_dump();
 8012a2a:	f7ff ff75 	bl	8012918 <pcf8553_dump>
}
 8012a2e:	bf00      	nop
 8012a30:	3710      	adds	r7, #16
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bd80      	pop	{r7, pc}
 8012a36:	bf00      	nop
 8012a38:	20001df8 	.word	0x20001df8

08012a3c <fm_menu_config_date_hour>:
 * @brief Función que imprime el menú de configuración de fecha y hora.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_date_hour(fm_event_t event_id)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b0ae      	sub	sp, #184	; 0xb8
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	4603      	mov	r3, r0
 8012a44:	71fb      	strb	r3, [r7, #7]
    static sel_second second_enum;
    RTC_TimeTypeDef time_final;
    RTC_DateTypeDef date_final;
    extern RTC_HandleTypeDef hrtc;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 8012a46:	4b9d      	ldr	r3, [pc, #628]	; (8012cbc <fm_menu_config_date_hour+0x280>)
 8012a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    fm_event_t event_now;

    if (new_entry == 1)
 8012a4c:	4b9c      	ldr	r3, [pc, #624]	; (8012cc0 <fm_menu_config_date_hour+0x284>)
 8012a4e:	781b      	ldrb	r3, [r3, #0]
 8012a50:	2b01      	cmp	r3, #1
 8012a52:	d107      	bne.n	8012a64 <fm_menu_config_date_hour+0x28>
    {
        field = DAY;
 8012a54:	4b9b      	ldr	r3, [pc, #620]	; (8012cc4 <fm_menu_config_date_hour+0x288>)
 8012a56:	2200      	movs	r2, #0
 8012a58:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 8012a5a:	f7fd f968 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 8012a5e:	4b98      	ldr	r3, [pc, #608]	; (8012cc0 <fm_menu_config_date_hour+0x284>)
 8012a60:	2200      	movs	r2, #0
 8012a62:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(CONFIGURATION, event_id, field);
 8012a64:	4b97      	ldr	r3, [pc, #604]	; (8012cc4 <fm_menu_config_date_hour+0x288>)
 8012a66:	781a      	ldrb	r2, [r3, #0]
 8012a68:	79fb      	ldrb	r3, [r7, #7]
 8012a6a:	4619      	mov	r1, r3
 8012a6c:	2001      	movs	r0, #1
 8012a6e:	f7fd f965 	bl	800fd3c <fm_lcd_date_hour>
    fm_lcd_refresh();
 8012a72:	f7fd fce8 	bl	8010446 <fm_lcd_refresh>

    day_enum = fm_factory_get_date_time().day;
 8012a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7fc fabc 	bl	800eff8 <fm_factory_get_date_time>
 8012a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a82:	b2da      	uxtb	r2, r3
 8012a84:	4b90      	ldr	r3, [pc, #576]	; (8012cc8 <fm_menu_config_date_hour+0x28c>)
 8012a86:	701a      	strb	r2, [r3, #0]
    month_enum = fm_factory_get_date_time().month;
 8012a88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f7fc fab3 	bl	800eff8 <fm_factory_get_date_time>
 8012a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a94:	b2da      	uxtb	r2, r3
 8012a96:	4b8d      	ldr	r3, [pc, #564]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012a98:	701a      	strb	r2, [r3, #0]
    year_enum = fm_factory_get_date_time().year;
 8012a9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7fc faaa 	bl	800eff8 <fm_factory_get_date_time>
 8012aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012aa6:	b2da      	uxtb	r2, r3
 8012aa8:	4b89      	ldr	r3, [pc, #548]	; (8012cd0 <fm_menu_config_date_hour+0x294>)
 8012aaa:	701a      	strb	r2, [r3, #0]
    hour_enum = fm_factory_get_date_time().hour;
 8012aac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7fc faa1 	bl	800eff8 <fm_factory_get_date_time>
 8012ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ab8:	b2da      	uxtb	r2, r3
 8012aba:	4b86      	ldr	r3, [pc, #536]	; (8012cd4 <fm_menu_config_date_hour+0x298>)
 8012abc:	701a      	strb	r2, [r3, #0]
    minute_enum = fm_factory_get_date_time().minute;
 8012abe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f7fc fa98 	bl	800eff8 <fm_factory_get_date_time>
 8012ac8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012acc:	b2da      	uxtb	r2, r3
 8012ace:	4b82      	ldr	r3, [pc, #520]	; (8012cd8 <fm_menu_config_date_hour+0x29c>)
 8012ad0:	701a      	strb	r2, [r3, #0]
    second_enum = fm_factory_get_date_time().second;
 8012ad2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f7fc fa8e 	bl	800eff8 <fm_factory_get_date_time>
 8012adc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012ae0:	b2da      	uxtb	r2, r3
 8012ae2:	4b7e      	ldr	r3, [pc, #504]	; (8012cdc <fm_menu_config_date_hour+0x2a0>)
 8012ae4:	701a      	strb	r2, [r3, #0]

    switch (event_id)
 8012ae6:	79fb      	ldrb	r3, [r7, #7]
 8012ae8:	3b01      	subs	r3, #1
 8012aea:	2b04      	cmp	r3, #4
 8012aec:	f200 83bd 	bhi.w	801326a <fm_menu_config_date_hour+0x82e>
 8012af0:	a201      	add	r2, pc, #4	; (adr r2, 8012af8 <fm_menu_config_date_hour+0xbc>)
 8012af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012af6:	bf00      	nop
 8012af8:	0801326b 	.word	0x0801326b
 8012afc:	08012b0d 	.word	0x08012b0d
 8012b00:	08012e5f 	.word	0x08012e5f
 8012b04:	080131d1 	.word	0x080131d1
 8012b08:	0801324b 	.word	0x0801324b
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8012b0c:	4b74      	ldr	r3, [pc, #464]	; (8012ce0 <fm_menu_config_date_hour+0x2a4>)
 8012b0e:	781b      	ldrb	r3, [r3, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	f000 83ac 	beq.w	801326e <fm_menu_config_date_hour+0x832>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if (field == DAY)
 8012b16:	4b6b      	ldr	r3, [pc, #428]	; (8012cc4 <fm_menu_config_date_hour+0x288>)
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f040 809b 	bne.w	8012c56 <fm_menu_config_date_hour+0x21a>
                {
                    if (month_enum == JANUARY || month_enum == MARCH
 8012b20:	4b6a      	ldr	r3, [pc, #424]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	d017      	beq.n	8012b58 <fm_menu_config_date_hour+0x11c>
 8012b28:	4b68      	ldr	r3, [pc, #416]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	2b03      	cmp	r3, #3
 8012b2e:	d013      	beq.n	8012b58 <fm_menu_config_date_hour+0x11c>
                    || month_enum == MAY || month_enum == JULY
 8012b30:	4b66      	ldr	r3, [pc, #408]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	2b05      	cmp	r3, #5
 8012b36:	d00f      	beq.n	8012b58 <fm_menu_config_date_hour+0x11c>
 8012b38:	4b64      	ldr	r3, [pc, #400]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	2b07      	cmp	r3, #7
 8012b3e:	d00b      	beq.n	8012b58 <fm_menu_config_date_hour+0x11c>
                    || month_enum == AUGUST || month_enum == OCTOBER
 8012b40:	4b62      	ldr	r3, [pc, #392]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	2b08      	cmp	r3, #8
 8012b46:	d007      	beq.n	8012b58 <fm_menu_config_date_hour+0x11c>
 8012b48:	4b60      	ldr	r3, [pc, #384]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	2b0a      	cmp	r3, #10
 8012b4e:	d003      	beq.n	8012b58 <fm_menu_config_date_hour+0x11c>
                    || month_enum == DECEMBER)
 8012b50:	4b5e      	ldr	r3, [pc, #376]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	2b0c      	cmp	r3, #12
 8012b56:	d119      	bne.n	8012b8c <fm_menu_config_date_hour+0x150>
                    {
                        if (day_enum < DAY_31)
 8012b58:	4b5b      	ldr	r3, [pc, #364]	; (8012cc8 <fm_menu_config_date_hour+0x28c>)
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	2b1e      	cmp	r3, #30
 8012b5e:	d80b      	bhi.n	8012b78 <fm_menu_config_date_hour+0x13c>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 8012b60:	4b59      	ldr	r3, [pc, #356]	; (8012cc8 <fm_menu_config_date_hour+0x28c>)
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	3301      	adds	r3, #1
 8012b66:	4a59      	ldr	r2, [pc, #356]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012b68:	7812      	ldrb	r2, [r2, #0]
 8012b6a:	4611      	mov	r1, r2
 8012b6c:	4a58      	ldr	r2, [pc, #352]	; (8012cd0 <fm_menu_config_date_hour+0x294>)
 8012b6e:	7812      	ldrb	r2, [r2, #0]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7fc fbad 	bl	800f2d0 <fm_factory_modify_date>
                        if (day_enum < DAY_31)
 8012b76:	e168      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 8012b78:	4b54      	ldr	r3, [pc, #336]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	4b54      	ldr	r3, [pc, #336]	; (8012cd0 <fm_menu_config_date_hour+0x294>)
 8012b80:	781b      	ldrb	r3, [r3, #0]
 8012b82:	461a      	mov	r2, r3
 8012b84:	2001      	movs	r0, #1
 8012b86:	f7fc fba3 	bl	800f2d0 <fm_factory_modify_date>
                        if (day_enum < DAY_31)
 8012b8a:	e15e      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else if (month_enum == APRIL || month_enum == JUNE
 8012b8c:	4b4f      	ldr	r3, [pc, #316]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	2b04      	cmp	r3, #4
 8012b92:	d00b      	beq.n	8012bac <fm_menu_config_date_hour+0x170>
 8012b94:	4b4d      	ldr	r3, [pc, #308]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	2b06      	cmp	r3, #6
 8012b9a:	d007      	beq.n	8012bac <fm_menu_config_date_hour+0x170>
                    || month_enum == SEPTEMBER || month_enum == NOVEMBER)
 8012b9c:	4b4b      	ldr	r3, [pc, #300]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	2b09      	cmp	r3, #9
 8012ba2:	d003      	beq.n	8012bac <fm_menu_config_date_hour+0x170>
 8012ba4:	4b49      	ldr	r3, [pc, #292]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	2b0b      	cmp	r3, #11
 8012baa:	d119      	bne.n	8012be0 <fm_menu_config_date_hour+0x1a4>
                    {
                        if (day_enum < DAY_30)
 8012bac:	4b46      	ldr	r3, [pc, #280]	; (8012cc8 <fm_menu_config_date_hour+0x28c>)
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	2b1d      	cmp	r3, #29
 8012bb2:	d80b      	bhi.n	8012bcc <fm_menu_config_date_hour+0x190>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 8012bb4:	4b44      	ldr	r3, [pc, #272]	; (8012cc8 <fm_menu_config_date_hour+0x28c>)
 8012bb6:	781b      	ldrb	r3, [r3, #0]
 8012bb8:	3301      	adds	r3, #1
 8012bba:	4a44      	ldr	r2, [pc, #272]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012bbc:	7812      	ldrb	r2, [r2, #0]
 8012bbe:	4611      	mov	r1, r2
 8012bc0:	4a43      	ldr	r2, [pc, #268]	; (8012cd0 <fm_menu_config_date_hour+0x294>)
 8012bc2:	7812      	ldrb	r2, [r2, #0]
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7fc fb83 	bl	800f2d0 <fm_factory_modify_date>
                        if (day_enum < DAY_30)
 8012bca:	e13e      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 8012bcc:	4b3f      	ldr	r3, [pc, #252]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012bce:	781b      	ldrb	r3, [r3, #0]
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	4b3f      	ldr	r3, [pc, #252]	; (8012cd0 <fm_menu_config_date_hour+0x294>)
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	2001      	movs	r0, #1
 8012bda:	f7fc fb79 	bl	800f2d0 <fm_factory_modify_date>
                        if (day_enum < DAY_30)
 8012bde:	e134      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else
                    {
                        if (year_enum % YEAR_4 == 0)
 8012be0:	4b3b      	ldr	r3, [pc, #236]	; (8012cd0 <fm_menu_config_date_hour+0x294>)
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	f003 0303 	and.w	r3, r3, #3
 8012be8:	b2db      	uxtb	r3, r3
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d119      	bne.n	8012c22 <fm_menu_config_date_hour+0x1e6>
                        {
                            if (day_enum < DAY_29)
 8012bee:	4b36      	ldr	r3, [pc, #216]	; (8012cc8 <fm_menu_config_date_hour+0x28c>)
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	2b1c      	cmp	r3, #28
 8012bf4:	d80b      	bhi.n	8012c0e <fm_menu_config_date_hour+0x1d2>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 8012bf6:	4b34      	ldr	r3, [pc, #208]	; (8012cc8 <fm_menu_config_date_hour+0x28c>)
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	4a33      	ldr	r2, [pc, #204]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012bfe:	7812      	ldrb	r2, [r2, #0]
 8012c00:	4611      	mov	r1, r2
 8012c02:	4a33      	ldr	r2, [pc, #204]	; (8012cd0 <fm_menu_config_date_hour+0x294>)
 8012c04:	7812      	ldrb	r2, [r2, #0]
 8012c06:	4618      	mov	r0, r3
 8012c08:	f7fc fb62 	bl	800f2d0 <fm_factory_modify_date>
 8012c0c:	e11d      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 8012c0e:	4b2f      	ldr	r3, [pc, #188]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	4619      	mov	r1, r3
 8012c14:	4b2e      	ldr	r3, [pc, #184]	; (8012cd0 <fm_menu_config_date_hour+0x294>)
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	461a      	mov	r2, r3
 8012c1a:	2001      	movs	r0, #1
 8012c1c:	f7fc fb58 	bl	800f2d0 <fm_factory_modify_date>
 8012c20:	e113      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if (day_enum < DAY_28)
 8012c22:	4b29      	ldr	r3, [pc, #164]	; (8012cc8 <fm_menu_config_date_hour+0x28c>)
 8012c24:	781b      	ldrb	r3, [r3, #0]
 8012c26:	2b1b      	cmp	r3, #27
 8012c28:	d80b      	bhi.n	8012c42 <fm_menu_config_date_hour+0x206>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 8012c2a:	4b27      	ldr	r3, [pc, #156]	; (8012cc8 <fm_menu_config_date_hour+0x28c>)
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	3301      	adds	r3, #1
 8012c30:	4a26      	ldr	r2, [pc, #152]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012c32:	7812      	ldrb	r2, [r2, #0]
 8012c34:	4611      	mov	r1, r2
 8012c36:	4a26      	ldr	r2, [pc, #152]	; (8012cd0 <fm_menu_config_date_hour+0x294>)
 8012c38:	7812      	ldrb	r2, [r2, #0]
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7fc fb48 	bl	800f2d0 <fm_factory_modify_date>
 8012c40:	e103      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 8012c42:	4b22      	ldr	r3, [pc, #136]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	4619      	mov	r1, r3
 8012c48:	4b21      	ldr	r3, [pc, #132]	; (8012cd0 <fm_menu_config_date_hour+0x294>)
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	461a      	mov	r2, r3
 8012c4e:	2001      	movs	r0, #1
 8012c50:	f7fc fb3e 	bl	800f2d0 <fm_factory_modify_date>
 8012c54:	e0f9      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                    }
                }
                else if (field == MONTH)
 8012c56:	4b1b      	ldr	r3, [pc, #108]	; (8012cc4 <fm_menu_config_date_hour+0x288>)
 8012c58:	781b      	ldrb	r3, [r3, #0]
 8012c5a:	2b01      	cmp	r3, #1
 8012c5c:	d16a      	bne.n	8012d34 <fm_menu_config_date_hour+0x2f8>
                {
                    if (month_enum < DECEMBER)
 8012c5e:	4b1b      	ldr	r3, [pc, #108]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012c60:	781b      	ldrb	r3, [r3, #0]
 8012c62:	2b0b      	cmp	r3, #11
 8012c64:	d85c      	bhi.n	8012d20 <fm_menu_config_date_hour+0x2e4>
                    {
                        if ((month_enum + 1 == APRIL || month_enum + 1 == JUNE
 8012c66:	4b19      	ldr	r3, [pc, #100]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012c68:	781b      	ldrb	r3, [r3, #0]
 8012c6a:	2b03      	cmp	r3, #3
 8012c6c:	d00b      	beq.n	8012c86 <fm_menu_config_date_hour+0x24a>
 8012c6e:	4b17      	ldr	r3, [pc, #92]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012c70:	781b      	ldrb	r3, [r3, #0]
 8012c72:	2b05      	cmp	r3, #5
 8012c74:	d007      	beq.n	8012c86 <fm_menu_config_date_hour+0x24a>
                        || month_enum + 1 == SEPTEMBER
 8012c76:	4b15      	ldr	r3, [pc, #84]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	2b08      	cmp	r3, #8
 8012c7c:	d003      	beq.n	8012c86 <fm_menu_config_date_hour+0x24a>
                        || month_enum + 1 == NOVEMBER) && (day_enum > DAY_30))
 8012c7e:	4b13      	ldr	r3, [pc, #76]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012c80:	781b      	ldrb	r3, [r3, #0]
 8012c82:	2b0a      	cmp	r3, #10
 8012c84:	d107      	bne.n	8012c96 <fm_menu_config_date_hour+0x25a>
 8012c86:	4b10      	ldr	r3, [pc, #64]	; (8012cc8 <fm_menu_config_date_hour+0x28c>)
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	2b1e      	cmp	r3, #30
 8012c8c:	d903      	bls.n	8012c96 <fm_menu_config_date_hour+0x25a>
                        {
                            day_enum = DAY_30;
 8012c8e:	4b0e      	ldr	r3, [pc, #56]	; (8012cc8 <fm_menu_config_date_hour+0x28c>)
 8012c90:	221e      	movs	r2, #30
 8012c92:	701a      	strb	r2, [r3, #0]
 8012c94:	e038      	b.n	8012d08 <fm_menu_config_date_hour+0x2cc>
                        }
                        else if ((month_enum + 1 == FEBRUARY)
 8012c96:	4b0d      	ldr	r3, [pc, #52]	; (8012ccc <fm_menu_config_date_hour+0x290>)
 8012c98:	781b      	ldrb	r3, [r3, #0]
 8012c9a:	2b01      	cmp	r3, #1
 8012c9c:	d122      	bne.n	8012ce4 <fm_menu_config_date_hour+0x2a8>
                        && (year_enum % YEAR_4 == 0) && (day_enum > DAY_29))
 8012c9e:	4b0c      	ldr	r3, [pc, #48]	; (8012cd0 <fm_menu_config_date_hour+0x294>)
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	f003 0303 	and.w	r3, r3, #3
 8012ca6:	b2db      	uxtb	r3, r3
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d11b      	bne.n	8012ce4 <fm_menu_config_date_hour+0x2a8>
 8012cac:	4b06      	ldr	r3, [pc, #24]	; (8012cc8 <fm_menu_config_date_hour+0x28c>)
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	2b1d      	cmp	r3, #29
 8012cb2:	d917      	bls.n	8012ce4 <fm_menu_config_date_hour+0x2a8>
                        {
                            day_enum = DAY_29;
 8012cb4:	4b04      	ldr	r3, [pc, #16]	; (8012cc8 <fm_menu_config_date_hour+0x28c>)
 8012cb6:	221d      	movs	r2, #29
 8012cb8:	701a      	strb	r2, [r3, #0]
 8012cba:	e025      	b.n	8012d08 <fm_menu_config_date_hour+0x2cc>
 8012cbc:	08012a3d 	.word	0x08012a3d
 8012cc0:	20000141 	.word	0x20000141
 8012cc4:	20001e15 	.word	0x20001e15
 8012cc8:	20001e16 	.word	0x20001e16
 8012ccc:	20001e17 	.word	0x20001e17
 8012cd0:	20001e18 	.word	0x20001e18
 8012cd4:	20001e19 	.word	0x20001e19
 8012cd8:	20001e1a 	.word	0x20001e1a
 8012cdc:	20001e1b 	.word	0x20001e1b
 8012ce0:	20001e12 	.word	0x20001e12
                        }
                        else if ((month_enum + 1 == FEBRUARY)
 8012ce4:	4b93      	ldr	r3, [pc, #588]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	2b01      	cmp	r3, #1
 8012cea:	d10d      	bne.n	8012d08 <fm_menu_config_date_hour+0x2cc>
                        && (year_enum % YEAR_4 != 0) && (day_enum > DAY_28))
 8012cec:	4b92      	ldr	r3, [pc, #584]	; (8012f38 <fm_menu_config_date_hour+0x4fc>)
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	f003 0303 	and.w	r3, r3, #3
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d006      	beq.n	8012d08 <fm_menu_config_date_hour+0x2cc>
 8012cfa:	4b90      	ldr	r3, [pc, #576]	; (8012f3c <fm_menu_config_date_hour+0x500>)
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	2b1c      	cmp	r3, #28
 8012d00:	d902      	bls.n	8012d08 <fm_menu_config_date_hour+0x2cc>
                        {
                            day_enum = DAY_28;
 8012d02:	4b8e      	ldr	r3, [pc, #568]	; (8012f3c <fm_menu_config_date_hour+0x500>)
 8012d04:	221c      	movs	r2, #28
 8012d06:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum + 1,
 8012d08:	4b8c      	ldr	r3, [pc, #560]	; (8012f3c <fm_menu_config_date_hour+0x500>)
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	4b89      	ldr	r3, [pc, #548]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	3301      	adds	r3, #1
 8012d14:	4a88      	ldr	r2, [pc, #544]	; (8012f38 <fm_menu_config_date_hour+0x4fc>)
 8012d16:	7812      	ldrb	r2, [r2, #0]
 8012d18:	4619      	mov	r1, r3
 8012d1a:	f7fc fad9 	bl	800f2d0 <fm_factory_modify_date>
 8012d1e:	e094      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, JANUARY, year_enum);
 8012d20:	4b86      	ldr	r3, [pc, #536]	; (8012f3c <fm_menu_config_date_hour+0x500>)
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	4618      	mov	r0, r3
 8012d26:	4b84      	ldr	r3, [pc, #528]	; (8012f38 <fm_menu_config_date_hour+0x4fc>)
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	2101      	movs	r1, #1
 8012d2e:	f7fc facf 	bl	800f2d0 <fm_factory_modify_date>
 8012d32:	e08a      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == YEAR)
 8012d34:	4b82      	ldr	r3, [pc, #520]	; (8012f40 <fm_menu_config_date_hour+0x504>)
 8012d36:	781b      	ldrb	r3, [r3, #0]
 8012d38:	2b02      	cmp	r3, #2
 8012d3a:	d12c      	bne.n	8012d96 <fm_menu_config_date_hour+0x35a>
                {
                    if (year_enum < YEAR_99)
 8012d3c:	4b7e      	ldr	r3, [pc, #504]	; (8012f38 <fm_menu_config_date_hour+0x4fc>)
 8012d3e:	781b      	ldrb	r3, [r3, #0]
 8012d40:	2b62      	cmp	r3, #98	; 0x62
 8012d42:	d81e      	bhi.n	8012d82 <fm_menu_config_date_hour+0x346>
                    {
                        if (((year_enum + 1) % YEAR_4 != YEAR_0)
 8012d44:	4b7c      	ldr	r3, [pc, #496]	; (8012f38 <fm_menu_config_date_hour+0x4fc>)
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	3301      	adds	r3, #1
 8012d4a:	f003 0303 	and.w	r3, r3, #3
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d00a      	beq.n	8012d68 <fm_menu_config_date_hour+0x32c>
                        && (month_enum == FEBRUARY) && (day_enum > DAY_28))
 8012d52:	4b78      	ldr	r3, [pc, #480]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012d54:	781b      	ldrb	r3, [r3, #0]
 8012d56:	2b02      	cmp	r3, #2
 8012d58:	d106      	bne.n	8012d68 <fm_menu_config_date_hour+0x32c>
 8012d5a:	4b78      	ldr	r3, [pc, #480]	; (8012f3c <fm_menu_config_date_hour+0x500>)
 8012d5c:	781b      	ldrb	r3, [r3, #0]
 8012d5e:	2b1c      	cmp	r3, #28
 8012d60:	d902      	bls.n	8012d68 <fm_menu_config_date_hour+0x32c>
                        {
                            day_enum = DAY_28;
 8012d62:	4b76      	ldr	r3, [pc, #472]	; (8012f3c <fm_menu_config_date_hour+0x500>)
 8012d64:	221c      	movs	r2, #28
 8012d66:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 8012d68:	4b74      	ldr	r3, [pc, #464]	; (8012f3c <fm_menu_config_date_hour+0x500>)
 8012d6a:	781b      	ldrb	r3, [r3, #0]
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	4b71      	ldr	r3, [pc, #452]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	4619      	mov	r1, r3
 8012d74:	4b70      	ldr	r3, [pc, #448]	; (8012f38 <fm_menu_config_date_hour+0x4fc>)
 8012d76:	781b      	ldrb	r3, [r3, #0]
 8012d78:	3301      	adds	r3, #1
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	f7fc faa8 	bl	800f2d0 <fm_factory_modify_date>
 8012d80:	e063      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                        year_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_0);
 8012d82:	4b6e      	ldr	r3, [pc, #440]	; (8012f3c <fm_menu_config_date_hour+0x500>)
 8012d84:	781b      	ldrb	r3, [r3, #0]
 8012d86:	4618      	mov	r0, r3
 8012d88:	4b6a      	ldr	r3, [pc, #424]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012d8a:	781b      	ldrb	r3, [r3, #0]
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	4619      	mov	r1, r3
 8012d90:	f7fc fa9e 	bl	800f2d0 <fm_factory_modify_date>
 8012d94:	e059      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == HOUR)
 8012d96:	4b6a      	ldr	r3, [pc, #424]	; (8012f40 <fm_menu_config_date_hour+0x504>)
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	2b03      	cmp	r3, #3
 8012d9c:	d119      	bne.n	8012dd2 <fm_menu_config_date_hour+0x396>
                {
                    if (hour_enum < HOUR_23)
 8012d9e:	4b69      	ldr	r3, [pc, #420]	; (8012f44 <fm_menu_config_date_hour+0x508>)
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	2b16      	cmp	r3, #22
 8012da4:	d80b      	bhi.n	8012dbe <fm_menu_config_date_hour+0x382>
                    {
                        fm_factory_modify_time(hour_enum + 1, minute_enum,
 8012da6:	4b67      	ldr	r3, [pc, #412]	; (8012f44 <fm_menu_config_date_hour+0x508>)
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	3301      	adds	r3, #1
 8012dac:	4a66      	ldr	r2, [pc, #408]	; (8012f48 <fm_menu_config_date_hour+0x50c>)
 8012dae:	7812      	ldrb	r2, [r2, #0]
 8012db0:	4611      	mov	r1, r2
 8012db2:	4a66      	ldr	r2, [pc, #408]	; (8012f4c <fm_menu_config_date_hour+0x510>)
 8012db4:	7812      	ldrb	r2, [r2, #0]
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7fc fd96 	bl	800f8e8 <fm_factory_modify_time>
 8012dbc:	e045      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_0, minute_enum,
 8012dbe:	4b62      	ldr	r3, [pc, #392]	; (8012f48 <fm_menu_config_date_hour+0x50c>)
 8012dc0:	781b      	ldrb	r3, [r3, #0]
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	4b61      	ldr	r3, [pc, #388]	; (8012f4c <fm_menu_config_date_hour+0x510>)
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	461a      	mov	r2, r3
 8012dca:	2000      	movs	r0, #0
 8012dcc:	f7fc fd8c 	bl	800f8e8 <fm_factory_modify_time>
 8012dd0:	e03b      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                }
                else if (field == MINUTE)
 8012dd2:	4b5b      	ldr	r3, [pc, #364]	; (8012f40 <fm_menu_config_date_hour+0x504>)
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	2b04      	cmp	r3, #4
 8012dd8:	d119      	bne.n	8012e0e <fm_menu_config_date_hour+0x3d2>
                {
                    if (minute_enum < MINU_59)
 8012dda:	4b5b      	ldr	r3, [pc, #364]	; (8012f48 <fm_menu_config_date_hour+0x50c>)
 8012ddc:	781b      	ldrb	r3, [r3, #0]
 8012dde:	2b3a      	cmp	r3, #58	; 0x3a
 8012de0:	d80b      	bhi.n	8012dfa <fm_menu_config_date_hour+0x3be>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum + 1,
 8012de2:	4b58      	ldr	r3, [pc, #352]	; (8012f44 <fm_menu_config_date_hour+0x508>)
 8012de4:	781b      	ldrb	r3, [r3, #0]
 8012de6:	4618      	mov	r0, r3
 8012de8:	4b57      	ldr	r3, [pc, #348]	; (8012f48 <fm_menu_config_date_hour+0x50c>)
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	3301      	adds	r3, #1
 8012dee:	4a57      	ldr	r2, [pc, #348]	; (8012f4c <fm_menu_config_date_hour+0x510>)
 8012df0:	7812      	ldrb	r2, [r2, #0]
 8012df2:	4619      	mov	r1, r3
 8012df4:	f7fc fd78 	bl	800f8e8 <fm_factory_modify_time>
 8012df8:	e027      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_0, second_enum);
 8012dfa:	4b52      	ldr	r3, [pc, #328]	; (8012f44 <fm_menu_config_date_hour+0x508>)
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	4b52      	ldr	r3, [pc, #328]	; (8012f4c <fm_menu_config_date_hour+0x510>)
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	461a      	mov	r2, r3
 8012e06:	2100      	movs	r1, #0
 8012e08:	f7fc fd6e 	bl	800f8e8 <fm_factory_modify_time>
 8012e0c:	e01d      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == SECOND)
 8012e0e:	4b4c      	ldr	r3, [pc, #304]	; (8012f40 <fm_menu_config_date_hour+0x504>)
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	2b05      	cmp	r3, #5
 8012e14:	d119      	bne.n	8012e4a <fm_menu_config_date_hour+0x40e>
                {
                    if (second_enum < SEC_59)
 8012e16:	4b4d      	ldr	r3, [pc, #308]	; (8012f4c <fm_menu_config_date_hour+0x510>)
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	2b3a      	cmp	r3, #58	; 0x3a
 8012e1c:	d80c      	bhi.n	8012e38 <fm_menu_config_date_hour+0x3fc>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 8012e1e:	4b49      	ldr	r3, [pc, #292]	; (8012f44 <fm_menu_config_date_hour+0x508>)
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	4618      	mov	r0, r3
 8012e24:	4b48      	ldr	r3, [pc, #288]	; (8012f48 <fm_menu_config_date_hour+0x50c>)
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	4619      	mov	r1, r3
 8012e2a:	4b48      	ldr	r3, [pc, #288]	; (8012f4c <fm_menu_config_date_hour+0x510>)
 8012e2c:	781b      	ldrb	r3, [r3, #0]
 8012e2e:	3301      	adds	r3, #1
 8012e30:	461a      	mov	r2, r3
 8012e32:	f7fc fd59 	bl	800f8e8 <fm_factory_modify_time>
 8012e36:	e008      	b.n	8012e4a <fm_menu_config_date_hour+0x40e>
                        second_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_0);
 8012e38:	4b42      	ldr	r3, [pc, #264]	; (8012f44 <fm_menu_config_date_hour+0x508>)
 8012e3a:	781b      	ldrb	r3, [r3, #0]
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	4b42      	ldr	r3, [pc, #264]	; (8012f48 <fm_menu_config_date_hour+0x50c>)
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	2200      	movs	r2, #0
 8012e44:	4619      	mov	r1, r3
 8012e46:	f7fc fd4f 	bl	800f8e8 <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 8012e4a:	2301      	movs	r3, #1
 8012e4c:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012e4e:	f107 030b 	add.w	r3, r7, #11
 8012e52:	2200      	movs	r2, #0
 8012e54:	4619      	mov	r1, r3
 8012e56:	483e      	ldr	r0, [pc, #248]	; (8012f50 <fm_menu_config_date_hour+0x514>)
 8012e58:	f7fb fc84 	bl	800e764 <_txe_queue_send>
            }
        break;
 8012e5c:	e207      	b.n	801326e <fm_menu_config_date_hour+0x832>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8012e5e:	4b3d      	ldr	r3, [pc, #244]	; (8012f54 <fm_menu_config_date_hour+0x518>)
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	f000 8205 	beq.w	8013272 <fm_menu_config_date_hour+0x836>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if (field == DAY)
 8012e68:	4b35      	ldr	r3, [pc, #212]	; (8012f40 <fm_menu_config_date_hour+0x504>)
 8012e6a:	781b      	ldrb	r3, [r3, #0]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	f040 80ae 	bne.w	8012fce <fm_menu_config_date_hour+0x592>
                {
                    if (month_enum == JANUARY || month_enum == MARCH
 8012e72:	4b30      	ldr	r3, [pc, #192]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	2b01      	cmp	r3, #1
 8012e78:	d017      	beq.n	8012eaa <fm_menu_config_date_hour+0x46e>
 8012e7a:	4b2e      	ldr	r3, [pc, #184]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	2b03      	cmp	r3, #3
 8012e80:	d013      	beq.n	8012eaa <fm_menu_config_date_hour+0x46e>
                    || month_enum == MAY || month_enum == JULY
 8012e82:	4b2c      	ldr	r3, [pc, #176]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012e84:	781b      	ldrb	r3, [r3, #0]
 8012e86:	2b05      	cmp	r3, #5
 8012e88:	d00f      	beq.n	8012eaa <fm_menu_config_date_hour+0x46e>
 8012e8a:	4b2a      	ldr	r3, [pc, #168]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012e8c:	781b      	ldrb	r3, [r3, #0]
 8012e8e:	2b07      	cmp	r3, #7
 8012e90:	d00b      	beq.n	8012eaa <fm_menu_config_date_hour+0x46e>
                    || month_enum == AUGUST || month_enum == OCTOBER
 8012e92:	4b28      	ldr	r3, [pc, #160]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	2b08      	cmp	r3, #8
 8012e98:	d007      	beq.n	8012eaa <fm_menu_config_date_hour+0x46e>
 8012e9a:	4b26      	ldr	r3, [pc, #152]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012e9c:	781b      	ldrb	r3, [r3, #0]
 8012e9e:	2b0a      	cmp	r3, #10
 8012ea0:	d003      	beq.n	8012eaa <fm_menu_config_date_hour+0x46e>
                    || month_enum == DECEMBER)
 8012ea2:	4b24      	ldr	r3, [pc, #144]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012ea4:	781b      	ldrb	r3, [r3, #0]
 8012ea6:	2b0c      	cmp	r3, #12
 8012ea8:	d119      	bne.n	8012ede <fm_menu_config_date_hour+0x4a2>
                    {
                        if (day_enum > DAY_1)
 8012eaa:	4b24      	ldr	r3, [pc, #144]	; (8012f3c <fm_menu_config_date_hour+0x500>)
 8012eac:	781b      	ldrb	r3, [r3, #0]
 8012eae:	2b01      	cmp	r3, #1
 8012eb0:	d90b      	bls.n	8012eca <fm_menu_config_date_hour+0x48e>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012eb2:	4b22      	ldr	r3, [pc, #136]	; (8012f3c <fm_menu_config_date_hour+0x500>)
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	3b01      	subs	r3, #1
 8012eb8:	4a1e      	ldr	r2, [pc, #120]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012eba:	7812      	ldrb	r2, [r2, #0]
 8012ebc:	4611      	mov	r1, r2
 8012ebe:	4a1e      	ldr	r2, [pc, #120]	; (8012f38 <fm_menu_config_date_hour+0x4fc>)
 8012ec0:	7812      	ldrb	r2, [r2, #0]
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7fc fa04 	bl	800f2d0 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012ec8:	e167      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_31, month_enum,
 8012eca:	4b1a      	ldr	r3, [pc, #104]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	4619      	mov	r1, r3
 8012ed0:	4b19      	ldr	r3, [pc, #100]	; (8012f38 <fm_menu_config_date_hour+0x4fc>)
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	461a      	mov	r2, r3
 8012ed6:	201f      	movs	r0, #31
 8012ed8:	f7fc f9fa 	bl	800f2d0 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012edc:	e15d      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                    }
                    else if (month_enum == APRIL || month_enum == JUNE
 8012ede:	4b15      	ldr	r3, [pc, #84]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012ee0:	781b      	ldrb	r3, [r3, #0]
 8012ee2:	2b04      	cmp	r3, #4
 8012ee4:	d00b      	beq.n	8012efe <fm_menu_config_date_hour+0x4c2>
 8012ee6:	4b13      	ldr	r3, [pc, #76]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	2b06      	cmp	r3, #6
 8012eec:	d007      	beq.n	8012efe <fm_menu_config_date_hour+0x4c2>
                    || month_enum == SEPTEMBER || month_enum == NOVEMBER)
 8012eee:	4b11      	ldr	r3, [pc, #68]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	2b09      	cmp	r3, #9
 8012ef4:	d003      	beq.n	8012efe <fm_menu_config_date_hour+0x4c2>
 8012ef6:	4b0f      	ldr	r3, [pc, #60]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012ef8:	781b      	ldrb	r3, [r3, #0]
 8012efa:	2b0b      	cmp	r3, #11
 8012efc:	d12c      	bne.n	8012f58 <fm_menu_config_date_hour+0x51c>
                    {
                        if (day_enum > DAY_1)
 8012efe:	4b0f      	ldr	r3, [pc, #60]	; (8012f3c <fm_menu_config_date_hour+0x500>)
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	2b01      	cmp	r3, #1
 8012f04:	d90b      	bls.n	8012f1e <fm_menu_config_date_hour+0x4e2>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012f06:	4b0d      	ldr	r3, [pc, #52]	; (8012f3c <fm_menu_config_date_hour+0x500>)
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	3b01      	subs	r3, #1
 8012f0c:	4a09      	ldr	r2, [pc, #36]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012f0e:	7812      	ldrb	r2, [r2, #0]
 8012f10:	4611      	mov	r1, r2
 8012f12:	4a09      	ldr	r2, [pc, #36]	; (8012f38 <fm_menu_config_date_hour+0x4fc>)
 8012f14:	7812      	ldrb	r2, [r2, #0]
 8012f16:	4618      	mov	r0, r3
 8012f18:	f7fc f9da 	bl	800f2d0 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012f1c:	e13d      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_30, month_enum,
 8012f1e:	4b05      	ldr	r3, [pc, #20]	; (8012f34 <fm_menu_config_date_hour+0x4f8>)
 8012f20:	781b      	ldrb	r3, [r3, #0]
 8012f22:	4619      	mov	r1, r3
 8012f24:	4b04      	ldr	r3, [pc, #16]	; (8012f38 <fm_menu_config_date_hour+0x4fc>)
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	461a      	mov	r2, r3
 8012f2a:	201e      	movs	r0, #30
 8012f2c:	f7fc f9d0 	bl	800f2d0 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012f30:	e133      	b.n	801319a <fm_menu_config_date_hour+0x75e>
 8012f32:	bf00      	nop
 8012f34:	20001e17 	.word	0x20001e17
 8012f38:	20001e18 	.word	0x20001e18
 8012f3c:	20001e16 	.word	0x20001e16
 8012f40:	20001e15 	.word	0x20001e15
 8012f44:	20001e19 	.word	0x20001e19
 8012f48:	20001e1a 	.word	0x20001e1a
 8012f4c:	20001e1b 	.word	0x20001e1b
 8012f50:	20001388 	.word	0x20001388
 8012f54:	20001e12 	.word	0x20001e12
                            year_enum);
                        }
                    }
                    else
                    {
                        if (year_enum % YEAR_4 == 0)
 8012f58:	4b95      	ldr	r3, [pc, #596]	; (80131b0 <fm_menu_config_date_hour+0x774>)
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	f003 0303 	and.w	r3, r3, #3
 8012f60:	b2db      	uxtb	r3, r3
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d119      	bne.n	8012f9a <fm_menu_config_date_hour+0x55e>
                        {
                            if (day_enum > DAY_1)
 8012f66:	4b93      	ldr	r3, [pc, #588]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	2b01      	cmp	r3, #1
 8012f6c:	d90b      	bls.n	8012f86 <fm_menu_config_date_hour+0x54a>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 8012f6e:	4b91      	ldr	r3, [pc, #580]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	3b01      	subs	r3, #1
 8012f74:	4a90      	ldr	r2, [pc, #576]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 8012f76:	7812      	ldrb	r2, [r2, #0]
 8012f78:	4611      	mov	r1, r2
 8012f7a:	4a8d      	ldr	r2, [pc, #564]	; (80131b0 <fm_menu_config_date_hour+0x774>)
 8012f7c:	7812      	ldrb	r2, [r2, #0]
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7fc f9a6 	bl	800f2d0 <fm_factory_modify_date>
 8012f84:	e109      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_29, month_enum,
 8012f86:	4b8c      	ldr	r3, [pc, #560]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 8012f88:	781b      	ldrb	r3, [r3, #0]
 8012f8a:	4619      	mov	r1, r3
 8012f8c:	4b88      	ldr	r3, [pc, #544]	; (80131b0 <fm_menu_config_date_hour+0x774>)
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	461a      	mov	r2, r3
 8012f92:	201d      	movs	r0, #29
 8012f94:	f7fc f99c 	bl	800f2d0 <fm_factory_modify_date>
 8012f98:	e0ff      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if (day_enum > DAY_1)
 8012f9a:	4b86      	ldr	r3, [pc, #536]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 8012f9c:	781b      	ldrb	r3, [r3, #0]
 8012f9e:	2b01      	cmp	r3, #1
 8012fa0:	d90b      	bls.n	8012fba <fm_menu_config_date_hour+0x57e>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 8012fa2:	4b84      	ldr	r3, [pc, #528]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 8012fa4:	781b      	ldrb	r3, [r3, #0]
 8012fa6:	3b01      	subs	r3, #1
 8012fa8:	4a83      	ldr	r2, [pc, #524]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 8012faa:	7812      	ldrb	r2, [r2, #0]
 8012fac:	4611      	mov	r1, r2
 8012fae:	4a80      	ldr	r2, [pc, #512]	; (80131b0 <fm_menu_config_date_hour+0x774>)
 8012fb0:	7812      	ldrb	r2, [r2, #0]
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7fc f98c 	bl	800f2d0 <fm_factory_modify_date>
 8012fb8:	e0ef      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_28, month_enum,
 8012fba:	4b7f      	ldr	r3, [pc, #508]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	4b7b      	ldr	r3, [pc, #492]	; (80131b0 <fm_menu_config_date_hour+0x774>)
 8012fc2:	781b      	ldrb	r3, [r3, #0]
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	201c      	movs	r0, #28
 8012fc8:	f7fc f982 	bl	800f2d0 <fm_factory_modify_date>
 8012fcc:	e0e5      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                    }
                }
                else if (field == MONTH)
 8012fce:	4b7b      	ldr	r3, [pc, #492]	; (80131bc <fm_menu_config_date_hour+0x780>)
 8012fd0:	781b      	ldrb	r3, [r3, #0]
 8012fd2:	2b01      	cmp	r3, #1
 8012fd4:	d156      	bne.n	8013084 <fm_menu_config_date_hour+0x648>
                {
                    if (month_enum > JANUARY)
 8012fd6:	4b78      	ldr	r3, [pc, #480]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 8012fd8:	781b      	ldrb	r3, [r3, #0]
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d948      	bls.n	8013070 <fm_menu_config_date_hour+0x634>
                    {
                        if ((month_enum - 1 == APRIL || month_enum - 1 == JUNE
 8012fde:	4b76      	ldr	r3, [pc, #472]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 8012fe0:	781b      	ldrb	r3, [r3, #0]
 8012fe2:	2b05      	cmp	r3, #5
 8012fe4:	d00b      	beq.n	8012ffe <fm_menu_config_date_hour+0x5c2>
 8012fe6:	4b74      	ldr	r3, [pc, #464]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 8012fe8:	781b      	ldrb	r3, [r3, #0]
 8012fea:	2b07      	cmp	r3, #7
 8012fec:	d007      	beq.n	8012ffe <fm_menu_config_date_hour+0x5c2>
                        || month_enum - 1 == SEPTEMBER
 8012fee:	4b72      	ldr	r3, [pc, #456]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	2b0a      	cmp	r3, #10
 8012ff4:	d003      	beq.n	8012ffe <fm_menu_config_date_hour+0x5c2>
                        || month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 8012ff6:	4b70      	ldr	r3, [pc, #448]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	2b0c      	cmp	r3, #12
 8012ffc:	d107      	bne.n	801300e <fm_menu_config_date_hour+0x5d2>
 8012ffe:	4b6d      	ldr	r3, [pc, #436]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	2b1e      	cmp	r3, #30
 8013004:	d903      	bls.n	801300e <fm_menu_config_date_hour+0x5d2>
                        {
                            day_enum = DAY_30;
 8013006:	4b6b      	ldr	r3, [pc, #428]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 8013008:	221e      	movs	r2, #30
 801300a:	701a      	strb	r2, [r3, #0]
 801300c:	e024      	b.n	8013058 <fm_menu_config_date_hour+0x61c>
                        }
                        else if ((month_enum - 1 == FEBRUARY)
 801300e:	4b6a      	ldr	r3, [pc, #424]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 8013010:	781b      	ldrb	r3, [r3, #0]
 8013012:	2b03      	cmp	r3, #3
 8013014:	d10e      	bne.n	8013034 <fm_menu_config_date_hour+0x5f8>
                        && (year_enum % YEAR_4 == 0) && (day_enum > DAY_29))
 8013016:	4b66      	ldr	r3, [pc, #408]	; (80131b0 <fm_menu_config_date_hour+0x774>)
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	f003 0303 	and.w	r3, r3, #3
 801301e:	b2db      	uxtb	r3, r3
 8013020:	2b00      	cmp	r3, #0
 8013022:	d107      	bne.n	8013034 <fm_menu_config_date_hour+0x5f8>
 8013024:	4b63      	ldr	r3, [pc, #396]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 8013026:	781b      	ldrb	r3, [r3, #0]
 8013028:	2b1d      	cmp	r3, #29
 801302a:	d903      	bls.n	8013034 <fm_menu_config_date_hour+0x5f8>
                        {
                            day_enum = DAY_29;
 801302c:	4b61      	ldr	r3, [pc, #388]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 801302e:	221d      	movs	r2, #29
 8013030:	701a      	strb	r2, [r3, #0]
 8013032:	e011      	b.n	8013058 <fm_menu_config_date_hour+0x61c>
                        }
                        else if ((month_enum - 1 == FEBRUARY)
 8013034:	4b60      	ldr	r3, [pc, #384]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	2b03      	cmp	r3, #3
 801303a:	d10d      	bne.n	8013058 <fm_menu_config_date_hour+0x61c>
                        && (year_enum % YEAR_4 != 0) && (day_enum > DAY_28))
 801303c:	4b5c      	ldr	r3, [pc, #368]	; (80131b0 <fm_menu_config_date_hour+0x774>)
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	f003 0303 	and.w	r3, r3, #3
 8013044:	b2db      	uxtb	r3, r3
 8013046:	2b00      	cmp	r3, #0
 8013048:	d006      	beq.n	8013058 <fm_menu_config_date_hour+0x61c>
 801304a:	4b5a      	ldr	r3, [pc, #360]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	2b1c      	cmp	r3, #28
 8013050:	d902      	bls.n	8013058 <fm_menu_config_date_hour+0x61c>
                        {
                            day_enum = DAY_28;
 8013052:	4b58      	ldr	r3, [pc, #352]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 8013054:	221c      	movs	r2, #28
 8013056:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum - 1,
 8013058:	4b56      	ldr	r3, [pc, #344]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	4618      	mov	r0, r3
 801305e:	4b56      	ldr	r3, [pc, #344]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 8013060:	781b      	ldrb	r3, [r3, #0]
 8013062:	3b01      	subs	r3, #1
 8013064:	4a52      	ldr	r2, [pc, #328]	; (80131b0 <fm_menu_config_date_hour+0x774>)
 8013066:	7812      	ldrb	r2, [r2, #0]
 8013068:	4619      	mov	r1, r3
 801306a:	f7fc f931 	bl	800f2d0 <fm_factory_modify_date>
 801306e:	e094      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, DECEMBER, year_enum);
 8013070:	4b50      	ldr	r3, [pc, #320]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	4618      	mov	r0, r3
 8013076:	4b4e      	ldr	r3, [pc, #312]	; (80131b0 <fm_menu_config_date_hour+0x774>)
 8013078:	781b      	ldrb	r3, [r3, #0]
 801307a:	461a      	mov	r2, r3
 801307c:	210c      	movs	r1, #12
 801307e:	f7fc f927 	bl	800f2d0 <fm_factory_modify_date>
 8013082:	e08a      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == YEAR)
 8013084:	4b4d      	ldr	r3, [pc, #308]	; (80131bc <fm_menu_config_date_hour+0x780>)
 8013086:	781b      	ldrb	r3, [r3, #0]
 8013088:	2b02      	cmp	r3, #2
 801308a:	d12c      	bne.n	80130e6 <fm_menu_config_date_hour+0x6aa>
                {
                    if (year_enum > YEAR_0)
 801308c:	4b48      	ldr	r3, [pc, #288]	; (80131b0 <fm_menu_config_date_hour+0x774>)
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d01e      	beq.n	80130d2 <fm_menu_config_date_hour+0x696>
                    {
                        if (((year_enum - 1) % YEAR_4 != YEAR_0)
 8013094:	4b46      	ldr	r3, [pc, #280]	; (80131b0 <fm_menu_config_date_hour+0x774>)
 8013096:	781b      	ldrb	r3, [r3, #0]
 8013098:	3b01      	subs	r3, #1
 801309a:	f003 0303 	and.w	r3, r3, #3
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d00a      	beq.n	80130b8 <fm_menu_config_date_hour+0x67c>
                        && (month_enum == FEBRUARY) && (day_enum > DAY_28))
 80130a2:	4b45      	ldr	r3, [pc, #276]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 80130a4:	781b      	ldrb	r3, [r3, #0]
 80130a6:	2b02      	cmp	r3, #2
 80130a8:	d106      	bne.n	80130b8 <fm_menu_config_date_hour+0x67c>
 80130aa:	4b42      	ldr	r3, [pc, #264]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	2b1c      	cmp	r3, #28
 80130b0:	d902      	bls.n	80130b8 <fm_menu_config_date_hour+0x67c>
                        {
                            day_enum = DAY_28;
 80130b2:	4b40      	ldr	r3, [pc, #256]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 80130b4:	221c      	movs	r2, #28
 80130b6:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 80130b8:	4b3e      	ldr	r3, [pc, #248]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	4618      	mov	r0, r3
 80130be:	4b3e      	ldr	r3, [pc, #248]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	4619      	mov	r1, r3
 80130c4:	4b3a      	ldr	r3, [pc, #232]	; (80131b0 <fm_menu_config_date_hour+0x774>)
 80130c6:	781b      	ldrb	r3, [r3, #0]
 80130c8:	3b01      	subs	r3, #1
 80130ca:	461a      	mov	r2, r3
 80130cc:	f7fc f900 	bl	800f2d0 <fm_factory_modify_date>
 80130d0:	e063      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                        year_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_99);
 80130d2:	4b38      	ldr	r3, [pc, #224]	; (80131b4 <fm_menu_config_date_hour+0x778>)
 80130d4:	781b      	ldrb	r3, [r3, #0]
 80130d6:	4618      	mov	r0, r3
 80130d8:	4b37      	ldr	r3, [pc, #220]	; (80131b8 <fm_menu_config_date_hour+0x77c>)
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	2263      	movs	r2, #99	; 0x63
 80130de:	4619      	mov	r1, r3
 80130e0:	f7fc f8f6 	bl	800f2d0 <fm_factory_modify_date>
 80130e4:	e059      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == HOUR)
 80130e6:	4b35      	ldr	r3, [pc, #212]	; (80131bc <fm_menu_config_date_hour+0x780>)
 80130e8:	781b      	ldrb	r3, [r3, #0]
 80130ea:	2b03      	cmp	r3, #3
 80130ec:	d119      	bne.n	8013122 <fm_menu_config_date_hour+0x6e6>
                {
                    if (hour_enum > HOUR_0)
 80130ee:	4b34      	ldr	r3, [pc, #208]	; (80131c0 <fm_menu_config_date_hour+0x784>)
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d00b      	beq.n	801310e <fm_menu_config_date_hour+0x6d2>
                    {
                        fm_factory_modify_time(hour_enum - 1, minute_enum,
 80130f6:	4b32      	ldr	r3, [pc, #200]	; (80131c0 <fm_menu_config_date_hour+0x784>)
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	3b01      	subs	r3, #1
 80130fc:	4a31      	ldr	r2, [pc, #196]	; (80131c4 <fm_menu_config_date_hour+0x788>)
 80130fe:	7812      	ldrb	r2, [r2, #0]
 8013100:	4611      	mov	r1, r2
 8013102:	4a31      	ldr	r2, [pc, #196]	; (80131c8 <fm_menu_config_date_hour+0x78c>)
 8013104:	7812      	ldrb	r2, [r2, #0]
 8013106:	4618      	mov	r0, r3
 8013108:	f7fc fbee 	bl	800f8e8 <fm_factory_modify_time>
 801310c:	e045      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_23, minute_enum,
 801310e:	4b2d      	ldr	r3, [pc, #180]	; (80131c4 <fm_menu_config_date_hour+0x788>)
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	4619      	mov	r1, r3
 8013114:	4b2c      	ldr	r3, [pc, #176]	; (80131c8 <fm_menu_config_date_hour+0x78c>)
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	461a      	mov	r2, r3
 801311a:	2017      	movs	r0, #23
 801311c:	f7fc fbe4 	bl	800f8e8 <fm_factory_modify_time>
 8013120:	e03b      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                }
                else if (field == MINUTE)
 8013122:	4b26      	ldr	r3, [pc, #152]	; (80131bc <fm_menu_config_date_hour+0x780>)
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	2b04      	cmp	r3, #4
 8013128:	d119      	bne.n	801315e <fm_menu_config_date_hour+0x722>
                {
                    if (minute_enum > MINU_0)
 801312a:	4b26      	ldr	r3, [pc, #152]	; (80131c4 <fm_menu_config_date_hour+0x788>)
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d00b      	beq.n	801314a <fm_menu_config_date_hour+0x70e>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum - 1,
 8013132:	4b23      	ldr	r3, [pc, #140]	; (80131c0 <fm_menu_config_date_hour+0x784>)
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	4618      	mov	r0, r3
 8013138:	4b22      	ldr	r3, [pc, #136]	; (80131c4 <fm_menu_config_date_hour+0x788>)
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	3b01      	subs	r3, #1
 801313e:	4a22      	ldr	r2, [pc, #136]	; (80131c8 <fm_menu_config_date_hour+0x78c>)
 8013140:	7812      	ldrb	r2, [r2, #0]
 8013142:	4619      	mov	r1, r3
 8013144:	f7fc fbd0 	bl	800f8e8 <fm_factory_modify_time>
 8013148:	e027      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_59, second_enum);
 801314a:	4b1d      	ldr	r3, [pc, #116]	; (80131c0 <fm_menu_config_date_hour+0x784>)
 801314c:	781b      	ldrb	r3, [r3, #0]
 801314e:	4618      	mov	r0, r3
 8013150:	4b1d      	ldr	r3, [pc, #116]	; (80131c8 <fm_menu_config_date_hour+0x78c>)
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	461a      	mov	r2, r3
 8013156:	213b      	movs	r1, #59	; 0x3b
 8013158:	f7fc fbc6 	bl	800f8e8 <fm_factory_modify_time>
 801315c:	e01d      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == SECOND)
 801315e:	4b17      	ldr	r3, [pc, #92]	; (80131bc <fm_menu_config_date_hour+0x780>)
 8013160:	781b      	ldrb	r3, [r3, #0]
 8013162:	2b05      	cmp	r3, #5
 8013164:	d119      	bne.n	801319a <fm_menu_config_date_hour+0x75e>
                {
                    if (second_enum > SEC_0)
 8013166:	4b18      	ldr	r3, [pc, #96]	; (80131c8 <fm_menu_config_date_hour+0x78c>)
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d00c      	beq.n	8013188 <fm_menu_config_date_hour+0x74c>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 801316e:	4b14      	ldr	r3, [pc, #80]	; (80131c0 <fm_menu_config_date_hour+0x784>)
 8013170:	781b      	ldrb	r3, [r3, #0]
 8013172:	4618      	mov	r0, r3
 8013174:	4b13      	ldr	r3, [pc, #76]	; (80131c4 <fm_menu_config_date_hour+0x788>)
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	4619      	mov	r1, r3
 801317a:	4b13      	ldr	r3, [pc, #76]	; (80131c8 <fm_menu_config_date_hour+0x78c>)
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	3b01      	subs	r3, #1
 8013180:	461a      	mov	r2, r3
 8013182:	f7fc fbb1 	bl	800f8e8 <fm_factory_modify_time>
 8013186:	e008      	b.n	801319a <fm_menu_config_date_hour+0x75e>
                        second_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_59);
 8013188:	4b0d      	ldr	r3, [pc, #52]	; (80131c0 <fm_menu_config_date_hour+0x784>)
 801318a:	781b      	ldrb	r3, [r3, #0]
 801318c:	4618      	mov	r0, r3
 801318e:	4b0d      	ldr	r3, [pc, #52]	; (80131c4 <fm_menu_config_date_hour+0x788>)
 8013190:	781b      	ldrb	r3, [r3, #0]
 8013192:	223b      	movs	r2, #59	; 0x3b
 8013194:	4619      	mov	r1, r3
 8013196:	f7fc fba7 	bl	800f8e8 <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 801319a:	2301      	movs	r3, #1
 801319c:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801319e:	f107 030b 	add.w	r3, r7, #11
 80131a2:	2200      	movs	r2, #0
 80131a4:	4619      	mov	r1, r3
 80131a6:	4809      	ldr	r0, [pc, #36]	; (80131cc <fm_menu_config_date_hour+0x790>)
 80131a8:	f7fb fadc 	bl	800e764 <_txe_queue_send>
            }
        break;
 80131ac:	e061      	b.n	8013272 <fm_menu_config_date_hour+0x836>
 80131ae:	bf00      	nop
 80131b0:	20001e18 	.word	0x20001e18
 80131b4:	20001e16 	.word	0x20001e16
 80131b8:	20001e17 	.word	0x20001e17
 80131bc:	20001e15 	.word	0x20001e15
 80131c0:	20001e19 	.word	0x20001e19
 80131c4:	20001e1a 	.word	0x20001e1a
 80131c8:	20001e1b 	.word	0x20001e1b
 80131cc:	20001388 	.word	0x20001388
        case EVENT_KEY_ENTER:
            if (correct_password)
 80131d0:	4b4e      	ldr	r3, [pc, #312]	; (801330c <fm_menu_config_date_hour+0x8d0>)
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d04e      	beq.n	8013276 <fm_menu_config_date_hour+0x83a>
            {
                /*
                 * Se cambia qué parámetro se va a modificar según cual estaba
                 * seleccionado para modificarse actualmente.
                 */
                if (field == DAY)
 80131d8:	4b4d      	ldr	r3, [pc, #308]	; (8013310 <fm_menu_config_date_hour+0x8d4>)
 80131da:	781b      	ldrb	r3, [r3, #0]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d103      	bne.n	80131e8 <fm_menu_config_date_hour+0x7ac>
                {
                    field = MONTH;
 80131e0:	4b4b      	ldr	r3, [pc, #300]	; (8013310 <fm_menu_config_date_hour+0x8d4>)
 80131e2:	2201      	movs	r2, #1
 80131e4:	701a      	strb	r2, [r3, #0]
 80131e6:	e026      	b.n	8013236 <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == MONTH)
 80131e8:	4b49      	ldr	r3, [pc, #292]	; (8013310 <fm_menu_config_date_hour+0x8d4>)
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d103      	bne.n	80131f8 <fm_menu_config_date_hour+0x7bc>
                {
                    field = YEAR;
 80131f0:	4b47      	ldr	r3, [pc, #284]	; (8013310 <fm_menu_config_date_hour+0x8d4>)
 80131f2:	2202      	movs	r2, #2
 80131f4:	701a      	strb	r2, [r3, #0]
 80131f6:	e01e      	b.n	8013236 <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == YEAR)
 80131f8:	4b45      	ldr	r3, [pc, #276]	; (8013310 <fm_menu_config_date_hour+0x8d4>)
 80131fa:	781b      	ldrb	r3, [r3, #0]
 80131fc:	2b02      	cmp	r3, #2
 80131fe:	d103      	bne.n	8013208 <fm_menu_config_date_hour+0x7cc>
                {
                    field = HOUR;
 8013200:	4b43      	ldr	r3, [pc, #268]	; (8013310 <fm_menu_config_date_hour+0x8d4>)
 8013202:	2203      	movs	r2, #3
 8013204:	701a      	strb	r2, [r3, #0]
 8013206:	e016      	b.n	8013236 <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == HOUR)
 8013208:	4b41      	ldr	r3, [pc, #260]	; (8013310 <fm_menu_config_date_hour+0x8d4>)
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	2b03      	cmp	r3, #3
 801320e:	d103      	bne.n	8013218 <fm_menu_config_date_hour+0x7dc>
                {
                    field = MINUTE;
 8013210:	4b3f      	ldr	r3, [pc, #252]	; (8013310 <fm_menu_config_date_hour+0x8d4>)
 8013212:	2204      	movs	r2, #4
 8013214:	701a      	strb	r2, [r3, #0]
 8013216:	e00e      	b.n	8013236 <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == MINUTE)
 8013218:	4b3d      	ldr	r3, [pc, #244]	; (8013310 <fm_menu_config_date_hour+0x8d4>)
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	2b04      	cmp	r3, #4
 801321e:	d103      	bne.n	8013228 <fm_menu_config_date_hour+0x7ec>
                {
                    field = SECOND;
 8013220:	4b3b      	ldr	r3, [pc, #236]	; (8013310 <fm_menu_config_date_hour+0x8d4>)
 8013222:	2205      	movs	r2, #5
 8013224:	701a      	strb	r2, [r3, #0]
 8013226:	e006      	b.n	8013236 <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == SECOND)
 8013228:	4b39      	ldr	r3, [pc, #228]	; (8013310 <fm_menu_config_date_hour+0x8d4>)
 801322a:	781b      	ldrb	r3, [r3, #0]
 801322c:	2b05      	cmp	r3, #5
 801322e:	d102      	bne.n	8013236 <fm_menu_config_date_hour+0x7fa>
                {
                    field = DAY;
 8013230:	4b37      	ldr	r3, [pc, #220]	; (8013310 <fm_menu_config_date_hour+0x8d4>)
 8013232:	2200      	movs	r2, #0
 8013234:	701a      	strb	r2, [r3, #0]
                }
                event_now = EVENT_LCD_REFRESH;
 8013236:	2301      	movs	r3, #1
 8013238:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801323a:	f107 030b 	add.w	r3, r7, #11
 801323e:	2200      	movs	r2, #0
 8013240:	4619      	mov	r1, r3
 8013242:	4834      	ldr	r0, [pc, #208]	; (8013314 <fm_menu_config_date_hour+0x8d8>)
 8013244:	f7fb fa8e 	bl	800e764 <_txe_queue_send>
            }
        break;
 8013248:	e015      	b.n	8013276 <fm_menu_config_date_hour+0x83a>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801324a:	4b33      	ldr	r3, [pc, #204]	; (8013318 <fm_menu_config_date_hour+0x8dc>)
 801324c:	2201      	movs	r2, #1
 801324e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013250:	4b32      	ldr	r3, [pc, #200]	; (801331c <fm_menu_config_date_hour+0x8e0>)
 8013252:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            event_now = EVENT_LCD_REFRESH;
 8013256:	2301      	movs	r3, #1
 8013258:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801325a:	f107 030b 	add.w	r3, r7, #11
 801325e:	2200      	movs	r2, #0
 8013260:	4619      	mov	r1, r3
 8013262:	482c      	ldr	r0, [pc, #176]	; (8013314 <fm_menu_config_date_hour+0x8d8>)
 8013264:	f7fb fa7e 	bl	800e764 <_txe_queue_send>
        break;
 8013268:	e006      	b.n	8013278 <fm_menu_config_date_hour+0x83c>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801326a:	bf00      	nop
 801326c:	e004      	b.n	8013278 <fm_menu_config_date_hour+0x83c>
        break;
 801326e:	bf00      	nop
 8013270:	e002      	b.n	8013278 <fm_menu_config_date_hour+0x83c>
        break;
 8013272:	bf00      	nop
 8013274:	e000      	b.n	8013278 <fm_menu_config_date_hour+0x83c>
        break;
 8013276:	bf00      	nop
    }

    previous_event = event_id;
 8013278:	4a29      	ldr	r2, [pc, #164]	; (8013320 <fm_menu_config_date_hour+0x8e4>)
 801327a:	79fb      	ldrb	r3, [r7, #7]
 801327c:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar fecha y hora\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 801327e:	4b26      	ldr	r3, [pc, #152]	; (8013318 <fm_menu_config_date_hour+0x8dc>)
 8013280:	781b      	ldrb	r3, [r3, #0]
 8013282:	2b01      	cmp	r3, #1
 8013284:	d13b      	bne.n	80132fe <fm_menu_config_date_hour+0x8c2>
    {
        if (correct_password)
 8013286:	4b21      	ldr	r3, [pc, #132]	; (801330c <fm_menu_config_date_hour+0x8d0>)
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d02e      	beq.n	80132ec <fm_menu_config_date_hour+0x8b0>
             * encuentren corrompidos y se lea cualquier cosa. Para mas info de
             * esto ver el link siguiente:
             *
             * http://www.efton.sk/STM32/gotcha/g113.html
             */
            date_final.Date = day_enum;
 801328e:	4b25      	ldr	r3, [pc, #148]	; (8013324 <fm_menu_config_date_hour+0x8e8>)
 8013290:	781b      	ldrb	r3, [r3, #0]
 8013292:	73bb      	strb	r3, [r7, #14]
            date_final.Month = month_enum;
 8013294:	4b24      	ldr	r3, [pc, #144]	; (8013328 <fm_menu_config_date_hour+0x8ec>)
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	737b      	strb	r3, [r7, #13]
            date_final.Year = year_enum;
 801329a:	4b24      	ldr	r3, [pc, #144]	; (801332c <fm_menu_config_date_hour+0x8f0>)
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	73fb      	strb	r3, [r7, #15]
            date_final.WeekDay = RTC_WEEKDAY_FRIDAY;
 80132a0:	2305      	movs	r3, #5
 80132a2:	733b      	strb	r3, [r7, #12]

            HAL_RTC_SetDate(&hrtc, &date_final, RTC_FORMAT_BIN);
 80132a4:	f107 030c 	add.w	r3, r7, #12
 80132a8:	2200      	movs	r2, #0
 80132aa:	4619      	mov	r1, r3
 80132ac:	4820      	ldr	r0, [pc, #128]	; (8013330 <fm_menu_config_date_hour+0x8f4>)
 80132ae:	f7f6 f8f1 	bl	8009494 <HAL_RTC_SetDate>

            /*
             * Idem que lo de la fecha escrito arriba, pero para la hora, y en
             * general siempre que se use la HAL completando estructuras.
             */
            time_final.Hours = hour_enum;
 80132b2:	4b20      	ldr	r3, [pc, #128]	; (8013334 <fm_menu_config_date_hour+0x8f8>)
 80132b4:	781b      	ldrb	r3, [r3, #0]
 80132b6:	743b      	strb	r3, [r7, #16]
            time_final.Minutes = minute_enum;
 80132b8:	4b1f      	ldr	r3, [pc, #124]	; (8013338 <fm_menu_config_date_hour+0x8fc>)
 80132ba:	781b      	ldrb	r3, [r3, #0]
 80132bc:	747b      	strb	r3, [r7, #17]
            time_final.Seconds = second_enum;
 80132be:	4b1f      	ldr	r3, [pc, #124]	; (801333c <fm_menu_config_date_hour+0x900>)
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	74bb      	strb	r3, [r7, #18]
            time_final.SecondFraction = 0;
 80132c4:	2300      	movs	r3, #0
 80132c6:	61bb      	str	r3, [r7, #24]
            time_final.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80132c8:	2300      	movs	r3, #0
 80132ca:	61fb      	str	r3, [r7, #28]
            time_final.StoreOperation = RTC_STOREOPERATION_RESET;
 80132cc:	2300      	movs	r3, #0
 80132ce:	623b      	str	r3, [r7, #32]
            time_final.SubSeconds = 0;
 80132d0:	2300      	movs	r3, #0
 80132d2:	617b      	str	r3, [r7, #20]
            time_final.TimeFormat = RTC_HOURFORMAT12_AM;
 80132d4:	2300      	movs	r3, #0
 80132d6:	74fb      	strb	r3, [r7, #19]

            HAL_RTC_SetTime(&hrtc, &time_final, RTC_FORMAT_BIN);
 80132d8:	f107 0310 	add.w	r3, r7, #16
 80132dc:	2200      	movs	r2, #0
 80132de:	4619      	mov	r1, r3
 80132e0:	4813      	ldr	r0, [pc, #76]	; (8013330 <fm_menu_config_date_hour+0x8f4>)
 80132e2:	f7f5 ffc9 	bl	8009278 <HAL_RTC_SetTime>

            correct_password = 0;
 80132e6:	4b09      	ldr	r3, [pc, #36]	; (801330c <fm_menu_config_date_hour+0x8d0>)
 80132e8:	2200      	movs	r2, #0
 80132ea:	701a      	strb	r2, [r3, #0]
        }
        in_configuration = 0;
 80132ec:	4b14      	ldr	r3, [pc, #80]	; (8013340 <fm_menu_config_date_hour+0x904>)
 80132ee:	2200      	movs	r2, #0
 80132f0:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80132f2:	4b14      	ldr	r3, [pc, #80]	; (8013344 <fm_menu_config_date_hour+0x908>)
 80132f4:	2201      	movs	r2, #1
 80132f6:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80132f8:	4b07      	ldr	r3, [pc, #28]	; (8013318 <fm_menu_config_date_hour+0x8dc>)
 80132fa:	2200      	movs	r2, #0
 80132fc:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80132fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
}
 8013302:	4618      	mov	r0, r3
 8013304:	37b8      	adds	r7, #184	; 0xb8
 8013306:	46bd      	mov	sp, r7
 8013308:	bd80      	pop	{r7, pc}
 801330a:	bf00      	nop
 801330c:	20001e12 	.word	0x20001e12
 8013310:	20001e15 	.word	0x20001e15
 8013314:	20001388 	.word	0x20001388
 8013318:	20001e1c 	.word	0x20001e1c
 801331c:	0801477d 	.word	0x0801477d
 8013320:	20001e13 	.word	0x20001e13
 8013324:	20001e16 	.word	0x20001e16
 8013328:	20001e17 	.word	0x20001e17
 801332c:	20001e18 	.word	0x20001e18
 8013330:	200014fc 	.word	0x200014fc
 8013334:	20001e19 	.word	0x20001e19
 8013338:	20001e1a 	.word	0x20001e1a
 801333c:	20001e1b 	.word	0x20001e1b
 8013340:	20001e14 	.word	0x20001e14
 8013344:	20000141 	.word	0x20000141

08013348 <fm_menu_config_k_lin_1>:
 * @brief Función que imprime el menú del K linealizado 1.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_1(fm_event_t event_id)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b084      	sub	sp, #16
 801334c:	af00      	add	r7, sp, #0
 801334e:	4603      	mov	r3, r0
 8013350:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 8013352:	4b47      	ldr	r3, [pc, #284]	; (8013470 <fm_menu_config_k_lin_1+0x128>)
 8013354:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 8013356:	4b47      	ldr	r3, [pc, #284]	; (8013474 <fm_menu_config_k_lin_1+0x12c>)
 8013358:	781b      	ldrb	r3, [r3, #0]
 801335a:	2b01      	cmp	r3, #1
 801335c:	d104      	bne.n	8013368 <fm_menu_config_k_lin_1+0x20>
    {
        fm_lcd_clear();
 801335e:	f7fc fce6 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 8013362:	4b44      	ldr	r3, [pc, #272]	; (8013474 <fm_menu_config_k_lin_1+0x12c>)
 8013364:	2200      	movs	r2, #0
 8013366:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_1, event_id, digit_lin_modify);
 8013368:	4b43      	ldr	r3, [pc, #268]	; (8013478 <fm_menu_config_k_lin_1+0x130>)
 801336a:	781a      	ldrb	r2, [r3, #0]
 801336c:	79fb      	ldrb	r3, [r7, #7]
 801336e:	4619      	mov	r1, r3
 8013370:	2001      	movs	r0, #1
 8013372:	f7fc ff4f 	bl	8010214 <fm_lcd_k_lin>
    fm_lcd_refresh();
 8013376:	f7fd f866 	bl	8010446 <fm_lcd_refresh>

    switch (event_id)
 801337a:	79fb      	ldrb	r3, [r7, #7]
 801337c:	3b01      	subs	r3, #1
 801337e:	2b04      	cmp	r3, #4
 8013380:	d85f      	bhi.n	8013442 <fm_menu_config_k_lin_1+0xfa>
 8013382:	a201      	add	r2, pc, #4	; (adr r2, 8013388 <fm_menu_config_k_lin_1+0x40>)
 8013384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013388:	08013443 	.word	0x08013443
 801338c:	0801339d 	.word	0x0801339d
 8013390:	080133c5 	.word	0x080133c5
 8013394:	080133ed 	.word	0x080133ed
 8013398:	08013425 	.word	0x08013425
    {
        case EVENT_KEY_UP:
            if (correct_password)
 801339c:	4b37      	ldr	r3, [pc, #220]	; (801347c <fm_menu_config_k_lin_1+0x134>)
 801339e:	781b      	ldrb	r3, [r3, #0]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d005      	beq.n	80133b0 <fm_menu_config_k_lin_1+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_1);
 80133a4:	4b34      	ldr	r3, [pc, #208]	; (8013478 <fm_menu_config_k_lin_1+0x130>)
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	2101      	movs	r1, #1
 80133aa:	4618      	mov	r0, r3
 80133ac:	f7fc f862 	bl	800f474 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80133b0:	2301      	movs	r3, #1
 80133b2:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80133b4:	f107 030b 	add.w	r3, r7, #11
 80133b8:	2200      	movs	r2, #0
 80133ba:	4619      	mov	r1, r3
 80133bc:	4830      	ldr	r0, [pc, #192]	; (8013480 <fm_menu_config_k_lin_1+0x138>)
 80133be:	f7fb f9d1 	bl	800e764 <_txe_queue_send>
        break;
 80133c2:	e03f      	b.n	8013444 <fm_menu_config_k_lin_1+0xfc>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80133c4:	4b2d      	ldr	r3, [pc, #180]	; (801347c <fm_menu_config_k_lin_1+0x134>)
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d005      	beq.n	80133d8 <fm_menu_config_k_lin_1+0x90>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_1);
 80133cc:	4b2a      	ldr	r3, [pc, #168]	; (8013478 <fm_menu_config_k_lin_1+0x130>)
 80133ce:	781b      	ldrb	r3, [r3, #0]
 80133d0:	2101      	movs	r1, #1
 80133d2:	4618      	mov	r0, r3
 80133d4:	f7fc f938 	bl	800f648 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80133d8:	2301      	movs	r3, #1
 80133da:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80133dc:	f107 030b 	add.w	r3, r7, #11
 80133e0:	2200      	movs	r2, #0
 80133e2:	4619      	mov	r1, r3
 80133e4:	4826      	ldr	r0, [pc, #152]	; (8013480 <fm_menu_config_k_lin_1+0x138>)
 80133e6:	f7fb f9bd 	bl	800e764 <_txe_queue_send>
        break;
 80133ea:	e02b      	b.n	8013444 <fm_menu_config_k_lin_1+0xfc>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80133ec:	4b23      	ldr	r3, [pc, #140]	; (801347c <fm_menu_config_k_lin_1+0x134>)
 80133ee:	781b      	ldrb	r3, [r3, #0]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d00d      	beq.n	8013410 <fm_menu_config_k_lin_1+0xc8>
            {
                if (digit_lin_modify < DIG_LIN_11)
 80133f4:	4b20      	ldr	r3, [pc, #128]	; (8013478 <fm_menu_config_k_lin_1+0x130>)
 80133f6:	781b      	ldrb	r3, [r3, #0]
 80133f8:	2b0a      	cmp	r3, #10
 80133fa:	d806      	bhi.n	801340a <fm_menu_config_k_lin_1+0xc2>
                {
                    digit_lin_modify++;
 80133fc:	4b1e      	ldr	r3, [pc, #120]	; (8013478 <fm_menu_config_k_lin_1+0x130>)
 80133fe:	781b      	ldrb	r3, [r3, #0]
 8013400:	3301      	adds	r3, #1
 8013402:	b2da      	uxtb	r2, r3
 8013404:	4b1c      	ldr	r3, [pc, #112]	; (8013478 <fm_menu_config_k_lin_1+0x130>)
 8013406:	701a      	strb	r2, [r3, #0]
 8013408:	e002      	b.n	8013410 <fm_menu_config_k_lin_1+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801340a:	4b1b      	ldr	r3, [pc, #108]	; (8013478 <fm_menu_config_k_lin_1+0x130>)
 801340c:	2200      	movs	r2, #0
 801340e:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013410:	2301      	movs	r3, #1
 8013412:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013414:	f107 030b 	add.w	r3, r7, #11
 8013418:	2200      	movs	r2, #0
 801341a:	4619      	mov	r1, r3
 801341c:	4818      	ldr	r0, [pc, #96]	; (8013480 <fm_menu_config_k_lin_1+0x138>)
 801341e:	f7fb f9a1 	bl	800e764 <_txe_queue_send>
        break;
 8013422:	e00f      	b.n	8013444 <fm_menu_config_k_lin_1+0xfc>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013424:	4b17      	ldr	r3, [pc, #92]	; (8013484 <fm_menu_config_k_lin_1+0x13c>)
 8013426:	2201      	movs	r2, #1
 8013428:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 801342a:	4b17      	ldr	r3, [pc, #92]	; (8013488 <fm_menu_config_k_lin_1+0x140>)
 801342c:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 801342e:	2301      	movs	r3, #1
 8013430:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013432:	f107 030b 	add.w	r3, r7, #11
 8013436:	2200      	movs	r2, #0
 8013438:	4619      	mov	r1, r3
 801343a:	4811      	ldr	r0, [pc, #68]	; (8013480 <fm_menu_config_k_lin_1+0x138>)
 801343c:	f7fb f992 	bl	800e764 <_txe_queue_send>
        break;
 8013440:	e000      	b.n	8013444 <fm_menu_config_k_lin_1+0xfc>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013442:	bf00      	nop
    }

    previous_event = event_id;
 8013444:	4a11      	ldr	r2, [pc, #68]	; (801348c <fm_menu_config_k_lin_1+0x144>)
 8013446:	79fb      	ldrb	r3, [r7, #7]
 8013448:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_1\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 801344a:	4b0e      	ldr	r3, [pc, #56]	; (8013484 <fm_menu_config_k_lin_1+0x13c>)
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	2b01      	cmp	r3, #1
 8013450:	d108      	bne.n	8013464 <fm_menu_config_k_lin_1+0x11c>
    {
        digit_lin_modify = DIG_LIN_0;
 8013452:	4b09      	ldr	r3, [pc, #36]	; (8013478 <fm_menu_config_k_lin_1+0x130>)
 8013454:	2200      	movs	r2, #0
 8013456:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013458:	4b06      	ldr	r3, [pc, #24]	; (8013474 <fm_menu_config_k_lin_1+0x12c>)
 801345a:	2201      	movs	r2, #1
 801345c:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801345e:	4b09      	ldr	r3, [pc, #36]	; (8013484 <fm_menu_config_k_lin_1+0x13c>)
 8013460:	2200      	movs	r2, #0
 8013462:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013464:	68fb      	ldr	r3, [r7, #12]
}
 8013466:	4618      	mov	r0, r3
 8013468:	3710      	adds	r7, #16
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}
 801346e:	bf00      	nop
 8013470:	08013349 	.word	0x08013349
 8013474:	20000142 	.word	0x20000142
 8013478:	20001e1d 	.word	0x20001e1d
 801347c:	20001e12 	.word	0x20001e12
 8013480:	20001388 	.word	0x20001388
 8013484:	20001e1e 	.word	0x20001e1e
 8013488:	08013491 	.word	0x08013491
 801348c:	20001e13 	.word	0x20001e13

08013490 <fm_menu_config_k_lin_2>:
 * @brief Función que imprime el menú del K linealizado 2.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_2(fm_event_t event_id)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b084      	sub	sp, #16
 8013494:	af00      	add	r7, sp, #0
 8013496:	4603      	mov	r3, r0
 8013498:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 801349a:	4b47      	ldr	r3, [pc, #284]	; (80135b8 <fm_menu_config_k_lin_2+0x128>)
 801349c:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 801349e:	4b47      	ldr	r3, [pc, #284]	; (80135bc <fm_menu_config_k_lin_2+0x12c>)
 80134a0:	781b      	ldrb	r3, [r3, #0]
 80134a2:	2b01      	cmp	r3, #1
 80134a4:	d104      	bne.n	80134b0 <fm_menu_config_k_lin_2+0x20>
    {
        fm_lcd_clear();
 80134a6:	f7fc fc42 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 80134aa:	4b44      	ldr	r3, [pc, #272]	; (80135bc <fm_menu_config_k_lin_2+0x12c>)
 80134ac:	2200      	movs	r2, #0
 80134ae:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_2, event_id, digit_lin_modify);
 80134b0:	4b43      	ldr	r3, [pc, #268]	; (80135c0 <fm_menu_config_k_lin_2+0x130>)
 80134b2:	781a      	ldrb	r2, [r3, #0]
 80134b4:	79fb      	ldrb	r3, [r7, #7]
 80134b6:	4619      	mov	r1, r3
 80134b8:	2002      	movs	r0, #2
 80134ba:	f7fc feab 	bl	8010214 <fm_lcd_k_lin>
    fm_lcd_refresh();
 80134be:	f7fc ffc2 	bl	8010446 <fm_lcd_refresh>

    switch (event_id)
 80134c2:	79fb      	ldrb	r3, [r7, #7]
 80134c4:	3b01      	subs	r3, #1
 80134c6:	2b04      	cmp	r3, #4
 80134c8:	d85f      	bhi.n	801358a <fm_menu_config_k_lin_2+0xfa>
 80134ca:	a201      	add	r2, pc, #4	; (adr r2, 80134d0 <fm_menu_config_k_lin_2+0x40>)
 80134cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134d0:	0801358b 	.word	0x0801358b
 80134d4:	080134e5 	.word	0x080134e5
 80134d8:	0801350d 	.word	0x0801350d
 80134dc:	08013535 	.word	0x08013535
 80134e0:	0801356d 	.word	0x0801356d
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80134e4:	4b37      	ldr	r3, [pc, #220]	; (80135c4 <fm_menu_config_k_lin_2+0x134>)
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d005      	beq.n	80134f8 <fm_menu_config_k_lin_2+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_2);
 80134ec:	4b34      	ldr	r3, [pc, #208]	; (80135c0 <fm_menu_config_k_lin_2+0x130>)
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	2102      	movs	r1, #2
 80134f2:	4618      	mov	r0, r3
 80134f4:	f7fb ffbe 	bl	800f474 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80134f8:	2301      	movs	r3, #1
 80134fa:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80134fc:	f107 030b 	add.w	r3, r7, #11
 8013500:	2200      	movs	r2, #0
 8013502:	4619      	mov	r1, r3
 8013504:	4830      	ldr	r0, [pc, #192]	; (80135c8 <fm_menu_config_k_lin_2+0x138>)
 8013506:	f7fb f92d 	bl	800e764 <_txe_queue_send>
        break;
 801350a:	e03f      	b.n	801358c <fm_menu_config_k_lin_2+0xfc>
        case EVENT_KEY_DOWN:
            if (correct_password)
 801350c:	4b2d      	ldr	r3, [pc, #180]	; (80135c4 <fm_menu_config_k_lin_2+0x134>)
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d005      	beq.n	8013520 <fm_menu_config_k_lin_2+0x90>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_2);
 8013514:	4b2a      	ldr	r3, [pc, #168]	; (80135c0 <fm_menu_config_k_lin_2+0x130>)
 8013516:	781b      	ldrb	r3, [r3, #0]
 8013518:	2102      	movs	r1, #2
 801351a:	4618      	mov	r0, r3
 801351c:	f7fc f894 	bl	800f648 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013520:	2301      	movs	r3, #1
 8013522:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013524:	f107 030b 	add.w	r3, r7, #11
 8013528:	2200      	movs	r2, #0
 801352a:	4619      	mov	r1, r3
 801352c:	4826      	ldr	r0, [pc, #152]	; (80135c8 <fm_menu_config_k_lin_2+0x138>)
 801352e:	f7fb f919 	bl	800e764 <_txe_queue_send>
        break;
 8013532:	e02b      	b.n	801358c <fm_menu_config_k_lin_2+0xfc>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013534:	4b23      	ldr	r3, [pc, #140]	; (80135c4 <fm_menu_config_k_lin_2+0x134>)
 8013536:	781b      	ldrb	r3, [r3, #0]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d00d      	beq.n	8013558 <fm_menu_config_k_lin_2+0xc8>
            {
                if (digit_lin_modify < DIG_LIN_11)
 801353c:	4b20      	ldr	r3, [pc, #128]	; (80135c0 <fm_menu_config_k_lin_2+0x130>)
 801353e:	781b      	ldrb	r3, [r3, #0]
 8013540:	2b0a      	cmp	r3, #10
 8013542:	d806      	bhi.n	8013552 <fm_menu_config_k_lin_2+0xc2>
                {
                    digit_lin_modify++;
 8013544:	4b1e      	ldr	r3, [pc, #120]	; (80135c0 <fm_menu_config_k_lin_2+0x130>)
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	3301      	adds	r3, #1
 801354a:	b2da      	uxtb	r2, r3
 801354c:	4b1c      	ldr	r3, [pc, #112]	; (80135c0 <fm_menu_config_k_lin_2+0x130>)
 801354e:	701a      	strb	r2, [r3, #0]
 8013550:	e002      	b.n	8013558 <fm_menu_config_k_lin_2+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8013552:	4b1b      	ldr	r3, [pc, #108]	; (80135c0 <fm_menu_config_k_lin_2+0x130>)
 8013554:	2200      	movs	r2, #0
 8013556:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013558:	2301      	movs	r3, #1
 801355a:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801355c:	f107 030b 	add.w	r3, r7, #11
 8013560:	2200      	movs	r2, #0
 8013562:	4619      	mov	r1, r3
 8013564:	4818      	ldr	r0, [pc, #96]	; (80135c8 <fm_menu_config_k_lin_2+0x138>)
 8013566:	f7fb f8fd 	bl	800e764 <_txe_queue_send>
        break;
 801356a:	e00f      	b.n	801358c <fm_menu_config_k_lin_2+0xfc>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801356c:	4b17      	ldr	r3, [pc, #92]	; (80135cc <fm_menu_config_k_lin_2+0x13c>)
 801356e:	2201      	movs	r2, #1
 8013570:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 8013572:	4b17      	ldr	r3, [pc, #92]	; (80135d0 <fm_menu_config_k_lin_2+0x140>)
 8013574:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8013576:	2301      	movs	r3, #1
 8013578:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801357a:	f107 030b 	add.w	r3, r7, #11
 801357e:	2200      	movs	r2, #0
 8013580:	4619      	mov	r1, r3
 8013582:	4811      	ldr	r0, [pc, #68]	; (80135c8 <fm_menu_config_k_lin_2+0x138>)
 8013584:	f7fb f8ee 	bl	800e764 <_txe_queue_send>
        break;
 8013588:	e000      	b.n	801358c <fm_menu_config_k_lin_2+0xfc>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801358a:	bf00      	nop
    }

    previous_event = event_id;
 801358c:	4a11      	ldr	r2, [pc, #68]	; (80135d4 <fm_menu_config_k_lin_2+0x144>)
 801358e:	79fb      	ldrb	r3, [r7, #7]
 8013590:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_2\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 8013592:	4b0e      	ldr	r3, [pc, #56]	; (80135cc <fm_menu_config_k_lin_2+0x13c>)
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	2b01      	cmp	r3, #1
 8013598:	d108      	bne.n	80135ac <fm_menu_config_k_lin_2+0x11c>
    {
        digit_lin_modify = DIG_LIN_0;
 801359a:	4b09      	ldr	r3, [pc, #36]	; (80135c0 <fm_menu_config_k_lin_2+0x130>)
 801359c:	2200      	movs	r2, #0
 801359e:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80135a0:	4b06      	ldr	r3, [pc, #24]	; (80135bc <fm_menu_config_k_lin_2+0x12c>)
 80135a2:	2201      	movs	r2, #1
 80135a4:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80135a6:	4b09      	ldr	r3, [pc, #36]	; (80135cc <fm_menu_config_k_lin_2+0x13c>)
 80135a8:	2200      	movs	r2, #0
 80135aa:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80135ac:	68fb      	ldr	r3, [r7, #12]
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	3710      	adds	r7, #16
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}
 80135b6:	bf00      	nop
 80135b8:	08013491 	.word	0x08013491
 80135bc:	20000143 	.word	0x20000143
 80135c0:	20001e1f 	.word	0x20001e1f
 80135c4:	20001e12 	.word	0x20001e12
 80135c8:	20001388 	.word	0x20001388
 80135cc:	20001e20 	.word	0x20001e20
 80135d0:	080135d9 	.word	0x080135d9
 80135d4:	20001e13 	.word	0x20001e13

080135d8 <fm_menu_config_k_lin_3>:
 * @brief Función que imprime el menú del K linealizado 3.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_3(fm_event_t event_id)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b084      	sub	sp, #16
 80135dc:	af00      	add	r7, sp, #0
 80135de:	4603      	mov	r3, r0
 80135e0:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 80135e2:	4b47      	ldr	r3, [pc, #284]	; (8013700 <fm_menu_config_k_lin_3+0x128>)
 80135e4:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 80135e6:	4b47      	ldr	r3, [pc, #284]	; (8013704 <fm_menu_config_k_lin_3+0x12c>)
 80135e8:	781b      	ldrb	r3, [r3, #0]
 80135ea:	2b01      	cmp	r3, #1
 80135ec:	d104      	bne.n	80135f8 <fm_menu_config_k_lin_3+0x20>
    {
        fm_lcd_clear();
 80135ee:	f7fc fb9e 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 80135f2:	4b44      	ldr	r3, [pc, #272]	; (8013704 <fm_menu_config_k_lin_3+0x12c>)
 80135f4:	2200      	movs	r2, #0
 80135f6:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_3, event_id, digit_lin_modify);
 80135f8:	4b43      	ldr	r3, [pc, #268]	; (8013708 <fm_menu_config_k_lin_3+0x130>)
 80135fa:	781a      	ldrb	r2, [r3, #0]
 80135fc:	79fb      	ldrb	r3, [r7, #7]
 80135fe:	4619      	mov	r1, r3
 8013600:	2003      	movs	r0, #3
 8013602:	f7fc fe07 	bl	8010214 <fm_lcd_k_lin>
    fm_lcd_refresh();
 8013606:	f7fc ff1e 	bl	8010446 <fm_lcd_refresh>

    switch (event_id)
 801360a:	79fb      	ldrb	r3, [r7, #7]
 801360c:	3b01      	subs	r3, #1
 801360e:	2b04      	cmp	r3, #4
 8013610:	d85f      	bhi.n	80136d2 <fm_menu_config_k_lin_3+0xfa>
 8013612:	a201      	add	r2, pc, #4	; (adr r2, 8013618 <fm_menu_config_k_lin_3+0x40>)
 8013614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013618:	080136d3 	.word	0x080136d3
 801361c:	0801362d 	.word	0x0801362d
 8013620:	08013655 	.word	0x08013655
 8013624:	0801367d 	.word	0x0801367d
 8013628:	080136b5 	.word	0x080136b5
    {
        case EVENT_KEY_UP:
            if (correct_password)
 801362c:	4b37      	ldr	r3, [pc, #220]	; (801370c <fm_menu_config_k_lin_3+0x134>)
 801362e:	781b      	ldrb	r3, [r3, #0]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d005      	beq.n	8013640 <fm_menu_config_k_lin_3+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_3);
 8013634:	4b34      	ldr	r3, [pc, #208]	; (8013708 <fm_menu_config_k_lin_3+0x130>)
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	2103      	movs	r1, #3
 801363a:	4618      	mov	r0, r3
 801363c:	f7fb ff1a 	bl	800f474 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013640:	2301      	movs	r3, #1
 8013642:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013644:	f107 030b 	add.w	r3, r7, #11
 8013648:	2200      	movs	r2, #0
 801364a:	4619      	mov	r1, r3
 801364c:	4830      	ldr	r0, [pc, #192]	; (8013710 <fm_menu_config_k_lin_3+0x138>)
 801364e:	f7fb f889 	bl	800e764 <_txe_queue_send>
        break;
 8013652:	e03f      	b.n	80136d4 <fm_menu_config_k_lin_3+0xfc>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013654:	4b2d      	ldr	r3, [pc, #180]	; (801370c <fm_menu_config_k_lin_3+0x134>)
 8013656:	781b      	ldrb	r3, [r3, #0]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d005      	beq.n	8013668 <fm_menu_config_k_lin_3+0x90>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_3);
 801365c:	4b2a      	ldr	r3, [pc, #168]	; (8013708 <fm_menu_config_k_lin_3+0x130>)
 801365e:	781b      	ldrb	r3, [r3, #0]
 8013660:	2103      	movs	r1, #3
 8013662:	4618      	mov	r0, r3
 8013664:	f7fb fff0 	bl	800f648 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013668:	2301      	movs	r3, #1
 801366a:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801366c:	f107 030b 	add.w	r3, r7, #11
 8013670:	2200      	movs	r2, #0
 8013672:	4619      	mov	r1, r3
 8013674:	4826      	ldr	r0, [pc, #152]	; (8013710 <fm_menu_config_k_lin_3+0x138>)
 8013676:	f7fb f875 	bl	800e764 <_txe_queue_send>
        break;
 801367a:	e02b      	b.n	80136d4 <fm_menu_config_k_lin_3+0xfc>
        case EVENT_KEY_ENTER:
            if (correct_password)
 801367c:	4b23      	ldr	r3, [pc, #140]	; (801370c <fm_menu_config_k_lin_3+0x134>)
 801367e:	781b      	ldrb	r3, [r3, #0]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d00d      	beq.n	80136a0 <fm_menu_config_k_lin_3+0xc8>
            {
                if (digit_lin_modify < DIG_LIN_11)
 8013684:	4b20      	ldr	r3, [pc, #128]	; (8013708 <fm_menu_config_k_lin_3+0x130>)
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	2b0a      	cmp	r3, #10
 801368a:	d806      	bhi.n	801369a <fm_menu_config_k_lin_3+0xc2>
                {
                    digit_lin_modify++;
 801368c:	4b1e      	ldr	r3, [pc, #120]	; (8013708 <fm_menu_config_k_lin_3+0x130>)
 801368e:	781b      	ldrb	r3, [r3, #0]
 8013690:	3301      	adds	r3, #1
 8013692:	b2da      	uxtb	r2, r3
 8013694:	4b1c      	ldr	r3, [pc, #112]	; (8013708 <fm_menu_config_k_lin_3+0x130>)
 8013696:	701a      	strb	r2, [r3, #0]
 8013698:	e002      	b.n	80136a0 <fm_menu_config_k_lin_3+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801369a:	4b1b      	ldr	r3, [pc, #108]	; (8013708 <fm_menu_config_k_lin_3+0x130>)
 801369c:	2200      	movs	r2, #0
 801369e:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80136a0:	2301      	movs	r3, #1
 80136a2:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136a4:	f107 030b 	add.w	r3, r7, #11
 80136a8:	2200      	movs	r2, #0
 80136aa:	4619      	mov	r1, r3
 80136ac:	4818      	ldr	r0, [pc, #96]	; (8013710 <fm_menu_config_k_lin_3+0x138>)
 80136ae:	f7fb f859 	bl	800e764 <_txe_queue_send>
        break;
 80136b2:	e00f      	b.n	80136d4 <fm_menu_config_k_lin_3+0xfc>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80136b4:	4b17      	ldr	r3, [pc, #92]	; (8013714 <fm_menu_config_k_lin_3+0x13c>)
 80136b6:	2201      	movs	r2, #1
 80136b8:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 80136ba:	4b17      	ldr	r3, [pc, #92]	; (8013718 <fm_menu_config_k_lin_3+0x140>)
 80136bc:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 80136be:	2301      	movs	r3, #1
 80136c0:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136c2:	f107 030b 	add.w	r3, r7, #11
 80136c6:	2200      	movs	r2, #0
 80136c8:	4619      	mov	r1, r3
 80136ca:	4811      	ldr	r0, [pc, #68]	; (8013710 <fm_menu_config_k_lin_3+0x138>)
 80136cc:	f7fb f84a 	bl	800e764 <_txe_queue_send>
        break;
 80136d0:	e000      	b.n	80136d4 <fm_menu_config_k_lin_3+0xfc>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80136d2:	bf00      	nop
    }

    previous_event = event_id;
 80136d4:	4a11      	ldr	r2, [pc, #68]	; (801371c <fm_menu_config_k_lin_3+0x144>)
 80136d6:	79fb      	ldrb	r3, [r7, #7]
 80136d8:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_3\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 80136da:	4b0e      	ldr	r3, [pc, #56]	; (8013714 <fm_menu_config_k_lin_3+0x13c>)
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	2b01      	cmp	r3, #1
 80136e0:	d108      	bne.n	80136f4 <fm_menu_config_k_lin_3+0x11c>
    {
        digit_lin_modify = DIG_LIN_0;
 80136e2:	4b09      	ldr	r3, [pc, #36]	; (8013708 <fm_menu_config_k_lin_3+0x130>)
 80136e4:	2200      	movs	r2, #0
 80136e6:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80136e8:	4b06      	ldr	r3, [pc, #24]	; (8013704 <fm_menu_config_k_lin_3+0x12c>)
 80136ea:	2201      	movs	r2, #1
 80136ec:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80136ee:	4b09      	ldr	r3, [pc, #36]	; (8013714 <fm_menu_config_k_lin_3+0x13c>)
 80136f0:	2200      	movs	r2, #0
 80136f2:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80136f4:	68fb      	ldr	r3, [r7, #12]
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3710      	adds	r7, #16
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
 80136fe:	bf00      	nop
 8013700:	080135d9 	.word	0x080135d9
 8013704:	20000144 	.word	0x20000144
 8013708:	20001e21 	.word	0x20001e21
 801370c:	20001e12 	.word	0x20001e12
 8013710:	20001388 	.word	0x20001388
 8013714:	20001e22 	.word	0x20001e22
 8013718:	08013721 	.word	0x08013721
 801371c:	20001e13 	.word	0x20001e13

08013720 <fm_menu_config_k_lin_4>:
 * @brief Función que imprime el menú del K linealizado 4.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_4(fm_event_t event_id)
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b084      	sub	sp, #16
 8013724:	af00      	add	r7, sp, #0
 8013726:	4603      	mov	r3, r0
 8013728:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 801372a:	4b47      	ldr	r3, [pc, #284]	; (8013848 <fm_menu_config_k_lin_4+0x128>)
 801372c:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 801372e:	4b47      	ldr	r3, [pc, #284]	; (801384c <fm_menu_config_k_lin_4+0x12c>)
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	2b01      	cmp	r3, #1
 8013734:	d104      	bne.n	8013740 <fm_menu_config_k_lin_4+0x20>
    {
        fm_lcd_clear();
 8013736:	f7fc fafa 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 801373a:	4b44      	ldr	r3, [pc, #272]	; (801384c <fm_menu_config_k_lin_4+0x12c>)
 801373c:	2200      	movs	r2, #0
 801373e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_4, event_id, digit_lin_modify);
 8013740:	4b43      	ldr	r3, [pc, #268]	; (8013850 <fm_menu_config_k_lin_4+0x130>)
 8013742:	781a      	ldrb	r2, [r3, #0]
 8013744:	79fb      	ldrb	r3, [r7, #7]
 8013746:	4619      	mov	r1, r3
 8013748:	2004      	movs	r0, #4
 801374a:	f7fc fd63 	bl	8010214 <fm_lcd_k_lin>
    fm_lcd_refresh();
 801374e:	f7fc fe7a 	bl	8010446 <fm_lcd_refresh>

    switch (event_id)
 8013752:	79fb      	ldrb	r3, [r7, #7]
 8013754:	3b01      	subs	r3, #1
 8013756:	2b04      	cmp	r3, #4
 8013758:	d85f      	bhi.n	801381a <fm_menu_config_k_lin_4+0xfa>
 801375a:	a201      	add	r2, pc, #4	; (adr r2, 8013760 <fm_menu_config_k_lin_4+0x40>)
 801375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013760:	0801381b 	.word	0x0801381b
 8013764:	08013775 	.word	0x08013775
 8013768:	0801379d 	.word	0x0801379d
 801376c:	080137c5 	.word	0x080137c5
 8013770:	080137fd 	.word	0x080137fd
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013774:	4b37      	ldr	r3, [pc, #220]	; (8013854 <fm_menu_config_k_lin_4+0x134>)
 8013776:	781b      	ldrb	r3, [r3, #0]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d005      	beq.n	8013788 <fm_menu_config_k_lin_4+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_4);
 801377c:	4b34      	ldr	r3, [pc, #208]	; (8013850 <fm_menu_config_k_lin_4+0x130>)
 801377e:	781b      	ldrb	r3, [r3, #0]
 8013780:	2104      	movs	r1, #4
 8013782:	4618      	mov	r0, r3
 8013784:	f7fb fe76 	bl	800f474 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013788:	2301      	movs	r3, #1
 801378a:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801378c:	f107 030b 	add.w	r3, r7, #11
 8013790:	2200      	movs	r2, #0
 8013792:	4619      	mov	r1, r3
 8013794:	4830      	ldr	r0, [pc, #192]	; (8013858 <fm_menu_config_k_lin_4+0x138>)
 8013796:	f7fa ffe5 	bl	800e764 <_txe_queue_send>
        break;
 801379a:	e03f      	b.n	801381c <fm_menu_config_k_lin_4+0xfc>
        case EVENT_KEY_DOWN:
            if (correct_password)
 801379c:	4b2d      	ldr	r3, [pc, #180]	; (8013854 <fm_menu_config_k_lin_4+0x134>)
 801379e:	781b      	ldrb	r3, [r3, #0]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d005      	beq.n	80137b0 <fm_menu_config_k_lin_4+0x90>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_4);
 80137a4:	4b2a      	ldr	r3, [pc, #168]	; (8013850 <fm_menu_config_k_lin_4+0x130>)
 80137a6:	781b      	ldrb	r3, [r3, #0]
 80137a8:	2104      	movs	r1, #4
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7fb ff4c 	bl	800f648 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80137b0:	2301      	movs	r3, #1
 80137b2:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80137b4:	f107 030b 	add.w	r3, r7, #11
 80137b8:	2200      	movs	r2, #0
 80137ba:	4619      	mov	r1, r3
 80137bc:	4826      	ldr	r0, [pc, #152]	; (8013858 <fm_menu_config_k_lin_4+0x138>)
 80137be:	f7fa ffd1 	bl	800e764 <_txe_queue_send>
        break;
 80137c2:	e02b      	b.n	801381c <fm_menu_config_k_lin_4+0xfc>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80137c4:	4b23      	ldr	r3, [pc, #140]	; (8013854 <fm_menu_config_k_lin_4+0x134>)
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d00d      	beq.n	80137e8 <fm_menu_config_k_lin_4+0xc8>
            {
                if (digit_lin_modify < DIG_LIN_11)
 80137cc:	4b20      	ldr	r3, [pc, #128]	; (8013850 <fm_menu_config_k_lin_4+0x130>)
 80137ce:	781b      	ldrb	r3, [r3, #0]
 80137d0:	2b0a      	cmp	r3, #10
 80137d2:	d806      	bhi.n	80137e2 <fm_menu_config_k_lin_4+0xc2>
                {
                    digit_lin_modify++;
 80137d4:	4b1e      	ldr	r3, [pc, #120]	; (8013850 <fm_menu_config_k_lin_4+0x130>)
 80137d6:	781b      	ldrb	r3, [r3, #0]
 80137d8:	3301      	adds	r3, #1
 80137da:	b2da      	uxtb	r2, r3
 80137dc:	4b1c      	ldr	r3, [pc, #112]	; (8013850 <fm_menu_config_k_lin_4+0x130>)
 80137de:	701a      	strb	r2, [r3, #0]
 80137e0:	e002      	b.n	80137e8 <fm_menu_config_k_lin_4+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 80137e2:	4b1b      	ldr	r3, [pc, #108]	; (8013850 <fm_menu_config_k_lin_4+0x130>)
 80137e4:	2200      	movs	r2, #0
 80137e6:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80137e8:	2301      	movs	r3, #1
 80137ea:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80137ec:	f107 030b 	add.w	r3, r7, #11
 80137f0:	2200      	movs	r2, #0
 80137f2:	4619      	mov	r1, r3
 80137f4:	4818      	ldr	r0, [pc, #96]	; (8013858 <fm_menu_config_k_lin_4+0x138>)
 80137f6:	f7fa ffb5 	bl	800e764 <_txe_queue_send>
        break;
 80137fa:	e00f      	b.n	801381c <fm_menu_config_k_lin_4+0xfc>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80137fc:	4b17      	ldr	r3, [pc, #92]	; (801385c <fm_menu_config_k_lin_4+0x13c>)
 80137fe:	2201      	movs	r2, #1
 8013800:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 8013802:	4b17      	ldr	r3, [pc, #92]	; (8013860 <fm_menu_config_k_lin_4+0x140>)
 8013804:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8013806:	2301      	movs	r3, #1
 8013808:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801380a:	f107 030b 	add.w	r3, r7, #11
 801380e:	2200      	movs	r2, #0
 8013810:	4619      	mov	r1, r3
 8013812:	4811      	ldr	r0, [pc, #68]	; (8013858 <fm_menu_config_k_lin_4+0x138>)
 8013814:	f7fa ffa6 	bl	800e764 <_txe_queue_send>
        break;
 8013818:	e000      	b.n	801381c <fm_menu_config_k_lin_4+0xfc>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801381a:	bf00      	nop
    }

    previous_event = event_id;
 801381c:	4a11      	ldr	r2, [pc, #68]	; (8013864 <fm_menu_config_k_lin_4+0x144>)
 801381e:	79fb      	ldrb	r3, [r7, #7]
 8013820:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_4\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 8013822:	4b0e      	ldr	r3, [pc, #56]	; (801385c <fm_menu_config_k_lin_4+0x13c>)
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	2b01      	cmp	r3, #1
 8013828:	d108      	bne.n	801383c <fm_menu_config_k_lin_4+0x11c>
    {
        digit_lin_modify = DIG_LIN_0;
 801382a:	4b09      	ldr	r3, [pc, #36]	; (8013850 <fm_menu_config_k_lin_4+0x130>)
 801382c:	2200      	movs	r2, #0
 801382e:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013830:	4b06      	ldr	r3, [pc, #24]	; (801384c <fm_menu_config_k_lin_4+0x12c>)
 8013832:	2201      	movs	r2, #1
 8013834:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013836:	4b09      	ldr	r3, [pc, #36]	; (801385c <fm_menu_config_k_lin_4+0x13c>)
 8013838:	2200      	movs	r2, #0
 801383a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801383c:	68fb      	ldr	r3, [r7, #12]
}
 801383e:	4618      	mov	r0, r3
 8013840:	3710      	adds	r7, #16
 8013842:	46bd      	mov	sp, r7
 8013844:	bd80      	pop	{r7, pc}
 8013846:	bf00      	nop
 8013848:	08013721 	.word	0x08013721
 801384c:	20000145 	.word	0x20000145
 8013850:	20001e23 	.word	0x20001e23
 8013854:	20001e12 	.word	0x20001e12
 8013858:	20001388 	.word	0x20001388
 801385c:	20001e24 	.word	0x20001e24
 8013860:	08013869 	.word	0x08013869
 8013864:	20001e13 	.word	0x20001e13

08013868 <fm_menu_config_k_lin_5>:
 * @brief Función que imprime el menú del K linealizado 5.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_5(fm_event_t event_id)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b084      	sub	sp, #16
 801386c:	af00      	add	r7, sp, #0
 801386e:	4603      	mov	r3, r0
 8013870:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 8013872:	4b48      	ldr	r3, [pc, #288]	; (8013994 <fm_menu_config_k_lin_5+0x12c>)
 8013874:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 8013876:	4b48      	ldr	r3, [pc, #288]	; (8013998 <fm_menu_config_k_lin_5+0x130>)
 8013878:	781b      	ldrb	r3, [r3, #0]
 801387a:	2b01      	cmp	r3, #1
 801387c:	d104      	bne.n	8013888 <fm_menu_config_k_lin_5+0x20>
    {
        fm_lcd_clear();
 801387e:	f7fc fa56 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 8013882:	4b45      	ldr	r3, [pc, #276]	; (8013998 <fm_menu_config_k_lin_5+0x130>)
 8013884:	2200      	movs	r2, #0
 8013886:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_5, event_id, digit_lin_modify);
 8013888:	4b44      	ldr	r3, [pc, #272]	; (801399c <fm_menu_config_k_lin_5+0x134>)
 801388a:	781a      	ldrb	r2, [r3, #0]
 801388c:	79fb      	ldrb	r3, [r7, #7]
 801388e:	4619      	mov	r1, r3
 8013890:	2005      	movs	r0, #5
 8013892:	f7fc fcbf 	bl	8010214 <fm_lcd_k_lin>
    fm_lcd_refresh();
 8013896:	f7fc fdd6 	bl	8010446 <fm_lcd_refresh>

    switch (event_id)
 801389a:	79fb      	ldrb	r3, [r7, #7]
 801389c:	3b01      	subs	r3, #1
 801389e:	2b04      	cmp	r3, #4
 80138a0:	d862      	bhi.n	8013968 <fm_menu_config_k_lin_5+0x100>
 80138a2:	a201      	add	r2, pc, #4	; (adr r2, 80138a8 <fm_menu_config_k_lin_5+0x40>)
 80138a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138a8:	08013969 	.word	0x08013969
 80138ac:	080138bd 	.word	0x080138bd
 80138b0:	080138e5 	.word	0x080138e5
 80138b4:	0801390d 	.word	0x0801390d
 80138b8:	08013945 	.word	0x08013945
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80138bc:	4b38      	ldr	r3, [pc, #224]	; (80139a0 <fm_menu_config_k_lin_5+0x138>)
 80138be:	781b      	ldrb	r3, [r3, #0]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d005      	beq.n	80138d0 <fm_menu_config_k_lin_5+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_5);
 80138c4:	4b35      	ldr	r3, [pc, #212]	; (801399c <fm_menu_config_k_lin_5+0x134>)
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	2105      	movs	r1, #5
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7fb fdd2 	bl	800f474 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80138d0:	2301      	movs	r3, #1
 80138d2:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80138d4:	f107 030b 	add.w	r3, r7, #11
 80138d8:	2200      	movs	r2, #0
 80138da:	4619      	mov	r1, r3
 80138dc:	4831      	ldr	r0, [pc, #196]	; (80139a4 <fm_menu_config_k_lin_5+0x13c>)
 80138de:	f7fa ff41 	bl	800e764 <_txe_queue_send>
        break;
 80138e2:	e042      	b.n	801396a <fm_menu_config_k_lin_5+0x102>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80138e4:	4b2e      	ldr	r3, [pc, #184]	; (80139a0 <fm_menu_config_k_lin_5+0x138>)
 80138e6:	781b      	ldrb	r3, [r3, #0]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d005      	beq.n	80138f8 <fm_menu_config_k_lin_5+0x90>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_5);
 80138ec:	4b2b      	ldr	r3, [pc, #172]	; (801399c <fm_menu_config_k_lin_5+0x134>)
 80138ee:	781b      	ldrb	r3, [r3, #0]
 80138f0:	2105      	movs	r1, #5
 80138f2:	4618      	mov	r0, r3
 80138f4:	f7fb fea8 	bl	800f648 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80138f8:	2301      	movs	r3, #1
 80138fa:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80138fc:	f107 030b 	add.w	r3, r7, #11
 8013900:	2200      	movs	r2, #0
 8013902:	4619      	mov	r1, r3
 8013904:	4827      	ldr	r0, [pc, #156]	; (80139a4 <fm_menu_config_k_lin_5+0x13c>)
 8013906:	f7fa ff2d 	bl	800e764 <_txe_queue_send>
        break;
 801390a:	e02e      	b.n	801396a <fm_menu_config_k_lin_5+0x102>
        case EVENT_KEY_ENTER:
            if (correct_password)
 801390c:	4b24      	ldr	r3, [pc, #144]	; (80139a0 <fm_menu_config_k_lin_5+0x138>)
 801390e:	781b      	ldrb	r3, [r3, #0]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d00d      	beq.n	8013930 <fm_menu_config_k_lin_5+0xc8>
            {
                if (digit_lin_modify < DIG_LIN_11)
 8013914:	4b21      	ldr	r3, [pc, #132]	; (801399c <fm_menu_config_k_lin_5+0x134>)
 8013916:	781b      	ldrb	r3, [r3, #0]
 8013918:	2b0a      	cmp	r3, #10
 801391a:	d806      	bhi.n	801392a <fm_menu_config_k_lin_5+0xc2>
                {
                    digit_lin_modify++;
 801391c:	4b1f      	ldr	r3, [pc, #124]	; (801399c <fm_menu_config_k_lin_5+0x134>)
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	3301      	adds	r3, #1
 8013922:	b2da      	uxtb	r2, r3
 8013924:	4b1d      	ldr	r3, [pc, #116]	; (801399c <fm_menu_config_k_lin_5+0x134>)
 8013926:	701a      	strb	r2, [r3, #0]
 8013928:	e002      	b.n	8013930 <fm_menu_config_k_lin_5+0xc8>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801392a:	4b1c      	ldr	r3, [pc, #112]	; (801399c <fm_menu_config_k_lin_5+0x134>)
 801392c:	2200      	movs	r2, #0
 801392e:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013930:	2301      	movs	r3, #1
 8013932:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013934:	f107 030b 	add.w	r3, r7, #11
 8013938:	2200      	movs	r2, #0
 801393a:	4619      	mov	r1, r3
 801393c:	4819      	ldr	r0, [pc, #100]	; (80139a4 <fm_menu_config_k_lin_5+0x13c>)
 801393e:	f7fa ff11 	bl	800e764 <_txe_queue_send>
        break;
 8013942:	e012      	b.n	801396a <fm_menu_config_k_lin_5+0x102>
        case EVENT_KEY_ESC:
            correct_password = 0;
 8013944:	4b16      	ldr	r3, [pc, #88]	; (80139a0 <fm_menu_config_k_lin_5+0x138>)
 8013946:	2200      	movs	r2, #0
 8013948:	701a      	strb	r2, [r3, #0]
            new_exit = 1;
 801394a:	4b17      	ldr	r3, [pc, #92]	; (80139a8 <fm_menu_config_k_lin_5+0x140>)
 801394c:	2201      	movs	r2, #1
 801394e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013950:	4b16      	ldr	r3, [pc, #88]	; (80139ac <fm_menu_config_k_lin_5+0x144>)
 8013952:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8013954:	2301      	movs	r3, #1
 8013956:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013958:	f107 030b 	add.w	r3, r7, #11
 801395c:	2200      	movs	r2, #0
 801395e:	4619      	mov	r1, r3
 8013960:	4810      	ldr	r0, [pc, #64]	; (80139a4 <fm_menu_config_k_lin_5+0x13c>)
 8013962:	f7fa feff 	bl	800e764 <_txe_queue_send>
        break;
 8013966:	e000      	b.n	801396a <fm_menu_config_k_lin_5+0x102>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013968:	bf00      	nop
    }

    previous_event = event_id;
 801396a:	4a11      	ldr	r2, [pc, #68]	; (80139b0 <fm_menu_config_k_lin_5+0x148>)
 801396c:	79fb      	ldrb	r3, [r7, #7]
 801396e:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_5\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 8013970:	4b0d      	ldr	r3, [pc, #52]	; (80139a8 <fm_menu_config_k_lin_5+0x140>)
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	2b01      	cmp	r3, #1
 8013976:	d108      	bne.n	801398a <fm_menu_config_k_lin_5+0x122>
    {
        digit_lin_modify = DIG_LIN_0;
 8013978:	4b08      	ldr	r3, [pc, #32]	; (801399c <fm_menu_config_k_lin_5+0x134>)
 801397a:	2200      	movs	r2, #0
 801397c:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801397e:	4b06      	ldr	r3, [pc, #24]	; (8013998 <fm_menu_config_k_lin_5+0x130>)
 8013980:	2201      	movs	r2, #1
 8013982:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013984:	4b08      	ldr	r3, [pc, #32]	; (80139a8 <fm_menu_config_k_lin_5+0x140>)
 8013986:	2200      	movs	r2, #0
 8013988:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801398a:	68fb      	ldr	r3, [r7, #12]
}
 801398c:	4618      	mov	r0, r3
 801398e:	3710      	adds	r7, #16
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}
 8013994:	08013869 	.word	0x08013869
 8013998:	20000146 	.word	0x20000146
 801399c:	20001e25 	.word	0x20001e25
 80139a0:	20001e12 	.word	0x20001e12
 80139a4:	20001388 	.word	0x20001388
 80139a8:	20001e26 	.word	0x20001e26
 80139ac:	0801477d 	.word	0x0801477d
 80139b0:	20001e13 	.word	0x20001e13

080139b4 <fm_menu_config_k_param>:
 * K.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_param(fm_event_t event_id)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b084      	sub	sp, #16
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	4603      	mov	r3, r0
 80139bc:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_t digit_modify = DIG_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 80139be:	4b5f      	ldr	r3, [pc, #380]	; (8013b3c <fm_menu_config_k_param+0x188>)
 80139c0:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 80139c2:	4b5f      	ldr	r3, [pc, #380]	; (8013b40 <fm_menu_config_k_param+0x18c>)
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	2b01      	cmp	r3, #1
 80139c8:	d104      	bne.n	80139d4 <fm_menu_config_k_param+0x20>
    {
        fm_lcd_clear();
 80139ca:	f7fc f9b0 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 80139ce:	4b5c      	ldr	r3, [pc, #368]	; (8013b40 <fm_menu_config_k_param+0x18c>)
 80139d0:	2200      	movs	r2, #0
 80139d2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_factor(event_id, digit_modify);
 80139d4:	4b5b      	ldr	r3, [pc, #364]	; (8013b44 <fm_menu_config_k_param+0x190>)
 80139d6:	781a      	ldrb	r2, [r3, #0]
 80139d8:	79fb      	ldrb	r3, [r7, #7]
 80139da:	4611      	mov	r1, r2
 80139dc:	4618      	mov	r0, r3
 80139de:	f7fc fba7 	bl	8010130 <fm_lcd_k_factor>
    fm_lcd_refresh();
 80139e2:	f7fc fd30 	bl	8010446 <fm_lcd_refresh>

    switch (event_id)
 80139e6:	79fb      	ldrb	r3, [r7, #7]
 80139e8:	3b01      	subs	r3, #1
 80139ea:	2b04      	cmp	r3, #4
 80139ec:	f200 8090 	bhi.w	8013b10 <fm_menu_config_k_param+0x15c>
 80139f0:	a201      	add	r2, pc, #4	; (adr r2, 80139f8 <fm_menu_config_k_param+0x44>)
 80139f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139f6:	bf00      	nop
 80139f8:	08013b11 	.word	0x08013b11
 80139fc:	08013a0d 	.word	0x08013a0d
 8013a00:	08013a33 	.word	0x08013a33
 8013a04:	08013a59 	.word	0x08013a59
 8013a08:	08013af3 	.word	0x08013af3
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013a0c:	4b4e      	ldr	r3, [pc, #312]	; (8013b48 <fm_menu_config_k_param+0x194>)
 8013a0e:	781b      	ldrb	r3, [r3, #0]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d004      	beq.n	8013a1e <fm_menu_config_k_param+0x6a>
            {
                fm_factory_modify_k_factor_add(digit_modify);
 8013a14:	4b4b      	ldr	r3, [pc, #300]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013a16:	781b      	ldrb	r3, [r3, #0]
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7fb fcab 	bl	800f374 <fm_factory_modify_k_factor_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013a1e:	2301      	movs	r3, #1
 8013a20:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013a22:	f107 030b 	add.w	r3, r7, #11
 8013a26:	2200      	movs	r2, #0
 8013a28:	4619      	mov	r1, r3
 8013a2a:	4848      	ldr	r0, [pc, #288]	; (8013b4c <fm_menu_config_k_param+0x198>)
 8013a2c:	f7fa fe9a 	bl	800e764 <_txe_queue_send>
        break;
 8013a30:	e06f      	b.n	8013b12 <fm_menu_config_k_param+0x15e>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013a32:	4b45      	ldr	r3, [pc, #276]	; (8013b48 <fm_menu_config_k_param+0x194>)
 8013a34:	781b      	ldrb	r3, [r3, #0]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d004      	beq.n	8013a44 <fm_menu_config_k_param+0x90>
            {
                fm_factory_modify_k_factor_subs(digit_modify);
 8013a3a:	4b42      	ldr	r3, [pc, #264]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013a3c:	781b      	ldrb	r3, [r3, #0]
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f7fb fcd8 	bl	800f3f4 <fm_factory_modify_k_factor_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013a44:	2301      	movs	r3, #1
 8013a46:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013a48:	f107 030b 	add.w	r3, r7, #11
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	4619      	mov	r1, r3
 8013a50:	483e      	ldr	r0, [pc, #248]	; (8013b4c <fm_menu_config_k_param+0x198>)
 8013a52:	f7fa fe87 	bl	800e764 <_txe_queue_send>
        break;
 8013a56:	e05c      	b.n	8013b12 <fm_menu_config_k_param+0x15e>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013a58:	4b3b      	ldr	r3, [pc, #236]	; (8013b48 <fm_menu_config_k_param+0x194>)
 8013a5a:	781b      	ldrb	r3, [r3, #0]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d03e      	beq.n	8013ade <fm_menu_config_k_param+0x12a>
            {
                if (digit_modify == DIG_0)
 8013a60:	4b38      	ldr	r3, [pc, #224]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013a62:	781b      	ldrb	r3, [r3, #0]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d103      	bne.n	8013a70 <fm_menu_config_k_param+0xbc>
                {
                    digit_modify = DIG_1;
 8013a68:	4b36      	ldr	r3, [pc, #216]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013a6a:	2201      	movs	r2, #1
 8013a6c:	701a      	strb	r2, [r3, #0]
 8013a6e:	e036      	b.n	8013ade <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_1)
 8013a70:	4b34      	ldr	r3, [pc, #208]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013a72:	781b      	ldrb	r3, [r3, #0]
 8013a74:	2b01      	cmp	r3, #1
 8013a76:	d103      	bne.n	8013a80 <fm_menu_config_k_param+0xcc>
                {
                    digit_modify = DIG_2;
 8013a78:	4b32      	ldr	r3, [pc, #200]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013a7a:	2202      	movs	r2, #2
 8013a7c:	701a      	strb	r2, [r3, #0]
 8013a7e:	e02e      	b.n	8013ade <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_2)
 8013a80:	4b30      	ldr	r3, [pc, #192]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013a82:	781b      	ldrb	r3, [r3, #0]
 8013a84:	2b02      	cmp	r3, #2
 8013a86:	d103      	bne.n	8013a90 <fm_menu_config_k_param+0xdc>
                {
                    digit_modify = DIG_3;
 8013a88:	4b2e      	ldr	r3, [pc, #184]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013a8a:	2203      	movs	r2, #3
 8013a8c:	701a      	strb	r2, [r3, #0]
 8013a8e:	e026      	b.n	8013ade <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_3)
 8013a90:	4b2c      	ldr	r3, [pc, #176]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	2b03      	cmp	r3, #3
 8013a96:	d103      	bne.n	8013aa0 <fm_menu_config_k_param+0xec>
                {
                    digit_modify = DIG_4;
 8013a98:	4b2a      	ldr	r3, [pc, #168]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013a9a:	2204      	movs	r2, #4
 8013a9c:	701a      	strb	r2, [r3, #0]
 8013a9e:	e01e      	b.n	8013ade <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_4)
 8013aa0:	4b28      	ldr	r3, [pc, #160]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013aa2:	781b      	ldrb	r3, [r3, #0]
 8013aa4:	2b04      	cmp	r3, #4
 8013aa6:	d103      	bne.n	8013ab0 <fm_menu_config_k_param+0xfc>
                {
                    digit_modify = DIG_5;
 8013aa8:	4b26      	ldr	r3, [pc, #152]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013aaa:	2205      	movs	r2, #5
 8013aac:	701a      	strb	r2, [r3, #0]
 8013aae:	e016      	b.n	8013ade <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_5)
 8013ab0:	4b24      	ldr	r3, [pc, #144]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013ab2:	781b      	ldrb	r3, [r3, #0]
 8013ab4:	2b05      	cmp	r3, #5
 8013ab6:	d103      	bne.n	8013ac0 <fm_menu_config_k_param+0x10c>
                {
                    digit_modify = DIG_6;
 8013ab8:	4b22      	ldr	r3, [pc, #136]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013aba:	2206      	movs	r2, #6
 8013abc:	701a      	strb	r2, [r3, #0]
 8013abe:	e00e      	b.n	8013ade <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_6)
 8013ac0:	4b20      	ldr	r3, [pc, #128]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013ac2:	781b      	ldrb	r3, [r3, #0]
 8013ac4:	2b06      	cmp	r3, #6
 8013ac6:	d103      	bne.n	8013ad0 <fm_menu_config_k_param+0x11c>
                {
                    digit_modify = DIG_7;
 8013ac8:	4b1e      	ldr	r3, [pc, #120]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013aca:	2207      	movs	r2, #7
 8013acc:	701a      	strb	r2, [r3, #0]
 8013ace:	e006      	b.n	8013ade <fm_menu_config_k_param+0x12a>
                }
                else if (digit_modify == DIG_7)
 8013ad0:	4b1c      	ldr	r3, [pc, #112]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013ad2:	781b      	ldrb	r3, [r3, #0]
 8013ad4:	2b07      	cmp	r3, #7
 8013ad6:	d102      	bne.n	8013ade <fm_menu_config_k_param+0x12a>
                {
                    digit_modify = DIG_0;
 8013ad8:	4b1a      	ldr	r3, [pc, #104]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013ada:	2200      	movs	r2, #0
 8013adc:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013ade:	2301      	movs	r3, #1
 8013ae0:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013ae2:	f107 030b 	add.w	r3, r7, #11
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	4619      	mov	r1, r3
 8013aea:	4818      	ldr	r0, [pc, #96]	; (8013b4c <fm_menu_config_k_param+0x198>)
 8013aec:	f7fa fe3a 	bl	800e764 <_txe_queue_send>
        break;
 8013af0:	e00f      	b.n	8013b12 <fm_menu_config_k_param+0x15e>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013af2:	4b17      	ldr	r3, [pc, #92]	; (8013b50 <fm_menu_config_k_param+0x19c>)
 8013af4:	2201      	movs	r2, #1
 8013af6:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 8013af8:	4b16      	ldr	r3, [pc, #88]	; (8013b54 <fm_menu_config_k_param+0x1a0>)
 8013afa:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8013afc:	2301      	movs	r3, #1
 8013afe:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013b00:	f107 030b 	add.w	r3, r7, #11
 8013b04:	2200      	movs	r2, #0
 8013b06:	4619      	mov	r1, r3
 8013b08:	4810      	ldr	r0, [pc, #64]	; (8013b4c <fm_menu_config_k_param+0x198>)
 8013b0a:	f7fa fe2b 	bl	800e764 <_txe_queue_send>
        break;
 8013b0e:	e000      	b.n	8013b12 <fm_menu_config_k_param+0x15e>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013b10:	bf00      	nop
    }

    previous_event = event_id;
 8013b12:	4a11      	ldr	r2, [pc, #68]	; (8013b58 <fm_menu_config_k_param+0x1a4>)
 8013b14:	79fb      	ldrb	r3, [r7, #7]
 8013b16:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 8013b18:	4b0d      	ldr	r3, [pc, #52]	; (8013b50 <fm_menu_config_k_param+0x19c>)
 8013b1a:	781b      	ldrb	r3, [r3, #0]
 8013b1c:	2b01      	cmp	r3, #1
 8013b1e:	d108      	bne.n	8013b32 <fm_menu_config_k_param+0x17e>
    {
        digit_modify = DIG_0;
 8013b20:	4b08      	ldr	r3, [pc, #32]	; (8013b44 <fm_menu_config_k_param+0x190>)
 8013b22:	2200      	movs	r2, #0
 8013b24:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013b26:	4b06      	ldr	r3, [pc, #24]	; (8013b40 <fm_menu_config_k_param+0x18c>)
 8013b28:	2201      	movs	r2, #1
 8013b2a:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013b2c:	4b08      	ldr	r3, [pc, #32]	; (8013b50 <fm_menu_config_k_param+0x19c>)
 8013b2e:	2200      	movs	r2, #0
 8013b30:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013b32:	68fb      	ldr	r3, [r7, #12]
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3710      	adds	r7, #16
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}
 8013b3c:	080139b5 	.word	0x080139b5
 8013b40:	20000147 	.word	0x20000147
 8013b44:	20001e27 	.word	0x20001e27
 8013b48:	20001e12 	.word	0x20001e12
 8013b4c:	20001388 	.word	0x20001388
 8013b50:	20001e28 	.word	0x20001e28
 8013b54:	08013349 	.word	0x08013349
 8013b58:	20001e13 	.word	0x20001e13

08013b5c <fm_menu_config_pass>:
 * regresa al menú de inicio donde se encienden todos los leds.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_pass(fm_event_t event_id)
{
 8013b5c:	b5b0      	push	{r4, r5, r7, lr}
 8013b5e:	b084      	sub	sp, #16
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	4603      	mov	r3, r0
 8013b64:	71fb      	strb	r3, [r7, #7]
        0,
        0
    };
    static uint8_t password_index = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013b66:	4ba2      	ldr	r3, [pc, #648]	; (8013df0 <fm_menu_config_pass+0x294>)
 8013b68:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 8013b6a:	4ba2      	ldr	r3, [pc, #648]	; (8013df4 <fm_menu_config_pass+0x298>)
 8013b6c:	781b      	ldrb	r3, [r3, #0]
 8013b6e:	2b01      	cmp	r3, #1
 8013b70:	d10a      	bne.n	8013b88 <fm_menu_config_pass+0x2c>
    {
        in_configuration = 1;
 8013b72:	4ba1      	ldr	r3, [pc, #644]	; (8013df8 <fm_menu_config_pass+0x29c>)
 8013b74:	2201      	movs	r2, #1
 8013b76:	701a      	strb	r2, [r3, #0]
        correct_password = 0;
 8013b78:	4ba0      	ldr	r3, [pc, #640]	; (8013dfc <fm_menu_config_pass+0x2a0>)
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 8013b7e:	f7fc f8d6 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 8013b82:	4b9c      	ldr	r3, [pc, #624]	; (8013df4 <fm_menu_config_pass+0x298>)
 8013b84:	2200      	movs	r2, #0
 8013b86:	701a      	strb	r2, [r3, #0]
    }

    lcd_set_symbol(PASS, 0x00);
 8013b88:	2100      	movs	r1, #0
 8013b8a:	200a      	movs	r0, #10
 8013b8c:	f7fd ff80 	bl	8011a90 <lcd_set_symbol>
    /*
     * Cada vez que se introduce un dígito de la contraseña, aparece un 8 nuevo
     * en la pantalla, hasta 3 veces (luego de la cuarta vez, se pasa al menú
     * de configuración del factor K).
     */
    if (password_index == 1)
 8013b90:	4b9b      	ldr	r3, [pc, #620]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	2b01      	cmp	r3, #1
 8013b96:	d104      	bne.n	8013ba2 <fm_menu_config_pass+0x46>
    {
        lcd_set_symbol(PASS1, 0x00);
 8013b98:	2100      	movs	r1, #0
 8013b9a:	200d      	movs	r0, #13
 8013b9c:	f7fd ff78 	bl	8011a90 <lcd_set_symbol>
 8013ba0:	e010      	b.n	8013bc4 <fm_menu_config_pass+0x68>
    }
    else if (password_index == 2)
 8013ba2:	4b97      	ldr	r3, [pc, #604]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013ba4:	781b      	ldrb	r3, [r3, #0]
 8013ba6:	2b02      	cmp	r3, #2
 8013ba8:	d104      	bne.n	8013bb4 <fm_menu_config_pass+0x58>
    {
        lcd_set_symbol(PASS2, 0x00);
 8013baa:	2100      	movs	r1, #0
 8013bac:	200e      	movs	r0, #14
 8013bae:	f7fd ff6f 	bl	8011a90 <lcd_set_symbol>
 8013bb2:	e007      	b.n	8013bc4 <fm_menu_config_pass+0x68>
    }
    else if (password_index == PASSWORD_LENGTH - 1)
 8013bb4:	4b92      	ldr	r3, [pc, #584]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	2b03      	cmp	r3, #3
 8013bba:	d103      	bne.n	8013bc4 <fm_menu_config_pass+0x68>
    {
        lcd_set_symbol(PASS3, 0x00);
 8013bbc:	2100      	movs	r1, #0
 8013bbe:	200f      	movs	r0, #15
 8013bc0:	f7fd ff66 	bl	8011a90 <lcd_set_symbol>
    }
    fm_lcd_refresh();
 8013bc4:	f7fc fc3f 	bl	8010446 <fm_lcd_refresh>

    switch (event_id)
 8013bc8:	79fb      	ldrb	r3, [r7, #7]
 8013bca:	3b01      	subs	r3, #1
 8013bcc:	2b04      	cmp	r3, #4
 8013bce:	f200 8085 	bhi.w	8013cdc <fm_menu_config_pass+0x180>
 8013bd2:	a201      	add	r2, pc, #4	; (adr r2, 8013bd8 <fm_menu_config_pass+0x7c>)
 8013bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bd8:	08013cdd 	.word	0x08013cdd
 8013bdc:	08013bed 	.word	0x08013bed
 8013be0:	08013c29 	.word	0x08013c29
 8013be4:	08013c65 	.word	0x08013c65
 8013be8:	08013ca1 	.word	0x08013ca1
    {
        case EVENT_KEY_UP:
            password[password_index] = 1;
 8013bec:	4b84      	ldr	r3, [pc, #528]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013bee:	781b      	ldrb	r3, [r3, #0]
 8013bf0:	461a      	mov	r2, r3
 8013bf2:	4b84      	ldr	r3, [pc, #528]	; (8013e04 <fm_menu_config_pass+0x2a8>)
 8013bf4:	2101      	movs	r1, #1
 8013bf6:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013bf8:	4b81      	ldr	r3, [pc, #516]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	2b02      	cmp	r3, #2
 8013bfe:	d80f      	bhi.n	8013c20 <fm_menu_config_pass+0xc4>
            {
                event_now = EVENT_LCD_REFRESH;
 8013c00:	2301      	movs	r3, #1
 8013c02:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c04:	f107 030b 	add.w	r3, r7, #11
 8013c08:	2200      	movs	r2, #0
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	487e      	ldr	r0, [pc, #504]	; (8013e08 <fm_menu_config_pass+0x2ac>)
 8013c0e:	f7fa fda9 	bl	800e764 <_txe_queue_send>
                password_index++;
 8013c12:	4b7b      	ldr	r3, [pc, #492]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013c14:	781b      	ldrb	r3, [r3, #0]
 8013c16:	3301      	adds	r3, #1
 8013c18:	b2da      	uxtb	r2, r3
 8013c1a:	4b79      	ldr	r3, [pc, #484]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013c1c:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013c1e:	e05e      	b.n	8013cde <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013c20:	4b7a      	ldr	r3, [pc, #488]	; (8013e0c <fm_menu_config_pass+0x2b0>)
 8013c22:	2201      	movs	r2, #1
 8013c24:	701a      	strb	r2, [r3, #0]
        break;
 8013c26:	e05a      	b.n	8013cde <fm_menu_config_pass+0x182>
        case EVENT_KEY_DOWN:
            password[password_index] = 2;
 8013c28:	4b75      	ldr	r3, [pc, #468]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013c2a:	781b      	ldrb	r3, [r3, #0]
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	4b75      	ldr	r3, [pc, #468]	; (8013e04 <fm_menu_config_pass+0x2a8>)
 8013c30:	2102      	movs	r1, #2
 8013c32:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013c34:	4b72      	ldr	r3, [pc, #456]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013c36:	781b      	ldrb	r3, [r3, #0]
 8013c38:	2b02      	cmp	r3, #2
 8013c3a:	d80f      	bhi.n	8013c5c <fm_menu_config_pass+0x100>
            {
                event_now = EVENT_LCD_REFRESH;
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c40:	f107 030b 	add.w	r3, r7, #11
 8013c44:	2200      	movs	r2, #0
 8013c46:	4619      	mov	r1, r3
 8013c48:	486f      	ldr	r0, [pc, #444]	; (8013e08 <fm_menu_config_pass+0x2ac>)
 8013c4a:	f7fa fd8b 	bl	800e764 <_txe_queue_send>
                password_index++;
 8013c4e:	4b6c      	ldr	r3, [pc, #432]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013c50:	781b      	ldrb	r3, [r3, #0]
 8013c52:	3301      	adds	r3, #1
 8013c54:	b2da      	uxtb	r2, r3
 8013c56:	4b6a      	ldr	r3, [pc, #424]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013c58:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013c5a:	e040      	b.n	8013cde <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013c5c:	4b6b      	ldr	r3, [pc, #428]	; (8013e0c <fm_menu_config_pass+0x2b0>)
 8013c5e:	2201      	movs	r2, #1
 8013c60:	701a      	strb	r2, [r3, #0]
        break;
 8013c62:	e03c      	b.n	8013cde <fm_menu_config_pass+0x182>
        case EVENT_KEY_ENTER:
            password[password_index] = 3; // @suppress("Avoid magic numbers")
 8013c64:	4b66      	ldr	r3, [pc, #408]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013c66:	781b      	ldrb	r3, [r3, #0]
 8013c68:	461a      	mov	r2, r3
 8013c6a:	4b66      	ldr	r3, [pc, #408]	; (8013e04 <fm_menu_config_pass+0x2a8>)
 8013c6c:	2103      	movs	r1, #3
 8013c6e:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013c70:	4b63      	ldr	r3, [pc, #396]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013c72:	781b      	ldrb	r3, [r3, #0]
 8013c74:	2b02      	cmp	r3, #2
 8013c76:	d80f      	bhi.n	8013c98 <fm_menu_config_pass+0x13c>
            {
                event_now = EVENT_LCD_REFRESH;
 8013c78:	2301      	movs	r3, #1
 8013c7a:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c7c:	f107 030b 	add.w	r3, r7, #11
 8013c80:	2200      	movs	r2, #0
 8013c82:	4619      	mov	r1, r3
 8013c84:	4860      	ldr	r0, [pc, #384]	; (8013e08 <fm_menu_config_pass+0x2ac>)
 8013c86:	f7fa fd6d 	bl	800e764 <_txe_queue_send>
                password_index++;
 8013c8a:	4b5d      	ldr	r3, [pc, #372]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013c8c:	781b      	ldrb	r3, [r3, #0]
 8013c8e:	3301      	adds	r3, #1
 8013c90:	b2da      	uxtb	r2, r3
 8013c92:	4b5b      	ldr	r3, [pc, #364]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013c94:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013c96:	e022      	b.n	8013cde <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013c98:	4b5c      	ldr	r3, [pc, #368]	; (8013e0c <fm_menu_config_pass+0x2b0>)
 8013c9a:	2201      	movs	r2, #1
 8013c9c:	701a      	strb	r2, [r3, #0]
        break;
 8013c9e:	e01e      	b.n	8013cde <fm_menu_config_pass+0x182>
        case EVENT_KEY_ESC:
            password[password_index] = 4; // @suppress("Avoid magic numbers")
 8013ca0:	4b57      	ldr	r3, [pc, #348]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013ca2:	781b      	ldrb	r3, [r3, #0]
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	4b57      	ldr	r3, [pc, #348]	; (8013e04 <fm_menu_config_pass+0x2a8>)
 8013ca8:	2104      	movs	r1, #4
 8013caa:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013cac:	4b54      	ldr	r3, [pc, #336]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013cae:	781b      	ldrb	r3, [r3, #0]
 8013cb0:	2b02      	cmp	r3, #2
 8013cb2:	d80f      	bhi.n	8013cd4 <fm_menu_config_pass+0x178>
            {
                event_now = EVENT_LCD_REFRESH;
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013cb8:	f107 030b 	add.w	r3, r7, #11
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	4619      	mov	r1, r3
 8013cc0:	4851      	ldr	r0, [pc, #324]	; (8013e08 <fm_menu_config_pass+0x2ac>)
 8013cc2:	f7fa fd4f 	bl	800e764 <_txe_queue_send>
                password_index++;
 8013cc6:	4b4e      	ldr	r3, [pc, #312]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013cc8:	781b      	ldrb	r3, [r3, #0]
 8013cca:	3301      	adds	r3, #1
 8013ccc:	b2da      	uxtb	r2, r3
 8013cce:	4b4c      	ldr	r3, [pc, #304]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013cd0:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013cd2:	e004      	b.n	8013cde <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013cd4:	4b4d      	ldr	r3, [pc, #308]	; (8013e0c <fm_menu_config_pass+0x2b0>)
 8013cd6:	2201      	movs	r2, #1
 8013cd8:	701a      	strb	r2, [r3, #0]
        break;
 8013cda:	e000      	b.n	8013cde <fm_menu_config_pass+0x182>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013cdc:	bf00      	nop
    }

    previous_event = event_id;
 8013cde:	4a4c      	ldr	r2, [pc, #304]	; (8013e10 <fm_menu_config_pass+0x2b4>)
 8013ce0:	79fb      	ldrb	r3, [r7, #7]
 8013ce2:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Password\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1 && password_index >= PASSWORD_LENGTH - 1)
 8013ce4:	4b49      	ldr	r3, [pc, #292]	; (8013e0c <fm_menu_config_pass+0x2b0>)
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	2b01      	cmp	r3, #1
 8013cea:	f040 80be 	bne.w	8013e6a <fm_menu_config_pass+0x30e>
 8013cee:	4b44      	ldr	r3, [pc, #272]	; (8013e00 <fm_menu_config_pass+0x2a4>)
 8013cf0:	781b      	ldrb	r3, [r3, #0]
 8013cf2:	2b02      	cmp	r3, #2
 8013cf4:	f240 80b9 	bls.w	8013e6a <fm_menu_config_pass+0x30e>
    {
        /*
         * Si la contraseña ingresada es correcta, se activa una flag global que
         * permite modificar los parámetros de los menús de configuración.
         */
        if (password[0] == PASS_DOWN && password[1] == PASS_UP
 8013cf8:	4b42      	ldr	r3, [pc, #264]	; (8013e04 <fm_menu_config_pass+0x2a8>)
 8013cfa:	781b      	ldrb	r3, [r3, #0]
 8013cfc:	2b02      	cmp	r3, #2
 8013cfe:	d11d      	bne.n	8013d3c <fm_menu_config_pass+0x1e0>
 8013d00:	4b40      	ldr	r3, [pc, #256]	; (8013e04 <fm_menu_config_pass+0x2a8>)
 8013d02:	785b      	ldrb	r3, [r3, #1]
 8013d04:	2b01      	cmp	r3, #1
 8013d06:	d119      	bne.n	8013d3c <fm_menu_config_pass+0x1e0>
        && password[2] == PASS_UP
 8013d08:	4b3e      	ldr	r3, [pc, #248]	; (8013e04 <fm_menu_config_pass+0x2a8>)
 8013d0a:	789b      	ldrb	r3, [r3, #2]
 8013d0c:	2b01      	cmp	r3, #1
 8013d0e:	d115      	bne.n	8013d3c <fm_menu_config_pass+0x1e0>
        && password[PASSWORD_LENGTH - 1] == PASS_ENTER)
 8013d10:	4b3c      	ldr	r3, [pc, #240]	; (8013e04 <fm_menu_config_pass+0x2a8>)
 8013d12:	78db      	ldrb	r3, [r3, #3]
 8013d14:	2b03      	cmp	r3, #3
 8013d16:	d111      	bne.n	8013d3c <fm_menu_config_pass+0x1e0>
        {
            correct_password = 1;
 8013d18:	4b38      	ldr	r3, [pc, #224]	; (8013dfc <fm_menu_config_pass+0x2a0>)
 8013d1a:	2201      	movs	r2, #1
 8013d1c:	701a      	strb	r2, [r3, #0]

            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 8013d1e:	4b3d      	ldr	r3, [pc, #244]	; (8013e14 <fm_menu_config_pass+0x2b8>)
 8013d20:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8013d22:	2301      	movs	r3, #1
 8013d24:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013d26:	f107 030b 	add.w	r3, r7, #11
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	4619      	mov	r1, r3
 8013d2e:	4836      	ldr	r0, [pc, #216]	; (8013e08 <fm_menu_config_pass+0x2ac>)
 8013d30:	f7fa fd18 	bl	800e764 <_txe_queue_send>

            password_try = 0;
 8013d34:	4b38      	ldr	r3, [pc, #224]	; (8013e18 <fm_menu_config_pass+0x2bc>)
 8013d36:	2200      	movs	r2, #0
 8013d38:	701a      	strb	r2, [r3, #0]
 8013d3a:	e081      	b.n	8013e40 <fm_menu_config_pass+0x2e4>
        }
        else if (password[0] == PASS_DOWN && password[1] == PASS_DOWN
 8013d3c:	4b31      	ldr	r3, [pc, #196]	; (8013e04 <fm_menu_config_pass+0x2a8>)
 8013d3e:	781b      	ldrb	r3, [r3, #0]
 8013d40:	2b02      	cmp	r3, #2
 8013d42:	d139      	bne.n	8013db8 <fm_menu_config_pass+0x25c>
 8013d44:	4b2f      	ldr	r3, [pc, #188]	; (8013e04 <fm_menu_config_pass+0x2a8>)
 8013d46:	785b      	ldrb	r3, [r3, #1]
 8013d48:	2b02      	cmp	r3, #2
 8013d4a:	d135      	bne.n	8013db8 <fm_menu_config_pass+0x25c>
        && password[2] == PASS_UP && password[PASSWORD_LENGTH - 1] == PASS_UP)
 8013d4c:	4b2d      	ldr	r3, [pc, #180]	; (8013e04 <fm_menu_config_pass+0x2a8>)
 8013d4e:	789b      	ldrb	r3, [r3, #2]
 8013d50:	2b01      	cmp	r3, #1
 8013d52:	d131      	bne.n	8013db8 <fm_menu_config_pass+0x25c>
 8013d54:	4b2b      	ldr	r3, [pc, #172]	; (8013e04 <fm_menu_config_pass+0x2a8>)
 8013d56:	78db      	ldrb	r3, [r3, #3]
 8013d58:	2b01      	cmp	r3, #1
 8013d5a:	d12d      	bne.n	8013db8 <fm_menu_config_pass+0x25c>
        {
            correct_password = 1;
 8013d5c:	4b27      	ldr	r3, [pc, #156]	; (8013dfc <fm_menu_config_pass+0x2a0>)
 8013d5e:	2201      	movs	r2, #1
 8013d60:	701a      	strb	r2, [r3, #0]

            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8013d62:	4b2e      	ldr	r3, [pc, #184]	; (8013e1c <fm_menu_config_pass+0x2c0>)
 8013d64:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8013d66:	2301      	movs	r3, #1
 8013d68:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013d6a:	f107 030b 	add.w	r3, r7, #11
 8013d6e:	2200      	movs	r2, #0
 8013d70:	4619      	mov	r1, r3
 8013d72:	4825      	ldr	r0, [pc, #148]	; (8013e08 <fm_menu_config_pass+0x2ac>)
 8013d74:	f7fa fcf6 	bl	800e764 <_txe_queue_send>

            fm_factory_modify_date(fm_calendar_get_day(),
 8013d78:	f7fb f8ec 	bl	800ef54 <fm_calendar_get_day>
 8013d7c:	4604      	mov	r4, r0
 8013d7e:	f7fb f907 	bl	800ef90 <fm_calendar_get_month>
 8013d82:	4605      	mov	r5, r0
 8013d84:	f7fb f918 	bl	800efb8 <fm_calendar_get_year>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	461a      	mov	r2, r3
 8013d8c:	4629      	mov	r1, r5
 8013d8e:	4620      	mov	r0, r4
 8013d90:	f7fb fa9e 	bl	800f2d0 <fm_factory_modify_date>
            fm_calendar_get_month(), fm_calendar_get_year());

            fm_factory_modify_time(fm_calendar_get_hour(),
 8013d94:	f7fb f8e8 	bl	800ef68 <fm_calendar_get_hour>
 8013d98:	4604      	mov	r4, r0
 8013d9a:	f7fb f8ef 	bl	800ef7c <fm_calendar_get_minute>
 8013d9e:	4605      	mov	r5, r0
 8013da0:	f7fb f900 	bl	800efa4 <fm_calendar_get_second>
 8013da4:	4603      	mov	r3, r0
 8013da6:	461a      	mov	r2, r3
 8013da8:	4629      	mov	r1, r5
 8013daa:	4620      	mov	r0, r4
 8013dac:	f7fb fd9c 	bl	800f8e8 <fm_factory_modify_time>
            fm_calendar_get_minute(), fm_calendar_get_second());

            password_try = 0;
 8013db0:	4b19      	ldr	r3, [pc, #100]	; (8013e18 <fm_menu_config_pass+0x2bc>)
 8013db2:	2200      	movs	r2, #0
 8013db4:	701a      	strb	r2, [r3, #0]
 8013db6:	e043      	b.n	8013e40 <fm_menu_config_pass+0x2e4>
        }
        else
        {
            correct_password = 0;
 8013db8:	4b10      	ldr	r3, [pc, #64]	; (8013dfc <fm_menu_config_pass+0x2a0>)
 8013dba:	2200      	movs	r2, #0
 8013dbc:	701a      	strb	r2, [r3, #0]
            password_try++;
 8013dbe:	4b16      	ldr	r3, [pc, #88]	; (8013e18 <fm_menu_config_pass+0x2bc>)
 8013dc0:	781b      	ldrb	r3, [r3, #0]
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	b2da      	uxtb	r2, r3
 8013dc6:	4b14      	ldr	r3, [pc, #80]	; (8013e18 <fm_menu_config_pass+0x2bc>)
 8013dc8:	701a      	strb	r2, [r3, #0]

            if (password_try < password_try_max)
 8013dca:	4b13      	ldr	r3, [pc, #76]	; (8013e18 <fm_menu_config_pass+0x2bc>)
 8013dcc:	781a      	ldrb	r2, [r3, #0]
 8013dce:	4b14      	ldr	r3, [pc, #80]	; (8013e20 <fm_menu_config_pass+0x2c4>)
 8013dd0:	781b      	ldrb	r3, [r3, #0]
 8013dd2:	429a      	cmp	r2, r3
 8013dd4:	d226      	bcs.n	8013e24 <fm_menu_config_pass+0x2c8>
            {
                ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013dd6:	4b06      	ldr	r3, [pc, #24]	; (8013df0 <fm_menu_config_pass+0x294>)
 8013dd8:	60fb      	str	r3, [r7, #12]
                event_now = EVENT_LCD_REFRESH;
 8013dda:	2301      	movs	r3, #1
 8013ddc:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013dde:	f107 030b 	add.w	r3, r7, #11
 8013de2:	2200      	movs	r2, #0
 8013de4:	4619      	mov	r1, r3
 8013de6:	4808      	ldr	r0, [pc, #32]	; (8013e08 <fm_menu_config_pass+0x2ac>)
 8013de8:	f7fa fcbc 	bl	800e764 <_txe_queue_send>
 8013dec:	e028      	b.n	8013e40 <fm_menu_config_pass+0x2e4>
 8013dee:	bf00      	nop
 8013df0:	08013b5d 	.word	0x08013b5d
 8013df4:	20000148 	.word	0x20000148
 8013df8:	20001e14 	.word	0x20001e14
 8013dfc:	20001e12 	.word	0x20001e12
 8013e00:	20001e29 	.word	0x20001e29
 8013e04:	20001e2c 	.word	0x20001e2c
 8013e08:	20001388 	.word	0x20001388
 8013e0c:	20001e30 	.word	0x20001e30
 8013e10:	20001e13 	.word	0x20001e13
 8013e14:	080139b5 	.word	0x080139b5
 8013e18:	20001e31 	.word	0x20001e31
 8013e1c:	08014135 	.word	0x08014135
 8013e20:	08015ad4 	.word	0x08015ad4
            }
            else
            {
                ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013e24:	4b13      	ldr	r3, [pc, #76]	; (8013e74 <fm_menu_config_pass+0x318>)
 8013e26:	60fb      	str	r3, [r7, #12]
                event_now = EVENT_LCD_REFRESH;
 8013e28:	2301      	movs	r3, #1
 8013e2a:	72fb      	strb	r3, [r7, #11]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013e2c:	f107 030b 	add.w	r3, r7, #11
 8013e30:	2200      	movs	r2, #0
 8013e32:	4619      	mov	r1, r3
 8013e34:	4810      	ldr	r0, [pc, #64]	; (8013e78 <fm_menu_config_pass+0x31c>)
 8013e36:	f7fa fc95 	bl	800e764 <_txe_queue_send>

                password_try = 0;
 8013e3a:	4b10      	ldr	r3, [pc, #64]	; (8013e7c <fm_menu_config_pass+0x320>)
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	701a      	strb	r2, [r3, #0]
        }

        /*
         * Reinicio el arreglo de la contraseña ingresada.
         */
        password_index = PASS_0;
 8013e40:	4b0f      	ldr	r3, [pc, #60]	; (8013e80 <fm_menu_config_pass+0x324>)
 8013e42:	2200      	movs	r2, #0
 8013e44:	701a      	strb	r2, [r3, #0]
        password[0] = PASS_0;
 8013e46:	4b0f      	ldr	r3, [pc, #60]	; (8013e84 <fm_menu_config_pass+0x328>)
 8013e48:	2200      	movs	r2, #0
 8013e4a:	701a      	strb	r2, [r3, #0]
        password[1] = PASS_0;
 8013e4c:	4b0d      	ldr	r3, [pc, #52]	; (8013e84 <fm_menu_config_pass+0x328>)
 8013e4e:	2200      	movs	r2, #0
 8013e50:	705a      	strb	r2, [r3, #1]
        password[2] = PASS_0;
 8013e52:	4b0c      	ldr	r3, [pc, #48]	; (8013e84 <fm_menu_config_pass+0x328>)
 8013e54:	2200      	movs	r2, #0
 8013e56:	709a      	strb	r2, [r3, #2]
        password[PASSWORD_LENGTH - 1] = PASS_0;
 8013e58:	4b0a      	ldr	r3, [pc, #40]	; (8013e84 <fm_menu_config_pass+0x328>)
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	70da      	strb	r2, [r3, #3]
        new_entry = 1;
 8013e5e:	4b0a      	ldr	r3, [pc, #40]	; (8013e88 <fm_menu_config_pass+0x32c>)
 8013e60:	2201      	movs	r2, #1
 8013e62:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013e64:	4b09      	ldr	r3, [pc, #36]	; (8013e8c <fm_menu_config_pass+0x330>)
 8013e66:	2200      	movs	r2, #0
 8013e68:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013e6a:	68fb      	ldr	r3, [r7, #12]
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3710      	adds	r7, #16
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bdb0      	pop	{r4, r5, r7, pc}
 8013e74:	0801477d 	.word	0x0801477d
 8013e78:	20001388 	.word	0x20001388
 8013e7c:	20001e31 	.word	0x20001e31
 8013e80:	20001e29 	.word	0x20001e29
 8013e84:	20001e2c 	.word	0x20001e2c
 8013e88:	20000148 	.word	0x20000148
 8013e8c:	20001e30 	.word	0x20001e30

08013e90 <fm_menu_config_units_tim>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_tim(fm_event_t event_id)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b0ce      	sub	sp, #312	; 0x138
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	4602      	mov	r2, r0
 8013e98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013e9c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8013ea0:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 8013ea2:	4b9d      	ldr	r3, [pc, #628]	; (8014118 <fm_menu_config_units_tim+0x288>)
 8013ea4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    fm_event_t event_now;

    if (new_entry == 1)
 8013ea8:	4b9c      	ldr	r3, [pc, #624]	; (801411c <fm_menu_config_units_tim+0x28c>)
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	2b01      	cmp	r3, #1
 8013eae:	d104      	bne.n	8013eba <fm_menu_config_units_tim+0x2a>
    {
        fm_lcd_clear();
 8013eb0:	f7fb ff3d 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 8013eb4:	4b99      	ldr	r3, [pc, #612]	; (801411c <fm_menu_config_units_tim+0x28c>)
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_tim(event_id);
 8013eba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013ebe:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7fc fb2f 	bl	8010528 <fm_lcd_units_tim>
    fm_lcd_refresh();
 8013eca:	f7fc fabc 	bl	8010446 <fm_lcd_refresh>

    switch (event_id)
 8013ece:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013ed2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8013ed6:	781b      	ldrb	r3, [r3, #0]
 8013ed8:	3b01      	subs	r3, #1
 8013eda:	2b04      	cmp	r3, #4
 8013edc:	f200 8103 	bhi.w	80140e6 <fm_menu_config_units_tim+0x256>
 8013ee0:	a201      	add	r2, pc, #4	; (adr r2, 8013ee8 <fm_menu_config_units_tim+0x58>)
 8013ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ee6:	bf00      	nop
 8013ee8:	080140e7 	.word	0x080140e7
 8013eec:	08013efd 	.word	0x08013efd
 8013ef0:	08013f9f 	.word	0x08013f9f
 8013ef4:	0801402d 	.word	0x0801402d
 8013ef8:	080140bf 	.word	0x080140bf
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013efc:	4b88      	ldr	r3, [pc, #544]	; (8014120 <fm_menu_config_units_tim+0x290>)
 8013efe:	781b      	ldrb	r3, [r3, #0]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d03e      	beq.n	8013f82 <fm_menu_config_units_tim+0xf2>
            {
                if (fm_factory_get_rate().unit_time == H)
 8013f04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013f08:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7fb f97d 	bl	800f20c <fm_factory_get_rate>
 8013f12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013f16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013f1a:	7e5b      	ldrb	r3, [r3, #25]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d103      	bne.n	8013f28 <fm_menu_config_units_tim+0x98>
                {
                    fm_factory_modify_time_units(D);
 8013f20:	2001      	movs	r0, #1
 8013f22:	f7fb fd0f 	bl	800f944 <fm_factory_modify_time_units>
 8013f26:	e02a      	b.n	8013f7e <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013f28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7fb f96b 	bl	800f20c <fm_factory_get_rate>
 8013f36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f3e:	7e5b      	ldrb	r3, [r3, #25]
 8013f40:	2b01      	cmp	r3, #1
 8013f42:	d103      	bne.n	8013f4c <fm_menu_config_units_tim+0xbc>
                {
                    fm_factory_modify_time_units(S);
 8013f44:	2002      	movs	r0, #2
 8013f46:	f7fb fcfd 	bl	800f944 <fm_factory_modify_time_units>
 8013f4a:	e018      	b.n	8013f7e <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == S)
 8013f4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013f50:	4618      	mov	r0, r3
 8013f52:	f7fb f95b 	bl	800f20c <fm_factory_get_rate>
 8013f56:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8013f5a:	2b02      	cmp	r3, #2
 8013f5c:	d103      	bne.n	8013f66 <fm_menu_config_units_tim+0xd6>
                {
                    fm_factory_modify_time_units(M);
 8013f5e:	2003      	movs	r0, #3
 8013f60:	f7fb fcf0 	bl	800f944 <fm_factory_modify_time_units>
 8013f64:	e00b      	b.n	8013f7e <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013f66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7fb f94e 	bl	800f20c <fm_factory_get_rate>
 8013f70:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8013f74:	2b03      	cmp	r3, #3
 8013f76:	d102      	bne.n	8013f7e <fm_menu_config_units_tim+0xee>
                {
                    fm_factory_modify_time_units(H);
 8013f78:	2000      	movs	r0, #0
 8013f7a:	f7fb fce3 	bl	800f944 <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 8013f7e:	f7fb fed6 	bl	800fd2e <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013f82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013f86:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013f8a:	2201      	movs	r2, #1
 8013f8c:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013f8e:	f107 030f 	add.w	r3, r7, #15
 8013f92:	2200      	movs	r2, #0
 8013f94:	4619      	mov	r1, r3
 8013f96:	4863      	ldr	r0, [pc, #396]	; (8014124 <fm_menu_config_units_tim+0x294>)
 8013f98:	f7fa fbe4 	bl	800e764 <_txe_queue_send>
        break;
 8013f9c:	e0a4      	b.n	80140e8 <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013f9e:	4b60      	ldr	r3, [pc, #384]	; (8014120 <fm_menu_config_units_tim+0x290>)
 8013fa0:	781b      	ldrb	r3, [r3, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d034      	beq.n	8014010 <fm_menu_config_units_tim+0x180>
            {
                if (fm_factory_get_rate().unit_time == H)
 8013fa6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7fb f92e 	bl	800f20c <fm_factory_get_rate>
 8013fb0:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d103      	bne.n	8013fc0 <fm_menu_config_units_tim+0x130>
                {
                    fm_factory_modify_time_units(M);
 8013fb8:	2003      	movs	r0, #3
 8013fba:	f7fb fcc3 	bl	800f944 <fm_factory_modify_time_units>
 8013fbe:	e025      	b.n	801400c <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013fc0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f7fb f921 	bl	800f20c <fm_factory_get_rate>
 8013fca:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8013fce:	2b03      	cmp	r3, #3
 8013fd0:	d103      	bne.n	8013fda <fm_menu_config_units_tim+0x14a>
                {
                    fm_factory_modify_time_units(S);
 8013fd2:	2002      	movs	r0, #2
 8013fd4:	f7fb fcb6 	bl	800f944 <fm_factory_modify_time_units>
 8013fd8:	e018      	b.n	801400c <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == S)
 8013fda:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7fb f914 	bl	800f20c <fm_factory_get_rate>
 8013fe4:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8013fe8:	2b02      	cmp	r3, #2
 8013fea:	d103      	bne.n	8013ff4 <fm_menu_config_units_tim+0x164>
                {
                    fm_factory_modify_time_units(D);
 8013fec:	2001      	movs	r0, #1
 8013fee:	f7fb fca9 	bl	800f944 <fm_factory_modify_time_units>
 8013ff2:	e00b      	b.n	801400c <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013ff4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7fb f907 	bl	800f20c <fm_factory_get_rate>
 8013ffe:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8014002:	2b01      	cmp	r3, #1
 8014004:	d102      	bne.n	801400c <fm_menu_config_units_tim+0x17c>
                {
                    fm_factory_modify_time_units(H);
 8014006:	2000      	movs	r0, #0
 8014008:	f7fb fc9c 	bl	800f944 <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 801400c:	f7fb fe8f 	bl	800fd2e <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8014010:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014014:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8014018:	2201      	movs	r2, #1
 801401a:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801401c:	f107 030f 	add.w	r3, r7, #15
 8014020:	2200      	movs	r2, #0
 8014022:	4619      	mov	r1, r3
 8014024:	483f      	ldr	r0, [pc, #252]	; (8014124 <fm_menu_config_units_tim+0x294>)
 8014026:	f7fa fb9d 	bl	800e764 <_txe_queue_send>
        break;
 801402a:	e05d      	b.n	80140e8 <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_ENTER:
            if (correct_password)
 801402c:	4b3c      	ldr	r3, [pc, #240]	; (8014120 <fm_menu_config_units_tim+0x290>)
 801402e:	781b      	ldrb	r3, [r3, #0]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d036      	beq.n	80140a2 <fm_menu_config_units_tim+0x212>
            {
                if (fm_factory_get_units_tim().res == RES_0)
 8014034:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8014038:	4618      	mov	r0, r3
 801403a:	f7fb f925 	bl	800f288 <fm_factory_get_units_tim>
 801403e:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8014042:	2b00      	cmp	r3, #0
 8014044:	d104      	bne.n	8014050 <fm_menu_config_units_tim+0x1c0>
                {
                    fm_factory_modify_res_rate(RES_1, RES_1);
 8014046:	2101      	movs	r1, #1
 8014048:	2001      	movs	r0, #1
 801404a:	f7fb fc35 	bl	800f8b8 <fm_factory_modify_res_rate>
 801404e:	e028      	b.n	80140a2 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_1)
 8014050:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8014054:	4618      	mov	r0, r3
 8014056:	f7fb f917 	bl	800f288 <fm_factory_get_units_tim>
 801405a:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 801405e:	2b01      	cmp	r3, #1
 8014060:	d104      	bne.n	801406c <fm_menu_config_units_tim+0x1dc>
                {
                    fm_factory_modify_res_rate(RES_2, RES_2);
 8014062:	2102      	movs	r1, #2
 8014064:	2002      	movs	r0, #2
 8014066:	f7fb fc27 	bl	800f8b8 <fm_factory_modify_res_rate>
 801406a:	e01a      	b.n	80140a2 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_2)
 801406c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8014070:	4618      	mov	r0, r3
 8014072:	f7fb f909 	bl	800f288 <fm_factory_get_units_tim>
 8014076:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 801407a:	2b02      	cmp	r3, #2
 801407c:	d104      	bne.n	8014088 <fm_menu_config_units_tim+0x1f8>
                {
                    fm_factory_modify_res_rate(RES_3, RES_3);
 801407e:	2103      	movs	r1, #3
 8014080:	2003      	movs	r0, #3
 8014082:	f7fb fc19 	bl	800f8b8 <fm_factory_modify_res_rate>
 8014086:	e00c      	b.n	80140a2 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_3)
 8014088:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801408c:	4618      	mov	r0, r3
 801408e:	f7fb f8fb 	bl	800f288 <fm_factory_get_units_tim>
 8014092:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
 8014096:	2b03      	cmp	r3, #3
 8014098:	d103      	bne.n	80140a2 <fm_menu_config_units_tim+0x212>
                {
                    fm_factory_modify_res_rate(RES_0, RES_0);
 801409a:	2100      	movs	r1, #0
 801409c:	2000      	movs	r0, #0
 801409e:	f7fb fc0b 	bl	800f8b8 <fm_factory_modify_res_rate>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80140a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80140a6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80140aa:	2201      	movs	r2, #1
 80140ac:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80140ae:	f107 030f 	add.w	r3, r7, #15
 80140b2:	2200      	movs	r2, #0
 80140b4:	4619      	mov	r1, r3
 80140b6:	481b      	ldr	r0, [pc, #108]	; (8014124 <fm_menu_config_units_tim+0x294>)
 80140b8:	f7fa fb54 	bl	800e764 <_txe_queue_send>
        break;
 80140bc:	e014      	b.n	80140e8 <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80140be:	4b1a      	ldr	r3, [pc, #104]	; (8014128 <fm_menu_config_units_tim+0x298>)
 80140c0:	2201      	movs	r2, #1
 80140c2:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 80140c4:	4b19      	ldr	r3, [pc, #100]	; (801412c <fm_menu_config_units_tim+0x29c>)
 80140c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            event_now = EVENT_LCD_REFRESH;
 80140ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80140ce:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80140d2:	2201      	movs	r2, #1
 80140d4:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80140d6:	f107 030f 	add.w	r3, r7, #15
 80140da:	2200      	movs	r2, #0
 80140dc:	4619      	mov	r1, r3
 80140de:	4811      	ldr	r0, [pc, #68]	; (8014124 <fm_menu_config_units_tim+0x294>)
 80140e0:	f7fa fb40 	bl	800e764 <_txe_queue_send>
        break;
 80140e4:	e000      	b.n	80140e8 <fm_menu_config_units_tim+0x258>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80140e6:	bf00      	nop
    }

    previous_event = event_id;
 80140e8:	4a11      	ldr	r2, [pc, #68]	; (8014130 <fm_menu_config_units_tim+0x2a0>)
 80140ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80140ee:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80140f2:	781b      	ldrb	r3, [r3, #0]
 80140f4:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades de tiempo y resolucion\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 80140f6:	4b0c      	ldr	r3, [pc, #48]	; (8014128 <fm_menu_config_units_tim+0x298>)
 80140f8:	781b      	ldrb	r3, [r3, #0]
 80140fa:	2b01      	cmp	r3, #1
 80140fc:	d105      	bne.n	801410a <fm_menu_config_units_tim+0x27a>
    {
        new_entry = 1;
 80140fe:	4b07      	ldr	r3, [pc, #28]	; (801411c <fm_menu_config_units_tim+0x28c>)
 8014100:	2201      	movs	r2, #1
 8014102:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014104:	4b08      	ldr	r3, [pc, #32]	; (8014128 <fm_menu_config_units_tim+0x298>)
 8014106:	2200      	movs	r2, #0
 8014108:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801410a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
}
 801410e:	4618      	mov	r0, r3
 8014110:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}
 8014118:	08013e91 	.word	0x08013e91
 801411c:	20000149 	.word	0x20000149
 8014120:	20001e12 	.word	0x20001e12
 8014124:	20001388 	.word	0x20001388
 8014128:	20001e32 	.word	0x20001e32
 801412c:	08012a3d 	.word	0x08012a3d
 8014130:	20001e13 	.word	0x20001e13

08014134 <fm_menu_config_units_vol>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_vol(fm_event_t event_id)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b0fe      	sub	sp, #504	; 0x1f8
 8014138:	af00      	add	r7, sp, #0
 801413a:	4602      	mov	r2, r0
 801413c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014140:	f2a3 13f1 	subw	r3, r3, #497	; 0x1f1
 8014144:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8014146:	4bc9      	ldr	r3, [pc, #804]	; (801446c <fm_menu_config_units_vol+0x338>)
 8014148:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    fm_event_t event_now;

    if (new_entry == 1)
 801414c:	4bc8      	ldr	r3, [pc, #800]	; (8014470 <fm_menu_config_units_vol+0x33c>)
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	2b01      	cmp	r3, #1
 8014152:	d104      	bne.n	801415e <fm_menu_config_units_vol+0x2a>
    {
        fm_lcd_clear();
 8014154:	f7fb fdeb 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 8014158:	4bc5      	ldr	r3, [pc, #788]	; (8014470 <fm_menu_config_units_vol+0x33c>)
 801415a:	2200      	movs	r2, #0
 801415c:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_vol(event_id);
 801415e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014162:	f2a3 13f1 	subw	r3, r3, #497	; 0x1f1
 8014166:	781b      	ldrb	r3, [r3, #0]
 8014168:	4618      	mov	r0, r3
 801416a:	f7fc fa79 	bl	8010660 <fm_lcd_units_vol>
    fm_lcd_refresh();
 801416e:	f7fc f96a 	bl	8010446 <fm_lcd_refresh>

    switch (event_id)
 8014172:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014176:	f2a3 13f1 	subw	r3, r3, #497	; 0x1f1
 801417a:	781b      	ldrb	r3, [r3, #0]
 801417c:	3b01      	subs	r3, #1
 801417e:	2b04      	cmp	r3, #4
 8014180:	f200 8180 	bhi.w	8014484 <fm_menu_config_units_vol+0x350>
 8014184:	a201      	add	r2, pc, #4	; (adr r2, 801418c <fm_menu_config_units_vol+0x58>)
 8014186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801418a:	bf00      	nop
 801418c:	08014485 	.word	0x08014485
 8014190:	080141a1 	.word	0x080141a1
 8014194:	080142c3 	.word	0x080142c3
 8014198:	080143a9 	.word	0x080143a9
 801419c:	08014443 	.word	0x08014443
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80141a0:	4bb4      	ldr	r3, [pc, #720]	; (8014474 <fm_menu_config_units_vol+0x340>)
 80141a2:	781b      	ldrb	r3, [r3, #0]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d07e      	beq.n	80142a6 <fm_menu_config_units_vol+0x172>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 80141a8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80141ac:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7fa ff0b 	bl	800efcc <fm_factory_get_acm>
 80141b6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80141ba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80141be:	7e1b      	ldrb	r3, [r3, #24]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d103      	bne.n	80141cc <fm_menu_config_units_vol+0x98>
                {
                    fm_factory_modify_volume_units(M3);
 80141c4:	2001      	movs	r0, #1
 80141c6:	f7fb fbd7 	bl	800f978 <fm_factory_modify_volume_units>
 80141ca:	e06a      	b.n	80142a2 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 80141cc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80141d0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80141d4:	4618      	mov	r0, r3
 80141d6:	f7fa fef9 	bl	800efcc <fm_factory_get_acm>
 80141da:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80141de:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80141e2:	7e1b      	ldrb	r3, [r3, #24]
 80141e4:	2b01      	cmp	r3, #1
 80141e6:	d103      	bne.n	80141f0 <fm_menu_config_units_vol+0xbc>
                {
                    fm_factory_modify_volume_units(MC);
 80141e8:	2002      	movs	r0, #2
 80141ea:	f7fb fbc5 	bl	800f978 <fm_factory_modify_volume_units>
 80141ee:	e058      	b.n	80142a2 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == MC)
 80141f0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80141f4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7fa fee7 	bl	800efcc <fm_factory_get_acm>
 80141fe:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014202:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8014206:	7e1b      	ldrb	r3, [r3, #24]
 8014208:	2b02      	cmp	r3, #2
 801420a:	d103      	bne.n	8014214 <fm_menu_config_units_vol+0xe0>
                {
                    fm_factory_modify_volume_units(KG);
 801420c:	2003      	movs	r0, #3
 801420e:	f7fb fbb3 	bl	800f978 <fm_factory_modify_volume_units>
 8014212:	e046      	b.n	80142a2 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 8014214:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014218:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801421c:	4618      	mov	r0, r3
 801421e:	f7fa fed5 	bl	800efcc <fm_factory_get_acm>
 8014222:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014226:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801422a:	7e1b      	ldrb	r3, [r3, #24]
 801422c:	2b03      	cmp	r3, #3
 801422e:	d103      	bne.n	8014238 <fm_menu_config_units_vol+0x104>
                {
                    fm_factory_modify_volume_units(GL);
 8014230:	2004      	movs	r0, #4
 8014232:	f7fb fba1 	bl	800f978 <fm_factory_modify_volume_units>
 8014236:	e034      	b.n	80142a2 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 8014238:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801423c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8014240:	4618      	mov	r0, r3
 8014242:	f7fa fec3 	bl	800efcc <fm_factory_get_acm>
 8014246:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801424a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801424e:	7e1b      	ldrb	r3, [r3, #24]
 8014250:	2b04      	cmp	r3, #4
 8014252:	d103      	bne.n	801425c <fm_menu_config_units_vol+0x128>
                {
                    fm_factory_modify_volume_units(BR);
 8014254:	2005      	movs	r0, #5
 8014256:	f7fb fb8f 	bl	800f978 <fm_factory_modify_volume_units>
 801425a:	e022      	b.n	80142a2 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 801425c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014260:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8014264:	4618      	mov	r0, r3
 8014266:	f7fa feb1 	bl	800efcc <fm_factory_get_acm>
 801426a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801426e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8014272:	7e1b      	ldrb	r3, [r3, #24]
 8014274:	2b05      	cmp	r3, #5
 8014276:	d103      	bne.n	8014280 <fm_menu_config_units_vol+0x14c>
                {
                    fm_factory_modify_volume_units(NOTHING);
 8014278:	2007      	movs	r0, #7
 801427a:	f7fb fb7d 	bl	800f978 <fm_factory_modify_volume_units>
 801427e:	e010      	b.n	80142a2 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 8014280:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014284:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014288:	4618      	mov	r0, r3
 801428a:	f7fa fe9f 	bl	800efcc <fm_factory_get_acm>
 801428e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014292:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014296:	7e1b      	ldrb	r3, [r3, #24]
 8014298:	2b07      	cmp	r3, #7
 801429a:	d102      	bne.n	80142a2 <fm_menu_config_units_vol+0x16e>
                {
                    fm_factory_modify_volume_units(LT);
 801429c:	2000      	movs	r0, #0
 801429e:	f7fb fb6b 	bl	800f978 <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 80142a2:	f7fb fd44 	bl	800fd2e <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 80142a6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80142aa:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 80142ae:	2201      	movs	r2, #1
 80142b0:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80142b2:	f107 030f 	add.w	r3, r7, #15
 80142b6:	2200      	movs	r2, #0
 80142b8:	4619      	mov	r1, r3
 80142ba:	486f      	ldr	r0, [pc, #444]	; (8014478 <fm_menu_config_units_vol+0x344>)
 80142bc:	f7fa fa52 	bl	800e764 <_txe_queue_send>
        break;
 80142c0:	e0e1      	b.n	8014486 <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80142c2:	4b6c      	ldr	r3, [pc, #432]	; (8014474 <fm_menu_config_units_vol+0x340>)
 80142c4:	781b      	ldrb	r3, [r3, #0]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d060      	beq.n	801438c <fm_menu_config_units_vol+0x258>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 80142ca:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80142ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7fa fe7a 	bl	800efcc <fm_factory_get_acm>
 80142d8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80142dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80142e0:	7e1b      	ldrb	r3, [r3, #24]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d103      	bne.n	80142ee <fm_menu_config_units_vol+0x1ba>
                {
                    fm_factory_modify_volume_units(NOTHING);
 80142e6:	2007      	movs	r0, #7
 80142e8:	f7fb fb46 	bl	800f978 <fm_factory_modify_volume_units>
 80142ec:	e04c      	b.n	8014388 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 80142ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80142f2:	4618      	mov	r0, r3
 80142f4:	f7fa fe6a 	bl	800efcc <fm_factory_get_acm>
 80142f8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80142fc:	2b07      	cmp	r3, #7
 80142fe:	d103      	bne.n	8014308 <fm_menu_config_units_vol+0x1d4>
                {
                    fm_factory_modify_volume_units(BR);
 8014300:	2005      	movs	r0, #5
 8014302:	f7fb fb39 	bl	800f978 <fm_factory_modify_volume_units>
 8014306:	e03f      	b.n	8014388 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 8014308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801430c:	4618      	mov	r0, r3
 801430e:	f7fa fe5d 	bl	800efcc <fm_factory_get_acm>
 8014312:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 8014316:	2b05      	cmp	r3, #5
 8014318:	d103      	bne.n	8014322 <fm_menu_config_units_vol+0x1ee>
                {
                    fm_factory_modify_volume_units(GL);
 801431a:	2004      	movs	r0, #4
 801431c:	f7fb fb2c 	bl	800f978 <fm_factory_modify_volume_units>
 8014320:	e032      	b.n	8014388 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 8014322:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8014326:	4618      	mov	r0, r3
 8014328:	f7fa fe50 	bl	800efcc <fm_factory_get_acm>
 801432c:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8014330:	2b04      	cmp	r3, #4
 8014332:	d103      	bne.n	801433c <fm_menu_config_units_vol+0x208>
                {
                    fm_factory_modify_volume_units(KG);
 8014334:	2003      	movs	r0, #3
 8014336:	f7fb fb1f 	bl	800f978 <fm_factory_modify_volume_units>
 801433a:	e025      	b.n	8014388 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 801433c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014340:	4618      	mov	r0, r3
 8014342:	f7fa fe43 	bl	800efcc <fm_factory_get_acm>
 8014346:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 801434a:	2b03      	cmp	r3, #3
 801434c:	d103      	bne.n	8014356 <fm_menu_config_units_vol+0x222>
                {
                    fm_factory_modify_volume_units(MC);
 801434e:	2002      	movs	r0, #2
 8014350:	f7fb fb12 	bl	800f978 <fm_factory_modify_volume_units>
 8014354:	e018      	b.n	8014388 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == MC)
 8014356:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801435a:	4618      	mov	r0, r3
 801435c:	f7fa fe36 	bl	800efcc <fm_factory_get_acm>
 8014360:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8014364:	2b02      	cmp	r3, #2
 8014366:	d103      	bne.n	8014370 <fm_menu_config_units_vol+0x23c>
                {
                    fm_factory_modify_volume_units(M3);
 8014368:	2001      	movs	r0, #1
 801436a:	f7fb fb05 	bl	800f978 <fm_factory_modify_volume_units>
 801436e:	e00b      	b.n	8014388 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 8014370:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8014374:	4618      	mov	r0, r3
 8014376:	f7fa fe29 	bl	800efcc <fm_factory_get_acm>
 801437a:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 801437e:	2b01      	cmp	r3, #1
 8014380:	d102      	bne.n	8014388 <fm_menu_config_units_vol+0x254>
                {
                    fm_factory_modify_volume_units(LT);
 8014382:	2000      	movs	r0, #0
 8014384:	f7fb faf8 	bl	800f978 <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 8014388:	f7fb fcd1 	bl	800fd2e <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 801438c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014390:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8014394:	2201      	movs	r2, #1
 8014396:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014398:	f107 030f 	add.w	r3, r7, #15
 801439c:	2200      	movs	r2, #0
 801439e:	4619      	mov	r1, r3
 80143a0:	4835      	ldr	r0, [pc, #212]	; (8014478 <fm_menu_config_units_vol+0x344>)
 80143a2:	f7fa f9df 	bl	800e764 <_txe_queue_send>
        break;
 80143a6:	e06e      	b.n	8014486 <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80143a8:	4b32      	ldr	r3, [pc, #200]	; (8014474 <fm_menu_config_units_vol+0x340>)
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d03a      	beq.n	8014426 <fm_menu_config_units_vol+0x2f2>
            {
                if (fm_factory_get_units_vol().res == RES_0)
 80143b0:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7fa ff79 	bl	800f2ac <fm_factory_get_units_vol>
 80143ba:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d105      	bne.n	80143ce <fm_menu_config_units_vol+0x29a>
                {
                    fm_factory_modify_res_acm_ttl(RES_1, RES_1, RES_1);
 80143c2:	2201      	movs	r2, #1
 80143c4:	2101      	movs	r1, #1
 80143c6:	2001      	movs	r0, #1
 80143c8:	f7fb fa58 	bl	800f87c <fm_factory_modify_res_acm_ttl>
 80143cc:	e02b      	b.n	8014426 <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_1)
 80143ce:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7fa ff6a 	bl	800f2ac <fm_factory_get_units_vol>
 80143d8:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80143dc:	2b01      	cmp	r3, #1
 80143de:	d105      	bne.n	80143ec <fm_menu_config_units_vol+0x2b8>
                {
                    fm_factory_modify_res_acm_ttl(RES_2, RES_2, RES_2);
 80143e0:	2202      	movs	r2, #2
 80143e2:	2102      	movs	r1, #2
 80143e4:	2002      	movs	r0, #2
 80143e6:	f7fb fa49 	bl	800f87c <fm_factory_modify_res_acm_ttl>
 80143ea:	e01c      	b.n	8014426 <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_2)
 80143ec:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80143f0:	4618      	mov	r0, r3
 80143f2:	f7fa ff5b 	bl	800f2ac <fm_factory_get_units_vol>
 80143f6:	f897 31e8 	ldrb.w	r3, [r7, #488]	; 0x1e8
 80143fa:	2b02      	cmp	r3, #2
 80143fc:	d105      	bne.n	801440a <fm_menu_config_units_vol+0x2d6>
                {
                    fm_factory_modify_res_acm_ttl(RES_3, RES_3, RES_3);
 80143fe:	2203      	movs	r2, #3
 8014400:	2103      	movs	r1, #3
 8014402:	2003      	movs	r0, #3
 8014404:	f7fb fa3a 	bl	800f87c <fm_factory_modify_res_acm_ttl>
 8014408:	e00d      	b.n	8014426 <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_3)
 801440a:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801440e:	4618      	mov	r0, r3
 8014410:	f7fa ff4c 	bl	800f2ac <fm_factory_get_units_vol>
 8014414:	f897 31f0 	ldrb.w	r3, [r7, #496]	; 0x1f0
 8014418:	2b03      	cmp	r3, #3
 801441a:	d104      	bne.n	8014426 <fm_menu_config_units_vol+0x2f2>
                {
                    fm_factory_modify_res_acm_ttl(RES_0, RES_0, RES_0);
 801441c:	2200      	movs	r2, #0
 801441e:	2100      	movs	r1, #0
 8014420:	2000      	movs	r0, #0
 8014422:	f7fb fa2b 	bl	800f87c <fm_factory_modify_res_acm_ttl>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8014426:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801442a:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 801442e:	2201      	movs	r2, #1
 8014430:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014432:	f107 030f 	add.w	r3, r7, #15
 8014436:	2200      	movs	r2, #0
 8014438:	4619      	mov	r1, r3
 801443a:	480f      	ldr	r0, [pc, #60]	; (8014478 <fm_menu_config_units_vol+0x344>)
 801443c:	f7fa f992 	bl	800e764 <_txe_queue_send>
        break;
 8014440:	e021      	b.n	8014486 <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8014442:	4b0e      	ldr	r3, [pc, #56]	; (801447c <fm_menu_config_units_vol+0x348>)
 8014444:	2201      	movs	r2, #1
 8014446:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 8014448:	4b0d      	ldr	r3, [pc, #52]	; (8014480 <fm_menu_config_units_vol+0x34c>)
 801444a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            event_now = EVENT_LCD_REFRESH;
 801444e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8014452:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8014456:	2201      	movs	r2, #1
 8014458:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801445a:	f107 030f 	add.w	r3, r7, #15
 801445e:	2200      	movs	r2, #0
 8014460:	4619      	mov	r1, r3
 8014462:	4805      	ldr	r0, [pc, #20]	; (8014478 <fm_menu_config_units_vol+0x344>)
 8014464:	f7fa f97e 	bl	800e764 <_txe_queue_send>
        break;
 8014468:	e00d      	b.n	8014486 <fm_menu_config_units_vol+0x352>
 801446a:	bf00      	nop
 801446c:	08014135 	.word	0x08014135
 8014470:	2000014a 	.word	0x2000014a
 8014474:	20001e12 	.word	0x20001e12
 8014478:	20001388 	.word	0x20001388
 801447c:	20001e33 	.word	0x20001e33
 8014480:	08013e91 	.word	0x08013e91
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014484:	bf00      	nop
    }

    previous_event = event_id;
 8014486:	4a0c      	ldr	r2, [pc, #48]	; (80144b8 <fm_menu_config_units_vol+0x384>)
 8014488:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801448c:	f2a3 13f1 	subw	r3, r3, #497	; 0x1f1
 8014490:	781b      	ldrb	r3, [r3, #0]
 8014492:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades de volumen y resolucion\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 8014494:	4b09      	ldr	r3, [pc, #36]	; (80144bc <fm_menu_config_units_vol+0x388>)
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	2b01      	cmp	r3, #1
 801449a:	d105      	bne.n	80144a8 <fm_menu_config_units_vol+0x374>
    {
        new_entry = 1;
 801449c:	4b08      	ldr	r3, [pc, #32]	; (80144c0 <fm_menu_config_units_vol+0x38c>)
 801449e:	2201      	movs	r2, #1
 80144a0:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80144a2:	4b06      	ldr	r3, [pc, #24]	; (80144bc <fm_menu_config_units_vol+0x388>)
 80144a4:	2200      	movs	r2, #0
 80144a6:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80144a8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
}
 80144ac:	4618      	mov	r0, r3
 80144ae:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}
 80144b6:	bf00      	nop
 80144b8:	20001e13 	.word	0x20001e13
 80144bc:	20001e33 	.word	0x20001e33
 80144c0:	2000014a 	.word	0x2000014a

080144c4 <fm_menu_show_acm_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_rate(fm_event_t event_id)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b084      	sub	sp, #16
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	4603      	mov	r3, r0
 80144cc:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 80144ce:	4b32      	ldr	r3, [pc, #200]	; (8014598 <fm_menu_show_acm_rate+0xd4>)
 80144d0:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 80144d2:	4b32      	ldr	r3, [pc, #200]	; (801459c <fm_menu_show_acm_rate+0xd8>)
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	2b01      	cmp	r3, #1
 80144d8:	d104      	bne.n	80144e4 <fm_menu_show_acm_rate+0x20>
    {
        fm_lcd_clear();
 80144da:	f7fb fc28 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 80144de:	4b2f      	ldr	r3, [pc, #188]	; (801459c <fm_menu_show_acm_rate+0xd8>)
 80144e0:	2200      	movs	r2, #0
 80144e2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_rate();
 80144e4:	f7fb fb60 	bl	800fba8 <fm_lcd_acm_rate>
    fm_lcd_refresh();
 80144e8:	f7fb ffad 	bl	8010446 <fm_lcd_refresh>

    switch (event_id)
 80144ec:	79fb      	ldrb	r3, [r7, #7]
 80144ee:	3b01      	subs	r3, #1
 80144f0:	2b04      	cmp	r3, #4
 80144f2:	d841      	bhi.n	8014578 <fm_menu_show_acm_rate+0xb4>
 80144f4:	a201      	add	r2, pc, #4	; (adr r2, 80144fc <fm_menu_show_acm_rate+0x38>)
 80144f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144fa:	bf00      	nop
 80144fc:	08014579 	.word	0x08014579
 8014500:	08014511 	.word	0x08014511
 8014504:	0801452f 	.word	0x0801452f
 8014508:	0801454d 	.word	0x0801454d
 801450c:	08014565 	.word	0x08014565
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8014510:	4b23      	ldr	r3, [pc, #140]	; (80145a0 <fm_menu_show_acm_rate+0xdc>)
 8014512:	2201      	movs	r2, #1
 8014514:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014516:	4b23      	ldr	r3, [pc, #140]	; (80145a4 <fm_menu_show_acm_rate+0xe0>)
 8014518:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 801451a:	2301      	movs	r3, #1
 801451c:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801451e:	f107 030b 	add.w	r3, r7, #11
 8014522:	2200      	movs	r2, #0
 8014524:	4619      	mov	r1, r3
 8014526:	4820      	ldr	r0, [pc, #128]	; (80145a8 <fm_menu_show_acm_rate+0xe4>)
 8014528:	f7fa f91c 	bl	800e764 <_txe_queue_send>
        break;
 801452c:	e025      	b.n	801457a <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 801452e:	4b1c      	ldr	r3, [pc, #112]	; (80145a0 <fm_menu_show_acm_rate+0xdc>)
 8014530:	2201      	movs	r2, #1
 8014532:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8014534:	4b1d      	ldr	r3, [pc, #116]	; (80145ac <fm_menu_show_acm_rate+0xe8>)
 8014536:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8014538:	2301      	movs	r3, #1
 801453a:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801453c:	f107 030b 	add.w	r3, r7, #11
 8014540:	2200      	movs	r2, #0
 8014542:	4619      	mov	r1, r3
 8014544:	4818      	ldr	r0, [pc, #96]	; (80145a8 <fm_menu_show_acm_rate+0xe4>)
 8014546:	f7fa f90d 	bl	800e764 <_txe_queue_send>
        break;
 801454a:	e016      	b.n	801457a <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_ENTER:
            fm_factory_reset_acm();
 801454c:	f7fb fa2e 	bl	800f9ac <fm_factory_reset_acm>
            event_now = EVENT_LCD_REFRESH;
 8014550:	2301      	movs	r3, #1
 8014552:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014554:	f107 030b 	add.w	r3, r7, #11
 8014558:	2200      	movs	r2, #0
 801455a:	4619      	mov	r1, r3
 801455c:	4812      	ldr	r0, [pc, #72]	; (80145a8 <fm_menu_show_acm_rate+0xe4>)
 801455e:	f7fa f901 	bl	800e764 <_txe_queue_send>
        break;
 8014562:	e00a      	b.n	801457a <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 8014564:	2301      	movs	r3, #1
 8014566:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014568:	f107 030b 	add.w	r3, r7, #11
 801456c:	2200      	movs	r2, #0
 801456e:	4619      	mov	r1, r3
 8014570:	480d      	ldr	r0, [pc, #52]	; (80145a8 <fm_menu_show_acm_rate+0xe4>)
 8014572:	f7fa f8f7 	bl	800e764 <_txe_queue_send>
        break;
 8014576:	e000      	b.n	801457a <fm_menu_show_acm_rate+0xb6>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014578:	bf00      	nop
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_rate\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 801457a:	4b09      	ldr	r3, [pc, #36]	; (80145a0 <fm_menu_show_acm_rate+0xdc>)
 801457c:	781b      	ldrb	r3, [r3, #0]
 801457e:	2b01      	cmp	r3, #1
 8014580:	d105      	bne.n	801458e <fm_menu_show_acm_rate+0xca>
    {
        new_entry = 1;
 8014582:	4b06      	ldr	r3, [pc, #24]	; (801459c <fm_menu_show_acm_rate+0xd8>)
 8014584:	2201      	movs	r2, #1
 8014586:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014588:	4b05      	ldr	r3, [pc, #20]	; (80145a0 <fm_menu_show_acm_rate+0xdc>)
 801458a:	2200      	movs	r2, #0
 801458c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801458e:	68fb      	ldr	r3, [r7, #12]
}
 8014590:	4618      	mov	r0, r3
 8014592:	3710      	adds	r7, #16
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}
 8014598:	080144c5 	.word	0x080144c5
 801459c:	2000014b 	.word	0x2000014b
 80145a0:	20001e34 	.word	0x20001e34
 80145a4:	08014895 	.word	0x08014895
 80145a8:	20001388 	.word	0x20001388
 80145ac:	080145b1 	.word	0x080145b1

080145b0 <fm_menu_show_acm_temp>:
 * la pantalla.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_temp(fm_event_t event_id)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b084      	sub	sp, #16
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	4603      	mov	r3, r0
 80145b8:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 80145ba:	4b31      	ldr	r3, [pc, #196]	; (8014680 <fm_menu_show_acm_temp+0xd0>)
 80145bc:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 80145be:	4b31      	ldr	r3, [pc, #196]	; (8014684 <fm_menu_show_acm_temp+0xd4>)
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	2b01      	cmp	r3, #1
 80145c4:	d104      	bne.n	80145d0 <fm_menu_show_acm_temp+0x20>
    {
        fm_lcd_clear();
 80145c6:	f7fb fbb2 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 80145ca:	4b2e      	ldr	r3, [pc, #184]	; (8014684 <fm_menu_show_acm_temp+0xd4>)
 80145cc:	2200      	movs	r2, #0
 80145ce:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_temp();
 80145d0:	f7fb fb55 	bl	800fc7e <fm_lcd_acm_temp>
    fm_lcd_refresh();
 80145d4:	f7fb ff37 	bl	8010446 <fm_lcd_refresh>

    switch (event_id)
 80145d8:	79fb      	ldrb	r3, [r7, #7]
 80145da:	3b01      	subs	r3, #1
 80145dc:	2b04      	cmp	r3, #4
 80145de:	d83f      	bhi.n	8014660 <fm_menu_show_acm_temp+0xb0>
 80145e0:	a201      	add	r2, pc, #4	; (adr r2, 80145e8 <fm_menu_show_acm_temp+0x38>)
 80145e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145e6:	bf00      	nop
 80145e8:	08014661 	.word	0x08014661
 80145ec:	080145fd 	.word	0x080145fd
 80145f0:	0801461b 	.word	0x0801461b
 80145f4:	08014639 	.word	0x08014639
 80145f8:	0801464d 	.word	0x0801464d
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 80145fc:	4b22      	ldr	r3, [pc, #136]	; (8014688 <fm_menu_show_acm_temp+0xd8>)
 80145fe:	2201      	movs	r2, #1
 8014600:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 8014602:	4b22      	ldr	r3, [pc, #136]	; (801468c <fm_menu_show_acm_temp+0xdc>)
 8014604:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8014606:	2301      	movs	r3, #1
 8014608:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801460a:	f107 030b 	add.w	r3, r7, #11
 801460e:	2200      	movs	r2, #0
 8014610:	4619      	mov	r1, r3
 8014612:	481f      	ldr	r0, [pc, #124]	; (8014690 <fm_menu_show_acm_temp+0xe0>)
 8014614:	f7fa f8a6 	bl	800e764 <_txe_queue_send>
        break;
 8014618:	e023      	b.n	8014662 <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 801461a:	4b1b      	ldr	r3, [pc, #108]	; (8014688 <fm_menu_show_acm_temp+0xd8>)
 801461c:	2201      	movs	r2, #1
 801461e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 8014620:	4b1c      	ldr	r3, [pc, #112]	; (8014694 <fm_menu_show_acm_temp+0xe4>)
 8014622:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8014624:	2301      	movs	r3, #1
 8014626:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014628:	f107 030b 	add.w	r3, r7, #11
 801462c:	2200      	movs	r2, #0
 801462e:	4619      	mov	r1, r3
 8014630:	4817      	ldr	r0, [pc, #92]	; (8014690 <fm_menu_show_acm_temp+0xe0>)
 8014632:	f7fa f897 	bl	800e764 <_txe_queue_send>
        break;
 8014636:	e014      	b.n	8014662 <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 8014638:	2301      	movs	r3, #1
 801463a:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801463c:	f107 030b 	add.w	r3, r7, #11
 8014640:	2200      	movs	r2, #0
 8014642:	4619      	mov	r1, r3
 8014644:	4812      	ldr	r0, [pc, #72]	; (8014690 <fm_menu_show_acm_temp+0xe0>)
 8014646:	f7fa f88d 	bl	800e764 <_txe_queue_send>
        break;
 801464a:	e00a      	b.n	8014662 <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 801464c:	2301      	movs	r3, #1
 801464e:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014650:	f107 030b 	add.w	r3, r7, #11
 8014654:	2200      	movs	r2, #0
 8014656:	4619      	mov	r1, r3
 8014658:	480d      	ldr	r0, [pc, #52]	; (8014690 <fm_menu_show_acm_temp+0xe0>)
 801465a:	f7fa f883 	bl	800e764 <_txe_queue_send>
        break;
 801465e:	e000      	b.n	8014662 <fm_menu_show_acm_temp+0xb2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014660:	bf00      	nop
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_temp\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 8014662:	4b09      	ldr	r3, [pc, #36]	; (8014688 <fm_menu_show_acm_temp+0xd8>)
 8014664:	781b      	ldrb	r3, [r3, #0]
 8014666:	2b01      	cmp	r3, #1
 8014668:	d105      	bne.n	8014676 <fm_menu_show_acm_temp+0xc6>
    {
        new_entry = 1;
 801466a:	4b06      	ldr	r3, [pc, #24]	; (8014684 <fm_menu_show_acm_temp+0xd4>)
 801466c:	2201      	movs	r2, #1
 801466e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014670:	4b05      	ldr	r3, [pc, #20]	; (8014688 <fm_menu_show_acm_temp+0xd8>)
 8014672:	2200      	movs	r2, #0
 8014674:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014676:	68fb      	ldr	r3, [r7, #12]
}
 8014678:	4618      	mov	r0, r3
 801467a:	3710      	adds	r7, #16
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}
 8014680:	080145b1 	.word	0x080145b1
 8014684:	2000014c 	.word	0x2000014c
 8014688:	20001e35 	.word	0x20001e35
 801468c:	080144c5 	.word	0x080144c5
 8014690:	20001388 	.word	0x20001388
 8014694:	08014699 	.word	0x08014699

08014698 <fm_menu_show_date_hour>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_date_hour(fm_event_t event_id)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b084      	sub	sp, #16
 801469c:	af00      	add	r7, sp, #0
 801469e:	4603      	mov	r3, r0
 80146a0:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 80146a2:	4b31      	ldr	r3, [pc, #196]	; (8014768 <fm_menu_show_date_hour+0xd0>)
 80146a4:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 80146a6:	4b31      	ldr	r3, [pc, #196]	; (801476c <fm_menu_show_date_hour+0xd4>)
 80146a8:	781b      	ldrb	r3, [r3, #0]
 80146aa:	2b01      	cmp	r3, #1
 80146ac:	d104      	bne.n	80146b8 <fm_menu_show_date_hour+0x20>
    {
        fm_lcd_clear();
 80146ae:	f7fb fb3e 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 80146b2:	4b2e      	ldr	r3, [pc, #184]	; (801476c <fm_menu_show_date_hour+0xd4>)
 80146b4:	2200      	movs	r2, #0
 80146b6:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(USER, event_id, DAY);
 80146b8:	79fb      	ldrb	r3, [r7, #7]
 80146ba:	2200      	movs	r2, #0
 80146bc:	4619      	mov	r1, r3
 80146be:	2000      	movs	r0, #0
 80146c0:	f7fb fb3c 	bl	800fd3c <fm_lcd_date_hour>

    fm_lcd_refresh();
 80146c4:	f7fb febf 	bl	8010446 <fm_lcd_refresh>

    switch (event_id)
 80146c8:	79fb      	ldrb	r3, [r7, #7]
 80146ca:	3b01      	subs	r3, #1
 80146cc:	2b04      	cmp	r3, #4
 80146ce:	d83a      	bhi.n	8014746 <fm_menu_show_date_hour+0xae>
 80146d0:	a201      	add	r2, pc, #4	; (adr r2, 80146d8 <fm_menu_show_date_hour+0x40>)
 80146d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146d6:	bf00      	nop
 80146d8:	08014747 	.word	0x08014747
 80146dc:	080146ed 	.word	0x080146ed
 80146e0:	0801470b 	.word	0x0801470b
 80146e4:	0801471f 	.word	0x0801471f
 80146e8:	08014733 	.word	0x08014733
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 80146ec:	4b20      	ldr	r3, [pc, #128]	; (8014770 <fm_menu_show_date_hour+0xd8>)
 80146ee:	2201      	movs	r2, #1
 80146f0:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 80146f2:	4b20      	ldr	r3, [pc, #128]	; (8014774 <fm_menu_show_date_hour+0xdc>)
 80146f4:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 80146f6:	2301      	movs	r3, #1
 80146f8:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80146fa:	f107 030b 	add.w	r3, r7, #11
 80146fe:	2200      	movs	r2, #0
 8014700:	4619      	mov	r1, r3
 8014702:	481d      	ldr	r0, [pc, #116]	; (8014778 <fm_menu_show_date_hour+0xe0>)
 8014704:	f7fa f82e 	bl	800e764 <_txe_queue_send>
        break;
 8014708:	e01e      	b.n	8014748 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 801470a:	2301      	movs	r3, #1
 801470c:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801470e:	f107 030b 	add.w	r3, r7, #11
 8014712:	2200      	movs	r2, #0
 8014714:	4619      	mov	r1, r3
 8014716:	4818      	ldr	r0, [pc, #96]	; (8014778 <fm_menu_show_date_hour+0xe0>)
 8014718:	f7fa f824 	bl	800e764 <_txe_queue_send>
        break;
 801471c:	e014      	b.n	8014748 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 801471e:	2301      	movs	r3, #1
 8014720:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014722:	f107 030b 	add.w	r3, r7, #11
 8014726:	2200      	movs	r2, #0
 8014728:	4619      	mov	r1, r3
 801472a:	4813      	ldr	r0, [pc, #76]	; (8014778 <fm_menu_show_date_hour+0xe0>)
 801472c:	f7fa f81a 	bl	800e764 <_txe_queue_send>
        break;
 8014730:	e00a      	b.n	8014748 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 8014732:	2301      	movs	r3, #1
 8014734:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014736:	f107 030b 	add.w	r3, r7, #11
 801473a:	2200      	movs	r2, #0
 801473c:	4619      	mov	r1, r3
 801473e:	480e      	ldr	r0, [pc, #56]	; (8014778 <fm_menu_show_date_hour+0xe0>)
 8014740:	f7fa f810 	bl	800e764 <_txe_queue_send>
        break;
 8014744:	e000      	b.n	8014748 <fm_menu_show_date_hour+0xb0>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014746:	bf00      	nop
#ifdef FM_DEBUG_MENU
    char msg_buffer3[] = "date_hour\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer3, sizeof(msg_buffer3));
#endif

    if (new_exit == 1)
 8014748:	4b09      	ldr	r3, [pc, #36]	; (8014770 <fm_menu_show_date_hour+0xd8>)
 801474a:	781b      	ldrb	r3, [r3, #0]
 801474c:	2b01      	cmp	r3, #1
 801474e:	d105      	bne.n	801475c <fm_menu_show_date_hour+0xc4>
    {
        new_entry = 1;
 8014750:	4b06      	ldr	r3, [pc, #24]	; (801476c <fm_menu_show_date_hour+0xd4>)
 8014752:	2201      	movs	r2, #1
 8014754:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014756:	4b06      	ldr	r3, [pc, #24]	; (8014770 <fm_menu_show_date_hour+0xd8>)
 8014758:	2200      	movs	r2, #0
 801475a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801475c:	68fb      	ldr	r3, [r7, #12]
}
 801475e:	4618      	mov	r0, r3
 8014760:	3710      	adds	r7, #16
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}
 8014766:	bf00      	nop
 8014768:	08014699 	.word	0x08014699
 801476c:	2000014d 	.word	0x2000014d
 8014770:	20001e36 	.word	0x20001e36
 8014774:	080145b1 	.word	0x080145b1
 8014778:	20001388 	.word	0x20001388

0801477c <fm_menu_show_init>:
 * encendiendo todos los segmentos y la backlight por 3 segundos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_init(fm_event_t event_id)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b084      	sub	sp, #16
 8014780:	af00      	add	r7, sp, #0
 8014782:	4603      	mov	r3, r0
 8014784:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const uint8_t counter_max = 30;
 8014786:	231e      	movs	r3, #30
 8014788:	72fb      	strb	r3, [r7, #11]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 801478a:	4b3b      	ldr	r3, [pc, #236]	; (8014878 <fm_menu_show_init+0xfc>)
 801478c:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 801478e:	4b3b      	ldr	r3, [pc, #236]	; (801487c <fm_menu_show_init+0x100>)
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	2b01      	cmp	r3, #1
 8014794:	d10c      	bne.n	80147b0 <fm_menu_show_init+0x34>
    {
        HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8014796:	2200      	movs	r2, #0
 8014798:	f44f 7180 	mov.w	r1, #256	; 0x100
 801479c:	4838      	ldr	r0, [pc, #224]	; (8014880 <fm_menu_show_init+0x104>)
 801479e:	f7ef ff2d 	bl	80045fc <HAL_GPIO_WritePin>
        PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
        fm_lcd_init();
 80147a2:	f7fb fcbc 	bl	801011e <fm_lcd_init>
        fm_lcd_clear();
 80147a6:	f7fb fac2 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 80147aa:	4b34      	ldr	r3, [pc, #208]	; (801487c <fm_menu_show_init+0x100>)
 80147ac:	2200      	movs	r2, #0
 80147ae:	701a      	strb	r2, [r3, #0]
    }

    pcf8553_write_all(0xFF); // @suppress("Avoid magic numbers")
 80147b0:	20ff      	movs	r0, #255	; 0xff
 80147b2:	f7fe f927 	bl	8012a04 <pcf8553_write_all>

    switch (event_id)
 80147b6:	79fb      	ldrb	r3, [r7, #7]
 80147b8:	3b01      	subs	r3, #1
 80147ba:	2b04      	cmp	r3, #4
 80147bc:	d848      	bhi.n	8014850 <fm_menu_show_init+0xd4>
 80147be:	a201      	add	r2, pc, #4	; (adr r2, 80147c4 <fm_menu_show_init+0x48>)
 80147c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147c4:	080147fd 	.word	0x080147fd
 80147c8:	08014851 	.word	0x08014851
 80147cc:	08014851 	.word	0x08014851
 80147d0:	080147d9 	.word	0x080147d9
 80147d4:	08014851 	.word	0x08014851
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 80147d8:	482a      	ldr	r0, [pc, #168]	; (8014884 <fm_menu_show_init+0x108>)
 80147da:	f7f9 ff5b 	bl	800e694 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 80147de:	4b2a      	ldr	r3, [pc, #168]	; (8014888 <fm_menu_show_init+0x10c>)
 80147e0:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 80147e2:	2301      	movs	r3, #1
 80147e4:	72bb      	strb	r3, [r7, #10]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80147e6:	f107 030a 	add.w	r3, r7, #10
 80147ea:	2200      	movs	r2, #0
 80147ec:	4619      	mov	r1, r3
 80147ee:	4825      	ldr	r0, [pc, #148]	; (8014884 <fm_menu_show_init+0x108>)
 80147f0:	f7f9 ffb8 	bl	800e764 <_txe_queue_send>
            new_exit = 1;
 80147f4:	4b25      	ldr	r3, [pc, #148]	; (801488c <fm_menu_show_init+0x110>)
 80147f6:	2201      	movs	r2, #1
 80147f8:	701a      	strb	r2, [r3, #0]
        break;
 80147fa:	e02a      	b.n	8014852 <fm_menu_show_init+0xd6>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if (counter < counter_max)
 80147fc:	4b24      	ldr	r3, [pc, #144]	; (8014890 <fm_menu_show_init+0x114>)
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	7afa      	ldrb	r2, [r7, #11]
 8014802:	429a      	cmp	r2, r3
 8014804:	d912      	bls.n	801482c <fm_menu_show_init+0xb0>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 8014806:	2064      	movs	r0, #100	; 0x64
 8014808:	f7ed fa20 	bl	8001c4c <HAL_Delay>
                counter++;
 801480c:	4b20      	ldr	r3, [pc, #128]	; (8014890 <fm_menu_show_init+0x114>)
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	3301      	adds	r3, #1
 8014812:	b2da      	uxtb	r2, r3
 8014814:	4b1e      	ldr	r3, [pc, #120]	; (8014890 <fm_menu_show_init+0x114>)
 8014816:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 8014818:	2301      	movs	r3, #1
 801481a:	72bb      	strb	r3, [r7, #10]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801481c:	f107 030a 	add.w	r3, r7, #10
 8014820:	2200      	movs	r2, #0
 8014822:	4619      	mov	r1, r3
 8014824:	4817      	ldr	r0, [pc, #92]	; (8014884 <fm_menu_show_init+0x108>)
 8014826:	f7f9 ff9d 	bl	800e764 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 801482a:	e012      	b.n	8014852 <fm_menu_show_init+0xd6>
                tx_queue_flush(&event_queue_ptr);
 801482c:	4815      	ldr	r0, [pc, #84]	; (8014884 <fm_menu_show_init+0x108>)
 801482e:	f7f9 ff31 	bl	800e694 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 8014832:	4b15      	ldr	r3, [pc, #84]	; (8014888 <fm_menu_show_init+0x10c>)
 8014834:	60fb      	str	r3, [r7, #12]
                event_now = EVENT_LCD_REFRESH;
 8014836:	2301      	movs	r3, #1
 8014838:	72bb      	strb	r3, [r7, #10]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801483a:	f107 030a 	add.w	r3, r7, #10
 801483e:	2200      	movs	r2, #0
 8014840:	4619      	mov	r1, r3
 8014842:	4810      	ldr	r0, [pc, #64]	; (8014884 <fm_menu_show_init+0x108>)
 8014844:	f7f9 ff8e 	bl	800e764 <_txe_queue_send>
                new_exit = 1;
 8014848:	4b10      	ldr	r3, [pc, #64]	; (801488c <fm_menu_show_init+0x110>)
 801484a:	2201      	movs	r2, #1
 801484c:	701a      	strb	r2, [r3, #0]
        break;
 801484e:	e000      	b.n	8014852 <fm_menu_show_init+0xd6>
        default:
        break;
 8014850:	bf00      	nop
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "INIT\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 8014852:	4b0e      	ldr	r3, [pc, #56]	; (801488c <fm_menu_show_init+0x110>)
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	2b01      	cmp	r3, #1
 8014858:	d108      	bne.n	801486c <fm_menu_show_init+0xf0>
    {
        counter = 0;
 801485a:	4b0d      	ldr	r3, [pc, #52]	; (8014890 <fm_menu_show_init+0x114>)
 801485c:	2200      	movs	r2, #0
 801485e:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8014860:	4b06      	ldr	r3, [pc, #24]	; (801487c <fm_menu_show_init+0x100>)
 8014862:	2201      	movs	r2, #1
 8014864:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014866:	4b09      	ldr	r3, [pc, #36]	; (801488c <fm_menu_show_init+0x110>)
 8014868:	2200      	movs	r2, #0
 801486a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801486c:	68fb      	ldr	r3, [r7, #12]
}
 801486e:	4618      	mov	r0, r3
 8014870:	3710      	adds	r7, #16
 8014872:	46bd      	mov	sp, r7
 8014874:	bd80      	pop	{r7, pc}
 8014876:	bf00      	nop
 8014878:	0801477d 	.word	0x0801477d
 801487c:	2000014e 	.word	0x2000014e
 8014880:	42020800 	.word	0x42020800
 8014884:	20001388 	.word	0x20001388
 8014888:	0801497d 	.word	0x0801497d
 801488c:	20001e37 	.word	0x20001e37
 8014890:	20001e38 	.word	0x20001e38

08014894 <fm_menu_show_ttl_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_ttl_rate(fm_event_t event_id)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	4603      	mov	r3, r0
 801489c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 801489e:	4b31      	ldr	r3, [pc, #196]	; (8014964 <fm_menu_show_ttl_rate+0xd0>)
 80148a0:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 80148a2:	4b31      	ldr	r3, [pc, #196]	; (8014968 <fm_menu_show_ttl_rate+0xd4>)
 80148a4:	781b      	ldrb	r3, [r3, #0]
 80148a6:	2b01      	cmp	r3, #1
 80148a8:	d104      	bne.n	80148b4 <fm_menu_show_ttl_rate+0x20>
    {
        fm_lcd_clear();
 80148aa:	f7fb fa40 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 80148ae:	4b2e      	ldr	r3, [pc, #184]	; (8014968 <fm_menu_show_ttl_rate+0xd4>)
 80148b0:	2200      	movs	r2, #0
 80148b2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_ttl_rate();
 80148b4:	f7fb fdcd 	bl	8010452 <fm_lcd_ttl_rate>
    fm_lcd_refresh();
 80148b8:	f7fb fdc5 	bl	8010446 <fm_lcd_refresh>

    switch (event_id)
 80148bc:	79fb      	ldrb	r3, [r7, #7]
 80148be:	3b01      	subs	r3, #1
 80148c0:	2b04      	cmp	r3, #4
 80148c2:	d83f      	bhi.n	8014944 <fm_menu_show_ttl_rate+0xb0>
 80148c4:	a201      	add	r2, pc, #4	; (adr r2, 80148cc <fm_menu_show_ttl_rate+0x38>)
 80148c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148ca:	bf00      	nop
 80148cc:	08014945 	.word	0x08014945
 80148d0:	080148e1 	.word	0x080148e1
 80148d4:	080148f5 	.word	0x080148f5
 80148d8:	08014913 	.word	0x08014913
 80148dc:	08014927 	.word	0x08014927
    {
        case EVENT_KEY_UP:
            event_now = EVENT_LCD_REFRESH;
 80148e0:	2301      	movs	r3, #1
 80148e2:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80148e4:	f107 030b 	add.w	r3, r7, #11
 80148e8:	2200      	movs	r2, #0
 80148ea:	4619      	mov	r1, r3
 80148ec:	481f      	ldr	r0, [pc, #124]	; (801496c <fm_menu_show_ttl_rate+0xd8>)
 80148ee:	f7f9 ff39 	bl	800e764 <_txe_queue_send>
        break;
 80148f2:	e028      	b.n	8014946 <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 80148f4:	4b1e      	ldr	r3, [pc, #120]	; (8014970 <fm_menu_show_ttl_rate+0xdc>)
 80148f6:	2201      	movs	r2, #1
 80148f8:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 80148fa:	4b1e      	ldr	r3, [pc, #120]	; (8014974 <fm_menu_show_ttl_rate+0xe0>)
 80148fc:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 80148fe:	2301      	movs	r3, #1
 8014900:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014902:	f107 030b 	add.w	r3, r7, #11
 8014906:	2200      	movs	r2, #0
 8014908:	4619      	mov	r1, r3
 801490a:	4818      	ldr	r0, [pc, #96]	; (801496c <fm_menu_show_ttl_rate+0xd8>)
 801490c:	f7f9 ff2a 	bl	800e764 <_txe_queue_send>
        break;
 8014910:	e019      	b.n	8014946 <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 8014912:	2301      	movs	r3, #1
 8014914:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014916:	f107 030b 	add.w	r3, r7, #11
 801491a:	2200      	movs	r2, #0
 801491c:	4619      	mov	r1, r3
 801491e:	4813      	ldr	r0, [pc, #76]	; (801496c <fm_menu_show_ttl_rate+0xd8>)
 8014920:	f7f9 ff20 	bl	800e764 <_txe_queue_send>
        break;
 8014924:	e00f      	b.n	8014946 <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8014926:	4b12      	ldr	r3, [pc, #72]	; (8014970 <fm_menu_show_ttl_rate+0xdc>)
 8014928:	2201      	movs	r2, #1
 801492a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 801492c:	4b12      	ldr	r3, [pc, #72]	; (8014978 <fm_menu_show_ttl_rate+0xe4>)
 801492e:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 8014930:	2301      	movs	r3, #1
 8014932:	72fb      	strb	r3, [r7, #11]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014934:	f107 030b 	add.w	r3, r7, #11
 8014938:	2200      	movs	r2, #0
 801493a:	4619      	mov	r1, r3
 801493c:	480b      	ldr	r0, [pc, #44]	; (801496c <fm_menu_show_ttl_rate+0xd8>)
 801493e:	f7f9 ff11 	bl	800e764 <_txe_queue_send>
        break;
 8014942:	e000      	b.n	8014946 <fm_menu_show_ttl_rate+0xb2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014944:	bf00      	nop
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "ttl_rate\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 8014946:	4b0a      	ldr	r3, [pc, #40]	; (8014970 <fm_menu_show_ttl_rate+0xdc>)
 8014948:	781b      	ldrb	r3, [r3, #0]
 801494a:	2b01      	cmp	r3, #1
 801494c:	d105      	bne.n	801495a <fm_menu_show_ttl_rate+0xc6>
    {
        new_entry = 1;
 801494e:	4b06      	ldr	r3, [pc, #24]	; (8014968 <fm_menu_show_ttl_rate+0xd4>)
 8014950:	2201      	movs	r2, #1
 8014952:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014954:	4b06      	ldr	r3, [pc, #24]	; (8014970 <fm_menu_show_ttl_rate+0xdc>)
 8014956:	2200      	movs	r2, #0
 8014958:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801495a:	68fb      	ldr	r3, [r7, #12]
}
 801495c:	4618      	mov	r0, r3
 801495e:	3710      	adds	r7, #16
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}
 8014964:	08014895 	.word	0x08014895
 8014968:	2000014f 	.word	0x2000014f
 801496c:	20001388 	.word	0x20001388
 8014970:	20001e39 	.word	0x20001e39
 8014974:	080144c5 	.word	0x080144c5
 8014978:	08013b5d 	.word	0x08013b5d

0801497c <fm_menu_show_version>:
 * caudales.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_version(fm_event_t event_id)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b084      	sub	sp, #16
 8014980:	af00      	add	r7, sp, #0
 8014982:	4603      	mov	r3, r0
 8014984:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const uint8_t counter_max = 30;
 8014986:	231e      	movs	r3, #30
 8014988:	72fb      	strb	r3, [r7, #11]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 801498a:	4b3c      	ldr	r3, [pc, #240]	; (8014a7c <fm_menu_show_version+0x100>)
 801498c:	60fb      	str	r3, [r7, #12]
    fm_event_t event_now;

    if (new_entry == 1)
 801498e:	4b3c      	ldr	r3, [pc, #240]	; (8014a80 <fm_menu_show_version+0x104>)
 8014990:	781b      	ldrb	r3, [r3, #0]
 8014992:	2b01      	cmp	r3, #1
 8014994:	d104      	bne.n	80149a0 <fm_menu_show_version+0x24>
    {
        fm_lcd_clear();
 8014996:	f7fb f9ca 	bl	800fd2e <fm_lcd_clear>
        new_entry = 0;
 801499a:	4b39      	ldr	r3, [pc, #228]	; (8014a80 <fm_menu_show_version+0x104>)
 801499c:	2200      	movs	r2, #0
 801499e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_version(PNT_4, PNT_5);
 80149a0:	2105      	movs	r1, #5
 80149a2:	2004      	movs	r0, #4
 80149a4:	f7fb fefc 	bl	80107a0 <fm_lcd_version>
    fm_lcd_refresh();
 80149a8:	f7fb fd4d 	bl	8010446 <fm_lcd_refresh>

    switch (event_id)
 80149ac:	79fb      	ldrb	r3, [r7, #7]
 80149ae:	3b01      	subs	r3, #1
 80149b0:	2b04      	cmp	r3, #4
 80149b2:	d849      	bhi.n	8014a48 <fm_menu_show_version+0xcc>
 80149b4:	a201      	add	r2, pc, #4	; (adr r2, 80149bc <fm_menu_show_version+0x40>)
 80149b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149ba:	bf00      	nop
 80149bc:	080149f5 	.word	0x080149f5
 80149c0:	08014a49 	.word	0x08014a49
 80149c4:	08014a49 	.word	0x08014a49
 80149c8:	080149d1 	.word	0x080149d1
 80149cc:	08014a49 	.word	0x08014a49
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 80149d0:	482c      	ldr	r0, [pc, #176]	; (8014a84 <fm_menu_show_version+0x108>)
 80149d2:	f7f9 fe5f 	bl	800e694 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 80149d6:	4b2c      	ldr	r3, [pc, #176]	; (8014a88 <fm_menu_show_version+0x10c>)
 80149d8:	60fb      	str	r3, [r7, #12]
            event_now = EVENT_LCD_REFRESH;
 80149da:	2301      	movs	r3, #1
 80149dc:	72bb      	strb	r3, [r7, #10]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80149de:	f107 030a 	add.w	r3, r7, #10
 80149e2:	2200      	movs	r2, #0
 80149e4:	4619      	mov	r1, r3
 80149e6:	4827      	ldr	r0, [pc, #156]	; (8014a84 <fm_menu_show_version+0x108>)
 80149e8:	f7f9 febc 	bl	800e764 <_txe_queue_send>
            new_exit = 1;
 80149ec:	4b27      	ldr	r3, [pc, #156]	; (8014a8c <fm_menu_show_version+0x110>)
 80149ee:	2201      	movs	r2, #1
 80149f0:	701a      	strb	r2, [r3, #0]
        break;
 80149f2:	e02a      	b.n	8014a4a <fm_menu_show_version+0xce>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if (counter < counter_max)
 80149f4:	4b26      	ldr	r3, [pc, #152]	; (8014a90 <fm_menu_show_version+0x114>)
 80149f6:	781b      	ldrb	r3, [r3, #0]
 80149f8:	7afa      	ldrb	r2, [r7, #11]
 80149fa:	429a      	cmp	r2, r3
 80149fc:	d912      	bls.n	8014a24 <fm_menu_show_version+0xa8>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 80149fe:	2064      	movs	r0, #100	; 0x64
 8014a00:	f7ed f924 	bl	8001c4c <HAL_Delay>
                counter++;
 8014a04:	4b22      	ldr	r3, [pc, #136]	; (8014a90 <fm_menu_show_version+0x114>)
 8014a06:	781b      	ldrb	r3, [r3, #0]
 8014a08:	3301      	adds	r3, #1
 8014a0a:	b2da      	uxtb	r2, r3
 8014a0c:	4b20      	ldr	r3, [pc, #128]	; (8014a90 <fm_menu_show_version+0x114>)
 8014a0e:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 8014a10:	2301      	movs	r3, #1
 8014a12:	72bb      	strb	r3, [r7, #10]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014a14:	f107 030a 	add.w	r3, r7, #10
 8014a18:	2200      	movs	r2, #0
 8014a1a:	4619      	mov	r1, r3
 8014a1c:	4819      	ldr	r0, [pc, #100]	; (8014a84 <fm_menu_show_version+0x108>)
 8014a1e:	f7f9 fea1 	bl	800e764 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 8014a22:	e012      	b.n	8014a4a <fm_menu_show_version+0xce>
                tx_queue_flush(&event_queue_ptr);
 8014a24:	4817      	ldr	r0, [pc, #92]	; (8014a84 <fm_menu_show_version+0x108>)
 8014a26:	f7f9 fe35 	bl	800e694 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014a2a:	4b17      	ldr	r3, [pc, #92]	; (8014a88 <fm_menu_show_version+0x10c>)
 8014a2c:	60fb      	str	r3, [r7, #12]
                event_now = EVENT_LCD_REFRESH;
 8014a2e:	2301      	movs	r3, #1
 8014a30:	72bb      	strb	r3, [r7, #10]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014a32:	f107 030a 	add.w	r3, r7, #10
 8014a36:	2200      	movs	r2, #0
 8014a38:	4619      	mov	r1, r3
 8014a3a:	4812      	ldr	r0, [pc, #72]	; (8014a84 <fm_menu_show_version+0x108>)
 8014a3c:	f7f9 fe92 	bl	800e764 <_txe_queue_send>
                new_exit = 1;
 8014a40:	4b12      	ldr	r3, [pc, #72]	; (8014a8c <fm_menu_show_version+0x110>)
 8014a42:	2201      	movs	r2, #1
 8014a44:	701a      	strb	r2, [r3, #0]
        break;
 8014a46:	e000      	b.n	8014a4a <fm_menu_show_version+0xce>
        default:
        break;
 8014a48:	bf00      	nop
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "version\n";
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
#endif

    if (new_exit == 1)
 8014a4a:	4b10      	ldr	r3, [pc, #64]	; (8014a8c <fm_menu_show_version+0x110>)
 8014a4c:	781b      	ldrb	r3, [r3, #0]
 8014a4e:	2b01      	cmp	r3, #1
 8014a50:	d10e      	bne.n	8014a70 <fm_menu_show_version+0xf4>
    {
        HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8014a52:	2201      	movs	r2, #1
 8014a54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014a58:	480e      	ldr	r0, [pc, #56]	; (8014a94 <fm_menu_show_version+0x118>)
 8014a5a:	f7ef fdcf 	bl	80045fc <HAL_GPIO_WritePin>
        PCF8553_BACKLIGHT_Pin, GPIO_PIN_SET);
        counter = 0;
 8014a5e:	4b0c      	ldr	r3, [pc, #48]	; (8014a90 <fm_menu_show_version+0x114>)
 8014a60:	2200      	movs	r2, #0
 8014a62:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8014a64:	4b06      	ldr	r3, [pc, #24]	; (8014a80 <fm_menu_show_version+0x104>)
 8014a66:	2201      	movs	r2, #1
 8014a68:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014a6a:	4b08      	ldr	r3, [pc, #32]	; (8014a8c <fm_menu_show_version+0x110>)
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014a70:	68fb      	ldr	r3, [r7, #12]
}
 8014a72:	4618      	mov	r0, r3
 8014a74:	3710      	adds	r7, #16
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}
 8014a7a:	bf00      	nop
 8014a7c:	0801497d 	.word	0x0801497d
 8014a80:	20000150 	.word	0x20000150
 8014a84:	20001388 	.word	0x20001388
 8014a88:	08014895 	.word	0x08014895
 8014a8c:	20001e3a 	.word	0x20001e3a
 8014a90:	20001e3b 	.word	0x20001e3b
 8014a94:	42020800 	.word	0x42020800

08014a98 <fm_temp_stm32_format>:
 * grados celcius.
 * @param None
 * @retval Temperatura interna del micro en grados celcius.
 */
int fm_temp_stm32_format()
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b082      	sub	sp, #8
 8014a9c:	af00      	add	r7, sp, #0
    uint16_t raw_value;
    int temp_celcius;

    fm_temp_stm32_get();
 8014a9e:	f000 f82f 	bl	8014b00 <fm_temp_stm32_get>
    raw_value = HAL_ADC_GetValue(&hadc1);
 8014aa2:	4813      	ldr	r0, [pc, #76]	; (8014af0 <fm_temp_stm32_format+0x58>)
 8014aa4:	f7ee f8c0 	bl	8002c28 <HAL_ADC_GetValue>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	80fb      	strh	r3, [r7, #6]
    temp_celcius = __HAL_ADC_CALC_TEMPERATURE(&hadc1, 3285, raw_value,
 8014aac:	88fb      	ldrh	r3, [r7, #6]
 8014aae:	009b      	lsls	r3, r3, #2
 8014ab0:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8014ab4:	fb02 f303 	mul.w	r3, r2, r3
 8014ab8:	461a      	mov	r2, r3
 8014aba:	4b0e      	ldr	r3, [pc, #56]	; (8014af4 <fm_temp_stm32_format+0x5c>)
 8014abc:	fba3 2302 	umull	r2, r3, r3, r2
 8014ac0:	099b      	lsrs	r3, r3, #6
 8014ac2:	461a      	mov	r2, r3
 8014ac4:	4b0c      	ldr	r3, [pc, #48]	; (8014af8 <fm_temp_stm32_format+0x60>)
 8014ac6:	881b      	ldrh	r3, [r3, #0]
 8014ac8:	1ad3      	subs	r3, r2, r3
 8014aca:	2264      	movs	r2, #100	; 0x64
 8014acc:	fb03 f202 	mul.w	r2, r3, r2
 8014ad0:	4b0a      	ldr	r3, [pc, #40]	; (8014afc <fm_temp_stm32_format+0x64>)
 8014ad2:	881b      	ldrh	r3, [r3, #0]
 8014ad4:	4619      	mov	r1, r3
 8014ad6:	4b08      	ldr	r3, [pc, #32]	; (8014af8 <fm_temp_stm32_format+0x60>)
 8014ad8:	881b      	ldrh	r3, [r3, #0]
 8014ada:	1acb      	subs	r3, r1, r3
 8014adc:	fb92 f3f3 	sdiv	r3, r2, r3
 8014ae0:	331e      	adds	r3, #30
 8014ae2:	603b      	str	r3, [r7, #0]
    ADC_RESOLUTION_12B);

    return (temp_celcius);
 8014ae4:	683b      	ldr	r3, [r7, #0]
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	3708      	adds	r7, #8
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
 8014aee:	bf00      	nop
 8014af0:	200013d0 	.word	0x200013d0
 8014af4:	057619f1 	.word	0x057619f1
 8014af8:	0bfa0710 	.word	0x0bfa0710
 8014afc:	0bfa0742 	.word	0x0bfa0742

08014b00 <fm_temp_stm32_get>:
 * @brief Función que lee el ADC 1 asociado al sensor de temperatura.
 * @param None
 * @retval None
 */
void fm_temp_stm32_get()
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b082      	sub	sp, #8
 8014b04:	af00      	add	r7, sp, #0
    const uint8_t poll_time = 100;
 8014b06:	2364      	movs	r3, #100	; 0x64
 8014b08:	71fb      	strb	r3, [r7, #7]

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8014b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b0e:	2100      	movs	r1, #0
 8014b10:	4808      	ldr	r0, [pc, #32]	; (8014b34 <fm_temp_stm32_get+0x34>)
 8014b12:	f7ef f939 	bl	8003d88 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(&hadc1);
 8014b16:	4807      	ldr	r0, [pc, #28]	; (8014b34 <fm_temp_stm32_get+0x34>)
 8014b18:	f7ed fef8 	bl	800290c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, poll_time);
 8014b1c:	79fb      	ldrb	r3, [r7, #7]
 8014b1e:	4619      	mov	r1, r3
 8014b20:	4804      	ldr	r0, [pc, #16]	; (8014b34 <fm_temp_stm32_get+0x34>)
 8014b22:	f7ed ff9b 	bl	8002a5c <HAL_ADC_PollForConversion>
    HAL_ADC_Stop(&hadc1);
 8014b26:	4803      	ldr	r0, [pc, #12]	; (8014b34 <fm_temp_stm32_get+0x34>)
 8014b28:	f7ed ff64 	bl	80029f4 <HAL_ADC_Stop>
}
 8014b2c:	bf00      	nop
 8014b2e:	3708      	adds	r7, #8
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}
 8014b34:	200013d0 	.word	0x200013d0

08014b38 <fm_version_get>:
 * @brief Esta función devuelve la versión actual del firmware.
 * @param None
 * @retval Número de versión en formato VRR.
 */
uint32_t fm_version_get()
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b088      	sub	sp, #32
 8014b3c:	af02      	add	r7, sp, #8
    uint32_t version = 0;
 8014b3e:	2300      	movs	r3, #0
 8014b40:	617b      	str	r3, [r7, #20]
    char version_arr[PCF8553_DATA_SIZE];

    sprintf(version_arr, "%d%d%d", VERSION, REVISION, RELEASE);
 8014b42:	4638      	mov	r0, r7
 8014b44:	2309      	movs	r3, #9
 8014b46:	9300      	str	r3, [sp, #0]
 8014b48:	2302      	movs	r3, #2
 8014b4a:	2201      	movs	r2, #1
 8014b4c:	4906      	ldr	r1, [pc, #24]	; (8014b68 <fm_version_get+0x30>)
 8014b4e:	f000 f9bb 	bl	8014ec8 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    version = atoi(version_arr);
 8014b52:	463b      	mov	r3, r7
 8014b54:	4618      	mov	r0, r3
 8014b56:	f000 f94d 	bl	8014df4 <atoi>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	617b      	str	r3, [r7, #20]

    return (version);
 8014b5e:	697b      	ldr	r3, [r7, #20]
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3718      	adds	r7, #24
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}
 8014b68:	080159ac 	.word	0x080159ac

08014b6c <fmc_get_acm>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen acumulado como estructura.
 */
fmc_totalizer_t fmc_get_acm()
{
 8014b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b6e:	b093      	sub	sp, #76	; 0x4c
 8014b70:	af06      	add	r7, sp, #24
 8014b72:	62f8      	str	r0, [r7, #44]	; 0x2c
    acm = fm_factory_get_acm();
 8014b74:	4c1c      	ldr	r4, [pc, #112]	; (8014be8 <fmc_get_acm+0x7c>)
 8014b76:	f107 0308 	add.w	r3, r7, #8
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7fa fa26 	bl	800efcc <fm_factory_get_acm>
 8014b80:	4625      	mov	r5, r4
 8014b82:	f107 0408 	add.w	r4, r7, #8
 8014b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014b8e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    acm = fmc_totalizer_init(acm);
 8014b92:	4b15      	ldr	r3, [pc, #84]	; (8014be8 <fmc_get_acm+0x7c>)
 8014b94:	607b      	str	r3, [r7, #4]
 8014b96:	f107 0c08 	add.w	ip, r7, #8
 8014b9a:	4e13      	ldr	r6, [pc, #76]	; (8014be8 <fmc_get_acm+0x7c>)
 8014b9c:	466d      	mov	r5, sp
 8014b9e:	f106 0408 	add.w	r4, r6, #8
 8014ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014ba6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014baa:	e885 0003 	stmia.w	r5, {r0, r1}
 8014bae:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014bb2:	4660      	mov	r0, ip
 8014bb4:	f000 f8c0 	bl	8014d38 <fmc_totalizer_init>
 8014bb8:	687d      	ldr	r5, [r7, #4]
 8014bba:	f107 0408 	add.w	r4, r7, #8
 8014bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014bc2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014bc6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (acm);
 8014bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bcc:	4a06      	ldr	r2, [pc, #24]	; (8014be8 <fmc_get_acm+0x7c>)
 8014bce:	461c      	mov	r4, r3
 8014bd0:	4615      	mov	r5, r2
 8014bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014bd6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014be0:	3734      	adds	r7, #52	; 0x34
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014be6:	bf00      	nop
 8014be8:	20001e40 	.word	0x20001e40

08014bec <fmc_get_rate>:
 * devuelve como parámetro de retorno.
 * @param  None
 * @retval Caudal instantaneo como estructura.
 */
fmc_totalizer_t fmc_get_rate()
{
 8014bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bee:	b093      	sub	sp, #76	; 0x4c
 8014bf0:	af06      	add	r7, sp, #24
 8014bf2:	62f8      	str	r0, [r7, #44]	; 0x2c
    rate = fm_factory_get_rate();
 8014bf4:	4c1c      	ldr	r4, [pc, #112]	; (8014c68 <fmc_get_rate+0x7c>)
 8014bf6:	f107 0308 	add.w	r3, r7, #8
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7fa fb06 	bl	800f20c <fm_factory_get_rate>
 8014c00:	4625      	mov	r5, r4
 8014c02:	f107 0408 	add.w	r4, r7, #8
 8014c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c0e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    rate = fmc_totalizer_init(rate);
 8014c12:	4b15      	ldr	r3, [pc, #84]	; (8014c68 <fmc_get_rate+0x7c>)
 8014c14:	607b      	str	r3, [r7, #4]
 8014c16:	f107 0c08 	add.w	ip, r7, #8
 8014c1a:	4e13      	ldr	r6, [pc, #76]	; (8014c68 <fmc_get_rate+0x7c>)
 8014c1c:	466d      	mov	r5, sp
 8014c1e:	f106 0408 	add.w	r4, r6, #8
 8014c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014c2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8014c2e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c32:	4660      	mov	r0, ip
 8014c34:	f000 f880 	bl	8014d38 <fmc_totalizer_init>
 8014c38:	687d      	ldr	r5, [r7, #4]
 8014c3a:	f107 0408 	add.w	r4, r7, #8
 8014c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (rate);
 8014c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c4c:	4a06      	ldr	r2, [pc, #24]	; (8014c68 <fmc_get_rate+0x7c>)
 8014c4e:	461c      	mov	r4, r3
 8014c50:	4615      	mov	r5, r2
 8014c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014c5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014c5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c60:	3734      	adds	r7, #52	; 0x34
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c66:	bf00      	nop
 8014c68:	20001e60 	.word	0x20001e60

08014c6c <fmc_get_stm32_temp>:
 * @param  None
 * @retval Temperatura interna del microcontrolador como una estructura que
 * contiene su valor, resolución y unidad.
 */
fmc_temp_t fmc_get_stm32_temp()
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b088      	sub	sp, #32
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
    int_temperature.temperature.num = fm_temp_stm32_format();
 8014c74:	f7ff ff10 	bl	8014a98 <fm_temp_stm32_format>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	4b0d      	ldr	r3, [pc, #52]	; (8014cb4 <fmc_get_stm32_temp+0x48>)
 8014c7e:	601a      	str	r2, [r3, #0]
    int_temperature.temperature.res = fm_factory_get_temp().temperature.res;
 8014c80:	f107 0308 	add.w	r3, r7, #8
 8014c84:	4618      	mov	r0, r3
 8014c86:	f7fa fad7 	bl	800f238 <fm_factory_get_temp>
 8014c8a:	7b3a      	ldrb	r2, [r7, #12]
 8014c8c:	4b09      	ldr	r3, [pc, #36]	; (8014cb4 <fmc_get_stm32_temp+0x48>)
 8014c8e:	711a      	strb	r2, [r3, #4]
    int_temperature.unit_volume_temp = fm_factory_get_temp().unit_volume_temp;
 8014c90:	f107 0314 	add.w	r3, r7, #20
 8014c94:	4618      	mov	r0, r3
 8014c96:	f7fa facf 	bl	800f238 <fm_factory_get_temp>
 8014c9a:	7f3a      	ldrb	r2, [r7, #28]
 8014c9c:	4b05      	ldr	r3, [pc, #20]	; (8014cb4 <fmc_get_stm32_temp+0x48>)
 8014c9e:	721a      	strb	r2, [r3, #8]

    return (int_temperature);
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	4a04      	ldr	r2, [pc, #16]	; (8014cb4 <fmc_get_stm32_temp+0x48>)
 8014ca4:	ca07      	ldmia	r2, {r0, r1, r2}
 8014ca6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8014caa:	6878      	ldr	r0, [r7, #4]
 8014cac:	3720      	adds	r7, #32
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	bd80      	pop	{r7, pc}
 8014cb2:	bf00      	nop
 8014cb4:	20001ea0 	.word	0x20001ea0

08014cb8 <fmc_get_ttl>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen histórico como estructura.
 */
fmc_totalizer_t fmc_get_ttl()
{
 8014cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cba:	b093      	sub	sp, #76	; 0x4c
 8014cbc:	af06      	add	r7, sp, #24
 8014cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
    ttl = fm_factory_get_ttl();
 8014cc0:	4c1c      	ldr	r4, [pc, #112]	; (8014d34 <fmc_get_ttl+0x7c>)
 8014cc2:	f107 0308 	add.w	r3, r7, #8
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f7fa fac8 	bl	800f25c <fm_factory_get_ttl>
 8014ccc:	4625      	mov	r5, r4
 8014cce:	f107 0408 	add.w	r4, r7, #8
 8014cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014cd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014cda:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    ttl = fmc_totalizer_init(ttl);
 8014cde:	4b15      	ldr	r3, [pc, #84]	; (8014d34 <fmc_get_ttl+0x7c>)
 8014ce0:	607b      	str	r3, [r7, #4]
 8014ce2:	f107 0c08 	add.w	ip, r7, #8
 8014ce6:	4e13      	ldr	r6, [pc, #76]	; (8014d34 <fmc_get_ttl+0x7c>)
 8014ce8:	466d      	mov	r5, sp
 8014cea:	f106 0408 	add.w	r4, r6, #8
 8014cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014cf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014cf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8014cfa:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014cfe:	4660      	mov	r0, ip
 8014d00:	f000 f81a 	bl	8014d38 <fmc_totalizer_init>
 8014d04:	687d      	ldr	r5, [r7, #4]
 8014d06:	f107 0408 	add.w	r4, r7, #8
 8014d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014d12:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (ttl);
 8014d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d18:	4a06      	ldr	r2, [pc, #24]	; (8014d34 <fmc_get_ttl+0x7c>)
 8014d1a:	461c      	mov	r4, r3
 8014d1c:	4615      	mov	r5, r2
 8014d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d2c:	3734      	adds	r7, #52	; 0x34
 8014d2e:	46bd      	mov	sp, r7
 8014d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d32:	bf00      	nop
 8014d34:	20001e80 	.word	0x20001e80

08014d38 <fmc_totalizer_init>:
 * @brief
 * @param
 * @retval None
 */
fmc_totalizer_t fmc_totalizer_init(fmc_totalizer_t totalizer)
{
 8014d38:	b082      	sub	sp, #8
 8014d3a:	b5b0      	push	{r4, r5, r7, lr}
 8014d3c:	b082      	sub	sp, #8
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	6078      	str	r0, [r7, #4]
 8014d42:	f107 0118 	add.w	r1, r7, #24
 8014d46:	e881 000c 	stmia.w	r1, {r2, r3}
    fmc_totalizer_refresh(&totalizer);
 8014d4a:	f107 0018 	add.w	r0, r7, #24
 8014d4e:	f000 f811 	bl	8014d74 <fmc_totalizer_refresh>

    return (totalizer);
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	461d      	mov	r5, r3
 8014d56:	f107 0418 	add.w	r4, r7, #24
 8014d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014d62:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8014d66:	6878      	ldr	r0, [r7, #4]
 8014d68:	3708      	adds	r7, #8
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8014d70:	b002      	add	sp, #8
 8014d72:	4770      	bx	lr

08014d74 <fmc_totalizer_refresh>:
 * @param Puntero a estructura que contiene datos como la cantidad de pulsos
 * leidos, valor y resolución del caudal/volumen, entre otros.
 * @retval None
 */
void fmc_totalizer_refresh(fmc_totalizer_t *p_totalizer)
{
 8014d74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014d78:	b084      	sub	sp, #16
 8014d7a:	af00      	add	r7, sp, #0
 8014d7c:	6078      	str	r0, [r7, #4]
    uint64_t result;

    /*
     * result es la cantidad de pulsos almacenados en la estructura p_totalizer.
     */
    result = (uint64_t) p_totalizer->pulse;
 8014d7e:	6879      	ldr	r1, [r7, #4]
 8014d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d84:	e9c7 0102 	strd	r0, r1, [r7, #8]

    /*
     * Pulsos escalados en el factor y en la resolucion a mostrar.
     */
    result *= g_scalar[p_totalizer->factor.res + p_totalizer->volume.res];
 8014d88:	6879      	ldr	r1, [r7, #4]
 8014d8a:	7d09      	ldrb	r1, [r1, #20]
 8014d8c:	4608      	mov	r0, r1
 8014d8e:	6879      	ldr	r1, [r7, #4]
 8014d90:	7b09      	ldrb	r1, [r1, #12]
 8014d92:	4401      	add	r1, r0
 8014d94:	4816      	ldr	r0, [pc, #88]	; (8014df0 <fmc_totalizer_refresh+0x7c>)
 8014d96:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8014d9a:	2000      	movs	r0, #0
 8014d9c:	460c      	mov	r4, r1
 8014d9e:	4605      	mov	r5, r0
 8014da0:	68f9      	ldr	r1, [r7, #12]
 8014da2:	fb04 f001 	mul.w	r0, r4, r1
 8014da6:	68b9      	ldr	r1, [r7, #8]
 8014da8:	fb05 f101 	mul.w	r1, r5, r1
 8014dac:	4401      	add	r1, r0
 8014dae:	68b8      	ldr	r0, [r7, #8]
 8014db0:	fba0 2304 	umull	r2, r3, r0, r4
 8014db4:	4419      	add	r1, r3
 8014db6:	460b      	mov	r3, r1
 8014db8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8014dbc:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /*
     * Obtengo el valor numérico del volumen dividiendo los pulsos escalados
     * por el factor.
     */
    result /= p_totalizer->factor.num;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	691b      	ldr	r3, [r3, #16]
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	4698      	mov	r8, r3
 8014dc8:	4691      	mov	r9, r2
 8014dca:	4642      	mov	r2, r8
 8014dcc:	464b      	mov	r3, r9
 8014dce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014dd2:	f7eb fb7f 	bl	80004d4 <__aeabi_uldivmod>
 8014dd6:	4602      	mov	r2, r0
 8014dd8:	460b      	mov	r3, r1
 8014dda:	e9c7 2302 	strd	r2, r3, [r7, #8]

    p_totalizer->volume.num = (uint32_t) result;
 8014dde:	68ba      	ldr	r2, [r7, #8]
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	609a      	str	r2, [r3, #8]

}
 8014de4:	bf00      	nop
 8014de6:	3710      	adds	r7, #16
 8014de8:	46bd      	mov	sp, r7
 8014dea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014dee:	bf00      	nop
 8014df0:	08015ad8 	.word	0x08015ad8

08014df4 <atoi>:
 8014df4:	220a      	movs	r2, #10
 8014df6:	2100      	movs	r1, #0
 8014df8:	f000 b908 	b.w	801500c <strtol>

08014dfc <__errno>:
 8014dfc:	4b01      	ldr	r3, [pc, #4]	; (8014e04 <__errno+0x8>)
 8014dfe:	6818      	ldr	r0, [r3, #0]
 8014e00:	4770      	bx	lr
 8014e02:	bf00      	nop
 8014e04:	20000154 	.word	0x20000154

08014e08 <__libc_init_array>:
 8014e08:	b570      	push	{r4, r5, r6, lr}
 8014e0a:	4d0d      	ldr	r5, [pc, #52]	; (8014e40 <__libc_init_array+0x38>)
 8014e0c:	2600      	movs	r6, #0
 8014e0e:	4c0d      	ldr	r4, [pc, #52]	; (8014e44 <__libc_init_array+0x3c>)
 8014e10:	1b64      	subs	r4, r4, r5
 8014e12:	10a4      	asrs	r4, r4, #2
 8014e14:	42a6      	cmp	r6, r4
 8014e16:	d109      	bne.n	8014e2c <__libc_init_array+0x24>
 8014e18:	4d0b      	ldr	r5, [pc, #44]	; (8014e48 <__libc_init_array+0x40>)
 8014e1a:	2600      	movs	r6, #0
 8014e1c:	4c0b      	ldr	r4, [pc, #44]	; (8014e4c <__libc_init_array+0x44>)
 8014e1e:	f000 fd5d 	bl	80158dc <_init>
 8014e22:	1b64      	subs	r4, r4, r5
 8014e24:	10a4      	asrs	r4, r4, #2
 8014e26:	42a6      	cmp	r6, r4
 8014e28:	d105      	bne.n	8014e36 <__libc_init_array+0x2e>
 8014e2a:	bd70      	pop	{r4, r5, r6, pc}
 8014e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e30:	3601      	adds	r6, #1
 8014e32:	4798      	blx	r3
 8014e34:	e7ee      	b.n	8014e14 <__libc_init_array+0xc>
 8014e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e3a:	3601      	adds	r6, #1
 8014e3c:	4798      	blx	r3
 8014e3e:	e7f2      	b.n	8014e26 <__libc_init_array+0x1e>
 8014e40:	08015c30 	.word	0x08015c30
 8014e44:	08015c30 	.word	0x08015c30
 8014e48:	08015c30 	.word	0x08015c30
 8014e4c:	08015c34 	.word	0x08015c34

08014e50 <memset>:
 8014e50:	4402      	add	r2, r0
 8014e52:	4603      	mov	r3, r0
 8014e54:	4293      	cmp	r3, r2
 8014e56:	d100      	bne.n	8014e5a <memset+0xa>
 8014e58:	4770      	bx	lr
 8014e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8014e5e:	e7f9      	b.n	8014e54 <memset+0x4>

08014e60 <sniprintf>:
 8014e60:	b40c      	push	{r2, r3}
 8014e62:	4b18      	ldr	r3, [pc, #96]	; (8014ec4 <sniprintf+0x64>)
 8014e64:	b530      	push	{r4, r5, lr}
 8014e66:	1e0c      	subs	r4, r1, #0
 8014e68:	b09d      	sub	sp, #116	; 0x74
 8014e6a:	681d      	ldr	r5, [r3, #0]
 8014e6c:	da08      	bge.n	8014e80 <sniprintf+0x20>
 8014e6e:	238b      	movs	r3, #139	; 0x8b
 8014e70:	f04f 30ff 	mov.w	r0, #4294967295
 8014e74:	602b      	str	r3, [r5, #0]
 8014e76:	b01d      	add	sp, #116	; 0x74
 8014e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e7c:	b002      	add	sp, #8
 8014e7e:	4770      	bx	lr
 8014e80:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014e84:	9002      	str	r0, [sp, #8]
 8014e86:	9006      	str	r0, [sp, #24]
 8014e88:	a902      	add	r1, sp, #8
 8014e8a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014e8e:	bf14      	ite	ne
 8014e90:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014e94:	4623      	moveq	r3, r4
 8014e96:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014e98:	4628      	mov	r0, r5
 8014e9a:	9304      	str	r3, [sp, #16]
 8014e9c:	9307      	str	r3, [sp, #28]
 8014e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ea2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ea6:	ab21      	add	r3, sp, #132	; 0x84
 8014ea8:	9301      	str	r3, [sp, #4]
 8014eaa:	f000 f915 	bl	80150d8 <_svfiprintf_r>
 8014eae:	1c43      	adds	r3, r0, #1
 8014eb0:	bfbc      	itt	lt
 8014eb2:	238b      	movlt	r3, #139	; 0x8b
 8014eb4:	602b      	strlt	r3, [r5, #0]
 8014eb6:	2c00      	cmp	r4, #0
 8014eb8:	d0dd      	beq.n	8014e76 <sniprintf+0x16>
 8014eba:	9b02      	ldr	r3, [sp, #8]
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	701a      	strb	r2, [r3, #0]
 8014ec0:	e7d9      	b.n	8014e76 <sniprintf+0x16>
 8014ec2:	bf00      	nop
 8014ec4:	20000154 	.word	0x20000154

08014ec8 <siprintf>:
 8014ec8:	b40e      	push	{r1, r2, r3}
 8014eca:	b500      	push	{lr}
 8014ecc:	b09c      	sub	sp, #112	; 0x70
 8014ece:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014ed2:	ab1d      	add	r3, sp, #116	; 0x74
 8014ed4:	9002      	str	r0, [sp, #8]
 8014ed6:	9006      	str	r0, [sp, #24]
 8014ed8:	9107      	str	r1, [sp, #28]
 8014eda:	9104      	str	r1, [sp, #16]
 8014edc:	4808      	ldr	r0, [pc, #32]	; (8014f00 <siprintf+0x38>)
 8014ede:	4909      	ldr	r1, [pc, #36]	; (8014f04 <siprintf+0x3c>)
 8014ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ee4:	9105      	str	r1, [sp, #20]
 8014ee6:	a902      	add	r1, sp, #8
 8014ee8:	6800      	ldr	r0, [r0, #0]
 8014eea:	9301      	str	r3, [sp, #4]
 8014eec:	f000 f8f4 	bl	80150d8 <_svfiprintf_r>
 8014ef0:	9b02      	ldr	r3, [sp, #8]
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	701a      	strb	r2, [r3, #0]
 8014ef6:	b01c      	add	sp, #112	; 0x70
 8014ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8014efc:	b003      	add	sp, #12
 8014efe:	4770      	bx	lr
 8014f00:	20000154 	.word	0x20000154
 8014f04:	ffff0208 	.word	0xffff0208

08014f08 <_strtol_l.constprop.0>:
 8014f08:	2b01      	cmp	r3, #1
 8014f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f0e:	d001      	beq.n	8014f14 <_strtol_l.constprop.0+0xc>
 8014f10:	2b24      	cmp	r3, #36	; 0x24
 8014f12:	d906      	bls.n	8014f22 <_strtol_l.constprop.0+0x1a>
 8014f14:	f7ff ff72 	bl	8014dfc <__errno>
 8014f18:	2316      	movs	r3, #22
 8014f1a:	6003      	str	r3, [r0, #0]
 8014f1c:	2000      	movs	r0, #0
 8014f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f22:	460d      	mov	r5, r1
 8014f24:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8015008 <_strtol_l.constprop.0+0x100>
 8014f28:	462e      	mov	r6, r5
 8014f2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f2e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014f32:	f017 0708 	ands.w	r7, r7, #8
 8014f36:	d1f7      	bne.n	8014f28 <_strtol_l.constprop.0+0x20>
 8014f38:	2c2d      	cmp	r4, #45	; 0x2d
 8014f3a:	d132      	bne.n	8014fa2 <_strtol_l.constprop.0+0x9a>
 8014f3c:	782c      	ldrb	r4, [r5, #0]
 8014f3e:	2701      	movs	r7, #1
 8014f40:	1cb5      	adds	r5, r6, #2
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d05b      	beq.n	8014ffe <_strtol_l.constprop.0+0xf6>
 8014f46:	2b10      	cmp	r3, #16
 8014f48:	d109      	bne.n	8014f5e <_strtol_l.constprop.0+0x56>
 8014f4a:	2c30      	cmp	r4, #48	; 0x30
 8014f4c:	d107      	bne.n	8014f5e <_strtol_l.constprop.0+0x56>
 8014f4e:	782c      	ldrb	r4, [r5, #0]
 8014f50:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014f54:	2c58      	cmp	r4, #88	; 0x58
 8014f56:	d14d      	bne.n	8014ff4 <_strtol_l.constprop.0+0xec>
 8014f58:	786c      	ldrb	r4, [r5, #1]
 8014f5a:	2310      	movs	r3, #16
 8014f5c:	3502      	adds	r5, #2
 8014f5e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014f62:	f04f 0c00 	mov.w	ip, #0
 8014f66:	f108 38ff 	add.w	r8, r8, #4294967295
 8014f6a:	4666      	mov	r6, ip
 8014f6c:	fbb8 f9f3 	udiv	r9, r8, r3
 8014f70:	fb03 8a19 	mls	sl, r3, r9, r8
 8014f74:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014f78:	f1be 0f09 	cmp.w	lr, #9
 8014f7c:	d816      	bhi.n	8014fac <_strtol_l.constprop.0+0xa4>
 8014f7e:	4674      	mov	r4, lr
 8014f80:	42a3      	cmp	r3, r4
 8014f82:	dd24      	ble.n	8014fce <_strtol_l.constprop.0+0xc6>
 8014f84:	f1bc 0f00 	cmp.w	ip, #0
 8014f88:	db1e      	blt.n	8014fc8 <_strtol_l.constprop.0+0xc0>
 8014f8a:	45b1      	cmp	r9, r6
 8014f8c:	d31c      	bcc.n	8014fc8 <_strtol_l.constprop.0+0xc0>
 8014f8e:	d101      	bne.n	8014f94 <_strtol_l.constprop.0+0x8c>
 8014f90:	45a2      	cmp	sl, r4
 8014f92:	db19      	blt.n	8014fc8 <_strtol_l.constprop.0+0xc0>
 8014f94:	fb06 4603 	mla	r6, r6, r3, r4
 8014f98:	f04f 0c01 	mov.w	ip, #1
 8014f9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014fa0:	e7e8      	b.n	8014f74 <_strtol_l.constprop.0+0x6c>
 8014fa2:	2c2b      	cmp	r4, #43	; 0x2b
 8014fa4:	bf04      	itt	eq
 8014fa6:	782c      	ldrbeq	r4, [r5, #0]
 8014fa8:	1cb5      	addeq	r5, r6, #2
 8014faa:	e7ca      	b.n	8014f42 <_strtol_l.constprop.0+0x3a>
 8014fac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014fb0:	f1be 0f19 	cmp.w	lr, #25
 8014fb4:	d801      	bhi.n	8014fba <_strtol_l.constprop.0+0xb2>
 8014fb6:	3c37      	subs	r4, #55	; 0x37
 8014fb8:	e7e2      	b.n	8014f80 <_strtol_l.constprop.0+0x78>
 8014fba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014fbe:	f1be 0f19 	cmp.w	lr, #25
 8014fc2:	d804      	bhi.n	8014fce <_strtol_l.constprop.0+0xc6>
 8014fc4:	3c57      	subs	r4, #87	; 0x57
 8014fc6:	e7db      	b.n	8014f80 <_strtol_l.constprop.0+0x78>
 8014fc8:	f04f 3cff 	mov.w	ip, #4294967295
 8014fcc:	e7e6      	b.n	8014f9c <_strtol_l.constprop.0+0x94>
 8014fce:	f1bc 0f00 	cmp.w	ip, #0
 8014fd2:	da05      	bge.n	8014fe0 <_strtol_l.constprop.0+0xd8>
 8014fd4:	2322      	movs	r3, #34	; 0x22
 8014fd6:	4646      	mov	r6, r8
 8014fd8:	6003      	str	r3, [r0, #0]
 8014fda:	b942      	cbnz	r2, 8014fee <_strtol_l.constprop.0+0xe6>
 8014fdc:	4630      	mov	r0, r6
 8014fde:	e79e      	b.n	8014f1e <_strtol_l.constprop.0+0x16>
 8014fe0:	b107      	cbz	r7, 8014fe4 <_strtol_l.constprop.0+0xdc>
 8014fe2:	4276      	negs	r6, r6
 8014fe4:	2a00      	cmp	r2, #0
 8014fe6:	d0f9      	beq.n	8014fdc <_strtol_l.constprop.0+0xd4>
 8014fe8:	f1bc 0f00 	cmp.w	ip, #0
 8014fec:	d000      	beq.n	8014ff0 <_strtol_l.constprop.0+0xe8>
 8014fee:	1e69      	subs	r1, r5, #1
 8014ff0:	6011      	str	r1, [r2, #0]
 8014ff2:	e7f3      	b.n	8014fdc <_strtol_l.constprop.0+0xd4>
 8014ff4:	2430      	movs	r4, #48	; 0x30
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d1b1      	bne.n	8014f5e <_strtol_l.constprop.0+0x56>
 8014ffa:	2308      	movs	r3, #8
 8014ffc:	e7af      	b.n	8014f5e <_strtol_l.constprop.0+0x56>
 8014ffe:	2c30      	cmp	r4, #48	; 0x30
 8015000:	d0a5      	beq.n	8014f4e <_strtol_l.constprop.0+0x46>
 8015002:	230a      	movs	r3, #10
 8015004:	e7ab      	b.n	8014f5e <_strtol_l.constprop.0+0x56>
 8015006:	bf00      	nop
 8015008:	08015af5 	.word	0x08015af5

0801500c <strtol>:
 801500c:	4613      	mov	r3, r2
 801500e:	460a      	mov	r2, r1
 8015010:	4601      	mov	r1, r0
 8015012:	4802      	ldr	r0, [pc, #8]	; (801501c <strtol+0x10>)
 8015014:	6800      	ldr	r0, [r0, #0]
 8015016:	f7ff bf77 	b.w	8014f08 <_strtol_l.constprop.0>
 801501a:	bf00      	nop
 801501c:	20000154 	.word	0x20000154

08015020 <__ssputs_r>:
 8015020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015024:	688e      	ldr	r6, [r1, #8]
 8015026:	4682      	mov	sl, r0
 8015028:	460c      	mov	r4, r1
 801502a:	4690      	mov	r8, r2
 801502c:	429e      	cmp	r6, r3
 801502e:	461f      	mov	r7, r3
 8015030:	d838      	bhi.n	80150a4 <__ssputs_r+0x84>
 8015032:	898a      	ldrh	r2, [r1, #12]
 8015034:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015038:	d032      	beq.n	80150a0 <__ssputs_r+0x80>
 801503a:	6825      	ldr	r5, [r4, #0]
 801503c:	3301      	adds	r3, #1
 801503e:	6909      	ldr	r1, [r1, #16]
 8015040:	eba5 0901 	sub.w	r9, r5, r1
 8015044:	6965      	ldr	r5, [r4, #20]
 8015046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801504a:	444b      	add	r3, r9
 801504c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015050:	106d      	asrs	r5, r5, #1
 8015052:	429d      	cmp	r5, r3
 8015054:	bf38      	it	cc
 8015056:	461d      	movcc	r5, r3
 8015058:	0553      	lsls	r3, r2, #21
 801505a:	d531      	bpl.n	80150c0 <__ssputs_r+0xa0>
 801505c:	4629      	mov	r1, r5
 801505e:	f000 fb73 	bl	8015748 <_malloc_r>
 8015062:	4606      	mov	r6, r0
 8015064:	b950      	cbnz	r0, 801507c <__ssputs_r+0x5c>
 8015066:	230c      	movs	r3, #12
 8015068:	f04f 30ff 	mov.w	r0, #4294967295
 801506c:	f8ca 3000 	str.w	r3, [sl]
 8015070:	89a3      	ldrh	r3, [r4, #12]
 8015072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015076:	81a3      	strh	r3, [r4, #12]
 8015078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801507c:	464a      	mov	r2, r9
 801507e:	6921      	ldr	r1, [r4, #16]
 8015080:	f000 face 	bl	8015620 <memcpy>
 8015084:	89a3      	ldrh	r3, [r4, #12]
 8015086:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801508a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801508e:	81a3      	strh	r3, [r4, #12]
 8015090:	6126      	str	r6, [r4, #16]
 8015092:	444e      	add	r6, r9
 8015094:	6165      	str	r5, [r4, #20]
 8015096:	eba5 0509 	sub.w	r5, r5, r9
 801509a:	6026      	str	r6, [r4, #0]
 801509c:	463e      	mov	r6, r7
 801509e:	60a5      	str	r5, [r4, #8]
 80150a0:	42be      	cmp	r6, r7
 80150a2:	d900      	bls.n	80150a6 <__ssputs_r+0x86>
 80150a4:	463e      	mov	r6, r7
 80150a6:	4632      	mov	r2, r6
 80150a8:	4641      	mov	r1, r8
 80150aa:	6820      	ldr	r0, [r4, #0]
 80150ac:	f000 fac5 	bl	801563a <memmove>
 80150b0:	68a3      	ldr	r3, [r4, #8]
 80150b2:	2000      	movs	r0, #0
 80150b4:	1b9b      	subs	r3, r3, r6
 80150b6:	60a3      	str	r3, [r4, #8]
 80150b8:	6823      	ldr	r3, [r4, #0]
 80150ba:	4433      	add	r3, r6
 80150bc:	6023      	str	r3, [r4, #0]
 80150be:	e7db      	b.n	8015078 <__ssputs_r+0x58>
 80150c0:	462a      	mov	r2, r5
 80150c2:	f000 fbb5 	bl	8015830 <_realloc_r>
 80150c6:	4606      	mov	r6, r0
 80150c8:	2800      	cmp	r0, #0
 80150ca:	d1e1      	bne.n	8015090 <__ssputs_r+0x70>
 80150cc:	6921      	ldr	r1, [r4, #16]
 80150ce:	4650      	mov	r0, sl
 80150d0:	f000 face 	bl	8015670 <_free_r>
 80150d4:	e7c7      	b.n	8015066 <__ssputs_r+0x46>
	...

080150d8 <_svfiprintf_r>:
 80150d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150dc:	4698      	mov	r8, r3
 80150de:	898b      	ldrh	r3, [r1, #12]
 80150e0:	b09d      	sub	sp, #116	; 0x74
 80150e2:	4607      	mov	r7, r0
 80150e4:	061b      	lsls	r3, r3, #24
 80150e6:	460d      	mov	r5, r1
 80150e8:	4614      	mov	r4, r2
 80150ea:	d50e      	bpl.n	801510a <_svfiprintf_r+0x32>
 80150ec:	690b      	ldr	r3, [r1, #16]
 80150ee:	b963      	cbnz	r3, 801510a <_svfiprintf_r+0x32>
 80150f0:	2140      	movs	r1, #64	; 0x40
 80150f2:	f000 fb29 	bl	8015748 <_malloc_r>
 80150f6:	6028      	str	r0, [r5, #0]
 80150f8:	6128      	str	r0, [r5, #16]
 80150fa:	b920      	cbnz	r0, 8015106 <_svfiprintf_r+0x2e>
 80150fc:	230c      	movs	r3, #12
 80150fe:	603b      	str	r3, [r7, #0]
 8015100:	f04f 30ff 	mov.w	r0, #4294967295
 8015104:	e0d1      	b.n	80152aa <_svfiprintf_r+0x1d2>
 8015106:	2340      	movs	r3, #64	; 0x40
 8015108:	616b      	str	r3, [r5, #20]
 801510a:	2300      	movs	r3, #0
 801510c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015110:	f04f 0901 	mov.w	r9, #1
 8015114:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80152c4 <_svfiprintf_r+0x1ec>
 8015118:	9309      	str	r3, [sp, #36]	; 0x24
 801511a:	2320      	movs	r3, #32
 801511c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015120:	2330      	movs	r3, #48	; 0x30
 8015122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015126:	4623      	mov	r3, r4
 8015128:	469a      	mov	sl, r3
 801512a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801512e:	b10a      	cbz	r2, 8015134 <_svfiprintf_r+0x5c>
 8015130:	2a25      	cmp	r2, #37	; 0x25
 8015132:	d1f9      	bne.n	8015128 <_svfiprintf_r+0x50>
 8015134:	ebba 0b04 	subs.w	fp, sl, r4
 8015138:	d00b      	beq.n	8015152 <_svfiprintf_r+0x7a>
 801513a:	465b      	mov	r3, fp
 801513c:	4622      	mov	r2, r4
 801513e:	4629      	mov	r1, r5
 8015140:	4638      	mov	r0, r7
 8015142:	f7ff ff6d 	bl	8015020 <__ssputs_r>
 8015146:	3001      	adds	r0, #1
 8015148:	f000 80aa 	beq.w	80152a0 <_svfiprintf_r+0x1c8>
 801514c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801514e:	445a      	add	r2, fp
 8015150:	9209      	str	r2, [sp, #36]	; 0x24
 8015152:	f89a 3000 	ldrb.w	r3, [sl]
 8015156:	2b00      	cmp	r3, #0
 8015158:	f000 80a2 	beq.w	80152a0 <_svfiprintf_r+0x1c8>
 801515c:	2300      	movs	r3, #0
 801515e:	f04f 32ff 	mov.w	r2, #4294967295
 8015162:	f10a 0a01 	add.w	sl, sl, #1
 8015166:	9304      	str	r3, [sp, #16]
 8015168:	9307      	str	r3, [sp, #28]
 801516a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801516e:	931a      	str	r3, [sp, #104]	; 0x68
 8015170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015174:	4654      	mov	r4, sl
 8015176:	2205      	movs	r2, #5
 8015178:	4852      	ldr	r0, [pc, #328]	; (80152c4 <_svfiprintf_r+0x1ec>)
 801517a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801517e:	f000 fa41 	bl	8015604 <memchr>
 8015182:	9a04      	ldr	r2, [sp, #16]
 8015184:	b9d8      	cbnz	r0, 80151be <_svfiprintf_r+0xe6>
 8015186:	06d0      	lsls	r0, r2, #27
 8015188:	bf44      	itt	mi
 801518a:	2320      	movmi	r3, #32
 801518c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015190:	0711      	lsls	r1, r2, #28
 8015192:	bf44      	itt	mi
 8015194:	232b      	movmi	r3, #43	; 0x2b
 8015196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801519a:	f89a 3000 	ldrb.w	r3, [sl]
 801519e:	2b2a      	cmp	r3, #42	; 0x2a
 80151a0:	d015      	beq.n	80151ce <_svfiprintf_r+0xf6>
 80151a2:	9a07      	ldr	r2, [sp, #28]
 80151a4:	4654      	mov	r4, sl
 80151a6:	2000      	movs	r0, #0
 80151a8:	f04f 0c0a 	mov.w	ip, #10
 80151ac:	4621      	mov	r1, r4
 80151ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80151b2:	3b30      	subs	r3, #48	; 0x30
 80151b4:	2b09      	cmp	r3, #9
 80151b6:	d94e      	bls.n	8015256 <_svfiprintf_r+0x17e>
 80151b8:	b1b0      	cbz	r0, 80151e8 <_svfiprintf_r+0x110>
 80151ba:	9207      	str	r2, [sp, #28]
 80151bc:	e014      	b.n	80151e8 <_svfiprintf_r+0x110>
 80151be:	eba0 0308 	sub.w	r3, r0, r8
 80151c2:	46a2      	mov	sl, r4
 80151c4:	fa09 f303 	lsl.w	r3, r9, r3
 80151c8:	4313      	orrs	r3, r2
 80151ca:	9304      	str	r3, [sp, #16]
 80151cc:	e7d2      	b.n	8015174 <_svfiprintf_r+0x9c>
 80151ce:	9b03      	ldr	r3, [sp, #12]
 80151d0:	1d19      	adds	r1, r3, #4
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	9103      	str	r1, [sp, #12]
 80151d8:	bfbb      	ittet	lt
 80151da:	425b      	neglt	r3, r3
 80151dc:	f042 0202 	orrlt.w	r2, r2, #2
 80151e0:	9307      	strge	r3, [sp, #28]
 80151e2:	9307      	strlt	r3, [sp, #28]
 80151e4:	bfb8      	it	lt
 80151e6:	9204      	strlt	r2, [sp, #16]
 80151e8:	7823      	ldrb	r3, [r4, #0]
 80151ea:	2b2e      	cmp	r3, #46	; 0x2e
 80151ec:	d10c      	bne.n	8015208 <_svfiprintf_r+0x130>
 80151ee:	7863      	ldrb	r3, [r4, #1]
 80151f0:	2b2a      	cmp	r3, #42	; 0x2a
 80151f2:	d135      	bne.n	8015260 <_svfiprintf_r+0x188>
 80151f4:	9b03      	ldr	r3, [sp, #12]
 80151f6:	3402      	adds	r4, #2
 80151f8:	1d1a      	adds	r2, r3, #4
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	9203      	str	r2, [sp, #12]
 8015200:	bfb8      	it	lt
 8015202:	f04f 33ff 	movlt.w	r3, #4294967295
 8015206:	9305      	str	r3, [sp, #20]
 8015208:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80152d4 <_svfiprintf_r+0x1fc>
 801520c:	2203      	movs	r2, #3
 801520e:	7821      	ldrb	r1, [r4, #0]
 8015210:	4650      	mov	r0, sl
 8015212:	f000 f9f7 	bl	8015604 <memchr>
 8015216:	b140      	cbz	r0, 801522a <_svfiprintf_r+0x152>
 8015218:	2340      	movs	r3, #64	; 0x40
 801521a:	eba0 000a 	sub.w	r0, r0, sl
 801521e:	3401      	adds	r4, #1
 8015220:	fa03 f000 	lsl.w	r0, r3, r0
 8015224:	9b04      	ldr	r3, [sp, #16]
 8015226:	4303      	orrs	r3, r0
 8015228:	9304      	str	r3, [sp, #16]
 801522a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801522e:	2206      	movs	r2, #6
 8015230:	4825      	ldr	r0, [pc, #148]	; (80152c8 <_svfiprintf_r+0x1f0>)
 8015232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015236:	f000 f9e5 	bl	8015604 <memchr>
 801523a:	2800      	cmp	r0, #0
 801523c:	d038      	beq.n	80152b0 <_svfiprintf_r+0x1d8>
 801523e:	4b23      	ldr	r3, [pc, #140]	; (80152cc <_svfiprintf_r+0x1f4>)
 8015240:	bb1b      	cbnz	r3, 801528a <_svfiprintf_r+0x1b2>
 8015242:	9b03      	ldr	r3, [sp, #12]
 8015244:	3307      	adds	r3, #7
 8015246:	f023 0307 	bic.w	r3, r3, #7
 801524a:	3308      	adds	r3, #8
 801524c:	9303      	str	r3, [sp, #12]
 801524e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015250:	4433      	add	r3, r6
 8015252:	9309      	str	r3, [sp, #36]	; 0x24
 8015254:	e767      	b.n	8015126 <_svfiprintf_r+0x4e>
 8015256:	fb0c 3202 	mla	r2, ip, r2, r3
 801525a:	460c      	mov	r4, r1
 801525c:	2001      	movs	r0, #1
 801525e:	e7a5      	b.n	80151ac <_svfiprintf_r+0xd4>
 8015260:	2300      	movs	r3, #0
 8015262:	3401      	adds	r4, #1
 8015264:	f04f 0c0a 	mov.w	ip, #10
 8015268:	4619      	mov	r1, r3
 801526a:	9305      	str	r3, [sp, #20]
 801526c:	4620      	mov	r0, r4
 801526e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015272:	3a30      	subs	r2, #48	; 0x30
 8015274:	2a09      	cmp	r2, #9
 8015276:	d903      	bls.n	8015280 <_svfiprintf_r+0x1a8>
 8015278:	2b00      	cmp	r3, #0
 801527a:	d0c5      	beq.n	8015208 <_svfiprintf_r+0x130>
 801527c:	9105      	str	r1, [sp, #20]
 801527e:	e7c3      	b.n	8015208 <_svfiprintf_r+0x130>
 8015280:	fb0c 2101 	mla	r1, ip, r1, r2
 8015284:	4604      	mov	r4, r0
 8015286:	2301      	movs	r3, #1
 8015288:	e7f0      	b.n	801526c <_svfiprintf_r+0x194>
 801528a:	ab03      	add	r3, sp, #12
 801528c:	462a      	mov	r2, r5
 801528e:	a904      	add	r1, sp, #16
 8015290:	4638      	mov	r0, r7
 8015292:	9300      	str	r3, [sp, #0]
 8015294:	4b0e      	ldr	r3, [pc, #56]	; (80152d0 <_svfiprintf_r+0x1f8>)
 8015296:	e000      	b.n	801529a <_svfiprintf_r+0x1c2>
 8015298:	bf00      	nop
 801529a:	1c42      	adds	r2, r0, #1
 801529c:	4606      	mov	r6, r0
 801529e:	d1d6      	bne.n	801524e <_svfiprintf_r+0x176>
 80152a0:	89ab      	ldrh	r3, [r5, #12]
 80152a2:	065b      	lsls	r3, r3, #25
 80152a4:	f53f af2c 	bmi.w	8015100 <_svfiprintf_r+0x28>
 80152a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152aa:	b01d      	add	sp, #116	; 0x74
 80152ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152b0:	ab03      	add	r3, sp, #12
 80152b2:	462a      	mov	r2, r5
 80152b4:	a904      	add	r1, sp, #16
 80152b6:	4638      	mov	r0, r7
 80152b8:	9300      	str	r3, [sp, #0]
 80152ba:	4b05      	ldr	r3, [pc, #20]	; (80152d0 <_svfiprintf_r+0x1f8>)
 80152bc:	f000 f87c 	bl	80153b8 <_printf_i>
 80152c0:	e7eb      	b.n	801529a <_svfiprintf_r+0x1c2>
 80152c2:	bf00      	nop
 80152c4:	08015bf5 	.word	0x08015bf5
 80152c8:	08015bff 	.word	0x08015bff
 80152cc:	00000000 	.word	0x00000000
 80152d0:	08015021 	.word	0x08015021
 80152d4:	08015bfb 	.word	0x08015bfb

080152d8 <_printf_common>:
 80152d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152dc:	4616      	mov	r6, r2
 80152de:	4699      	mov	r9, r3
 80152e0:	688a      	ldr	r2, [r1, #8]
 80152e2:	4607      	mov	r7, r0
 80152e4:	690b      	ldr	r3, [r1, #16]
 80152e6:	460c      	mov	r4, r1
 80152e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80152ec:	4293      	cmp	r3, r2
 80152ee:	bfb8      	it	lt
 80152f0:	4613      	movlt	r3, r2
 80152f2:	6033      	str	r3, [r6, #0]
 80152f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80152f8:	b10a      	cbz	r2, 80152fe <_printf_common+0x26>
 80152fa:	3301      	adds	r3, #1
 80152fc:	6033      	str	r3, [r6, #0]
 80152fe:	6823      	ldr	r3, [r4, #0]
 8015300:	0699      	lsls	r1, r3, #26
 8015302:	bf42      	ittt	mi
 8015304:	6833      	ldrmi	r3, [r6, #0]
 8015306:	3302      	addmi	r3, #2
 8015308:	6033      	strmi	r3, [r6, #0]
 801530a:	6825      	ldr	r5, [r4, #0]
 801530c:	f015 0506 	ands.w	r5, r5, #6
 8015310:	d106      	bne.n	8015320 <_printf_common+0x48>
 8015312:	f104 0a19 	add.w	sl, r4, #25
 8015316:	68e3      	ldr	r3, [r4, #12]
 8015318:	6832      	ldr	r2, [r6, #0]
 801531a:	1a9b      	subs	r3, r3, r2
 801531c:	42ab      	cmp	r3, r5
 801531e:	dc29      	bgt.n	8015374 <_printf_common+0x9c>
 8015320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015324:	1e13      	subs	r3, r2, #0
 8015326:	6822      	ldr	r2, [r4, #0]
 8015328:	bf18      	it	ne
 801532a:	2301      	movne	r3, #1
 801532c:	0692      	lsls	r2, r2, #26
 801532e:	d42e      	bmi.n	801538e <_printf_common+0xb6>
 8015330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015334:	4649      	mov	r1, r9
 8015336:	4638      	mov	r0, r7
 8015338:	47c0      	blx	r8
 801533a:	3001      	adds	r0, #1
 801533c:	d021      	beq.n	8015382 <_printf_common+0xaa>
 801533e:	6823      	ldr	r3, [r4, #0]
 8015340:	341a      	adds	r4, #26
 8015342:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8015346:	f003 0306 	and.w	r3, r3, #6
 801534a:	6832      	ldr	r2, [r6, #0]
 801534c:	2600      	movs	r6, #0
 801534e:	2b04      	cmp	r3, #4
 8015350:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8015354:	bf08      	it	eq
 8015356:	1aad      	subeq	r5, r5, r2
 8015358:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801535c:	bf14      	ite	ne
 801535e:	2500      	movne	r5, #0
 8015360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015364:	4293      	cmp	r3, r2
 8015366:	bfc4      	itt	gt
 8015368:	1a9b      	subgt	r3, r3, r2
 801536a:	18ed      	addgt	r5, r5, r3
 801536c:	42b5      	cmp	r5, r6
 801536e:	d11a      	bne.n	80153a6 <_printf_common+0xce>
 8015370:	2000      	movs	r0, #0
 8015372:	e008      	b.n	8015386 <_printf_common+0xae>
 8015374:	2301      	movs	r3, #1
 8015376:	4652      	mov	r2, sl
 8015378:	4649      	mov	r1, r9
 801537a:	4638      	mov	r0, r7
 801537c:	47c0      	blx	r8
 801537e:	3001      	adds	r0, #1
 8015380:	d103      	bne.n	801538a <_printf_common+0xb2>
 8015382:	f04f 30ff 	mov.w	r0, #4294967295
 8015386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801538a:	3501      	adds	r5, #1
 801538c:	e7c3      	b.n	8015316 <_printf_common+0x3e>
 801538e:	18e1      	adds	r1, r4, r3
 8015390:	1c5a      	adds	r2, r3, #1
 8015392:	2030      	movs	r0, #48	; 0x30
 8015394:	3302      	adds	r3, #2
 8015396:	4422      	add	r2, r4
 8015398:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801539c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80153a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80153a4:	e7c4      	b.n	8015330 <_printf_common+0x58>
 80153a6:	2301      	movs	r3, #1
 80153a8:	4622      	mov	r2, r4
 80153aa:	4649      	mov	r1, r9
 80153ac:	4638      	mov	r0, r7
 80153ae:	47c0      	blx	r8
 80153b0:	3001      	adds	r0, #1
 80153b2:	d0e6      	beq.n	8015382 <_printf_common+0xaa>
 80153b4:	3601      	adds	r6, #1
 80153b6:	e7d9      	b.n	801536c <_printf_common+0x94>

080153b8 <_printf_i>:
 80153b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80153bc:	7e0f      	ldrb	r7, [r1, #24]
 80153be:	4691      	mov	r9, r2
 80153c0:	4680      	mov	r8, r0
 80153c2:	460c      	mov	r4, r1
 80153c4:	2f78      	cmp	r7, #120	; 0x78
 80153c6:	469a      	mov	sl, r3
 80153c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80153ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80153ce:	d807      	bhi.n	80153e0 <_printf_i+0x28>
 80153d0:	2f62      	cmp	r7, #98	; 0x62
 80153d2:	d80a      	bhi.n	80153ea <_printf_i+0x32>
 80153d4:	2f00      	cmp	r7, #0
 80153d6:	f000 80d8 	beq.w	801558a <_printf_i+0x1d2>
 80153da:	2f58      	cmp	r7, #88	; 0x58
 80153dc:	f000 80a3 	beq.w	8015526 <_printf_i+0x16e>
 80153e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80153e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80153e8:	e03a      	b.n	8015460 <_printf_i+0xa8>
 80153ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80153ee:	2b15      	cmp	r3, #21
 80153f0:	d8f6      	bhi.n	80153e0 <_printf_i+0x28>
 80153f2:	a101      	add	r1, pc, #4	; (adr r1, 80153f8 <_printf_i+0x40>)
 80153f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80153f8:	08015451 	.word	0x08015451
 80153fc:	08015465 	.word	0x08015465
 8015400:	080153e1 	.word	0x080153e1
 8015404:	080153e1 	.word	0x080153e1
 8015408:	080153e1 	.word	0x080153e1
 801540c:	080153e1 	.word	0x080153e1
 8015410:	08015465 	.word	0x08015465
 8015414:	080153e1 	.word	0x080153e1
 8015418:	080153e1 	.word	0x080153e1
 801541c:	080153e1 	.word	0x080153e1
 8015420:	080153e1 	.word	0x080153e1
 8015424:	08015571 	.word	0x08015571
 8015428:	08015495 	.word	0x08015495
 801542c:	08015553 	.word	0x08015553
 8015430:	080153e1 	.word	0x080153e1
 8015434:	080153e1 	.word	0x080153e1
 8015438:	08015593 	.word	0x08015593
 801543c:	080153e1 	.word	0x080153e1
 8015440:	08015495 	.word	0x08015495
 8015444:	080153e1 	.word	0x080153e1
 8015448:	080153e1 	.word	0x080153e1
 801544c:	0801555b 	.word	0x0801555b
 8015450:	682b      	ldr	r3, [r5, #0]
 8015452:	1d1a      	adds	r2, r3, #4
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	602a      	str	r2, [r5, #0]
 8015458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801545c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015460:	2301      	movs	r3, #1
 8015462:	e0a3      	b.n	80155ac <_printf_i+0x1f4>
 8015464:	6820      	ldr	r0, [r4, #0]
 8015466:	6829      	ldr	r1, [r5, #0]
 8015468:	0606      	lsls	r6, r0, #24
 801546a:	f101 0304 	add.w	r3, r1, #4
 801546e:	d50a      	bpl.n	8015486 <_printf_i+0xce>
 8015470:	680e      	ldr	r6, [r1, #0]
 8015472:	602b      	str	r3, [r5, #0]
 8015474:	2e00      	cmp	r6, #0
 8015476:	da03      	bge.n	8015480 <_printf_i+0xc8>
 8015478:	232d      	movs	r3, #45	; 0x2d
 801547a:	4276      	negs	r6, r6
 801547c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015480:	485e      	ldr	r0, [pc, #376]	; (80155fc <_printf_i+0x244>)
 8015482:	230a      	movs	r3, #10
 8015484:	e019      	b.n	80154ba <_printf_i+0x102>
 8015486:	680e      	ldr	r6, [r1, #0]
 8015488:	f010 0f40 	tst.w	r0, #64	; 0x40
 801548c:	602b      	str	r3, [r5, #0]
 801548e:	bf18      	it	ne
 8015490:	b236      	sxthne	r6, r6
 8015492:	e7ef      	b.n	8015474 <_printf_i+0xbc>
 8015494:	682b      	ldr	r3, [r5, #0]
 8015496:	6820      	ldr	r0, [r4, #0]
 8015498:	1d19      	adds	r1, r3, #4
 801549a:	6029      	str	r1, [r5, #0]
 801549c:	0601      	lsls	r1, r0, #24
 801549e:	d501      	bpl.n	80154a4 <_printf_i+0xec>
 80154a0:	681e      	ldr	r6, [r3, #0]
 80154a2:	e002      	b.n	80154aa <_printf_i+0xf2>
 80154a4:	0646      	lsls	r6, r0, #25
 80154a6:	d5fb      	bpl.n	80154a0 <_printf_i+0xe8>
 80154a8:	881e      	ldrh	r6, [r3, #0]
 80154aa:	2f6f      	cmp	r7, #111	; 0x6f
 80154ac:	4853      	ldr	r0, [pc, #332]	; (80155fc <_printf_i+0x244>)
 80154ae:	bf0c      	ite	eq
 80154b0:	2308      	moveq	r3, #8
 80154b2:	230a      	movne	r3, #10
 80154b4:	2100      	movs	r1, #0
 80154b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80154ba:	6865      	ldr	r5, [r4, #4]
 80154bc:	2d00      	cmp	r5, #0
 80154be:	60a5      	str	r5, [r4, #8]
 80154c0:	bfa2      	ittt	ge
 80154c2:	6821      	ldrge	r1, [r4, #0]
 80154c4:	f021 0104 	bicge.w	r1, r1, #4
 80154c8:	6021      	strge	r1, [r4, #0]
 80154ca:	b90e      	cbnz	r6, 80154d0 <_printf_i+0x118>
 80154cc:	2d00      	cmp	r5, #0
 80154ce:	d04d      	beq.n	801556c <_printf_i+0x1b4>
 80154d0:	4615      	mov	r5, r2
 80154d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80154d6:	fb03 6711 	mls	r7, r3, r1, r6
 80154da:	5dc7      	ldrb	r7, [r0, r7]
 80154dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80154e0:	4637      	mov	r7, r6
 80154e2:	460e      	mov	r6, r1
 80154e4:	42bb      	cmp	r3, r7
 80154e6:	d9f4      	bls.n	80154d2 <_printf_i+0x11a>
 80154e8:	2b08      	cmp	r3, #8
 80154ea:	d10b      	bne.n	8015504 <_printf_i+0x14c>
 80154ec:	6823      	ldr	r3, [r4, #0]
 80154ee:	07de      	lsls	r6, r3, #31
 80154f0:	d508      	bpl.n	8015504 <_printf_i+0x14c>
 80154f2:	6923      	ldr	r3, [r4, #16]
 80154f4:	6861      	ldr	r1, [r4, #4]
 80154f6:	4299      	cmp	r1, r3
 80154f8:	bfde      	ittt	le
 80154fa:	2330      	movle	r3, #48	; 0x30
 80154fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015500:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015504:	1b52      	subs	r2, r2, r5
 8015506:	6122      	str	r2, [r4, #16]
 8015508:	464b      	mov	r3, r9
 801550a:	aa03      	add	r2, sp, #12
 801550c:	4621      	mov	r1, r4
 801550e:	4640      	mov	r0, r8
 8015510:	f8cd a000 	str.w	sl, [sp]
 8015514:	f7ff fee0 	bl	80152d8 <_printf_common>
 8015518:	3001      	adds	r0, #1
 801551a:	d14c      	bne.n	80155b6 <_printf_i+0x1fe>
 801551c:	f04f 30ff 	mov.w	r0, #4294967295
 8015520:	b004      	add	sp, #16
 8015522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015526:	4835      	ldr	r0, [pc, #212]	; (80155fc <_printf_i+0x244>)
 8015528:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801552c:	6829      	ldr	r1, [r5, #0]
 801552e:	6823      	ldr	r3, [r4, #0]
 8015530:	f851 6b04 	ldr.w	r6, [r1], #4
 8015534:	6029      	str	r1, [r5, #0]
 8015536:	061d      	lsls	r5, r3, #24
 8015538:	d514      	bpl.n	8015564 <_printf_i+0x1ac>
 801553a:	07df      	lsls	r7, r3, #31
 801553c:	bf44      	itt	mi
 801553e:	f043 0320 	orrmi.w	r3, r3, #32
 8015542:	6023      	strmi	r3, [r4, #0]
 8015544:	b91e      	cbnz	r6, 801554e <_printf_i+0x196>
 8015546:	6823      	ldr	r3, [r4, #0]
 8015548:	f023 0320 	bic.w	r3, r3, #32
 801554c:	6023      	str	r3, [r4, #0]
 801554e:	2310      	movs	r3, #16
 8015550:	e7b0      	b.n	80154b4 <_printf_i+0xfc>
 8015552:	6823      	ldr	r3, [r4, #0]
 8015554:	f043 0320 	orr.w	r3, r3, #32
 8015558:	6023      	str	r3, [r4, #0]
 801555a:	2378      	movs	r3, #120	; 0x78
 801555c:	4828      	ldr	r0, [pc, #160]	; (8015600 <_printf_i+0x248>)
 801555e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015562:	e7e3      	b.n	801552c <_printf_i+0x174>
 8015564:	0659      	lsls	r1, r3, #25
 8015566:	bf48      	it	mi
 8015568:	b2b6      	uxthmi	r6, r6
 801556a:	e7e6      	b.n	801553a <_printf_i+0x182>
 801556c:	4615      	mov	r5, r2
 801556e:	e7bb      	b.n	80154e8 <_printf_i+0x130>
 8015570:	682b      	ldr	r3, [r5, #0]
 8015572:	6826      	ldr	r6, [r4, #0]
 8015574:	1d18      	adds	r0, r3, #4
 8015576:	6961      	ldr	r1, [r4, #20]
 8015578:	6028      	str	r0, [r5, #0]
 801557a:	0635      	lsls	r5, r6, #24
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	d501      	bpl.n	8015584 <_printf_i+0x1cc>
 8015580:	6019      	str	r1, [r3, #0]
 8015582:	e002      	b.n	801558a <_printf_i+0x1d2>
 8015584:	0670      	lsls	r0, r6, #25
 8015586:	d5fb      	bpl.n	8015580 <_printf_i+0x1c8>
 8015588:	8019      	strh	r1, [r3, #0]
 801558a:	2300      	movs	r3, #0
 801558c:	4615      	mov	r5, r2
 801558e:	6123      	str	r3, [r4, #16]
 8015590:	e7ba      	b.n	8015508 <_printf_i+0x150>
 8015592:	682b      	ldr	r3, [r5, #0]
 8015594:	2100      	movs	r1, #0
 8015596:	1d1a      	adds	r2, r3, #4
 8015598:	602a      	str	r2, [r5, #0]
 801559a:	681d      	ldr	r5, [r3, #0]
 801559c:	6862      	ldr	r2, [r4, #4]
 801559e:	4628      	mov	r0, r5
 80155a0:	f000 f830 	bl	8015604 <memchr>
 80155a4:	b108      	cbz	r0, 80155aa <_printf_i+0x1f2>
 80155a6:	1b40      	subs	r0, r0, r5
 80155a8:	6060      	str	r0, [r4, #4]
 80155aa:	6863      	ldr	r3, [r4, #4]
 80155ac:	6123      	str	r3, [r4, #16]
 80155ae:	2300      	movs	r3, #0
 80155b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80155b4:	e7a8      	b.n	8015508 <_printf_i+0x150>
 80155b6:	6923      	ldr	r3, [r4, #16]
 80155b8:	462a      	mov	r2, r5
 80155ba:	4649      	mov	r1, r9
 80155bc:	4640      	mov	r0, r8
 80155be:	47d0      	blx	sl
 80155c0:	3001      	adds	r0, #1
 80155c2:	d0ab      	beq.n	801551c <_printf_i+0x164>
 80155c4:	6823      	ldr	r3, [r4, #0]
 80155c6:	079b      	lsls	r3, r3, #30
 80155c8:	d413      	bmi.n	80155f2 <_printf_i+0x23a>
 80155ca:	68e0      	ldr	r0, [r4, #12]
 80155cc:	9b03      	ldr	r3, [sp, #12]
 80155ce:	4298      	cmp	r0, r3
 80155d0:	bfb8      	it	lt
 80155d2:	4618      	movlt	r0, r3
 80155d4:	e7a4      	b.n	8015520 <_printf_i+0x168>
 80155d6:	2301      	movs	r3, #1
 80155d8:	4632      	mov	r2, r6
 80155da:	4649      	mov	r1, r9
 80155dc:	4640      	mov	r0, r8
 80155de:	47d0      	blx	sl
 80155e0:	3001      	adds	r0, #1
 80155e2:	d09b      	beq.n	801551c <_printf_i+0x164>
 80155e4:	3501      	adds	r5, #1
 80155e6:	68e3      	ldr	r3, [r4, #12]
 80155e8:	9903      	ldr	r1, [sp, #12]
 80155ea:	1a5b      	subs	r3, r3, r1
 80155ec:	42ab      	cmp	r3, r5
 80155ee:	dcf2      	bgt.n	80155d6 <_printf_i+0x21e>
 80155f0:	e7eb      	b.n	80155ca <_printf_i+0x212>
 80155f2:	2500      	movs	r5, #0
 80155f4:	f104 0619 	add.w	r6, r4, #25
 80155f8:	e7f5      	b.n	80155e6 <_printf_i+0x22e>
 80155fa:	bf00      	nop
 80155fc:	08015c06 	.word	0x08015c06
 8015600:	08015c17 	.word	0x08015c17

08015604 <memchr>:
 8015604:	b2c9      	uxtb	r1, r1
 8015606:	4402      	add	r2, r0
 8015608:	b510      	push	{r4, lr}
 801560a:	4290      	cmp	r0, r2
 801560c:	4603      	mov	r3, r0
 801560e:	d101      	bne.n	8015614 <memchr+0x10>
 8015610:	2300      	movs	r3, #0
 8015612:	e003      	b.n	801561c <memchr+0x18>
 8015614:	781c      	ldrb	r4, [r3, #0]
 8015616:	3001      	adds	r0, #1
 8015618:	428c      	cmp	r4, r1
 801561a:	d1f6      	bne.n	801560a <memchr+0x6>
 801561c:	4618      	mov	r0, r3
 801561e:	bd10      	pop	{r4, pc}

08015620 <memcpy>:
 8015620:	440a      	add	r2, r1
 8015622:	1e43      	subs	r3, r0, #1
 8015624:	4291      	cmp	r1, r2
 8015626:	d100      	bne.n	801562a <memcpy+0xa>
 8015628:	4770      	bx	lr
 801562a:	b510      	push	{r4, lr}
 801562c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015630:	4291      	cmp	r1, r2
 8015632:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015636:	d1f9      	bne.n	801562c <memcpy+0xc>
 8015638:	bd10      	pop	{r4, pc}

0801563a <memmove>:
 801563a:	4288      	cmp	r0, r1
 801563c:	b510      	push	{r4, lr}
 801563e:	eb01 0402 	add.w	r4, r1, r2
 8015642:	d902      	bls.n	801564a <memmove+0x10>
 8015644:	4284      	cmp	r4, r0
 8015646:	4623      	mov	r3, r4
 8015648:	d807      	bhi.n	801565a <memmove+0x20>
 801564a:	1e43      	subs	r3, r0, #1
 801564c:	42a1      	cmp	r1, r4
 801564e:	d008      	beq.n	8015662 <memmove+0x28>
 8015650:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015654:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015658:	e7f8      	b.n	801564c <memmove+0x12>
 801565a:	4402      	add	r2, r0
 801565c:	4601      	mov	r1, r0
 801565e:	428a      	cmp	r2, r1
 8015660:	d100      	bne.n	8015664 <memmove+0x2a>
 8015662:	bd10      	pop	{r4, pc}
 8015664:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015668:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801566c:	e7f7      	b.n	801565e <memmove+0x24>
	...

08015670 <_free_r>:
 8015670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015672:	2900      	cmp	r1, #0
 8015674:	d043      	beq.n	80156fe <_free_r+0x8e>
 8015676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801567a:	1f0c      	subs	r4, r1, #4
 801567c:	9001      	str	r0, [sp, #4]
 801567e:	2b00      	cmp	r3, #0
 8015680:	bfb8      	it	lt
 8015682:	18e4      	addlt	r4, r4, r3
 8015684:	f000 f914 	bl	80158b0 <__malloc_lock>
 8015688:	4a1e      	ldr	r2, [pc, #120]	; (8015704 <_free_r+0x94>)
 801568a:	9801      	ldr	r0, [sp, #4]
 801568c:	6813      	ldr	r3, [r2, #0]
 801568e:	b933      	cbnz	r3, 801569e <_free_r+0x2e>
 8015690:	6063      	str	r3, [r4, #4]
 8015692:	6014      	str	r4, [r2, #0]
 8015694:	b003      	add	sp, #12
 8015696:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801569a:	f000 b90f 	b.w	80158bc <__malloc_unlock>
 801569e:	42a3      	cmp	r3, r4
 80156a0:	d908      	bls.n	80156b4 <_free_r+0x44>
 80156a2:	6825      	ldr	r5, [r4, #0]
 80156a4:	1961      	adds	r1, r4, r5
 80156a6:	428b      	cmp	r3, r1
 80156a8:	bf01      	itttt	eq
 80156aa:	6819      	ldreq	r1, [r3, #0]
 80156ac:	685b      	ldreq	r3, [r3, #4]
 80156ae:	1949      	addeq	r1, r1, r5
 80156b0:	6021      	streq	r1, [r4, #0]
 80156b2:	e7ed      	b.n	8015690 <_free_r+0x20>
 80156b4:	461a      	mov	r2, r3
 80156b6:	685b      	ldr	r3, [r3, #4]
 80156b8:	b10b      	cbz	r3, 80156be <_free_r+0x4e>
 80156ba:	42a3      	cmp	r3, r4
 80156bc:	d9fa      	bls.n	80156b4 <_free_r+0x44>
 80156be:	6811      	ldr	r1, [r2, #0]
 80156c0:	1855      	adds	r5, r2, r1
 80156c2:	42a5      	cmp	r5, r4
 80156c4:	d10b      	bne.n	80156de <_free_r+0x6e>
 80156c6:	6824      	ldr	r4, [r4, #0]
 80156c8:	4421      	add	r1, r4
 80156ca:	1854      	adds	r4, r2, r1
 80156cc:	6011      	str	r1, [r2, #0]
 80156ce:	42a3      	cmp	r3, r4
 80156d0:	d1e0      	bne.n	8015694 <_free_r+0x24>
 80156d2:	681c      	ldr	r4, [r3, #0]
 80156d4:	685b      	ldr	r3, [r3, #4]
 80156d6:	4421      	add	r1, r4
 80156d8:	6053      	str	r3, [r2, #4]
 80156da:	6011      	str	r1, [r2, #0]
 80156dc:	e7da      	b.n	8015694 <_free_r+0x24>
 80156de:	d902      	bls.n	80156e6 <_free_r+0x76>
 80156e0:	230c      	movs	r3, #12
 80156e2:	6003      	str	r3, [r0, #0]
 80156e4:	e7d6      	b.n	8015694 <_free_r+0x24>
 80156e6:	6825      	ldr	r5, [r4, #0]
 80156e8:	1961      	adds	r1, r4, r5
 80156ea:	428b      	cmp	r3, r1
 80156ec:	bf02      	ittt	eq
 80156ee:	6819      	ldreq	r1, [r3, #0]
 80156f0:	685b      	ldreq	r3, [r3, #4]
 80156f2:	1949      	addeq	r1, r1, r5
 80156f4:	6063      	str	r3, [r4, #4]
 80156f6:	bf08      	it	eq
 80156f8:	6021      	streq	r1, [r4, #0]
 80156fa:	6054      	str	r4, [r2, #4]
 80156fc:	e7ca      	b.n	8015694 <_free_r+0x24>
 80156fe:	b003      	add	sp, #12
 8015700:	bd30      	pop	{r4, r5, pc}
 8015702:	bf00      	nop
 8015704:	20001eac 	.word	0x20001eac

08015708 <sbrk_aligned>:
 8015708:	b570      	push	{r4, r5, r6, lr}
 801570a:	4e0e      	ldr	r6, [pc, #56]	; (8015744 <sbrk_aligned+0x3c>)
 801570c:	460c      	mov	r4, r1
 801570e:	4605      	mov	r5, r0
 8015710:	6831      	ldr	r1, [r6, #0]
 8015712:	b911      	cbnz	r1, 801571a <sbrk_aligned+0x12>
 8015714:	f000 f8bc 	bl	8015890 <_sbrk_r>
 8015718:	6030      	str	r0, [r6, #0]
 801571a:	4621      	mov	r1, r4
 801571c:	4628      	mov	r0, r5
 801571e:	f000 f8b7 	bl	8015890 <_sbrk_r>
 8015722:	1c43      	adds	r3, r0, #1
 8015724:	d00a      	beq.n	801573c <sbrk_aligned+0x34>
 8015726:	1cc4      	adds	r4, r0, #3
 8015728:	f024 0403 	bic.w	r4, r4, #3
 801572c:	42a0      	cmp	r0, r4
 801572e:	d007      	beq.n	8015740 <sbrk_aligned+0x38>
 8015730:	1a21      	subs	r1, r4, r0
 8015732:	4628      	mov	r0, r5
 8015734:	f000 f8ac 	bl	8015890 <_sbrk_r>
 8015738:	3001      	adds	r0, #1
 801573a:	d101      	bne.n	8015740 <sbrk_aligned+0x38>
 801573c:	f04f 34ff 	mov.w	r4, #4294967295
 8015740:	4620      	mov	r0, r4
 8015742:	bd70      	pop	{r4, r5, r6, pc}
 8015744:	20001eb0 	.word	0x20001eb0

08015748 <_malloc_r>:
 8015748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801574c:	1ccd      	adds	r5, r1, #3
 801574e:	4607      	mov	r7, r0
 8015750:	f025 0503 	bic.w	r5, r5, #3
 8015754:	3508      	adds	r5, #8
 8015756:	2d0c      	cmp	r5, #12
 8015758:	bf38      	it	cc
 801575a:	250c      	movcc	r5, #12
 801575c:	2d00      	cmp	r5, #0
 801575e:	db01      	blt.n	8015764 <_malloc_r+0x1c>
 8015760:	42a9      	cmp	r1, r5
 8015762:	d905      	bls.n	8015770 <_malloc_r+0x28>
 8015764:	230c      	movs	r3, #12
 8015766:	2600      	movs	r6, #0
 8015768:	603b      	str	r3, [r7, #0]
 801576a:	4630      	mov	r0, r6
 801576c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015770:	4e2e      	ldr	r6, [pc, #184]	; (801582c <_malloc_r+0xe4>)
 8015772:	f000 f89d 	bl	80158b0 <__malloc_lock>
 8015776:	6833      	ldr	r3, [r6, #0]
 8015778:	461c      	mov	r4, r3
 801577a:	bb34      	cbnz	r4, 80157ca <_malloc_r+0x82>
 801577c:	4629      	mov	r1, r5
 801577e:	4638      	mov	r0, r7
 8015780:	f7ff ffc2 	bl	8015708 <sbrk_aligned>
 8015784:	1c43      	adds	r3, r0, #1
 8015786:	4604      	mov	r4, r0
 8015788:	d14d      	bne.n	8015826 <_malloc_r+0xde>
 801578a:	6834      	ldr	r4, [r6, #0]
 801578c:	4626      	mov	r6, r4
 801578e:	2e00      	cmp	r6, #0
 8015790:	d140      	bne.n	8015814 <_malloc_r+0xcc>
 8015792:	6823      	ldr	r3, [r4, #0]
 8015794:	4631      	mov	r1, r6
 8015796:	4638      	mov	r0, r7
 8015798:	eb04 0803 	add.w	r8, r4, r3
 801579c:	f000 f878 	bl	8015890 <_sbrk_r>
 80157a0:	4580      	cmp	r8, r0
 80157a2:	d13a      	bne.n	801581a <_malloc_r+0xd2>
 80157a4:	6821      	ldr	r1, [r4, #0]
 80157a6:	3503      	adds	r5, #3
 80157a8:	4638      	mov	r0, r7
 80157aa:	1a6d      	subs	r5, r5, r1
 80157ac:	f025 0503 	bic.w	r5, r5, #3
 80157b0:	3508      	adds	r5, #8
 80157b2:	2d0c      	cmp	r5, #12
 80157b4:	bf38      	it	cc
 80157b6:	250c      	movcc	r5, #12
 80157b8:	4629      	mov	r1, r5
 80157ba:	f7ff ffa5 	bl	8015708 <sbrk_aligned>
 80157be:	3001      	adds	r0, #1
 80157c0:	d02b      	beq.n	801581a <_malloc_r+0xd2>
 80157c2:	6823      	ldr	r3, [r4, #0]
 80157c4:	442b      	add	r3, r5
 80157c6:	6023      	str	r3, [r4, #0]
 80157c8:	e00e      	b.n	80157e8 <_malloc_r+0xa0>
 80157ca:	6822      	ldr	r2, [r4, #0]
 80157cc:	1b52      	subs	r2, r2, r5
 80157ce:	d41e      	bmi.n	801580e <_malloc_r+0xc6>
 80157d0:	2a0b      	cmp	r2, #11
 80157d2:	d916      	bls.n	8015802 <_malloc_r+0xba>
 80157d4:	1961      	adds	r1, r4, r5
 80157d6:	42a3      	cmp	r3, r4
 80157d8:	6025      	str	r5, [r4, #0]
 80157da:	bf18      	it	ne
 80157dc:	6059      	strne	r1, [r3, #4]
 80157de:	6863      	ldr	r3, [r4, #4]
 80157e0:	bf08      	it	eq
 80157e2:	6031      	streq	r1, [r6, #0]
 80157e4:	5162      	str	r2, [r4, r5]
 80157e6:	604b      	str	r3, [r1, #4]
 80157e8:	f104 060b 	add.w	r6, r4, #11
 80157ec:	4638      	mov	r0, r7
 80157ee:	f000 f865 	bl	80158bc <__malloc_unlock>
 80157f2:	1d23      	adds	r3, r4, #4
 80157f4:	f026 0607 	bic.w	r6, r6, #7
 80157f8:	1af2      	subs	r2, r6, r3
 80157fa:	d0b6      	beq.n	801576a <_malloc_r+0x22>
 80157fc:	1b9b      	subs	r3, r3, r6
 80157fe:	50a3      	str	r3, [r4, r2]
 8015800:	e7b3      	b.n	801576a <_malloc_r+0x22>
 8015802:	6862      	ldr	r2, [r4, #4]
 8015804:	42a3      	cmp	r3, r4
 8015806:	bf0c      	ite	eq
 8015808:	6032      	streq	r2, [r6, #0]
 801580a:	605a      	strne	r2, [r3, #4]
 801580c:	e7ec      	b.n	80157e8 <_malloc_r+0xa0>
 801580e:	4623      	mov	r3, r4
 8015810:	6864      	ldr	r4, [r4, #4]
 8015812:	e7b2      	b.n	801577a <_malloc_r+0x32>
 8015814:	4634      	mov	r4, r6
 8015816:	6876      	ldr	r6, [r6, #4]
 8015818:	e7b9      	b.n	801578e <_malloc_r+0x46>
 801581a:	230c      	movs	r3, #12
 801581c:	4638      	mov	r0, r7
 801581e:	603b      	str	r3, [r7, #0]
 8015820:	f000 f84c 	bl	80158bc <__malloc_unlock>
 8015824:	e7a1      	b.n	801576a <_malloc_r+0x22>
 8015826:	6025      	str	r5, [r4, #0]
 8015828:	e7de      	b.n	80157e8 <_malloc_r+0xa0>
 801582a:	bf00      	nop
 801582c:	20001eac 	.word	0x20001eac

08015830 <_realloc_r>:
 8015830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015834:	4680      	mov	r8, r0
 8015836:	4614      	mov	r4, r2
 8015838:	460e      	mov	r6, r1
 801583a:	b921      	cbnz	r1, 8015846 <_realloc_r+0x16>
 801583c:	4611      	mov	r1, r2
 801583e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015842:	f7ff bf81 	b.w	8015748 <_malloc_r>
 8015846:	b92a      	cbnz	r2, 8015854 <_realloc_r+0x24>
 8015848:	4625      	mov	r5, r4
 801584a:	f7ff ff11 	bl	8015670 <_free_r>
 801584e:	4628      	mov	r0, r5
 8015850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015854:	f000 f838 	bl	80158c8 <_malloc_usable_size_r>
 8015858:	4284      	cmp	r4, r0
 801585a:	4607      	mov	r7, r0
 801585c:	d802      	bhi.n	8015864 <_realloc_r+0x34>
 801585e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015862:	d812      	bhi.n	801588a <_realloc_r+0x5a>
 8015864:	4621      	mov	r1, r4
 8015866:	4640      	mov	r0, r8
 8015868:	f7ff ff6e 	bl	8015748 <_malloc_r>
 801586c:	4605      	mov	r5, r0
 801586e:	2800      	cmp	r0, #0
 8015870:	d0ed      	beq.n	801584e <_realloc_r+0x1e>
 8015872:	42bc      	cmp	r4, r7
 8015874:	4622      	mov	r2, r4
 8015876:	4631      	mov	r1, r6
 8015878:	bf28      	it	cs
 801587a:	463a      	movcs	r2, r7
 801587c:	f7ff fed0 	bl	8015620 <memcpy>
 8015880:	4631      	mov	r1, r6
 8015882:	4640      	mov	r0, r8
 8015884:	f7ff fef4 	bl	8015670 <_free_r>
 8015888:	e7e1      	b.n	801584e <_realloc_r+0x1e>
 801588a:	4635      	mov	r5, r6
 801588c:	e7df      	b.n	801584e <_realloc_r+0x1e>
	...

08015890 <_sbrk_r>:
 8015890:	b538      	push	{r3, r4, r5, lr}
 8015892:	2300      	movs	r3, #0
 8015894:	4d05      	ldr	r5, [pc, #20]	; (80158ac <_sbrk_r+0x1c>)
 8015896:	4604      	mov	r4, r0
 8015898:	4608      	mov	r0, r1
 801589a:	602b      	str	r3, [r5, #0]
 801589c:	f7ec f8f0 	bl	8001a80 <_sbrk>
 80158a0:	1c43      	adds	r3, r0, #1
 80158a2:	d102      	bne.n	80158aa <_sbrk_r+0x1a>
 80158a4:	682b      	ldr	r3, [r5, #0]
 80158a6:	b103      	cbz	r3, 80158aa <_sbrk_r+0x1a>
 80158a8:	6023      	str	r3, [r4, #0]
 80158aa:	bd38      	pop	{r3, r4, r5, pc}
 80158ac:	20001eb4 	.word	0x20001eb4

080158b0 <__malloc_lock>:
 80158b0:	4801      	ldr	r0, [pc, #4]	; (80158b8 <__malloc_lock+0x8>)
 80158b2:	f000 b811 	b.w	80158d8 <__retarget_lock_acquire_recursive>
 80158b6:	bf00      	nop
 80158b8:	20001eb8 	.word	0x20001eb8

080158bc <__malloc_unlock>:
 80158bc:	4801      	ldr	r0, [pc, #4]	; (80158c4 <__malloc_unlock+0x8>)
 80158be:	f000 b80c 	b.w	80158da <__retarget_lock_release_recursive>
 80158c2:	bf00      	nop
 80158c4:	20001eb8 	.word	0x20001eb8

080158c8 <_malloc_usable_size_r>:
 80158c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158cc:	1f18      	subs	r0, r3, #4
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	bfbc      	itt	lt
 80158d2:	580b      	ldrlt	r3, [r1, r0]
 80158d4:	18c0      	addlt	r0, r0, r3
 80158d6:	4770      	bx	lr

080158d8 <__retarget_lock_acquire_recursive>:
 80158d8:	4770      	bx	lr

080158da <__retarget_lock_release_recursive>:
 80158da:	4770      	bx	lr

080158dc <_init>:
 80158dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158de:	bf00      	nop
 80158e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158e2:	bc08      	pop	{r3}
 80158e4:	469e      	mov	lr, r3
 80158e6:	4770      	bx	lr

080158e8 <_fini>:
 80158e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ea:	bf00      	nop
 80158ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158ee:	bc08      	pop	{r3}
 80158f0:	469e      	mov	lr, r3
 80158f2:	4770      	bx	lr
