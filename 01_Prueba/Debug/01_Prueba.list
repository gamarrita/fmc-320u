
01_Prueba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000155ec  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08015824  08015824  00025824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015cf8  08015cf8  00025cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015d00  08015d00  00025d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015d04  08015d04  00025d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001b8  20000000  08015d08  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001cf9  200001b8  08015ec0  000301b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000607  20001eb1  08015ec0  00031eb1  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041fd9  00000000  00000000  000301ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009260  00000000  00000000  000721c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002998  00000000  00000000  0007b428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000024a0  00000000  00000000  0007ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040abe  00000000  00000000  00080260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003fab8  00000000  00000000  000c0d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001785ef  00000000  00000000  001007d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00278dc5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a8a4  00000000  00000000  00278e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001b8 	.word	0x200001b8
 8000254:	00000000 	.word	0x00000000
 8000258:	0801580c 	.word	0x0801580c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001bc 	.word	0x200001bc
 8000274:	0801580c 	.word	0x0801580c

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f89f 	bl	800040c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	200016d0 	.word	0x200016d0
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a31      	ldr	r2, [pc, #196]	; (80003bc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c22      	ldr	r4, [pc, #136]	; (80003c8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c1b      	ldr	r4, [pc, #108]	; (80003c8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b949      	cbnz	r1, 80003a6 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000392:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000394:	f00e fa90 	bl	800e8b8 <tx_low_power_enter>
    POP     {r0-r3}
 8000398:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800039a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 800039c:	f00e fabc 	bl	800e918 <tx_low_power_exit>
    POP     {r0-r3}
 80003a0:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a4:	e7f1      	b.n	800038a <__tx_ts_wait>

080003a6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003aa:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003ae:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b4:	e7d0      	b.n	8000358 <__tx_ts_restore>
 80003b6:	bf00      	nop

080003b8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b8:	4770      	bx	lr
 80003ba:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003bc:	2000176c 	.word	0x2000176c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c0:	200016d4 	.word	0x200016d4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c4:	200016d8 	.word	0x200016d8
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c8:	20001cd8 	.word	0x20001cd8

080003cc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003cc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ce:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003da:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003dc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ea:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003ec:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ee:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fe:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000400:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000406:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000408:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr

0800040c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	4922      	ldr	r1, [pc, #136]	; (8000498 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000410:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000414:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000418:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041a:	b13a      	cbz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800041c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000420:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000422:	b91a      	cbnz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000426:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042a:	6018      	str	r0, [r3, #0]

0800042c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800042c:	491d      	ldr	r1, [pc, #116]	; (80004a4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000430:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000432:	b122      	cbz	r2, 800043e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000436:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800043c:	e008      	b.n	8000450 <__tx_timer_done>

0800043e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000444:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000446:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000448:	d101      	bne.n	800044e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800044c:	6818      	ldr	r0, [r3, #0]

0800044e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044e:	6008      	str	r0, [r1, #0]

08000450 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000452:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000454:	b912      	cbnz	r2, 800045c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000456:	4914      	ldr	r1, [pc, #80]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000458:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045a:	b1c8      	cbz	r0, 8000490 <__tx_timer_nothing_expired>

0800045c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800045c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045e:	4912      	ldr	r1, [pc, #72]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000462:	b108      	cbz	r0, 8000468 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000464:	f00d faea 	bl	800da3c <_tx_timer_expiration_process>

08000468 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800046c:	b172      	cbz	r2, 800048c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046e:	f00d f9c9 	bl	800d804 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000472:	4810      	ldr	r0, [pc, #64]	; (80004b4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000474:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000476:	b949      	cbnz	r1, 800048c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000486:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000488:	d000      	beq.n	800048c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048a:	6002      	str	r2, [r0, #0]

0800048c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800048c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000490 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000490:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000494:	4770      	bx	lr
 8000496:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000498:	20001778 	.word	0x20001778
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049c:	20001cd8 	.word	0x20001cd8
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a0:	2000177c 	.word	0x2000177c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a4:	20001808 	.word	0x20001808
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a8:	2000180c 	.word	0x2000180c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004ac:	20001804 	.word	0x20001804
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b0:	20001800 	.word	0x20001800
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b4:	2000176c 	.word	0x2000176c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b8:	200016d4 	.word	0x200016d4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004bc:	200016d8 	.word	0x200016d8
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c0:	e000ed04 	.word	0xe000ed04

080004c4 <strlen>:
 80004c4:	4603      	mov	r3, r0
 80004c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d1fb      	bne.n	80004c6 <strlen+0x2>
 80004ce:	1a18      	subs	r0, r3, r0
 80004d0:	3801      	subs	r0, #1
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_uldivmod>:
 80004d4:	b953      	cbnz	r3, 80004ec <__aeabi_uldivmod+0x18>
 80004d6:	b94a      	cbnz	r2, 80004ec <__aeabi_uldivmod+0x18>
 80004d8:	2900      	cmp	r1, #0
 80004da:	bf08      	it	eq
 80004dc:	2800      	cmpeq	r0, #0
 80004de:	bf1c      	itt	ne
 80004e0:	f04f 31ff 	movne.w	r1, #4294967295
 80004e4:	f04f 30ff 	movne.w	r0, #4294967295
 80004e8:	f000 b982 	b.w	80007f0 <__aeabi_idiv0>
 80004ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80004f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004f4:	f000 f806 	bl	8000504 <__udivmoddi4>
 80004f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000500:	b004      	add	sp, #16
 8000502:	4770      	bx	lr

08000504 <__udivmoddi4>:
 8000504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000508:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800050a:	4604      	mov	r4, r0
 800050c:	460f      	mov	r7, r1
 800050e:	2b00      	cmp	r3, #0
 8000510:	d148      	bne.n	80005a4 <__udivmoddi4+0xa0>
 8000512:	428a      	cmp	r2, r1
 8000514:	4694      	mov	ip, r2
 8000516:	d961      	bls.n	80005dc <__udivmoddi4+0xd8>
 8000518:	fab2 f382 	clz	r3, r2
 800051c:	b143      	cbz	r3, 8000530 <__udivmoddi4+0x2c>
 800051e:	f1c3 0120 	rsb	r1, r3, #32
 8000522:	409f      	lsls	r7, r3
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	409c      	lsls	r4, r3
 800052a:	fa20 f101 	lsr.w	r1, r0, r1
 800052e:	430f      	orrs	r7, r1
 8000530:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	0c22      	lsrs	r2, r4, #16
 800053a:	fbb7 f6f1 	udiv	r6, r7, r1
 800053e:	fb01 7716 	mls	r7, r1, r6, r7
 8000542:	fb06 f00e 	mul.w	r0, r6, lr
 8000546:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800054a:	4290      	cmp	r0, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x5c>
 800054e:	eb1c 0202 	adds.w	r2, ip, r2
 8000552:	f106 37ff 	add.w	r7, r6, #4294967295
 8000556:	d202      	bcs.n	800055e <__udivmoddi4+0x5a>
 8000558:	4290      	cmp	r0, r2
 800055a:	f200 8137 	bhi.w	80007cc <__udivmoddi4+0x2c8>
 800055e:	463e      	mov	r6, r7
 8000560:	1a12      	subs	r2, r2, r0
 8000562:	b2a4      	uxth	r4, r4
 8000564:	fbb2 f0f1 	udiv	r0, r2, r1
 8000568:	fb01 2210 	mls	r2, r1, r0, r2
 800056c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000570:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x86>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000580:	d202      	bcs.n	8000588 <__udivmoddi4+0x84>
 8000582:	45a6      	cmp	lr, r4
 8000584:	f200 811c 	bhi.w	80007c0 <__udivmoddi4+0x2bc>
 8000588:	4610      	mov	r0, r2
 800058a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800058e:	eba4 040e 	sub.w	r4, r4, lr
 8000592:	2600      	movs	r6, #0
 8000594:	b11d      	cbz	r5, 800059e <__udivmoddi4+0x9a>
 8000596:	40dc      	lsrs	r4, r3
 8000598:	2300      	movs	r3, #0
 800059a:	e9c5 4300 	strd	r4, r3, [r5]
 800059e:	4631      	mov	r1, r6
 80005a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d909      	bls.n	80005bc <__udivmoddi4+0xb8>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	f000 80fd 	beq.w	80007a8 <__udivmoddi4+0x2a4>
 80005ae:	2600      	movs	r6, #0
 80005b0:	e9c5 0100 	strd	r0, r1, [r5]
 80005b4:	4630      	mov	r0, r6
 80005b6:	4631      	mov	r1, r6
 80005b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005bc:	fab3 f683 	clz	r6, r3
 80005c0:	2e00      	cmp	r6, #0
 80005c2:	d14b      	bne.n	800065c <__udivmoddi4+0x158>
 80005c4:	428b      	cmp	r3, r1
 80005c6:	f0c0 80f2 	bcc.w	80007ae <__udivmoddi4+0x2aa>
 80005ca:	4282      	cmp	r2, r0
 80005cc:	f240 80ef 	bls.w	80007ae <__udivmoddi4+0x2aa>
 80005d0:	4630      	mov	r0, r6
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d0e3      	beq.n	800059e <__udivmoddi4+0x9a>
 80005d6:	e9c5 4700 	strd	r4, r7, [r5]
 80005da:	e7e0      	b.n	800059e <__udivmoddi4+0x9a>
 80005dc:	b902      	cbnz	r2, 80005e0 <__udivmoddi4+0xdc>
 80005de:	deff      	udf	#255	; 0xff
 80005e0:	fab2 f382 	clz	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f040 809d 	bne.w	8000724 <__udivmoddi4+0x220>
 80005ea:	1a89      	subs	r1, r1, r2
 80005ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005f0:	b297      	uxth	r7, r2
 80005f2:	2601      	movs	r6, #1
 80005f4:	0c20      	lsrs	r0, r4, #16
 80005f6:	fbb1 f2fe 	udiv	r2, r1, lr
 80005fa:	fb0e 1112 	mls	r1, lr, r2, r1
 80005fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000602:	fb07 f002 	mul.w	r0, r7, r2
 8000606:	4288      	cmp	r0, r1
 8000608:	d90f      	bls.n	800062a <__udivmoddi4+0x126>
 800060a:	eb1c 0101 	adds.w	r1, ip, r1
 800060e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000612:	bf2c      	ite	cs
 8000614:	f04f 0901 	movcs.w	r9, #1
 8000618:	f04f 0900 	movcc.w	r9, #0
 800061c:	4288      	cmp	r0, r1
 800061e:	d903      	bls.n	8000628 <__udivmoddi4+0x124>
 8000620:	f1b9 0f00 	cmp.w	r9, #0
 8000624:	f000 80cf 	beq.w	80007c6 <__udivmoddi4+0x2c2>
 8000628:	4642      	mov	r2, r8
 800062a:	1a09      	subs	r1, r1, r0
 800062c:	b2a4      	uxth	r4, r4
 800062e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000632:	fb0e 1110 	mls	r1, lr, r0, r1
 8000636:	fb00 f707 	mul.w	r7, r0, r7
 800063a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800063e:	42a7      	cmp	r7, r4
 8000640:	d908      	bls.n	8000654 <__udivmoddi4+0x150>
 8000642:	eb1c 0404 	adds.w	r4, ip, r4
 8000646:	f100 31ff 	add.w	r1, r0, #4294967295
 800064a:	d202      	bcs.n	8000652 <__udivmoddi4+0x14e>
 800064c:	42a7      	cmp	r7, r4
 800064e:	f200 80b4 	bhi.w	80007ba <__udivmoddi4+0x2b6>
 8000652:	4608      	mov	r0, r1
 8000654:	1be4      	subs	r4, r4, r7
 8000656:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800065a:	e79b      	b.n	8000594 <__udivmoddi4+0x90>
 800065c:	f1c6 0720 	rsb	r7, r6, #32
 8000660:	40b3      	lsls	r3, r6
 8000662:	fa01 f406 	lsl.w	r4, r1, r6
 8000666:	fa22 fc07 	lsr.w	ip, r2, r7
 800066a:	40f9      	lsrs	r1, r7
 800066c:	40b2      	lsls	r2, r6
 800066e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000672:	fa20 f307 	lsr.w	r3, r0, r7
 8000676:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800067a:	431c      	orrs	r4, r3
 800067c:	fa1f fe8c 	uxth.w	lr, ip
 8000680:	fa00 f306 	lsl.w	r3, r0, r6
 8000684:	0c20      	lsrs	r0, r4, #16
 8000686:	fbb1 f8f9 	udiv	r8, r1, r9
 800068a:	fb09 1118 	mls	r1, r9, r8, r1
 800068e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000692:	fb08 f00e 	mul.w	r0, r8, lr
 8000696:	4288      	cmp	r0, r1
 8000698:	d90f      	bls.n	80006ba <__udivmoddi4+0x1b6>
 800069a:	eb1c 0101 	adds.w	r1, ip, r1
 800069e:	f108 3aff 	add.w	sl, r8, #4294967295
 80006a2:	bf2c      	ite	cs
 80006a4:	f04f 0b01 	movcs.w	fp, #1
 80006a8:	f04f 0b00 	movcc.w	fp, #0
 80006ac:	4288      	cmp	r0, r1
 80006ae:	d903      	bls.n	80006b8 <__udivmoddi4+0x1b4>
 80006b0:	f1bb 0f00 	cmp.w	fp, #0
 80006b4:	f000 808d 	beq.w	80007d2 <__udivmoddi4+0x2ce>
 80006b8:	46d0      	mov	r8, sl
 80006ba:	1a09      	subs	r1, r1, r0
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	fbb1 f0f9 	udiv	r0, r1, r9
 80006c2:	fb09 1110 	mls	r1, r9, r0, r1
 80006c6:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ca:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006ce:	458e      	cmp	lr, r1
 80006d0:	d907      	bls.n	80006e2 <__udivmoddi4+0x1de>
 80006d2:	eb1c 0101 	adds.w	r1, ip, r1
 80006d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80006da:	d201      	bcs.n	80006e0 <__udivmoddi4+0x1dc>
 80006dc:	458e      	cmp	lr, r1
 80006de:	d87f      	bhi.n	80007e0 <__udivmoddi4+0x2dc>
 80006e0:	4620      	mov	r0, r4
 80006e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006e6:	eba1 010e 	sub.w	r1, r1, lr
 80006ea:	fba0 9802 	umull	r9, r8, r0, r2
 80006ee:	4541      	cmp	r1, r8
 80006f0:	464c      	mov	r4, r9
 80006f2:	46c6      	mov	lr, r8
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0x1f8>
 80006f6:	d106      	bne.n	8000706 <__udivmoddi4+0x202>
 80006f8:	454b      	cmp	r3, r9
 80006fa:	d204      	bcs.n	8000706 <__udivmoddi4+0x202>
 80006fc:	3801      	subs	r0, #1
 80006fe:	ebb9 0402 	subs.w	r4, r9, r2
 8000702:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000706:	2d00      	cmp	r5, #0
 8000708:	d070      	beq.n	80007ec <__udivmoddi4+0x2e8>
 800070a:	1b1a      	subs	r2, r3, r4
 800070c:	eb61 010e 	sbc.w	r1, r1, lr
 8000710:	fa22 f306 	lsr.w	r3, r2, r6
 8000714:	fa01 f707 	lsl.w	r7, r1, r7
 8000718:	40f1      	lsrs	r1, r6
 800071a:	2600      	movs	r6, #0
 800071c:	431f      	orrs	r7, r3
 800071e:	e9c5 7100 	strd	r7, r1, [r5]
 8000722:	e73c      	b.n	800059e <__udivmoddi4+0x9a>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0020 	rsb	r0, r3, #32
 800072c:	fa01 f203 	lsl.w	r2, r1, r3
 8000730:	fa21 f600 	lsr.w	r6, r1, r0
 8000734:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000738:	fa24 f100 	lsr.w	r1, r4, r0
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	409c      	lsls	r4, r3
 8000742:	4311      	orrs	r1, r2
 8000744:	fbb6 f0fe 	udiv	r0, r6, lr
 8000748:	0c0a      	lsrs	r2, r1, #16
 800074a:	fb0e 6610 	mls	r6, lr, r0, r6
 800074e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000752:	fb00 f607 	mul.w	r6, r0, r7
 8000756:	4296      	cmp	r6, r2
 8000758:	d90e      	bls.n	8000778 <__udivmoddi4+0x274>
 800075a:	eb1c 0202 	adds.w	r2, ip, r2
 800075e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000762:	bf2c      	ite	cs
 8000764:	f04f 0901 	movcs.w	r9, #1
 8000768:	f04f 0900 	movcc.w	r9, #0
 800076c:	4296      	cmp	r6, r2
 800076e:	d902      	bls.n	8000776 <__udivmoddi4+0x272>
 8000770:	f1b9 0f00 	cmp.w	r9, #0
 8000774:	d031      	beq.n	80007da <__udivmoddi4+0x2d6>
 8000776:	4640      	mov	r0, r8
 8000778:	1b92      	subs	r2, r2, r6
 800077a:	b289      	uxth	r1, r1
 800077c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000780:	fb0e 2216 	mls	r2, lr, r6, r2
 8000784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000788:	fb06 f207 	mul.w	r2, r6, r7
 800078c:	428a      	cmp	r2, r1
 800078e:	d907      	bls.n	80007a0 <__udivmoddi4+0x29c>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f106 38ff 	add.w	r8, r6, #4294967295
 8000798:	d201      	bcs.n	800079e <__udivmoddi4+0x29a>
 800079a:	428a      	cmp	r2, r1
 800079c:	d823      	bhi.n	80007e6 <__udivmoddi4+0x2e2>
 800079e:	4646      	mov	r6, r8
 80007a0:	1a89      	subs	r1, r1, r2
 80007a2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007a6:	e725      	b.n	80005f4 <__udivmoddi4+0xf0>
 80007a8:	462e      	mov	r6, r5
 80007aa:	4628      	mov	r0, r5
 80007ac:	e6f7      	b.n	800059e <__udivmoddi4+0x9a>
 80007ae:	1a84      	subs	r4, r0, r2
 80007b0:	eb61 0303 	sbc.w	r3, r1, r3
 80007b4:	2001      	movs	r0, #1
 80007b6:	461f      	mov	r7, r3
 80007b8:	e70b      	b.n	80005d2 <__udivmoddi4+0xce>
 80007ba:	4464      	add	r4, ip
 80007bc:	3802      	subs	r0, #2
 80007be:	e749      	b.n	8000654 <__udivmoddi4+0x150>
 80007c0:	4464      	add	r4, ip
 80007c2:	3802      	subs	r0, #2
 80007c4:	e6e1      	b.n	800058a <__udivmoddi4+0x86>
 80007c6:	3a02      	subs	r2, #2
 80007c8:	4461      	add	r1, ip
 80007ca:	e72e      	b.n	800062a <__udivmoddi4+0x126>
 80007cc:	3e02      	subs	r6, #2
 80007ce:	4462      	add	r2, ip
 80007d0:	e6c6      	b.n	8000560 <__udivmoddi4+0x5c>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4461      	add	r1, ip
 80007d8:	e76f      	b.n	80006ba <__udivmoddi4+0x1b6>
 80007da:	3802      	subs	r0, #2
 80007dc:	4462      	add	r2, ip
 80007de:	e7cb      	b.n	8000778 <__udivmoddi4+0x274>
 80007e0:	3802      	subs	r0, #2
 80007e2:	4461      	add	r1, ip
 80007e4:	e77d      	b.n	80006e2 <__udivmoddi4+0x1de>
 80007e6:	3e02      	subs	r6, #2
 80007e8:	4461      	add	r1, ip
 80007ea:	e7d9      	b.n	80007a0 <__udivmoddi4+0x29c>
 80007ec:	462e      	mov	r6, r5
 80007ee:	e6d6      	b.n	800059e <__udivmoddi4+0x9a>

080007f0 <__aeabi_idiv0>:
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000800:	2334      	movs	r3, #52	; 0x34
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <tx_application_define+0x40>)
 800080a:	490b      	ldr	r1, [pc, #44]	; (8000838 <tx_application_define+0x44>)
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <tx_application_define+0x48>)
 800080e:	f00d fc61 	bl	800e0d4 <_txe_byte_pool_create>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d109      	bne.n	800082c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <tx_application_define+0x48>)
 800081a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800081c:	68b8      	ldr	r0, [r7, #8]
 800081e:	f000 f80f 	bl	8000840 <App_ThreadX_Init>
 8000822:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800082a:	e7fe      	b.n	800082a <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200001d4 	.word	0x200001d4
 8000838:	08015824 	.word	0x08015824
 800083c:	200005d4 	.word	0x200005d4

08000840 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af08      	add	r7, sp, #32
 8000846:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&menu_task_ptr, "menu_task", menu_task_entry, 0x1234,
 800084c:	23b0      	movs	r3, #176	; 0xb0
 800084e:	9306      	str	r3, [sp, #24]
 8000850:	2301      	movs	r3, #1
 8000852:	9305      	str	r3, [sp, #20]
 8000854:	2301      	movs	r3, #1
 8000856:	9304      	str	r3, [sp, #16]
 8000858:	230f      	movs	r3, #15
 800085a:	9303      	str	r3, [sp, #12]
 800085c:	230f      	movs	r3, #15
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <App_ThreadX_Init+0x90>)
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	f241 2334 	movw	r3, #4660	; 0x1234
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <App_ThreadX_Init+0x94>)
 8000870:	4919      	ldr	r1, [pc, #100]	; (80008d8 <App_ThreadX_Init+0x98>)
 8000872:	481a      	ldr	r0, [pc, #104]	; (80008dc <App_ThreadX_Init+0x9c>)
 8000874:	f00d ff2e 	bl	800e6d4 <_txe_thread_create>
                  menu_task_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);

  tx_thread_create(&debounce_task_ptr, "debounce_task", debounce_task_entry,
 8000878:	23b0      	movs	r3, #176	; 0xb0
 800087a:	9306      	str	r3, [sp, #24]
 800087c:	2301      	movs	r3, #1
 800087e:	9305      	str	r3, [sp, #20]
 8000880:	2301      	movs	r3, #1
 8000882:	9304      	str	r3, [sp, #16]
 8000884:	230e      	movs	r3, #14
 8000886:	9303      	str	r3, [sp, #12]
 8000888:	230e      	movs	r3, #14
 800088a:	9302      	str	r3, [sp, #8]
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <App_ThreadX_Init+0xa0>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	f241 2334 	movw	r3, #4660	; 0x1234
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <App_ThreadX_Init+0xa4>)
 800089c:	4912      	ldr	r1, [pc, #72]	; (80008e8 <App_ThreadX_Init+0xa8>)
 800089e:	4813      	ldr	r0, [pc, #76]	; (80008ec <App_ThreadX_Init+0xac>)
 80008a0:	f00d ff18 	bl	800e6d4 <_txe_thread_create>
                  0x1234, debounce_task_stack, THREAD_STACK_SIZE, 14, 14, 1,
                  TX_AUTO_START);

  tx_semaphore_create(&debounce_semaphore_ptr, "debounce_semaphore", 0);
 80008a4:	231c      	movs	r3, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <App_ThreadX_Init+0xb0>)
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <App_ThreadX_Init+0xb4>)
 80008ac:	f00d fe3a 	bl	800e524 <_txe_semaphore_create>

  tx_queue_create(&event_queue_ptr, "event_queue", sizeof(fm_event_t),
 80008b0:	2338      	movs	r3, #56	; 0x38
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <App_ThreadX_Init+0xb8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	490f      	ldr	r1, [pc, #60]	; (80008fc <App_ThreadX_Init+0xbc>)
 80008c0:	480f      	ldr	r0, [pc, #60]	; (8000900 <App_ThreadX_Init+0xc0>)
 80008c2:	f00d fca7 	bl	800e214 <_txe_queue_create>
  #ifndef FM_THREADX_LOW_POWER
//      tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE, 30);
  #endif
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000060c 	.word	0x2000060c
 80008d4:	08000a05 	.word	0x08000a05
 80008d8:	08015838 	.word	0x08015838
 80008dc:	2000120c 	.word	0x2000120c
 80008e0:	20000a0c 	.word	0x20000a0c
 80008e4:	08000ab9 	.word	0x08000ab9
 80008e8:	08015844 	.word	0x08015844
 80008ec:	200012bc 	.word	0x200012bc
 80008f0:	08015854 	.word	0x08015854
 80008f4:	2000136c 	.word	0x2000136c
 80008f8:	20000e0c 	.word	0x20000e0c
 80008fc:	08015868 	.word	0x08015868
 8000900:	20001388 	.word	0x20001388

08000904 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000908:	f00a fe66 	bl	800b5d8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */
#ifdef FM_THREADX_LOW_POWER
  uint32_t ticks_to_sleep;

  g_lptim1_start = LPTIM1->CNT;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <App_ThreadX_LowPower_Timer_Setup+0x44>)
 800091a:	69db      	ldr	r3, [r3, #28]
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <App_ThreadX_LowPower_Timer_Setup+0x48>)
 8000920:	801a      	strh	r2, [r3, #0]
  /*
   * clock_freq/RTC_WAKEUPCLOCK_RTCCLK_DIV16
   */
  ticks_to_sleep = (32768 / 16) * count;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	02db      	lsls	r3, r3, #11
 8000926:	60fb      	str	r3, [r7, #12]
  ticks_to_sleep /= TX_TIMER_TICKS_PER_SECOND;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <App_ThreadX_LowPower_Timer_Setup+0x4c>)
 800092c:	fba2 2303 	umull	r2, r3, r2, r3
 8000930:	095b      	lsrs	r3, r3, #5
 8000932:	60fb      	str	r3, [r7, #12]

#ifdef FM_DEBUG_UART_TX_TIME_ON_IDLE
  fm_debug_uint32_uart(count);
#endif

  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks_to_sleep,
 8000934:	2300      	movs	r3, #0
 8000936:	2200      	movs	r2, #0
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	4809      	ldr	r0, [pc, #36]	; (8000960 <App_ThreadX_LowPower_Timer_Setup+0x50>)
 800093c:	f008 fdd6 	bl	80094ec <HAL_RTCEx_SetWakeUpTimer_IT>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <App_ThreadX_LowPower_Timer_Setup+0x3a>
      RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
  {
    Error_Handler();
 8000946:	f000 fcf7 	bl	8001338 <Error_Handler>
  }

#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	46004400 	.word	0x46004400
 8000958:	20000608 	.word	0x20000608
 800095c:	51eb851f 	.word	0x51eb851f
 8000960:	200014f4 	.word	0x200014f4

08000964 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2180      	movs	r1, #128	; 0x80
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <App_ThreadX_LowPower_Enter+0x18>)
 800096e:	f003 fd83 	bl	8004478 <HAL_GPIO_WritePin>


  #ifdef FM_THREADX_LOW_POWER
  HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 8000972:	2001      	movs	r0, #1
 8000974:	f004 fa1e 	bl	8004db4 <HAL_PWREx_EnterSTOP1Mode>
  #endif

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	42020400 	.word	0x42020400

08000980 <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /*
     * If CPU wakes up other reason but timer flag we must wait until
     * expected time was elapsed. Debugger issues makes wake up CPU earlier
     */
  #ifdef FM_THREADX_LOW_POWER
    SystemClock_Config();
 8000984:	f000 f90c 	bl	8000ba0 <SystemClock_Config>
  #endif

  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <App_ThreadX_LowPower_Exit+0x18>)
 800098e:	f003 fd73 	bl	8004478 <HAL_GPIO_WritePin>

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	42020400 	.word	0x42020400

0800099c <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Adjust */
#ifdef FM_THREADX_LOW_POWER
  static uint16_t cnt_drift = 0;
  ULONG cnt_ret;
  g_lptim1_end = LPTIM1->CNT;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <App_ThreadX_LowPower_Timer_Adjust+0x58>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 80009aa:	801a      	strh	r2, [r3, #0]
  cnt_ret = (g_lptim1_end - g_lptim1_start);
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <App_ThreadX_LowPower_Timer_Adjust+0x60>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	607b      	str	r3, [r7, #4]
  cnt_ret *= TX_TIMER_TICKS_PER_SECOND;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2264      	movs	r2, #100	; 0x64
 80009be:	fb02 f303 	mul.w	r3, r2, r3
 80009c2:	607b      	str	r3, [r7, #4]
  cnt_ret += cnt_drift;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	607b      	str	r3, [r7, #4]
  cnt_drift = cnt_ret % 2048; // 2048 = lptim_clok_frq /  clock_prescaler
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 80009dc:	801a      	strh	r2, [r3, #0]
  cnt_ret /= 2048;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	0adb      	lsrs	r3, r3, #11
 80009e2:	607b      	str	r3, [r7, #4]
  return (cnt_ret);
 80009e4:	687b      	ldr	r3, [r7, #4]
#else
  return (0);
#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	46004400 	.word	0x46004400
 80009f8:	2000060a 	.word	0x2000060a
 80009fc:	20000608 	.word	0x20000608
 8000a00:	200013c0 	.word	0x200013c0

08000a04 <menu_task_entry>:

/* USER CODE BEGIN 1 */
VOID menu_task_entry(ULONG initial_input)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    static int backlight_cd = 0;
    ptr_fun_menu_t ptr_menu = fm_menu_show_init;
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <menu_task_entry+0xa0>)
 8000a0e:	617b      	str	r3, [r7, #20]
    fm_event_t event_next = EVENT_LCD_REFRESH;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73fb      	strb	r3, [r7, #15]
    UINT ret_status;
    while(1)
    {
        ret_status = tx_queue_receive(&event_queue_ptr,&event_next,100);
 8000a14:	f107 030f 	add.w	r3, r7, #15
 8000a18:	2264      	movs	r2, #100	; 0x64
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <menu_task_entry+0xa4>)
 8000a1e:	f00d fcc7 	bl	800e3b0 <_txe_queue_receive>
 8000a22:	6138      	str	r0, [r7, #16]

        if(ptr_menu != fm_menu_show_init && ptr_menu != fm_menu_show_version)
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <menu_task_entry+0xa0>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d02d      	beq.n	8000a88 <menu_task_entry+0x84>
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	4a1f      	ldr	r2, [pc, #124]	; (8000aac <menu_task_entry+0xa8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d029      	beq.n	8000a88 <menu_task_entry+0x84>
        {
            if(event_next == EVENT_LCD_REFRESH && backlight_cd > 0)
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d109      	bne.n	8000a4e <menu_task_entry+0x4a>
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <menu_task_entry+0xac>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	dd05      	ble.n	8000a4e <menu_task_entry+0x4a>
            {
                backlight_cd--;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <menu_task_entry+0xac>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <menu_task_entry+0xac>)
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	e01c      	b.n	8000a88 <menu_task_entry+0x84>
            }
            else if(event_next == EVENT_LCD_REFRESH && backlight_cd <= 0)
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d10d      	bne.n	8000a70 <menu_task_entry+0x6c>
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <menu_task_entry+0xac>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	dc09      	bgt.n	8000a70 <menu_task_entry+0x6c>
            {
                HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a62:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <menu_task_entry+0xb0>)
 8000a64:	f003 fd08 	bl	8004478 <HAL_GPIO_WritePin>
                PCF8553_BACKLIGHT_Pin, GPIO_PIN_SET);
                backlight_cd = 0;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <menu_task_entry+0xac>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	e00b      	b.n	8000a88 <menu_task_entry+0x84>
            }
            else if(event_next != EVENT_LCD_REFRESH)
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d008      	beq.n	8000a88 <menu_task_entry+0x84>
            {
                HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <menu_task_entry+0xb0>)
 8000a7e:	f003 fcfb 	bl	8004478 <HAL_GPIO_WritePin>
                PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
                backlight_cd = 10;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <menu_task_entry+0xac>)
 8000a84:	220a      	movs	r2, #10
 8000a86:	601a      	str	r2, [r3, #0]
            }
        }

        if(ret_status == TX_SUCCESS)
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d105      	bne.n	8000a9a <menu_task_entry+0x96>
        {
            ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(event_next);
 8000a8e:	7bfa      	ldrb	r2, [r7, #15]
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	4610      	mov	r0, r2
 8000a94:	4798      	blx	r3
 8000a96:	6178      	str	r0, [r7, #20]
 8000a98:	e7bc      	b.n	8000a14 <menu_task_entry+0x10>
        }
        else
        {
            ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(EVENT_LCD_REFRESH);
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	4798      	blx	r3
 8000aa0:	6178      	str	r0, [r7, #20]
        ret_status = tx_queue_receive(&event_queue_ptr,&event_next,100);
 8000aa2:	e7b7      	b.n	8000a14 <menu_task_entry+0x10>
 8000aa4:	08014655 	.word	0x08014655
 8000aa8:	20001388 	.word	0x20001388
 8000aac:	08014891 	.word	0x08014891
 8000ab0:	200013c4 	.word	0x200013c4
 8000ab4:	42020800 	.word	0x42020800

08000ab8 <debounce_task_entry>:
        }
    }
}

VOID debounce_task_entry(ULONG initial_input)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    /*
     * debounce_time*10ms se espera para evitar rebotes.
     */
    const int debounce_time = 14;
 8000ac0:	230e      	movs	r3, #14
 8000ac2:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	4819      	ldr	r0, [pc, #100]	; (8000b30 <debounce_task_entry+0x78>)
 8000aca:	f00d fdc1 	bl	800e650 <_txe_semaphore_get>

        tx_thread_sleep(debounce_time);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f00c f9b1 	bl	800ce38 <_tx_thread_sleep>

        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <debounce_task_entry+0x7c>)
 8000ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <debounce_task_entry+0x7c>)
 8000ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae4:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <debounce_task_entry+0x7c>)
 8000ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <debounce_task_entry+0x7c>)
 8000af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af4:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <debounce_task_entry+0x7c>)
 8000af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <debounce_task_entry+0x7c>)
 8000b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b04:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <debounce_task_entry+0x7c>)
 8000b08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <debounce_task_entry+0x7c>)
 8000b10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b14:	611a      	str	r2, [r3, #16]

        HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000b16:	2015      	movs	r0, #21
 8000b18:	f003 faba 	bl	8004090 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000b1c:	2016      	movs	r0, #22
 8000b1e:	f003 fab7 	bl	8004090 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8000b22:	2017      	movs	r0, #23
 8000b24:	f003 fab4 	bl	8004090 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b28:	2018      	movs	r0, #24
 8000b2a:	f003 fab1 	bl	8004090 <HAL_NVIC_EnableIRQ>
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);
 8000b2e:	e7c9      	b.n	8000ac4 <debounce_task_entry+0xc>
 8000b30:	2000136c 	.word	0x2000136c
 8000b34:	46022000 	.word	0x46022000

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f000 ff76 	bl	8001a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f82e 	bl	8000ba0 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000b44:	f000 f884 	bl	8000c50 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f000 faea 	bl	8001120 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000b4c:	f000 f900 	bl	8000d50 <MX_ICACHE_Init>
  MX_LPTIM1_Init();
 8000b50:	f000 f912 	bl	8000d78 <MX_LPTIM1_Init>
  MX_RTC_Init();
 8000b54:	f000 f99a 	bl	8000e8c <MX_RTC_Init>
  MX_SPI1_Init();
 8000b58:	f000 fa26 	bl	8000fa8 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000b5c:	f000 f88a 	bl	8000c74 <MX_ADC1_Init>
  MX_LPTIM4_Init();
 8000b60:	f000 f956 	bl	8000e10 <MX_LPTIM4_Init>
  MX_USART1_UART_Init();
 8000b64:	f000 fa90 	bl	8001088 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  fm_lcd_clear();
 8000b68:	f00e ff45 	bl	800f9f6 <fm_lcd_clear>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b70:	2100      	movs	r1, #0
 8000b72:	4808      	ldr	r0, [pc, #32]	; (8000b94 <main+0x5c>)
 8000b74:	f003 f846 	bl	8003c04 <HAL_ADCEx_Calibration_Start>
  __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <main+0x60>)
 8000b7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b7e:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <main+0x60>)
 8000b80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  HAL_LPTIM_Counter_Start(&hlptim1);
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <main+0x64>)
 8000b8a:	f003 fdef 	bl	800476c <HAL_LPTIM_Counter_Start>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000b8e:	f7ff feb9 	bl	8000904 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <main+0x5a>
 8000b94:	200013c8 	.word	0x200013c8
 8000b98:	46020c00 	.word	0x46020c00
 8000b9c:	20001454 	.word	0x20001454

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b09e      	sub	sp, #120	; 0x78
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0318 	add.w	r3, r7, #24
 8000baa:	2260      	movs	r2, #96	; 0x60
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f014 f8e6 	bl	8014d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
 8000bc2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8000bc4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000bc8:	f004 f818 	bl	8004bfc <HAL_PWREx_ControlVoltageScaling>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000bd2:	f000 fbb1 	bl	8001338 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bd6:	f004 f801 	bl	8004bdc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <SystemClock_Config+0xac>)
 8000bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000be0:	4a1a      	ldr	r2, [pc, #104]	; (8000c4c <SystemClock_Config+0xac>)
 8000be2:	f023 0318 	bic.w	r3, r3, #24
 8000be6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000bea:	2314      	movs	r3, #20
 8000bec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bee:	2381      	movs	r3, #129	; 0x81
 8000bf0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	f107 0318 	add.w	r3, r7, #24
 8000c06:	4618      	mov	r0, r3
 8000c08:	f004 f930 	bl	8004e6c <HAL_RCC_OscConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000c12:	f000 fb91 	bl	8001338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	231f      	movs	r3, #31
 8000c18:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c1e:	2308      	movs	r3, #8
 8000c20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c2e:	463b      	mov	r3, r7
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f004 fff6 	bl	8005c24 <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000c3e:	f000 fb7b 	bl	8001338 <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	3778      	adds	r7, #120	; 0x78
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	46020c00 	.word	0x46020c00

08000c50 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000c54:	f004 f8da 	bl	8004e0c <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c58:	f004 f8f8 	bl	8004e4c <HAL_PWREx_DisableUCPDDeadBattery>
/* USER CODE BEGIN PWR */
  HAL_PWREx_EnableVddIO2();
 8000c5c:	f004 f8d6 	bl	8004e0c <HAL_PWREx_EnableVddIO2>

  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000c60:	2002      	movs	r0, #2
 8000c62:	f004 f857 	bl	8004d14 <HAL_PWREx_ConfigSupply>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemPower_Config+0x20>
  {
      Error_Handler();
 8000c6c:	f000 fb64 	bl	8001338 <Error_Handler>
  }
/* USER CODE END PWR */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f014 f87d 	bl	8014d80 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c86:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000c88:	4a2f      	ldr	r2, [pc, #188]	; (8000d48 <MX_ADC1_Init+0xd4>)
 8000c8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000c8e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000c96:	2204      	movs	r2, #4
 8000c98:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000c9a:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca0:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca6:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000ca8:	2204      	movs	r2, #4
 8000caa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cac:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cfc:	4811      	ldr	r0, [pc, #68]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cfe:	f001 fa79 	bl	80021f4 <HAL_ADC_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000d08:	f000 fb16 	bl	8001338 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_ADC1_Init+0xd8>)
 8000d0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d10:	2306      	movs	r3, #6
 8000d12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_391CYCLES_5;
 8000d14:	2306      	movs	r3, #6
 8000d16:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000d2c:	f001 fec8 	bl	8002ac0 <HAL_ADC_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000d36:	f000 faff 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200013c8 	.word	0x200013c8
 8000d48:	42028000 	.word	0x42028000
 8000d4c:	ce080000 	.word	0xce080000

08000d50 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000d54:	2000      	movs	r0, #0
 8000d56:	f003 fbd9 	bl	800450c <HAL_ICACHE_ConfigAssociativityMode>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000d60:	f000 faea 	bl	8001338 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000d64:	f003 fbf2 	bl	800454c <HAL_ICACHE_Enable>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000d6e:	f000 fae3 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <MX_LPTIM1_Init+0x8c>)
 8000d7e:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <MX_LPTIM1_Init+0x90>)
 8000d80:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <MX_LPTIM1_Init+0x8c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_LPTIM1_Init+0x8c>)
 8000d8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d8e:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_LPTIM1_Init+0x8c>)
 8000d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d96:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 65535;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_LPTIM1_Init+0x8c>)
 8000d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d9e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_LPTIM1_Init+0x8c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_LPTIM1_Init+0x8c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_LPTIM1_Init+0x8c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_LPTIM1_Init+0x8c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_LPTIM1_Init+0x8c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000dbe:	4811      	ldr	r0, [pc, #68]	; (8000e04 <MX_LPTIM1_Init+0x8c>)
 8000dc0:	f003 fbd4 	bl	800456c <HAL_LPTIM_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_LPTIM1_Init+0x56>
  {
    Error_Handler();
 8000dca:	f000 fab5 	bl	8001338 <Error_Handler>
  /*
   * To run in stop mode the LPBAM low-power backgroung autonomous mode must be
   * configured
   *
   */
  __HAL_RCC_LPTIM1_CLKAM_ENABLE();
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_LPTIM1_Init+0x94>)
 8000dd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <MX_LPTIM1_Init+0x94>)
 8000dd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dda:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  __HAL_RCC_LPDMA1_CLKAM_ENABLE();
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_LPTIM1_Init+0x94>)
 8000de0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de4:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <MX_LPTIM1_Init+0x94>)
 8000de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  __HAL_RCC_SRAM4_CLKAM_ENABLE();
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <MX_LPTIM1_Init+0x94>)
 8000df0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000df4:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <MX_LPTIM1_Init+0x94>)
 8000df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

  /* USER CODE END LPTIM1_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20001454 	.word	0x20001454
 8000e08:	46004400 	.word	0x46004400
 8000e0c:	46020c00 	.word	0x46020c00

08000e10 <MX_LPTIM4_Init>:
  * @brief LPTIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM4_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM4_Init 0 */

  /* USER CODE BEGIN LPTIM4_Init 1 */

  /* USER CODE END LPTIM4_Init 1 */
  hlptim4.Instance = LPTIM4;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <MX_LPTIM4_Init+0x78>)
 8000e18:	601a      	str	r2, [r3, #0]
  hlptim4.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	605a      	str	r2, [r3, #4]
  hlptim4.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  hlptim4.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  hlptim4.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  hlptim4.Init.Trigger.Source = LPTIM_TRIGSOURCE_0;
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
  hlptim4.Init.Trigger.ActiveEdge = LPTIM_ACTIVEEDGE_RISING;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e3e:	619a      	str	r2, [r3, #24]
  hlptim4.Init.Trigger.SampleTime = LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  hlptim4.Init.Period = 65535;
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e4c:	621a      	str	r2, [r3, #32]
  hlptim4.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim4.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e56:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim4.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim4.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim4.Init.RepetitionCounter = 0;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim4) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_LPTIM4_Init+0x74>)
 8000e70:	f003 fb7c 	bl	800456c <HAL_LPTIM_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_LPTIM4_Init+0x6e>
  {
    Error_Handler();
 8000e7a:	f000 fa5d 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM4_Init 2 */

  /* USER CODE END LPTIM4_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200014a4 	.word	0x200014a4
 8000e88:	46004c00 	.word	0x46004c00

08000e8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08e      	sub	sp, #56	; 0x38
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]
 8000ea2:	615a      	str	r2, [r3, #20]
 8000ea4:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000eba:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000ebc:	4a39      	ldr	r2, [pc, #228]	; (8000fa4 <MX_RTC_Init+0x118>)
 8000ebe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ec0:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ec6:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000ec8:	227f      	movs	r2, #127	; 0x7f
 8000eca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ecc:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000ece:	22ff      	movs	r2, #255	; 0xff
 8000ed0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ed8:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ee4:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000ee6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eea:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ef8:	4829      	ldr	r0, [pc, #164]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000efa:	f007 ffab 	bl	8008e54 <HAL_RTC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000f04:	f000 fa18 	bl	8001338 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4820      	ldr	r0, [pc, #128]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000f20:	f008 fbce 	bl	80096c0 <HAL_RTCEx_PrivilegeModeSet>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000f2a:	f000 fa05 	bl	8001338 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 8000f2e:	2311      	movs	r3, #17
 8000f30:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	2200      	movs	r2, #0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000f4c:	f008 f804 	bl	8008f58 <HAL_RTC_SetTime>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000f56:	f000 f9ef 	bl	8001338 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_MAY;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	717b      	strb	r3, [r7, #5]
  sDate.Date = 8;
 8000f62:	2308      	movs	r3, #8
 8000f64:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 23;
 8000f66:	2317      	movs	r3, #23
 8000f68:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000f72:	f008 f8ff 	bl	8009174 <HAL_RTC_SetDate>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000f7c:	f000 f9dc 	bl	8001338 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4096, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8000f80:	2300      	movs	r3, #0
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_RTC_Init+0x114>)
 8000f8a:	f008 faaf 	bl	80094ec <HAL_RTCEx_SetWakeUpTimer_IT>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8000f94:	f000 f9d0 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3738      	adds	r7, #56	; 0x38
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200014f4 	.word	0x200014f4
 8000fa4:	46007800 	.word	0x46007800

08000fa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <MX_SPI1_Init+0xd8>)
 8000fba:	4a32      	ldr	r2, [pc, #200]	; (8001084 <MX_SPI1_Init+0xdc>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fbe:	4b30      	ldr	r3, [pc, #192]	; (8001080 <MX_SPI1_Init+0xd8>)
 8000fc0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000fc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <MX_SPI1_Init+0xd8>)
 8000fc8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000fcc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fce:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <MX_SPI1_Init+0xd8>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <MX_SPI1_Init+0xd8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <MX_SPI1_Init+0xd8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <MX_SPI1_Init+0xd8>)
 8000fe2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fe6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <MX_SPI1_Init+0xd8>)
 8000fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff0:	4b23      	ldr	r3, [pc, #140]	; (8001080 <MX_SPI1_Init+0xd8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff6:	4b22      	ldr	r3, [pc, #136]	; (8001080 <MX_SPI1_Init+0xd8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ffc:	4b20      	ldr	r3, [pc, #128]	; (8001080 <MX_SPI1_Init+0xd8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_SPI1_Init+0xd8>)
 8001004:	2207      	movs	r2, #7
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <MX_SPI1_Init+0xd8>)
 800100a:	2200      	movs	r2, #0
 800100c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_SPI1_Init+0xd8>)
 8001010:	2200      	movs	r2, #0
 8001012:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_SPI1_Init+0xd8>)
 8001016:	2200      	movs	r2, #0
 8001018:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_SPI1_Init+0xd8>)
 800101c:	2200      	movs	r2, #0
 800101e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_SPI1_Init+0xd8>)
 8001022:	2200      	movs	r2, #0
 8001024:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_SPI1_Init+0xd8>)
 8001028:	2200      	movs	r2, #0
 800102a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_SPI1_Init+0xd8>)
 800102e:	2200      	movs	r2, #0
 8001030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_SPI1_Init+0xd8>)
 8001034:	2200      	movs	r2, #0
 8001036:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_SPI1_Init+0xd8>)
 800103a:	2200      	movs	r2, #0
 800103c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_SPI1_Init+0xd8>)
 8001040:	2200      	movs	r2, #0
 8001042:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001044:	480e      	ldr	r0, [pc, #56]	; (8001080 <MX_SPI1_Init+0xd8>)
 8001046:	f008 fb69 	bl	800971c <HAL_SPI_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8001050:	f000 f972 	bl	8001338 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001058:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800105c:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_SPI1_Init+0xd8>)
 8001068:	f008 ff75 	bl	8009f56 <HAL_SPIEx_SetConfigAutonomousMode>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8001072:	f000 f961 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20001524 	.word	0x20001524
 8001084:	40013000 	.word	0x40013000

08001088 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <MX_USART1_UART_Init+0x90>)
 800108e:	4a23      	ldr	r2, [pc, #140]	; (800111c <MX_USART1_UART_Init+0x94>)
 8001090:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_USART1_UART_Init+0x90>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_USART1_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <MX_USART1_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_USART1_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_USART1_UART_Init+0x90>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <MX_USART1_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_USART1_UART_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_USART1_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_USART1_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_USART1_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d0:	4811      	ldr	r0, [pc, #68]	; (8001118 <MX_USART1_UART_Init+0x90>)
 80010d2:	f009 fb6b 	bl	800a7ac <HAL_UART_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010dc:	f000 f92c 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	480d      	ldr	r0, [pc, #52]	; (8001118 <MX_USART1_UART_Init+0x90>)
 80010e4:	f00a f844 	bl	800b170 <HAL_UARTEx_SetTxFifoThreshold>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010ee:	f000 f923 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4808      	ldr	r0, [pc, #32]	; (8001118 <MX_USART1_UART_Init+0x90>)
 80010f6:	f00a f879 	bl	800b1ec <HAL_UARTEx_SetRxFifoThreshold>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001100:	f000 f91a 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_USART1_UART_Init+0x90>)
 8001106:	f009 fffa 	bl	800b0fe <HAL_UARTEx_DisableFifoMode>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001110:	f000 f912 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200015b4 	.word	0x200015b4
 800111c:	40013800 	.word	0x40013800

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	4b6b      	ldr	r3, [pc, #428]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 8001138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800113c:	4a69      	ldr	r2, [pc, #420]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001146:	4b67      	ldr	r3, [pc, #412]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 8001148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b63      	ldr	r3, [pc, #396]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 8001156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800115a:	4a62      	ldr	r2, [pc, #392]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001164:	4b5f      	ldr	r3, [pc, #380]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 8001166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001172:	4b5c      	ldr	r3, [pc, #368]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 8001174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001178:	4a5a      	ldr	r2, [pc, #360]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001182:	4b58      	ldr	r3, [pc, #352]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 8001184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001188:	f003 0320 	and.w	r3, r3, #32
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	4b54      	ldr	r3, [pc, #336]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 8001192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001196:	4a53      	ldr	r2, [pc, #332]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011a0:	4b50      	ldr	r3, [pc, #320]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 80011a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ae:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 80011b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011b4:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 80011b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011be:	4b49      	ldr	r3, [pc, #292]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 80011c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PCF8553_CE_Pin|PCF8553_RESET_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2150      	movs	r1, #80	; 0x50
 80011d0:	4845      	ldr	r0, [pc, #276]	; (80012e8 <MX_GPIO_Init+0x1c8>)
 80011d2:	f003 f951 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2104      	movs	r1, #4
 80011da:	4844      	ldr	r0, [pc, #272]	; (80012ec <MX_GPIO_Init+0x1cc>)
 80011dc:	f003 f94c 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port, PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e6:	4842      	ldr	r0, [pc, #264]	; (80012f0 <MX_GPIO_Init+0x1d0>)
 80011e8:	f003 f946 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	4840      	ldr	r0, [pc, #256]	; (80012f4 <MX_GPIO_Init+0x1d4>)
 80011f2:	f003 f941 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCF8553_CE_Pin PCF8553_RESET_Pin */
  GPIO_InitStruct.Pin = PCF8553_CE_Pin|PCF8553_RESET_Pin;
 80011f6:	2350      	movs	r3, #80	; 0x50
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4836      	ldr	r0, [pc, #216]	; (80012e8 <MX_GPIO_Init+0x1c8>)
 800120e:	f002 ff5b 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001212:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001218:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <MX_GPIO_Init+0x1d8>)
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4833      	ldr	r0, [pc, #204]	; (80012f4 <MX_GPIO_Init+0x1d4>)
 8001228:	f002 ff4e 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_red_Pin */
  GPIO_InitStruct.Pin = led_red_Pin;
 800122c:	2304      	movs	r3, #4
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_red_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	482a      	ldr	r0, [pc, #168]	; (80012ec <MX_GPIO_Init+0x1cc>)
 8001244:	f002 ff40 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PCF8553_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = PCF8553_BACKLIGHT_Pin;
 8001248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCF8553_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4823      	ldr	r0, [pc, #140]	; (80012f0 <MX_GPIO_Init+0x1d0>)
 8001262:	f002 ff31 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001266:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <MX_GPIO_Init+0x1d8>)
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	481d      	ldr	r0, [pc, #116]	; (80012f0 <MX_GPIO_Init+0x1d0>)
 800127c:	f002 ff24 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_blue_Pin */
  GPIO_InitStruct.Pin = led_blue_Pin;
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_blue_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4817      	ldr	r0, [pc, #92]	; (80012f4 <MX_GPIO_Init+0x1d4>)
 8001298:	f002 ff16 	bl	80040c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI10_IRQn, 5, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2105      	movs	r1, #5
 80012a0:	2015      	movs	r0, #21
 80012a2:	f002 fedb 	bl	800405c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 80012a6:	2015      	movs	r0, #21
 80012a8:	f002 fef2 	bl	8004090 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 5, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2105      	movs	r1, #5
 80012b0:	2016      	movs	r0, #22
 80012b2:	f002 fed3 	bl	800405c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 80012b6:	2016      	movs	r0, #22
 80012b8:	f002 feea 	bl	8004090 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI12_IRQn, 5, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2105      	movs	r1, #5
 80012c0:	2017      	movs	r0, #23
 80012c2:	f002 fecb 	bl	800405c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 80012c6:	2017      	movs	r0, #23
 80012c8:	f002 fee2 	bl	8004090 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2105      	movs	r1, #5
 80012d0:	2018      	movs	r0, #24
 80012d2:	f002 fec3 	bl	800405c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80012d6:	2018      	movs	r0, #24
 80012d8:	f002 feda 	bl	8004090 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	; 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	46020c00 	.word	0x46020c00
 80012e8:	42020000 	.word	0x42020000
 80012ec:	42021800 	.word	0x42021800
 80012f0:	42020800 	.word	0x42020800
 80012f4:	42020400 	.word	0x42020400
 80012f8:	10110000 	.word	0x10110000

080012fc <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */

__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f008 f969 	bl	80095dc <HAL_RTCEx_DeactivateWakeUpTimer>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001326:	f000 fbaf 	bl	8001a88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40001000 	.word	0x40001000

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2104      	movs	r1, #4
 8001344:	4801      	ldr	r0, [pc, #4]	; (800134c <Error_Handler+0x14>)
 8001346:	f003 f897 	bl	8004478 <HAL_GPIO_WritePin>
  while (1)
 800134a:	e7fe      	b.n	800134a <Error_Handler+0x12>
 800134c:	42021800 	.word	0x42021800

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_MspInit+0x30>)
 8001358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135c:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_MspInit+0x30>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_MspInit+0x30>)
 8001368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_PWREx_EnableVddA();
 8001374:	f003 fd5a 	bl	8004e2c <HAL_PWREx_EnableVddA>
  /* USER CODE END MspInit 1 */
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	46020c00 	.word	0x46020c00

08001384 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0b6      	sub	sp, #216	; 0xd8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	22c8      	movs	r2, #200	; 0xc8
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f013 fcf3 	bl	8014d80 <memset>
  if(hadc->Instance==ADC1)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <HAL_ADC_MspInit+0x70>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d122      	bne.n	80013ea <HAL_ADC_MspInit+0x66>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80013a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_SYSCLK;
 80013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 f83f 	bl	8006440 <HAL_RCCEx_PeriphCLKConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 80013c8:	f7ff ffb6 	bl	8001338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_ADC_MspInit+0x74>)
 80013ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d2:	4a09      	ldr	r2, [pc, #36]	; (80013f8 <HAL_ADC_MspInit+0x74>)
 80013d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_ADC_MspInit+0x74>)
 80013de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	37d8      	adds	r7, #216	; 0xd8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	42028000 	.word	0x42028000
 80013f8:	46020c00 	.word	0x46020c00

080013fc <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0be      	sub	sp, #248	; 0xf8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001414:	f107 0318 	add.w	r3, r7, #24
 8001418:	22c8      	movs	r2, #200	; 0xc8
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f013 fcaf 	bl	8014d80 <memset>
  if(hlptim->Instance==LPTIM1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a40      	ldr	r2, [pc, #256]	; (8001528 <HAL_LPTIM_MspInit+0x12c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d12b      	bne.n	8001484 <HAL_LPTIM_MspInit+0x88>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800142c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001438:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800143c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	4618      	mov	r0, r3
 8001446:	f004 fffb 	bl	8006440 <HAL_RCCEx_PeriphCLKConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_LPTIM_MspInit+0x58>
    {
      Error_Handler();
 8001450:	f7ff ff72 	bl	8001338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001454:	4b35      	ldr	r3, [pc, #212]	; (800152c <HAL_LPTIM_MspInit+0x130>)
 8001456:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800145a:	4a34      	ldr	r2, [pc, #208]	; (800152c <HAL_LPTIM_MspInit+0x130>)
 800145c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001460:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001464:	4b31      	ldr	r3, [pc, #196]	; (800152c <HAL_LPTIM_MspInit+0x130>)
 8001466:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800146a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697b      	ldr	r3, [r7, #20]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2043      	movs	r0, #67	; 0x43
 8001478:	f002 fdf0 	bl	800405c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800147c:	2043      	movs	r0, #67	; 0x43
 800147e:	f002 fe07 	bl	8004090 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM4_MspInit 1 */

  /* USER CODE END LPTIM4_MspInit 1 */
  }

}
 8001482:	e04c      	b.n	800151e <HAL_LPTIM_MspInit+0x122>
  else if(hlptim->Instance==LPTIM4)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a29      	ldr	r2, [pc, #164]	; (8001530 <HAL_LPTIM_MspInit+0x134>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d147      	bne.n	800151e <HAL_LPTIM_MspInit+0x122>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM34;
 800148e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Lptim34ClockSelection = RCC_LPTIM34CLKSOURCE_LSE;
 800149a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800149e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a2:	f107 0318 	add.w	r3, r7, #24
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 ffca 	bl	8006440 <HAL_RCCEx_PeriphCLKConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_LPTIM_MspInit+0xba>
      Error_Handler();
 80014b2:	f7ff ff41 	bl	8001338 <Error_Handler>
    __HAL_RCC_LPTIM4_CLK_ENABLE();
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_LPTIM_MspInit+0x130>)
 80014b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80014bc:	4a1b      	ldr	r2, [pc, #108]	; (800152c <HAL_LPTIM_MspInit+0x130>)
 80014be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014c2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_LPTIM_MspInit+0x130>)
 80014c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80014cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_LPTIM_MspInit+0x130>)
 80014d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014da:	4a14      	ldr	r2, [pc, #80]	; (800152c <HAL_LPTIM_MspInit+0x130>)
 80014dc:	f043 0320 	orr.w	r3, r3, #32
 80014e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_LPTIM_MspInit+0x130>)
 80014e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF13_LPTIM4;
 800150c:	230d      	movs	r3, #13
 800150e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001512:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001516:	4619      	mov	r1, r3
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <HAL_LPTIM_MspInit+0x138>)
 800151a:	f002 fdd5 	bl	80040c8 <HAL_GPIO_Init>
}
 800151e:	bf00      	nop
 8001520:	37f8      	adds	r7, #248	; 0xf8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	46004400 	.word	0x46004400
 800152c:	46020c00 	.word	0x46020c00
 8001530:	46004c00 	.word	0x46004c00
 8001534:	42021400 	.word	0x42021400

08001538 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0b6      	sub	sp, #216	; 0xd8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	22c8      	movs	r2, #200	; 0xc8
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f013 fc19 	bl	8014d80 <memset>
  if(hrtc->Instance==RTC)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a1d      	ldr	r2, [pc, #116]	; (80015c8 <HAL_RTC_MspInit+0x90>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d132      	bne.n	80015be <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001558:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001568:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	4618      	mov	r0, r3
 8001572:	f004 ff65 	bl	8006440 <HAL_RCCEx_PeriphCLKConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800157c:	f7ff fedc 	bl	8001338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_RTC_MspInit+0x94>)
 8001582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_RTC_MspInit+0x94>)
 8001588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800158c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_RTC_MspInit+0x94>)
 8001592:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001596:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <HAL_RTC_MspInit+0x94>)
 8001598:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800159c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_RTC_MspInit+0x94>)
 80015a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80015a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2002      	movs	r0, #2
 80015b4:	f002 fd52 	bl	800405c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80015b8:	2002      	movs	r0, #2
 80015ba:	f002 fd69 	bl	8004090 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	37d8      	adds	r7, #216	; 0xd8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	46007800 	.word	0x46007800
 80015cc:	46020c00 	.word	0x46020c00

080015d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0bc      	sub	sp, #240	; 0xf0
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	22c8      	movs	r2, #200	; 0xc8
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f013 fbc5 	bl	8014d80 <memset>
  if(hspi->Instance==SPI1)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a27      	ldr	r2, [pc, #156]	; (8001698 <HAL_SPI_MspInit+0xc8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d146      	bne.n	800168e <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001600:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 800160c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001610:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	4618      	mov	r0, r3
 800161a:	f004 ff11 	bl	8006440 <HAL_RCCEx_PeriphCLKConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001624:	f7ff fe88 	bl	8001338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <HAL_SPI_MspInit+0xcc>)
 800162a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800162e:	4a1b      	ldr	r2, [pc, #108]	; (800169c <HAL_SPI_MspInit+0xcc>)
 8001630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001634:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_SPI_MspInit+0xcc>)
 800163a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800163e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_SPI_MspInit+0xcc>)
 8001648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800164c:	4a13      	ldr	r2, [pc, #76]	; (800169c <HAL_SPI_MspInit+0xcc>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_SPI_MspInit+0xcc>)
 8001658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PCF8553_SCL_Pin|PCF8553_SDIO_Pin;
 8001664:	2382      	movs	r3, #130	; 0x82
 8001666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800167c:	2305      	movs	r3, #5
 800167e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <HAL_SPI_MspInit+0xd0>)
 800168a:	f002 fd1d 	bl	80040c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800168e:	bf00      	nop
 8001690:	37f0      	adds	r7, #240	; 0xf0
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40013000 	.word	0x40013000
 800169c:	46020c00 	.word	0x46020c00
 80016a0:	42020000 	.word	0x42020000

080016a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0bc      	sub	sp, #240	; 0xf0
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	22c8      	movs	r2, #200	; 0xc8
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f013 fb5b 	bl	8014d80 <memset>
  if(huart->Instance==USART1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a26      	ldr	r2, [pc, #152]	; (8001768 <HAL_UART_MspInit+0xc4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d145      	bne.n	8001760 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016d4:	f04f 0201 	mov.w	r2, #1
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016e0:	2300      	movs	r3, #0
 80016e2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	4618      	mov	r0, r3
 80016ea:	f004 fea9 	bl	8006440 <HAL_RCCEx_PeriphCLKConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80016f4:	f7ff fe20 	bl	8001338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <HAL_UART_MspInit+0xc8>)
 80016fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80016fe:	4a1b      	ldr	r2, [pc, #108]	; (800176c <HAL_UART_MspInit+0xc8>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001704:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_UART_MspInit+0xc8>)
 800170a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_UART_MspInit+0xc8>)
 8001718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800171c:	4a13      	ldr	r2, [pc, #76]	; (800176c <HAL_UART_MspInit+0xc8>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_UART_MspInit+0xc8>)
 8001728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001734:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001738:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800174e:	2307      	movs	r3, #7
 8001750:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001758:	4619      	mov	r1, r3
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <HAL_UART_MspInit+0xcc>)
 800175c:	f002 fcb4 	bl	80040c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001760:	bf00      	nop
 8001762:	37f0      	adds	r7, #240	; 0xf0
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40013800 	.word	0x40013800
 800176c:	46020c00 	.word	0x46020c00
 8001770:	42020000 	.word	0x42020000

08001774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08e      	sub	sp, #56	; 0x38
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001784:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <HAL_InitTick+0xcc>)
 8001786:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800178a:	4a2d      	ldr	r2, [pc, #180]	; (8001840 <HAL_InitTick+0xcc>)
 800178c:	f043 0310 	orr.w	r3, r3, #16
 8001790:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001794:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <HAL_InitTick+0xcc>)
 8001796:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a2:	f107 0210 	add.w	r2, r7, #16
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f004 fd89 	bl	80062c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017b2:	f004 fd4b 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 80017b6:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ba:	4a22      	ldr	r2, [pc, #136]	; (8001844 <HAL_InitTick+0xd0>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	0c9b      	lsrs	r3, r3, #18
 80017c2:	3b01      	subs	r3, #1
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <HAL_InitTick+0xd4>)
 80017c8:	4a20      	ldr	r2, [pc, #128]	; (800184c <HAL_InitTick+0xd8>)
 80017ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <HAL_InitTick+0xd4>)
 80017ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017d4:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <HAL_InitTick+0xd4>)
 80017d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_InitTick+0xd4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_InitTick+0xd4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80017e6:	4818      	ldr	r0, [pc, #96]	; (8001848 <HAL_InitTick+0xd4>)
 80017e8:	f008 fbf6 	bl	8009fd8 <HAL_TIM_Base_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80017f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d118      	bne.n	800182c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017fa:	4813      	ldr	r0, [pc, #76]	; (8001848 <HAL_InitTick+0xd4>)
 80017fc:	f008 fc4e 	bl	800a09c <HAL_TIM_Base_Start_IT>
 8001800:	4603      	mov	r3, r0
 8001802:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001806:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10e      	bne.n	800182c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d808      	bhi.n	8001826 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	2031      	movs	r0, #49	; 0x31
 800181a:	f002 fc1f 	bl	800405c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800181e:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <HAL_InitTick+0xdc>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e002      	b.n	800182c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800182c:	2031      	movs	r0, #49	; 0x31
 800182e:	f002 fc2f 	bl	8004090 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001832:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001836:	4618      	mov	r0, r3
 8001838:	3738      	adds	r7, #56	; 0x38
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	46020c00 	.word	0x46020c00
 8001844:	431bde83 	.word	0x431bde83
 8001848:	20001648 	.word	0x20001648
 800184c:	40001000 	.word	0x40001000
 8001850:	20000004 	.word	0x20000004

08001854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <NMI_Handler+0x4>

0800185a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <MemManage_Handler+0x4>

08001866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <BusFault_Handler+0x4>

0800186c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <UsageFault_Handler+0x4>

08001872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <RTC_IRQHandler+0x10>)
 8001886:	f007 ff01 	bl	800968c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200014f4 	.word	0x200014f4

08001894 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001898:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800189c:	f002 fe04 	bl	80044a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80018a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018ac:	f002 fdfc 	bl	80044a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <EXTI12_IRQHandler>:

/**
  * @brief This function handles EXTI Line12 interrupt.
  */
void EXTI12_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI12_IRQn 0 */

  /* USER CODE END EXTI12_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80018b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018bc:	f002 fdf4 	bl	80044a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI12_IRQn 1 */

  /* USER CODE END EXTI12_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018cc:	f002 fdec 	bl	80044a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <TIM6_IRQHandler+0x10>)
 80018da:	f008 fc7f 	bl	800a1dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20001648 	.word	0x20001648

080018e8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <LPTIM1_IRQHandler+0x10>)
 80018ee:	f002 ff71 	bl	80047d4 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20001454 	.word	0x20001454

080018fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <_sbrk+0x5c>)
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <_sbrk+0x60>)
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_sbrk+0x64>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_sbrk+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d207      	bcs.n	800193c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800192c:	f013 f9fe 	bl	8014d2c <__errno>
 8001930:	4603      	mov	r3, r0
 8001932:	220c      	movs	r2, #12
 8001934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e009      	b.n	8001950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200c0000 	.word	0x200c0000
 800195c:	00000400 	.word	0x00000400
 8001960:	20001694 	.word	0x20001694
 8001964:	20001eb8 	.word	0x20001eb8

08001968 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <SystemInit+0x68>)
 800196e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001972:	4a17      	ldr	r2, [pc, #92]	; (80019d0 <SystemInit+0x68>)
 8001974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <SystemInit+0x6c>)
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <SystemInit+0x6c>)
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <SystemInit+0x6c>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <SystemInit+0x6c>)
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <SystemInit+0x6c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <SystemInit+0x6c>)
 800199a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800199e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <SystemInit+0x6c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <SystemInit+0x6c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <SystemInit+0x6c>)
 80019b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <SystemInit+0x6c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <SystemInit+0x68>)
 80019be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019c2:	609a      	str	r2, [r3, #8]
  #endif
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00
 80019d4:	46020c00 	.word	0x46020c00

080019d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80019d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a10 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019dc:	f7ff ffc4 	bl	8001968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019e2:	e003      	b.n	80019ec <LoopCopyDataInit>

080019e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019ea:	3104      	adds	r1, #4

080019ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019ec:	480a      	ldr	r0, [pc, #40]	; (8001a18 <LoopForever+0xa>)
	ldr	r3, =_edata
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <LoopForever+0xe>)
	adds	r2, r0, r1
 80019f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019f4:	d3f6      	bcc.n	80019e4 <CopyDataInit>
	ldr	r2, =_sbss
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <LoopForever+0x12>)
	b	LoopFillZerobss
 80019f8:	e002      	b.n	8001a00 <LoopFillZerobss>

080019fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019fc:	f842 3b04 	str.w	r3, [r2], #4

08001a00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <LoopForever+0x16>)
	cmp	r2, r3
 8001a02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a04:	d3f9      	bcc.n	80019fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a06:	f013 f997 	bl	8014d38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a0a:	f7ff f895 	bl	8000b38 <main>

08001a0e <LoopForever>:

LoopForever:
    b LoopForever
 8001a0e:	e7fe      	b.n	8001a0e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001a10:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001a14:	08015d08 	.word	0x08015d08
	ldr	r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a1c:	200001b8 	.word	0x200001b8
	ldr	r2, =_sbss
 8001a20:	200001b8 	.word	0x200001b8
	ldr	r3, = _ebss
 8001a24:	20001eb1 	.word	0x20001eb1

08001a28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC1_IRQHandler>
	...

08001a2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_Init+0x4c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_Init+0x4c>)
 8001a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	f002 fb02 	bl	8004046 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001a42:	f004 fae1 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_Init+0x50>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	490b      	ldr	r1, [pc, #44]	; (8001a80 <HAL_Init+0x54>)
 8001a52:	5ccb      	ldrb	r3, [r1, r3]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_Init+0x58>)
 8001a5a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a5c:	200f      	movs	r0, #15
 8001a5e:	f7ff fe89 	bl	8001774 <HAL_InitTick>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e002      	b.n	8001a72 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fc70 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40022000 	.word	0x40022000
 8001a7c:	46020c00 	.word	0x46020c00
 8001a80:	08015a90 	.word	0x08015a90
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <HAL_IncTick+0x24>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	20001698 	.word	0x20001698

08001ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20001698 	.word	0x20001698

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffde 	bl	8001ab0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008

08001b10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <HAL_GetREVID+0x18>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0c1b      	lsrs	r3, r3, #16
 8001b1a:	b29b      	uxth	r3, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e0044000 	.word	0xe0044000

08001b2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	601a      	str	r2, [r3, #0]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	601a      	str	r2, [r3, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <LL_ADC_SetResolution+0x3c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d104      	bne.n	8001bb4 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f023 020c 	bic.w	r2, r3, #12
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	60da      	str	r2, [r3, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	46021000 	.word	0x46021000

08001bd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3360      	adds	r3, #96	; 0x60
 8001be6:	461a      	mov	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	430b      	orrs	r3, r1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3360      	adds	r3, #96	; 0x60
 8001c24:	461a      	mov	r2, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b087      	sub	sp, #28
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3360      	adds	r3, #96	; 0x60
 8001c52:	461a      	mov	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	601a      	str	r2, [r3, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3360      	adds	r3, #96	; 0x60
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	601a      	str	r2, [r3, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	371c      	adds	r7, #28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b087      	sub	sp, #28
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3360      	adds	r3, #96	; 0x60
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	601a      	str	r2, [r3, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001cf6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	2a00      	cmp	r2, #0
 8001d0e:	d002      	beq.n	8001d16 <LL_ADC_SetGainCompensation+0x32>
 8001d10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d14:	e000      	b.n	8001d18 <LL_ADC_SetGainCompensation+0x34>
 8001d16:	2200      	movs	r2, #0
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2107      	movs	r1, #7
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	401a      	ands	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	431a      	orrs	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a2b      	ldr	r2, [pc, #172]	; (8001e4c <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d020      	beq.n	8001de6 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3330      	adds	r3, #48	; 0x30
 8001da8:	461a      	mov	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	4413      	add	r3, r2
 8001db6:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	211f      	movs	r1, #31
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	401a      	ands	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	0e9b      	lsrs	r3, r3, #26
 8001dd0:	f003 011f 	and.w	r1, r3, #31
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	431a      	orrs	r2, r3
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001de4:	e02b      	b.n	8001e3e <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	210f      	movs	r1, #15
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	401a      	ands	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d104      	bne.n	8001e0e <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	0e9b      	lsrs	r3, r3, #26
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	e010      	b.n	8001e30 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 8001e24:	2320      	movs	r3, #32
 8001e26:	e003      	b.n	8001e30 <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	f001 011f 	and.w	r1, r1, #31
 8001e36:	408b      	lsls	r3, r1
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e3e:	bf00      	nop
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	46021000 	.word	0x46021000

08001e50 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d107      	bne.n	8001e74 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	0e9b      	lsrs	r3, r3, #26
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	e015      	b.n	8001ea0 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	60fb      	str	r3, [r7, #12]
  return result;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	e003      	b.n	8001e96 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eaa:	bf00      	nop
 8001eac:	371c      	adds	r7, #28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	0e9b      	lsrs	r3, r3, #26
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b08b      	sub	sp, #44	; 0x2c
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a2d      	ldr	r2, [pc, #180]	; (8001fac <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d042      	beq.n	8001f82 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d104      	bne.n	8001f10 <LL_ADC_SetChannelSamplingTime+0x28>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	0e9b      	lsrs	r3, r3, #26
 8001f0a:	f003 021f 	and.w	r2, r3, #31
 8001f0e:	e011      	b.n	8001f34 <LL_ADC_SetChannelSamplingTime+0x4c>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	617b      	str	r3, [r7, #20]
  return result;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001f26:	2320      	movs	r3, #32
 8001f28:	e003      	b.n	8001f32 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	0e5b      	lsrs	r3, r3, #25
 8001f38:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	1ad2      	subs	r2, r2, r3
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	3314      	adds	r3, #20
 8001f52:	461a      	mov	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	0e5b      	lsrs	r3, r3, #25
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	4413      	add	r3, r2
 8001f60:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2107      	movs	r1, #7
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	401a      	ands	r2, r3
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001f80:	e00e      	b.n	8001fa0 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	401a      	ands	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	0219      	lsls	r1, r3, #8
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	400b      	ands	r3, r1
 8001f96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	615a      	str	r2, [r3, #20]
}
 8001fa0:	bf00      	nop
 8001fa2:	372c      	adds	r7, #44	; 0x2c
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	46021000 	.word	0x46021000

08001fb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	401a      	ands	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0318 	and.w	r3, r3, #24
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fd4:	40d9      	lsrs	r1, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	400b      	ands	r3, r1
 8001fda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	000fffff 	.word	0x000fffff

08001ff8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002008:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6093      	str	r3, [r2, #8]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800202c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002030:	d101      	bne.n	8002036 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002058:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002080:	d101      	bne.n	8002086 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020a8:	f043 0201 	orr.w	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	609a      	str	r2, [r3, #8]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020d0:	f043 0202 	orr.w	r2, r3, #2
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <LL_ADC_IsEnabled+0x18>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <LL_ADC_IsEnabled+0x1a>
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b02      	cmp	r3, #2
 800211c:	d101      	bne.n	8002122 <LL_ADC_IsDisableOngoing+0x18>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <LL_ADC_IsDisableOngoing+0x1a>
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002140:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002144:	f043 0204 	orr.w	r2, r3, #4
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	609a      	str	r2, [r3, #8]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002168:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800216c:	f043 0210 	orr.w	r2, r3, #16
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b04      	cmp	r3, #4
 8002192:	d101      	bne.n	8002198 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021ba:	f043 0220 	orr.w	r2, r3, #32
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	609a      	str	r2, [r3, #8]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d101      	bne.n	80021e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e2b3      	b.n	800277c <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a8b      	ldr	r2, [pc, #556]	; (8002450 <HAL_ADC_Init+0x25c>)
 8002222:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002228:	2b00      	cmp	r3, #0
 800222a:	d109      	bne.n	8002240 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff f8a9 	bl	8001384 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fee9 	bl	800201c <LL_ADC_IsDeepPowerDownEnabled>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fecf 	bl	8001ff8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ff04 	bl	800206c <LL_ADC_IsInternalRegulatorEnabled>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d115      	bne.n	8002296 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fee8 	bl	8002044 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002274:	4b77      	ldr	r3, [pc, #476]	; (8002454 <HAL_ADC_Init+0x260>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	4a77      	ldr	r2, [pc, #476]	; (8002458 <HAL_ADC_Init+0x264>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	099b      	lsrs	r3, r3, #6
 8002282:	3301      	adds	r3, #1
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002288:	e002      	b.n	8002290 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3b01      	subs	r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f9      	bne.n	800228a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fee6 	bl	800206c <LL_ADC_IsInternalRegulatorEnabled>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10e      	bne.n	80022c4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022aa:	f043 0210 	orr.w	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff59 	bl	8002180 <LL_ADC_REG_IsConversionOngoing>
 80022ce:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f040 8244 	bne.w	8002766 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f040 8240 	bne.w	8002766 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ea:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022ee:	f043 0202 	orr.w	r2, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fef2 	bl	80020e4 <LL_ADC_IsEnabled>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d140      	bne.n	8002388 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a51      	ldr	r2, [pc, #324]	; (8002450 <HAL_ADC_Init+0x25c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d028      	beq.n	8002362 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a51      	ldr	r2, [pc, #324]	; (800245c <HAL_ADC_Init+0x268>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d109      	bne.n	800232e <HAL_ADC_Init+0x13a>
 800231a:	4850      	ldr	r0, [pc, #320]	; (800245c <HAL_ADC_Init+0x268>)
 800231c:	f7ff fee2 	bl	80020e4 <LL_ADC_IsEnabled>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	bf0c      	ite	eq
 8002326:	2301      	moveq	r3, #1
 8002328:	2300      	movne	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	e008      	b.n	8002340 <HAL_ADC_Init+0x14c>
 800232e:	4848      	ldr	r0, [pc, #288]	; (8002450 <HAL_ADC_Init+0x25c>)
 8002330:	f7ff fed8 	bl	80020e4 <LL_ADC_IsEnabled>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	bf0c      	ite	eq
 800233a:	2301      	moveq	r3, #1
 800233c:	2300      	movne	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d021      	beq.n	8002388 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a44      	ldr	r2, [pc, #272]	; (800245c <HAL_ADC_Init+0x268>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Init+0x15e>
 800234e:	4a44      	ldr	r2, [pc, #272]	; (8002460 <HAL_ADC_Init+0x26c>)
 8002350:	e000      	b.n	8002354 <HAL_ADC_Init+0x160>
 8002352:	4a44      	ldr	r2, [pc, #272]	; (8002464 <HAL_ADC_Init+0x270>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4619      	mov	r1, r3
 800235a:	4610      	mov	r0, r2
 800235c:	f7ff fbe6 	bl	8001b2c <LL_ADC_SetCommonClock>
 8002360:	e012      	b.n	8002388 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	4619      	mov	r1, r3
 800236c:	4610      	mov	r0, r2
 800236e:	f7ff fc11 	bl	8001b94 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002372:	4b3c      	ldr	r3, [pc, #240]	; (8002464 <HAL_ADC_Init+0x270>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002382:	4938      	ldr	r1, [pc, #224]	; (8002464 <HAL_ADC_Init+0x270>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a30      	ldr	r2, [pc, #192]	; (8002450 <HAL_ADC_Init+0x25c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d010      	beq.n	80023b4 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002398:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800239e:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80023a4:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80023ac:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80023ae:	4313      	orrs	r3, r2
 80023b0:	623b      	str	r3, [r7, #32]
 80023b2:	e030      	b.n	8002416 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7f1b      	ldrb	r3, [r3, #28]
 80023b8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023c0:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023c2:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023c8:	2a00      	cmp	r2, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_ADC_Init+0x1de>
 80023cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023d0:	e000      	b.n	80023d4 <HAL_ADC_Init+0x1e0>
 80023d2:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80023d4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80023da:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	da04      	bge.n	80023ee <HAL_ADC_Init+0x1fa>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023ec:	e001      	b.n	80023f2 <HAL_ADC_Init+0x1fe>
 80023ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 80023f2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4918      	ldr	r1, [pc, #96]	; (800245c <HAL_ADC_Init+0x268>)
 80023fa:	428b      	cmp	r3, r1
 80023fc:	d103      	bne.n	8002406 <HAL_ADC_Init+0x212>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002404:	e003      	b.n	800240e <HAL_ADC_Init+0x21a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800240c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800240e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002410:	6a3a      	ldr	r2, [r7, #32]
 8002412:	4313      	orrs	r3, r2
 8002414:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800241c:	2b01      	cmp	r3, #1
 800241e:	d12f      	bne.n	8002480 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <HAL_ADC_Init+0x25c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d007      	beq.n	800243a <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	3b01      	subs	r3, #1
 8002430:	045b      	lsls	r3, r3, #17
 8002432:	6a3a      	ldr	r2, [r7, #32]
 8002434:	4313      	orrs	r3, r2
 8002436:	623b      	str	r3, [r7, #32]
 8002438:	e022      	b.n	8002480 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002440:	2b00      	cmp	r3, #0
 8002442:	d111      	bne.n	8002468 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244a:	623b      	str	r3, [r7, #32]
 800244c:	e018      	b.n	8002480 <HAL_ADC_Init+0x28c>
 800244e:	bf00      	nop
 8002450:	46021000 	.word	0x46021000
 8002454:	20000000 	.word	0x20000000
 8002458:	053e2d63 	.word	0x053e2d63
 800245c:	42028000 	.word	0x42028000
 8002460:	42028308 	.word	0x42028308
 8002464:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800246c:	f043 0220 	orr.w	r2, r3, #32
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002478:	f043 0201 	orr.w	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a92      	ldr	r2, [pc, #584]	; (80026d0 <HAL_ADC_Init+0x4dc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d018      	beq.n	80024bc <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002496:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	4313      	orrs	r3, r2
 80024a0:	6a3a      	ldr	r2, [r7, #32]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	4b89      	ldr	r3, [pc, #548]	; (80026d4 <HAL_ADC_Init+0x4e0>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	6a39      	ldr	r1, [r7, #32]
 80024b6:	430b      	orrs	r3, r1
 80024b8:	60d3      	str	r3, [r2, #12]
 80024ba:	e031      	b.n	8002520 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c8:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	4313      	orrs	r3, r2
 80024d2:	6a3a      	ldr	r2, [r7, #32]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	4b7e      	ldr	r3, [pc, #504]	; (80026d8 <HAL_ADC_Init+0x4e4>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	6a39      	ldr	r1, [r7, #32]
 80024e8:	430b      	orrs	r3, r1
 80024ea:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1a      	ldr	r2, [r3, #32]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a6a      	ldr	r2, [pc, #424]	; (80026d0 <HAL_ADC_Init+0x4dc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	f000 8093 	beq.w	8002652 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fe25 	bl	8002180 <LL_ADC_REG_IsConversionOngoing>
 8002536:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fe46 	bl	80021ce <LL_ADC_INJ_IsConversionOngoing>
 8002542:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d161      	bne.n	800260e <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d15e      	bne.n	800260e <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7f1b      	ldrb	r3, [r3, #28]
 8002554:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4960      	ldr	r1, [pc, #384]	; (80026dc <HAL_ADC_Init+0x4e8>)
 800255c:	428b      	cmp	r3, r1
 800255e:	d102      	bne.n	8002566 <HAL_ADC_Init+0x372>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002564:	e002      	b.n	800256c <HAL_ADC_Init+0x378>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800256c:	4313      	orrs	r3, r2
 800256e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	6a39      	ldr	r1, [r7, #32]
 8002584:	430b      	orrs	r3, r1
 8002586:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4619      	mov	r1, r3
 800259a:	4610      	mov	r0, r2
 800259c:	f7ff fba2 	bl	8001ce4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d11e      	bne.n	80025e8 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ae:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	4b4a      	ldr	r3, [pc, #296]	; (80026e0 <HAL_ADC_Init+0x4ec>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80025be:	0411      	lsls	r1, r2, #16
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025c4:	4311      	orrs	r1, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80025ca:	4311      	orrs	r1, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80025d0:	4311      	orrs	r1, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025d6:	0892      	lsrs	r2, r2, #2
 80025d8:	430a      	orrs	r2, r1
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	611a      	str	r2, [r3, #16]
 80025e6:	e007      	b.n	80025f8 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d10c      	bne.n	8002630 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	f023 010f 	bic.w	r1, r3, #15
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	1e5a      	subs	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	631a      	str	r2, [r3, #48]	; 0x30
 800262e:	e007      	b.n	8002640 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 020f 	bic.w	r2, r2, #15
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002644:	f023 0303 	bic.w	r3, r3, #3
 8002648:	f043 0201 	orr.w	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002650:	e092      	b.n	8002778 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002658:	2b01      	cmp	r3, #1
 800265a:	d111      	bne.n	8002680 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002664:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 800266a:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002670:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	4313      	orrs	r3, r2
 8002676:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <HAL_ADC_Init+0x4f0>)
 8002688:	4013      	ands	r3, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	69f9      	ldr	r1, [r7, #28]
 8002690:	430b      	orrs	r3, r1
 8002692:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	461a      	mov	r2, r3
 800269e:	2100      	movs	r1, #0
 80026a0:	f7ff fb43 	bl	8001d2a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ac:	461a      	mov	r2, r3
 80026ae:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 80026b2:	f7ff fb3a 	bl	8001d2a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d114      	bne.n	80026e8 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f062 020f 	orn	r2, r2, #15
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28
 80026ce:	e024      	b.n	800271a <HAL_ADC_Init+0x526>
 80026d0:	46021000 	.word	0x46021000
 80026d4:	fff0c013 	.word	0xfff0c013
 80026d8:	ffde800d 	.word	0xffde800d
 80026dc:	42028000 	.word	0x42028000
 80026e0:	fc00f81e 	.word	0xfc00f81e
 80026e4:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026f0:	d113      	bne.n	800271a <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	3b01      	subs	r3, #1
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	f003 031c 	and.w	r3, r3, #28
 8002704:	f06f 020f 	mvn.w	r2, #15
 8002708:	fa02 f103 	lsl.w	r1, r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	4b18      	ldr	r3, [pc, #96]	; (8002784 <HAL_ADC_Init+0x590>)
 8002722:	4013      	ands	r3, r2
 8002724:	6a3a      	ldr	r2, [r7, #32]
 8002726:	429a      	cmp	r2, r3
 8002728:	d10b      	bne.n	8002742 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002734:	f023 0303 	bic.w	r3, r3, #3
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002740:	e01a      	b.n	8002778 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002746:	f023 0312 	bic.w	r3, r3, #18
 800274a:	f043 0210 	orr.w	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002764:	e008      	b.n	8002778 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800276a:	f043 0210 	orr.w	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800277c:	4618      	mov	r0, r3
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	833ffff3 	.word	0x833ffff3

08002788 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fcf3 	bl	8002180 <LL_ADC_REG_IsConversionOngoing>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d15d      	bne.n	800285c <HAL_ADC_Start+0xd4>
  {
    __HAL_LOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_Start+0x26>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e059      	b.n	8002862 <HAL_ADC_Start+0xda>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f001 f916 	bl	80039e8 <ADC_Enable>
 80027bc:	4603      	mov	r3, r0
 80027be:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d145      	bne.n	8002852 <HAL_ADC_Start+0xca>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a23      	ldr	r2, [pc, #140]	; (800286c <HAL_ADC_Start+0xe4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d011      	beq.n	8002808 <HAL_ADC_Start+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f0:	d106      	bne.n	8002800 <HAL_ADC_Start+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027f6:	f023 0206 	bic.w	r2, r3, #6
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	67da      	str	r2, [r3, #124]	; 0x7c
 80027fe:	e006      	b.n	800280e <HAL_ADC_Start+0x86>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	67da      	str	r2, [r3, #124]	; 0x7c
 8002806:	e002      	b.n	800280e <HAL_ADC_Start+0x86>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	221c      	movs	r2, #28
 8002814:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a12      	ldr	r2, [pc, #72]	; (800286c <HAL_ADC_Start+0xe4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00e      	beq.n	8002846 <HAL_ADC_Start+0xbe>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }

        }
#else
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <HAL_ADC_Start+0xbe>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800283a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800283e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fc70 	bl	8002130 <LL_ADC_REG_StartConversion>
 8002850:	e006      	b.n	8002860 <HAL_ADC_Start+0xd8>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800285a:	e001      	b.n	8002860 <HAL_ADC_Start+0xd8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800285c:	2302      	movs	r3, #2
 800285e:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	46021000 	.word	0x46021000

08002870 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_ADC_Stop+0x16>
 8002882:	2302      	movs	r3, #2
 8002884:	e023      	b.n	80028ce <HAL_ADC_Stop+0x5e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800288e:	2103      	movs	r1, #3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 ffed 	bl	8003870 <ADC_ConversionStop>
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f001 f911 	bl	8003ac8 <ADC_Disable>
 80028a6:	4603      	mov	r3, r0
 80028a8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d102      	bne.n	80028f0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80028ea:	2308      	movs	r3, #8
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	e027      	b.n	8002940 <HAL_ADC_PollForConversion+0x68>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a6a      	ldr	r2, [pc, #424]	; (8002aa0 <HAL_ADC_PollForConversion+0x1c8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d011      	beq.n	800291e <HAL_ADC_PollForConversion+0x46>
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <HAL_ADC_PollForConversion+0x40>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800290c:	f043 0220 	orr.w	r2, r3, #32
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0be      	b.n	8002a96 <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8002918:	2304      	movs	r3, #4
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	e010      	b.n	8002940 <HAL_ADC_PollForConversion+0x68>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <HAL_ADC_PollForConversion+0x64>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0ac      	b.n	8002a96 <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 800293c:	2304      	movs	r3, #4
 800293e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002940:	f7ff f8b6 	bl	8001ab0 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002946:	e021      	b.n	800298c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294e:	d01d      	beq.n	800298c <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002950:	f7ff f8ae 	bl	8001ab0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d302      	bcc.n	8002966 <HAL_ADC_PollForConversion+0x8e>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d112      	bne.n	800298c <HAL_ADC_PollForConversion+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10b      	bne.n	800298c <HAL_ADC_PollForConversion+0xb4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002978:	f043 0204 	orr.w	r2, r3, #4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e084      	b.n	8002a96 <HAL_ADC_PollForConversion+0x1be>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0d6      	beq.n	8002948 <HAL_ADC_PollForConversion+0x70>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800299e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff f9dc 	bl	8001d68 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d06e      	beq.n	8002a94 <HAL_ADC_PollForConversion+0x1bc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d169      	bne.n	8002a94 <HAL_ADC_PollForConversion+0x1bc>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a36      	ldr	r2, [pc, #216]	; (8002aa0 <HAL_ADC_PollForConversion+0x1c8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d02e      	beq.n	8002a28 <HAL_ADC_PollForConversion+0x150>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d111      	bne.n	80029fc <HAL_ADC_PollForConversion+0x124>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <HAL_ADC_PollForConversion+0x124>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f4:	f043 0201 	orr.w	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	679a      	str	r2, [r3, #120]	; 0x78
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d104      	bne.n	8002a14 <HAL_ADC_PollForConversion+0x13c>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2208      	movs	r2, #8
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	e03f      	b.n	8002a94 <HAL_ADC_PollForConversion+0x1bc>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d13a      	bne.n	8002a94 <HAL_ADC_PollForConversion+0x1bc>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	220c      	movs	r2, #12
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	e035      	b.n	8002a94 <HAL_ADC_PollForConversion+0x1bc>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d126      	bne.n	8002a84 <HAL_ADC_PollForConversion+0x1ac>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fba0 	bl	8002180 <LL_ADC_REG_IsConversionOngoing>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d112      	bne.n	8002a6c <HAL_ADC_PollForConversion+0x194>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 020c 	bic.w	r2, r2, #12
 8002a54:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	679a      	str	r2, [r3, #120]	; 0x78
 8002a6a:	e00b      	b.n	8002a84 <HAL_ADC_PollForConversion+0x1ac>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a70:	f043 0220 	orr.w	r2, r3, #32
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	7f1b      	ldrb	r3, [r3, #28]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <HAL_ADC_PollForConversion+0x1bc>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	220c      	movs	r2, #12
 8002a92:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	46021000 	.word	0x46021000

08002aa4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b0bc      	sub	sp, #240	; 0xf0
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4aa8      	ldr	r2, [pc, #672]	; (8002d7c <HAL_ADC_ConfigChannel+0x2bc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d103      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d102      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x36>
 8002af0:	2302      	movs	r3, #2
 8002af2:	f000 beb5 	b.w	8003860 <HAL_ADC_ConfigChannel+0xda0>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fb3c 	bl	8002180 <LL_ADC_REG_IsConversionOngoing>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 8695 	bne.w	800383a <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a99      	ldr	r2, [pc, #612]	; (8002d7c <HAL_ADC_ConfigChannel+0x2bc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	f000 83ea 	beq.w	80032f0 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d108      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x7a>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0e9b      	lsrs	r3, r3, #26
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	2201      	movs	r2, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	e01d      	b.n	8002b76 <HAL_ADC_ConfigChannel+0xb6>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return result;
 8002b4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (value == 0U)
 8002b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002b5e:	2320      	movs	r3, #32
 8002b60:	e004      	b.n	8002b6c <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	2201      	movs	r2, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	69d1      	ldr	r1, [r2, #28]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	430b      	orrs	r3, r1
 8002b82:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	f7ff f8fd 	bl	8001d90 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff faf0 	bl	8002180 <LL_ADC_REG_IsConversionOngoing>
 8002ba0:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fb10 	bl	80021ce <LL_ADC_INJ_IsConversionOngoing>
 8002bae:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f040 81ed 	bne.w	8002f96 <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f040 81e8 	bne.w	8002f96 <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6819      	ldr	r1, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f7ff f988 	bl	8001ee8 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d046      	beq.n	8002c88 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6919      	ldr	r1, [r3, #16]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c0a:	f7fe ffe3 	bl	8001bd4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6919      	ldr	r1, [r3, #16]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f7ff f811 	bl	8001c42 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	7e9b      	ldrb	r3, [r3, #26]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d11e      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x17e>
 8002c38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c3c:	e000      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x180>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	461a      	mov	r2, r3
 8002c42:	f7ff f834 	bl	8001cae <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d102      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x19c>
 8002c56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c5a:	e000      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x19e>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f7ff f80a 	bl	8001c78 <LL_ADC_SetOffsetSignedSaturation>
 8002c64:	e197      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	4619      	mov	r1, r3
 8002c72:	f7ff f81c 	bl	8001cae <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4619      	mov	r1, r3
 8002c82:	f7fe fff9 	bl	8001c78 <LL_ADC_SetOffsetSignedSaturation>
 8002c86:	e186      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe ffc1 	bl	8001c16 <LL_ADC_GetOffsetChannel>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x1f4>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe ffb6 	bl	8001c16 <LL_ADC_GetOffsetChannel>
 8002caa:	4603      	mov	r3, r0
 8002cac:	0e9b      	lsrs	r3, r3, #26
 8002cae:	f003 021f 	and.w	r2, r3, #31
 8002cb2:	e01e      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x232>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe ffab 	bl	8001c16 <LL_ADC_GetOffsetChannel>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return result;
 8002cd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (value == 0U)
 8002cda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	e004      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002ce6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d105      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x24a>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	0e9b      	lsrs	r3, r3, #26
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	e018      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x27c>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002d1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002d26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002d2e:	2320      	movs	r3, #32
 8002d30:	e004      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002d32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d107      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	f7fe ff42 	bl	8001bd4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe ff5d 	bl	8001c16 <LL_ADC_GetOffsetChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10c      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x2c0>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fe ff52 	bl	8001c16 <LL_ADC_GetOffsetChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	f003 021f 	and.w	r2, r3, #31
 8002d7a:	e020      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x2fe>
 8002d7c:	46021000 	.word	0x46021000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe ff45 	bl	8001c16 <LL_ADC_GetOffsetChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002d9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002da6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002dae:	2320      	movs	r3, #32
 8002db0:	e004      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002db2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d105      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x316>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	0e9b      	lsrs	r3, r3, #26
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	e018      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x348>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002dea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002df2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	e004      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002dfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d107      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	2300      	movs	r3, #0
 8002e16:	2101      	movs	r1, #1
 8002e18:	f7fe fedc 	bl	8001bd4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2102      	movs	r1, #2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe fef7 	bl	8001c16 <LL_ADC_GetOffsetChannel>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x388>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2102      	movs	r1, #2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe feec 	bl	8001c16 <LL_ADC_GetOffsetChannel>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	0e9b      	lsrs	r3, r3, #26
 8002e42:	f003 021f 	and.w	r2, r3, #31
 8002e46:	e01e      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x3c6>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe fee1 	bl	8001c16 <LL_ADC_GetOffsetChannel>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002e66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002e76:	2320      	movs	r3, #32
 8002e78:	e004      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d105      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x3de>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	0e9b      	lsrs	r3, r3, #26
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	e018      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x410>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	e004      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8002ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d107      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	2300      	movs	r3, #0
 8002ede:	2102      	movs	r1, #2
 8002ee0:	f7fe fe78 	bl	8001bd4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2103      	movs	r1, #3
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe fe93 	bl	8001c16 <LL_ADC_GetOffsetChannel>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x450>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2103      	movs	r1, #3
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe fe88 	bl	8001c16 <LL_ADC_GetOffsetChannel>
 8002f06:	4603      	mov	r3, r0
 8002f08:	0e9b      	lsrs	r3, r3, #26
 8002f0a:	f003 021f 	and.w	r2, r3, #31
 8002f0e:	e01a      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x486>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2103      	movs	r1, #3
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fe7d 	bl	8001c16 <LL_ADC_GetOffsetChannel>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f22:	fa93 f3a3 	rbit	r3, r3
 8002f26:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002f2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8002f36:	2320      	movs	r3, #32
 8002f38:	e004      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8002f3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d105      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x49e>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	0e9b      	lsrs	r3, r3, #26
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	e011      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x4c2>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 8002f76:	2320      	movs	r3, #32
 8002f78:	e003      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8002f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d107      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2103      	movs	r1, #3
 8002f92:	f7fe fe1f 	bl	8001bd4 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff f8a2 	bl	80020e4 <LL_ADC_IsEnabled>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f040 8456 	bne.w	8003854 <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f7fe fffb 	bl	8001fb0 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fc2:	f040 80d6 	bne.w	8003172 <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10b      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x52a>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	0e9b      	lsrs	r3, r3, #26
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	2b09      	cmp	r3, #9
 8002fe0:	bf94      	ite	ls
 8002fe2:	2301      	movls	r3, #1
 8002fe4:	2300      	movhi	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	e019      	b.n	800301e <HAL_ADC_ConfigChannel+0x55e>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ffa:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8003002:	2320      	movs	r3, #32
 8003004:	e003      	b.n	800300e <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8003006:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003008:	fab3 f383 	clz	r3, r3
 800300c:	b2db      	uxtb	r3, r3
 800300e:	3301      	adds	r3, #1
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	2b09      	cmp	r3, #9
 8003016:	bf94      	ite	ls
 8003018:	2301      	movls	r3, #1
 800301a:	2300      	movhi	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d04d      	beq.n	80030be <HAL_ADC_ConfigChannel+0x5fe>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d107      	bne.n	800303e <HAL_ADC_ConfigChannel+0x57e>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	0e9b      	lsrs	r3, r3, #26
 8003034:	3301      	adds	r3, #1
 8003036:	069b      	lsls	r3, r3, #26
 8003038:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800303c:	e015      	b.n	800306a <HAL_ADC_ConfigChannel+0x5aa>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800304c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800304e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 8003056:	2320      	movs	r3, #32
 8003058:	e003      	b.n	8003062 <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 800305a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	3301      	adds	r3, #1
 8003064:	069b      	lsls	r3, r3, #26
 8003066:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_ADC_ConfigChannel+0x5ca>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	0e9b      	lsrs	r3, r3, #26
 800307c:	3301      	adds	r3, #1
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	2101      	movs	r1, #1
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	e017      	b.n	80030ba <HAL_ADC_ConfigChannel+0x5fa>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800309c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 80030a2:	2320      	movs	r3, #32
 80030a4:	e003      	b.n	80030ae <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 80030a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	2101      	movs	r1, #1
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	4313      	orrs	r3, r2
 80030bc:	e04e      	b.n	800315c <HAL_ADC_ConfigChannel+0x69c>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d107      	bne.n	80030da <HAL_ADC_ConfigChannel+0x61a>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0e9b      	lsrs	r3, r3, #26
 80030d0:	3301      	adds	r3, #1
 80030d2:	069b      	lsls	r3, r3, #26
 80030d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030d8:	e015      	b.n	8003106 <HAL_ADC_ConfigChannel+0x646>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80030e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80030ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 80030f2:	2320      	movs	r3, #32
 80030f4:	e003      	b.n	80030fe <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 80030f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	069b      	lsls	r3, r3, #26
 8003102:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x666>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	0e9b      	lsrs	r3, r3, #26
 8003118:	3301      	adds	r3, #1
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2101      	movs	r1, #1
 8003120:	fa01 f303 	lsl.w	r3, r1, r3
 8003124:	e017      	b.n	8003156 <HAL_ADC_ConfigChannel+0x696>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 800313e:	2320      	movs	r3, #32
 8003140:	e003      	b.n	800314a <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	fab3 f383 	clz	r3, r3
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3301      	adds	r3, #1
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	4313      	orrs	r3, r2
 8003158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800315c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	461a      	mov	r2, r3
 800316a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800316e:	f7fe febb 	bl	8001ee8 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f280 836c 	bge.w	8003854 <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a97      	ldr	r2, [pc, #604]	; (80033e0 <HAL_ADC_ConfigChannel+0x920>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_ADC_ConfigChannel+0x6ca>
 8003186:	4b97      	ldr	r3, [pc, #604]	; (80033e4 <HAL_ADC_ConfigChannel+0x924>)
 8003188:	e000      	b.n	800318c <HAL_ADC_ConfigChannel+0x6cc>
 800318a:	4b97      	ldr	r3, [pc, #604]	; (80033e8 <HAL_ADC_ConfigChannel+0x928>)
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe fcf3 	bl	8001b78 <LL_ADC_GetCommonPathInternalCh>
 8003192:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a91      	ldr	r2, [pc, #580]	; (80033e0 <HAL_ADC_ConfigChannel+0x920>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d109      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x6f4>
 80031a0:	488f      	ldr	r0, [pc, #572]	; (80033e0 <HAL_ADC_ConfigChannel+0x920>)
 80031a2:	f7fe ff9f 	bl	80020e4 <LL_ADC_IsEnabled>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	e008      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x706>
 80031b4:	488d      	ldr	r0, [pc, #564]	; (80033ec <HAL_ADC_ConfigChannel+0x92c>)
 80031b6:	f7fe ff95 	bl	80020e4 <LL_ADC_IsEnabled>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8088 	beq.w	80032dc <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a87      	ldr	r2, [pc, #540]	; (80033f0 <HAL_ADC_ConfigChannel+0x930>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d132      	bne.n	800323c <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d12c      	bne.n	800323c <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a7e      	ldr	r2, [pc, #504]	; (80033e0 <HAL_ADC_ConfigChannel+0x920>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d005      	beq.n	80031f8 <HAL_ADC_ConfigChannel+0x738>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a7e      	ldr	r2, [pc, #504]	; (80033ec <HAL_ADC_ConfigChannel+0x92c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	f040 832b 	bne.w	800384e <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a78      	ldr	r2, [pc, #480]	; (80033e0 <HAL_ADC_ConfigChannel+0x920>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d101      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x746>
 8003202:	4a78      	ldr	r2, [pc, #480]	; (80033e4 <HAL_ADC_ConfigChannel+0x924>)
 8003204:	e000      	b.n	8003208 <HAL_ADC_ConfigChannel+0x748>
 8003206:	4a78      	ldr	r2, [pc, #480]	; (80033e8 <HAL_ADC_ConfigChannel+0x928>)
 8003208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003210:	4619      	mov	r1, r3
 8003212:	4610      	mov	r0, r2
 8003214:	f7fe fc9d 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003218:	4b76      	ldr	r3, [pc, #472]	; (80033f4 <HAL_ADC_ConfigChannel+0x934>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	099b      	lsrs	r3, r3, #6
 800321e:	4a76      	ldr	r2, [pc, #472]	; (80033f8 <HAL_ADC_ConfigChannel+0x938>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	099b      	lsrs	r3, r3, #6
 8003226:	3301      	adds	r3, #1
 8003228:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 800322a:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800322c:	e002      	b.n	8003234 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	3b01      	subs	r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f9      	bne.n	800322e <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800323a:	e308      	b.n	800384e <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a6e      	ldr	r2, [pc, #440]	; (80033fc <HAL_ADC_ConfigChannel+0x93c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d121      	bne.n	800328a <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800324e:	2b00      	cmp	r3, #0
 8003250:	d11b      	bne.n	800328a <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a62      	ldr	r2, [pc, #392]	; (80033e0 <HAL_ADC_ConfigChannel+0x920>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d005      	beq.n	8003268 <HAL_ADC_ConfigChannel+0x7a8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a62      	ldr	r2, [pc, #392]	; (80033ec <HAL_ADC_ConfigChannel+0x92c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	f040 82f5 	bne.w	8003852 <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a5c      	ldr	r2, [pc, #368]	; (80033e0 <HAL_ADC_ConfigChannel+0x920>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d101      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x7b6>
 8003272:	4a5c      	ldr	r2, [pc, #368]	; (80033e4 <HAL_ADC_ConfigChannel+0x924>)
 8003274:	e000      	b.n	8003278 <HAL_ADC_ConfigChannel+0x7b8>
 8003276:	4a5c      	ldr	r2, [pc, #368]	; (80033e8 <HAL_ADC_ConfigChannel+0x928>)
 8003278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003280:	4619      	mov	r1, r3
 8003282:	4610      	mov	r0, r2
 8003284:	f7fe fc65 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003288:	e2e3      	b.n	8003852 <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a5c      	ldr	r2, [pc, #368]	; (8003400 <HAL_ADC_ConfigChannel+0x940>)
 8003290:	4293      	cmp	r3, r2
 8003292:	f040 82df 	bne.w	8003854 <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 82d8 	bne.w	8003854 <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a4d      	ldr	r2, [pc, #308]	; (80033e0 <HAL_ADC_ConfigChannel+0x920>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d005      	beq.n	80032ba <HAL_ADC_ConfigChannel+0x7fa>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a4e      	ldr	r2, [pc, #312]	; (80033ec <HAL_ADC_ConfigChannel+0x92c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	f040 82cd 	bne.w	8003854 <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a48      	ldr	r2, [pc, #288]	; (80033e0 <HAL_ADC_ConfigChannel+0x920>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d101      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x808>
 80032c4:	4a47      	ldr	r2, [pc, #284]	; (80033e4 <HAL_ADC_ConfigChannel+0x924>)
 80032c6:	e000      	b.n	80032ca <HAL_ADC_ConfigChannel+0x80a>
 80032c8:	4a47      	ldr	r2, [pc, #284]	; (80033e8 <HAL_ADC_ConfigChannel+0x928>)
 80032ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032d2:	4619      	mov	r1, r3
 80032d4:	4610      	mov	r0, r2
 80032d6:	f7fe fc3c 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
 80032da:	e2bb      	b.n	8003854 <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032e0:	f043 0220 	orr.w	r2, r3, #32
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80032ee:	e2b1      	b.n	8003854 <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 80032f8:	f7fe fc0a 	bl	8001b10 <HAL_GetREVID>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003302:	d130      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3e      	ldr	r2, [pc, #248]	; (8003404 <HAL_ADC_ConfigChannel+0x944>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d103      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 800330e:	4b3e      	ldr	r3, [pc, #248]	; (8003408 <HAL_ADC_ConfigChannel+0x948>)
 8003310:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003314:	e027      	b.n	8003366 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a3c      	ldr	r2, [pc, #240]	; (800340c <HAL_ADC_ConfigChannel+0x94c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d103      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003320:	4b3b      	ldr	r3, [pc, #236]	; (8003410 <HAL_ADC_ConfigChannel+0x950>)
 8003322:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003326:	e01e      	b.n	8003366 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a39      	ldr	r2, [pc, #228]	; (8003414 <HAL_ADC_ConfigChannel+0x954>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d103      	bne.n	800333a <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 8003332:	4b39      	ldr	r3, [pc, #228]	; (8003418 <HAL_ADC_ConfigChannel+0x958>)
 8003334:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003338:	e015      	b.n	8003366 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a37      	ldr	r2, [pc, #220]	; (800341c <HAL_ADC_ConfigChannel+0x95c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d103      	bne.n	800334c <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003344:	4b36      	ldr	r3, [pc, #216]	; (8003420 <HAL_ADC_ConfigChannel+0x960>)
 8003346:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800334a:	e00c      	b.n	8003366 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a34      	ldr	r2, [pc, #208]	; (8003424 <HAL_ADC_ConfigChannel+0x964>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d103      	bne.n	800335e <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003356:	4b31      	ldr	r3, [pc, #196]	; (800341c <HAL_ADC_ConfigChannel+0x95c>)
 8003358:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800335c:	e003      	b.n	8003366 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b02      	cmp	r3, #2
 800336c:	f000 81a2 	beq.w	80036b4 <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003378:	d004      	beq.n	8003384 <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800337e:	4a2a      	ldr	r2, [pc, #168]	; (8003428 <HAL_ADC_ConfigChannel+0x968>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d107      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800338c:	4618      	mov	r0, r3
 800338e:	f7fe fd5f 	bl	8001e50 <LL_ADC_REG_SetSequencerChAdd>
 8003392:	e0c1      	b.n	8003518 <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	210f      	movs	r1, #15
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	401a      	ands	r2, r3
 80033ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d105      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x904>
 80033b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033bc:	0e9b      	lsrs	r3, r3, #26
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	e037      	b.n	8003434 <HAL_ADC_ConfigChannel+0x974>
 80033c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d127      	bne.n	800342c <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 80033dc:	2320      	movs	r3, #32
 80033de:	e029      	b.n	8003434 <HAL_ADC_ConfigChannel+0x974>
 80033e0:	42028000 	.word	0x42028000
 80033e4:	42028308 	.word	0x42028308
 80033e8:	46021308 	.word	0x46021308
 80033ec:	46021000 	.word	0x46021000
 80033f0:	ce080000 	.word	0xce080000
 80033f4:	20000000 	.word	0x20000000
 80033f8:	053e2d63 	.word	0x053e2d63
 80033fc:	ca040000 	.word	0xca040000
 8003400:	80000001 	.word	0x80000001
 8003404:	b6002000 	.word	0xb6002000
 8003408:	da400000 	.word	0xda400000
 800340c:	ba004000 	.word	0xba004000
 8003410:	de800000 	.word	0xde800000
 8003414:	b2001000 	.word	0xb2001000
 8003418:	81000001 	.word	0x81000001
 800341c:	d6200000 	.word	0xd6200000
 8003420:	d2100000 	.word	0xd2100000
 8003424:	d7200000 	.word	0xd7200000
 8003428:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	6839      	ldr	r1, [r7, #0]
 8003436:	6849      	ldr	r1, [r1, #4]
 8003438:	f001 011f 	and.w	r1, r1, #31
 800343c:	408b      	lsls	r3, r1
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	429a      	cmp	r2, r3
 8003454:	d860      	bhi.n	8003518 <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003456:	f7fe fb5b 	bl	8001b10 <HAL_GetREVID>
 800345a:	4603      	mov	r3, r0
 800345c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003460:	d851      	bhi.n	8003506 <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8003462:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003466:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x9c4>
 800346e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003472:	0e9b      	lsrs	r3, r3, #26
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	2b13      	cmp	r3, #19
 800347a:	bf8c      	ite	hi
 800347c:	2301      	movhi	r3, #1
 800347e:	2300      	movls	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	e016      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x9f2>
 8003484:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003488:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	61bb      	str	r3, [r7, #24]
  return result;
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 800349c:	2320      	movs	r3, #32
 800349e:	e003      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b13      	cmp	r3, #19
 80034aa:	bf8c      	ite	hi
 80034ac:	2301      	movhi	r3, #1
 80034ae:	2300      	movls	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d027      	beq.n	8003506 <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 80034b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80034ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0xa16>
 80034c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80034c6:	0e9b      	lsrs	r3, r3, #26
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	3b09      	subs	r3, #9
 80034ce:	2201      	movs	r2, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	e015      	b.n	8003502 <HAL_ADC_ConfigChannel+0xa42>
 80034d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80034da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	60fb      	str	r3, [r7, #12]
  return result;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 80034ee:	2320      	movs	r3, #32
 80034f0:	e003      	b.n	80034fa <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	fab3 f383 	clz	r3, r3
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	3b09      	subs	r3, #9
 80034fc:	2201      	movs	r2, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003512:	4619      	mov	r1, r3
 8003514:	f7fe fc3c 	bl	8001d90 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	461a      	mov	r2, r3
 8003522:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003526:	f7fe fcdf 	bl	8001ee8 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f280 8190 	bge.w	8003854 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a97      	ldr	r2, [pc, #604]	; (8003798 <HAL_ADC_ConfigChannel+0xcd8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_ADC_ConfigChannel+0xa82>
 800353e:	4b97      	ldr	r3, [pc, #604]	; (800379c <HAL_ADC_ConfigChannel+0xcdc>)
 8003540:	e000      	b.n	8003544 <HAL_ADC_ConfigChannel+0xa84>
 8003542:	4b97      	ldr	r3, [pc, #604]	; (80037a0 <HAL_ADC_ConfigChannel+0xce0>)
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe fb17 	bl	8001b78 <LL_ADC_GetCommonPathInternalCh>
 800354a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a94      	ldr	r2, [pc, #592]	; (80037a4 <HAL_ADC_ConfigChannel+0xce4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d126      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d120      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a8b      	ldr	r2, [pc, #556]	; (8003798 <HAL_ADC_ConfigChannel+0xcd8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <HAL_ADC_ConfigChannel+0xab2>
 800356e:	4a8b      	ldr	r2, [pc, #556]	; (800379c <HAL_ADC_ConfigChannel+0xcdc>)
 8003570:	e000      	b.n	8003574 <HAL_ADC_ConfigChannel+0xab4>
 8003572:	4a8b      	ldr	r2, [pc, #556]	; (80037a0 <HAL_ADC_ConfigChannel+0xce0>)
 8003574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003578:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f7fe fae7 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003584:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_ADC_ConfigChannel+0xce8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	099b      	lsrs	r3, r3, #6
 800358a:	4a88      	ldr	r2, [pc, #544]	; (80037ac <HAL_ADC_ConfigChannel+0xcec>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	099b      	lsrs	r3, r3, #6
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003596:	e002      	b.n	800359e <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	3b01      	subs	r3, #1
 800359c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f9      	bne.n	8003598 <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80035a4:	e067      	b.n	8003676 <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a81      	ldr	r2, [pc, #516]	; (80037b0 <HAL_ADC_ConfigChannel+0xcf0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d116      	bne.n	80035de <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d110      	bne.n	80035de <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a75      	ldr	r2, [pc, #468]	; (8003798 <HAL_ADC_ConfigChannel+0xcd8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_ADC_ConfigChannel+0xb0a>
 80035c6:	4a75      	ldr	r2, [pc, #468]	; (800379c <HAL_ADC_ConfigChannel+0xcdc>)
 80035c8:	e000      	b.n	80035cc <HAL_ADC_ConfigChannel+0xb0c>
 80035ca:	4a75      	ldr	r2, [pc, #468]	; (80037a0 <HAL_ADC_ConfigChannel+0xce0>)
 80035cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f7fe fabb 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
 80035dc:	e04b      	b.n	8003676 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a74      	ldr	r2, [pc, #464]	; (80037b4 <HAL_ADC_ConfigChannel+0xcf4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d116      	bne.n	8003616 <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d110      	bne.n	8003616 <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a67      	ldr	r2, [pc, #412]	; (8003798 <HAL_ADC_ConfigChannel+0xcd8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_ConfigChannel+0xb42>
 80035fe:	4a67      	ldr	r2, [pc, #412]	; (800379c <HAL_ADC_ConfigChannel+0xcdc>)
 8003600:	e000      	b.n	8003604 <HAL_ADC_ConfigChannel+0xb44>
 8003602:	4a67      	ldr	r2, [pc, #412]	; (80037a0 <HAL_ADC_ConfigChannel+0xce0>)
 8003604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f7fe fa9f 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
 8003614:	e02f      	b.n	8003676 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a67      	ldr	r2, [pc, #412]	; (80037b8 <HAL_ADC_ConfigChannel+0xcf8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d12a      	bne.n	8003676 <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d124      	bne.n	8003676 <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a62      	ldr	r2, [pc, #392]	; (80037bc <HAL_ADC_ConfigChannel+0xcfc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d11f      	bne.n	8003676 <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a57      	ldr	r2, [pc, #348]	; (8003798 <HAL_ADC_ConfigChannel+0xcd8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0xb84>
 8003640:	4a56      	ldr	r2, [pc, #344]	; (800379c <HAL_ADC_ConfigChannel+0xcdc>)
 8003642:	e000      	b.n	8003646 <HAL_ADC_ConfigChannel+0xb86>
 8003644:	4a56      	ldr	r2, [pc, #344]	; (80037a0 <HAL_ADC_ConfigChannel+0xce0>)
 8003646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800364e:	4619      	mov	r1, r3
 8003650:	4610      	mov	r0, r2
 8003652:	f7fe fa7e 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003656:	f7fe fa5b 	bl	8001b10 <HAL_GetREVID>
 800365a:	4603      	mov	r3, r0
 800365c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003660:	d809      	bhi.n	8003676 <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8003676:	f7fe fa4b 	bl	8001b10 <HAL_GetREVID>
 800367a:	4603      	mov	r3, r0
 800367c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003680:	f040 80e8 	bne.w	8003854 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a4d      	ldr	r2, [pc, #308]	; (80037c0 <HAL_ADC_ConfigChannel+0xd00>)
 800368a:	4293      	cmp	r3, r2
 800368c:	f040 80e2 	bne.w	8003854 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003698:	2b00      	cmp	r3, #0
 800369a:	f040 80db 	bne.w	8003854 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80036b2:	e0cf      	b.n	8003854 <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036bc:	d004      	beq.n	80036c8 <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80036c2:	4a40      	ldr	r2, [pc, #256]	; (80037c4 <HAL_ADC_ConfigChannel+0xd04>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d106      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fe fbf0 	bl	8001eb6 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f280 80ba 	bge.w	8003854 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a2c      	ldr	r2, [pc, #176]	; (8003798 <HAL_ADC_ConfigChannel+0xcd8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_ConfigChannel+0xc2e>
 80036ea:	4b2c      	ldr	r3, [pc, #176]	; (800379c <HAL_ADC_ConfigChannel+0xcdc>)
 80036ec:	e000      	b.n	80036f0 <HAL_ADC_ConfigChannel+0xc30>
 80036ee:	4b2c      	ldr	r3, [pc, #176]	; (80037a0 <HAL_ADC_ConfigChannel+0xce0>)
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe fa41 	bl	8001b78 <LL_ADC_GetCommonPathInternalCh>
 80036f6:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a32      	ldr	r2, [pc, #200]	; (80037c8 <HAL_ADC_ConfigChannel+0xd08>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d110      	bne.n	8003726 <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a23      	ldr	r2, [pc, #140]	; (8003798 <HAL_ADC_ConfigChannel+0xcd8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_ADC_ConfigChannel+0xc52>
 800370e:	4a23      	ldr	r2, [pc, #140]	; (800379c <HAL_ADC_ConfigChannel+0xcdc>)
 8003710:	e000      	b.n	8003714 <HAL_ADC_ConfigChannel+0xc54>
 8003712:	4a23      	ldr	r2, [pc, #140]	; (80037a0 <HAL_ADC_ConfigChannel+0xce0>)
 8003714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003718:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f7fe fa17 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
 8003724:	e06d      	b.n	8003802 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a28      	ldr	r2, [pc, #160]	; (80037cc <HAL_ADC_ConfigChannel+0xd0c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d110      	bne.n	8003752 <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a18      	ldr	r2, [pc, #96]	; (8003798 <HAL_ADC_ConfigChannel+0xcd8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d101      	bne.n	800373e <HAL_ADC_ConfigChannel+0xc7e>
 800373a:	4a18      	ldr	r2, [pc, #96]	; (800379c <HAL_ADC_ConfigChannel+0xcdc>)
 800373c:	e000      	b.n	8003740 <HAL_ADC_ConfigChannel+0xc80>
 800373e:	4a18      	ldr	r2, [pc, #96]	; (80037a0 <HAL_ADC_ConfigChannel+0xce0>)
 8003740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003744:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003748:	4619      	mov	r1, r3
 800374a:	4610      	mov	r0, r2
 800374c:	f7fe fa01 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
 8003750:	e057      	b.n	8003802 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a17      	ldr	r2, [pc, #92]	; (80037b4 <HAL_ADC_ConfigChannel+0xcf4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d110      	bne.n	800377e <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0d      	ldr	r2, [pc, #52]	; (8003798 <HAL_ADC_ConfigChannel+0xcd8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_ADC_ConfigChannel+0xcaa>
 8003766:	4a0d      	ldr	r2, [pc, #52]	; (800379c <HAL_ADC_ConfigChannel+0xcdc>)
 8003768:	e000      	b.n	800376c <HAL_ADC_ConfigChannel+0xcac>
 800376a:	4a0d      	ldr	r2, [pc, #52]	; (80037a0 <HAL_ADC_ConfigChannel+0xce0>)
 800376c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003770:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003774:	4619      	mov	r1, r3
 8003776:	4610      	mov	r0, r2
 8003778:	f7fe f9eb 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
 800377c:	e041      	b.n	8003802 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a0d      	ldr	r2, [pc, #52]	; (80037b8 <HAL_ADC_ConfigChannel+0xcf8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d13c      	bne.n	8003802 <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a02      	ldr	r2, [pc, #8]	; (8003798 <HAL_ADC_ConfigChannel+0xcd8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d11e      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0xd10>
 8003792:	4a02      	ldr	r2, [pc, #8]	; (800379c <HAL_ADC_ConfigChannel+0xcdc>)
 8003794:	e01d      	b.n	80037d2 <HAL_ADC_ConfigChannel+0xd12>
 8003796:	bf00      	nop
 8003798:	42028000 	.word	0x42028000
 800379c:	42028308 	.word	0x42028308
 80037a0:	46021308 	.word	0x46021308
 80037a4:	b6002000 	.word	0xb6002000
 80037a8:	20000000 	.word	0x20000000
 80037ac:	053e2d63 	.word	0x053e2d63
 80037b0:	ba004000 	.word	0xba004000
 80037b4:	80000001 	.word	0x80000001
 80037b8:	b2001000 	.word	0xb2001000
 80037bc:	46021000 	.word	0x46021000
 80037c0:	d7200000 	.word	0xd7200000
 80037c4:	80000010 	.word	0x80000010
 80037c8:	ce080000 	.word	0xce080000
 80037cc:	ca040000 	.word	0xca040000
 80037d0:	4a25      	ldr	r2, [pc, #148]	; (8003868 <HAL_ADC_ConfigChannel+0xda8>)
 80037d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80037da:	4619      	mov	r1, r3
 80037dc:	4610      	mov	r0, r2
 80037de:	f7fe f9b8 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80037e2:	f7fe f995 	bl	8001b10 <HAL_GetREVID>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ec:	d809      	bhi.n	8003802 <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8003802:	f7fe f985 	bl	8001b10 <HAL_GetREVID>
 8003806:	4603      	mov	r3, r0
 8003808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380c:	d122      	bne.n	8003854 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a16      	ldr	r2, [pc, #88]	; (800386c <HAL_ADC_ConfigChannel+0xdac>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d11d      	bne.n	8003854 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d117      	bne.n	8003854 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8003838:	e00c      	b.n	8003854 <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800383e:	f043 0220 	orr.w	r2, r3, #32
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800384c:	e002      	b.n	8003854 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800384e:	bf00      	nop
 8003850:	e000      	b.n	8003854 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003852:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 800385c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8003860:	4618      	mov	r0, r3
 8003862:	37f0      	adds	r7, #240	; 0xf0
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	46021308 	.word	0x46021308
 800386c:	d7200000 	.word	0xd7200000

08003870 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe fc7a 	bl	8002180 <LL_ADC_REG_IsConversionOngoing>
 800388c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fc9b 	bl	80021ce <LL_ADC_INJ_IsConversionOngoing>
 8003898:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d103      	bne.n	80038a8 <ADC_ConversionStop+0x38>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8099 	beq.w	80039da <ADC_ConversionStop+0x16a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d02b      	beq.n	800390e <ADC_ConversionStop+0x9e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d126      	bne.n	800390e <ADC_ConversionStop+0x9e>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7f1b      	ldrb	r3, [r3, #28]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d122      	bne.n	800390e <ADC_ConversionStop+0x9e>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80038c8:	2301      	movs	r3, #1
 80038ca:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038cc:	e014      	b.n	80038f8 <ADC_ConversionStop+0x88>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4a44      	ldr	r2, [pc, #272]	; (80039e4 <ADC_ConversionStop+0x174>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d90d      	bls.n	80038f2 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038da:	f043 0210 	orr.w	r2, r3, #16
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e6:	f043 0201 	orr.w	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e074      	b.n	80039dc <ADC_ConversionStop+0x16c>
        }
        conversion_timeout_cpu_cycles++;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3301      	adds	r3, #1
 80038f6:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d1e3      	bne.n	80038ce <ADC_ConversionStop+0x5e>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2240      	movs	r2, #64	; 0x40
 800390c:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d014      	beq.n	800393e <ADC_ConversionStop+0xce>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f7fe fc31 	bl	8002180 <LL_ADC_REG_IsConversionOngoing>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00c      	beq.n	800393e <ADC_ConversionStop+0xce>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe fbee 	bl	800210a <LL_ADC_IsDisableOngoing>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d104      	bne.n	800393e <ADC_ConversionStop+0xce>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe fc0d 	bl	8002158 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d014      	beq.n	800396e <ADC_ConversionStop+0xfe>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe fc40 	bl	80021ce <LL_ADC_INJ_IsConversionOngoing>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00c      	beq.n	800396e <ADC_ConversionStop+0xfe>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe fbd6 	bl	800210a <LL_ADC_IsDisableOngoing>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d104      	bne.n	800396e <ADC_ConversionStop+0xfe>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe fc1c 	bl	80021a6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d005      	beq.n	8003980 <ADC_ConversionStop+0x110>
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d105      	bne.n	8003986 <ADC_ConversionStop+0x116>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800397a:	230c      	movs	r3, #12
 800397c:	617b      	str	r3, [r7, #20]
        break;
 800397e:	e005      	b.n	800398c <ADC_ConversionStop+0x11c>
      case ADC_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 8003980:	2308      	movs	r3, #8
 8003982:	617b      	str	r3, [r7, #20]
        break;
 8003984:	e002      	b.n	800398c <ADC_ConversionStop+0x11c>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 8003986:	2304      	movs	r3, #4
 8003988:	617b      	str	r3, [r7, #20]
        break;
 800398a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800398c:	f7fe f890 	bl	8001ab0 <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8003992:	e01b      	b.n	80039cc <ADC_ConversionStop+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003994:	f7fe f88c 	bl	8001ab0 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b05      	cmp	r3, #5
 80039a0:	d914      	bls.n	80039cc <ADC_ConversionStop+0x15c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <ADC_ConversionStop+0x15c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b4:	f043 0210 	orr.w	r2, r3, #16
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e007      	b.n	80039dc <ADC_ConversionStop+0x16c>
    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1dc      	bne.n	8003994 <ADC_ConversionStop+0x124>
        }
      }
    }
  }

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	000cdbff 	.word	0x000cdbff

080039e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe fb75 	bl	80020e4 <LL_ADC_IsEnabled>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d15a      	bne.n	8003ab6 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	4b2e      	ldr	r3, [pc, #184]	; (8003ac0 <ADC_Enable+0xd8>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00d      	beq.n	8003a2a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a12:	f043 0210 	orr.w	r2, r3, #16
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a1e:	f043 0201 	orr.w	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e046      	b.n	8003ab8 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fb2c 	bl	8002094 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d004      	beq.n	8003a4e <ADC_Enable+0x66>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1e      	ldr	r2, [pc, #120]	; (8003ac4 <ADC_Enable+0xdc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d033      	beq.n	8003ab6 <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003a4e:	f7fe f82f 	bl	8001ab0 <HAL_GetTick>
 8003a52:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a54:	e028      	b.n	8003aa8 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe fb42 	bl	80020e4 <LL_ADC_IsEnabled>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fb12 	bl	8002094 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a70:	f7fe f81e 	bl	8001ab0 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d914      	bls.n	8003aa8 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d00d      	beq.n	8003aa8 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a90:	f043 0210 	orr.w	r2, r3, #16
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a9c:	f043 0201 	orr.w	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e007      	b.n	8003ab8 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d1cf      	bne.n	8003a56 <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	8000003f 	.word	0x8000003f
 8003ac4:	46021000 	.word	0x46021000

08003ac8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe fb18 	bl	800210a <LL_ADC_IsDisableOngoing>
 8003ada:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe faff 	bl	80020e4 <LL_ADC_IsEnabled>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d047      	beq.n	8003b7c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d144      	bne.n	8003b7c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 030d 	and.w	r3, r3, #13
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10c      	bne.n	8003b1a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe fad9 	bl	80020bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2203      	movs	r2, #3
 8003b10:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b12:	f7fd ffcd 	bl	8001ab0 <HAL_GetTick>
 8003b16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b18:	e029      	b.n	8003b6e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b1e:	f043 0210 	orr.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	679a      	str	r2, [r3, #120]	; 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	67da      	str	r2, [r3, #124]	; 0x7c
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e023      	b.n	8003b7e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b36:	f7fd ffbb 	bl	8001ab0 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d914      	bls.n	8003b6e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b56:	f043 0210 	orr.w	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e007      	b.n	8003b7e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1dc      	bne.n	8003b36 <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <LL_ADC_StartCalibration>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a0f      	ldr	r2, [pc, #60]	; (8003bd4 <LL_ADC_StartCalibration+0x4c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00c      	beq.n	8003bb4 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <LL_ADC_StartCalibration+0x50>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	609a      	str	r2, [r3, #8]
}
 8003bb2:	e009      	b.n	8003bc8 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	609a      	str	r2, [r3, #8]
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	46021000 	.word	0x46021000
 8003bd8:	7ffeffc0 	.word	0x7ffeffc0

08003bdc <LL_ADC_IsCalibrationOnGoing>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bf0:	d101      	bne.n	8003bf6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_ADCEx_Calibration_Start+0x1e>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e133      	b.n	8003e8a <HAL_ADCEx_Calibration_Start+0x286>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7ff ff4c 	bl	8003ac8 <ADC_Disable>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f040 8119 	bne.w	8003e72 <HAL_ADCEx_Calibration_Start+0x26e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c48:	f023 0302 	bic.w	r3, r3, #2
 8003c4c:	f043 0202 	orr.w	r2, r3, #2
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	679a      	str	r2, [r3, #120]	; 0x78

    if (hadc->Instance == ADC4)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a8e      	ldr	r2, [pc, #568]	; (8003e94 <HAL_ADCEx_Calibration_Start+0x290>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d150      	bne.n	8003d00 <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0203 	bic.w	r2, r2, #3
 8003c84:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0201 	bic.w	r2, r2, #1
 8003c94:	645a      	str	r2, [r3, #68]	; 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff73 	bl	8003b88 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ca2:	e014      	b.n	8003cce <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4a7a      	ldr	r2, [pc, #488]	; (8003e98 <HAL_ADCEx_Calibration_Start+0x294>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d90d      	bls.n	8003cce <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cb6:	f023 0312 	bic.w	r3, r3, #18
 8003cba:	f043 0210 	orr.w	r2, r3, #16
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	679a      	str	r2, [r3, #120]	; 0x78

          __HAL_UNLOCK(hadc);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e0dd      	b.n	8003e8a <HAL_ADCEx_Calibration_Start+0x286>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff ff82 	bl	8003bdc <LL_ADC_IsCalibrationOnGoing>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e2      	bne.n	8003ca4 <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68d9      	ldr	r1, [r3, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	645a      	str	r2, [r3, #68]	; 0x44
 8003cfe:	e0af      	b.n	8003e60 <HAL_ADCEx_Calibration_Start+0x25c>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8003d00:	4b66      	ldr	r3, [pc, #408]	; (8003e9c <HAL_ADCEx_Calibration_Start+0x298>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d08:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8003d0a:	4b64      	ldr	r3, [pc, #400]	; (8003e9c <HAL_ADCEx_Calibration_Start+0x298>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	0c1b      	lsrs	r3, r3, #16
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	f240 4255 	movw	r2, #1109	; 0x455
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d012      	beq.n	8003d44 <HAL_ADCEx_Calibration_Start+0x140>
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	f240 4276 	movw	r2, #1142	; 0x476
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00d      	beq.n	8003d44 <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	f240 4281 	movw	r2, #1153	; 0x481
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d004      	beq.n	8003d3c <HAL_ADCEx_Calibration_Start+0x138>
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	f240 4282 	movw	r2, #1154	; 0x482
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d16d      	bne.n	8003e18 <HAL_ADCEx_Calibration_Start+0x214>
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d42:	d369      	bcc.n	8003e18 <HAL_ADCEx_Calibration_Start+0x214>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff fe4f 	bl	80039e8 <ADC_Enable>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (tmp_hal_status == HAL_OK)
 8003d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f040 8083 	bne.w	8003e60 <HAL_ADCEx_Calibration_Start+0x25c>
        {
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 6210 	orr.w	r2, r2, #150994944	; 0x9000000
 8003d6c:	609a      	str	r2, [r3, #8]
          MODIFY_REG(hadc->Instance->CALFACT2, 0x00FF0000UL, 0x00020000UL);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003d76:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003d82:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003d96:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff fe94 	bl	8003ac8 <ADC_Disable>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003dac:	d109      	bne.n	8003dc2 <HAL_ADCEx_Calibration_Start+0x1be>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	4b3a      	ldr	r3, [pc, #232]	; (8003ea0 <HAL_ADCEx_Calibration_Start+0x29c>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dd8:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dda:	e014      	b.n	8003e06 <HAL_ADCEx_Calibration_Start+0x202>
          {
            wait_loop_index++;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	3301      	adds	r3, #1
 8003de0:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4a2c      	ldr	r2, [pc, #176]	; (8003e98 <HAL_ADCEx_Calibration_Start+0x294>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d90d      	bls.n	8003e06 <HAL_ADCEx_Calibration_Start+0x202>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dee:	f023 0312 	bic.w	r3, r3, #18
 8003df2:	f043 0210 	orr.w	r2, r3, #16
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	679a      	str	r2, [r3, #120]	; 0x78

              __HAL_UNLOCK(hadc);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

              return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e041      	b.n	8003e8a <HAL_ADCEx_Calibration_Start+0x286>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fee6 	bl	8003bdc <LL_ADC_IsCalibrationOnGoing>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e2      	bne.n	8003ddc <HAL_ADCEx_Calibration_Start+0x1d8>
        if (tmp_hal_status == HAL_OK)
 8003e16:	e023      	b.n	8003e60 <HAL_ADCEx_Calibration_Start+0x25c>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff feb2 	bl	8003b88 <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e24:	e014      	b.n	8003e50 <HAL_ADCEx_Calibration_Start+0x24c>
        {
          wait_loop_index++;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4a1a      	ldr	r2, [pc, #104]	; (8003e98 <HAL_ADCEx_Calibration_Start+0x294>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d90d      	bls.n	8003e50 <HAL_ADCEx_Calibration_Start+0x24c>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e38:	f023 0312 	bic.w	r3, r3, #18
 8003e3c:	f043 0210 	orr.w	r2, r3, #16
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	679a      	str	r2, [r3, #120]	; 0x78

            __HAL_UNLOCK(hadc);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

            return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e01c      	b.n	8003e8a <HAL_ADCEx_Calibration_Start+0x286>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fec1 	bl	8003bdc <LL_ADC_IsCalibrationOnGoing>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e2      	bne.n	8003e26 <HAL_ADCEx_Calibration_Start+0x222>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e64:	f023 0303 	bic.w	r3, r3, #3
 8003e68:	f043 0201 	orr.w	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	679a      	str	r2, [r3, #120]	; 0x78
 8003e70:	e005      	b.n	8003e7e <HAL_ADCEx_Calibration_Start+0x27a>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e76:	f043 0210 	orr.w	r2, r3, #16
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3728      	adds	r7, #40	; 0x28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	46021000 	.word	0x46021000
 8003e98:	01ba813f 	.word	0x01ba813f
 8003e9c:	e0044000 	.word	0xe0044000
 8003ea0:	7ffeffc0 	.word	0x7ffeffc0

08003ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ed6:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	60d3      	str	r3, [r2, #12]
}
 8003edc:	bf00      	nop
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <__NVIC_GetPriorityGrouping+0x18>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	f003 0307 	and.w	r3, r3, #7
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	db0b      	blt.n	8003f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	f003 021f 	and.w	r2, r3, #31
 8003f20:	4907      	ldr	r1, [pc, #28]	; (8003f40 <__NVIC_EnableIRQ+0x38>)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	2001      	movs	r0, #1
 8003f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	e000e100 	.word	0xe000e100

08003f44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	db12      	blt.n	8003f7c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	f003 021f 	and.w	r2, r3, #31
 8003f5c:	490a      	ldr	r1, [pc, #40]	; (8003f88 <__NVIC_DisableIRQ+0x44>)
 8003f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	2001      	movs	r0, #1
 8003f66:	fa00 f202 	lsl.w	r2, r0, r2
 8003f6a:	3320      	adds	r3, #32
 8003f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f70:	f3bf 8f4f 	dsb	sy
}
 8003f74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f76:	f3bf 8f6f 	isb	sy
}
 8003f7a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	e000e100 	.word	0xe000e100

08003f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	6039      	str	r1, [r7, #0]
 8003f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	db0a      	blt.n	8003fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	490c      	ldr	r1, [pc, #48]	; (8003fd8 <__NVIC_SetPriority+0x4c>)
 8003fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003faa:	0112      	lsls	r2, r2, #4
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	440b      	add	r3, r1
 8003fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fb4:	e00a      	b.n	8003fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	4908      	ldr	r1, [pc, #32]	; (8003fdc <__NVIC_SetPriority+0x50>)
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	3b04      	subs	r3, #4
 8003fc4:	0112      	lsls	r2, r2, #4
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	440b      	add	r3, r1
 8003fca:	761a      	strb	r2, [r3, #24]
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	e000e100 	.word	0xe000e100
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b089      	sub	sp, #36	; 0x24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f1c3 0307 	rsb	r3, r3, #7
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	bf28      	it	cs
 8003ffe:	2304      	movcs	r3, #4
 8004000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	3304      	adds	r3, #4
 8004006:	2b06      	cmp	r3, #6
 8004008:	d902      	bls.n	8004010 <NVIC_EncodePriority+0x30>
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3b03      	subs	r3, #3
 800400e:	e000      	b.n	8004012 <NVIC_EncodePriority+0x32>
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004014:	f04f 32ff 	mov.w	r2, #4294967295
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43da      	mvns	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	401a      	ands	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004028:	f04f 31ff 	mov.w	r1, #4294967295
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	fa01 f303 	lsl.w	r3, r1, r3
 8004032:	43d9      	mvns	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004038:	4313      	orrs	r3, r2
         );
}
 800403a:	4618      	mov	r0, r3
 800403c:	3724      	adds	r7, #36	; 0x24
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff ff28 	bl	8003ea4 <__NVIC_SetPriorityGrouping>
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800406a:	f7ff ff3f 	bl	8003eec <__NVIC_GetPriorityGrouping>
 800406e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	6978      	ldr	r0, [r7, #20]
 8004076:	f7ff ffb3 	bl	8003fe0 <NVIC_EncodePriority>
 800407a:	4602      	mov	r2, r0
 800407c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004080:	4611      	mov	r1, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ff82 	bl	8003f8c <__NVIC_SetPriority>
}
 8004088:	bf00      	nop
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800409a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff ff32 	bl	8003f08 <__NVIC_EnableIRQ>
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff ff42 	bl	8003f44 <__NVIC_DisableIRQ>
}
 80040c0:	bf00      	nop
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80040da:	e1ba      	b.n	8004452 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	2101      	movs	r1, #1
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	fa01 f303 	lsl.w	r3, r1, r3
 80040e8:	4013      	ands	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 81aa 	beq.w	800444c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a55      	ldr	r2, [pc, #340]	; (8004250 <HAL_GPIO_Init+0x188>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d15d      	bne.n	80041bc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004106:	2201      	movs	r2, #1
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	4013      	ands	r3, r2
 8004114:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0201 	and.w	r2, r3, #1
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	4313      	orrs	r3, r2
 8004128:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004130:	4a48      	ldr	r2, [pc, #288]	; (8004254 <HAL_GPIO_Init+0x18c>)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004138:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800413a:	4a46      	ldr	r2, [pc, #280]	; (8004254 <HAL_GPIO_Init+0x18c>)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	08da      	lsrs	r2, r3, #3
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	3208      	adds	r2, #8
 800414e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004152:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	220f      	movs	r2, #15
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	4013      	ands	r3, r2
 8004168:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	220b      	movs	r2, #11
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	4313      	orrs	r3, r2
 800417c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	08da      	lsrs	r2, r3, #3
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	3208      	adds	r2, #8
 8004186:	69f9      	ldr	r1, [r7, #28]
 8004188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	2203      	movs	r2, #3
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	43db      	mvns	r3, r3
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	4013      	ands	r3, r2
 80041a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	2202      	movs	r2, #2
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e067      	b.n	800428c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d003      	beq.n	80041cc <HAL_GPIO_Init+0x104>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b12      	cmp	r3, #18
 80041ca:	d145      	bne.n	8004258 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	08da      	lsrs	r2, r3, #3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3208      	adds	r2, #8
 80041d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	220f      	movs	r2, #15
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	4013      	ands	r3, r2
 80041ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f003 020f 	and.w	r2, r3, #15
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	4313      	orrs	r3, r2
 8004208:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	08da      	lsrs	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3208      	adds	r2, #8
 8004212:	69f9      	ldr	r1, [r7, #28]
 8004214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	2203      	movs	r2, #3
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	4013      	ands	r3, r2
 800422e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 0203 	and.w	r2, r3, #3
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	4313      	orrs	r3, r2
 8004244:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	e01e      	b.n	800428c <HAL_GPIO_Init+0x1c4>
 800424e:	bf00      	nop
 8004250:	46020000 	.word	0x46020000
 8004254:	08015ae8 	.word	0x08015ae8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	2203      	movs	r2, #3
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	4013      	ands	r3, r2
 800426e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 0203 	and.w	r2, r3, #3
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	4313      	orrs	r3, r2
 8004284:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d00b      	beq.n	80042ac <HAL_GPIO_Init+0x1e4>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d007      	beq.n	80042ac <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042a0:	2b11      	cmp	r3, #17
 80042a2:	d003      	beq.n	80042ac <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b12      	cmp	r3, #18
 80042aa:	d130      	bne.n	800430e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	2203      	movs	r2, #3
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80042e2:	2201      	movs	r2, #1
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	4013      	ands	r3, r2
 80042f0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	f003 0201 	and.w	r2, r3, #1
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	4313      	orrs	r3, r2
 8004306:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b03      	cmp	r3, #3
 8004314:	d017      	beq.n	8004346 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	2203      	movs	r2, #3
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	4013      	ands	r3, r2
 800432c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	4313      	orrs	r3, r2
 800433e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d07c      	beq.n	800444c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004352:	4a47      	ldr	r2, [pc, #284]	; (8004470 <HAL_GPIO_Init+0x3a8>)
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	089b      	lsrs	r3, r3, #2
 8004358:	3318      	adds	r3, #24
 800435a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800435e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	220f      	movs	r2, #15
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43db      	mvns	r3, r3
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	4013      	ands	r3, r2
 8004374:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	0a9a      	lsrs	r2, r3, #10
 800437a:	4b3e      	ldr	r3, [pc, #248]	; (8004474 <HAL_GPIO_Init+0x3ac>)
 800437c:	4013      	ands	r3, r2
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	f002 0203 	and.w	r2, r2, #3
 8004384:	00d2      	lsls	r2, r2, #3
 8004386:	4093      	lsls	r3, r2
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	4313      	orrs	r3, r2
 800438c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800438e:	4938      	ldr	r1, [pc, #224]	; (8004470 <HAL_GPIO_Init+0x3a8>)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	089b      	lsrs	r3, r3, #2
 8004394:	3318      	adds	r3, #24
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800439c:	4b34      	ldr	r3, [pc, #208]	; (8004470 <HAL_GPIO_Init+0x3a8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	43db      	mvns	r3, r3
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80043b8:	69fa      	ldr	r2, [r7, #28]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80043c0:	4a2b      	ldr	r2, [pc, #172]	; (8004470 <HAL_GPIO_Init+0x3a8>)
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80043c6:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <HAL_GPIO_Init+0x3a8>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80043ea:	4a21      	ldr	r2, [pc, #132]	; (8004470 <HAL_GPIO_Init+0x3a8>)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80043f0:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <HAL_GPIO_Init+0x3a8>)
 80043f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	43db      	mvns	r3, r3
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	4013      	ands	r3, r2
 8004400:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004416:	4a16      	ldr	r2, [pc, #88]	; (8004470 <HAL_GPIO_Init+0x3a8>)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <HAL_GPIO_Init+0x3a8>)
 8004420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004424:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	43db      	mvns	r3, r3
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	4013      	ands	r3, r2
 800442e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004444:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <HAL_GPIO_Init+0x3a8>)
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	3301      	adds	r3, #1
 8004450:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	f47f ae3d 	bne.w	80040dc <HAL_GPIO_Init+0x14>
  }
}
 8004462:	bf00      	nop
 8004464:	bf00      	nop
 8004466:	3724      	adds	r7, #36	; 0x24
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	46022000 	.word	0x46022000
 8004474:	002f7f7f 	.word	0x002f7f7f

08004478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	807b      	strh	r3, [r7, #2]
 8004484:	4613      	mov	r3, r2
 8004486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004488:	787b      	ldrb	r3, [r7, #1]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800448e:	887a      	ldrh	r2, [r7, #2]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004494:	e002      	b.n	800449c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004496:	887a      	ldrh	r2, [r7, #2]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80044b2:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d006      	beq.n	80044cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80044be:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80044c0:	88fb      	ldrh	r3, [r7, #6]
 80044c2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f00b f98c 	bl	800f7e4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80044cc:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d006      	beq.n	80044e6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80044d8:	4a05      	ldr	r2, [pc, #20]	; (80044f0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 f807 	bl	80044f4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80044e6:	bf00      	nop
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	46022000 	.word	0x46022000

080044f4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004518:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
 8004528:	e007      	b.n	800453a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800452a:	4b07      	ldr	r3, [pc, #28]	; (8004548 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 0204 	bic.w	r2, r3, #4
 8004532:	4905      	ldr	r1, [pc, #20]	; (8004548 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]
  }

  return status;
 800453a:	7bfb      	ldrb	r3, [r7, #15]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40030400 	.word	0x40030400

0800454c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_ICACHE_Enable+0x1c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a04      	ldr	r2, [pc, #16]	; (8004568 <HAL_ICACHE_Enable+0x1c>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	40030400 	.word	0x40030400

0800456c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e0e7      	b.n	800474e <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d106      	bne.n	800459e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7fc ff2f 	bl	80013fc <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2202      	movs	r2, #2
 80045a2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0201 	orr.w	r2, r2, #1
 80045b4:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045be:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80045ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fad4 	bl	8004b7c <LPTIM_WaitForFlag>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d101      	bne.n	80045de <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e0b7      	b.n	800474e <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2210      	movs	r2, #16
 80045e4:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6a12      	ldr	r2, [r2, #32]
 80045ee:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80045f0:	2110      	movs	r1, #16
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fac2 	bl	8004b7c <LPTIM_WaitForFlag>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d101      	bne.n	8004602 <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e0a5      	b.n	800474e <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10e      	bne.n	800462e <HAL_LPTIM_Init+0xc2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <HAL_LPTIM_Init+0xc2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d004      	beq.n	8004648 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004646:	d103      	bne.n	8004650 <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 031e 	bic.w	r3, r3, #30
 800464e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004658:	4293      	cmp	r3, r2
 800465a:	d005      	beq.n	8004668 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004662:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004666:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <HAL_LPTIM_Init+0x1ec>)
 800466c:	4013      	ands	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004678:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 800467e:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004684:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800469c:	4313      	orrs	r3, r2
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d004      	beq.n	80046b6 <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046b4:	d107      	bne.n	80046c6 <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80046be:	4313      	orrs	r3, r2
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00a      	beq.n	80046e8 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80046da:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80046e0:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a19      	ldr	r2, [pc, #100]	; (800475c <HAL_LPTIM_Init+0x1f0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_LPTIM_Init+0x198>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a18      	ldr	r2, [pc, #96]	; (8004760 <HAL_LPTIM_Init+0x1f4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d108      	bne.n	8004716 <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	625a      	str	r2, [r3, #36]	; 0x24
 8004714:	e00e      	b.n	8004734 <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a12      	ldr	r2, [pc, #72]	; (8004764 <HAL_LPTIM_Init+0x1f8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_LPTIM_Init+0x1be>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a10      	ldr	r2, [pc, #64]	; (8004768 <HAL_LPTIM_Init+0x1fc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d104      	bne.n	8004734 <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004732:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	ff39f1fe 	.word	0xff39f1fe
 800475c:	46004400 	.word	0x46004400
 8004760:	40009400 	.word	0x40009400
 8004764:	46004800 	.word	0x46004800
 8004768:	46004c00 	.word	0x46004c00

0800476c <HAL_LPTIM_Counter_Start>:
  * @brief  Start the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d00c      	beq.n	800479e <HAL_LPTIM_Counter_Start+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800478c:	d107      	bne.n	800479e <HAL_LPTIM_Counter_Start+0x32>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800479c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0201 	orr.w	r2, r2, #1
 80047ac:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0204 	orr.w	r2, r2, #4
 80047bc:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d120      	bne.n	800482c <HAL_LPTIM_IRQHandler+0x58>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d119      	bne.n	800482c <HAL_LPTIM_IRQHandler+0x58>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2201      	movs	r2, #1
 80047fe:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f99c 	bl	8004b54 <HAL_LPTIM_IC_CaptureCallback>
 800481c:	e002      	b.n	8004824 <HAL_LPTIM_IRQHandler+0x50>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f93e 	bl	8004aa0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483a:	d122      	bne.n	8004882 <HAL_LPTIM_IRQHandler+0xae>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800484a:	d11a      	bne.n	8004882 <HAL_LPTIM_IRQHandler+0xae>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004854:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_LPTIM_IRQHandler+0xa0>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f971 	bl	8004b54 <HAL_LPTIM_IC_CaptureCallback>
 8004872:	e002      	b.n	800487a <HAL_LPTIM_IRQHandler+0xa6>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f913 	bl	8004aa0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800488c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004890:	d117      	bne.n	80048c2 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800489c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a0:	d10f      	bne.n	80048c2 <HAL_LPTIM_IRQHandler+0xee>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048aa:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f957 	bl	8004b68 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d0:	d117      	bne.n	8004902 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e0:	d10f      	bne.n	8004902 <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048ea:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f937 	bl	8004b68 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b02      	cmp	r3, #2
 800490e:	d10d      	bne.n	800492c <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	d106      	bne.n	800492c <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2202      	movs	r2, #2
 8004924:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f8c4 	bl	8004ab4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b04      	cmp	r3, #4
 8004938:	d10d      	bne.n	8004956 <HAL_LPTIM_IRQHandler+0x182>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b04      	cmp	r3, #4
 8004946:	d106      	bne.n	8004956 <HAL_LPTIM_IRQHandler+0x182>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2204      	movs	r2, #4
 800494e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f8b9 	bl	8004ac8 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b08      	cmp	r3, #8
 8004962:	d111      	bne.n	8004988 <HAL_LPTIM_IRQHandler+0x1b4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b08      	cmp	r3, #8
 8004970:	d10a      	bne.n	8004988 <HAL_LPTIM_IRQHandler+0x1b4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2208      	movs	r2, #8
 8004978:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f8aa 	bl	8004adc <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004992:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004996:	d113      	bne.n	80049c0 <HAL_LPTIM_IRQHandler+0x1ec>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049a6:	d10b      	bne.n	80049c0 <HAL_LPTIM_IRQHandler+0x1ec>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80049b0:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f88e 	bl	8004adc <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	2b10      	cmp	r3, #16
 80049cc:	d10d      	bne.n	80049ea <HAL_LPTIM_IRQHandler+0x216>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d106      	bne.n	80049ea <HAL_LPTIM_IRQHandler+0x216>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2210      	movs	r2, #16
 80049e2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f883 	bl	8004af0 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d10d      	bne.n	8004a14 <HAL_LPTIM_IRQHandler+0x240>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d106      	bne.n	8004a14 <HAL_LPTIM_IRQHandler+0x240>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f878 	bl	8004b04 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d10d      	bne.n	8004a3e <HAL_LPTIM_IRQHandler+0x26a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2c:	2b40      	cmp	r3, #64	; 0x40
 8004a2e:	d106      	bne.n	8004a3e <HAL_LPTIM_IRQHandler+0x26a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2240      	movs	r2, #64	; 0x40
 8004a36:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f86d 	bl	8004b18 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a48:	2b80      	cmp	r3, #128	; 0x80
 8004a4a:	d10d      	bne.n	8004a68 <HAL_LPTIM_IRQHandler+0x294>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a56:	2b80      	cmp	r3, #128	; 0x80
 8004a58:	d106      	bne.n	8004a68 <HAL_LPTIM_IRQHandler+0x294>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2280      	movs	r2, #128	; 0x80
 8004a60:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f862 	bl	8004b2c <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a76:	d10f      	bne.n	8004a98 <HAL_LPTIM_IRQHandler+0x2c4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a86:	d107      	bne.n	8004a98 <HAL_LPTIM_IRQHandler+0x2c4>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a90:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f854 	bl	8004b40 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a98:	bf00      	nop
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <LPTIM_WaitForFlag+0x58>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a12      	ldr	r2, [pc, #72]	; (8004bd8 <LPTIM_WaitForFlag+0x5c>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	0b9b      	lsrs	r3, r3, #14
 8004b96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b9a:	fb02 f303 	mul.w	r3, r2, r3
 8004b9e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d002      	beq.n	8004bc6 <LPTIM_WaitForFlag+0x4a>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1ec      	bne.n	8004ba0 <LPTIM_WaitForFlag+0x24>

  return result;
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	20000000 	.word	0x20000000
 8004bd8:	d1b71759 	.word	0xd1b71759

08004bdc <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004bec:	bf00      	nop
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	46020800 	.word	0x46020800

08004bfc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004c04:	4b39      	ldr	r3, [pc, #228]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c0c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d10b      	bne.n	8004c2e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1c:	d905      	bls.n	8004c2a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004c1e:	4b33      	ldr	r3, [pc, #204]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	4a32      	ldr	r2, [pc, #200]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c28:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e057      	b.n	8004cde <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d90a      	bls.n	8004c4c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004c36:	4b2d      	ldr	r3, [pc, #180]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	4a2a      	ldr	r2, [pc, #168]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c48:	60d3      	str	r3, [r2, #12]
 8004c4a:	e007      	b.n	8004c5c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004c4c:	4b27      	ldr	r3, [pc, #156]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c54:	4925      	ldr	r1, [pc, #148]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004c5c:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a24      	ldr	r2, [pc, #144]	; (8004cf4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	099b      	lsrs	r3, r3, #6
 8004c68:	2232      	movs	r2, #50	; 0x32
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	4a21      	ldr	r2, [pc, #132]	; (8004cf4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	099b      	lsrs	r3, r3, #6
 8004c76:	3301      	adds	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004c7a:	e002      	b.n	8004c82 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004c82:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d102      	bne.n	8004c94 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1f3      	bne.n	8004c7c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d01b      	beq.n	8004cd2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004c9a:	4b15      	ldr	r3, [pc, #84]	; (8004cf0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca4:	099b      	lsrs	r3, r3, #6
 8004ca6:	2232      	movs	r2, #50	; 0x32
 8004ca8:	fb02 f303 	mul.w	r3, r2, r3
 8004cac:	4a11      	ldr	r2, [pc, #68]	; (8004cf4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	099b      	lsrs	r3, r3, #6
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004cb8:	e002      	b.n	8004cc0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f3      	bne.n	8004cba <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e000      	b.n	8004cde <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	46020800 	.word	0x46020800
 8004cf0:	20000000 	.word	0x20000000
 8004cf4:	10624dd3 	.word	0x10624dd3

08004cf8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <HAL_PWREx_GetVoltageRange+0x18>)
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	46020800 	.word	0x46020800

08004d14 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004d1c:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <HAL_PWREx_ConfigSupply+0x94>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a22      	ldr	r2, [pc, #136]	; (8004dac <HAL_PWREx_ConfigSupply+0x98>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	2232      	movs	r2, #50	; 0x32
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	4a1f      	ldr	r2, [pc, #124]	; (8004dac <HAL_PWREx_ConfigSupply+0x98>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	099b      	lsrs	r3, r3, #6
 8004d36:	3301      	adds	r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d113      	bne.n	8004d68 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004d40:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	4a1a      	ldr	r2, [pc, #104]	; (8004db0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d46:	f023 0302 	bic.w	r3, r3, #2
 8004d4a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004d4c:	e002      	b.n	8004d54 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004d54:	4b16      	ldr	r3, [pc, #88]	; (8004db0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d116      	bne.n	8004d8e <HAL_PWREx_ConfigSupply+0x7a>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f3      	bne.n	8004d4e <HAL_PWREx_ConfigSupply+0x3a>
 8004d66:	e012      	b.n	8004d8e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004d68:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4a10      	ldr	r2, [pc, #64]	; (8004db0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d6e:	f043 0302 	orr.w	r3, r3, #2
 8004d72:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004d74:	e002      	b.n	8004d7c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <HAL_PWREx_ConfigSupply+0x7a>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f3      	bne.n	8004d76 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e000      	b.n	8004d9a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000000 	.word	0x20000000
 8004dac:	10624dd3 	.word	0x10624dd3
 8004db0:	46020800 	.word	0x46020800

08004db4 <HAL_PWREx_EnterSTOP1Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_0);
 8004dbe:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 0307 	bic.w	r3, r3, #7
 8004dc6:	4a0f      	ldr	r2, [pc, #60]	; (8004e04 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004dce:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	4a0d      	ldr	r2, [pc, #52]	; (8004e08 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004dd4:	f043 0304 	orr.w	r3, r3, #4
 8004dd8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004de0:	bf30      	wfi
 8004de2:	e002      	b.n	8004dea <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004de4:	bf40      	sev
    __WFE();
 8004de6:	bf20      	wfe
    __WFE();
 8004de8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	4a06      	ldr	r2, [pc, #24]	; (8004e08 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004df0:	f023 0304 	bic.w	r3, r3, #4
 8004df4:	6113      	str	r3, [r2, #16]
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	46020800 	.word	0x46020800
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e1a:	6113      	str	r3, [r2, #16]
}
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	46020800 	.word	0x46020800

08004e2c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004e30:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <HAL_PWREx_EnableVddA+0x1c>)
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	4a04      	ldr	r2, [pc, #16]	; (8004e48 <HAL_PWREx_EnableVddA+0x1c>)
 8004e36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e3a:	6113      	str	r3, [r2, #16]
}
 8004e3c:	bf00      	nop
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	46020800 	.word	0x46020800

08004e4c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004e5c:	bf00      	nop
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	46020800 	.word	0x46020800

08004e6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08e      	sub	sp, #56	; 0x38
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	f000 bec8 	b.w	8005c16 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e86:	4b99      	ldr	r3, [pc, #612]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e90:	4b96      	ldr	r3, [pc, #600]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 816c 	beq.w	8005180 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <HAL_RCC_OscConfig+0x52>
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	2b0c      	cmp	r3, #12
 8004eb2:	f040 80de 	bne.w	8005072 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	f040 80da 	bne.w	8005072 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f000 bea5 	b.w	8005c16 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed0:	4b86      	ldr	r3, [pc, #536]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d004      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x7a>
 8004edc:	4b83      	ldr	r3, [pc, #524]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004ee4:	e005      	b.n	8004ef2 <HAL_RCC_OscConfig+0x86>
 8004ee6:	4b81      	ldr	r3, [pc, #516]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d255      	bcs.n	8004fa2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	4618      	mov	r0, r3
 8004f02:	f001 fa17 	bl	8006334 <RCC_SetFlashLatencyFromMSIRange>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f000 be82 	b.w	8005c16 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004f12:	4b76      	ldr	r3, [pc, #472]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	4a75      	ldr	r2, [pc, #468]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004f18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f1c:	6093      	str	r3, [r2, #8]
 8004f1e:	4b73      	ldr	r3, [pc, #460]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	4970      	ldr	r1, [pc, #448]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004f38:	d309      	bcc.n	8004f4e <HAL_RCC_OscConfig+0xe2>
 8004f3a:	4b6c      	ldr	r3, [pc, #432]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f023 021f 	bic.w	r2, r3, #31
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	4969      	ldr	r1, [pc, #420]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60cb      	str	r3, [r1, #12]
 8004f4c:	e07e      	b.n	800504c <HAL_RCC_OscConfig+0x1e0>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	da0a      	bge.n	8004f6c <HAL_RCC_OscConfig+0x100>
 8004f56:	4b65      	ldr	r3, [pc, #404]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	015b      	lsls	r3, r3, #5
 8004f64:	4961      	ldr	r1, [pc, #388]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60cb      	str	r3, [r1, #12]
 8004f6a:	e06f      	b.n	800504c <HAL_RCC_OscConfig+0x1e0>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f74:	d30a      	bcc.n	8004f8c <HAL_RCC_OscConfig+0x120>
 8004f76:	4b5d      	ldr	r3, [pc, #372]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	029b      	lsls	r3, r3, #10
 8004f84:	4959      	ldr	r1, [pc, #356]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60cb      	str	r3, [r1, #12]
 8004f8a:	e05f      	b.n	800504c <HAL_RCC_OscConfig+0x1e0>
 8004f8c:	4b57      	ldr	r3, [pc, #348]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	03db      	lsls	r3, r3, #15
 8004f9a:	4954      	ldr	r1, [pc, #336]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60cb      	str	r3, [r1, #12]
 8004fa0:	e054      	b.n	800504c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004fa2:	4b52      	ldr	r3, [pc, #328]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	4a51      	ldr	r2, [pc, #324]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004fa8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fac:	6093      	str	r3, [r2, #8]
 8004fae:	4b4f      	ldr	r3, [pc, #316]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	494c      	ldr	r1, [pc, #304]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004fc8:	d309      	bcc.n	8004fde <HAL_RCC_OscConfig+0x172>
 8004fca:	4b48      	ldr	r3, [pc, #288]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f023 021f 	bic.w	r2, r3, #31
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	4945      	ldr	r1, [pc, #276]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60cb      	str	r3, [r1, #12]
 8004fdc:	e028      	b.n	8005030 <HAL_RCC_OscConfig+0x1c4>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	da0a      	bge.n	8004ffc <HAL_RCC_OscConfig+0x190>
 8004fe6:	4b41      	ldr	r3, [pc, #260]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	015b      	lsls	r3, r3, #5
 8004ff4:	493d      	ldr	r1, [pc, #244]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60cb      	str	r3, [r1, #12]
 8004ffa:	e019      	b.n	8005030 <HAL_RCC_OscConfig+0x1c4>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005004:	d30a      	bcc.n	800501c <HAL_RCC_OscConfig+0x1b0>
 8005006:	4b39      	ldr	r3, [pc, #228]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	029b      	lsls	r3, r3, #10
 8005014:	4935      	ldr	r1, [pc, #212]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8005016:	4313      	orrs	r3, r2
 8005018:	60cb      	str	r3, [r1, #12]
 800501a:	e009      	b.n	8005030 <HAL_RCC_OscConfig+0x1c4>
 800501c:	4b33      	ldr	r3, [pc, #204]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	03db      	lsls	r3, r3, #15
 800502a:	4930      	ldr	r1, [pc, #192]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 800502c:	4313      	orrs	r3, r2
 800502e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	4618      	mov	r0, r3
 800503c:	f001 f97a 	bl	8006334 <RCC_SetFlashLatencyFromMSIRange>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	f000 bde5 	b.w	8005c16 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800504c:	f001 f8e4 	bl	8006218 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005050:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <HAL_RCC_OscConfig+0x284>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f7fc fb8d 	bl	8001774 <HAL_InitTick>
 800505a:	4603      	mov	r3, r0
 800505c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8005060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 808a 	beq.w	800517e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800506a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800506e:	f000 bdd2 	b.w	8005c16 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d066      	beq.n	8005148 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800507a:	4b1c      	ldr	r3, [pc, #112]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1b      	ldr	r2, [pc, #108]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005086:	f7fc fd13 	bl	8001ab0 <HAL_GetTick>
 800508a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800508c:	e009      	b.n	80050a2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800508e:	f7fc fd0f 	bl	8001ab0 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d902      	bls.n	80050a2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	f000 bdba 	b.w	8005c16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0ef      	beq.n	800508e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80050ae:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	4a0e      	ldr	r2, [pc, #56]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 80050b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050b8:	6093      	str	r3, [r2, #8]
 80050ba:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	4909      	ldr	r1, [pc, #36]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80050d4:	d30e      	bcc.n	80050f4 <HAL_RCC_OscConfig+0x288>
 80050d6:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f023 021f 	bic.w	r2, r3, #31
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	4902      	ldr	r1, [pc, #8]	; (80050ec <HAL_RCC_OscConfig+0x280>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60cb      	str	r3, [r1, #12]
 80050e8:	e04a      	b.n	8005180 <HAL_RCC_OscConfig+0x314>
 80050ea:	bf00      	nop
 80050ec:	46020c00 	.word	0x46020c00
 80050f0:	20000004 	.word	0x20000004
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	da0a      	bge.n	8005112 <HAL_RCC_OscConfig+0x2a6>
 80050fc:	4b98      	ldr	r3, [pc, #608]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	015b      	lsls	r3, r3, #5
 800510a:	4995      	ldr	r1, [pc, #596]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 800510c:	4313      	orrs	r3, r2
 800510e:	60cb      	str	r3, [r1, #12]
 8005110:	e036      	b.n	8005180 <HAL_RCC_OscConfig+0x314>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511a:	d30a      	bcc.n	8005132 <HAL_RCC_OscConfig+0x2c6>
 800511c:	4b90      	ldr	r3, [pc, #576]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	029b      	lsls	r3, r3, #10
 800512a:	498d      	ldr	r1, [pc, #564]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 800512c:	4313      	orrs	r3, r2
 800512e:	60cb      	str	r3, [r1, #12]
 8005130:	e026      	b.n	8005180 <HAL_RCC_OscConfig+0x314>
 8005132:	4b8b      	ldr	r3, [pc, #556]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	03db      	lsls	r3, r3, #15
 8005140:	4987      	ldr	r1, [pc, #540]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005142:	4313      	orrs	r3, r2
 8005144:	60cb      	str	r3, [r1, #12]
 8005146:	e01b      	b.n	8005180 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005148:	4b85      	ldr	r3, [pc, #532]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a84      	ldr	r2, [pc, #528]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 800514e:	f023 0301 	bic.w	r3, r3, #1
 8005152:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005154:	f7fc fcac 	bl	8001ab0 <HAL_GetTick>
 8005158:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800515a:	e009      	b.n	8005170 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800515c:	f7fc fca8 	bl	8001ab0 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d902      	bls.n	8005170 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	f000 bd53 	b.w	8005c16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005170:	4b7b      	ldr	r3, [pc, #492]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1ef      	bne.n	800515c <HAL_RCC_OscConfig+0x2f0>
 800517c:	e000      	b.n	8005180 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800517e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 808b 	beq.w	80052a4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	2b08      	cmp	r3, #8
 8005192:	d005      	beq.n	80051a0 <HAL_RCC_OscConfig+0x334>
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	2b0c      	cmp	r3, #12
 8005198:	d109      	bne.n	80051ae <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	2b03      	cmp	r3, #3
 800519e:	d106      	bne.n	80051ae <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d17d      	bne.n	80052a4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f000 bd34 	b.w	8005c16 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b6:	d106      	bne.n	80051c6 <HAL_RCC_OscConfig+0x35a>
 80051b8:	4b69      	ldr	r3, [pc, #420]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a68      	ldr	r2, [pc, #416]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 80051be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	e041      	b.n	800524a <HAL_RCC_OscConfig+0x3de>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051ce:	d112      	bne.n	80051f6 <HAL_RCC_OscConfig+0x38a>
 80051d0:	4b63      	ldr	r3, [pc, #396]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a62      	ldr	r2, [pc, #392]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 80051d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	4b60      	ldr	r3, [pc, #384]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a5f      	ldr	r2, [pc, #380]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 80051e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	4b5d      	ldr	r3, [pc, #372]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a5c      	ldr	r2, [pc, #368]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 80051ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	e029      	b.n	800524a <HAL_RCC_OscConfig+0x3de>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80051fe:	d112      	bne.n	8005226 <HAL_RCC_OscConfig+0x3ba>
 8005200:	4b57      	ldr	r3, [pc, #348]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a56      	ldr	r2, [pc, #344]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005206:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	4b54      	ldr	r3, [pc, #336]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a53      	ldr	r2, [pc, #332]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	4b51      	ldr	r3, [pc, #324]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a50      	ldr	r2, [pc, #320]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 800521e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	e011      	b.n	800524a <HAL_RCC_OscConfig+0x3de>
 8005226:	4b4e      	ldr	r3, [pc, #312]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a4d      	ldr	r2, [pc, #308]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 800522c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	4b4b      	ldr	r3, [pc, #300]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a4a      	ldr	r2, [pc, #296]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	4b48      	ldr	r3, [pc, #288]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a47      	ldr	r2, [pc, #284]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005244:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005248:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d014      	beq.n	800527c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005252:	f7fc fc2d 	bl	8001ab0 <HAL_GetTick>
 8005256:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005258:	e009      	b.n	800526e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800525a:	f7fc fc29 	bl	8001ab0 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b64      	cmp	r3, #100	; 0x64
 8005266:	d902      	bls.n	800526e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	f000 bcd4 	b.w	8005c16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800526e:	4b3c      	ldr	r3, [pc, #240]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0ef      	beq.n	800525a <HAL_RCC_OscConfig+0x3ee>
 800527a:	e013      	b.n	80052a4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800527c:	f7fc fc18 	bl	8001ab0 <HAL_GetTick>
 8005280:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005282:	e009      	b.n	8005298 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005284:	f7fc fc14 	bl	8001ab0 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b64      	cmp	r3, #100	; 0x64
 8005290:	d902      	bls.n	8005298 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	f000 bcbf 	b.w	8005c16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005298:	4b31      	ldr	r3, [pc, #196]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1ef      	bne.n	8005284 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d05f      	beq.n	8005370 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d005      	beq.n	80052c2 <HAL_RCC_OscConfig+0x456>
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	2b0c      	cmp	r3, #12
 80052ba:	d114      	bne.n	80052e6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d111      	bne.n	80052e6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d102      	bne.n	80052d0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f000 bca3 	b.w	8005c16 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80052d0:	4b23      	ldr	r3, [pc, #140]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	041b      	lsls	r3, r3, #16
 80052de:	4920      	ldr	r1, [pc, #128]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80052e4:	e044      	b.n	8005370 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d024      	beq.n	8005338 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80052ee:	4b1c      	ldr	r3, [pc, #112]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 80052f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80052fa:	f7fc fbd9 	bl	8001ab0 <HAL_GetTick>
 80052fe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005300:	e009      	b.n	8005316 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005302:	f7fc fbd5 	bl	8001ab0 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d902      	bls.n	8005316 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	f000 bc80 	b.w	8005c16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005316:	4b12      	ldr	r3, [pc, #72]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0ef      	beq.n	8005302 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	041b      	lsls	r3, r3, #16
 8005330:	490b      	ldr	r1, [pc, #44]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 8005332:	4313      	orrs	r3, r2
 8005334:	610b      	str	r3, [r1, #16]
 8005336:	e01b      	b.n	8005370 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005338:	4b09      	ldr	r3, [pc, #36]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a08      	ldr	r2, [pc, #32]	; (8005360 <HAL_RCC_OscConfig+0x4f4>)
 800533e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005342:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005344:	f7fc fbb4 	bl	8001ab0 <HAL_GetTick>
 8005348:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800534a:	e00b      	b.n	8005364 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800534c:	f7fc fbb0 	bl	8001ab0 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d904      	bls.n	8005364 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	f000 bc5b 	b.w	8005c16 <HAL_RCC_OscConfig+0xdaa>
 8005360:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005364:	4baf      	ldr	r3, [pc, #700]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1ed      	bne.n	800534c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80c8 	beq.w	800550e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800537e:	2300      	movs	r3, #0
 8005380:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005384:	4ba7      	ldr	r3, [pc, #668]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 8005386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b00      	cmp	r3, #0
 8005390:	d111      	bne.n	80053b6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005392:	4ba4      	ldr	r3, [pc, #656]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 8005394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005398:	4aa2      	ldr	r2, [pc, #648]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 800539a:	f043 0304 	orr.w	r3, r3, #4
 800539e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80053a2:	4ba0      	ldr	r3, [pc, #640]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80053a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80053b6:	4b9c      	ldr	r3, [pc, #624]	; (8005628 <HAL_RCC_OscConfig+0x7bc>)
 80053b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d119      	bne.n	80053f6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80053c2:	4b99      	ldr	r3, [pc, #612]	; (8005628 <HAL_RCC_OscConfig+0x7bc>)
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	4a98      	ldr	r2, [pc, #608]	; (8005628 <HAL_RCC_OscConfig+0x7bc>)
 80053c8:	f043 0301 	orr.w	r3, r3, #1
 80053cc:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ce:	f7fc fb6f 	bl	8001ab0 <HAL_GetTick>
 80053d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80053d4:	e009      	b.n	80053ea <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d6:	f7fc fb6b 	bl	8001ab0 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d902      	bls.n	80053ea <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	f000 bc16 	b.w	8005c16 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80053ea:	4b8f      	ldr	r3, [pc, #572]	; (8005628 <HAL_RCC_OscConfig+0x7bc>)
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0ef      	beq.n	80053d6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d05f      	beq.n	80054be <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80053fe:	4b89      	ldr	r3, [pc, #548]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 8005400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005404:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005410:	429a      	cmp	r2, r3
 8005412:	d037      	beq.n	8005484 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d006      	beq.n	800542c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e3f4      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01b      	beq.n	800546e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005436:	4b7b      	ldr	r3, [pc, #492]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 8005438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800543c:	4a79      	ldr	r2, [pc, #484]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 800543e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005442:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8005446:	f7fc fb33 	bl	8001ab0 <HAL_GetTick>
 800544a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800544e:	f7fc fb2f 	bl	8001ab0 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b05      	cmp	r3, #5
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e3da      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005460:	4b70      	ldr	r3, [pc, #448]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 8005462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1ef      	bne.n	800544e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800546e:	4b6d      	ldr	r3, [pc, #436]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 8005470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005474:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	4969      	ldr	r1, [pc, #420]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005484:	4b67      	ldr	r3, [pc, #412]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 8005486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800548a:	4a66      	ldr	r2, [pc, #408]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 800548c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005490:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005494:	f7fc fb0c 	bl	8001ab0 <HAL_GetTick>
 8005498:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800549c:	f7fc fb08 	bl	8001ab0 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e3b3      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80054ae:	4b5d      	ldr	r3, [pc, #372]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80054b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0ef      	beq.n	800549c <HAL_RCC_OscConfig+0x630>
 80054bc:	e01b      	b.n	80054f6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80054be:	4b59      	ldr	r3, [pc, #356]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80054c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054c4:	4a57      	ldr	r2, [pc, #348]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80054c6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80054ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80054ce:	f7fc faef 	bl	8001ab0 <HAL_GetTick>
 80054d2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d6:	f7fc faeb 	bl	8001ab0 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b05      	cmp	r3, #5
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e396      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80054e8:	4b4e      	ldr	r3, [pc, #312]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80054ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1ef      	bne.n	80054d6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054f6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d107      	bne.n	800550e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054fe:	4b49      	ldr	r3, [pc, #292]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 8005500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005504:	4a47      	ldr	r2, [pc, #284]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 8005506:	f023 0304 	bic.w	r3, r3, #4
 800550a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8111 	beq.w	800573e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800551c:	2300      	movs	r3, #0
 800551e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005522:	4b40      	ldr	r3, [pc, #256]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 8005524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d111      	bne.n	8005554 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005530:	4b3c      	ldr	r3, [pc, #240]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 8005532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005536:	4a3b      	ldr	r2, [pc, #236]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 8005538:	f043 0304 	orr.w	r3, r3, #4
 800553c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005540:	4b38      	ldr	r3, [pc, #224]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 8005542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005554:	4b34      	ldr	r3, [pc, #208]	; (8005628 <HAL_RCC_OscConfig+0x7bc>)
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d118      	bne.n	8005592 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005560:	4b31      	ldr	r3, [pc, #196]	; (8005628 <HAL_RCC_OscConfig+0x7bc>)
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	4a30      	ldr	r2, [pc, #192]	; (8005628 <HAL_RCC_OscConfig+0x7bc>)
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800556c:	f7fc faa0 	bl	8001ab0 <HAL_GetTick>
 8005570:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005574:	f7fc fa9c 	bl	8001ab0 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e347      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005586:	4b28      	ldr	r3, [pc, #160]	; (8005628 <HAL_RCC_OscConfig+0x7bc>)
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f0      	beq.n	8005574 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d01f      	beq.n	80055de <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d010      	beq.n	80055cc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80055aa:	4b1e      	ldr	r3, [pc, #120]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80055ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055b0:	4a1c      	ldr	r2, [pc, #112]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80055b2:	f043 0304 	orr.w	r3, r3, #4
 80055b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80055ba:	4b1a      	ldr	r3, [pc, #104]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80055bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055c0:	4a18      	ldr	r2, [pc, #96]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80055ca:	e018      	b.n	80055fe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80055cc:	4b15      	ldr	r3, [pc, #84]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80055ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055d2:	4a14      	ldr	r2, [pc, #80]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80055dc:	e00f      	b.n	80055fe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80055de:	4b11      	ldr	r3, [pc, #68]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80055e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055e4:	4a0f      	ldr	r2, [pc, #60]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80055e6:	f023 0301 	bic.w	r3, r3, #1
 80055ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80055ee:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80055f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055f4:	4a0b      	ldr	r2, [pc, #44]	; (8005624 <HAL_RCC_OscConfig+0x7b8>)
 80055f6:	f023 0304 	bic.w	r3, r3, #4
 80055fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d057      	beq.n	80056b6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005606:	f7fc fa53 	bl	8001ab0 <HAL_GetTick>
 800560a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800560c:	e00e      	b.n	800562c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800560e:	f7fc fa4f 	bl	8001ab0 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	f241 3288 	movw	r2, #5000	; 0x1388
 800561c:	4293      	cmp	r3, r2
 800561e:	d905      	bls.n	800562c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e2f8      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
 8005624:	46020c00 	.word	0x46020c00
 8005628:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800562c:	4b9c      	ldr	r3, [pc, #624]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 800562e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0e9      	beq.n	800560e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01b      	beq.n	800567e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005646:	4b96      	ldr	r3, [pc, #600]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800564c:	4a94      	ldr	r2, [pc, #592]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 800564e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005652:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005656:	e00a      	b.n	800566e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005658:	f7fc fa2a 	bl	8001ab0 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	f241 3288 	movw	r2, #5000	; 0x1388
 8005666:	4293      	cmp	r3, r2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e2d3      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800566e:	4b8c      	ldr	r3, [pc, #560]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0ed      	beq.n	8005658 <HAL_RCC_OscConfig+0x7ec>
 800567c:	e053      	b.n	8005726 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800567e:	4b88      	ldr	r3, [pc, #544]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005684:	4a86      	ldr	r2, [pc, #536]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800568a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800568e:	e00a      	b.n	80056a6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005690:	f7fc fa0e 	bl	8001ab0 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	f241 3288 	movw	r2, #5000	; 0x1388
 800569e:	4293      	cmp	r3, r2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e2b7      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80056a6:	4b7e      	ldr	r3, [pc, #504]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 80056a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1ed      	bne.n	8005690 <HAL_RCC_OscConfig+0x824>
 80056b4:	e037      	b.n	8005726 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80056b6:	f7fc f9fb 	bl	8001ab0 <HAL_GetTick>
 80056ba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056bc:	e00a      	b.n	80056d4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056be:	f7fc f9f7 	bl	8001ab0 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e2a0      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056d4:	4b72      	ldr	r3, [pc, #456]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 80056d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1ed      	bne.n	80056be <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80056e2:	4b6f      	ldr	r3, [pc, #444]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 80056e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01a      	beq.n	8005726 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056f0:	4b6b      	ldr	r3, [pc, #428]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 80056f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056f6:	4a6a      	ldr	r2, [pc, #424]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 80056f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005700:	e00a      	b.n	8005718 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005702:	f7fc f9d5 	bl	8001ab0 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005710:	4293      	cmp	r3, r2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e27e      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005718:	4b61      	ldr	r3, [pc, #388]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 800571a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800571e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1ed      	bne.n	8005702 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005726:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800572a:	2b01      	cmp	r3, #1
 800572c:	d107      	bne.n	800573e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800572e:	4b5c      	ldr	r3, [pc, #368]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005734:	4a5a      	ldr	r2, [pc, #360]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005736:	f023 0304 	bic.w	r3, r3, #4
 800573a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d036      	beq.n	80057b8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d019      	beq.n	8005786 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005752:	4b53      	ldr	r3, [pc, #332]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a52      	ldr	r2, [pc, #328]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800575c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800575e:	f7fc f9a7 	bl	8001ab0 <HAL_GetTick>
 8005762:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005766:	f7fc f9a3 	bl	8001ab0 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e24e      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005778:	4b49      	ldr	r3, [pc, #292]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0f0      	beq.n	8005766 <HAL_RCC_OscConfig+0x8fa>
 8005784:	e018      	b.n	80057b8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005786:	4b46      	ldr	r3, [pc, #280]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a45      	ldr	r2, [pc, #276]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 800578c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005790:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005792:	f7fc f98d 	bl	8001ab0 <HAL_GetTick>
 8005796:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005798:	e008      	b.n	80057ac <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800579a:	f7fc f989 	bl	8001ab0 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e234      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80057ac:	4b3c      	ldr	r3, [pc, #240]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1f0      	bne.n	800579a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d036      	beq.n	8005832 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d019      	beq.n	8005800 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80057cc:	4b34      	ldr	r3, [pc, #208]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a33      	ldr	r2, [pc, #204]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 80057d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80057d8:	f7fc f96a 	bl	8001ab0 <HAL_GetTick>
 80057dc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80057e0:	f7fc f966 	bl	8001ab0 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e211      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80057f2:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0f0      	beq.n	80057e0 <HAL_RCC_OscConfig+0x974>
 80057fe:	e018      	b.n	8005832 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005800:	4b27      	ldr	r3, [pc, #156]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a26      	ldr	r2, [pc, #152]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800580a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800580c:	f7fc f950 	bl	8001ab0 <HAL_GetTick>
 8005810:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005814:	f7fc f94c 	bl	8001ab0 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e1f7      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005826:	4b1e      	ldr	r3, [pc, #120]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f0      	bne.n	8005814 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d07f      	beq.n	800593e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005842:	2b00      	cmp	r3, #0
 8005844:	d062      	beq.n	800590c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005846:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	4a15      	ldr	r2, [pc, #84]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 800584c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005850:	6093      	str	r3, [r2, #8]
 8005852:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	4910      	ldr	r1, [pc, #64]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005860:	4313      	orrs	r3, r2
 8005862:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800586c:	d309      	bcc.n	8005882 <HAL_RCC_OscConfig+0xa16>
 800586e:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f023 021f 	bic.w	r2, r3, #31
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	4909      	ldr	r1, [pc, #36]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 800587c:	4313      	orrs	r3, r2
 800587e:	60cb      	str	r3, [r1, #12]
 8005880:	e02a      	b.n	80058d8 <HAL_RCC_OscConfig+0xa6c>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	da0c      	bge.n	80058a4 <HAL_RCC_OscConfig+0xa38>
 800588a:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	015b      	lsls	r3, r3, #5
 8005898:	4901      	ldr	r1, [pc, #4]	; (80058a0 <HAL_RCC_OscConfig+0xa34>)
 800589a:	4313      	orrs	r3, r2
 800589c:	60cb      	str	r3, [r1, #12]
 800589e:	e01b      	b.n	80058d8 <HAL_RCC_OscConfig+0xa6c>
 80058a0:	46020c00 	.word	0x46020c00
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ac:	d30a      	bcc.n	80058c4 <HAL_RCC_OscConfig+0xa58>
 80058ae:	4ba1      	ldr	r3, [pc, #644]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	029b      	lsls	r3, r3, #10
 80058bc:	499d      	ldr	r1, [pc, #628]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	60cb      	str	r3, [r1, #12]
 80058c2:	e009      	b.n	80058d8 <HAL_RCC_OscConfig+0xa6c>
 80058c4:	4b9b      	ldr	r3, [pc, #620]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	03db      	lsls	r3, r3, #15
 80058d2:	4998      	ldr	r1, [pc, #608]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80058d8:	4b96      	ldr	r3, [pc, #600]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a95      	ldr	r2, [pc, #596]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 80058de:	f043 0310 	orr.w	r3, r3, #16
 80058e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80058e4:	f7fc f8e4 	bl	8001ab0 <HAL_GetTick>
 80058e8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80058ec:	f7fc f8e0 	bl	8001ab0 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e18b      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80058fe:	4b8d      	ldr	r3, [pc, #564]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0xa80>
 800590a:	e018      	b.n	800593e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800590c:	4b89      	ldr	r3, [pc, #548]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a88      	ldr	r2, [pc, #544]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005912:	f023 0310 	bic.w	r3, r3, #16
 8005916:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005918:	f7fc f8ca 	bl	8001ab0 <HAL_GetTick>
 800591c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005920:	f7fc f8c6 	bl	8001ab0 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e171      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005932:	4b80      	ldr	r3, [pc, #512]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 8166 	beq.w	8005c14 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005948:	2300      	movs	r3, #0
 800594a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800594e:	4b79      	ldr	r3, [pc, #484]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	2b0c      	cmp	r3, #12
 8005958:	f000 80f2 	beq.w	8005b40 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	2b02      	cmp	r3, #2
 8005962:	f040 80c5 	bne.w	8005af0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005966:	4b73      	ldr	r3, [pc, #460]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a72      	ldr	r2, [pc, #456]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 800596c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005970:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005972:	f7fc f89d 	bl	8001ab0 <HAL_GetTick>
 8005976:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800597a:	f7fc f899 	bl	8001ab0 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e144      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800598c:	4b69      	ldr	r3, [pc, #420]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f0      	bne.n	800597a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005998:	4b66      	ldr	r3, [pc, #408]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 800599a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d111      	bne.n	80059ca <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80059a6:	4b63      	ldr	r3, [pc, #396]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 80059a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ac:	4a61      	ldr	r2, [pc, #388]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 80059ae:	f043 0304 	orr.w	r3, r3, #4
 80059b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80059b6:	4b5f      	ldr	r3, [pc, #380]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 80059b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80059c4:	2301      	movs	r3, #1
 80059c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80059ca:	4b5b      	ldr	r3, [pc, #364]	; (8005b38 <HAL_RCC_OscConfig+0xccc>)
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059d6:	d102      	bne.n	80059de <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80059de:	4b56      	ldr	r3, [pc, #344]	; (8005b38 <HAL_RCC_OscConfig+0xccc>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	4a55      	ldr	r2, [pc, #340]	; (8005b38 <HAL_RCC_OscConfig+0xccc>)
 80059e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059e8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80059ea:	4b52      	ldr	r3, [pc, #328]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059f2:	f023 0303 	bic.w	r3, r3, #3
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80059fe:	3a01      	subs	r2, #1
 8005a00:	0212      	lsls	r2, r2, #8
 8005a02:	4311      	orrs	r1, r2
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	494a      	ldr	r1, [pc, #296]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	628b      	str	r3, [r1, #40]	; 0x28
 8005a10:	4b48      	ldr	r3, [pc, #288]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a14:	4b49      	ldr	r3, [pc, #292]	; (8005b3c <HAL_RCC_OscConfig+0xcd0>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a1c:	3a01      	subs	r2, #1
 8005a1e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005a26:	3a01      	subs	r2, #1
 8005a28:	0252      	lsls	r2, r2, #9
 8005a2a:	b292      	uxth	r2, r2
 8005a2c:	4311      	orrs	r1, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a32:	3a01      	subs	r2, #1
 8005a34:	0412      	lsls	r2, r2, #16
 8005a36:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005a3a:	4311      	orrs	r1, r2
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005a40:	3a01      	subs	r2, #1
 8005a42:	0612      	lsls	r2, r2, #24
 8005a44:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	493a      	ldr	r1, [pc, #232]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005a50:	4b38      	ldr	r3, [pc, #224]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	4a37      	ldr	r2, [pc, #220]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005a56:	f023 0310 	bic.w	r3, r3, #16
 8005a5a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a60:	4a34      	ldr	r2, [pc, #208]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005a66:	4b33      	ldr	r3, [pc, #204]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	4a32      	ldr	r2, [pc, #200]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005a6c:	f043 0310 	orr.w	r3, r3, #16
 8005a70:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005a72:	4b30      	ldr	r3, [pc, #192]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a76:	f023 020c 	bic.w	r2, r3, #12
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7e:	492d      	ldr	r1, [pc, #180]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005a84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d105      	bne.n	8005a98 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005a8c:	4b2a      	ldr	r3, [pc, #168]	; (8005b38 <HAL_RCC_OscConfig+0xccc>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4a29      	ldr	r2, [pc, #164]	; (8005b38 <HAL_RCC_OscConfig+0xccc>)
 8005a92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a96:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005a98:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d107      	bne.n	8005ab0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005aa0:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aa6:	4a23      	ldr	r2, [pc, #140]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005aa8:	f023 0304 	bic.w	r3, r3, #4
 8005aac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ab0:	4b20      	ldr	r3, [pc, #128]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	4a1f      	ldr	r2, [pc, #124]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005ab6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aba:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005abc:	4b1d      	ldr	r3, [pc, #116]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1c      	ldr	r2, [pc, #112]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ac6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005ac8:	f7fb fff2 	bl	8001ab0 <HAL_GetTick>
 8005acc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fb ffee 	bl	8001ab0 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e099      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005ae2:	4b14      	ldr	r3, [pc, #80]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCC_OscConfig+0xc64>
 8005aee:	e091      	b.n	8005c14 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005af0:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a0f      	ldr	r2, [pc, #60]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005afa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005afc:	f7fb ffd8 	bl	8001ab0 <HAL_GetTick>
 8005b00:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b04:	f7fb ffd4 	bl	8001ab0 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e07f      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b16:	4b07      	ldr	r3, [pc, #28]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005b22:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	4a03      	ldr	r2, [pc, #12]	; (8005b34 <HAL_RCC_OscConfig+0xcc8>)
 8005b28:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005b2c:	f023 0303 	bic.w	r3, r3, #3
 8005b30:	6293      	str	r3, [r2, #40]	; 0x28
 8005b32:	e06f      	b.n	8005c14 <HAL_RCC_OscConfig+0xda8>
 8005b34:	46020c00 	.word	0x46020c00
 8005b38:	46020800 	.word	0x46020800
 8005b3c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005b40:	4b37      	ldr	r3, [pc, #220]	; (8005c20 <HAL_RCC_OscConfig+0xdb4>)
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b46:	4b36      	ldr	r3, [pc, #216]	; (8005c20 <HAL_RCC_OscConfig+0xdb4>)
 8005b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d039      	beq.n	8005bc8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f003 0203 	and.w	r2, r3, #3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d132      	bne.n	8005bc8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	0a1b      	lsrs	r3, r3, #8
 8005b66:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d129      	bne.n	8005bc8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d122      	bne.n	8005bc8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d11a      	bne.n	8005bc8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	0a5b      	lsrs	r3, r3, #9
 8005b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b9e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d111      	bne.n	8005bc8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	0c1b      	lsrs	r3, r3, #16
 8005ba8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d108      	bne.n	8005bc8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	0e1b      	lsrs	r3, r3, #24
 8005bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d001      	beq.n	8005bcc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e024      	b.n	8005c16 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005bcc:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <HAL_RCC_OscConfig+0xdb4>)
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	08db      	lsrs	r3, r3, #3
 8005bd2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d01a      	beq.n	8005c14 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005bde:	4b10      	ldr	r3, [pc, #64]	; (8005c20 <HAL_RCC_OscConfig+0xdb4>)
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	4a0f      	ldr	r2, [pc, #60]	; (8005c20 <HAL_RCC_OscConfig+0xdb4>)
 8005be4:	f023 0310 	bic.w	r3, r3, #16
 8005be8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bea:	f7fb ff61 	bl	8001ab0 <HAL_GetTick>
 8005bee:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005bf0:	bf00      	nop
 8005bf2:	f7fb ff5d 	bl	8001ab0 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d0f9      	beq.n	8005bf2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c02:	4a07      	ldr	r2, [pc, #28]	; (8005c20 <HAL_RCC_OscConfig+0xdb4>)
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <HAL_RCC_OscConfig+0xdb4>)
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	4a04      	ldr	r2, [pc, #16]	; (8005c20 <HAL_RCC_OscConfig+0xdb4>)
 8005c0e:	f043 0310 	orr.w	r3, r3, #16
 8005c12:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3738      	adds	r7, #56	; 0x38
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	46020c00 	.word	0x46020c00

08005c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e1d9      	b.n	8005fec <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c38:	4b9b      	ldr	r3, [pc, #620]	; (8005ea8 <HAL_RCC_ClockConfig+0x284>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d910      	bls.n	8005c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c46:	4b98      	ldr	r3, [pc, #608]	; (8005ea8 <HAL_RCC_ClockConfig+0x284>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f023 020f 	bic.w	r2, r3, #15
 8005c4e:	4996      	ldr	r1, [pc, #600]	; (8005ea8 <HAL_RCC_ClockConfig+0x284>)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c56:	4b94      	ldr	r3, [pc, #592]	; (8005ea8 <HAL_RCC_ClockConfig+0x284>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d001      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e1c1      	b.n	8005fec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d010      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	695a      	ldr	r2, [r3, #20]
 8005c78:	4b8c      	ldr	r3, [pc, #560]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d908      	bls.n	8005c96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005c84:	4b89      	ldr	r3, [pc, #548]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	4986      	ldr	r1, [pc, #536]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d012      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	4b81      	ldr	r3, [pc, #516]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	091b      	lsrs	r3, r3, #4
 8005cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d909      	bls.n	8005cc8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005cb4:	4b7d      	ldr	r3, [pc, #500]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	497a      	ldr	r1, [pc, #488]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d010      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	4b74      	ldr	r3, [pc, #464]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d908      	bls.n	8005cf6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005ce4:	4b71      	ldr	r3, [pc, #452]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	496e      	ldr	r1, [pc, #440]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d010      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	4b69      	ldr	r3, [pc, #420]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d908      	bls.n	8005d24 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005d12:	4b66      	ldr	r3, [pc, #408]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f023 020f 	bic.w	r2, r3, #15
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	4963      	ldr	r1, [pc, #396]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80d2 	beq.w	8005ed6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005d32:	2300      	movs	r3, #0
 8005d34:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d143      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d3e:	4b5b      	ldr	r3, [pc, #364]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d110      	bne.n	8005d6e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005d4c:	4b57      	ldr	r3, [pc, #348]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d52:	4a56      	ldr	r2, [pc, #344]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005d54:	f043 0304 	orr.w	r3, r3, #4
 8005d58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005d5c:	4b53      	ldr	r3, [pc, #332]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d62:	f003 0304 	and.w	r3, r3, #4
 8005d66:	60bb      	str	r3, [r7, #8]
 8005d68:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005d6e:	f7fb fe9f 	bl	8001ab0 <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005d74:	4b4e      	ldr	r3, [pc, #312]	; (8005eb0 <HAL_RCC_ClockConfig+0x28c>)
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00f      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005d82:	f7fb fe95 	bl	8001ab0 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e12b      	b.n	8005fec <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005d94:	4b46      	ldr	r3, [pc, #280]	; (8005eb0 <HAL_RCC_ClockConfig+0x28c>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0f0      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d107      	bne.n	8005db6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005da6:	4b41      	ldr	r3, [pc, #260]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dac:	4a3f      	ldr	r2, [pc, #252]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005dae:	f023 0304 	bic.w	r3, r3, #4
 8005db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005db6:	4b3d      	ldr	r3, [pc, #244]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d121      	bne.n	8005e06 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e112      	b.n	8005fec <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d107      	bne.n	8005dde <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dce:	4b37      	ldr	r3, [pc, #220]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d115      	bne.n	8005e06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e106      	b.n	8005fec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d107      	bne.n	8005df6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005de6:	4b31      	ldr	r3, [pc, #196]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d109      	bne.n	8005e06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e0fa      	b.n	8005fec <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005df6:	4b2d      	ldr	r3, [pc, #180]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e0f2      	b.n	8005fec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005e06:	4b29      	ldr	r3, [pc, #164]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f023 0203 	bic.w	r2, r3, #3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	4926      	ldr	r1, [pc, #152]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005e18:	f7fb fe4a 	bl	8001ab0 <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d112      	bne.n	8005e4c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e26:	e00a      	b.n	8005e3e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e28:	f7fb fe42 	bl	8001ab0 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e0d6      	b.n	8005fec <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e3e:	4b1b      	ldr	r3, [pc, #108]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	f003 030c 	and.w	r3, r3, #12
 8005e46:	2b0c      	cmp	r3, #12
 8005e48:	d1ee      	bne.n	8005e28 <HAL_RCC_ClockConfig+0x204>
 8005e4a:	e044      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d112      	bne.n	8005e7a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e54:	e00a      	b.n	8005e6c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e56:	f7fb fe2b 	bl	8001ab0 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e0bf      	b.n	8005fec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e6c:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	f003 030c 	and.w	r3, r3, #12
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d1ee      	bne.n	8005e56 <HAL_RCC_ClockConfig+0x232>
 8005e78:	e02d      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d123      	bne.n	8005eca <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e82:	e00a      	b.n	8005e9a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e84:	f7fb fe14 	bl	8001ab0 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e0a8      	b.n	8005fec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e9a:	4b04      	ldr	r3, [pc, #16]	; (8005eac <HAL_RCC_ClockConfig+0x288>)
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	f003 030c 	and.w	r3, r3, #12
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1ee      	bne.n	8005e84 <HAL_RCC_ClockConfig+0x260>
 8005ea6:	e016      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x2b2>
 8005ea8:	40022000 	.word	0x40022000
 8005eac:	46020c00 	.word	0x46020c00
 8005eb0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eb4:	f7fb fdfc 	bl	8001ab0 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e090      	b.n	8005fec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eca:	4b4a      	ldr	r3, [pc, #296]	; (8005ff4 <HAL_RCC_ClockConfig+0x3d0>)
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d1ee      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d010      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	4b43      	ldr	r3, [pc, #268]	; (8005ff4 <HAL_RCC_ClockConfig+0x3d0>)
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d208      	bcs.n	8005f04 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005ef2:	4b40      	ldr	r3, [pc, #256]	; (8005ff4 <HAL_RCC_ClockConfig+0x3d0>)
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f023 020f 	bic.w	r2, r3, #15
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	493d      	ldr	r1, [pc, #244]	; (8005ff4 <HAL_RCC_ClockConfig+0x3d0>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f04:	4b3c      	ldr	r3, [pc, #240]	; (8005ff8 <HAL_RCC_ClockConfig+0x3d4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 030f 	and.w	r3, r3, #15
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d210      	bcs.n	8005f34 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f12:	4b39      	ldr	r3, [pc, #228]	; (8005ff8 <HAL_RCC_ClockConfig+0x3d4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f023 020f 	bic.w	r2, r3, #15
 8005f1a:	4937      	ldr	r1, [pc, #220]	; (8005ff8 <HAL_RCC_ClockConfig+0x3d4>)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f22:	4b35      	ldr	r3, [pc, #212]	; (8005ff8 <HAL_RCC_ClockConfig+0x3d4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d001      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e05b      	b.n	8005fec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d010      	beq.n	8005f62 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	4b2b      	ldr	r3, [pc, #172]	; (8005ff4 <HAL_RCC_ClockConfig+0x3d0>)
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d208      	bcs.n	8005f62 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005f50:	4b28      	ldr	r3, [pc, #160]	; (8005ff4 <HAL_RCC_ClockConfig+0x3d0>)
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	4925      	ldr	r1, [pc, #148]	; (8005ff4 <HAL_RCC_ClockConfig+0x3d0>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d012      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	4b20      	ldr	r3, [pc, #128]	; (8005ff4 <HAL_RCC_ClockConfig+0x3d0>)
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	091b      	lsrs	r3, r3, #4
 8005f78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d209      	bcs.n	8005f94 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005f80:	4b1c      	ldr	r3, [pc, #112]	; (8005ff4 <HAL_RCC_ClockConfig+0x3d0>)
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	4919      	ldr	r1, [pc, #100]	; (8005ff4 <HAL_RCC_ClockConfig+0x3d0>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d010      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	4b13      	ldr	r3, [pc, #76]	; (8005ff4 <HAL_RCC_ClockConfig+0x3d0>)
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d208      	bcs.n	8005fc2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005fb0:	4b10      	ldr	r3, [pc, #64]	; (8005ff4 <HAL_RCC_ClockConfig+0x3d0>)
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	490d      	ldr	r1, [pc, #52]	; (8005ff4 <HAL_RCC_ClockConfig+0x3d0>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005fc2:	f000 f821 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <HAL_RCC_ClockConfig+0x3d0>)
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	490a      	ldr	r1, [pc, #40]	; (8005ffc <HAL_RCC_ClockConfig+0x3d8>)
 8005fd2:	5ccb      	ldrb	r3, [r1, r3]
 8005fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd8:	4a09      	ldr	r2, [pc, #36]	; (8006000 <HAL_RCC_ClockConfig+0x3dc>)
 8005fda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005fdc:	4b09      	ldr	r3, [pc, #36]	; (8006004 <HAL_RCC_ClockConfig+0x3e0>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fb fbc7 	bl	8001774 <HAL_InitTick>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73fb      	strb	r3, [r7, #15]

  return status;
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	46020c00 	.word	0x46020c00
 8005ff8:	40022000 	.word	0x40022000
 8005ffc:	08015a90 	.word	0x08015a90
 8006000:	20000000 	.word	0x20000000
 8006004:	20000004 	.word	0x20000004

08006008 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006008:	b480      	push	{r7}
 800600a:	b08b      	sub	sp, #44	; 0x2c
 800600c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006016:	4b7b      	ldr	r3, [pc, #492]	; (8006204 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006020:	4b78      	ldr	r3, [pc, #480]	; (8006204 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_RCC_GetSysClockFreq+0x34>
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	2b0c      	cmp	r3, #12
 8006034:	d121      	bne.n	800607a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d11e      	bne.n	800607a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800603c:	4b71      	ldr	r3, [pc, #452]	; (8006204 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d107      	bne.n	8006058 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006048:	4b6e      	ldr	r3, [pc, #440]	; (8006204 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800604a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800604e:	0b1b      	lsrs	r3, r3, #12
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
 8006056:	e005      	b.n	8006064 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006058:	4b6a      	ldr	r3, [pc, #424]	; (8006204 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	0f1b      	lsrs	r3, r3, #28
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006064:	4a68      	ldr	r2, [pc, #416]	; (8006208 <HAL_RCC_GetSysClockFreq+0x200>)
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800606c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d110      	bne.n	8006096 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006078:	e00d      	b.n	8006096 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800607a:	4b62      	ldr	r3, [pc, #392]	; (8006204 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	f003 030c 	and.w	r3, r3, #12
 8006082:	2b04      	cmp	r3, #4
 8006084:	d102      	bne.n	800608c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006086:	4b61      	ldr	r3, [pc, #388]	; (800620c <HAL_RCC_GetSysClockFreq+0x204>)
 8006088:	623b      	str	r3, [r7, #32]
 800608a:	e004      	b.n	8006096 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	2b08      	cmp	r3, #8
 8006090:	d101      	bne.n	8006096 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006092:	4b5e      	ldr	r3, [pc, #376]	; (800620c <HAL_RCC_GetSysClockFreq+0x204>)
 8006094:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b0c      	cmp	r3, #12
 800609a:	f040 80ac 	bne.w	80061f6 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800609e:	4b59      	ldr	r3, [pc, #356]	; (8006204 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80060a8:	4b56      	ldr	r3, [pc, #344]	; (8006204 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	0a1b      	lsrs	r3, r3, #8
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80060b6:	4b53      	ldr	r3, [pc, #332]	; (8006204 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80060c2:	4b50      	ldr	r3, [pc, #320]	; (8006204 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	08db      	lsrs	r3, r3, #3
 80060c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	fb02 f303 	mul.w	r3, r2, r3
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060da:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 8086 	beq.w	80061f2 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d003      	beq.n	80060f4 <HAL_RCC_GetSysClockFreq+0xec>
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d022      	beq.n	8006138 <HAL_RCC_GetSysClockFreq+0x130>
 80060f2:	e043      	b.n	800617c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fe:	eddf 6a44 	vldr	s13, [pc, #272]	; 8006210 <HAL_RCC_GetSysClockFreq+0x208>
 8006102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006106:	4b3f      	ldr	r3, [pc, #252]	; (8006204 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006116:	ed97 6a01 	vldr	s12, [r7, #4]
 800611a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006214 <HAL_RCC_GetSysClockFreq+0x20c>
 800611e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006122:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800612a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800612e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006132:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8006136:	e046      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	eddf 6a33 	vldr	s13, [pc, #204]	; 8006210 <HAL_RCC_GetSysClockFreq+0x208>
 8006146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614a:	4b2e      	ldr	r3, [pc, #184]	; (8006204 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800614c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800615a:	ed97 6a01 	vldr	s12, [r7, #4]
 800615e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006214 <HAL_RCC_GetSysClockFreq+0x20c>
 8006162:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006166:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800616a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800616e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006176:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800617a:	e024      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006194:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619c:	ee07 3a90 	vmov	s15, r3
 80061a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061a4:	ed97 6a01 	vldr	s12, [r7, #4]
 80061a8:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8006214 <HAL_RCC_GetSysClockFreq+0x20c>
 80061ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80061b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c0:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80061c4:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80061c6:	4b0f      	ldr	r3, [pc, #60]	; (8006204 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80061c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ca:	0e1b      	lsrs	r3, r3, #24
 80061cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d0:	3301      	adds	r3, #1
 80061d2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061de:	edd7 6a07 	vldr	s13, [r7, #28]
 80061e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ea:	ee17 3a90 	vmov	r3, s15
 80061ee:	623b      	str	r3, [r7, #32]
 80061f0:	e001      	b.n	80061f6 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80061f6:	6a3b      	ldr	r3, [r7, #32]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	372c      	adds	r7, #44	; 0x2c
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	46020c00 	.word	0x46020c00
 8006208:	08015aa8 	.word	0x08015aa8
 800620c:	00f42400 	.word	0x00f42400
 8006210:	4b742400 	.word	0x4b742400
 8006214:	46000000 	.word	0x46000000

08006218 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800621c:	f7ff fef4 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8006220:	4602      	mov	r2, r0
 8006222:	4b07      	ldr	r3, [pc, #28]	; (8006240 <HAL_RCC_GetHCLKFreq+0x28>)
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	4906      	ldr	r1, [pc, #24]	; (8006244 <HAL_RCC_GetHCLKFreq+0x2c>)
 800622c:	5ccb      	ldrb	r3, [r1, r3]
 800622e:	fa22 f303 	lsr.w	r3, r2, r3
 8006232:	4a05      	ldr	r2, [pc, #20]	; (8006248 <HAL_RCC_GetHCLKFreq+0x30>)
 8006234:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006236:	4b04      	ldr	r3, [pc, #16]	; (8006248 <HAL_RCC_GetHCLKFreq+0x30>)
 8006238:	681b      	ldr	r3, [r3, #0]
}
 800623a:	4618      	mov	r0, r3
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	46020c00 	.word	0x46020c00
 8006244:	08015a90 	.word	0x08015a90
 8006248:	20000000 	.word	0x20000000

0800624c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006250:	f7ff ffe2 	bl	8006218 <HAL_RCC_GetHCLKFreq>
 8006254:	4602      	mov	r2, r0
 8006256:	4b05      	ldr	r3, [pc, #20]	; (800626c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	091b      	lsrs	r3, r3, #4
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	4903      	ldr	r1, [pc, #12]	; (8006270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006262:	5ccb      	ldrb	r3, [r1, r3]
 8006264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006268:	4618      	mov	r0, r3
 800626a:	bd80      	pop	{r7, pc}
 800626c:	46020c00 	.word	0x46020c00
 8006270:	08015aa0 	.word	0x08015aa0

08006274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006278:	f7ff ffce 	bl	8006218 <HAL_RCC_GetHCLKFreq>
 800627c:	4602      	mov	r2, r0
 800627e:	4b05      	ldr	r3, [pc, #20]	; (8006294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	0a1b      	lsrs	r3, r3, #8
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	4903      	ldr	r1, [pc, #12]	; (8006298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800628a:	5ccb      	ldrb	r3, [r1, r3]
 800628c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006290:	4618      	mov	r0, r3
 8006292:	bd80      	pop	{r7, pc}
 8006294:	46020c00 	.word	0x46020c00
 8006298:	08015aa0 	.word	0x08015aa0

0800629c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80062a0:	f7ff ffba 	bl	8006218 <HAL_RCC_GetHCLKFreq>
 80062a4:	4602      	mov	r2, r0
 80062a6:	4b05      	ldr	r3, [pc, #20]	; (80062bc <HAL_RCC_GetPCLK3Freq+0x20>)
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	091b      	lsrs	r3, r3, #4
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	4903      	ldr	r1, [pc, #12]	; (80062c0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80062b2:	5ccb      	ldrb	r3, [r1, r3]
 80062b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	46020c00 	.word	0x46020c00
 80062c0:	08015aa0 	.word	0x08015aa0

080062c4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	221f      	movs	r2, #31
 80062d2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80062d4:	4b15      	ldr	r3, [pc, #84]	; (800632c <HAL_RCC_GetClockConfig+0x68>)
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	f003 0203 	and.w	r2, r3, #3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80062e0:	4b12      	ldr	r3, [pc, #72]	; (800632c <HAL_RCC_GetClockConfig+0x68>)
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f003 020f 	and.w	r2, r3, #15
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80062ec:	4b0f      	ldr	r3, [pc, #60]	; (800632c <HAL_RCC_GetClockConfig+0x68>)
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80062f8:	4b0c      	ldr	r3, [pc, #48]	; (800632c <HAL_RCC_GetClockConfig+0x68>)
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	091b      	lsrs	r3, r3, #4
 80062fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8006306:	4b09      	ldr	r3, [pc, #36]	; (800632c <HAL_RCC_GetClockConfig+0x68>)
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006312:	4b07      	ldr	r3, [pc, #28]	; (8006330 <HAL_RCC_GetClockConfig+0x6c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 020f 	and.w	r2, r3, #15
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	601a      	str	r2, [r3, #0]
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	46020c00 	.word	0x46020c00
 8006330:	40022000 	.word	0x40022000

08006334 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800633c:	4b3e      	ldr	r3, [pc, #248]	; (8006438 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800633e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800634a:	f7fe fcd5 	bl	8004cf8 <HAL_PWREx_GetVoltageRange>
 800634e:	6178      	str	r0, [r7, #20]
 8006350:	e019      	b.n	8006386 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006352:	4b39      	ldr	r3, [pc, #228]	; (8006438 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006358:	4a37      	ldr	r2, [pc, #220]	; (8006438 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800635a:	f043 0304 	orr.w	r3, r3, #4
 800635e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006362:	4b35      	ldr	r3, [pc, #212]	; (8006438 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006370:	f7fe fcc2 	bl	8004cf8 <HAL_PWREx_GetVoltageRange>
 8006374:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006376:	4b30      	ldr	r3, [pc, #192]	; (8006438 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800637c:	4a2e      	ldr	r2, [pc, #184]	; (8006438 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800637e:	f023 0304 	bic.w	r3, r3, #4
 8006382:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800638c:	d003      	beq.n	8006396 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006394:	d109      	bne.n	80063aa <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800639c:	d202      	bcs.n	80063a4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800639e:	2301      	movs	r3, #1
 80063a0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80063a2:	e033      	b.n	800640c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80063a4:	2300      	movs	r3, #0
 80063a6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80063a8:	e030      	b.n	800640c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063b0:	d208      	bcs.n	80063c4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b8:	d102      	bne.n	80063c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80063ba:	2303      	movs	r3, #3
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	e025      	b.n	800640c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e035      	b.n	8006430 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ca:	d90f      	bls.n	80063ec <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063d8:	d902      	bls.n	80063e0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80063da:	2300      	movs	r3, #0
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	e015      	b.n	800640c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80063e0:	2301      	movs	r3, #1
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	e012      	b.n	800640c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80063e6:	2300      	movs	r3, #0
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	e00f      	b.n	800640c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063f2:	d109      	bne.n	8006408 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fa:	d102      	bne.n	8006402 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80063fc:	2301      	movs	r3, #1
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	e004      	b.n	800640c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006402:	2302      	movs	r3, #2
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	e001      	b.n	800640c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006408:	2301      	movs	r3, #1
 800640a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800640c:	4b0b      	ldr	r3, [pc, #44]	; (800643c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f023 020f 	bic.w	r2, r3, #15
 8006414:	4909      	ldr	r1, [pc, #36]	; (800643c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800641c:	4b07      	ldr	r3, [pc, #28]	; (800643c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 030f 	and.w	r3, r3, #15
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	429a      	cmp	r2, r3
 8006428:	d001      	beq.n	800642e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	46020c00 	.word	0x46020c00
 800643c:	40022000 	.word	0x40022000

08006440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006444:	b0ba      	sub	sp, #232	; 0xe8
 8006446:	af00      	add	r7, sp, #0
 8006448:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800644c:	2300      	movs	r3, #0
 800644e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006452:	2300      	movs	r3, #0
 8006454:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006458:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f002 0401 	and.w	r4, r2, #1
 8006464:	2500      	movs	r5, #0
 8006466:	ea54 0305 	orrs.w	r3, r4, r5
 800646a:	d00b      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800646c:	4bcb      	ldr	r3, [pc, #812]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800646e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006472:	f023 0103 	bic.w	r1, r3, #3
 8006476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800647a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647c:	4ac7      	ldr	r2, [pc, #796]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800647e:	430b      	orrs	r3, r1
 8006480:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006484:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f002 0802 	and.w	r8, r2, #2
 8006490:	f04f 0900 	mov.w	r9, #0
 8006494:	ea58 0309 	orrs.w	r3, r8, r9
 8006498:	d00b      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800649a:	4bc0      	ldr	r3, [pc, #768]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800649c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064a0:	f023 010c 	bic.w	r1, r3, #12
 80064a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064aa:	4abc      	ldr	r2, [pc, #752]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064ac:	430b      	orrs	r3, r1
 80064ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	f002 0a04 	and.w	sl, r2, #4
 80064be:	f04f 0b00 	mov.w	fp, #0
 80064c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80064c6:	d00b      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80064c8:	4bb4      	ldr	r3, [pc, #720]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064ce:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80064d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d8:	4ab0      	ldr	r2, [pc, #704]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064da:	430b      	orrs	r3, r1
 80064dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f002 0308 	and.w	r3, r2, #8
 80064ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064f0:	2300      	movs	r3, #0
 80064f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80064fa:	460b      	mov	r3, r1
 80064fc:	4313      	orrs	r3, r2
 80064fe:	d00b      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006500:	4ba6      	ldr	r3, [pc, #664]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006506:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800650a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800650e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006510:	4aa2      	ldr	r2, [pc, #648]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006512:	430b      	orrs	r3, r1
 8006514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	f002 0310 	and.w	r3, r2, #16
 8006524:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006528:	2300      	movs	r3, #0
 800652a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800652e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006532:	460b      	mov	r3, r1
 8006534:	4313      	orrs	r3, r2
 8006536:	d00b      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006538:	4b98      	ldr	r3, [pc, #608]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800653a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800653e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006548:	4a94      	ldr	r2, [pc, #592]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800654a:	430b      	orrs	r3, r1
 800654c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006550:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f002 0320 	and.w	r3, r2, #32
 800655c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006560:	2300      	movs	r3, #0
 8006562:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006566:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800656a:	460b      	mov	r3, r1
 800656c:	4313      	orrs	r3, r2
 800656e:	d00b      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006570:	4b8a      	ldr	r3, [pc, #552]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006572:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006576:	f023 0107 	bic.w	r1, r3, #7
 800657a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800657e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006580:	4a86      	ldr	r2, [pc, #536]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006582:	430b      	orrs	r3, r1
 8006584:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006588:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006598:	2300      	movs	r3, #0
 800659a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800659e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4313      	orrs	r3, r2
 80065a6:	d00b      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80065a8:	4b7c      	ldr	r3, [pc, #496]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065ae:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80065b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b8:	4a78      	ldr	r2, [pc, #480]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ba:	430b      	orrs	r3, r1
 80065bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80065cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065d0:	2300      	movs	r3, #0
 80065d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80065da:	460b      	mov	r3, r1
 80065dc:	4313      	orrs	r3, r2
 80065de:	d00b      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80065e0:	4b6e      	ldr	r3, [pc, #440]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065f0:	4a6a      	ldr	r2, [pc, #424]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065f2:	430b      	orrs	r3, r1
 80065f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8006604:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006608:	2300      	movs	r3, #0
 800660a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800660e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006612:	460b      	mov	r3, r1
 8006614:	4313      	orrs	r3, r2
 8006616:	d00b      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006618:	4b60      	ldr	r3, [pc, #384]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800661a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800661e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006628:	4a5c      	ldr	r2, [pc, #368]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800662a:	430b      	orrs	r3, r1
 800662c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800663c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006640:	2300      	movs	r3, #0
 8006642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006646:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800664a:	460b      	mov	r3, r1
 800664c:	4313      	orrs	r3, r2
 800664e:	d00b      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006650:	4b52      	ldr	r3, [pc, #328]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006656:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800665a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800665e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006660:	4a4e      	ldr	r2, [pc, #312]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006662:	430b      	orrs	r3, r1
 8006664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006668:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8006674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006678:	2300      	movs	r3, #0
 800667a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800667e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006682:	460b      	mov	r3, r1
 8006684:	4313      	orrs	r3, r2
 8006686:	d00b      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006688:	4b44      	ldr	r3, [pc, #272]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800668a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800668e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006696:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006698:	4a40      	ldr	r2, [pc, #256]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800669a:	430b      	orrs	r3, r1
 800669c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80066ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066b0:	2300      	movs	r3, #0
 80066b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80066b6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80066ba:	460b      	mov	r3, r1
 80066bc:	4313      	orrs	r3, r2
 80066be:	d00b      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80066c0:	4b36      	ldr	r3, [pc, #216]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066c6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80066ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066d0:	4a32      	ldr	r2, [pc, #200]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066d2:	430b      	orrs	r3, r1
 80066d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80066d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80066e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066e8:	2300      	movs	r3, #0
 80066ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80066f2:	460b      	mov	r3, r1
 80066f4:	4313      	orrs	r3, r2
 80066f6:	d00c      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80066f8:	4b28      	ldr	r3, [pc, #160]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800670a:	4a24      	ldr	r2, [pc, #144]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800670c:	430b      	orrs	r3, r1
 800670e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800671e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006720:	2300      	movs	r3, #0
 8006722:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006724:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006728:	460b      	mov	r3, r1
 800672a:	4313      	orrs	r3, r2
 800672c:	d04f      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800672e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006736:	2b80      	cmp	r3, #128	; 0x80
 8006738:	d02d      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800673a:	2b80      	cmp	r3, #128	; 0x80
 800673c:	d827      	bhi.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800673e:	2b60      	cmp	r3, #96	; 0x60
 8006740:	d02e      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006742:	2b60      	cmp	r3, #96	; 0x60
 8006744:	d823      	bhi.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006746:	2b40      	cmp	r3, #64	; 0x40
 8006748:	d006      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800674a:	2b40      	cmp	r3, #64	; 0x40
 800674c:	d81f      	bhi.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d009      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8006752:	2b20      	cmp	r3, #32
 8006754:	d011      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006756:	e01a      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006758:	4b10      	ldr	r3, [pc, #64]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800675a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675c:	4a0f      	ldr	r2, [pc, #60]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800675e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006762:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006764:	e01d      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800676a:	3308      	adds	r3, #8
 800676c:	4618      	mov	r0, r3
 800676e:	f002 fa41 	bl	8008bf4 <RCCEx_PLL2_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006778:	e013      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800677a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800677e:	332c      	adds	r3, #44	; 0x2c
 8006780:	4618      	mov	r0, r3
 8006782:	f002 facf 	bl	8008d24 <RCCEx_PLL3_Config>
 8006786:	4603      	mov	r3, r0
 8006788:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800678c:	e009      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006794:	e005      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8006796:	bf00      	nop
 8006798:	e003      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800679a:	bf00      	nop
 800679c:	46020c00 	.word	0x46020c00
        break;
 80067a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10d      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80067aa:	4bb6      	ldr	r3, [pc, #728]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067b0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80067b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067bc:	4ab1      	ldr	r2, [pc, #708]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067be:	430b      	orrs	r3, r1
 80067c0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80067c4:	e003      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067ca:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80067ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80067da:	673b      	str	r3, [r7, #112]	; 0x70
 80067dc:	2300      	movs	r3, #0
 80067de:	677b      	str	r3, [r7, #116]	; 0x74
 80067e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80067e4:	460b      	mov	r3, r1
 80067e6:	4313      	orrs	r3, r2
 80067e8:	d053      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80067ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f6:	d033      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80067f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fc:	d82c      	bhi.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80067fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006802:	d02f      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006804:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006808:	d826      	bhi.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800680a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800680e:	d008      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006814:	d820      	bhi.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800681a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681e:	d011      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006820:	e01a      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006822:	4b98      	ldr	r3, [pc, #608]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006826:	4a97      	ldr	r2, [pc, #604]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800682c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800682e:	e01a      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006834:	3308      	adds	r3, #8
 8006836:	4618      	mov	r0, r3
 8006838:	f002 f9dc 	bl	8008bf4 <RCCEx_PLL2_Config>
 800683c:	4603      	mov	r3, r0
 800683e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006842:	e010      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006844:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006848:	332c      	adds	r3, #44	; 0x2c
 800684a:	4618      	mov	r0, r3
 800684c:	f002 fa6a 	bl	8008d24 <RCCEx_PLL3_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006856:	e006      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800685e:	e002      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006860:	bf00      	nop
 8006862:	e000      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006866:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10d      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800686e:	4b85      	ldr	r3, [pc, #532]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006870:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006874:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006878:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800687c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006880:	4a80      	ldr	r2, [pc, #512]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006882:	430b      	orrs	r3, r1
 8006884:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006888:	e003      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800688e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800689e:	66bb      	str	r3, [r7, #104]	; 0x68
 80068a0:	2300      	movs	r3, #0
 80068a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80068a8:	460b      	mov	r3, r1
 80068aa:	4313      	orrs	r3, r2
 80068ac:	d046      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80068ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80068b6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80068ba:	d028      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80068bc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80068c0:	d821      	bhi.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80068c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068c6:	d022      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80068c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068cc:	d81b      	bhi.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80068ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068d2:	d01c      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80068d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068d8:	d815      	bhi.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80068da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068de:	d008      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80068e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e4:	d80f      	bhi.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d011      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80068ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ee:	d00e      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80068f0:	e009      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068f6:	3308      	adds	r3, #8
 80068f8:	4618      	mov	r0, r3
 80068fa:	f002 f97b 	bl	8008bf4 <RCCEx_PLL2_Config>
 80068fe:	4603      	mov	r3, r0
 8006900:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006904:	e004      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800690c:	e000      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800690e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006910:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10d      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006918:	4b5a      	ldr	r3, [pc, #360]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800691a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800691e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006926:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800692a:	4a56      	ldr	r2, [pc, #344]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800692c:	430b      	orrs	r3, r1
 800692e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006932:	e003      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006934:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006938:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800693c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006948:	663b      	str	r3, [r7, #96]	; 0x60
 800694a:	2300      	movs	r3, #0
 800694c:	667b      	str	r3, [r7, #100]	; 0x64
 800694e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006952:	460b      	mov	r3, r1
 8006954:	4313      	orrs	r3, r2
 8006956:	d03f      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006958:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800695c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006960:	2b04      	cmp	r3, #4
 8006962:	d81e      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006964:	a201      	add	r2, pc, #4	; (adr r2, 800696c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696a:	bf00      	nop
 800696c:	080069ab 	.word	0x080069ab
 8006970:	08006981 	.word	0x08006981
 8006974:	0800698f 	.word	0x0800698f
 8006978:	080069ab 	.word	0x080069ab
 800697c:	080069ab 	.word	0x080069ab
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006980:	4b40      	ldr	r3, [pc, #256]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	4a3f      	ldr	r2, [pc, #252]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800698a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800698c:	e00e      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800698e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006992:	332c      	adds	r3, #44	; 0x2c
 8006994:	4618      	mov	r0, r3
 8006996:	f002 f9c5 	bl	8008d24 <RCCEx_PLL3_Config>
 800699a:	4603      	mov	r3, r0
 800699c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80069a0:	e004      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80069a8:	e000      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80069aa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80069ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10d      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80069b4:	4b33      	ldr	r3, [pc, #204]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80069b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80069ba:	f023 0107 	bic.w	r1, r3, #7
 80069be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c6:	4a2f      	ldr	r2, [pc, #188]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80069c8:	430b      	orrs	r3, r1
 80069ca:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80069ce:	e003      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069d4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80069d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e0:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80069e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80069e6:	2300      	movs	r3, #0
 80069e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80069ee:	460b      	mov	r3, r1
 80069f0:	4313      	orrs	r3, r2
 80069f2:	d04d      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80069f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a00:	d028      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006a02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a06:	d821      	bhi.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006a08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a0c:	d024      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006a0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a12:	d81b      	bhi.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a18:	d00e      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8006a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a1e:	d815      	bhi.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01b      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8006a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a28:	d110      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a2a:	4b16      	ldr	r3, [pc, #88]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	4a15      	ldr	r2, [pc, #84]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a34:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006a36:	e012      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a3c:	332c      	adds	r3, #44	; 0x2c
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f002 f970 	bl	8008d24 <RCCEx_PLL3_Config>
 8006a44:	4603      	mov	r3, r0
 8006a46:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a4a:	e008      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a52:	e004      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006a54:	bf00      	nop
 8006a56:	e002      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006a58:	bf00      	nop
 8006a5a:	e000      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006a5c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d110      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006a66:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a6c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006a70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a78:	4a02      	ldr	r2, [pc, #8]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006a80:	e006      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006a82:	bf00      	nop
 8006a84:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a88:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a8c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006a9c:	653b      	str	r3, [r7, #80]	; 0x50
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	657b      	str	r3, [r7, #84]	; 0x54
 8006aa2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	f000 80b5 	beq.w	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ab4:	4b9d      	ldr	r3, [pc, #628]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aba:	f003 0304 	and.w	r3, r3, #4
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d113      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ac2:	4b9a      	ldr	r3, [pc, #616]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ac8:	4a98      	ldr	r2, [pc, #608]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006aca:	f043 0304 	orr.w	r3, r3, #4
 8006ace:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006ad2:	4b96      	ldr	r3, [pc, #600]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006aea:	4b91      	ldr	r3, [pc, #580]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	4a90      	ldr	r2, [pc, #576]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006af0:	f043 0301 	orr.w	r3, r3, #1
 8006af4:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006af6:	f7fa ffdb 	bl	8001ab0 <HAL_GetTick>
 8006afa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006afe:	e00b      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b00:	f7fa ffd6 	bl	8001ab0 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d903      	bls.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006b16:	e005      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b18:	4b85      	ldr	r3, [pc, #532]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0ed      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8006b24:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d165      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b2c:	4b7f      	ldr	r3, [pc, #508]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d023      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8006b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b46:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d01b      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b52:	4b76      	ldr	r3, [pc, #472]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b60:	4b72      	ldr	r3, [pc, #456]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b66:	4a71      	ldr	r2, [pc, #452]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b6c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b70:	4b6e      	ldr	r3, [pc, #440]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b76:	4a6d      	ldr	r2, [pc, #436]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b80:	4a6a      	ldr	r2, [pc, #424]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d019      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b96:	f7fa ff8b 	bl	8001ab0 <HAL_GetTick>
 8006b9a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b9e:	e00d      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ba0:	f7fa ff86 	bl	8001ab0 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006baa:	1ad2      	subs	r2, r2, r3
 8006bac:	f241 3388 	movw	r3, #5000	; 0x1388
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d903      	bls.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006bba:	e006      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bbc:	4b5b      	ldr	r3, [pc, #364]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0ea      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006bca:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10d      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006bd2:	4b56      	ldr	r3, [pc, #344]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bd8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006be0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006be4:	4a51      	ldr	r2, [pc, #324]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006be6:	430b      	orrs	r3, r1
 8006be8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006bec:	e008      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bee:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006bf2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006bf6:	e003      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006bfc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c00:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d107      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c08:	4b48      	ldr	r3, [pc, #288]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c0e:	4a47      	ldr	r2, [pc, #284]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c10:	f023 0304 	bic.w	r3, r3, #4
 8006c14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006c18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c26:	2300      	movs	r3, #0
 8006c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c2a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4313      	orrs	r3, r2
 8006c32:	d042      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006c34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c3c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006c40:	d022      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006c42:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006c46:	d81b      	bhi.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c4c:	d011      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006c4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c52:	d815      	bhi.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d019      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c5c:	d110      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c62:	3308      	adds	r3, #8
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 ffc5 	bl	8008bf4 <RCCEx_PLL2_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006c70:	e00d      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c72:	4b2e      	ldr	r3, [pc, #184]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	4a2d      	ldr	r2, [pc, #180]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c7c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006c7e:	e006      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006c86:	e002      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006c88:	bf00      	nop
 8006c8a:	e000      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006c8c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006c8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10d      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006c96:	4b25      	ldr	r3, [pc, #148]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c9c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006ca0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ca4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ca8:	4a20      	ldr	r2, [pc, #128]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006caa:	430b      	orrs	r3, r1
 8006cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006cb0:	e003      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006cb6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8006cc8:	2300      	movs	r3, #0
 8006cca:	647b      	str	r3, [r7, #68]	; 0x44
 8006ccc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	d032      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce2:	d00b      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce8:	d804      	bhi.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d008      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf2:	d007      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006cfa:	e004      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006cfc:	bf00      	nop
 8006cfe:	e002      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006d00:	bf00      	nop
 8006d02:	e000      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006d04:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d06:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d112      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006d0e:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d20:	4a02      	ldr	r2, [pc, #8]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d22:	430b      	orrs	r3, r1
 8006d24:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006d28:	e008      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006d2a:	bf00      	nop
 8006d2c:	46020c00 	.word	0x46020c00
 8006d30:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d34:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d38:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006d3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006d48:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d4e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006d52:	460b      	mov	r3, r1
 8006d54:	4313      	orrs	r3, r2
 8006d56:	d00c      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006d58:	4b98      	ldr	r3, [pc, #608]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d5e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d6a:	4a94      	ldr	r2, [pc, #592]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d6c:	430b      	orrs	r3, r1
 8006d6e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d80:	2300      	movs	r3, #0
 8006d82:	637b      	str	r3, [r7, #52]	; 0x34
 8006d84:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	d019      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d9a:	d105      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d9c:	4b87      	ldr	r3, [pc, #540]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da0:	4a86      	ldr	r2, [pc, #536]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006da6:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006da8:	4b84      	ldr	r3, [pc, #528]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006daa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006dae:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006db6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006dba:	4a80      	ldr	r2, [pc, #512]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dca:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dd4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	d00c      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006dde:	4b77      	ldr	r3, [pc, #476]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006de4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006de8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006df0:	4972      	ldr	r1, [pc, #456]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006df8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006e04:	623b      	str	r3, [r7, #32]
 8006e06:	2300      	movs	r3, #0
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4313      	orrs	r3, r2
 8006e12:	d00c      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006e14:	4b69      	ldr	r3, [pc, #420]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006e26:	4965      	ldr	r1, [pc, #404]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	61fb      	str	r3, [r7, #28]
 8006e40:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e44:	460b      	mov	r3, r1
 8006e46:	4313      	orrs	r3, r2
 8006e48:	d00c      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006e4a:	4b5c      	ldr	r3, [pc, #368]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e50:	f023 0218 	bic.w	r2, r3, #24
 8006e54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e5c:	4957      	ldr	r1, [pc, #348]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006e64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006e70:	613b      	str	r3, [r7, #16]
 8006e72:	2300      	movs	r3, #0
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	d032      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006e80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e8c:	d105      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e8e:	4b4b      	ldr	r3, [pc, #300]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	4a4a      	ldr	r2, [pc, #296]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e98:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ea2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ea6:	d108      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006eac:	3308      	adds	r3, #8
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f001 fea0 	bl	8008bf4 <RCCEx_PLL2_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006eba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10d      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006ec2:	4b3e      	ldr	r3, [pc, #248]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ec4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ecc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ed0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ed4:	4939      	ldr	r1, [pc, #228]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006edc:	e003      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ede:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ee2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006ef2:	60bb      	str	r3, [r7, #8]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006efc:	460b      	mov	r3, r1
 8006efe:	4313      	orrs	r3, r2
 8006f00:	d03a      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f0e:	d00e      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006f10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f14:	d815      	bhi.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d017      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006f1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f1e:	d110      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f20:	4b26      	ldr	r3, [pc, #152]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f24:	4a25      	ldr	r2, [pc, #148]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f2a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006f2c:	e00e      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f32:	3308      	adds	r3, #8
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 fe5d 	bl	8008bf4 <RCCEx_PLL2_Config>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006f40:	e004      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006f48:	e000      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006f4a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006f4c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10d      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006f54:	4b19      	ldr	r3, [pc, #100]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f66:	4915      	ldr	r1, [pc, #84]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006f6e:	e003      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f70:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006f74:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006f78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006f84:	603b      	str	r3, [r7, #0]
 8006f86:	2300      	movs	r3, #0
 8006f88:	607b      	str	r3, [r7, #4]
 8006f8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4313      	orrs	r3, r2
 8006f92:	d00c      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006f94:	4b09      	ldr	r3, [pc, #36]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f9a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fa2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006fa6:	4905      	ldr	r1, [pc, #20]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006fae:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	37e8      	adds	r7, #232	; 0xe8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fbc:	46020c00 	.word	0x46020c00

08006fc0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b089      	sub	sp, #36	; 0x24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006fc8:	4bad      	ldr	r3, [pc, #692]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006fd2:	4bab      	ldr	r3, [pc, #684]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006fdc:	4ba8      	ldr	r3, [pc, #672]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe0:	0a1b      	lsrs	r3, r3, #8
 8006fe2:	f003 030f 	and.w	r3, r3, #15
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006fea:	4ba5      	ldr	r3, [pc, #660]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fee:	091b      	lsrs	r3, r3, #4
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006ff6:	4ba2      	ldr	r3, [pc, #648]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffa:	08db      	lsrs	r3, r3, #3
 8006ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	fb02 f303 	mul.w	r3, r2, r3
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 8123 	beq.w	8007260 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d062      	beq.n	80070e6 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b03      	cmp	r3, #3
 8007024:	f200 8081 	bhi.w	800712a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d024      	beq.n	8007078 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d17a      	bne.n	800712a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007284 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8007042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007046:	4b8e      	ldr	r3, [pc, #568]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007056:	ed97 6a02 	vldr	s12, [r7, #8]
 800705a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800705e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007062:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800706a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800706e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007076:	e08f      	b.n	8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007078:	4b81      	ldr	r3, [pc, #516]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d005      	beq.n	8007090 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8007084:	4b7e      	ldr	r3, [pc, #504]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	0f1b      	lsrs	r3, r3, #28
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	e006      	b.n	800709e <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8007090:	4b7b      	ldr	r3, [pc, #492]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007096:	041b      	lsls	r3, r3, #16
 8007098:	0f1b      	lsrs	r3, r3, #28
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	4a7b      	ldr	r2, [pc, #492]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80070a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a4:	ee07 3a90 	vmov	s15, r3
 80070a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	ee07 3a90 	vmov	s15, r3
 80070c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80070c8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80070cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80070dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070e4:	e058      	b.n	8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	ee07 3a90 	vmov	s15, r3
 80070ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007284 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80070f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070f8:	4b61      	ldr	r3, [pc, #388]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80070fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007100:	ee07 3a90 	vmov	s15, r3
 8007104:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007108:	ed97 6a02 	vldr	s12, [r7, #8]
 800710c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007110:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007114:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007118:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800711c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007124:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007128:	e036      	b.n	8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800712a:	4b55      	ldr	r3, [pc, #340]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d005      	beq.n	8007142 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8007136:	4b52      	ldr	r3, [pc, #328]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	0f1b      	lsrs	r3, r3, #28
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	e006      	b.n	8007150 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8007142:	4b4f      	ldr	r3, [pc, #316]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007148:	041b      	lsls	r3, r3, #16
 800714a:	0f1b      	lsrs	r3, r3, #28
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	4a4e      	ldr	r2, [pc, #312]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8007152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	ee07 3a90 	vmov	s15, r3
 8007164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007176:	ed97 6a02 	vldr	s12, [r7, #8]
 800717a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007288 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800717e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800718a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007196:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007198:	4b39      	ldr	r3, [pc, #228]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800719a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d017      	beq.n	80071d4 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80071a4:	4b36      	ldr	r3, [pc, #216]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80071a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a8:	0a5b      	lsrs	r3, r3, #9
 80071aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80071b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071ba:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80071be:	edd7 6a07 	vldr	s13, [r7, #28]
 80071c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ca:	ee17 2a90 	vmov	r2, s15
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	e002      	b.n	80071da <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80071da:	4b29      	ldr	r3, [pc, #164]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80071dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d017      	beq.n	8007216 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80071e6:	4b26      	ldr	r3, [pc, #152]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80071e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ea:	0c1b      	lsrs	r3, r3, #16
 80071ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f0:	ee07 3a90 	vmov	s15, r3
 80071f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80071f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071fc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007200:	edd7 6a07 	vldr	s13, [r7, #28]
 8007204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800720c:	ee17 2a90 	vmov	r2, s15
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	605a      	str	r2, [r3, #4]
 8007214:	e002      	b.n	800721c <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800721c:	4b18      	ldr	r3, [pc, #96]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800721e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d017      	beq.n	8007258 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007228:	4b15      	ldr	r3, [pc, #84]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800722a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722c:	0e1b      	lsrs	r3, r3, #24
 800722e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800723a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800723e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007242:	edd7 6a07 	vldr	s13, [r7, #28]
 8007246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800724a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800724e:	ee17 2a90 	vmov	r2, s15
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007256:	e00c      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	609a      	str	r2, [r3, #8]
}
 800725e:	e008      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	609a      	str	r2, [r3, #8]
}
 8007272:	bf00      	nop
 8007274:	3724      	adds	r7, #36	; 0x24
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	46020c00 	.word	0x46020c00
 8007284:	4b742400 	.word	0x4b742400
 8007288:	46000000 	.word	0x46000000
 800728c:	08015aa8 	.word	0x08015aa8

08007290 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007290:	b480      	push	{r7}
 8007292:	b089      	sub	sp, #36	; 0x24
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007298:	4bad      	ldr	r3, [pc, #692]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800729a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80072a2:	4bab      	ldr	r3, [pc, #684]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80072ac:	4ba8      	ldr	r3, [pc, #672]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	0a1b      	lsrs	r3, r3, #8
 80072b2:	f003 030f 	and.w	r3, r3, #15
 80072b6:	3301      	adds	r3, #1
 80072b8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80072ba:	4ba5      	ldr	r3, [pc, #660]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	091b      	lsrs	r3, r3, #4
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80072c6:	4ba2      	ldr	r3, [pc, #648]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	08db      	lsrs	r3, r3, #3
 80072cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072de:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8123 	beq.w	8007530 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d062      	beq.n	80073b6 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	f200 8081 	bhi.w	80073fa <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d024      	beq.n	8007348 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b02      	cmp	r3, #2
 8007302:	d17a      	bne.n	80073fa <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8007312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007316:	4b8e      	ldr	r3, [pc, #568]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007326:	ed97 6a02 	vldr	s12, [r7, #8]
 800732a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800732e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007332:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800733a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800733e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007346:	e08f      	b.n	8007468 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007348:	4b81      	ldr	r3, [pc, #516]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8007354:	4b7e      	ldr	r3, [pc, #504]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	0f1b      	lsrs	r3, r3, #28
 800735a:	f003 030f 	and.w	r3, r3, #15
 800735e:	e006      	b.n	800736e <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8007360:	4b7b      	ldr	r3, [pc, #492]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007362:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007366:	041b      	lsls	r3, r3, #16
 8007368:	0f1b      	lsrs	r3, r3, #28
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	4a7b      	ldr	r2, [pc, #492]	; (800755c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8007370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007374:	ee07 3a90 	vmov	s15, r3
 8007378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	ee07 3a90 	vmov	s15, r3
 8007390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007394:	ed97 6a02 	vldr	s12, [r7, #8]
 8007398:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800739c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80073ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073b4:	e058      	b.n	8007468 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	ee07 3a90 	vmov	s15, r3
 80073bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80073c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c8:	4b61      	ldr	r3, [pc, #388]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d0:	ee07 3a90 	vmov	s15, r3
 80073d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80073d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80073dc:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80073e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80073e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80073e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80073f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073f8:	e036      	b.n	8007468 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80073fa:	4b55      	ldr	r3, [pc, #340]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8007406:	4b52      	ldr	r3, [pc, #328]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	0f1b      	lsrs	r3, r3, #28
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	e006      	b.n	8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8007412:	4b4f      	ldr	r3, [pc, #316]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007418:	041b      	lsls	r3, r3, #16
 800741a:	0f1b      	lsrs	r3, r3, #28
 800741c:	f003 030f 	and.w	r3, r3, #15
 8007420:	4a4e      	ldr	r2, [pc, #312]	; (800755c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8007422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	ee07 3a90 	vmov	s15, r3
 8007434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007446:	ed97 6a02 	vldr	s12, [r7, #8]
 800744a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007558 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800744e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800745a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800745e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007466:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007468:	4b39      	ldr	r3, [pc, #228]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d017      	beq.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007474:	4b36      	ldr	r3, [pc, #216]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007478:	0a5b      	lsrs	r3, r3, #9
 800747a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8007486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800748a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800748e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800749a:	ee17 2a90 	vmov	r2, s15
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	e002      	b.n	80074aa <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80074aa:	4b29      	ldr	r3, [pc, #164]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d017      	beq.n	80074e6 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80074b6:	4b26      	ldr	r3, [pc, #152]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80074b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ba:	0c1b      	lsrs	r3, r3, #16
 80074bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c0:	ee07 3a90 	vmov	s15, r3
 80074c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80074c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074cc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80074d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80074d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074dc:	ee17 2a90 	vmov	r2, s15
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	605a      	str	r2, [r3, #4]
 80074e4:	e002      	b.n	80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80074ec:	4b18      	ldr	r3, [pc, #96]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80074ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d017      	beq.n	8007528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80074f8:	4b15      	ldr	r3, [pc, #84]	; (8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80074fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fc:	0e1b      	lsrs	r3, r3, #24
 80074fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800750a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800750e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007512:	edd7 6a07 	vldr	s13, [r7, #28]
 8007516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800751a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800751e:	ee17 2a90 	vmov	r2, s15
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007526:	e00c      	b.n	8007542 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	609a      	str	r2, [r3, #8]
}
 800752e:	e008      	b.n	8007542 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	609a      	str	r2, [r3, #8]
}
 8007542:	bf00      	nop
 8007544:	3724      	adds	r7, #36	; 0x24
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	46020c00 	.word	0x46020c00
 8007554:	4b742400 	.word	0x4b742400
 8007558:	46000000 	.word	0x46000000
 800755c:	08015aa8 	.word	0x08015aa8

08007560 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007560:	b480      	push	{r7}
 8007562:	b089      	sub	sp, #36	; 0x24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007568:	4bad      	ldr	r3, [pc, #692]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800756a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007570:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007572:	4bab      	ldr	r3, [pc, #684]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800757c:	4ba8      	ldr	r3, [pc, #672]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007580:	0a1b      	lsrs	r3, r3, #8
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	3301      	adds	r3, #1
 8007588:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800758a:	4ba5      	ldr	r3, [pc, #660]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800758c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758e:	091b      	lsrs	r3, r3, #4
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007596:	4ba2      	ldr	r3, [pc, #648]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800759a:	08db      	lsrs	r3, r3, #3
 800759c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	fb02 f303 	mul.w	r3, r2, r3
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 8123 	beq.w	8007800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d062      	beq.n	8007686 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	f200 8081 	bhi.w	80076ca <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d024      	beq.n	8007618 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d17a      	bne.n	80076ca <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075de:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80075e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e6:	4b8e      	ldr	r3, [pc, #568]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80075f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80075fa:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80075fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007602:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800760e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007612:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8007616:	e08f      	b.n	8007738 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007618:	4b81      	ldr	r3, [pc, #516]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d005      	beq.n	8007630 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8007624:	4b7e      	ldr	r3, [pc, #504]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	0f1b      	lsrs	r3, r3, #28
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	e006      	b.n	800763e <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8007630:	4b7b      	ldr	r3, [pc, #492]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007636:	041b      	lsls	r3, r3, #16
 8007638:	0f1b      	lsrs	r3, r3, #28
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	4a7b      	ldr	r2, [pc, #492]	; (800782c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8007640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007644:	ee07 3a90 	vmov	s15, r3
 8007648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	ee07 3a90 	vmov	s15, r3
 8007660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007664:	ed97 6a02 	vldr	s12, [r7, #8]
 8007668:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800766c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007678:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800767c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007680:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007684:	e058      	b.n	8007738 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	ee07 3a90 	vmov	s15, r3
 800768c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007690:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007824 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007698:	4b61      	ldr	r3, [pc, #388]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800769a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a0:	ee07 3a90 	vmov	s15, r3
 80076a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80076a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ac:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80076b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80076b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80076b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80076c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076c8:	e036      	b.n	8007738 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80076ca:	4b55      	ldr	r3, [pc, #340]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d005      	beq.n	80076e2 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 80076d6:	4b52      	ldr	r3, [pc, #328]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	0f1b      	lsrs	r3, r3, #28
 80076dc:	f003 030f 	and.w	r3, r3, #15
 80076e0:	e006      	b.n	80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 80076e2:	4b4f      	ldr	r3, [pc, #316]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076e8:	041b      	lsls	r3, r3, #16
 80076ea:	0f1b      	lsrs	r3, r3, #28
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	4a4e      	ldr	r2, [pc, #312]	; (800782c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80076f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	ee07 3a90 	vmov	s15, r3
 8007704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007716:	ed97 6a02 	vldr	s12, [r7, #8]
 800771a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800771e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800772a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800772e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007736:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007738:	4b39      	ldr	r3, [pc, #228]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800773a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d017      	beq.n	8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007744:	4b36      	ldr	r3, [pc, #216]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007748:	0a5b      	lsrs	r3, r3, #9
 800774a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800775a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800775e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800776a:	ee17 2a90 	vmov	r2, s15
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	e002      	b.n	800777a <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800777a:	4b29      	ldr	r3, [pc, #164]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800777c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d017      	beq.n	80077b6 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007786:	4b26      	ldr	r3, [pc, #152]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778a:	0c1b      	lsrs	r3, r3, #16
 800778c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007790:	ee07 3a90 	vmov	s15, r3
 8007794:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800779c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80077a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ac:	ee17 2a90 	vmov	r2, s15
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	605a      	str	r2, [r3, #4]
 80077b4:	e002      	b.n	80077bc <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80077bc:	4b18      	ldr	r3, [pc, #96]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80077be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d017      	beq.n	80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077c8:	4b15      	ldr	r3, [pc, #84]	; (8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077cc:	0e1b      	lsrs	r3, r3, #24
 80077ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80077da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077de:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80077e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ee:	ee17 2a90 	vmov	r2, s15
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80077f6:	e00c      	b.n	8007812 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	609a      	str	r2, [r3, #8]
}
 80077fe:	e008      	b.n	8007812 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	609a      	str	r2, [r3, #8]
}
 8007812:	bf00      	nop
 8007814:	3724      	adds	r7, #36	; 0x24
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	46020c00 	.word	0x46020c00
 8007824:	4b742400 	.word	0x4b742400
 8007828:	46000000 	.word	0x46000000
 800782c:	08015aa8 	.word	0x08015aa8

08007830 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08e      	sub	sp, #56	; 0x38
 8007834:	af00      	add	r7, sp, #0
 8007836:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800783a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800783e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8007842:	430b      	orrs	r3, r1
 8007844:	d145      	bne.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007846:	4ba7      	ldr	r3, [pc, #668]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800784c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007850:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007852:	4ba4      	ldr	r3, [pc, #656]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b02      	cmp	r3, #2
 800785e:	d108      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007866:	d104      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007868:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800786c:	637b      	str	r3, [r7, #52]	; 0x34
 800786e:	f001 b9b3 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007872:	4b9c      	ldr	r3, [pc, #624]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800787c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007880:	d114      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007888:	d110      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800788a:	4b96      	ldr	r3, [pc, #600]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800788c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007894:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007898:	d103      	bne.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800789a:	23fa      	movs	r3, #250	; 0xfa
 800789c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800789e:	f001 b99b 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80078a2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80078a6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078a8:	f001 b996 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80078ac:	4b8d      	ldr	r3, [pc, #564]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078b8:	d107      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078c0:	d103      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80078c2:	4b89      	ldr	r3, [pc, #548]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078c4:	637b      	str	r3, [r7, #52]	; 0x34
 80078c6:	f001 b987 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	637b      	str	r3, [r7, #52]	; 0x34
 80078ce:	f001 b983 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80078d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078d6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80078da:	430b      	orrs	r3, r1
 80078dc:	d151      	bne.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80078de:	4b81      	ldr	r3, [pc, #516]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80078e4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80078e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	2b80      	cmp	r3, #128	; 0x80
 80078ee:	d035      	beq.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	2b80      	cmp	r3, #128	; 0x80
 80078f4:	d841      	bhi.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	2b60      	cmp	r3, #96	; 0x60
 80078fa:	d02a      	beq.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	2b60      	cmp	r3, #96	; 0x60
 8007900:	d83b      	bhi.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	2b40      	cmp	r3, #64	; 0x40
 8007906:	d009      	beq.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	2b40      	cmp	r3, #64	; 0x40
 800790c:	d835      	bhi.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00c      	beq.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	2b20      	cmp	r3, #32
 8007918:	d012      	beq.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800791a:	e02e      	b.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800791c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff fb4d 	bl	8006fc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800792a:	f001 b955 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800792e:	f107 0318 	add.w	r3, r7, #24
 8007932:	4618      	mov	r0, r3
 8007934:	f7ff fcac 	bl	8007290 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800793c:	f001 b94c 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007940:	f107 030c 	add.w	r3, r7, #12
 8007944:	4618      	mov	r0, r3
 8007946:	f7ff fe0b 	bl	8007560 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800794e:	f001 b943 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007952:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007956:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007958:	f001 b93e 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800795c:	4b61      	ldr	r3, [pc, #388]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007968:	d103      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800796a:	4b60      	ldr	r3, [pc, #384]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800796e:	f001 b933 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007976:	f001 b92f 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800797e:	f001 b92b 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007986:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800798a:	430b      	orrs	r3, r1
 800798c:	d158      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800798e:	4b55      	ldr	r3, [pc, #340]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007990:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007994:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007998:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079a0:	d03b      	beq.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079a8:	d846      	bhi.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079b0:	d02e      	beq.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079b8:	d83e      	bhi.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c0:	d00b      	beq.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c8:	d836      	bhi.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00d      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d6:	d012      	beq.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80079d8:	e02e      	b.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079de:	4618      	mov	r0, r3
 80079e0:	f7ff faee 	bl	8006fc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079e8:	f001 b8f6 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ec:	f107 0318 	add.w	r3, r7, #24
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff fc4d 	bl	8007290 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079fa:	f001 b8ed 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079fe:	f107 030c 	add.w	r3, r7, #12
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff fdac 	bl	8007560 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a0c:	f001 b8e4 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007a10:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a16:	f001 b8df 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a1a:	4b32      	ldr	r3, [pc, #200]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a26:	d103      	bne.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007a28:	4b30      	ldr	r3, [pc, #192]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a2a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a2c:	f001 b8d4 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a34:	f001 b8d0 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a3c:	f001 b8cc 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a44:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	d126      	bne.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007a4c:	4b25      	ldr	r3, [pc, #148]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007a4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a56:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007a58:	4b22      	ldr	r3, [pc, #136]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a64:	d106      	bne.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d103      	bne.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007a6c:	4b1f      	ldr	r3, [pc, #124]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a70:	f001 b8b2 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007a74:	4b1b      	ldr	r3, [pc, #108]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a80:	d107      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a88:	d103      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007a8a:	4b19      	ldr	r3, [pc, #100]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a8e:	f001 b8a3 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	637b      	str	r3, [r7, #52]	; 0x34
 8007a96:	f001 b89f 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a9e:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	d16e      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007aa6:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007aac:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007ab0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007ab8:	d03d      	beq.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007ac0:	d85c      	bhi.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ac8:	d014      	beq.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ad0:	d854      	bhi.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01f      	beq.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ade:	d012      	beq.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007ae0:	e04c      	b.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007ae2:	bf00      	nop
 8007ae4:	46020c00 	.word	0x46020c00
 8007ae8:	0007a120 	.word	0x0007a120
 8007aec:	00f42400 	.word	0x00f42400
 8007af0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7ff fa61 	bl	8006fc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b02:	f001 b869 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b06:	f107 0318 	add.w	r3, r7, #24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff fbc0 	bl	8007290 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b14:	f001 b860 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007b18:	4ba7      	ldr	r3, [pc, #668]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b24:	d103      	bne.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8007b26:	4ba5      	ldr	r3, [pc, #660]	; (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007b28:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b2a:	f001 b855 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b32:	f001 b851 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b36:	4ba0      	ldr	r3, [pc, #640]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	d118      	bne.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b42:	4b9d      	ldr	r3, [pc, #628]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007b4e:	4b9a      	ldr	r3, [pc, #616]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	0e1b      	lsrs	r3, r3, #24
 8007b54:	f003 030f 	and.w	r3, r3, #15
 8007b58:	e006      	b.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007b5a:	4b97      	ldr	r3, [pc, #604]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b60:	041b      	lsls	r3, r3, #16
 8007b62:	0e1b      	lsrs	r3, r3, #24
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	4a95      	ldr	r2, [pc, #596]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b6e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b70:	f001 b832 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b78:	f001 b82e 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b80:	f001 b82a 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b88:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	d17f      	bne.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007b90:	4b89      	ldr	r3, [pc, #548]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b9a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d165      	bne.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007ba2:	4b85      	ldr	r3, [pc, #532]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ba8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007bac:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007bb4:	d034      	beq.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007bbc:	d853      	bhi.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bc4:	d00b      	beq.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bcc:	d84b      	bhi.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d016      	beq.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8007bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bda:	d009      	beq.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007bdc:	e043      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7ff f9ec 	bl	8006fc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007bec:	f000 bff4 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bf0:	f107 0318 	add.w	r3, r7, #24
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7ff fb4b 	bl	8007290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007bfe:	f000 bfeb 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007c02:	4b6d      	ldr	r3, [pc, #436]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c0e:	d103      	bne.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8007c10:	4b6a      	ldr	r3, [pc, #424]	; (8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007c12:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007c14:	f000 bfe0 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007c1c:	f000 bfdc 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c20:	4b65      	ldr	r3, [pc, #404]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0320 	and.w	r3, r3, #32
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d118      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c2c:	4b62      	ldr	r3, [pc, #392]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d005      	beq.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007c38:	4b5f      	ldr	r3, [pc, #380]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	0e1b      	lsrs	r3, r3, #24
 8007c3e:	f003 030f 	and.w	r3, r3, #15
 8007c42:	e006      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007c44:	4b5c      	ldr	r3, [pc, #368]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c4a:	041b      	lsls	r3, r3, #16
 8007c4c:	0e1b      	lsrs	r3, r3, #24
 8007c4e:	f003 030f 	and.w	r3, r3, #15
 8007c52:	4a5b      	ldr	r2, [pc, #364]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c58:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007c5a:	f000 bfbd 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007c62:	f000 bfb9 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007c6a:	f000 bfb5 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c74:	d108      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff f9a0 	bl	8006fc0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34
 8007c84:	f000 bfa8 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c8c:	f000 bfa4 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c94:	1e51      	subs	r1, r2, #1
 8007c96:	430b      	orrs	r3, r1
 8007c98:	d136      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007c9a:	4b47      	ldr	r3, [pc, #284]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ca0:	f003 0303 	and.w	r3, r3, #3
 8007ca4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d104      	bne.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007cac:	f7fe fae2 	bl	8006274 <HAL_RCC_GetPCLK2Freq>
 8007cb0:	6378      	str	r0, [r7, #52]	; 0x34
 8007cb2:	f000 bf91 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d104      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007cbc:	f7fe f9a4 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8007cc0:	6378      	str	r0, [r7, #52]	; 0x34
 8007cc2:	f000 bf89 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007cc6:	4b3c      	ldr	r3, [pc, #240]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd2:	d106      	bne.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d103      	bne.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8007cda:	4b3a      	ldr	r3, [pc, #232]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8007cde:	f000 bf7b 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007ce2:	4b35      	ldr	r3, [pc, #212]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d107      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d104      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8007cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8007cfc:	f000 bf6c 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	637b      	str	r3, [r7, #52]	; 0x34
 8007d04:	f000 bf68 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d0c:	1e91      	subs	r1, r2, #2
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	d136      	bne.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007d12:	4b29      	ldr	r3, [pc, #164]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d18:	f003 030c 	and.w	r3, r3, #12
 8007d1c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d104      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d24:	f7fe fa92 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 8007d28:	6378      	str	r0, [r7, #52]	; 0x34
 8007d2a:	f000 bf55 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d104      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d34:	f7fe f968 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8007d38:	6378      	str	r0, [r7, #52]	; 0x34
 8007d3a:	f000 bf4d 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007d3e:	4b1e      	ldr	r3, [pc, #120]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d4a:	d106      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	2b08      	cmp	r3, #8
 8007d50:	d103      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8007d52:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007d54:	637b      	str	r3, [r7, #52]	; 0x34
 8007d56:	f000 bf3f 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007d5a:	4b17      	ldr	r3, [pc, #92]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d107      	bne.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	2b0c      	cmp	r3, #12
 8007d6c:	d104      	bne.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8007d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d72:	637b      	str	r3, [r7, #52]	; 0x34
 8007d74:	f000 bf30 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d7c:	f000 bf2c 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d84:	1f11      	subs	r1, r2, #4
 8007d86:	430b      	orrs	r3, r1
 8007d88:	d13f      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007d8a:	4b0b      	ldr	r3, [pc, #44]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d94:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d104      	bne.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d9c:	f7fe fa56 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 8007da0:	6378      	str	r0, [r7, #52]	; 0x34
 8007da2:	f000 bf19 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	d10d      	bne.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007dac:	f7fe f92c 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8007db0:	6378      	str	r0, [r7, #52]	; 0x34
 8007db2:	f000 bf11 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007db6:	bf00      	nop
 8007db8:	46020c00 	.word	0x46020c00
 8007dbc:	02dc6c00 	.word	0x02dc6c00
 8007dc0:	08015aa8 	.word	0x08015aa8
 8007dc4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007dc8:	4ba6      	ldr	r3, [pc, #664]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd4:	d106      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	2b20      	cmp	r3, #32
 8007dda:	d103      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007ddc:	4ba2      	ldr	r3, [pc, #648]	; (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007dde:	637b      	str	r3, [r7, #52]	; 0x34
 8007de0:	f000 befa 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007de4:	4b9f      	ldr	r3, [pc, #636]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007de6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d107      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	2b30      	cmp	r3, #48	; 0x30
 8007df6:	d104      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8007df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8007dfe:	f000 beeb 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
 8007e06:	f000 bee7 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e0e:	f1a2 0108 	sub.w	r1, r2, #8
 8007e12:	430b      	orrs	r3, r1
 8007e14:	d136      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007e16:	4b93      	ldr	r3, [pc, #588]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e20:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d104      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e28:	f7fe fa10 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 8007e2c:	6378      	str	r0, [r7, #52]	; 0x34
 8007e2e:	f000 bed3 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	2b40      	cmp	r3, #64	; 0x40
 8007e36:	d104      	bne.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e38:	f7fe f8e6 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8007e3c:	6378      	str	r0, [r7, #52]	; 0x34
 8007e3e:	f000 becb 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007e42:	4b88      	ldr	r3, [pc, #544]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e4e:	d106      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8007e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e52:	2b80      	cmp	r3, #128	; 0x80
 8007e54:	d103      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8007e56:	4b84      	ldr	r3, [pc, #528]	; (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007e58:	637b      	str	r3, [r7, #52]	; 0x34
 8007e5a:	f000 bebd 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007e5e:	4b81      	ldr	r3, [pc, #516]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d107      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6e:	2bc0      	cmp	r3, #192	; 0xc0
 8007e70:	d104      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8007e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e76:	637b      	str	r3, [r7, #52]	; 0x34
 8007e78:	f000 beae 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e80:	f000 beaa 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e88:	f1a2 0110 	sub.w	r1, r2, #16
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	d139      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007e90:	4b74      	ldr	r3, [pc, #464]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e9a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d104      	bne.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007ea2:	f7fe f9d3 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 8007ea6:	6378      	str	r0, [r7, #52]	; 0x34
 8007ea8:	f000 be96 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb2:	d104      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007eb4:	f7fe f8a8 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8007eb8:	6378      	str	r0, [r7, #52]	; 0x34
 8007eba:	f000 be8d 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007ebe:	4b69      	ldr	r3, [pc, #420]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eca:	d107      	bne.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed2:	d103      	bne.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007ed4:	4b64      	ldr	r3, [pc, #400]	; (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed8:	f000 be7e 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007edc:	4b61      	ldr	r3, [pc, #388]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d108      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ef0:	d104      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ef8:	f000 be6e 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	637b      	str	r3, [r7, #52]	; 0x34
 8007f00:	f000 be6a 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f08:	f1a2 0120 	sub.w	r1, r2, #32
 8007f0c:	430b      	orrs	r3, r1
 8007f0e:	d158      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007f10:	4b54      	ldr	r3, [pc, #336]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d104      	bne.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007f22:	f7fe f9bb 	bl	800629c <HAL_RCC_GetPCLK3Freq>
 8007f26:	6378      	str	r0, [r7, #52]	; 0x34
 8007f28:	f000 be56 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d104      	bne.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f32:	f7fe f869 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8007f36:	6378      	str	r0, [r7, #52]	; 0x34
 8007f38:	f000 be4e 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007f3c:	4b49      	ldr	r3, [pc, #292]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f48:	d106      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d103      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8007f50:	4b45      	ldr	r3, [pc, #276]	; (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007f52:	637b      	str	r3, [r7, #52]	; 0x34
 8007f54:	f000 be40 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007f58:	4b42      	ldr	r3, [pc, #264]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f5e:	f003 0302 	and.w	r3, r3, #2
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d107      	bne.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d104      	bne.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8007f6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f70:	637b      	str	r3, [r7, #52]	; 0x34
 8007f72:	f000 be31 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007f76:	4b3b      	ldr	r3, [pc, #236]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b20      	cmp	r3, #32
 8007f80:	d11b      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d118      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f88:	4b36      	ldr	r3, [pc, #216]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007f94:	4b33      	ldr	r3, [pc, #204]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	0e1b      	lsrs	r3, r3, #24
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	e006      	b.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8007fa0:	4b30      	ldr	r3, [pc, #192]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fa6:	041b      	lsls	r3, r3, #16
 8007fa8:	0e1b      	lsrs	r3, r3, #24
 8007faa:	f003 030f 	and.w	r3, r3, #15
 8007fae:	4a2f      	ldr	r2, [pc, #188]	; (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb6:	f000 be0f 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007fbe:	f000 be0b 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fc6:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007fca:	430b      	orrs	r3, r1
 8007fcc:	d172      	bne.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007fce:	4b25      	ldr	r3, [pc, #148]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fd4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007fd8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe0:	d104      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007fe2:	f7fe f811 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8007fe6:	6378      	str	r0, [r7, #52]	; 0x34
 8007fe8:	f000 bdf6 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ff2:	d108      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ff4:	f107 0318 	add.w	r3, r7, #24
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7ff f949 	bl	8007290 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	637b      	str	r3, [r7, #52]	; 0x34
 8008002:	f000 bde9 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	2b00      	cmp	r3, #0
 800800a:	d104      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800800c:	f7fe f904 	bl	8006218 <HAL_RCC_GetHCLKFreq>
 8008010:	6378      	str	r0, [r7, #52]	; 0x34
 8008012:	f000 bde1 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800801c:	d128      	bne.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800801e:	4b11      	ldr	r3, [pc, #68]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0320 	and.w	r3, r3, #32
 8008026:	2b20      	cmp	r3, #32
 8008028:	d118      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800802a:	4b0e      	ldr	r3, [pc, #56]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d005      	beq.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8008036:	4b0b      	ldr	r3, [pc, #44]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	0e1b      	lsrs	r3, r3, #24
 800803c:	f003 030f 	and.w	r3, r3, #15
 8008040:	e006      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8008042:	4b08      	ldr	r3, [pc, #32]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008048:	041b      	lsls	r3, r3, #16
 800804a:	0e1b      	lsrs	r3, r3, #24
 800804c:	f003 030f 	and.w	r3, r3, #15
 8008050:	4a06      	ldr	r2, [pc, #24]	; (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008056:	637b      	str	r3, [r7, #52]	; 0x34
 8008058:	f000 bdbe 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	637b      	str	r3, [r7, #52]	; 0x34
 8008060:	f000 bdba 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008064:	46020c00 	.word	0x46020c00
 8008068:	00f42400 	.word	0x00f42400
 800806c:	08015aa8 	.word	0x08015aa8
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008070:	4baf      	ldr	r3, [pc, #700]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800807c:	d107      	bne.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008084:	d103      	bne.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8008086:	4bab      	ldr	r3, [pc, #684]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8008088:	637b      	str	r3, [r7, #52]	; 0x34
 800808a:	f000 bda5 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800808e:	4ba8      	ldr	r3, [pc, #672]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800809a:	d107      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080a2:	d103      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 80080a4:	4ba3      	ldr	r3, [pc, #652]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80080a6:	637b      	str	r3, [r7, #52]	; 0x34
 80080a8:	f000 bd96 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	637b      	str	r3, [r7, #52]	; 0x34
 80080b0:	f000 bd92 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80080b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080b8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80080bc:	430b      	orrs	r3, r1
 80080be:	d158      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80080c0:	4b9b      	ldr	r3, [pc, #620]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80080cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	d84b      	bhi.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80080d2:	a201      	add	r2, pc, #4	; (adr r2, 80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80080d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d8:	08008111 	.word	0x08008111
 80080dc:	080080ed 	.word	0x080080ed
 80080e0:	080080ff 	.word	0x080080ff
 80080e4:	0800811b 	.word	0x0800811b
 80080e8:	08008125 	.word	0x08008125
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7fe ff65 	bl	8006fc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080fa:	f000 bd6d 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080fe:	f107 030c 	add.w	r3, r7, #12
 8008102:	4618      	mov	r0, r3
 8008104:	f7ff fa2c 	bl	8007560 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800810c:	f000 bd64 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008110:	f7fe f882 	bl	8006218 <HAL_RCC_GetHCLKFreq>
 8008114:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008116:	f000 bd5f 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800811a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800811e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008120:	f000 bd5a 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008124:	4b82      	ldr	r3, [pc, #520]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0320 	and.w	r3, r3, #32
 800812c:	2b20      	cmp	r3, #32
 800812e:	d118      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008130:	4b7f      	ldr	r3, [pc, #508]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d005      	beq.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800813c:	4b7c      	ldr	r3, [pc, #496]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	0e1b      	lsrs	r3, r3, #24
 8008142:	f003 030f 	and.w	r3, r3, #15
 8008146:	e006      	b.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008148:	4b79      	ldr	r3, [pc, #484]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800814a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800814e:	041b      	lsls	r3, r3, #16
 8008150:	0e1b      	lsrs	r3, r3, #24
 8008152:	f003 030f 	and.w	r3, r3, #15
 8008156:	4a78      	ldr	r2, [pc, #480]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800815c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800815e:	f000 bd3b 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008162:	2300      	movs	r3, #0
 8008164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008166:	f000 bd37 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800816e:	f000 bd33 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8008172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008176:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800817a:	430b      	orrs	r3, r1
 800817c:	d167      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800817e:	4b6c      	ldr	r3, [pc, #432]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008184:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008188:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008190:	d036      	beq.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8008192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008194:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008198:	d855      	bhi.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081a0:	d029      	beq.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081a8:	d84d      	bhi.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081b0:	d013      	beq.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081b8:	d845      	bhi.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d015      	beq.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c6:	d13e      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fe fef7 	bl	8006fc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081d6:	f000 bcff 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081da:	f107 030c 	add.w	r3, r7, #12
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff f9be 	bl	8007560 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081e8:	f000 bcf6 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80081ec:	f7fe f814 	bl	8006218 <HAL_RCC_GetHCLKFreq>
 80081f0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081f2:	f000 bcf1 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80081f6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80081fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081fc:	f000 bcec 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008200:	4b4b      	ldr	r3, [pc, #300]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b20      	cmp	r3, #32
 800820a:	d118      	bne.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800820c:	4b48      	ldr	r3, [pc, #288]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d005      	beq.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8008218:	4b45      	ldr	r3, [pc, #276]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	0e1b      	lsrs	r3, r3, #24
 800821e:	f003 030f 	and.w	r3, r3, #15
 8008222:	e006      	b.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008224:	4b42      	ldr	r3, [pc, #264]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800822a:	041b      	lsls	r3, r3, #16
 800822c:	0e1b      	lsrs	r3, r3, #24
 800822e:	f003 030f 	and.w	r3, r3, #15
 8008232:	4a41      	ldr	r2, [pc, #260]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008238:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800823a:	f000 bccd 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008242:	f000 bcc9 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008246:	2300      	movs	r3, #0
 8008248:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800824a:	f000 bcc5 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800824e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008252:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8008256:	430b      	orrs	r3, r1
 8008258:	d14c      	bne.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800825a:	4b35      	ldr	r3, [pc, #212]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800825c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008260:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008264:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008268:	2b00      	cmp	r3, #0
 800826a:	d104      	bne.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800826c:	f7fd ffee 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 8008270:	6378      	str	r0, [r7, #52]	; 0x34
 8008272:	f000 bcb1 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800827c:	d104      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800827e:	f7fd fec3 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8008282:	6378      	str	r0, [r7, #52]	; 0x34
 8008284:	f000 bca8 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008288:	4b29      	ldr	r3, [pc, #164]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008294:	d107      	bne.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800829c:	d103      	bne.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800829e:	4b25      	ldr	r3, [pc, #148]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80082a0:	637b      	str	r3, [r7, #52]	; 0x34
 80082a2:	f000 bc99 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80082a6:	4b22      	ldr	r3, [pc, #136]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b20      	cmp	r3, #32
 80082b0:	d11c      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082b8:	d118      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082ba:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80082c6:	4b1a      	ldr	r3, [pc, #104]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	0e1b      	lsrs	r3, r3, #24
 80082cc:	f003 030f 	and.w	r3, r3, #15
 80082d0:	e006      	b.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80082d2:	4b17      	ldr	r3, [pc, #92]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80082d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082d8:	041b      	lsls	r3, r3, #16
 80082da:	0e1b      	lsrs	r3, r3, #24
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	4a15      	ldr	r2, [pc, #84]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80082e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082e6:	637b      	str	r3, [r7, #52]	; 0x34
 80082e8:	f000 bc76 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	637b      	str	r3, [r7, #52]	; 0x34
 80082f0:	f000 bc72 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80082f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082f8:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80082fc:	430b      	orrs	r3, r1
 80082fe:	d153      	bne.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008300:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008306:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800830a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	2b00      	cmp	r3, #0
 8008310:	d104      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008312:	f7fd ff9b 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 8008316:	6378      	str	r0, [r7, #52]	; 0x34
 8008318:	f000 bc5e 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008322:	d10b      	bne.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008324:	f7fd fe70 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8008328:	6378      	str	r0, [r7, #52]	; 0x34
 800832a:	f000 bc55 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800832e:	bf00      	nop
 8008330:	46020c00 	.word	0x46020c00
 8008334:	00f42400 	.word	0x00f42400
 8008338:	08015aa8 	.word	0x08015aa8
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800833c:	4ba1      	ldr	r3, [pc, #644]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008348:	d107      	bne.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008350:	d103      	bne.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8008352:	4b9d      	ldr	r3, [pc, #628]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008354:	637b      	str	r3, [r7, #52]	; 0x34
 8008356:	f000 bc3f 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800835a:	4b9a      	ldr	r3, [pc, #616]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b20      	cmp	r3, #32
 8008364:	d11c      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800836c:	d118      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800836e:	4b95      	ldr	r3, [pc, #596]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d005      	beq.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800837a:	4b92      	ldr	r3, [pc, #584]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	0e1b      	lsrs	r3, r3, #24
 8008380:	f003 030f 	and.w	r3, r3, #15
 8008384:	e006      	b.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8008386:	4b8f      	ldr	r3, [pc, #572]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800838c:	041b      	lsls	r3, r3, #16
 800838e:	0e1b      	lsrs	r3, r3, #24
 8008390:	f003 030f 	and.w	r3, r3, #15
 8008394:	4a8d      	ldr	r2, [pc, #564]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800839a:	637b      	str	r3, [r7, #52]	; 0x34
 800839c:	f000 bc1c 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80083a0:	2300      	movs	r3, #0
 80083a2:	637b      	str	r3, [r7, #52]	; 0x34
 80083a4:	f000 bc18 	b.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80083a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ac:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80083b0:	430b      	orrs	r3, r1
 80083b2:	d151      	bne.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80083b4:	4b83      	ldr	r3, [pc, #524]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80083ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083be:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	2bc0      	cmp	r3, #192	; 0xc0
 80083c4:	d024      	beq.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	2bc0      	cmp	r3, #192	; 0xc0
 80083ca:	d842      	bhi.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	2b80      	cmp	r3, #128	; 0x80
 80083d0:	d00d      	beq.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	2b80      	cmp	r3, #128	; 0x80
 80083d6:	d83c      	bhi.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80083d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	2b40      	cmp	r3, #64	; 0x40
 80083e2:	d011      	beq.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 80083e4:	e035      	b.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80083e6:	f7fd ff59 	bl	800629c <HAL_RCC_GetPCLK3Freq>
 80083ea:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80083ec:	e3f4      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083ee:	4b75      	ldr	r3, [pc, #468]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083fa:	d102      	bne.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 80083fc:	4b72      	ldr	r3, [pc, #456]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80083fe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008400:	e3ea      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008406:	e3e7      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008408:	f7fd fdfe 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 800840c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800840e:	e3e3      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008410:	4b6c      	ldr	r3, [pc, #432]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0320 	and.w	r3, r3, #32
 8008418:	2b20      	cmp	r3, #32
 800841a:	d117      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800841c:	4b69      	ldr	r3, [pc, #420]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8008428:	4b66      	ldr	r3, [pc, #408]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	0e1b      	lsrs	r3, r3, #24
 800842e:	f003 030f 	and.w	r3, r3, #15
 8008432:	e006      	b.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8008434:	4b63      	ldr	r3, [pc, #396]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800843a:	041b      	lsls	r3, r3, #16
 800843c:	0e1b      	lsrs	r3, r3, #24
 800843e:	f003 030f 	and.w	r3, r3, #15
 8008442:	4a62      	ldr	r2, [pc, #392]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008448:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800844a:	e3c5      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008450:	e3c2      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008456:	e3bf      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800845c:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8008460:	430b      	orrs	r3, r1
 8008462:	d147      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008464:	4b57      	ldr	r3, [pc, #348]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800846a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800846e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	2b00      	cmp	r3, #0
 8008474:	d103      	bne.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008476:	f7fd fee9 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 800847a:	6378      	str	r0, [r7, #52]	; 0x34
 800847c:	e3ac      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008484:	d103      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008486:	f7fd fdbf 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 800848a:	6378      	str	r0, [r7, #52]	; 0x34
 800848c:	e3a4      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800848e:	4b4d      	ldr	r3, [pc, #308]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800849a:	d106      	bne.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800849c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084a2:	d102      	bne.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 80084a4:	4b48      	ldr	r3, [pc, #288]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80084a6:	637b      	str	r3, [r7, #52]	; 0x34
 80084a8:	e396      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80084aa:	4b46      	ldr	r3, [pc, #280]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0320 	and.w	r3, r3, #32
 80084b2:	2b20      	cmp	r3, #32
 80084b4:	d11b      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80084bc:	d117      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084be:	4b41      	ldr	r3, [pc, #260]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d005      	beq.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80084ca:	4b3e      	ldr	r3, [pc, #248]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	0e1b      	lsrs	r3, r3, #24
 80084d0:	f003 030f 	and.w	r3, r3, #15
 80084d4:	e006      	b.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 80084d6:	4b3b      	ldr	r3, [pc, #236]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084dc:	041b      	lsls	r3, r3, #16
 80084de:	0e1b      	lsrs	r3, r3, #24
 80084e0:	f003 030f 	and.w	r3, r3, #15
 80084e4:	4a39      	ldr	r2, [pc, #228]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80084e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ea:	637b      	str	r3, [r7, #52]	; 0x34
 80084ec:	e374      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	637b      	str	r3, [r7, #52]	; 0x34
 80084f2:	e371      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80084f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084f8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80084fc:	430b      	orrs	r3, r1
 80084fe:	d16a      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008500:	4b30      	ldr	r3, [pc, #192]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800850a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	2b00      	cmp	r3, #0
 8008510:	d120      	bne.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008512:	4b2c      	ldr	r3, [pc, #176]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0320 	and.w	r3, r3, #32
 800851a:	2b20      	cmp	r3, #32
 800851c:	d117      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800851e:	4b29      	ldr	r3, [pc, #164]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d005      	beq.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800852a:	4b26      	ldr	r3, [pc, #152]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	0e1b      	lsrs	r3, r3, #24
 8008530:	f003 030f 	and.w	r3, r3, #15
 8008534:	e006      	b.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008536:	4b23      	ldr	r3, [pc, #140]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008538:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800853c:	041b      	lsls	r3, r3, #16
 800853e:	0e1b      	lsrs	r3, r3, #24
 8008540:	f003 030f 	and.w	r3, r3, #15
 8008544:	4a21      	ldr	r2, [pc, #132]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800854a:	637b      	str	r3, [r7, #52]	; 0x34
 800854c:	e344      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	637b      	str	r3, [r7, #52]	; 0x34
 8008552:	e341      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008554:	4b1b      	ldr	r3, [pc, #108]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800855a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800855e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008562:	d112      	bne.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800856a:	d10e      	bne.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800856c:	4b15      	ldr	r3, [pc, #84]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800856e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800857a:	d102      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 800857c:	23fa      	movs	r3, #250	; 0xfa
 800857e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008580:	e32a      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008582:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008586:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008588:	e326      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800858a:	4b0e      	ldr	r3, [pc, #56]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008596:	d106      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8008598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800859e:	d102      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 80085a0:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80085a2:	637b      	str	r3, [r7, #52]	; 0x34
 80085a4:	e318      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80085a6:	4b07      	ldr	r3, [pc, #28]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085ac:	f003 0302 	and.w	r3, r3, #2
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d10d      	bne.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085ba:	d109      	bne.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 80085bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085c0:	637b      	str	r3, [r7, #52]	; 0x34
 80085c2:	e309      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80085c4:	46020c00 	.word	0x46020c00
 80085c8:	00f42400 	.word	0x00f42400
 80085cc:	08015aa8 	.word	0x08015aa8
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	637b      	str	r3, [r7, #52]	; 0x34
 80085d4:	e300      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80085d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085da:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80085de:	430b      	orrs	r3, r1
 80085e0:	d164      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80085e2:	4ba2      	ldr	r3, [pc, #648]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80085e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80085e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80085ec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80085ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d120      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80085f4:	4b9d      	ldr	r3, [pc, #628]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0320 	and.w	r3, r3, #32
 80085fc:	2b20      	cmp	r3, #32
 80085fe:	d117      	bne.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008600:	4b9a      	ldr	r3, [pc, #616]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800860c:	4b97      	ldr	r3, [pc, #604]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	0e1b      	lsrs	r3, r3, #24
 8008612:	f003 030f 	and.w	r3, r3, #15
 8008616:	e006      	b.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8008618:	4b94      	ldr	r3, [pc, #592]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800861a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800861e:	041b      	lsls	r3, r3, #16
 8008620:	0e1b      	lsrs	r3, r3, #24
 8008622:	f003 030f 	and.w	r3, r3, #15
 8008626:	4a92      	ldr	r2, [pc, #584]	; (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800862c:	637b      	str	r3, [r7, #52]	; 0x34
 800862e:	e2d3      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8008630:	2300      	movs	r3, #0
 8008632:	637b      	str	r3, [r7, #52]	; 0x34
 8008634:	e2d0      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008636:	4b8d      	ldr	r3, [pc, #564]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800863c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008644:	d112      	bne.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800864c:	d10e      	bne.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800864e:	4b87      	ldr	r3, [pc, #540]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800865c:	d102      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800865e:	23fa      	movs	r3, #250	; 0xfa
 8008660:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008662:	e2b9      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008664:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008668:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800866a:	e2b5      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800866c:	4b7f      	ldr	r3, [pc, #508]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008678:	d106      	bne.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008680:	d102      	bne.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8008682:	4b7c      	ldr	r3, [pc, #496]	; (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008684:	637b      	str	r3, [r7, #52]	; 0x34
 8008686:	e2a7      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008688:	4b78      	ldr	r3, [pc, #480]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800868a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b02      	cmp	r3, #2
 8008694:	d107      	bne.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800869c:	d103      	bne.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800869e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086a2:	637b      	str	r3, [r7, #52]	; 0x34
 80086a4:	e298      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	637b      	str	r3, [r7, #52]	; 0x34
 80086aa:	e295      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80086ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086b0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80086b4:	430b      	orrs	r3, r1
 80086b6:	d147      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80086b8:	4b6c      	ldr	r3, [pc, #432]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086be:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80086c2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d103      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80086ca:	f7fd fdbf 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 80086ce:	6378      	str	r0, [r7, #52]	; 0x34
 80086d0:	e282      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80086d2:	4b66      	ldr	r3, [pc, #408]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086e0:	d112      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086e8:	d10e      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086ea:	4b60      	ldr	r3, [pc, #384]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086f8:	d102      	bne.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 80086fa:	23fa      	movs	r3, #250	; 0xfa
 80086fc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086fe:	e26b      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008700:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008704:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008706:	e267      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008708:	4b58      	ldr	r3, [pc, #352]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008714:	d106      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800871c:	d102      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800871e:	4b55      	ldr	r3, [pc, #340]	; (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008720:	637b      	str	r3, [r7, #52]	; 0x34
 8008722:	e259      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008724:	4b51      	ldr	r3, [pc, #324]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008726:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b02      	cmp	r3, #2
 8008730:	d107      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008738:	d103      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800873a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800873e:	637b      	str	r3, [r7, #52]	; 0x34
 8008740:	e24a      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	637b      	str	r3, [r7, #52]	; 0x34
 8008746:	e247      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800874c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8008750:	430b      	orrs	r3, r1
 8008752:	d12d      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008754:	4b45      	ldr	r3, [pc, #276]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800875a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800875e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008760:	4b42      	ldr	r3, [pc, #264]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800876c:	d105      	bne.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	2b00      	cmp	r3, #0
 8008772:	d102      	bne.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8008774:	4b3f      	ldr	r3, [pc, #252]	; (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008776:	637b      	str	r3, [r7, #52]	; 0x34
 8008778:	e22e      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008780:	d107      	bne.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008786:	4618      	mov	r0, r3
 8008788:	f7fe fc1a 	bl	8006fc0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	637b      	str	r3, [r7, #52]	; 0x34
 8008790:	e222      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008794:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008798:	d107      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800879a:	f107 0318 	add.w	r3, r7, #24
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe fd76 	bl	8007290 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	637b      	str	r3, [r7, #52]	; 0x34
 80087a8:	e216      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	637b      	str	r3, [r7, #52]	; 0x34
 80087ae:	e213      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80087b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087b4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80087b8:	430b      	orrs	r3, r1
 80087ba:	d15d      	bne.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80087bc:	4b2b      	ldr	r3, [pc, #172]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80087be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087c2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80087c6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80087c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087ce:	d028      	beq.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80087d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087d6:	d845      	bhi.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80087d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087de:	d013      	beq.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80087e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087e6:	d83d      	bhi.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80087e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d004      	beq.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087f4:	d004      	beq.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80087f6:	e035      	b.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80087f8:	f7fd fd3c 	bl	8006274 <HAL_RCC_GetPCLK2Freq>
 80087fc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80087fe:	e1eb      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008800:	f7fd fc02 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8008804:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008806:	e1e7      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008808:	4b18      	ldr	r3, [pc, #96]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008814:	d102      	bne.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8008816:	4b17      	ldr	r3, [pc, #92]	; (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008818:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800881a:	e1dd      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008820:	e1da      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008822:	4b12      	ldr	r3, [pc, #72]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0320 	and.w	r3, r3, #32
 800882a:	2b20      	cmp	r3, #32
 800882c:	d117      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800882e:	4b0f      	ldr	r3, [pc, #60]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d005      	beq.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800883a:	4b0c      	ldr	r3, [pc, #48]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	0e1b      	lsrs	r3, r3, #24
 8008840:	f003 030f 	and.w	r3, r3, #15
 8008844:	e006      	b.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8008846:	4b09      	ldr	r3, [pc, #36]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008848:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800884c:	041b      	lsls	r3, r3, #16
 800884e:	0e1b      	lsrs	r3, r3, #24
 8008850:	f003 030f 	and.w	r3, r3, #15
 8008854:	4a06      	ldr	r2, [pc, #24]	; (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800885a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800885c:	e1bc      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008862:	e1b9      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008864:	2300      	movs	r3, #0
 8008866:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008868:	e1b6      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800886a:	bf00      	nop
 800886c:	46020c00 	.word	0x46020c00
 8008870:	08015aa8 	.word	0x08015aa8
 8008874:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800887c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8008880:	430b      	orrs	r3, r1
 8008882:	d156      	bne.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008884:	4ba5      	ldr	r3, [pc, #660]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800888a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800888e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008896:	d028      	beq.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8008898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800889e:	d845      	bhi.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088a6:	d013      	beq.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088ae:	d83d      	bhi.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d004      	beq.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088bc:	d004      	beq.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 80088be:	e035      	b.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80088c0:	f7fd fcc4 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 80088c4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80088c6:	e187      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80088c8:	f7fd fb9e 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 80088cc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80088ce:	e183      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80088d0:	4b92      	ldr	r3, [pc, #584]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088dc:	d102      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 80088de:	4b90      	ldr	r3, [pc, #576]	; (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80088e0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088e2:	e179      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088e8:	e176      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80088ea:	4b8c      	ldr	r3, [pc, #560]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0320 	and.w	r3, r3, #32
 80088f2:	2b20      	cmp	r3, #32
 80088f4:	d117      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80088f6:	4b89      	ldr	r3, [pc, #548]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d005      	beq.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8008902:	4b86      	ldr	r3, [pc, #536]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	0e1b      	lsrs	r3, r3, #24
 8008908:	f003 030f 	and.w	r3, r3, #15
 800890c:	e006      	b.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800890e:	4b83      	ldr	r3, [pc, #524]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008910:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008914:	041b      	lsls	r3, r3, #16
 8008916:	0e1b      	lsrs	r3, r3, #24
 8008918:	f003 030f 	and.w	r3, r3, #15
 800891c:	4a81      	ldr	r2, [pc, #516]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800891e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008922:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008924:	e158      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008926:	2300      	movs	r3, #0
 8008928:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800892a:	e155      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800892c:	2300      	movs	r3, #0
 800892e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008930:	e152      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008936:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800893a:	430b      	orrs	r3, r1
 800893c:	d177      	bne.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800893e:	4b77      	ldr	r3, [pc, #476]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008944:	f003 0318 	and.w	r3, r3, #24
 8008948:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	2b18      	cmp	r3, #24
 800894e:	d86b      	bhi.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8008950:	a201      	add	r2, pc, #4	; (adr r2, 8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8008952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008956:	bf00      	nop
 8008958:	080089bd 	.word	0x080089bd
 800895c:	08008a29 	.word	0x08008a29
 8008960:	08008a29 	.word	0x08008a29
 8008964:	08008a29 	.word	0x08008a29
 8008968:	08008a29 	.word	0x08008a29
 800896c:	08008a29 	.word	0x08008a29
 8008970:	08008a29 	.word	0x08008a29
 8008974:	08008a29 	.word	0x08008a29
 8008978:	080089c5 	.word	0x080089c5
 800897c:	08008a29 	.word	0x08008a29
 8008980:	08008a29 	.word	0x08008a29
 8008984:	08008a29 	.word	0x08008a29
 8008988:	08008a29 	.word	0x08008a29
 800898c:	08008a29 	.word	0x08008a29
 8008990:	08008a29 	.word	0x08008a29
 8008994:	08008a29 	.word	0x08008a29
 8008998:	080089cd 	.word	0x080089cd
 800899c:	08008a29 	.word	0x08008a29
 80089a0:	08008a29 	.word	0x08008a29
 80089a4:	08008a29 	.word	0x08008a29
 80089a8:	08008a29 	.word	0x08008a29
 80089ac:	08008a29 	.word	0x08008a29
 80089b0:	08008a29 	.word	0x08008a29
 80089b4:	08008a29 	.word	0x08008a29
 80089b8:	080089e7 	.word	0x080089e7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80089bc:	f7fd fc6e 	bl	800629c <HAL_RCC_GetPCLK3Freq>
 80089c0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80089c2:	e109      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80089c4:	f7fd fb20 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 80089c8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80089ca:	e105      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80089cc:	4b53      	ldr	r3, [pc, #332]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089d8:	d102      	bne.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 80089da:	4b51      	ldr	r3, [pc, #324]	; (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80089dc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80089de:	e0fb      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80089e0:	2300      	movs	r3, #0
 80089e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089e4:	e0f8      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80089e6:	4b4d      	ldr	r3, [pc, #308]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0320 	and.w	r3, r3, #32
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	d117      	bne.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80089f2:	4b4a      	ldr	r3, [pc, #296]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d005      	beq.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 80089fe:	4b47      	ldr	r3, [pc, #284]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	0e1b      	lsrs	r3, r3, #24
 8008a04:	f003 030f 	and.w	r3, r3, #15
 8008a08:	e006      	b.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8008a0a:	4b44      	ldr	r3, [pc, #272]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a10:	041b      	lsls	r3, r3, #16
 8008a12:	0e1b      	lsrs	r3, r3, #24
 8008a14:	f003 030f 	and.w	r3, r3, #15
 8008a18:	4a42      	ldr	r2, [pc, #264]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a1e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a20:	e0da      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a26:	e0d7      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a2c:	e0d4      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a32:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8008a36:	430b      	orrs	r3, r1
 8008a38:	d155      	bne.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008a3a:	4b38      	ldr	r3, [pc, #224]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008a40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008a44:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a4c:	d013      	beq.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a54:	d844      	bhi.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a5c:	d013      	beq.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a64:	d83c      	bhi.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d014      	beq.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a72:	d014      	beq.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8008a74:	e034      	b.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a76:	f107 0318 	add.w	r3, r7, #24
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fe fc08 	bl	8007290 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a84:	e0a8      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fa98 	bl	8006fc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a94:	e0a0      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008a96:	f7fd fab7 	bl	8006008 <HAL_RCC_GetSysClockFreq>
 8008a9a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008a9c:	e09c      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008a9e:	4b1f      	ldr	r3, [pc, #124]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0320 	and.w	r3, r3, #32
 8008aa6:	2b20      	cmp	r3, #32
 8008aa8:	d117      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008aaa:	4b1c      	ldr	r3, [pc, #112]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8008ab6:	4b19      	ldr	r3, [pc, #100]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	0e1b      	lsrs	r3, r3, #24
 8008abc:	f003 030f 	and.w	r3, r3, #15
 8008ac0:	e006      	b.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008ac2:	4b16      	ldr	r3, [pc, #88]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008ac4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ac8:	041b      	lsls	r3, r3, #16
 8008aca:	0e1b      	lsrs	r3, r3, #24
 8008acc:	f003 030f 	and.w	r3, r3, #15
 8008ad0:	4a14      	ldr	r2, [pc, #80]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ad6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008ad8:	e07e      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ade:	e07b      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ae4:	e078      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008ae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aea:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8008aee:	430b      	orrs	r3, r1
 8008af0:	d138      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008af2:	4b0a      	ldr	r3, [pc, #40]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008afc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008afe:	4b07      	ldr	r3, [pc, #28]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b04:	f003 0302 	and.w	r3, r3, #2
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d10d      	bne.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10a      	bne.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8008b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b16:	637b      	str	r3, [r7, #52]	; 0x34
 8008b18:	e05e      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008b1a:	bf00      	nop
 8008b1c:	46020c00 	.word	0x46020c00
 8008b20:	00f42400 	.word	0x00f42400
 8008b24:	08015aa8 	.word	0x08015aa8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008b28:	4b2e      	ldr	r3, [pc, #184]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008b2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b36:	d112      	bne.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b3e:	d10e      	bne.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008b40:	4b28      	ldr	r3, [pc, #160]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b4e:	d102      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8008b50:	23fa      	movs	r3, #250	; 0xfa
 8008b52:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008b54:	e040      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008b56:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008b5a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008b5c:	e03c      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	637b      	str	r3, [r7, #52]	; 0x34
 8008b62:	e039      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b68:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	d131      	bne.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008b70:	4b1c      	ldr	r3, [pc, #112]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008b72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008b76:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008b7a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008b7c:	4b19      	ldr	r3, [pc, #100]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b88:	d105      	bne.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d102      	bne.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8008b90:	4b15      	ldr	r3, [pc, #84]	; (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8008b92:	637b      	str	r3, [r7, #52]	; 0x34
 8008b94:	e020      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008b96:	4b13      	ldr	r3, [pc, #76]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ba2:	d106      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008baa:	d102      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008bac:	4b0f      	ldr	r3, [pc, #60]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8008bae:	637b      	str	r3, [r7, #52]	; 0x34
 8008bb0:	e012      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008bb2:	4b0c      	ldr	r3, [pc, #48]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bbe:	d106      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bc6:	d102      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8008bc8:	4b09      	ldr	r3, [pc, #36]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8008bca:	637b      	str	r3, [r7, #52]	; 0x34
 8008bcc:	e004      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8008bd2:	e001      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8008bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3738      	adds	r7, #56	; 0x38
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	46020c00 	.word	0x46020c00
 8008be8:	02dc6c00 	.word	0x02dc6c00
 8008bec:	016e3600 	.word	0x016e3600
 8008bf0:	00f42400 	.word	0x00f42400

08008bf4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008bfc:	4b47      	ldr	r3, [pc, #284]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a46      	ldr	r2, [pc, #280]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008c02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c06:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c08:	f7f8 ff52 	bl	8001ab0 <HAL_GetTick>
 8008c0c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c0e:	e008      	b.n	8008c22 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c10:	f7f8 ff4e 	bl	8001ab0 <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d901      	bls.n	8008c22 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e077      	b.n	8008d12 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c22:	4b3e      	ldr	r3, [pc, #248]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1f0      	bne.n	8008c10 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008c2e:	4b3b      	ldr	r3, [pc, #236]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008c36:	f023 0303 	bic.w	r3, r3, #3
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	6811      	ldr	r1, [r2, #0]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	6852      	ldr	r2, [r2, #4]
 8008c42:	3a01      	subs	r2, #1
 8008c44:	0212      	lsls	r2, r2, #8
 8008c46:	430a      	orrs	r2, r1
 8008c48:	4934      	ldr	r1, [pc, #208]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008c4e:	4b33      	ldr	r3, [pc, #204]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008c50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c52:	4b33      	ldr	r3, [pc, #204]	; (8008d20 <RCCEx_PLL2_Config+0x12c>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	6892      	ldr	r2, [r2, #8]
 8008c5a:	3a01      	subs	r2, #1
 8008c5c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	68d2      	ldr	r2, [r2, #12]
 8008c64:	3a01      	subs	r2, #1
 8008c66:	0252      	lsls	r2, r2, #9
 8008c68:	b292      	uxth	r2, r2
 8008c6a:	4311      	orrs	r1, r2
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6912      	ldr	r2, [r2, #16]
 8008c70:	3a01      	subs	r2, #1
 8008c72:	0412      	lsls	r2, r2, #16
 8008c74:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008c78:	4311      	orrs	r1, r2
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	6952      	ldr	r2, [r2, #20]
 8008c7e:	3a01      	subs	r2, #1
 8008c80:	0612      	lsls	r2, r2, #24
 8008c82:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008c86:	430a      	orrs	r2, r1
 8008c88:	4924      	ldr	r1, [pc, #144]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008c8e:	4b23      	ldr	r3, [pc, #140]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c92:	f023 020c 	bic.w	r2, r3, #12
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	4920      	ldr	r1, [pc, #128]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008ca0:	4b1e      	ldr	r3, [pc, #120]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	491c      	ldr	r1, [pc, #112]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008cae:	4b1b      	ldr	r3, [pc, #108]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb2:	4a1a      	ldr	r2, [pc, #104]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008cb4:	f023 0310 	bic.w	r3, r3, #16
 8008cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008cba:	4b18      	ldr	r3, [pc, #96]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cc2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	69d2      	ldr	r2, [r2, #28]
 8008cca:	00d2      	lsls	r2, r2, #3
 8008ccc:	4913      	ldr	r1, [pc, #76]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008cd2:	4b12      	ldr	r3, [pc, #72]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	4a11      	ldr	r2, [pc, #68]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008cd8:	f043 0310 	orr.w	r3, r3, #16
 8008cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008cde:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a0e      	ldr	r2, [pc, #56]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008ce4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ce8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008cea:	f7f8 fee1 	bl	8001ab0 <HAL_GetTick>
 8008cee:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008cf0:	e008      	b.n	8008d04 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008cf2:	f7f8 fedd 	bl	8001ab0 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d901      	bls.n	8008d04 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e006      	b.n	8008d12 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d04:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <RCCEx_PLL2_Config+0x128>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0f0      	beq.n	8008cf2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008d10:	2300      	movs	r3, #0

}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	46020c00 	.word	0x46020c00
 8008d20:	80800000 	.word	0x80800000

08008d24 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008d2c:	4b47      	ldr	r3, [pc, #284]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a46      	ldr	r2, [pc, #280]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d36:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d38:	f7f8 feba 	bl	8001ab0 <HAL_GetTick>
 8008d3c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d3e:	e008      	b.n	8008d52 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d40:	f7f8 feb6 	bl	8001ab0 <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d901      	bls.n	8008d52 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e077      	b.n	8008e42 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d52:	4b3e      	ldr	r3, [pc, #248]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1f0      	bne.n	8008d40 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008d5e:	4b3b      	ldr	r3, [pc, #236]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008d66:	f023 0303 	bic.w	r3, r3, #3
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	6811      	ldr	r1, [r2, #0]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6852      	ldr	r2, [r2, #4]
 8008d72:	3a01      	subs	r2, #1
 8008d74:	0212      	lsls	r2, r2, #8
 8008d76:	430a      	orrs	r2, r1
 8008d78:	4934      	ldr	r1, [pc, #208]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	630b      	str	r3, [r1, #48]	; 0x30
 8008d7e:	4b33      	ldr	r3, [pc, #204]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d82:	4b33      	ldr	r3, [pc, #204]	; (8008e50 <RCCEx_PLL3_Config+0x12c>)
 8008d84:	4013      	ands	r3, r2
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	6892      	ldr	r2, [r2, #8]
 8008d8a:	3a01      	subs	r2, #1
 8008d8c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	68d2      	ldr	r2, [r2, #12]
 8008d94:	3a01      	subs	r2, #1
 8008d96:	0252      	lsls	r2, r2, #9
 8008d98:	b292      	uxth	r2, r2
 8008d9a:	4311      	orrs	r1, r2
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6912      	ldr	r2, [r2, #16]
 8008da0:	3a01      	subs	r2, #1
 8008da2:	0412      	lsls	r2, r2, #16
 8008da4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008da8:	4311      	orrs	r1, r2
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	6952      	ldr	r2, [r2, #20]
 8008dae:	3a01      	subs	r2, #1
 8008db0:	0612      	lsls	r2, r2, #24
 8008db2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008db6:	430a      	orrs	r2, r1
 8008db8:	4924      	ldr	r1, [pc, #144]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008dbe:	4b23      	ldr	r3, [pc, #140]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc2:	f023 020c 	bic.w	r2, r3, #12
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	4920      	ldr	r1, [pc, #128]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008dd0:	4b1e      	ldr	r3, [pc, #120]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	491c      	ldr	r1, [pc, #112]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008dde:	4b1b      	ldr	r3, [pc, #108]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de2:	4a1a      	ldr	r2, [pc, #104]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008de4:	f023 0310 	bic.w	r3, r3, #16
 8008de8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008dea:	4b18      	ldr	r3, [pc, #96]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008df2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	69d2      	ldr	r2, [r2, #28]
 8008dfa:	00d2      	lsls	r2, r2, #3
 8008dfc:	4913      	ldr	r1, [pc, #76]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008e02:	4b12      	ldr	r3, [pc, #72]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e06:	4a11      	ldr	r2, [pc, #68]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008e08:	f043 0310 	orr.w	r3, r3, #16
 8008e0c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008e0e:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a0e      	ldr	r2, [pc, #56]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e18:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e1a:	f7f8 fe49 	bl	8001ab0 <HAL_GetTick>
 8008e1e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e20:	e008      	b.n	8008e34 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008e22:	f7f8 fe45 	bl	8001ab0 <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d901      	bls.n	8008e34 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e006      	b.n	8008e42 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e34:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <RCCEx_PLL3_Config+0x128>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d0f0      	beq.n	8008e22 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	46020c00 	.word	0x46020c00
 8008e50:	80800000 	.word	0x80800000

08008e54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d071      	beq.n	8008f4a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d106      	bne.n	8008e80 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7f8 fb5c 	bl	8001538 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008e88:	4b32      	ldr	r3, [pc, #200]	; (8008f54 <HAL_RTC_Init+0x100>)
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f003 0310 	and.w	r3, r3, #16
 8008e90:	2b10      	cmp	r3, #16
 8008e92:	d051      	beq.n	8008f38 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e94:	4b2f      	ldr	r3, [pc, #188]	; (8008f54 <HAL_RTC_Init+0x100>)
 8008e96:	22ca      	movs	r2, #202	; 0xca
 8008e98:	625a      	str	r2, [r3, #36]	; 0x24
 8008e9a:	4b2e      	ldr	r3, [pc, #184]	; (8008f54 <HAL_RTC_Init+0x100>)
 8008e9c:	2253      	movs	r2, #83	; 0x53
 8008e9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fa6d 	bl	8009380 <RTC_EnterInitMode>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d13f      	bne.n	8008f30 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008eb0:	4b28      	ldr	r3, [pc, #160]	; (8008f54 <HAL_RTC_Init+0x100>)
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	4a27      	ldr	r2, [pc, #156]	; (8008f54 <HAL_RTC_Init+0x100>)
 8008eb6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ebe:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008ec0:	4b24      	ldr	r3, [pc, #144]	; (8008f54 <HAL_RTC_Init+0x100>)
 8008ec2:	699a      	ldr	r2, [r3, #24]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6859      	ldr	r1, [r3, #4]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	4319      	orrs	r1, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	430b      	orrs	r3, r1
 8008ed4:	491f      	ldr	r1, [pc, #124]	; (8008f54 <HAL_RTC_Init+0x100>)
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68da      	ldr	r2, [r3, #12]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	041b      	lsls	r3, r3, #16
 8008ee4:	491b      	ldr	r1, [pc, #108]	; (8008f54 <HAL_RTC_Init+0x100>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008eea:	4b1a      	ldr	r3, [pc, #104]	; (8008f54 <HAL_RTC_Init+0x100>)
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efa:	430b      	orrs	r3, r1
 8008efc:	4915      	ldr	r1, [pc, #84]	; (8008f54 <HAL_RTC_Init+0x100>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fa78 	bl	80093f8 <RTC_ExitInitMode>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10e      	bne.n	8008f30 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008f12:	4b10      	ldr	r3, [pc, #64]	; (8008f54 <HAL_RTC_Init+0x100>)
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a19      	ldr	r1, [r3, #32]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	4319      	orrs	r1, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	430b      	orrs	r3, r1
 8008f2a:	490a      	ldr	r1, [pc, #40]	; (8008f54 <HAL_RTC_Init+0x100>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f30:	4b08      	ldr	r3, [pc, #32]	; (8008f54 <HAL_RTC_Init+0x100>)
 8008f32:	22ff      	movs	r2, #255	; 0xff
 8008f34:	625a      	str	r2, [r3, #36]	; 0x24
 8008f36:	e001      	b.n	8008f3c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d103      	bne.n	8008f4a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	46007800 	.word	0x46007800

08008f58 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f58:	b590      	push	{r4, r7, lr}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d101      	bne.n	8008f72 <HAL_RTC_SetTime+0x1a>
 8008f6e:	2302      	movs	r3, #2
 8008f70:	e088      	b.n	8009084 <HAL_RTC_SetTime+0x12c>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f82:	4b42      	ldr	r3, [pc, #264]	; (800908c <HAL_RTC_SetTime+0x134>)
 8008f84:	22ca      	movs	r2, #202	; 0xca
 8008f86:	625a      	str	r2, [r3, #36]	; 0x24
 8008f88:	4b40      	ldr	r3, [pc, #256]	; (800908c <HAL_RTC_SetTime+0x134>)
 8008f8a:	2253      	movs	r2, #83	; 0x53
 8008f8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f000 f9f6 	bl	8009380 <RTC_EnterInitMode>
 8008f94:	4603      	mov	r3, r0
 8008f96:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008f98:	7cfb      	ldrb	r3, [r7, #19]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d163      	bne.n	8009066 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008f9e:	4b3b      	ldr	r3, [pc, #236]	; (800908c <HAL_RTC_SetTime+0x134>)
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008faa:	d057      	beq.n	800905c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d125      	bne.n	8008ffe <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008fb2:	4b36      	ldr	r3, [pc, #216]	; (800908c <HAL_RTC_SetTime+0x134>)
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d102      	bne.n	8008fc4 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 fa53 	bl	8009474 <RTC_ByteToBcd2>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	785b      	ldrb	r3, [r3, #1]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 fa4c 	bl	8009474 <RTC_ByteToBcd2>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008fe0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	789b      	ldrb	r3, [r3, #2]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fa44 	bl	8009474 <RTC_ByteToBcd2>
 8008fec:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008fee:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	78db      	ldrb	r3, [r3, #3]
 8008ff6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	e017      	b.n	800902e <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008ffe:	4b23      	ldr	r3, [pc, #140]	; (800908c <HAL_RTC_SetTime+0x134>)
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009006:	2b00      	cmp	r3, #0
 8009008:	d102      	bne.n	8009010 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2200      	movs	r2, #0
 800900e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	785b      	ldrb	r3, [r3, #1]
 800901a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800901c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009022:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	78db      	ldrb	r3, [r3, #3]
 8009028:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800902a:	4313      	orrs	r3, r2
 800902c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800902e:	4a17      	ldr	r2, [pc, #92]	; (800908c <HAL_RTC_SetTime+0x134>)
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009036:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800903a:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800903c:	4b13      	ldr	r3, [pc, #76]	; (800908c <HAL_RTC_SetTime+0x134>)
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	4a12      	ldr	r2, [pc, #72]	; (800908c <HAL_RTC_SetTime+0x134>)
 8009042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009046:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8009048:	4b10      	ldr	r3, [pc, #64]	; (800908c <HAL_RTC_SetTime+0x134>)
 800904a:	699a      	ldr	r2, [r3, #24]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	68d9      	ldr	r1, [r3, #12]
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	430b      	orrs	r3, r1
 8009056:	490d      	ldr	r1, [pc, #52]	; (800908c <HAL_RTC_SetTime+0x134>)
 8009058:	4313      	orrs	r3, r2
 800905a:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f000 f9cb 	bl	80093f8 <RTC_ExitInitMode>
 8009062:	4603      	mov	r3, r0
 8009064:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009066:	4b09      	ldr	r3, [pc, #36]	; (800908c <HAL_RTC_SetTime+0x134>)
 8009068:	22ff      	movs	r2, #255	; 0xff
 800906a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800906c:	7cfb      	ldrb	r3, [r7, #19]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d103      	bne.n	800907a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8009082:	7cfb      	ldrb	r3, [r7, #19]
}
 8009084:	4618      	mov	r0, r3
 8009086:	371c      	adds	r7, #28
 8009088:	46bd      	mov	sp, r7
 800908a:	bd90      	pop	{r4, r7, pc}
 800908c:	46007800 	.word	0x46007800

08009090 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800909c:	4b34      	ldr	r3, [pc, #208]	; (8009170 <HAL_RTC_GetTime+0xe0>)
 800909e:	689a      	ldr	r2, [r3, #8]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80090a4:	4b32      	ldr	r3, [pc, #200]	; (8009170 <HAL_RTC_GetTime+0xe0>)
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090b0:	d04a      	beq.n	8009148 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80090b2:	4b2f      	ldr	r3, [pc, #188]	; (8009170 <HAL_RTC_GetTime+0xe0>)
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80090be:	4b2c      	ldr	r3, [pc, #176]	; (8009170 <HAL_RTC_GetTime+0xe0>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80090c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80090ca:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	0c1b      	lsrs	r3, r3, #16
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	0a1b      	lsrs	r3, r3, #8
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	0d9b      	lsrs	r3, r3, #22
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	b2da      	uxtb	r2, r3
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d12a      	bne.n	8009166 <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	4618      	mov	r0, r3
 8009116:	f000 f9cd 	bl	80094b4 <RTC_Bcd2ToByte>
 800911a:	4603      	mov	r3, r0
 800911c:	461a      	mov	r2, r3
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	785b      	ldrb	r3, [r3, #1]
 8009126:	4618      	mov	r0, r3
 8009128:	f000 f9c4 	bl	80094b4 <RTC_Bcd2ToByte>
 800912c:	4603      	mov	r3, r0
 800912e:	461a      	mov	r2, r3
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	789b      	ldrb	r3, [r3, #2]
 8009138:	4618      	mov	r0, r3
 800913a:	f000 f9bb 	bl	80094b4 <RTC_Bcd2ToByte>
 800913e:	4603      	mov	r3, r0
 8009140:	461a      	mov	r2, r3
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	709a      	strb	r2, [r3, #2]
 8009146:	e00e      	b.n	8009166 <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	2200      	movs	r2, #0
 800914c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2200      	movs	r2, #0
 8009152:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2200      	movs	r2, #0
 8009158:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2200      	movs	r2, #0
 800915e:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	2200      	movs	r2, #0
 8009164:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3718      	adds	r7, #24
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	46007800 	.word	0x46007800

08009174 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009174:	b590      	push	{r4, r7, lr}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009186:	2b01      	cmp	r3, #1
 8009188:	d101      	bne.n	800918e <HAL_RTC_SetDate+0x1a>
 800918a:	2302      	movs	r3, #2
 800918c:	e071      	b.n	8009272 <HAL_RTC_SetDate+0xfe>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2202      	movs	r2, #2
 800919a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10e      	bne.n	80091c2 <HAL_RTC_SetDate+0x4e>
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	785b      	ldrb	r3, [r3, #1]
 80091a8:	f003 0310 	and.w	r3, r3, #16
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d008      	beq.n	80091c2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	785b      	ldrb	r3, [r3, #1]
 80091b4:	f023 0310 	bic.w	r3, r3, #16
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	330a      	adds	r3, #10
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d11c      	bne.n	8009202 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	78db      	ldrb	r3, [r3, #3]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 f951 	bl	8009474 <RTC_ByteToBcd2>
 80091d2:	4603      	mov	r3, r0
 80091d4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	785b      	ldrb	r3, [r3, #1]
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 f94a 	bl	8009474 <RTC_ByteToBcd2>
 80091e0:	4603      	mov	r3, r0
 80091e2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80091e4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	789b      	ldrb	r3, [r3, #2]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 f942 	bl	8009474 <RTC_ByteToBcd2>
 80091f0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80091f2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80091fc:	4313      	orrs	r3, r2
 80091fe:	617b      	str	r3, [r7, #20]
 8009200:	e00e      	b.n	8009220 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	78db      	ldrb	r3, [r3, #3]
 8009206:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	785b      	ldrb	r3, [r3, #1]
 800920c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800920e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009214:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800921c:	4313      	orrs	r3, r2
 800921e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009220:	4b16      	ldr	r3, [pc, #88]	; (800927c <HAL_RTC_SetDate+0x108>)
 8009222:	22ca      	movs	r2, #202	; 0xca
 8009224:	625a      	str	r2, [r3, #36]	; 0x24
 8009226:	4b15      	ldr	r3, [pc, #84]	; (800927c <HAL_RTC_SetDate+0x108>)
 8009228:	2253      	movs	r2, #83	; 0x53
 800922a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f8a7 	bl	8009380 <RTC_EnterInitMode>
 8009232:	4603      	mov	r3, r0
 8009234:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009236:	7cfb      	ldrb	r3, [r7, #19]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10b      	bne.n	8009254 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800923c:	4a0f      	ldr	r2, [pc, #60]	; (800927c <HAL_RTC_SetDate+0x108>)
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009244:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009248:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f000 f8d4 	bl	80093f8 <RTC_ExitInitMode>
 8009250:	4603      	mov	r3, r0
 8009252:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009254:	4b09      	ldr	r3, [pc, #36]	; (800927c <HAL_RTC_SetDate+0x108>)
 8009256:	22ff      	movs	r2, #255	; 0xff
 8009258:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800925a:	7cfb      	ldrb	r3, [r7, #19]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d103      	bne.n	8009268 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8009270:	7cfb      	ldrb	r3, [r7, #19]
}
 8009272:	4618      	mov	r0, r3
 8009274:	371c      	adds	r7, #28
 8009276:	46bd      	mov	sp, r7
 8009278:	bd90      	pop	{r4, r7, pc}
 800927a:	bf00      	nop
 800927c:	46007800 	.word	0x46007800

08009280 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800928c:	4b22      	ldr	r3, [pc, #136]	; (8009318 <HAL_RTC_GetDate+0x98>)
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009294:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009298:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	0c1b      	lsrs	r3, r3, #16
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	f003 031f 	and.w	r3, r3, #31
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	0b5b      	lsrs	r3, r3, #13
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	f003 0307 	and.w	r3, r3, #7
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d11a      	bne.n	800930e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	78db      	ldrb	r3, [r3, #3]
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 f8e9 	bl	80094b4 <RTC_Bcd2ToByte>
 80092e2:	4603      	mov	r3, r0
 80092e4:	461a      	mov	r2, r3
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	785b      	ldrb	r3, [r3, #1]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 f8e0 	bl	80094b4 <RTC_Bcd2ToByte>
 80092f4:	4603      	mov	r3, r0
 80092f6:	461a      	mov	r2, r3
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	789b      	ldrb	r3, [r3, #2]
 8009300:	4618      	mov	r0, r3
 8009302:	f000 f8d7 	bl	80094b4 <RTC_Bcd2ToByte>
 8009306:	4603      	mov	r3, r0
 8009308:	461a      	mov	r2, r3
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	46007800 	.word	0x46007800

0800931c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009324:	4b15      	ldr	r3, [pc, #84]	; (800937c <HAL_RTC_WaitForSynchro+0x60>)
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	4a14      	ldr	r2, [pc, #80]	; (800937c <HAL_RTC_WaitForSynchro+0x60>)
 800932a:	f023 0320 	bic.w	r3, r3, #32
 800932e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009330:	f7f8 fbbe 	bl	8001ab0 <HAL_GetTick>
 8009334:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009336:	e013      	b.n	8009360 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009338:	f7f8 fbba 	bl	8001ab0 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009346:	d90b      	bls.n	8009360 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009348:	4b0c      	ldr	r3, [pc, #48]	; (800937c <HAL_RTC_WaitForSynchro+0x60>)
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f003 0320 	and.w	r3, r3, #32
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10c      	bne.n	800936e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2203      	movs	r2, #3
 8009358:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	e008      	b.n	8009372 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009360:	4b06      	ldr	r3, [pc, #24]	; (800937c <HAL_RTC_WaitForSynchro+0x60>)
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	f003 0320 	and.w	r3, r3, #32
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0e5      	beq.n	8009338 <HAL_RTC_WaitForSynchro+0x1c>
 800936c:	e000      	b.n	8009370 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800936e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	46007800 	.word	0x46007800

08009380 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800938c:	4b19      	ldr	r3, [pc, #100]	; (80093f4 <RTC_EnterInitMode+0x74>)
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009394:	2b00      	cmp	r3, #0
 8009396:	d128      	bne.n	80093ea <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009398:	4b16      	ldr	r3, [pc, #88]	; (80093f4 <RTC_EnterInitMode+0x74>)
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	4a15      	ldr	r2, [pc, #84]	; (80093f4 <RTC_EnterInitMode+0x74>)
 800939e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093a2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80093a4:	f7f8 fb84 	bl	8001ab0 <HAL_GetTick>
 80093a8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80093aa:	e013      	b.n	80093d4 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80093ac:	f7f8 fb80 	bl	8001ab0 <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093ba:	d90b      	bls.n	80093d4 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80093bc:	4b0d      	ldr	r3, [pc, #52]	; (80093f4 <RTC_EnterInitMode+0x74>)
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10f      	bne.n	80093e8 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2203      	movs	r2, #3
 80093d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80093d4:	4b07      	ldr	r3, [pc, #28]	; (80093f4 <RTC_EnterInitMode+0x74>)
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d104      	bne.n	80093ea <RTC_EnterInitMode+0x6a>
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d1e2      	bne.n	80093ac <RTC_EnterInitMode+0x2c>
 80093e6:	e000      	b.n	80093ea <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 80093e8:	bf00      	nop
        }
      }
    }
  }

  return status;
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	46007800 	.word	0x46007800

080093f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009404:	4b1a      	ldr	r3, [pc, #104]	; (8009470 <RTC_ExitInitMode+0x78>)
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	4a19      	ldr	r2, [pc, #100]	; (8009470 <RTC_ExitInitMode+0x78>)
 800940a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800940e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009410:	4b17      	ldr	r3, [pc, #92]	; (8009470 <RTC_ExitInitMode+0x78>)
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	f003 0320 	and.w	r3, r3, #32
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10c      	bne.n	8009436 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff ff7d 	bl	800931c <HAL_RTC_WaitForSynchro>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d01e      	beq.n	8009466 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2203      	movs	r2, #3
 800942c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	73fb      	strb	r3, [r7, #15]
 8009434:	e017      	b.n	8009466 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009436:	4b0e      	ldr	r3, [pc, #56]	; (8009470 <RTC_ExitInitMode+0x78>)
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	4a0d      	ldr	r2, [pc, #52]	; (8009470 <RTC_ExitInitMode+0x78>)
 800943c:	f023 0320 	bic.w	r3, r3, #32
 8009440:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7ff ff6a 	bl	800931c <HAL_RTC_WaitForSynchro>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d005      	beq.n	800945a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2203      	movs	r2, #3
 8009452:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800945a:	4b05      	ldr	r3, [pc, #20]	; (8009470 <RTC_ExitInitMode+0x78>)
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	4a04      	ldr	r2, [pc, #16]	; (8009470 <RTC_ExitInitMode+0x78>)
 8009460:	f043 0320 	orr.w	r3, r3, #32
 8009464:	6193      	str	r3, [r2, #24]
  }
  return status;
 8009466:	7bfb      	ldrb	r3, [r7, #15]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	46007800 	.word	0x46007800

08009474 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	4603      	mov	r3, r0
 800947c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800947e:	2300      	movs	r3, #0
 8009480:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8009482:	79fb      	ldrb	r3, [r7, #7]
 8009484:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8009486:	e005      	b.n	8009494 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	3301      	adds	r3, #1
 800948c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800948e:	7afb      	ldrb	r3, [r7, #11]
 8009490:	3b0a      	subs	r3, #10
 8009492:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8009494:	7afb      	ldrb	r3, [r7, #11]
 8009496:	2b09      	cmp	r3, #9
 8009498:	d8f6      	bhi.n	8009488 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	b2db      	uxtb	r3, r3
 800949e:	011b      	lsls	r3, r3, #4
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	7afb      	ldrb	r3, [r7, #11]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	b2db      	uxtb	r3, r3
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	4603      	mov	r3, r0
 80094bc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80094be:	79fb      	ldrb	r3, [r7, #7]
 80094c0:	091b      	lsrs	r3, r3, #4
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	461a      	mov	r2, r3
 80094c6:	4613      	mov	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	79fb      	ldrb	r3, [r7, #7]
 80094d6:	f003 030f 	and.w	r3, r3, #15
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	4413      	add	r3, r2
 80094de:	b2db      	uxtb	r3, r3
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b086      	sub	sp, #24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
 80094f8:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009500:	2b01      	cmp	r3, #1
 8009502:	d101      	bne.n	8009508 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8009504:	2302      	movs	r3, #2
 8009506:	e063      	b.n	80095d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2202      	movs	r2, #2
 8009514:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009518:	4b2f      	ldr	r3, [pc, #188]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800951a:	22ca      	movs	r2, #202	; 0xca
 800951c:	625a      	str	r2, [r3, #36]	; 0x24
 800951e:	4b2e      	ldr	r3, [pc, #184]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009520:	2253      	movs	r2, #83	; 0x53
 8009522:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8009524:	4b2c      	ldr	r3, [pc, #176]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	4a2b      	ldr	r2, [pc, #172]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800952a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800952e:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8009530:	4b29      	ldr	r3, [pc, #164]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009532:	2204      	movs	r2, #4
 8009534:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009536:	4b28      	ldr	r3, [pc, #160]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800953e:	2b00      	cmp	r3, #0
 8009540:	d126      	bne.n	8009590 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
  {
    tickstart = HAL_GetTick();
 8009542:	f7f8 fab5 	bl	8001ab0 <HAL_GetTick>
 8009546:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009548:	e01a      	b.n	8009580 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800954a:	f7f8 fab1 	bl	8001ab0 <HAL_GetTick>
 800954e:	4602      	mov	r2, r0
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009558:	d912      	bls.n	8009580 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800955a:	4b1f      	ldr	r3, [pc, #124]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f003 0304 	and.w	r3, r3, #4
 8009562:	2b00      	cmp	r3, #0
 8009564:	d113      	bne.n	800958e <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009566:	4b1c      	ldr	r3, [pc, #112]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009568:	22ff      	movs	r2, #255	; 0xff
 800956a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2203      	movs	r2, #3
 8009570:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          return HAL_TIMEOUT;
 800957c:	2303      	movs	r3, #3
 800957e:	e027      	b.n	80095d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009580:	4b15      	ldr	r3, [pc, #84]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	f003 0304 	and.w	r3, r3, #4
 8009588:	2b00      	cmp	r3, #0
 800958a:	d0de      	beq.n	800954a <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
 800958c:	e000      	b.n	8009590 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
        }
        else
        {
          break;
 800958e:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	041a      	lsls	r2, r3, #16
 8009594:	4910      	ldr	r1, [pc, #64]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	4313      	orrs	r3, r2
 800959a:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 800959c:	4b0e      	ldr	r3, [pc, #56]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	f023 0207 	bic.w	r2, r3, #7
 80095a4:	490c      	ldr	r1, [pc, #48]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 80095ac:	4b0a      	ldr	r3, [pc, #40]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	4a09      	ldr	r2, [pc, #36]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095b2:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 80095b6:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095b8:	4b07      	ldr	r3, [pc, #28]	; (80095d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80095ba:	22ff      	movs	r2, #255	; 0xff
 80095bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	46007800 	.word	0x46007800

080095dc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d101      	bne.n	80095f2 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80095ee:	2302      	movs	r3, #2
 80095f0:	e046      	b.n	8009680 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2202      	movs	r2, #2
 80095fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009602:	4b21      	ldr	r3, [pc, #132]	; (8009688 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009604:	22ca      	movs	r2, #202	; 0xca
 8009606:	625a      	str	r2, [r3, #36]	; 0x24
 8009608:	4b1f      	ldr	r3, [pc, #124]	; (8009688 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800960a:	2253      	movs	r2, #83	; 0x53
 800960c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 800960e:	4b1e      	ldr	r3, [pc, #120]	; (8009688 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	4a1d      	ldr	r2, [pc, #116]	; (8009688 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009614:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8009618:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 800961a:	f7f8 fa49 	bl	8001ab0 <HAL_GetTick>
 800961e:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009620:	e01a      	b.n	8009658 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009622:	f7f8 fa45 	bl	8001ab0 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009630:	d912      	bls.n	8009658 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009632:	4b15      	ldr	r3, [pc, #84]	; (8009688 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	f003 0304 	and.w	r3, r3, #4
 800963a:	2b00      	cmp	r3, #0
 800963c:	d113      	bne.n	8009666 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800963e:	4b12      	ldr	r3, [pc, #72]	; (8009688 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009640:	22ff      	movs	r2, #255	; 0xff
 8009642:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2203      	movs	r2, #3
 8009648:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        return HAL_TIMEOUT;
 8009654:	2303      	movs	r3, #3
 8009656:	e013      	b.n	8009680 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009658:	4b0b      	ldr	r3, [pc, #44]	; (8009688 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f003 0304 	and.w	r3, r3, #4
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0de      	beq.n	8009622 <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
 8009664:	e000      	b.n	8009668 <HAL_RTCEx_DeactivateWakeUpTimer+0x8c>
      }
      else
      {
        break;
 8009666:	bf00      	nop
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009668:	4b07      	ldr	r3, [pc, #28]	; (8009688 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800966a:	22ff      	movs	r2, #255	; 0xff
 800966c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2201      	movs	r2, #1
 8009672:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	46007800 	.word	0x46007800

0800968c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8009694:	4b09      	ldr	r3, [pc, #36]	; (80096bc <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8009696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009698:	f003 0304 	and.w	r3, r3, #4
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80096a0:	4b06      	ldr	r3, [pc, #24]	; (80096bc <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80096a2:	2204      	movs	r2, #4
 80096a4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7f7 fe28 	bl	80012fc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	46007800 	.word	0x46007800

080096c0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	4910      	ldr	r1, [pc, #64]	; (8009714 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	689a      	ldr	r2, [r3, #8]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	431a      	orrs	r2, r3
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	490c      	ldr	r1, [pc, #48]	; (8009718 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 80096ec:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	6919      	ldr	r1, [r3, #16]
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	041b      	lsls	r3, r3, #16
 80096fe:	430b      	orrs	r3, r1
 8009700:	4905      	ldr	r1, [pc, #20]	; (8009718 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009702:	4313      	orrs	r3, r2
 8009704:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	46007800 	.word	0x46007800
 8009718:	46007c00 	.word	0x46007c00

0800971c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e0fb      	b.n	8009926 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a7f      	ldr	r2, [pc, #508]	; (8009930 <HAL_SPI_Init+0x214>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d004      	beq.n	8009742 <HAL_SPI_Init+0x26>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a7d      	ldr	r2, [pc, #500]	; (8009934 <HAL_SPI_Init+0x218>)
 800973e:	4293      	cmp	r3, r2
 8009740:	e000      	b.n	8009744 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009742:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a78      	ldr	r2, [pc, #480]	; (8009930 <HAL_SPI_Init+0x214>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d004      	beq.n	800975e <HAL_SPI_Init+0x42>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a76      	ldr	r2, [pc, #472]	; (8009934 <HAL_SPI_Init+0x218>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d105      	bne.n	800976a <HAL_SPI_Init+0x4e>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	2b0f      	cmp	r3, #15
 8009764:	d901      	bls.n	800976a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e0dd      	b.n	8009926 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fbd8 	bl	8009f20 <SPI_GetPacketSize>
 8009770:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a6e      	ldr	r2, [pc, #440]	; (8009930 <HAL_SPI_Init+0x214>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d004      	beq.n	8009786 <HAL_SPI_Init+0x6a>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a6c      	ldr	r2, [pc, #432]	; (8009934 <HAL_SPI_Init+0x218>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d102      	bne.n	800978c <HAL_SPI_Init+0x70>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2b08      	cmp	r3, #8
 800978a:	d816      	bhi.n	80097ba <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009790:	4a69      	ldr	r2, [pc, #420]	; (8009938 <HAL_SPI_Init+0x21c>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d00e      	beq.n	80097b4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a68      	ldr	r2, [pc, #416]	; (800993c <HAL_SPI_Init+0x220>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d009      	beq.n	80097b4 <HAL_SPI_Init+0x98>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a66      	ldr	r2, [pc, #408]	; (8009940 <HAL_SPI_Init+0x224>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d004      	beq.n	80097b4 <HAL_SPI_Init+0x98>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a65      	ldr	r2, [pc, #404]	; (8009944 <HAL_SPI_Init+0x228>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d104      	bne.n	80097be <HAL_SPI_Init+0xa2>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2b10      	cmp	r3, #16
 80097b8:	d901      	bls.n	80097be <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e0b3      	b.n	8009926 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d106      	bne.n	80097d8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7f7 fefc 	bl	80015d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 0201 	bic.w	r2, r2, #1
 80097ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80097fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009804:	d119      	bne.n	800983a <HAL_SPI_Init+0x11e>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800980e:	d103      	bne.n	8009818 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009814:	2b00      	cmp	r3, #0
 8009816:	d008      	beq.n	800982a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10c      	bne.n	800983a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009824:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009828:	d107      	bne.n	800983a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009838:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00f      	beq.n	8009866 <HAL_SPI_Init+0x14a>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	2b06      	cmp	r3, #6
 800984c:	d90b      	bls.n	8009866 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	430a      	orrs	r2, r1
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	e007      	b.n	8009876 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009874:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	69da      	ldr	r2, [r3, #28]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987e:	431a      	orrs	r2, r3
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	431a      	orrs	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009888:	ea42 0103 	orr.w	r1, r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68da      	ldr	r2, [r3, #12]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	430a      	orrs	r2, r1
 8009896:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	431a      	orrs	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a6:	431a      	orrs	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	431a      	orrs	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	431a      	orrs	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	695b      	ldr	r3, [r3, #20]
 80098b8:	431a      	orrs	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	431a      	orrs	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	431a      	orrs	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ca:	431a      	orrs	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	431a      	orrs	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098d6:	431a      	orrs	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098dc:	431a      	orrs	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e2:	ea42 0103 	orr.w	r1, r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	430a      	orrs	r2, r1
 80098f0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00a      	beq.n	8009914 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	430a      	orrs	r2, r1
 8009912:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	46002000 	.word	0x46002000
 8009934:	56002000 	.word	0x56002000
 8009938:	40013000 	.word	0x40013000
 800993c:	50013000 	.word	0x50013000
 8009940:	40003800 	.word	0x40003800
 8009944:	50003800 	.word	0x50003800

08009948 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08a      	sub	sp, #40	; 0x28
 800994c:	af02      	add	r7, sp, #8
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	603b      	str	r3, [r7, #0]
 8009954:	4613      	mov	r3, r2
 8009956:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3320      	adds	r3, #32
 800995e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800996a:	2b01      	cmp	r3, #1
 800996c:	d101      	bne.n	8009972 <HAL_SPI_Transmit+0x2a>
 800996e:	2302      	movs	r3, #2
 8009970:	e203      	b.n	8009d7a <HAL_SPI_Transmit+0x432>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800997a:	f7f8 f899 	bl	8001ab0 <HAL_GetTick>
 800997e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b01      	cmp	r3, #1
 800998a:	d007      	beq.n	800999c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800998c:	2302      	movs	r3, #2
 800998e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8009998:	7efb      	ldrb	r3, [r7, #27]
 800999a:	e1ee      	b.n	8009d7a <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d002      	beq.n	80099a8 <HAL_SPI_Transmit+0x60>
 80099a2:	88fb      	ldrh	r3, [r7, #6]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d107      	bne.n	80099b8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80099b4:	7efb      	ldrb	r3, [r7, #27]
 80099b6:	e1e0      	b.n	8009d7a <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2203      	movs	r2, #3
 80099bc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	88fa      	ldrh	r2, [r7, #6]
 80099d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	88fa      	ldrh	r2, [r7, #6]
 80099da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009a08:	d108      	bne.n	8009a1c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a18:	601a      	str	r2, [r3, #0]
 8009a1a:	e009      	b.n	8009a30 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009a2e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	0c1b      	lsrs	r3, r3, #16
 8009a38:	041b      	lsls	r3, r3, #16
 8009a3a:	88f9      	ldrh	r1, [r7, #6]
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	6812      	ldr	r2, [r2, #0]
 8009a40:	430b      	orrs	r3, r1
 8009a42:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f042 0201 	orr.w	r2, r2, #1
 8009a52:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	69db      	ldr	r3, [r3, #28]
 8009a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10c      	bne.n	8009a7c <HAL_SPI_Transmit+0x134>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a6a:	d107      	bne.n	8009a7c <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	2b0f      	cmp	r3, #15
 8009a82:	d95b      	bls.n	8009b3c <HAL_SPI_Transmit+0x1f4>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a8f      	ldr	r2, [pc, #572]	; (8009cc8 <HAL_SPI_Transmit+0x380>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d04f      	beq.n	8009b2e <HAL_SPI_Transmit+0x1e6>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a8e      	ldr	r2, [pc, #568]	; (8009ccc <HAL_SPI_Transmit+0x384>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d04a      	beq.n	8009b2e <HAL_SPI_Transmit+0x1e6>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a8c      	ldr	r2, [pc, #560]	; (8009cd0 <HAL_SPI_Transmit+0x388>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d045      	beq.n	8009b2e <HAL_SPI_Transmit+0x1e6>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a8b      	ldr	r2, [pc, #556]	; (8009cd4 <HAL_SPI_Transmit+0x38c>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d147      	bne.n	8009b3c <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009aac:	e03f      	b.n	8009b2e <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	f003 0302 	and.w	r3, r3, #2
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d114      	bne.n	8009ae6 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6812      	ldr	r2, [r2, #0]
 8009ac6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009acc:	1d1a      	adds	r2, r3, #4
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	3b01      	subs	r3, #1
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009ae4:	e023      	b.n	8009b2e <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ae6:	f7f7 ffe3 	bl	8001ab0 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d803      	bhi.n	8009afe <HAL_SPI_Transmit+0x1b6>
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009afc:	d102      	bne.n	8009b04 <HAL_SPI_Transmit+0x1bc>
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d114      	bne.n	8009b2e <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 f93d 	bl	8009d84 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e125      	b.n	8009d7a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1b9      	bne.n	8009aae <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009b3a:	e0f8      	b.n	8009d2e <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	2b07      	cmp	r3, #7
 8009b42:	f240 80ed 	bls.w	8009d20 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009b46:	e05d      	b.n	8009c04 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	f003 0302 	and.w	r3, r3, #2
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d132      	bne.n	8009bbc <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d918      	bls.n	8009b94 <HAL_SPI_Transmit+0x24c>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d014      	beq.n	8009b94 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6812      	ldr	r2, [r2, #0]
 8009b74:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b7a:	1d1a      	adds	r2, r3, #4
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	3b02      	subs	r3, #2
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009b92:	e037      	b.n	8009c04 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b98:	881a      	ldrh	r2, [r3, #0]
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ba2:	1c9a      	adds	r2, r3, #2
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009bba:	e023      	b.n	8009c04 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bbc:	f7f7 ff78 	bl	8001ab0 <HAL_GetTick>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d803      	bhi.n	8009bd4 <HAL_SPI_Transmit+0x28c>
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd2:	d102      	bne.n	8009bda <HAL_SPI_Transmit+0x292>
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d114      	bne.n	8009c04 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f000 f8d2 	bl	8009d84 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e0ba      	b.n	8009d7a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d19b      	bne.n	8009b48 <HAL_SPI_Transmit+0x200>
 8009c10:	e08d      	b.n	8009d2e <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	f003 0302 	and.w	r3, r3, #2
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d15b      	bne.n	8009cd8 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d918      	bls.n	8009c5e <HAL_SPI_Transmit+0x316>
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c30:	2b40      	cmp	r3, #64	; 0x40
 8009c32:	d914      	bls.n	8009c5e <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6812      	ldr	r2, [r2, #0]
 8009c3e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c44:	1d1a      	adds	r2, r3, #4
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	3b04      	subs	r3, #4
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009c5c:	e060      	b.n	8009d20 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d917      	bls.n	8009c9a <HAL_SPI_Transmit+0x352>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d013      	beq.n	8009c9a <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c76:	881a      	ldrh	r2, [r3, #0]
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c80:	1c9a      	adds	r2, r3, #2
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	3b02      	subs	r3, #2
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009c98:	e042      	b.n	8009d20 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3320      	adds	r3, #32
 8009ca4:	7812      	ldrb	r2, [r2, #0]
 8009ca6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cac:	1c5a      	adds	r2, r3, #1
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009cc4:	e02c      	b.n	8009d20 <HAL_SPI_Transmit+0x3d8>
 8009cc6:	bf00      	nop
 8009cc8:	40013000 	.word	0x40013000
 8009ccc:	50013000 	.word	0x50013000
 8009cd0:	40003800 	.word	0x40003800
 8009cd4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cd8:	f7f7 feea 	bl	8001ab0 <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d803      	bhi.n	8009cf0 <HAL_SPI_Transmit+0x3a8>
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cee:	d102      	bne.n	8009cf6 <HAL_SPI_Transmit+0x3ae>
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d114      	bne.n	8009d20 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f000 f844 	bl	8009d84 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e02c      	b.n	8009d7a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f47f af72 	bne.w	8009c12 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2200      	movs	r2, #0
 8009d36:	2108      	movs	r1, #8
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 f8c3 	bl	8009ec4 <SPI_WaitOnFlagUntilTimeout>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d007      	beq.n	8009d54 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d4a:	f043 0220 	orr.w	r2, r3, #32
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 f815 	bl	8009d84 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d001      	beq.n	8009d78 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e000      	b.n	8009d7a <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8009d78:	7efb      	ldrb	r3, [r7, #27]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3720      	adds	r7, #32
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop

08009d84 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	699a      	ldr	r2, [r3, #24]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f042 0208 	orr.w	r2, r2, #8
 8009da2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	699a      	ldr	r2, [r3, #24]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f042 0210 	orr.w	r2, r2, #16
 8009db2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f022 0201 	bic.w	r2, r2, #1
 8009dc2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	6812      	ldr	r2, [r2, #0]
 8009dce:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8009dd2:	f023 0303 	bic.w	r3, r3, #3
 8009dd6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689a      	ldr	r2, [r3, #8]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009de6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	d014      	beq.n	8009e1e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f003 0320 	and.w	r3, r3, #32
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00f      	beq.n	8009e1e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	699a      	ldr	r2, [r3, #24]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f042 0220 	orr.w	r2, r2, #32
 8009e1c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	2b03      	cmp	r3, #3
 8009e28:	d014      	beq.n	8009e54 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00f      	beq.n	8009e54 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e3a:	f043 0204 	orr.w	r2, r3, #4
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	699a      	ldr	r2, [r3, #24]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e52:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00f      	beq.n	8009e7e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e64:	f043 0201 	orr.w	r2, r3, #1
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	699a      	ldr	r2, [r3, #24]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e7c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00f      	beq.n	8009ea8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e8e:	f043 0208 	orr.w	r2, r3, #8
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	699a      	ldr	r2, [r3, #24]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ea6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8009eb8:	bf00      	nop
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	603b      	str	r3, [r7, #0]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009ed4:	e010      	b.n	8009ef8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ed6:	f7f7 fdeb 	bl	8001ab0 <HAL_GetTick>
 8009eda:	4602      	mov	r2, r0
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	683a      	ldr	r2, [r7, #0]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d803      	bhi.n	8009eee <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eec:	d102      	bne.n	8009ef4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e00f      	b.n	8009f18 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	695a      	ldr	r2, [r3, #20]
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	4013      	ands	r3, r2
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	bf0c      	ite	eq
 8009f08:	2301      	moveq	r3, #1
 8009f0a:	2300      	movne	r3, #0
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	461a      	mov	r2, r3
 8009f10:	79fb      	ldrb	r3, [r7, #7]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d0df      	beq.n	8009ed6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2c:	095b      	lsrs	r3, r3, #5
 8009f2e:	3301      	adds	r3, #1
 8009f30:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	3301      	adds	r3, #1
 8009f38:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	3307      	adds	r3, #7
 8009f3e:	08db      	lsrs	r3, r3, #3
 8009f40:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	fb02 f303 	mul.w	r3, r2, r3
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b083      	sub	sp, #12
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d12e      	bne.n	8009fca <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d101      	bne.n	8009f7a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8009f76:	2302      	movs	r3, #2
 8009f78:	e028      	b.n	8009fcc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2202      	movs	r2, #2
 8009f86:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f022 0201 	bic.w	r2, r2, #1
 8009f98:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8009fa6:	ea42 0103 	orr.w	r1, r2, r3
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	689a      	ldr	r2, [r3, #8]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	e000      	b.n	8009fcc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
  }
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e049      	b.n	800a07e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f841 	bl	800a086 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	3304      	adds	r3, #4
 800a014:	4619      	mov	r1, r3
 800a016:	4610      	mov	r0, r2
 800a018:	f000 fa88 	bl	800a52c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a086:	b480      	push	{r7}
 800a088:	b083      	sub	sp, #12
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a08e:	bf00      	nop
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
	...

0800a09c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d001      	beq.n	800a0b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e072      	b.n	800a19a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68da      	ldr	r2, [r3, #12]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 0201 	orr.w	r2, r2, #1
 800a0ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a35      	ldr	r2, [pc, #212]	; (800a1a8 <HAL_TIM_Base_Start_IT+0x10c>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d040      	beq.n	800a158 <HAL_TIM_Base_Start_IT+0xbc>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a34      	ldr	r2, [pc, #208]	; (800a1ac <HAL_TIM_Base_Start_IT+0x110>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d03b      	beq.n	800a158 <HAL_TIM_Base_Start_IT+0xbc>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0e8:	d036      	beq.n	800a158 <HAL_TIM_Base_Start_IT+0xbc>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0f2:	d031      	beq.n	800a158 <HAL_TIM_Base_Start_IT+0xbc>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a2d      	ldr	r2, [pc, #180]	; (800a1b0 <HAL_TIM_Base_Start_IT+0x114>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d02c      	beq.n	800a158 <HAL_TIM_Base_Start_IT+0xbc>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a2c      	ldr	r2, [pc, #176]	; (800a1b4 <HAL_TIM_Base_Start_IT+0x118>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d027      	beq.n	800a158 <HAL_TIM_Base_Start_IT+0xbc>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a2a      	ldr	r2, [pc, #168]	; (800a1b8 <HAL_TIM_Base_Start_IT+0x11c>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d022      	beq.n	800a158 <HAL_TIM_Base_Start_IT+0xbc>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a29      	ldr	r2, [pc, #164]	; (800a1bc <HAL_TIM_Base_Start_IT+0x120>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d01d      	beq.n	800a158 <HAL_TIM_Base_Start_IT+0xbc>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a27      	ldr	r2, [pc, #156]	; (800a1c0 <HAL_TIM_Base_Start_IT+0x124>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d018      	beq.n	800a158 <HAL_TIM_Base_Start_IT+0xbc>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a26      	ldr	r2, [pc, #152]	; (800a1c4 <HAL_TIM_Base_Start_IT+0x128>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d013      	beq.n	800a158 <HAL_TIM_Base_Start_IT+0xbc>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a24      	ldr	r2, [pc, #144]	; (800a1c8 <HAL_TIM_Base_Start_IT+0x12c>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d00e      	beq.n	800a158 <HAL_TIM_Base_Start_IT+0xbc>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a23      	ldr	r2, [pc, #140]	; (800a1cc <HAL_TIM_Base_Start_IT+0x130>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d009      	beq.n	800a158 <HAL_TIM_Base_Start_IT+0xbc>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a21      	ldr	r2, [pc, #132]	; (800a1d0 <HAL_TIM_Base_Start_IT+0x134>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d004      	beq.n	800a158 <HAL_TIM_Base_Start_IT+0xbc>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a20      	ldr	r2, [pc, #128]	; (800a1d4 <HAL_TIM_Base_Start_IT+0x138>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d115      	bne.n	800a184 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	689a      	ldr	r2, [r3, #8]
 800a15e:	4b1e      	ldr	r3, [pc, #120]	; (800a1d8 <HAL_TIM_Base_Start_IT+0x13c>)
 800a160:	4013      	ands	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2b06      	cmp	r3, #6
 800a168:	d015      	beq.n	800a196 <HAL_TIM_Base_Start_IT+0xfa>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a170:	d011      	beq.n	800a196 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f042 0201 	orr.w	r2, r2, #1
 800a180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a182:	e008      	b.n	800a196 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f042 0201 	orr.w	r2, r2, #1
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	e000      	b.n	800a198 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a196:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	40012c00 	.word	0x40012c00
 800a1ac:	50012c00 	.word	0x50012c00
 800a1b0:	40000400 	.word	0x40000400
 800a1b4:	50000400 	.word	0x50000400
 800a1b8:	40000800 	.word	0x40000800
 800a1bc:	50000800 	.word	0x50000800
 800a1c0:	40000c00 	.word	0x40000c00
 800a1c4:	50000c00 	.word	0x50000c00
 800a1c8:	40013400 	.word	0x40013400
 800a1cc:	50013400 	.word	0x50013400
 800a1d0:	40014000 	.word	0x40014000
 800a1d4:	50014000 	.word	0x50014000
 800a1d8:	00010007 	.word	0x00010007

0800a1dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	f003 0302 	and.w	r3, r3, #2
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d122      	bne.n	800a238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	f003 0302 	and.w	r3, r3, #2
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d11b      	bne.n	800a238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f06f 0202 	mvn.w	r2, #2
 800a208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	f003 0303 	and.w	r3, r3, #3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d003      	beq.n	800a226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f965 	bl	800a4ee <HAL_TIM_IC_CaptureCallback>
 800a224:	e005      	b.n	800a232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 f957 	bl	800a4da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f968 	bl	800a502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	f003 0304 	and.w	r3, r3, #4
 800a242:	2b04      	cmp	r3, #4
 800a244:	d122      	bne.n	800a28c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	f003 0304 	and.w	r3, r3, #4
 800a250:	2b04      	cmp	r3, #4
 800a252:	d11b      	bne.n	800a28c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f06f 0204 	mvn.w	r2, #4
 800a25c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2202      	movs	r2, #2
 800a262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d003      	beq.n	800a27a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f93b 	bl	800a4ee <HAL_TIM_IC_CaptureCallback>
 800a278:	e005      	b.n	800a286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f92d 	bl	800a4da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f93e 	bl	800a502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	f003 0308 	and.w	r3, r3, #8
 800a296:	2b08      	cmp	r3, #8
 800a298:	d122      	bne.n	800a2e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	f003 0308 	and.w	r3, r3, #8
 800a2a4:	2b08      	cmp	r3, #8
 800a2a6:	d11b      	bne.n	800a2e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f06f 0208 	mvn.w	r2, #8
 800a2b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2204      	movs	r2, #4
 800a2b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	69db      	ldr	r3, [r3, #28]
 800a2be:	f003 0303 	and.w	r3, r3, #3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d003      	beq.n	800a2ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f911 	bl	800a4ee <HAL_TIM_IC_CaptureCallback>
 800a2cc:	e005      	b.n	800a2da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f903 	bl	800a4da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 f914 	bl	800a502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	f003 0310 	and.w	r3, r3, #16
 800a2ea:	2b10      	cmp	r3, #16
 800a2ec:	d122      	bne.n	800a334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f003 0310 	and.w	r3, r3, #16
 800a2f8:	2b10      	cmp	r3, #16
 800a2fa:	d11b      	bne.n	800a334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f06f 0210 	mvn.w	r2, #16
 800a304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2208      	movs	r2, #8
 800a30a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f8e7 	bl	800a4ee <HAL_TIM_IC_CaptureCallback>
 800a320:	e005      	b.n	800a32e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f8d9 	bl	800a4da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 f8ea 	bl	800a502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d10e      	bne.n	800a360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d107      	bne.n	800a360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f06f 0201 	mvn.w	r2, #1
 800a358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7f6 ffda 	bl	8001314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a36a:	2b80      	cmp	r3, #128	; 0x80
 800a36c:	d10e      	bne.n	800a38c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a378:	2b80      	cmp	r3, #128	; 0x80
 800a37a:	d107      	bne.n	800a38c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f9d4 	bl	800a734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a39a:	d10e      	bne.n	800a3ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a6:	2b80      	cmp	r3, #128	; 0x80
 800a3a8:	d107      	bne.n	800a3ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a3b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f9c7 	bl	800a748 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c4:	2b40      	cmp	r3, #64	; 0x40
 800a3c6:	d10e      	bne.n	800a3e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d2:	2b40      	cmp	r3, #64	; 0x40
 800a3d4:	d107      	bne.n	800a3e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f898 	bl	800a516 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	f003 0320 	and.w	r3, r3, #32
 800a3f0:	2b20      	cmp	r3, #32
 800a3f2:	d10e      	bne.n	800a412 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	f003 0320 	and.w	r3, r3, #32
 800a3fe:	2b20      	cmp	r3, #32
 800a400:	d107      	bne.n	800a412 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f06f 0220 	mvn.w	r2, #32
 800a40a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f987 	bl	800a720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a41c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a420:	d10f      	bne.n	800a442 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a42c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a430:	d107      	bne.n	800a442 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a43a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f98d 	bl	800a75c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a44c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a450:	d10f      	bne.n	800a472 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a45c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a460:	d107      	bne.n	800a472 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a46a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f97f 	bl	800a770 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a47c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a480:	d10f      	bne.n	800a4a2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a48c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a490:	d107      	bne.n	800a4a2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a49a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 f971 	bl	800a784 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4b0:	d10f      	bne.n	800a4d2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4c0:	d107      	bne.n	800a4d2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a4ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f963 	bl	800a798 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4d2:	bf00      	nop
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4e2:	bf00      	nop
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr

0800a4ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4ee:	b480      	push	{r7}
 800a4f0:	b083      	sub	sp, #12
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4f6:	bf00      	nop
 800a4f8:	370c      	adds	r7, #12
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a502:	b480      	push	{r7}
 800a504:	b083      	sub	sp, #12
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a50a:	bf00      	nop
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a51e:	bf00      	nop
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
	...

0800a52c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a68      	ldr	r2, [pc, #416]	; (800a6e0 <TIM_Base_SetConfig+0x1b4>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d02b      	beq.n	800a59c <TIM_Base_SetConfig+0x70>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a67      	ldr	r2, [pc, #412]	; (800a6e4 <TIM_Base_SetConfig+0x1b8>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d027      	beq.n	800a59c <TIM_Base_SetConfig+0x70>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a552:	d023      	beq.n	800a59c <TIM_Base_SetConfig+0x70>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a55a:	d01f      	beq.n	800a59c <TIM_Base_SetConfig+0x70>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a62      	ldr	r2, [pc, #392]	; (800a6e8 <TIM_Base_SetConfig+0x1bc>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d01b      	beq.n	800a59c <TIM_Base_SetConfig+0x70>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a61      	ldr	r2, [pc, #388]	; (800a6ec <TIM_Base_SetConfig+0x1c0>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d017      	beq.n	800a59c <TIM_Base_SetConfig+0x70>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a60      	ldr	r2, [pc, #384]	; (800a6f0 <TIM_Base_SetConfig+0x1c4>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d013      	beq.n	800a59c <TIM_Base_SetConfig+0x70>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a5f      	ldr	r2, [pc, #380]	; (800a6f4 <TIM_Base_SetConfig+0x1c8>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d00f      	beq.n	800a59c <TIM_Base_SetConfig+0x70>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a5e      	ldr	r2, [pc, #376]	; (800a6f8 <TIM_Base_SetConfig+0x1cc>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d00b      	beq.n	800a59c <TIM_Base_SetConfig+0x70>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a5d      	ldr	r2, [pc, #372]	; (800a6fc <TIM_Base_SetConfig+0x1d0>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d007      	beq.n	800a59c <TIM_Base_SetConfig+0x70>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a5c      	ldr	r2, [pc, #368]	; (800a700 <TIM_Base_SetConfig+0x1d4>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d003      	beq.n	800a59c <TIM_Base_SetConfig+0x70>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a5b      	ldr	r2, [pc, #364]	; (800a704 <TIM_Base_SetConfig+0x1d8>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d108      	bne.n	800a5ae <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a4b      	ldr	r2, [pc, #300]	; (800a6e0 <TIM_Base_SetConfig+0x1b4>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d043      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a4a      	ldr	r2, [pc, #296]	; (800a6e4 <TIM_Base_SetConfig+0x1b8>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d03f      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5c4:	d03b      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5cc:	d037      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a45      	ldr	r2, [pc, #276]	; (800a6e8 <TIM_Base_SetConfig+0x1bc>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d033      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4a44      	ldr	r2, [pc, #272]	; (800a6ec <TIM_Base_SetConfig+0x1c0>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d02f      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4a43      	ldr	r2, [pc, #268]	; (800a6f0 <TIM_Base_SetConfig+0x1c4>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d02b      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4a42      	ldr	r2, [pc, #264]	; (800a6f4 <TIM_Base_SetConfig+0x1c8>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d027      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4a41      	ldr	r2, [pc, #260]	; (800a6f8 <TIM_Base_SetConfig+0x1cc>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d023      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4a40      	ldr	r2, [pc, #256]	; (800a6fc <TIM_Base_SetConfig+0x1d0>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d01f      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4a3f      	ldr	r2, [pc, #252]	; (800a700 <TIM_Base_SetConfig+0x1d4>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d01b      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a3e      	ldr	r2, [pc, #248]	; (800a704 <TIM_Base_SetConfig+0x1d8>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d017      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a3d      	ldr	r2, [pc, #244]	; (800a708 <TIM_Base_SetConfig+0x1dc>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d013      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a3c      	ldr	r2, [pc, #240]	; (800a70c <TIM_Base_SetConfig+0x1e0>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d00f      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a3b      	ldr	r2, [pc, #236]	; (800a710 <TIM_Base_SetConfig+0x1e4>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d00b      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a3a      	ldr	r2, [pc, #232]	; (800a714 <TIM_Base_SetConfig+0x1e8>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d007      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a39      	ldr	r2, [pc, #228]	; (800a718 <TIM_Base_SetConfig+0x1ec>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d003      	beq.n	800a63e <TIM_Base_SetConfig+0x112>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a38      	ldr	r2, [pc, #224]	; (800a71c <TIM_Base_SetConfig+0x1f0>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d108      	bne.n	800a650 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4a1a      	ldr	r2, [pc, #104]	; (800a6e0 <TIM_Base_SetConfig+0x1b4>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d023      	beq.n	800a6c4 <TIM_Base_SetConfig+0x198>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a19      	ldr	r2, [pc, #100]	; (800a6e4 <TIM_Base_SetConfig+0x1b8>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d01f      	beq.n	800a6c4 <TIM_Base_SetConfig+0x198>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a1e      	ldr	r2, [pc, #120]	; (800a700 <TIM_Base_SetConfig+0x1d4>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d01b      	beq.n	800a6c4 <TIM_Base_SetConfig+0x198>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a1d      	ldr	r2, [pc, #116]	; (800a704 <TIM_Base_SetConfig+0x1d8>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d017      	beq.n	800a6c4 <TIM_Base_SetConfig+0x198>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a1c      	ldr	r2, [pc, #112]	; (800a708 <TIM_Base_SetConfig+0x1dc>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d013      	beq.n	800a6c4 <TIM_Base_SetConfig+0x198>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a1b      	ldr	r2, [pc, #108]	; (800a70c <TIM_Base_SetConfig+0x1e0>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d00f      	beq.n	800a6c4 <TIM_Base_SetConfig+0x198>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a1a      	ldr	r2, [pc, #104]	; (800a710 <TIM_Base_SetConfig+0x1e4>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d00b      	beq.n	800a6c4 <TIM_Base_SetConfig+0x198>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a19      	ldr	r2, [pc, #100]	; (800a714 <TIM_Base_SetConfig+0x1e8>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d007      	beq.n	800a6c4 <TIM_Base_SetConfig+0x198>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a18      	ldr	r2, [pc, #96]	; (800a718 <TIM_Base_SetConfig+0x1ec>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d003      	beq.n	800a6c4 <TIM_Base_SetConfig+0x198>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a17      	ldr	r2, [pc, #92]	; (800a71c <TIM_Base_SetConfig+0x1f0>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d103      	bne.n	800a6cc <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	691a      	ldr	r2, [r3, #16]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	615a      	str	r2, [r3, #20]
}
 800a6d2:	bf00      	nop
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	40012c00 	.word	0x40012c00
 800a6e4:	50012c00 	.word	0x50012c00
 800a6e8:	40000400 	.word	0x40000400
 800a6ec:	50000400 	.word	0x50000400
 800a6f0:	40000800 	.word	0x40000800
 800a6f4:	50000800 	.word	0x50000800
 800a6f8:	40000c00 	.word	0x40000c00
 800a6fc:	50000c00 	.word	0x50000c00
 800a700:	40013400 	.word	0x40013400
 800a704:	50013400 	.word	0x50013400
 800a708:	40014000 	.word	0x40014000
 800a70c:	50014000 	.word	0x50014000
 800a710:	40014400 	.word	0x40014400
 800a714:	50014400 	.word	0x50014400
 800a718:	40014800 	.word	0x40014800
 800a71c:	50014800 	.word	0x50014800

0800a720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d101      	bne.n	800a7be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e042      	b.n	800a844 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d106      	bne.n	800a7d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f7f6 ff67 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2224      	movs	r2, #36	; 0x24
 800a7da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f022 0201 	bic.w	r2, r2, #1
 800a7ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f8ca 	bl	800a988 <UART_SetConfig>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d101      	bne.n	800a7fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e022      	b.n	800a844 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a802:	2b00      	cmp	r3, #0
 800a804:	d002      	beq.n	800a80c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fa60 	bl	800accc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685a      	ldr	r2, [r3, #4]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a81a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689a      	ldr	r2, [r3, #8]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a82a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f042 0201 	orr.w	r2, r2, #1
 800a83a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fae7 	bl	800ae10 <UART_CheckIdleState>
 800a842:	4603      	mov	r3, r0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b08a      	sub	sp, #40	; 0x28
 800a850:	af02      	add	r7, sp, #8
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	603b      	str	r3, [r7, #0]
 800a858:	4613      	mov	r3, r2
 800a85a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a862:	2b20      	cmp	r3, #32
 800a864:	f040 808b 	bne.w	800a97e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d002      	beq.n	800a874 <HAL_UART_Transmit+0x28>
 800a86e:	88fb      	ldrh	r3, [r7, #6]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e083      	b.n	800a980 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a882:	2b80      	cmp	r3, #128	; 0x80
 800a884:	d107      	bne.n	800a896 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	689a      	ldr	r2, [r3, #8]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a894:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2221      	movs	r2, #33	; 0x21
 800a8a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8a6:	f7f7 f903 	bl	8001ab0 <HAL_GetTick>
 800a8aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	88fa      	ldrh	r2, [r7, #6]
 800a8b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	88fa      	ldrh	r2, [r7, #6]
 800a8b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8c4:	d108      	bne.n	800a8d8 <HAL_UART_Transmit+0x8c>
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d104      	bne.n	800a8d8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	61bb      	str	r3, [r7, #24]
 800a8d6:	e003      	b.n	800a8e0 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a8e0:	e030      	b.n	800a944 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	2180      	movs	r1, #128	; 0x80
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 fb39 	bl	800af64 <UART_WaitOnFlagUntilTimeout>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d005      	beq.n	800a904 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e03d      	b.n	800a980 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10b      	bne.n	800a922 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	881b      	ldrh	r3, [r3, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a918:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	3302      	adds	r3, #2
 800a91e:	61bb      	str	r3, [r7, #24]
 800a920:	e007      	b.n	800a932 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	781a      	ldrb	r2, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	3301      	adds	r3, #1
 800a930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a938:	b29b      	uxth	r3, r3
 800a93a:	3b01      	subs	r3, #1
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d1c8      	bne.n	800a8e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2200      	movs	r2, #0
 800a958:	2140      	movs	r1, #64	; 0x40
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f000 fb02 	bl	800af64 <UART_WaitOnFlagUntilTimeout>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d005      	beq.n	800a972 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2220      	movs	r2, #32
 800a96a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e006      	b.n	800a980 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2220      	movs	r2, #32
 800a976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	e000      	b.n	800a980 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a97e:	2302      	movs	r3, #2
  }
}
 800a980:	4618      	mov	r0, r3
 800a982:	3720      	adds	r7, #32
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a98c:	b094      	sub	sp, #80	; 0x50
 800a98e:	af00      	add	r7, sp, #0
 800a990:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	4b7e      	ldr	r3, [pc, #504]	; (800ab98 <UART_SetConfig+0x210>)
 800a99e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a2:	689a      	ldr	r2, [r3, #8]
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	431a      	orrs	r2, r3
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	431a      	orrs	r2, r3
 800a9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b2:	69db      	ldr	r3, [r3, #28]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4977      	ldr	r1, [pc, #476]	; (800ab9c <UART_SetConfig+0x214>)
 800a9c0:	4019      	ands	r1, r3
 800a9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9c8:	430b      	orrs	r3, r1
 800a9ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d8:	68d9      	ldr	r1, [r3, #12]
 800a9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	ea40 0301 	orr.w	r3, r0, r1
 800a9e2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e6:	699b      	ldr	r3, [r3, #24]
 800a9e8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	4b6a      	ldr	r3, [pc, #424]	; (800ab98 <UART_SetConfig+0x210>)
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d009      	beq.n	800aa08 <UART_SetConfig+0x80>
 800a9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	4b69      	ldr	r3, [pc, #420]	; (800aba0 <UART_SetConfig+0x218>)
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d004      	beq.n	800aa08 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa00:	6a1a      	ldr	r2, [r3, #32]
 800aa02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa04:	4313      	orrs	r3, r2
 800aa06:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800aa12:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800aa16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa1c:	430b      	orrs	r3, r1
 800aa1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa26:	f023 000f 	bic.w	r0, r3, #15
 800aa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800aa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	ea40 0301 	orr.w	r3, r0, r1
 800aa36:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	4b59      	ldr	r3, [pc, #356]	; (800aba4 <UART_SetConfig+0x21c>)
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d102      	bne.n	800aa48 <UART_SetConfig+0xc0>
 800aa42:	2301      	movs	r3, #1
 800aa44:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa46:	e029      	b.n	800aa9c <UART_SetConfig+0x114>
 800aa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	4b56      	ldr	r3, [pc, #344]	; (800aba8 <UART_SetConfig+0x220>)
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d102      	bne.n	800aa58 <UART_SetConfig+0xd0>
 800aa52:	2302      	movs	r3, #2
 800aa54:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa56:	e021      	b.n	800aa9c <UART_SetConfig+0x114>
 800aa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	4b53      	ldr	r3, [pc, #332]	; (800abac <UART_SetConfig+0x224>)
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d102      	bne.n	800aa68 <UART_SetConfig+0xe0>
 800aa62:	2304      	movs	r3, #4
 800aa64:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa66:	e019      	b.n	800aa9c <UART_SetConfig+0x114>
 800aa68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	4b50      	ldr	r3, [pc, #320]	; (800abb0 <UART_SetConfig+0x228>)
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d102      	bne.n	800aa78 <UART_SetConfig+0xf0>
 800aa72:	2308      	movs	r3, #8
 800aa74:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa76:	e011      	b.n	800aa9c <UART_SetConfig+0x114>
 800aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	4b4d      	ldr	r3, [pc, #308]	; (800abb4 <UART_SetConfig+0x22c>)
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d102      	bne.n	800aa88 <UART_SetConfig+0x100>
 800aa82:	2310      	movs	r3, #16
 800aa84:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa86:	e009      	b.n	800aa9c <UART_SetConfig+0x114>
 800aa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	4b42      	ldr	r3, [pc, #264]	; (800ab98 <UART_SetConfig+0x210>)
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d102      	bne.n	800aa98 <UART_SetConfig+0x110>
 800aa92:	2320      	movs	r3, #32
 800aa94:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa96:	e001      	b.n	800aa9c <UART_SetConfig+0x114>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	4b3d      	ldr	r3, [pc, #244]	; (800ab98 <UART_SetConfig+0x210>)
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d005      	beq.n	800aab2 <UART_SetConfig+0x12a>
 800aaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	4b3d      	ldr	r3, [pc, #244]	; (800aba0 <UART_SetConfig+0x218>)
 800aaac:	429a      	cmp	r2, r3
 800aaae:	f040 8085 	bne.w	800abbc <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aab4:	2200      	movs	r2, #0
 800aab6:	623b      	str	r3, [r7, #32]
 800aab8:	627a      	str	r2, [r7, #36]	; 0x24
 800aaba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800aabe:	f7fc feb7 	bl	8007830 <HAL_RCCEx_GetPeriphCLKFreq>
 800aac2:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800aac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f000 80e8 	beq.w	800ac9c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad0:	4a39      	ldr	r2, [pc, #228]	; (800abb8 <UART_SetConfig+0x230>)
 800aad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aad6:	461a      	mov	r2, r3
 800aad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aada:	fbb3 f3f2 	udiv	r3, r3, r2
 800aade:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	4613      	mov	r3, r2
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	4413      	add	r3, r2
 800aaea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d305      	bcc.n	800aafc <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aaf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aaf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d903      	bls.n	800ab04 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ab02:	e048      	b.n	800ab96 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab06:	2200      	movs	r2, #0
 800ab08:	61bb      	str	r3, [r7, #24]
 800ab0a:	61fa      	str	r2, [r7, #28]
 800ab0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	4a29      	ldr	r2, [pc, #164]	; (800abb8 <UART_SetConfig+0x230>)
 800ab12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	2200      	movs	r2, #0
 800ab1a:	613b      	str	r3, [r7, #16]
 800ab1c:	617a      	str	r2, [r7, #20]
 800ab1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ab22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ab26:	f7f5 fcd5 	bl	80004d4 <__aeabi_uldivmod>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4610      	mov	r0, r2
 800ab30:	4619      	mov	r1, r3
 800ab32:	f04f 0200 	mov.w	r2, #0
 800ab36:	f04f 0300 	mov.w	r3, #0
 800ab3a:	020b      	lsls	r3, r1, #8
 800ab3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab40:	0202      	lsls	r2, r0, #8
 800ab42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab44:	6849      	ldr	r1, [r1, #4]
 800ab46:	0849      	lsrs	r1, r1, #1
 800ab48:	2000      	movs	r0, #0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	eb12 0804 	adds.w	r8, r2, r4
 800ab52:	eb43 0905 	adc.w	r9, r3, r5
 800ab56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	60bb      	str	r3, [r7, #8]
 800ab5e:	60fa      	str	r2, [r7, #12]
 800ab60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab64:	4640      	mov	r0, r8
 800ab66:	4649      	mov	r1, r9
 800ab68:	f7f5 fcb4 	bl	80004d4 <__aeabi_uldivmod>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4613      	mov	r3, r2
 800ab72:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab7a:	d308      	bcc.n	800ab8e <UART_SetConfig+0x206>
 800ab7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab82:	d204      	bcs.n	800ab8e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800ab84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab8a:	60da      	str	r2, [r3, #12]
 800ab8c:	e003      	b.n	800ab96 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800ab94:	e082      	b.n	800ac9c <UART_SetConfig+0x314>
 800ab96:	e081      	b.n	800ac9c <UART_SetConfig+0x314>
 800ab98:	46002400 	.word	0x46002400
 800ab9c:	cfff69f3 	.word	0xcfff69f3
 800aba0:	56002400 	.word	0x56002400
 800aba4:	40013800 	.word	0x40013800
 800aba8:	40004400 	.word	0x40004400
 800abac:	40004800 	.word	0x40004800
 800abb0:	40004c00 	.word	0x40004c00
 800abb4:	40005000 	.word	0x40005000
 800abb8:	08015b68 	.word	0x08015b68
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbe:	69db      	ldr	r3, [r3, #28]
 800abc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abc4:	d13c      	bne.n	800ac40 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800abc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abc8:	2200      	movs	r2, #0
 800abca:	603b      	str	r3, [r7, #0]
 800abcc:	607a      	str	r2, [r7, #4]
 800abce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abd2:	f7fc fe2d 	bl	8007830 <HAL_RCCEx_GetPeriphCLKFreq>
 800abd6:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800abd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d05e      	beq.n	800ac9c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe2:	4a39      	ldr	r2, [pc, #228]	; (800acc8 <UART_SetConfig+0x340>)
 800abe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abe8:	461a      	mov	r2, r3
 800abea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abec:	fbb3 f3f2 	udiv	r3, r3, r2
 800abf0:	005a      	lsls	r2, r3, #1
 800abf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	085b      	lsrs	r3, r3, #1
 800abf8:	441a      	add	r2, r3
 800abfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac06:	2b0f      	cmp	r3, #15
 800ac08:	d916      	bls.n	800ac38 <UART_SetConfig+0x2b0>
 800ac0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac10:	d212      	bcs.n	800ac38 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	f023 030f 	bic.w	r3, r3, #15
 800ac1a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac1e:	085b      	lsrs	r3, r3, #1
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	f003 0307 	and.w	r3, r3, #7
 800ac26:	b29a      	uxth	r2, r3
 800ac28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800ac2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ac34:	60da      	str	r2, [r3, #12]
 800ac36:	e031      	b.n	800ac9c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ac3e:	e02d      	b.n	800ac9c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ac40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac42:	2200      	movs	r2, #0
 800ac44:	469a      	mov	sl, r3
 800ac46:	4693      	mov	fp, r2
 800ac48:	4650      	mov	r0, sl
 800ac4a:	4659      	mov	r1, fp
 800ac4c:	f7fc fdf0 	bl	8007830 <HAL_RCCEx_GetPeriphCLKFreq>
 800ac50:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800ac52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d021      	beq.n	800ac9c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5c:	4a1a      	ldr	r2, [pc, #104]	; (800acc8 <UART_SetConfig+0x340>)
 800ac5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac62:	461a      	mov	r2, r3
 800ac64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac66:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	085b      	lsrs	r3, r3, #1
 800ac70:	441a      	add	r2, r3
 800ac72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac7e:	2b0f      	cmp	r3, #15
 800ac80:	d909      	bls.n	800ac96 <UART_SetConfig+0x30e>
 800ac82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac88:	d205      	bcs.n	800ac96 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	60da      	str	r2, [r3, #12]
 800ac94:	e002      	b.n	800ac9c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9e:	2201      	movs	r2, #1
 800aca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca6:	2201      	movs	r2, #1
 800aca8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800acac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acae:	2200      	movs	r2, #0
 800acb0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800acb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb4:	2200      	movs	r2, #0
 800acb6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800acb8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3750      	adds	r7, #80	; 0x50
 800acc0:	46bd      	mov	sp, r7
 800acc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acc6:	bf00      	nop
 800acc8:	08015b68 	.word	0x08015b68

0800accc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00a      	beq.n	800acf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	430a      	orrs	r2, r1
 800acf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfa:	f003 0302 	and.w	r3, r3, #2
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00a      	beq.n	800ad18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	430a      	orrs	r2, r1
 800ad16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1c:	f003 0304 	and.w	r3, r3, #4
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00a      	beq.n	800ad3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	430a      	orrs	r2, r1
 800ad38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad3e:	f003 0308 	and.w	r3, r3, #8
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00a      	beq.n	800ad5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	430a      	orrs	r2, r1
 800ad5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad60:	f003 0310 	and.w	r3, r3, #16
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00a      	beq.n	800ad7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	430a      	orrs	r2, r1
 800ad7c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad82:	f003 0320 	and.w	r3, r3, #32
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00a      	beq.n	800ada0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	430a      	orrs	r2, r1
 800ad9e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d01a      	beq.n	800ade2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	430a      	orrs	r2, r1
 800adc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adca:	d10a      	bne.n	800ade2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	430a      	orrs	r2, r1
 800ade0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00a      	beq.n	800ae04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	430a      	orrs	r2, r1
 800ae02:	605a      	str	r2, [r3, #4]
  }
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b098      	sub	sp, #96	; 0x60
 800ae14:	af02      	add	r7, sp, #8
 800ae16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae20:	f7f6 fe46 	bl	8001ab0 <HAL_GetTick>
 800ae24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f003 0308 	and.w	r3, r3, #8
 800ae30:	2b08      	cmp	r3, #8
 800ae32:	d12f      	bne.n	800ae94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 f88e 	bl	800af64 <UART_WaitOnFlagUntilTimeout>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d022      	beq.n	800ae94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae56:	e853 3f00 	ldrex	r3, [r3]
 800ae5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae62:	653b      	str	r3, [r7, #80]	; 0x50
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	461a      	mov	r2, r3
 800ae6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae6c:	647b      	str	r3, [r7, #68]	; 0x44
 800ae6e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae74:	e841 2300 	strex	r3, r2, [r1]
 800ae78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1e6      	bne.n	800ae4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2220      	movs	r2, #32
 800ae84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e063      	b.n	800af5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 0304 	and.w	r3, r3, #4
 800ae9e:	2b04      	cmp	r3, #4
 800aea0:	d149      	bne.n	800af36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aea2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f857 	bl	800af64 <UART_WaitOnFlagUntilTimeout>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d03c      	beq.n	800af36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec4:	e853 3f00 	ldrex	r3, [r3]
 800aec8:	623b      	str	r3, [r7, #32]
   return(result);
 800aeca:	6a3b      	ldr	r3, [r7, #32]
 800aecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aed0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeda:	633b      	str	r3, [r7, #48]	; 0x30
 800aedc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aee2:	e841 2300 	strex	r3, r2, [r1]
 800aee6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d1e6      	bne.n	800aebc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	3308      	adds	r3, #8
 800aef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	e853 3f00 	ldrex	r3, [r3]
 800aefc:	60fb      	str	r3, [r7, #12]
   return(result);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f023 0301 	bic.w	r3, r3, #1
 800af04:	64bb      	str	r3, [r7, #72]	; 0x48
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	3308      	adds	r3, #8
 800af0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af0e:	61fa      	str	r2, [r7, #28]
 800af10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af12:	69b9      	ldr	r1, [r7, #24]
 800af14:	69fa      	ldr	r2, [r7, #28]
 800af16:	e841 2300 	strex	r3, r2, [r1]
 800af1a:	617b      	str	r3, [r7, #20]
   return(result);
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1e5      	bne.n	800aeee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2220      	movs	r2, #32
 800af26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af32:	2303      	movs	r3, #3
 800af34:	e012      	b.n	800af5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2220      	movs	r2, #32
 800af3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2220      	movs	r2, #32
 800af42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3758      	adds	r7, #88	; 0x58
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	603b      	str	r3, [r7, #0]
 800af70:	4613      	mov	r3, r2
 800af72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af74:	e049      	b.n	800b00a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7c:	d045      	beq.n	800b00a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af7e:	f7f6 fd97 	bl	8001ab0 <HAL_GetTick>
 800af82:	4602      	mov	r2, r0
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	69ba      	ldr	r2, [r7, #24]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d302      	bcc.n	800af94 <UART_WaitOnFlagUntilTimeout+0x30>
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d101      	bne.n	800af98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800af94:	2303      	movs	r3, #3
 800af96:	e048      	b.n	800b02a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f003 0304 	and.w	r3, r3, #4
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d031      	beq.n	800b00a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	69db      	ldr	r3, [r3, #28]
 800afac:	f003 0308 	and.w	r3, r3, #8
 800afb0:	2b08      	cmp	r3, #8
 800afb2:	d110      	bne.n	800afd6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2208      	movs	r2, #8
 800afba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f000 f838 	bl	800b032 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2208      	movs	r2, #8
 800afc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	e029      	b.n	800b02a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	69db      	ldr	r3, [r3, #28]
 800afdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afe4:	d111      	bne.n	800b00a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f000 f81e 	bl	800b032 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2220      	movs	r2, #32
 800affa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b006:	2303      	movs	r3, #3
 800b008:	e00f      	b.n	800b02a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	69da      	ldr	r2, [r3, #28]
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	4013      	ands	r3, r2
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	429a      	cmp	r2, r3
 800b018:	bf0c      	ite	eq
 800b01a:	2301      	moveq	r3, #1
 800b01c:	2300      	movne	r3, #0
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	461a      	mov	r2, r3
 800b022:	79fb      	ldrb	r3, [r7, #7]
 800b024:	429a      	cmp	r2, r3
 800b026:	d0a6      	beq.n	800af76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b032:	b480      	push	{r7}
 800b034:	b095      	sub	sp, #84	; 0x54
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b042:	e853 3f00 	ldrex	r3, [r3]
 800b046:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b04e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	461a      	mov	r2, r3
 800b056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b058:	643b      	str	r3, [r7, #64]	; 0x40
 800b05a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b05e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b060:	e841 2300 	strex	r3, r2, [r1]
 800b064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d1e6      	bne.n	800b03a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3308      	adds	r3, #8
 800b072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b074:	6a3b      	ldr	r3, [r7, #32]
 800b076:	e853 3f00 	ldrex	r3, [r3]
 800b07a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b082:	f023 0301 	bic.w	r3, r3, #1
 800b086:	64bb      	str	r3, [r7, #72]	; 0x48
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	3308      	adds	r3, #8
 800b08e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b090:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b098:	e841 2300 	strex	r3, r2, [r1]
 800b09c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1e3      	bne.n	800b06c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d118      	bne.n	800b0de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	e853 3f00 	ldrex	r3, [r3]
 800b0b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	f023 0310 	bic.w	r3, r3, #16
 800b0c0:	647b      	str	r3, [r7, #68]	; 0x44
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0ca:	61bb      	str	r3, [r7, #24]
 800b0cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ce:	6979      	ldr	r1, [r7, #20]
 800b0d0:	69ba      	ldr	r2, [r7, #24]
 800b0d2:	e841 2300 	strex	r3, r2, [r1]
 800b0d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1e6      	bne.n	800b0ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2220      	movs	r2, #32
 800b0e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b0f2:	bf00      	nop
 800b0f4:	3754      	adds	r7, #84	; 0x54
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b085      	sub	sp, #20
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d101      	bne.n	800b114 <HAL_UARTEx_DisableFifoMode+0x16>
 800b110:	2302      	movs	r3, #2
 800b112:	e027      	b.n	800b164 <HAL_UARTEx_DisableFifoMode+0x66>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2224      	movs	r2, #36	; 0x24
 800b120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f022 0201 	bic.w	r2, r2, #1
 800b13a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b142:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2220      	movs	r2, #32
 800b156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b162:	2300      	movs	r3, #0
}
 800b164:	4618      	mov	r0, r3
 800b166:	3714      	adds	r7, #20
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b180:	2b01      	cmp	r3, #1
 800b182:	d101      	bne.n	800b188 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b184:	2302      	movs	r3, #2
 800b186:	e02d      	b.n	800b1e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2224      	movs	r2, #36	; 0x24
 800b194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f022 0201 	bic.w	r2, r2, #1
 800b1ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	683a      	ldr	r2, [r7, #0]
 800b1c0:	430a      	orrs	r2, r1
 800b1c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f84f 	bl	800b268 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d101      	bne.n	800b204 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b200:	2302      	movs	r3, #2
 800b202:	e02d      	b.n	800b260 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2224      	movs	r2, #36	; 0x24
 800b210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f022 0201 	bic.w	r2, r2, #1
 800b22a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	683a      	ldr	r2, [r7, #0]
 800b23c:	430a      	orrs	r2, r1
 800b23e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f811 	bl	800b268 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2220      	movs	r2, #32
 800b252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b274:	2b00      	cmp	r3, #0
 800b276:	d108      	bne.n	800b28a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b288:	e031      	b.n	800b2ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b28a:	2308      	movs	r3, #8
 800b28c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b28e:	2308      	movs	r3, #8
 800b290:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	0e5b      	lsrs	r3, r3, #25
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	f003 0307 	and.w	r3, r3, #7
 800b2a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	0f5b      	lsrs	r3, r3, #29
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	f003 0307 	and.w	r3, r3, #7
 800b2b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2b2:	7bbb      	ldrb	r3, [r7, #14]
 800b2b4:	7b3a      	ldrb	r2, [r7, #12]
 800b2b6:	4911      	ldr	r1, [pc, #68]	; (800b2fc <UARTEx_SetNbDataToProcess+0x94>)
 800b2b8:	5c8a      	ldrb	r2, [r1, r2]
 800b2ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b2be:	7b3a      	ldrb	r2, [r7, #12]
 800b2c0:	490f      	ldr	r1, [pc, #60]	; (800b300 <UARTEx_SetNbDataToProcess+0x98>)
 800b2c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2d0:	7bfb      	ldrb	r3, [r7, #15]
 800b2d2:	7b7a      	ldrb	r2, [r7, #13]
 800b2d4:	4909      	ldr	r1, [pc, #36]	; (800b2fc <UARTEx_SetNbDataToProcess+0x94>)
 800b2d6:	5c8a      	ldrb	r2, [r1, r2]
 800b2d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b2dc:	7b7a      	ldrb	r2, [r7, #13]
 800b2de:	4908      	ldr	r1, [pc, #32]	; (800b300 <UARTEx_SetNbDataToProcess+0x98>)
 800b2e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b2ee:	bf00      	nop
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	08015b80 	.word	0x08015b80
 800b300:	08015b88 	.word	0x08015b88

0800b304 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b096      	sub	sp, #88	; 0x58
 800b308:	af02      	add	r7, sp, #8
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
 800b310:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b312:	2234      	movs	r2, #52	; 0x34
 800b314:	2100      	movs	r1, #0
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f009 fd32 	bl	8014d80 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	f023 0303 	bic.w	r3, r3, #3
 800b322:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	f1a3 0208 	sub.w	r2, r3, #8
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2202      	movs	r2, #2
 800b350:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	4413      	add	r3, r2
 800b35c:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	3b04      	subs	r3, #4
 800b362:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 800b36c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b36e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b370:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	3b04      	subs	r3, #4
 800b376:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b37c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b388:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b38e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	3304      	adds	r3, #4
 800b398:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a0:	4a5d      	ldr	r2, [pc, #372]	; (800b518 <_tx_byte_pool_create+0x214>)
 800b3a2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3aa:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ae:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800b3b2:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3b4:	b672      	cpsid	i
#endif
    return(int_posture);
 800b3b6:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b3b8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	4a57      	ldr	r2, [pc, #348]	; (800b51c <_tx_byte_pool_create+0x218>)
 800b3be:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b3c0:	4b57      	ldr	r3, [pc, #348]	; (800b520 <_tx_byte_pool_create+0x21c>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d109      	bne.n	800b3dc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b3c8:	4a56      	ldr	r2, [pc, #344]	; (800b524 <_tx_byte_pool_create+0x220>)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	631a      	str	r2, [r3, #48]	; 0x30
 800b3da:	e011      	b.n	800b400 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b3dc:	4b51      	ldr	r3, [pc, #324]	; (800b524 <_tx_byte_pool_create+0x220>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3f8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3fe:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b400:	4b47      	ldr	r3, [pc, #284]	; (800b520 <_tx_byte_pool_create+0x21c>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3301      	adds	r3, #1
 800b406:	4a46      	ldr	r2, [pc, #280]	; (800b520 <_tx_byte_pool_create+0x21c>)
 800b408:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 800b40a:	2300      	movs	r3, #0
 800b40c:	9300      	str	r3, [sp, #0]
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	68f9      	ldr	r1, [r7, #12]
 800b414:	2008      	movs	r0, #8
 800b416:	f002 fd6d 	bl	800def4 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 800b41a:	4b43      	ldr	r3, [pc, #268]	; (800b528 <_tx_byte_pool_create+0x224>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b422:	2b00      	cmp	r3, #0
 800b424:	d06c      	beq.n	800b500 <_tx_byte_pool_create+0x1fc>
 800b426:	4b41      	ldr	r3, [pc, #260]	; (800b52c <_tx_byte_pool_create+0x228>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 0304 	and.w	r3, r3, #4
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d066      	beq.n	800b500 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b432:	f3ef 8305 	mrs	r3, IPSR
 800b436:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b438:	69fa      	ldr	r2, [r7, #28]
 800b43a:	4b3d      	ldr	r3, [pc, #244]	; (800b530 <_tx_byte_pool_create+0x22c>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4313      	orrs	r3, r2
 800b440:	62bb      	str	r3, [r7, #40]	; 0x28
 800b442:	4b3c      	ldr	r3, [pc, #240]	; (800b534 <_tx_byte_pool_create+0x230>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	64bb      	str	r3, [r7, #72]	; 0x48
 800b448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10b      	bne.n	800b466 <_tx_byte_pool_create+0x162>
 800b44e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b452:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b458:	041a      	lsls	r2, r3, #16
 800b45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b45c:	4313      	orrs	r3, r2
 800b45e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b462:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b464:	e00e      	b.n	800b484 <_tx_byte_pool_create+0x180>
 800b466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b468:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b46c:	d205      	bcs.n	800b47a <_tx_byte_pool_create+0x176>
 800b46e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b470:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b472:	f04f 33ff 	mov.w	r3, #4294967295
 800b476:	64bb      	str	r3, [r7, #72]	; 0x48
 800b478:	e004      	b.n	800b484 <_tx_byte_pool_create+0x180>
 800b47a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b47e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b480:	2300      	movs	r3, #0
 800b482:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b488:	601a      	str	r2, [r3, #0]
 800b48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b48e:	605a      	str	r2, [r3, #4]
 800b490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b492:	2215      	movs	r2, #21
 800b494:	609a      	str	r2, [r3, #8]
 800b496:	4b28      	ldr	r3, [pc, #160]	; (800b538 <_tx_byte_pool_create+0x234>)
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49c:	60da      	str	r2, [r3, #12]
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a2:	611a      	str	r2, [r3, #16]
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a8:	615a      	str	r2, [r3, #20]
 800b4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ac:	683a      	ldr	r2, [r7, #0]
 800b4ae:	619a      	str	r2, [r3, #24]
 800b4b0:	f107 0214 	add.w	r2, r7, #20
 800b4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b6:	61da      	str	r2, [r3, #28]
 800b4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ba:	3320      	adds	r3, #32
 800b4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4be:	4b1f      	ldr	r3, [pc, #124]	; (800b53c <_tx_byte_pool_create+0x238>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d314      	bcc.n	800b4f2 <_tx_byte_pool_create+0x1ee>
 800b4c8:	4b1d      	ldr	r3, [pc, #116]	; (800b540 <_tx_byte_pool_create+0x23c>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4ce:	4a16      	ldr	r2, [pc, #88]	; (800b528 <_tx_byte_pool_create+0x224>)
 800b4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	4b1b      	ldr	r3, [pc, #108]	; (800b544 <_tx_byte_pool_create+0x240>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4da:	621a      	str	r2, [r3, #32]
 800b4dc:	4b1a      	ldr	r3, [pc, #104]	; (800b548 <_tx_byte_pool_create+0x244>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00d      	beq.n	800b500 <_tx_byte_pool_create+0x1fc>
 800b4e4:	4b18      	ldr	r3, [pc, #96]	; (800b548 <_tx_byte_pool_create+0x244>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a16      	ldr	r2, [pc, #88]	; (800b544 <_tx_byte_pool_create+0x240>)
 800b4ea:	6812      	ldr	r2, [r2, #0]
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	4798      	blx	r3
 800b4f0:	e006      	b.n	800b500 <_tx_byte_pool_create+0x1fc>
 800b4f2:	4a0d      	ldr	r2, [pc, #52]	; (800b528 <_tx_byte_pool_create+0x224>)
 800b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f6:	6013      	str	r3, [r2, #0]
 800b4f8:	4b12      	ldr	r3, [pc, #72]	; (800b544 <_tx_byte_pool_create+0x240>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4fe:	621a      	str	r2, [r3, #32]
 800b500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b502:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b504:	69bb      	ldr	r3, [r7, #24]
 800b506:	f383 8810 	msr	PRIMASK, r3
}
 800b50a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3750      	adds	r7, #80	; 0x50
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	ffffeeee 	.word	0xffffeeee
 800b51c:	42595445 	.word	0x42595445
 800b520:	200016c8 	.word	0x200016c8
 800b524:	200016c4 	.word	0x200016c4
 800b528:	20001cf0 	.word	0x20001cf0
 800b52c:	20001cf4 	.word	0x20001cf4
 800b530:	2000000c 	.word	0x2000000c
 800b534:	200016d4 	.word	0x200016d4
 800b538:	e0001004 	.word	0xe0001004
 800b53c:	20001cec 	.word	0x20001cec
 800b540:	20001ce8 	.word	0x20001ce8
 800b544:	20001cdc 	.word	0x20001cdc
 800b548:	20001cf8 	.word	0x20001cf8

0800b54c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 800b550:	f002 fcaa 	bl	800dea8 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b554:	f001 fbe6 	bl	800cd24 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b558:	f002 fa92 	bl	800da80 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b55c:	4b12      	ldr	r3, [pc, #72]	; (800b5a8 <_tx_initialize_high_level+0x5c>)
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	4b12      	ldr	r3, [pc, #72]	; (800b5ac <_tx_initialize_high_level+0x60>)
 800b564:	2200      	movs	r2, #0
 800b566:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b568:	4b11      	ldr	r3, [pc, #68]	; (800b5b0 <_tx_initialize_high_level+0x64>)
 800b56a:	2200      	movs	r2, #0
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	4b11      	ldr	r3, [pc, #68]	; (800b5b4 <_tx_initialize_high_level+0x68>)
 800b570:	2200      	movs	r2, #0
 800b572:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b574:	4b10      	ldr	r3, [pc, #64]	; (800b5b8 <_tx_initialize_high_level+0x6c>)
 800b576:	2200      	movs	r2, #0
 800b578:	601a      	str	r2, [r3, #0]
 800b57a:	4b10      	ldr	r3, [pc, #64]	; (800b5bc <_tx_initialize_high_level+0x70>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b580:	4b0f      	ldr	r3, [pc, #60]	; (800b5c0 <_tx_initialize_high_level+0x74>)
 800b582:	2200      	movs	r2, #0
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	4b0f      	ldr	r3, [pc, #60]	; (800b5c4 <_tx_initialize_high_level+0x78>)
 800b588:	2200      	movs	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b58c:	4b0e      	ldr	r3, [pc, #56]	; (800b5c8 <_tx_initialize_high_level+0x7c>)
 800b58e:	2200      	movs	r2, #0
 800b590:	601a      	str	r2, [r3, #0]
 800b592:	4b0e      	ldr	r3, [pc, #56]	; (800b5cc <_tx_initialize_high_level+0x80>)
 800b594:	2200      	movs	r2, #0
 800b596:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b598:	4b0d      	ldr	r3, [pc, #52]	; (800b5d0 <_tx_initialize_high_level+0x84>)
 800b59a:	2200      	movs	r2, #0
 800b59c:	601a      	str	r2, [r3, #0]
 800b59e:	4b0d      	ldr	r3, [pc, #52]	; (800b5d4 <_tx_initialize_high_level+0x88>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	601a      	str	r2, [r3, #0]
#endif
}
 800b5a4:	bf00      	nop
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	2000169c 	.word	0x2000169c
 800b5ac:	200016a0 	.word	0x200016a0
 800b5b0:	200016a4 	.word	0x200016a4
 800b5b4:	200016a8 	.word	0x200016a8
 800b5b8:	200016ac 	.word	0x200016ac
 800b5bc:	200016b0 	.word	0x200016b0
 800b5c0:	200016bc 	.word	0x200016bc
 800b5c4:	200016c0 	.word	0x200016c0
 800b5c8:	200016c4 	.word	0x200016c4
 800b5cc:	200016c8 	.word	0x200016c8
 800b5d0:	200016b4 	.word	0x200016b4
 800b5d4:	200016b8 	.word	0x200016b8

0800b5d8 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b5dc:	4b10      	ldr	r3, [pc, #64]	; (800b620 <_tx_initialize_kernel_enter+0x48>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800b5e4:	d00c      	beq.n	800b600 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b5e6:	4b0e      	ldr	r3, [pc, #56]	; (800b620 <_tx_initialize_kernel_enter+0x48>)
 800b5e8:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b5ec:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b5ee:	f7f4 fe43 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b5f2:	f7ff ffab 	bl	800b54c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b5f6:	4b0b      	ldr	r3, [pc, #44]	; (800b624 <_tx_initialize_kernel_enter+0x4c>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	4a09      	ldr	r2, [pc, #36]	; (800b624 <_tx_initialize_kernel_enter+0x4c>)
 800b5fe:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b600:	4b07      	ldr	r3, [pc, #28]	; (800b620 <_tx_initialize_kernel_enter+0x48>)
 800b602:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b606:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b608:	4b07      	ldr	r3, [pc, #28]	; (800b628 <_tx_initialize_kernel_enter+0x50>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7f5 f8f1 	bl	80007f4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b612:	4b03      	ldr	r3, [pc, #12]	; (800b620 <_tx_initialize_kernel_enter+0x48>)
 800b614:	2200      	movs	r2, #0
 800b616:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b618:	f7f4 fe6a 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b61c:	bf00      	nop
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	2000000c 	.word	0x2000000c
 800b624:	2000176c 	.word	0x2000176c
 800b628:	200016cc 	.word	0x200016cc

0800b62c <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b08e      	sub	sp, #56	; 0x38
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b636:	f3ef 8310 	mrs	r3, PRIMASK
 800b63a:	623b      	str	r3, [r7, #32]
    return(posture);
 800b63c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b63e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b640:	b672      	cpsid	i
    return(int_posture);
 800b642:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800b644:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b64a:	4a37      	ldr	r2, [pc, #220]	; (800b728 <_tx_queue_cleanup+0xfc>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d161      	bne.n	800b714 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d15b      	bne.n	800b714 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b660:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800b662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b664:	2b00      	cmp	r3, #0
 800b666:	d055      	beq.n	800b714 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800b668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a2f      	ldr	r2, [pc, #188]	; (800b72c <_tx_queue_cleanup+0x100>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d150      	bne.n	800b714 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b676:	2b00      	cmp	r3, #0
 800b678:	d04c      	beq.n	800b714 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800b680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b684:	1e5a      	subs	r2, r3, #1
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b68e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b692:	2b00      	cmp	r3, #0
 800b694:	d103      	bne.n	800b69e <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	2200      	movs	r2, #0
 800b69a:	629a      	str	r2, [r3, #40]	; 0x28
 800b69c:	e013      	b.n	800b6c6 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6a2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6a8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ae:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6b4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d102      	bne.n	800b6c6 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6c4:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ca:	2b05      	cmp	r3, #5
 800b6cc:	d122      	bne.n	800b714 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d004      	beq.n	800b6e0 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	220b      	movs	r2, #11
 800b6da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b6de:	e003      	b.n	800b6e8 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	220a      	movs	r2, #10
 800b6e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b6e8:	4b11      	ldr	r3, [pc, #68]	; (800b730 <_tx_queue_cleanup+0x104>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	4a10      	ldr	r2, [pc, #64]	; (800b730 <_tx_queue_cleanup+0x104>)
 800b6f0:	6013      	str	r3, [r2, #0]
 800b6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	f383 8810 	msr	PRIMASK, r3
}
 800b6fc:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f001 fcd6 	bl	800d0b0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b704:	f3ef 8310 	mrs	r3, PRIMASK
 800b708:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b70a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b70c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b70e:	b672      	cpsid	i
    return(int_posture);
 800b710:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b712:	637b      	str	r3, [r7, #52]	; 0x34
 800b714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b716:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f383 8810 	msr	PRIMASK, r3
}
 800b71e:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b720:	bf00      	nop
 800b722:	3738      	adds	r7, #56	; 0x38
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	0800b62d 	.word	0x0800b62d
 800b72c:	51554555 	.word	0x51554555
 800b730:	2000176c 	.word	0x2000176c

0800b734 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b094      	sub	sp, #80	; 0x50
 800b738:	af02      	add	r7, sp, #8
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
 800b740:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800b742:	2238      	movs	r2, #56	; 0x38
 800b744:	2100      	movs	r1, #0
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f009 fb1a 	bl	8014d80 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b75e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b762:	63fb      	str	r3, [r7, #60]	; 0x3c
    used_words =  capacity * message_size;
 800b764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	fb02 f303 	mul.w	r3, r2, r3
 800b76c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	699a      	ldr	r2, [r3, #24]
 800b778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	441a      	add	r2, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	683a      	ldr	r2, [r7, #0]
 800b786:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b792:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b798:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b79a:	f3ef 8310 	mrs	r3, PRIMASK
 800b79e:	623b      	str	r3, [r7, #32]
    return(posture);
 800b7a0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b7a2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b7a4:	b672      	cpsid	i
    return(int_posture);
 800b7a6:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800b7a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	4a55      	ldr	r2, [pc, #340]	; (800b904 <_tx_queue_create+0x1d0>)
 800b7ae:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800b7b0:	4b55      	ldr	r3, [pc, #340]	; (800b908 <_tx_queue_create+0x1d4>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d109      	bne.n	800b7cc <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800b7b8:	4a54      	ldr	r2, [pc, #336]	; (800b90c <_tx_queue_create+0x1d8>)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	635a      	str	r2, [r3, #52]	; 0x34
 800b7ca:	e011      	b.n	800b7f0 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800b7cc:	4b4f      	ldr	r3, [pc, #316]	; (800b90c <_tx_queue_create+0x1d8>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	633b      	str	r3, [r7, #48]	; 0x30
        previous_queue =  next_queue -> tx_queue_created_previous;
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d6:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800b7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800b7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7e8:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800b7f0:	4b45      	ldr	r3, [pc, #276]	; (800b908 <_tx_queue_create+0x1d4>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	4a44      	ldr	r2, [pc, #272]	; (800b908 <_tx_queue_create+0x1d4>)
 800b7f8:	6013      	str	r3, [r2, #0]

    /* Optional queue create extended processing.  */
    TX_QUEUE_CREATE_EXTENSION(queue_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, name_ptr, queue_size, message_size)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b800:	68ba      	ldr	r2, [r7, #8]
 800b802:	68f9      	ldr	r1, [r7, #12]
 800b804:	2003      	movs	r0, #3
 800b806:	f002 fb75 	bl	800def4 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_CREATE, queue_ptr, message_size, TX_POINTER_TO_ULONG_CONVERT(queue_start), queue_size, TX_TRACE_QUEUE_EVENTS)
 800b80a:	4b41      	ldr	r3, [pc, #260]	; (800b910 <_tx_queue_create+0x1dc>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b812:	2b00      	cmp	r3, #0
 800b814:	d06b      	beq.n	800b8ee <_tx_queue_create+0x1ba>
 800b816:	4b3f      	ldr	r3, [pc, #252]	; (800b914 <_tx_queue_create+0x1e0>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d065      	beq.n	800b8ee <_tx_queue_create+0x1ba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b822:	f3ef 8305 	mrs	r3, IPSR
 800b826:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b828:	69ba      	ldr	r2, [r7, #24]
 800b82a:	4b3b      	ldr	r3, [pc, #236]	; (800b918 <_tx_queue_create+0x1e4>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4313      	orrs	r3, r2
 800b830:	627b      	str	r3, [r7, #36]	; 0x24
 800b832:	4b3a      	ldr	r3, [pc, #232]	; (800b91c <_tx_queue_create+0x1e8>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	643b      	str	r3, [r7, #64]	; 0x40
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10b      	bne.n	800b856 <_tx_queue_create+0x122>
 800b83e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b842:	647b      	str	r3, [r7, #68]	; 0x44
 800b844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b848:	041a      	lsls	r2, r3, #16
 800b84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b84c:	4313      	orrs	r3, r2
 800b84e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b852:	647b      	str	r3, [r7, #68]	; 0x44
 800b854:	e00e      	b.n	800b874 <_tx_queue_create+0x140>
 800b856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b858:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b85c:	d205      	bcs.n	800b86a <_tx_queue_create+0x136>
 800b85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b860:	647b      	str	r3, [r7, #68]	; 0x44
 800b862:	f04f 33ff 	mov.w	r3, #4294967295
 800b866:	643b      	str	r3, [r7, #64]	; 0x40
 800b868:	e004      	b.n	800b874 <_tx_queue_create+0x140>
 800b86a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b86e:	643b      	str	r3, [r7, #64]	; 0x40
 800b870:	2300      	movs	r3, #0
 800b872:	647b      	str	r3, [r7, #68]	; 0x44
 800b874:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b878:	601a      	str	r2, [r3, #0]
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b87e:	605a      	str	r2, [r3, #4]
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	223c      	movs	r2, #60	; 0x3c
 800b884:	609a      	str	r2, [r3, #8]
 800b886:	4b26      	ldr	r3, [pc, #152]	; (800b920 <_tx_queue_create+0x1ec>)
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	60da      	str	r2, [r3, #12]
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	611a      	str	r2, [r3, #16]
 800b894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	615a      	str	r2, [r3, #20]
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	619a      	str	r2, [r3, #24]
 800b8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8a4:	61da      	str	r2, [r3, #28]
 800b8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a8:	3320      	adds	r3, #32
 800b8aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8ac:	4b1d      	ldr	r3, [pc, #116]	; (800b924 <_tx_queue_create+0x1f0>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d314      	bcc.n	800b8e0 <_tx_queue_create+0x1ac>
 800b8b6:	4b1c      	ldr	r3, [pc, #112]	; (800b928 <_tx_queue_create+0x1f4>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8bc:	4a14      	ldr	r2, [pc, #80]	; (800b910 <_tx_queue_create+0x1dc>)
 800b8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c0:	6013      	str	r3, [r2, #0]
 800b8c2:	4b1a      	ldr	r3, [pc, #104]	; (800b92c <_tx_queue_create+0x1f8>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8c8:	621a      	str	r2, [r3, #32]
 800b8ca:	4b19      	ldr	r3, [pc, #100]	; (800b930 <_tx_queue_create+0x1fc>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d00d      	beq.n	800b8ee <_tx_queue_create+0x1ba>
 800b8d2:	4b17      	ldr	r3, [pc, #92]	; (800b930 <_tx_queue_create+0x1fc>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a15      	ldr	r2, [pc, #84]	; (800b92c <_tx_queue_create+0x1f8>)
 800b8d8:	6812      	ldr	r2, [r2, #0]
 800b8da:	4610      	mov	r0, r2
 800b8dc:	4798      	blx	r3
 800b8de:	e006      	b.n	800b8ee <_tx_queue_create+0x1ba>
 800b8e0:	4a0b      	ldr	r2, [pc, #44]	; (800b910 <_tx_queue_create+0x1dc>)
 800b8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e4:	6013      	str	r3, [r2, #0]
 800b8e6:	4b11      	ldr	r3, [pc, #68]	; (800b92c <_tx_queue_create+0x1f8>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8ec:	621a      	str	r2, [r3, #32]
 800b8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	f383 8810 	msr	PRIMASK, r3
}
 800b8f8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3748      	adds	r7, #72	; 0x48
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	51554555 	.word	0x51554555
 800b908:	200016a8 	.word	0x200016a8
 800b90c:	200016a4 	.word	0x200016a4
 800b910:	20001cf0 	.word	0x20001cf0
 800b914:	20001cf4 	.word	0x20001cf4
 800b918:	2000000c 	.word	0x2000000c
 800b91c:	200016d4 	.word	0x200016d4
 800b920:	e0001004 	.word	0xe0001004
 800b924:	20001cec 	.word	0x20001cec
 800b928:	20001ce8 	.word	0x20001ce8
 800b92c:	20001cdc 	.word	0x20001cdc
 800b930:	20001cf8 	.word	0x20001cf8

0800b934 <_tx_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_flush(TX_QUEUE *queue_ptr)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b094      	sub	sp, #80	; 0x50
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
UINT            suspended_count;
TX_THREAD       *thread_ptr;


    /* Initialize the suspended count and list.  */
    suspended_count =  TX_NO_SUSPENSIONS;
 800b93c:	2300      	movs	r3, #0
 800b93e:	64bb      	str	r3, [r7, #72]	; 0x48
    suspension_list =  TX_NULL;
 800b940:	2300      	movs	r3, #0
 800b942:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b944:	f3ef 8310 	mrs	r3, PRIMASK
 800b948:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b94c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b94e:	b672      	cpsid	i
    return(int_posture);
 800b950:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to reset various queue parameters.  */
    TX_DISABLE
 800b952:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_FLUSH, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), 0, 0, TX_TRACE_QUEUE_EVENTS)
 800b954:	4b76      	ldr	r3, [pc, #472]	; (800bb30 <_tx_queue_flush+0x1fc>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	63bb      	str	r3, [r7, #56]	; 0x38
 800b95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d06c      	beq.n	800ba3a <_tx_queue_flush+0x106>
 800b960:	4b74      	ldr	r3, [pc, #464]	; (800bb34 <_tx_queue_flush+0x200>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d066      	beq.n	800ba3a <_tx_queue_flush+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b96c:	f3ef 8305 	mrs	r3, IPSR
 800b970:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800b972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b974:	4b70      	ldr	r3, [pc, #448]	; (800bb38 <_tx_queue_flush+0x204>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4313      	orrs	r3, r2
 800b97a:	637b      	str	r3, [r7, #52]	; 0x34
 800b97c:	4b6f      	ldr	r3, [pc, #444]	; (800bb3c <_tx_queue_flush+0x208>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	643b      	str	r3, [r7, #64]	; 0x40
 800b982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10b      	bne.n	800b9a0 <_tx_queue_flush+0x6c>
 800b988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98c:	647b      	str	r3, [r7, #68]	; 0x44
 800b98e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b992:	041a      	lsls	r2, r3, #16
 800b994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b996:	4313      	orrs	r3, r2
 800b998:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b99c:	647b      	str	r3, [r7, #68]	; 0x44
 800b99e:	e00e      	b.n	800b9be <_tx_queue_flush+0x8a>
 800b9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b9a6:	d205      	bcs.n	800b9b4 <_tx_queue_flush+0x80>
 800b9a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9aa:	647b      	str	r3, [r7, #68]	; 0x44
 800b9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b0:	643b      	str	r3, [r7, #64]	; 0x40
 800b9b2:	e004      	b.n	800b9be <_tx_queue_flush+0x8a>
 800b9b4:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b9b8:	643b      	str	r3, [r7, #64]	; 0x40
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	647b      	str	r3, [r7, #68]	; 0x44
 800b9be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c2:	601a      	str	r2, [r3, #0]
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9c8:	605a      	str	r2, [r3, #4]
 800b9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9cc:	223e      	movs	r2, #62	; 0x3e
 800b9ce:	609a      	str	r2, [r3, #8]
 800b9d0:	4b5b      	ldr	r3, [pc, #364]	; (800bb40 <_tx_queue_flush+0x20c>)
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d6:	60da      	str	r2, [r3, #12]
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9dc:	611a      	str	r2, [r3, #16]
 800b9de:	f107 0208 	add.w	r2, r7, #8
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e4:	615a      	str	r2, [r3, #20]
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	619a      	str	r2, [r3, #24]
 800b9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	61da      	str	r2, [r3, #28]
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f4:	3320      	adds	r3, #32
 800b9f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9f8:	4b52      	ldr	r3, [pc, #328]	; (800bb44 <_tx_queue_flush+0x210>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d314      	bcc.n	800ba2c <_tx_queue_flush+0xf8>
 800ba02:	4b51      	ldr	r3, [pc, #324]	; (800bb48 <_tx_queue_flush+0x214>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba08:	4a49      	ldr	r2, [pc, #292]	; (800bb30 <_tx_queue_flush+0x1fc>)
 800ba0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0c:	6013      	str	r3, [r2, #0]
 800ba0e:	4b4f      	ldr	r3, [pc, #316]	; (800bb4c <_tx_queue_flush+0x218>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba14:	621a      	str	r2, [r3, #32]
 800ba16:	4b4e      	ldr	r3, [pc, #312]	; (800bb50 <_tx_queue_flush+0x21c>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00d      	beq.n	800ba3a <_tx_queue_flush+0x106>
 800ba1e:	4b4c      	ldr	r3, [pc, #304]	; (800bb50 <_tx_queue_flush+0x21c>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a4a      	ldr	r2, [pc, #296]	; (800bb4c <_tx_queue_flush+0x218>)
 800ba24:	6812      	ldr	r2, [r2, #0]
 800ba26:	4610      	mov	r0, r2
 800ba28:	4798      	blx	r3
 800ba2a:	e006      	b.n	800ba3a <_tx_queue_flush+0x106>
 800ba2c:	4a40      	ldr	r2, [pc, #256]	; (800bb30 <_tx_queue_flush+0x1fc>)
 800ba2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba30:	6013      	str	r3, [r2, #0]
 800ba32:	4b46      	ldr	r3, [pc, #280]	; (800bb4c <_tx_queue_flush+0x218>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba38:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_FLUSH_INSERT

    /* Determine if there is something on the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d023      	beq.n	800ba8a <_tx_queue_flush+0x156>
    {

        /* Yes, there is something in the queue.  */

        /* Reset the queue parameters to erase all of the queued messages.  */
        queue_ptr -> tx_queue_enqueued =           TX_NO_MESSAGES;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	611a      	str	r2, [r3, #16]
        queue_ptr -> tx_queue_available_storage =  queue_ptr -> tx_queue_capacity;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	68da      	ldr	r2, [r3, #12]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	615a      	str	r2, [r3, #20]
        queue_ptr -> tx_queue_read =               queue_ptr -> tx_queue_start;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	699a      	ldr	r2, [r3, #24]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	621a      	str	r2, [r3, #32]
        queue_ptr -> tx_queue_write =              queue_ptr -> tx_queue_start;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	699a      	ldr	r2, [r3, #24]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Now determine if there are any threads suspended on a full queue.  */
        if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d010      	beq.n	800ba8a <_tx_queue_flush+0x156>

            /* Yes, there are threads suspended on this queue, they must be
               resumed!  */

            /* Copy the information into temporary variables.  */
            suspension_list =  queue_ptr -> tx_queue_suspension_list;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6c:	64fb      	str	r3, [r7, #76]	; 0x4c
            suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba72:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the queue variables.  */
            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	629a      	str	r2, [r3, #40]	; 0x28
            queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800ba80:	4b34      	ldr	r3, [pc, #208]	; (800bb54 <_tx_queue_flush+0x220>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	3301      	adds	r3, #1
 800ba86:	4a33      	ldr	r2, [pc, #204]	; (800bb54 <_tx_queue_flush+0x220>)
 800ba88:	6013      	str	r3, [r2, #0]
 800ba8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba8c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba90:	f383 8810 	msr	PRIMASK, r3
}
 800ba94:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    if (suspended_count != TX_NO_SUSPENSIONS)
 800ba96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d044      	beq.n	800bb26 <_tx_queue_flush+0x1f2>
    {

        /* Pickup the thread to resume.  */
        thread_ptr =  suspension_list;
 800ba9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba9e:	60bb      	str	r3, [r7, #8]
        while (suspended_count != ((ULONG) 0))
 800baa0:	e027      	b.n	800baf2 <_tx_queue_flush+0x1be>
        {

            /* Decrement the suspension count.  */
            suspended_count--;
 800baa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baa4:	3b01      	subs	r3, #1
 800baa6:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Check for a NULL thread pointer.  */
            if (thread_ptr == TX_NULL)
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d025      	beq.n	800bafa <_tx_queue_flush+0x1c6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800baae:	f3ef 8310 	mrs	r3, PRIMASK
 800bab2:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bab4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bab6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bab8:	b672      	cpsid	i
    return(int_posture);
 800baba:	69bb      	ldr	r3, [r7, #24]
            }

            /* Resume the next suspended thread.  */

            /* Lockout interrupts.  */
            TX_DISABLE
 800babc:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	2200      	movs	r2, #0
 800bac2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set the return status in the thread to TX_SUCCESS.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bad0:	60bb      	str	r3, [r7, #8]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800bad2:	4b20      	ldr	r3, [pc, #128]	; (800bb54 <_tx_queue_flush+0x220>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3301      	adds	r3, #1
 800bad8:	4a1e      	ldr	r2, [pc, #120]	; (800bb54 <_tx_queue_flush+0x220>)
 800bada:	6013      	str	r3, [r2, #0]
 800badc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bade:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bae0:	6a3b      	ldr	r3, [r7, #32]
 800bae2:	f383 8810 	msr	PRIMASK, r3
}
 800bae6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baec:	4618      	mov	r0, r3
 800baee:	f001 fadf 	bl	800d0b0 <_tx_thread_system_resume>
        while (suspended_count != ((ULONG) 0))
 800baf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d1d4      	bne.n	800baa2 <_tx_queue_flush+0x16e>
 800baf8:	e000      	b.n	800bafc <_tx_queue_flush+0x1c8>
                break;
 800bafa:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bafc:	f3ef 8310 	mrs	r3, PRIMASK
 800bb00:	613b      	str	r3, [r7, #16]
    return(posture);
 800bb02:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800bb04:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb06:	b672      	cpsid	i
    return(int_posture);
 800bb08:	68fb      	ldr	r3, [r7, #12]
#endif
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bb0a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Restore previous preempt posture.  */
        _tx_thread_preempt_disable--;
 800bb0c:	4b11      	ldr	r3, [pc, #68]	; (800bb54 <_tx_queue_flush+0x220>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	3b01      	subs	r3, #1
 800bb12:	4a10      	ldr	r2, [pc, #64]	; (800bb54 <_tx_queue_flush+0x220>)
 800bb14:	6013      	str	r3, [r2, #0]
 800bb16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb18:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	f383 8810 	msr	PRIMASK, r3
}
 800bb20:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bb22:	f001 fa8b 	bl	800d03c <_tx_thread_system_preempt_check>
    }

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3750      	adds	r7, #80	; 0x50
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	20001cf0 	.word	0x20001cf0
 800bb34:	20001cf4 	.word	0x20001cf4
 800bb38:	2000000c 	.word	0x2000000c
 800bb3c:	200016d4 	.word	0x200016d4
 800bb40:	e0001004 	.word	0xe0001004
 800bb44:	20001cec 	.word	0x20001cec
 800bb48:	20001ce8 	.word	0x20001ce8
 800bb4c:	20001cdc 	.word	0x20001cdc
 800bb50:	20001cf8 	.word	0x20001cf8
 800bb54:	2000176c 	.word	0x2000176c

0800bb58 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b09a      	sub	sp, #104	; 0x68
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800bb64:	2300      	movs	r3, #0
 800bb66:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb68:	f3ef 8310 	mrs	r3, PRIMASK
 800bb6c:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800bb70:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb72:	b672      	cpsid	i
    return(int_posture);
 800bb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800bb76:	64fb      	str	r3, [r7, #76]	; 0x4c
    queue_ptr -> tx_queue_performance_messages_received_count++;

#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_RECEIVE, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(destination_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800bb78:	4b77      	ldr	r3, [pc, #476]	; (800bd58 <_tx_queue_receive+0x200>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d06c      	beq.n	800bc5e <_tx_queue_receive+0x106>
 800bb84:	4b75      	ldr	r3, [pc, #468]	; (800bd5c <_tx_queue_receive+0x204>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d066      	beq.n	800bc5e <_tx_queue_receive+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bb90:	f3ef 8305 	mrs	r3, IPSR
 800bb94:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800bb96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb98:	4b71      	ldr	r3, [pc, #452]	; (800bd60 <_tx_queue_receive+0x208>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	647b      	str	r3, [r7, #68]	; 0x44
 800bba0:	4b70      	ldr	r3, [pc, #448]	; (800bd64 <_tx_queue_receive+0x20c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	653b      	str	r3, [r7, #80]	; 0x50
 800bba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10b      	bne.n	800bbc4 <_tx_queue_receive+0x6c>
 800bbac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb0:	657b      	str	r3, [r7, #84]	; 0x54
 800bbb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbb6:	041a      	lsls	r2, r3, #16
 800bbb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbc0:	657b      	str	r3, [r7, #84]	; 0x54
 800bbc2:	e00e      	b.n	800bbe2 <_tx_queue_receive+0x8a>
 800bbc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbc6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bbca:	d205      	bcs.n	800bbd8 <_tx_queue_receive+0x80>
 800bbcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbce:	657b      	str	r3, [r7, #84]	; 0x54
 800bbd0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd4:	653b      	str	r3, [r7, #80]	; 0x50
 800bbd6:	e004      	b.n	800bbe2 <_tx_queue_receive+0x8a>
 800bbd8:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800bbdc:	653b      	str	r3, [r7, #80]	; 0x50
 800bbde:	2300      	movs	r3, #0
 800bbe0:	657b      	str	r3, [r7, #84]	; 0x54
 800bbe2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbe6:	601a      	str	r2, [r3, #0]
 800bbe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bbec:	605a      	str	r2, [r3, #4]
 800bbee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbf0:	2244      	movs	r2, #68	; 0x44
 800bbf2:	609a      	str	r2, [r3, #8]
 800bbf4:	4b5c      	ldr	r3, [pc, #368]	; (800bd68 <_tx_queue_receive+0x210>)
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbfa:	60da      	str	r2, [r3, #12]
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc00:	611a      	str	r2, [r3, #16]
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc06:	615a      	str	r2, [r3, #20]
 800bc08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	619a      	str	r2, [r3, #24]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	691a      	ldr	r2, [r3, #16]
 800bc12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc14:	61da      	str	r2, [r3, #28]
 800bc16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc18:	3320      	adds	r3, #32
 800bc1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc1c:	4b53      	ldr	r3, [pc, #332]	; (800bd6c <_tx_queue_receive+0x214>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d314      	bcc.n	800bc50 <_tx_queue_receive+0xf8>
 800bc26:	4b52      	ldr	r3, [pc, #328]	; (800bd70 <_tx_queue_receive+0x218>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc2c:	4a4a      	ldr	r2, [pc, #296]	; (800bd58 <_tx_queue_receive+0x200>)
 800bc2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc30:	6013      	str	r3, [r2, #0]
 800bc32:	4b50      	ldr	r3, [pc, #320]	; (800bd74 <_tx_queue_receive+0x21c>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc38:	621a      	str	r2, [r3, #32]
 800bc3a:	4b4f      	ldr	r3, [pc, #316]	; (800bd78 <_tx_queue_receive+0x220>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00d      	beq.n	800bc5e <_tx_queue_receive+0x106>
 800bc42:	4b4d      	ldr	r3, [pc, #308]	; (800bd78 <_tx_queue_receive+0x220>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a4b      	ldr	r2, [pc, #300]	; (800bd74 <_tx_queue_receive+0x21c>)
 800bc48:	6812      	ldr	r2, [r2, #0]
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	4798      	blx	r3
 800bc4e:	e006      	b.n	800bc5e <_tx_queue_receive+0x106>
 800bc50:	4a41      	ldr	r2, [pc, #260]	; (800bd58 <_tx_queue_receive+0x200>)
 800bc52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc54:	6013      	str	r3, [r2, #0]
 800bc56:	4b47      	ldr	r3, [pc, #284]	; (800bd74 <_tx_queue_receive+0x21c>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc5c:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc62:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 8149 	beq.w	800bf00 <_tx_queue_receive+0x3a8>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800bc6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d13c      	bne.n	800bcee <_tx_queue_receive+0x196>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6a1b      	ldr	r3, [r3, #32]
 800bc78:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	689b      	ldr	r3, [r3, #8]
 800bc82:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bc84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc86:	1d13      	adds	r3, r2, #4
 800bc88:	667b      	str	r3, [r7, #100]	; 0x64
 800bc8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc8c:	1d19      	adds	r1, r3, #4
 800bc8e:	6639      	str	r1, [r7, #96]	; 0x60
 800bc90:	6812      	ldr	r2, [r2, #0]
 800bc92:	601a      	str	r2, [r3, #0]
 800bc94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d90e      	bls.n	800bcb8 <_tx_queue_receive+0x160>
 800bc9a:	e007      	b.n	800bcac <_tx_queue_receive+0x154>
 800bc9c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc9e:	1d13      	adds	r3, r2, #4
 800bca0:	667b      	str	r3, [r7, #100]	; 0x64
 800bca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bca4:	1d19      	adds	r1, r3, #4
 800bca6:	6639      	str	r1, [r7, #96]	; 0x60
 800bca8:	6812      	ldr	r2, [r2, #0]
 800bcaa:	601a      	str	r2, [r3, #0]
 800bcac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1f1      	bne.n	800bc9c <_tx_queue_receive+0x144>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	69db      	ldr	r3, [r3, #28]
 800bcbc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d102      	bne.n	800bcc8 <_tx_queue_receive+0x170>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	699b      	ldr	r3, [r3, #24]
 800bcc6:	667b      	str	r3, [r7, #100]	; 0x64
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bccc:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	695b      	ldr	r3, [r3, #20]
 800bcd2:	1c5a      	adds	r2, r3, #1
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	1e5a      	subs	r2, r3, #1
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	611a      	str	r2, [r3, #16]
 800bce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce8:	f383 8810 	msr	PRIMASK, r3
}
 800bcec:	e176      	b.n	800bfdc <_tx_queue_receive+0x484>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf2:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800bcf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d166      	bne.n	800bdcc <_tx_queue_receive+0x274>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bcfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd02:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bd0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd10:	1d13      	adds	r3, r2, #4
 800bd12:	667b      	str	r3, [r7, #100]	; 0x64
 800bd14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd16:	1d19      	adds	r1, r3, #4
 800bd18:	6639      	str	r1, [r7, #96]	; 0x60
 800bd1a:	6812      	ldr	r2, [r2, #0]
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d90e      	bls.n	800bd42 <_tx_queue_receive+0x1ea>
 800bd24:	e007      	b.n	800bd36 <_tx_queue_receive+0x1de>
 800bd26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd28:	1d13      	adds	r3, r2, #4
 800bd2a:	667b      	str	r3, [r7, #100]	; 0x64
 800bd2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd2e:	1d19      	adds	r1, r3, #4
 800bd30:	6639      	str	r1, [r7, #96]	; 0x60
 800bd32:	6812      	ldr	r2, [r2, #0]
 800bd34:	601a      	str	r2, [r3, #0]
 800bd36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1f1      	bne.n	800bd26 <_tx_queue_receive+0x1ce>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800bd42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd44:	3b01      	subs	r3, #1
 800bd46:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bd48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d116      	bne.n	800bd7c <_tx_queue_receive+0x224>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	629a      	str	r2, [r3, #40]	; 0x28
 800bd54:	e021      	b.n	800bd9a <_tx_queue_receive+0x242>
 800bd56:	bf00      	nop
 800bd58:	20001cf0 	.word	0x20001cf0
 800bd5c:	20001cf4 	.word	0x20001cf4
 800bd60:	2000000c 	.word	0x2000000c
 800bd64:	200016d4 	.word	0x200016d4
 800bd68:	e0001004 	.word	0xe0001004
 800bd6c:	20001cec 	.word	0x20001cec
 800bd70:	20001ce8 	.word	0x20001ce8
 800bd74:	20001cdc 	.word	0x20001cdc
 800bd78:	20001cf8 	.word	0x20001cf8
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd80:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd86:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800bd88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd8c:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800bd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd92:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800bd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd98:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd9e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bda2:	2200      	movs	r2, #0
 800bda4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bda6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bdae:	4b8e      	ldr	r3, [pc, #568]	; (800bfe8 <_tx_queue_receive+0x490>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	4a8c      	ldr	r2, [pc, #560]	; (800bfe8 <_tx_queue_receive+0x490>)
 800bdb6:	6013      	str	r3, [r2, #0]
 800bdb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdba:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdbc:	6a3b      	ldr	r3, [r7, #32]
 800bdbe:	f383 8810 	msr	PRIMASK, r3
}
 800bdc2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800bdc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bdc6:	f001 f973 	bl	800d0b0 <_tx_thread_system_resume>
 800bdca:	e107      	b.n	800bfdc <_tx_queue_receive+0x484>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6a1b      	ldr	r3, [r3, #32]
 800bdd0:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bddc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdde:	1d13      	adds	r3, r2, #4
 800bde0:	667b      	str	r3, [r7, #100]	; 0x64
 800bde2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bde4:	1d19      	adds	r1, r3, #4
 800bde6:	6639      	str	r1, [r7, #96]	; 0x60
 800bde8:	6812      	ldr	r2, [r2, #0]
 800bdea:	601a      	str	r2, [r3, #0]
 800bdec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d90e      	bls.n	800be10 <_tx_queue_receive+0x2b8>
 800bdf2:	e007      	b.n	800be04 <_tx_queue_receive+0x2ac>
 800bdf4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdf6:	1d13      	adds	r3, r2, #4
 800bdf8:	667b      	str	r3, [r7, #100]	; 0x64
 800bdfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdfc:	1d19      	adds	r1, r3, #4
 800bdfe:	6639      	str	r1, [r7, #96]	; 0x60
 800be00:	6812      	ldr	r2, [r2, #0]
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be06:	3b01      	subs	r3, #1
 800be08:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d1f1      	bne.n	800bdf4 <_tx_queue_receive+0x29c>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	69db      	ldr	r3, [r3, #28]
 800be14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be16:	429a      	cmp	r2, r3
 800be18:	d102      	bne.n	800be20 <_tx_queue_receive+0x2c8>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	699b      	ldr	r3, [r3, #24]
 800be1e:	667b      	str	r3, [r7, #100]	; 0x64
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be24:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800be26:	4b70      	ldr	r3, [pc, #448]	; (800bfe8 <_tx_queue_receive+0x490>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3301      	adds	r3, #1
 800be2c:	4a6e      	ldr	r2, [pc, #440]	; (800bfe8 <_tx_queue_receive+0x490>)
 800be2e:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800be30:	4b6d      	ldr	r3, [pc, #436]	; (800bfe8 <_tx_queue_receive+0x490>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	3b01      	subs	r3, #1
 800be36:	4a6c      	ldr	r2, [pc, #432]	; (800bfe8 <_tx_queue_receive+0x490>)
 800be38:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800be3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be3e:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  queue_ptr -> tx_queue_write;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be44:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800be4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be4e:	1d13      	adds	r3, r2, #4
 800be50:	667b      	str	r3, [r7, #100]	; 0x64
 800be52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be54:	1d19      	adds	r1, r3, #4
 800be56:	6639      	str	r1, [r7, #96]	; 0x60
 800be58:	6812      	ldr	r2, [r2, #0]
 800be5a:	601a      	str	r2, [r3, #0]
 800be5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d90e      	bls.n	800be80 <_tx_queue_receive+0x328>
 800be62:	e007      	b.n	800be74 <_tx_queue_receive+0x31c>
 800be64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be66:	1d13      	adds	r3, r2, #4
 800be68:	667b      	str	r3, [r7, #100]	; 0x64
 800be6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be6c:	1d19      	adds	r1, r3, #4
 800be6e:	6639      	str	r1, [r7, #96]	; 0x60
 800be70:	6812      	ldr	r2, [r2, #0]
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be76:	3b01      	subs	r3, #1
 800be78:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1f1      	bne.n	800be64 <_tx_queue_receive+0x30c>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	69db      	ldr	r3, [r3, #28]
 800be84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be86:	429a      	cmp	r2, r3
 800be88:	d102      	bne.n	800be90 <_tx_queue_receive+0x338>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	699b      	ldr	r3, [r3, #24]
 800be8e:	663b      	str	r3, [r7, #96]	; 0x60
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be94:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be9a:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800be9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be9e:	3b01      	subs	r3, #1
 800bea0:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d103      	bne.n	800beb0 <_tx_queue_receive+0x358>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2200      	movs	r2, #0
 800beac:	629a      	str	r2, [r3, #40]	; 0x28
 800beae:	e00e      	b.n	800bece <_tx_queue_receive+0x376>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800beb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb4:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800beba:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bec0:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bec6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800bec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800becc:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bed2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bed6:	2200      	movs	r2, #0
 800bed8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800beda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bedc:	2200      	movs	r2, #0
 800bede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bee2:	4b41      	ldr	r3, [pc, #260]	; (800bfe8 <_tx_queue_receive+0x490>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3301      	adds	r3, #1
 800bee8:	4a3f      	ldr	r2, [pc, #252]	; (800bfe8 <_tx_queue_receive+0x490>)
 800beea:	6013      	str	r3, [r2, #0]
 800beec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beee:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	f383 8810 	msr	PRIMASK, r3
}
 800bef6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800bef8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800befa:	f001 f8d9 	bl	800d0b0 <_tx_thread_system_resume>
 800befe:	e06d      	b.n	800bfdc <_tx_queue_receive+0x484>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d062      	beq.n	800bfcc <_tx_queue_receive+0x474>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800bf06:	4b38      	ldr	r3, [pc, #224]	; (800bfe8 <_tx_queue_receive+0x490>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d008      	beq.n	800bf20 <_tx_queue_receive+0x3c8>
 800bf0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf10:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	f383 8810 	msr	PRIMASK, r3
}
 800bf18:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800bf1a:	230a      	movs	r3, #10
 800bf1c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf1e:	e05d      	b.n	800bfdc <_tx_queue_receive+0x484>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bf20:	4b32      	ldr	r3, [pc, #200]	; (800bfec <_tx_queue_receive+0x494>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800bf26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf28:	4a31      	ldr	r2, [pc, #196]	; (800bff0 <_tx_queue_receive+0x498>)
 800bf2a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800bf2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf2e:	68fa      	ldr	r2, [r7, #12]
 800bf30:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800bf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800bf38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800bf40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf46:	1c5a      	adds	r2, r3, #1
 800bf48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf4a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800bf4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d109      	bne.n	800bf68 <_tx_queue_receive+0x410>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf58:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800bf5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf5e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800bf60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf64:	675a      	str	r2, [r3, #116]	; 0x74
 800bf66:	e011      	b.n	800bf8c <_tx_queue_receive+0x434>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6c:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800bf6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf72:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800bf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf78:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800bf7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf7e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800bf80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf84:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800bf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf8a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800bf8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf8e:	1c5a      	adds	r2, r3, #1
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800bf94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf96:	2205      	movs	r2, #5
 800bf98:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bf9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800bfa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bfa6:	4b10      	ldr	r3, [pc, #64]	; (800bfe8 <_tx_queue_receive+0x490>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	4a0e      	ldr	r2, [pc, #56]	; (800bfe8 <_tx_queue_receive+0x490>)
 800bfae:	6013      	str	r3, [r2, #0]
 800bfb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfb2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	f383 8810 	msr	PRIMASK, r3
}
 800bfba:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800bfbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bfbe:	f001 fa31 	bl	800d424 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800bfc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfc8:	65bb      	str	r3, [r7, #88]	; 0x58
 800bfca:	e007      	b.n	800bfdc <_tx_queue_receive+0x484>
 800bfcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfce:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	f383 8810 	msr	PRIMASK, r3
}
 800bfd6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800bfd8:	230a      	movs	r3, #10
 800bfda:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800bfdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3768      	adds	r7, #104	; 0x68
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	2000176c 	.word	0x2000176c
 800bfec:	200016d4 	.word	0x200016d4
 800bff0:	0800b62d 	.word	0x0800b62d

0800bff4 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b09a      	sub	sp, #104	; 0x68
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c000:	2300      	movs	r3, #0
 800c002:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c004:	f3ef 8310 	mrs	r3, PRIMASK
 800c008:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800c00c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c00e:	b672      	cpsid	i
    return(int_posture);
 800c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800c012:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Increment the number of messages sent to this queue.  */
    queue_ptr -> tx_queue_performance_messages_sent_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_SEND, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(source_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800c014:	4b7a      	ldr	r3, [pc, #488]	; (800c200 <_tx_queue_send+0x20c>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	64bb      	str	r3, [r7, #72]	; 0x48
 800c01a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d06c      	beq.n	800c0fa <_tx_queue_send+0x106>
 800c020:	4b78      	ldr	r3, [pc, #480]	; (800c204 <_tx_queue_send+0x210>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d066      	beq.n	800c0fa <_tx_queue_send+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c02c:	f3ef 8305 	mrs	r3, IPSR
 800c030:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800c032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c034:	4b74      	ldr	r3, [pc, #464]	; (800c208 <_tx_queue_send+0x214>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4313      	orrs	r3, r2
 800c03a:	647b      	str	r3, [r7, #68]	; 0x44
 800c03c:	4b73      	ldr	r3, [pc, #460]	; (800c20c <_tx_queue_send+0x218>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	653b      	str	r3, [r7, #80]	; 0x50
 800c042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10b      	bne.n	800c060 <_tx_queue_send+0x6c>
 800c048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04c:	657b      	str	r3, [r7, #84]	; 0x54
 800c04e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c052:	041a      	lsls	r2, r3, #16
 800c054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c056:	4313      	orrs	r3, r2
 800c058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c05c:	657b      	str	r3, [r7, #84]	; 0x54
 800c05e:	e00e      	b.n	800c07e <_tx_queue_send+0x8a>
 800c060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c062:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c066:	d205      	bcs.n	800c074 <_tx_queue_send+0x80>
 800c068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c06a:	657b      	str	r3, [r7, #84]	; 0x54
 800c06c:	f04f 33ff 	mov.w	r3, #4294967295
 800c070:	653b      	str	r3, [r7, #80]	; 0x50
 800c072:	e004      	b.n	800c07e <_tx_queue_send+0x8a>
 800c074:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c078:	653b      	str	r3, [r7, #80]	; 0x50
 800c07a:	2300      	movs	r3, #0
 800c07c:	657b      	str	r3, [r7, #84]	; 0x54
 800c07e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c082:	601a      	str	r2, [r3, #0]
 800c084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c086:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c088:	605a      	str	r2, [r3, #4]
 800c08a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c08c:	2245      	movs	r2, #69	; 0x45
 800c08e:	609a      	str	r2, [r3, #8]
 800c090:	4b5f      	ldr	r3, [pc, #380]	; (800c210 <_tx_queue_send+0x21c>)
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c096:	60da      	str	r2, [r3, #12]
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c09c:	611a      	str	r2, [r3, #16]
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0a2:	615a      	str	r2, [r3, #20]
 800c0a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	619a      	str	r2, [r3, #24]
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	691a      	ldr	r2, [r3, #16]
 800c0ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0b0:	61da      	str	r2, [r3, #28]
 800c0b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0b4:	3320      	adds	r3, #32
 800c0b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0b8:	4b56      	ldr	r3, [pc, #344]	; (800c214 <_tx_queue_send+0x220>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d314      	bcc.n	800c0ec <_tx_queue_send+0xf8>
 800c0c2:	4b55      	ldr	r3, [pc, #340]	; (800c218 <_tx_queue_send+0x224>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0c8:	4a4d      	ldr	r2, [pc, #308]	; (800c200 <_tx_queue_send+0x20c>)
 800c0ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0cc:	6013      	str	r3, [r2, #0]
 800c0ce:	4b53      	ldr	r3, [pc, #332]	; (800c21c <_tx_queue_send+0x228>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0d4:	621a      	str	r2, [r3, #32]
 800c0d6:	4b52      	ldr	r3, [pc, #328]	; (800c220 <_tx_queue_send+0x22c>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00d      	beq.n	800c0fa <_tx_queue_send+0x106>
 800c0de:	4b50      	ldr	r3, [pc, #320]	; (800c220 <_tx_queue_send+0x22c>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a4e      	ldr	r2, [pc, #312]	; (800c21c <_tx_queue_send+0x228>)
 800c0e4:	6812      	ldr	r2, [r2, #0]
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	4798      	blx	r3
 800c0ea:	e006      	b.n	800c0fa <_tx_queue_send+0x106>
 800c0ec:	4a44      	ldr	r2, [pc, #272]	; (800c200 <_tx_queue_send+0x20c>)
 800c0ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0f0:	6013      	str	r3, [r2, #0]
 800c0f2:	4b4a      	ldr	r3, [pc, #296]	; (800c21c <_tx_queue_send+0x228>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0f8:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fe:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	695b      	ldr	r3, [r3, #20]
 800c104:	2b00      	cmp	r3, #0
 800c106:	f000 80ae 	beq.w	800c266 <_tx_queue_send+0x272>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c10a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d13c      	bne.n	800c18a <_tx_queue_send+0x196>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	1e5a      	subs	r2, r3, #1
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  queue_ptr -> tx_queue_write;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12c:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c134:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c136:	1d13      	adds	r3, r2, #4
 800c138:	667b      	str	r3, [r7, #100]	; 0x64
 800c13a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c13c:	1d19      	adds	r1, r3, #4
 800c13e:	6639      	str	r1, [r7, #96]	; 0x60
 800c140:	6812      	ldr	r2, [r2, #0]
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c146:	2b01      	cmp	r3, #1
 800c148:	d90e      	bls.n	800c168 <_tx_queue_send+0x174>
 800c14a:	e007      	b.n	800c15c <_tx_queue_send+0x168>
 800c14c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c14e:	1d13      	adds	r3, r2, #4
 800c150:	667b      	str	r3, [r7, #100]	; 0x64
 800c152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c154:	1d19      	adds	r1, r3, #4
 800c156:	6639      	str	r1, [r7, #96]	; 0x60
 800c158:	6812      	ldr	r2, [r2, #0]
 800c15a:	601a      	str	r2, [r3, #0]
 800c15c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c15e:	3b01      	subs	r3, #1
 800c160:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1f1      	bne.n	800c14c <_tx_queue_send+0x158>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	69db      	ldr	r3, [r3, #28]
 800c16c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c16e:	429a      	cmp	r2, r3
 800c170:	d102      	bne.n	800c178 <_tx_queue_send+0x184>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	663b      	str	r3, [r7, #96]	; 0x60
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c17c:	625a      	str	r2, [r3, #36]	; 0x24
 800c17e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c180:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c184:	f383 8810 	msr	PRIMASK, r3
}
 800c188:	e0db      	b.n	800c342 <_tx_queue_send+0x34e>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c18e:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800c190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c192:	3b01      	subs	r3, #1
 800c194:	643b      	str	r3, [r7, #64]	; 0x40
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d103      	bne.n	800c1a4 <_tx_queue_send+0x1b0>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	629a      	str	r2, [r3, #40]	; 0x28
 800c1a2:	e012      	b.n	800c1ca <_tx_queue_send+0x1d6>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800c1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800c1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1b0:	63bb      	str	r3, [r7, #56]	; 0x38
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1b6:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1bc:	637b      	str	r3, [r7, #52]	; 0x34
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1c2:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800c1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1c8:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1ce:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800c1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1de:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c1e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1e8:	1d13      	adds	r3, r2, #4
 800c1ea:	667b      	str	r3, [r7, #100]	; 0x64
 800c1ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1ee:	1d19      	adds	r1, r3, #4
 800c1f0:	6639      	str	r1, [r7, #96]	; 0x60
 800c1f2:	6812      	ldr	r2, [r2, #0]
 800c1f4:	601a      	str	r2, [r3, #0]
 800c1f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d921      	bls.n	800c240 <_tx_queue_send+0x24c>
 800c1fc:	e01a      	b.n	800c234 <_tx_queue_send+0x240>
 800c1fe:	bf00      	nop
 800c200:	20001cf0 	.word	0x20001cf0
 800c204:	20001cf4 	.word	0x20001cf4
 800c208:	2000000c 	.word	0x2000000c
 800c20c:	200016d4 	.word	0x200016d4
 800c210:	e0001004 	.word	0xe0001004
 800c214:	20001cec 	.word	0x20001cec
 800c218:	20001ce8 	.word	0x20001ce8
 800c21c:	20001cdc 	.word	0x20001cdc
 800c220:	20001cf8 	.word	0x20001cf8
 800c224:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c226:	1d13      	adds	r3, r2, #4
 800c228:	667b      	str	r3, [r7, #100]	; 0x64
 800c22a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c22c:	1d19      	adds	r1, r3, #4
 800c22e:	6639      	str	r1, [r7, #96]	; 0x60
 800c230:	6812      	ldr	r2, [r2, #0]
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c236:	3b01      	subs	r3, #1
 800c238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c23a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1f1      	bne.n	800c224 <_tx_queue_send+0x230>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c242:	2200      	movs	r2, #0
 800c244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c248:	4b40      	ldr	r3, [pc, #256]	; (800c34c <_tx_queue_send+0x358>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	3301      	adds	r3, #1
 800c24e:	4a3f      	ldr	r2, [pc, #252]	; (800c34c <_tx_queue_send+0x358>)
 800c250:	6013      	str	r3, [r2, #0]
 800c252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c254:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c256:	6a3b      	ldr	r3, [r7, #32]
 800c258:	f383 8810 	msr	PRIMASK, r3
}
 800c25c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800c25e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c260:	f000 ff26 	bl	800d0b0 <_tx_thread_system_resume>
 800c264:	e06d      	b.n	800c342 <_tx_queue_send+0x34e>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d062      	beq.n	800c332 <_tx_queue_send+0x33e>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c26c:	4b37      	ldr	r3, [pc, #220]	; (800c34c <_tx_queue_send+0x358>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d008      	beq.n	800c286 <_tx_queue_send+0x292>
 800c274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c276:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	f383 8810 	msr	PRIMASK, r3
}
 800c27e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800c280:	230b      	movs	r3, #11
 800c282:	65bb      	str	r3, [r7, #88]	; 0x58
 800c284:	e05d      	b.n	800c342 <_tx_queue_send+0x34e>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c286:	4b32      	ldr	r3, [pc, #200]	; (800c350 <_tx_queue_send+0x35c>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800c28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c28e:	4a31      	ldr	r2, [pc, #196]	; (800c354 <_tx_queue_send+0x360>)
 800c290:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800c292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800c298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800c29e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c2a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c2ac:	1c5a      	adds	r2, r3, #1
 800c2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2b0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c2b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d109      	bne.n	800c2ce <_tx_queue_send+0x2da>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2be:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2c4:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2ca:	675a      	str	r2, [r3, #116]	; 0x74
 800c2cc:	e011      	b.n	800c2f2 <_tx_queue_send+0x2fe>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d2:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2d8:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2de:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2e4:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2ea:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2f0:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800c2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2f4:	1c5a      	adds	r2, r3, #1
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800c2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2fc:	2205      	movs	r2, #5
 800c2fe:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c302:	2201      	movs	r2, #1
 800c304:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c30c:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <_tx_queue_send+0x358>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	3301      	adds	r3, #1
 800c312:	4a0e      	ldr	r2, [pc, #56]	; (800c34c <_tx_queue_send+0x358>)
 800c314:	6013      	str	r3, [r2, #0]
 800c316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c318:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	f383 8810 	msr	PRIMASK, r3
}
 800c320:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c322:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c324:	f001 f87e 	bl	800d424 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c32e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c330:	e007      	b.n	800c342 <_tx_queue_send+0x34e>
 800c332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c334:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	f383 8810 	msr	PRIMASK, r3
}
 800c33c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800c33e:	230b      	movs	r3, #11
 800c340:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800c342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800c344:	4618      	mov	r0, r3
 800c346:	3768      	adds	r7, #104	; 0x68
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	2000176c 	.word	0x2000176c
 800c350:	200016d4 	.word	0x200016d4
 800c354:	0800b62d 	.word	0x0800b62d

0800c358 <_tx_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b092      	sub	sp, #72	; 0x48
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c362:	2300      	movs	r3, #0
 800c364:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c366:	f3ef 8310 	mrs	r3, PRIMASK
 800c36a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c36c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c36e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c370:	b672      	cpsid	i
    return(int_posture);
 800c372:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800c374:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of puts on this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_put_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CEILING_PUT, semaphore_ptr, semaphore_ptr -> tx_semaphore_count, semaphore_ptr -> tx_semaphore_suspended_count, ceiling, TX_TRACE_SEMAPHORE_EVENTS)
 800c376:	4b67      	ldr	r3, [pc, #412]	; (800c514 <_tx_semaphore_ceiling_put+0x1bc>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	637b      	str	r3, [r7, #52]	; 0x34
 800c37c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d06d      	beq.n	800c45e <_tx_semaphore_ceiling_put+0x106>
 800c382:	4b65      	ldr	r3, [pc, #404]	; (800c518 <_tx_semaphore_ceiling_put+0x1c0>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d067      	beq.n	800c45e <_tx_semaphore_ceiling_put+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c38e:	f3ef 8305 	mrs	r3, IPSR
 800c392:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c394:	697a      	ldr	r2, [r7, #20]
 800c396:	4b61      	ldr	r3, [pc, #388]	; (800c51c <_tx_semaphore_ceiling_put+0x1c4>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	633b      	str	r3, [r7, #48]	; 0x30
 800c39e:	4b60      	ldr	r3, [pc, #384]	; (800c520 <_tx_semaphore_ceiling_put+0x1c8>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10b      	bne.n	800c3c2 <_tx_semaphore_ceiling_put+0x6a>
 800c3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ae:	643b      	str	r3, [r7, #64]	; 0x40
 800c3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3b4:	041a      	lsls	r2, r3, #16
 800c3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c3be:	643b      	str	r3, [r7, #64]	; 0x40
 800c3c0:	e00e      	b.n	800c3e0 <_tx_semaphore_ceiling_put+0x88>
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c3c8:	d205      	bcs.n	800c3d6 <_tx_semaphore_ceiling_put+0x7e>
 800c3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3cc:	643b      	str	r3, [r7, #64]	; 0x40
 800c3ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3d4:	e004      	b.n	800c3e0 <_tx_semaphore_ceiling_put+0x88>
 800c3d6:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c3da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3dc:	2300      	movs	r3, #0
 800c3de:	643b      	str	r3, [r7, #64]	; 0x40
 800c3e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e4:	601a      	str	r2, [r3, #0]
 800c3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3ea:	605a      	str	r2, [r3, #4]
 800c3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ee:	2250      	movs	r2, #80	; 0x50
 800c3f0:	609a      	str	r2, [r3, #8]
 800c3f2:	4b4c      	ldr	r3, [pc, #304]	; (800c524 <_tx_semaphore_ceiling_put+0x1cc>)
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f8:	60da      	str	r2, [r3, #12]
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3fe:	611a      	str	r2, [r3, #16]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	689a      	ldr	r2, [r3, #8]
 800c404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c406:	615a      	str	r2, [r3, #20]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	691a      	ldr	r2, [r3, #16]
 800c40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40e:	619a      	str	r2, [r3, #24]
 800c410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c412:	683a      	ldr	r2, [r7, #0]
 800c414:	61da      	str	r2, [r3, #28]
 800c416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c418:	3320      	adds	r3, #32
 800c41a:	637b      	str	r3, [r7, #52]	; 0x34
 800c41c:	4b42      	ldr	r3, [pc, #264]	; (800c528 <_tx_semaphore_ceiling_put+0x1d0>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c422:	429a      	cmp	r2, r3
 800c424:	d314      	bcc.n	800c450 <_tx_semaphore_ceiling_put+0xf8>
 800c426:	4b41      	ldr	r3, [pc, #260]	; (800c52c <_tx_semaphore_ceiling_put+0x1d4>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	637b      	str	r3, [r7, #52]	; 0x34
 800c42c:	4a39      	ldr	r2, [pc, #228]	; (800c514 <_tx_semaphore_ceiling_put+0x1bc>)
 800c42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c430:	6013      	str	r3, [r2, #0]
 800c432:	4b3f      	ldr	r3, [pc, #252]	; (800c530 <_tx_semaphore_ceiling_put+0x1d8>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c438:	621a      	str	r2, [r3, #32]
 800c43a:	4b3e      	ldr	r3, [pc, #248]	; (800c534 <_tx_semaphore_ceiling_put+0x1dc>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00d      	beq.n	800c45e <_tx_semaphore_ceiling_put+0x106>
 800c442:	4b3c      	ldr	r3, [pc, #240]	; (800c534 <_tx_semaphore_ceiling_put+0x1dc>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a3a      	ldr	r2, [pc, #232]	; (800c530 <_tx_semaphore_ceiling_put+0x1d8>)
 800c448:	6812      	ldr	r2, [r2, #0]
 800c44a:	4610      	mov	r0, r2
 800c44c:	4798      	blx	r3
 800c44e:	e006      	b.n	800c45e <_tx_semaphore_ceiling_put+0x106>
 800c450:	4a30      	ldr	r2, [pc, #192]	; (800c514 <_tx_semaphore_ceiling_put+0x1bc>)
 800c452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c454:	6013      	str	r3, [r2, #0]
 800c456:	4b36      	ldr	r3, [pc, #216]	; (800c530 <_tx_semaphore_ceiling_put+0x1d8>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c45c:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_CEILING_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800c464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c466:	2b00      	cmp	r3, #0
 800c468:	d11b      	bne.n	800c4a2 <_tx_semaphore_ceiling_put+0x14a>
    {

        /* Determine if the ceiling has been exceeded.  */
        if (semaphore_ptr -> tx_semaphore_count >= ceiling)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	683a      	ldr	r2, [r7, #0]
 800c470:	429a      	cmp	r2, r3
 800c472:	d808      	bhi.n	800c486 <_tx_semaphore_ceiling_put+0x12e>
 800c474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c476:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	f383 8810 	msr	PRIMASK, r3
}
 800c47e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Return an error.  */
            status =  TX_CEILING_EXCEEDED;
 800c480:	2321      	movs	r3, #33	; 0x21
 800c482:	647b      	str	r3, [r7, #68]	; 0x44
 800c484:	e041      	b.n	800c50a <_tx_semaphore_ceiling_put+0x1b2>
        }
        else
        {

            /* Increment the semaphore count.  */
            semaphore_ptr -> tx_semaphore_count++;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	1c5a      	adds	r2, r3, #1
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	609a      	str	r2, [r3, #8]
 800c490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c492:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f383 8810 	msr	PRIMASK, r3
}
 800c49a:	bf00      	nop
                (semaphore_put_notify)(semaphore_ptr);
            }
#endif

            /* Return successful completion status.  */
            status =  TX_SUCCESS;
 800c49c:	2300      	movs	r3, #0
 800c49e:	647b      	str	r3, [r7, #68]	; 0x44
 800c4a0:	e033      	b.n	800c50a <_tx_semaphore_ceiling_put+0x1b2>
    {

        /* Remove the suspended thread from the list.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	62bb      	str	r3, [r7, #40]	; 0x28

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d103      	bne.n	800c4bc <_tx_semaphore_ceiling_put+0x164>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	60da      	str	r2, [r3, #12]
 800c4ba:	e00e      	b.n	800c4da <_tx_semaphore_ceiling_put+0x182>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800c4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c0:	627b      	str	r3, [r7, #36]	; 0x24
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4c6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4cc:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d0:	6a3a      	ldr	r2, [r7, #32]
 800c4d2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4d8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4de:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800c4ee:	4b12      	ldr	r3, [pc, #72]	; (800c538 <_tx_semaphore_ceiling_put+0x1e0>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	4a10      	ldr	r2, [pc, #64]	; (800c538 <_tx_semaphore_ceiling_put+0x1e0>)
 800c4f6:	6013      	str	r3, [r2, #0]
 800c4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f383 8810 	msr	PRIMASK, r3
}
 800c502:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c506:	f000 fdd3 	bl	800d0b0 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(status);
 800c50a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3748      	adds	r7, #72	; 0x48
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	20001cf0 	.word	0x20001cf0
 800c518:	20001cf4 	.word	0x20001cf4
 800c51c:	2000000c 	.word	0x2000000c
 800c520:	200016d4 	.word	0x200016d4
 800c524:	e0001004 	.word	0xe0001004
 800c528:	20001cec 	.word	0x20001cec
 800c52c:	20001ce8 	.word	0x20001ce8
 800c530:	20001cdc 	.word	0x20001cdc
 800c534:	20001cf8 	.word	0x20001cf8
 800c538:	2000176c 	.word	0x2000176c

0800c53c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b08e      	sub	sp, #56	; 0x38
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c546:	f3ef 8310 	mrs	r3, PRIMASK
 800c54a:	623b      	str	r3, [r7, #32]
    return(posture);
 800c54c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c54e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c550:	b672      	cpsid	i
    return(int_posture);
 800c552:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800c554:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c55a:	4a33      	ldr	r2, [pc, #204]	; (800c628 <_tx_semaphore_cleanup+0xec>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d158      	bne.n	800c612 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d152      	bne.n	800c612 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c570:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	2b00      	cmp	r3, #0
 800c576:	d04c      	beq.n	800c612 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800c578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a2b      	ldr	r2, [pc, #172]	; (800c62c <_tx_semaphore_cleanup+0xf0>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d147      	bne.n	800c612 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	691b      	ldr	r3, [r3, #16]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d043      	beq.n	800c612 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800c590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	1e5a      	subs	r2, r3, #1
 800c596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c598:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d103      	bne.n	800c5ae <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	60da      	str	r2, [r3, #12]
 800c5ac:	e013      	b.n	800c5d6 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5b2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5b8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5be:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5c4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d102      	bne.n	800c5d6 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5d4:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5da:	2b06      	cmp	r3, #6
 800c5dc:	d119      	bne.n	800c612 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	220d      	movs	r2, #13
 800c5e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c5e6:	4b12      	ldr	r3, [pc, #72]	; (800c630 <_tx_semaphore_cleanup+0xf4>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	4a10      	ldr	r2, [pc, #64]	; (800c630 <_tx_semaphore_cleanup+0xf4>)
 800c5ee:	6013      	str	r3, [r2, #0]
 800c5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	f383 8810 	msr	PRIMASK, r3
}
 800c5fa:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 fd57 	bl	800d0b0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c602:	f3ef 8310 	mrs	r3, PRIMASK
 800c606:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c608:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c60a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c60c:	b672      	cpsid	i
    return(int_posture);
 800c60e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c610:	637b      	str	r3, [r7, #52]	; 0x34
 800c612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c614:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f383 8810 	msr	PRIMASK, r3
}
 800c61c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c61e:	bf00      	nop
 800c620:	3738      	adds	r7, #56	; 0x38
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	0800c53d 	.word	0x0800c53d
 800c62c:	53454d41 	.word	0x53454d41
 800c630:	2000176c 	.word	0x2000176c

0800c634 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b092      	sub	sp, #72	; 0x48
 800c638:	af02      	add	r7, sp, #8
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800c640:	221c      	movs	r2, #28
 800c642:	2100      	movs	r1, #0
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f008 fb9b 	bl	8014d80 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c656:	f3ef 8310 	mrs	r3, PRIMASK
 800c65a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c65e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c660:	b672      	cpsid	i
    return(int_posture);
 800c662:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800c664:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	4a56      	ldr	r2, [pc, #344]	; (800c7c4 <_tx_semaphore_create+0x190>)
 800c66a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800c66c:	4b56      	ldr	r3, [pc, #344]	; (800c7c8 <_tx_semaphore_create+0x194>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d109      	bne.n	800c688 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800c674:	4a55      	ldr	r2, [pc, #340]	; (800c7cc <_tx_semaphore_create+0x198>)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	619a      	str	r2, [r3, #24]
 800c686:	e011      	b.n	800c6ac <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800c688:	4b50      	ldr	r3, [pc, #320]	; (800c7cc <_tx_semaphore_create+0x198>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	617b      	str	r3, [r7, #20]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	68fa      	ldr	r2, [r7, #12]
 800c698:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6a4:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800c6a6:	697a      	ldr	r2, [r7, #20]
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800c6ac:	4b46      	ldr	r3, [pc, #280]	; (800c7c8 <_tx_semaphore_create+0x194>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	4a45      	ldr	r2, [pc, #276]	; (800c7c8 <_tx_semaphore_create+0x194>)
 800c6b4:	6013      	str	r3, [r2, #0]

    /* Optional semaphore create extended processing.  */
    TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, name_ptr, initial_count, 0)
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	68ba      	ldr	r2, [r7, #8]
 800c6be:	68f9      	ldr	r1, [r7, #12]
 800c6c0:	2004      	movs	r0, #4
 800c6c2:	f001 fc17 	bl	800def4 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CREATE, semaphore_ptr, initial_count, TX_POINTER_TO_ULONG_CONVERT(&next_semaphore), 0, TX_TRACE_SEMAPHORE_EVENTS)
 800c6c6:	4b42      	ldr	r3, [pc, #264]	; (800c7d0 <_tx_semaphore_create+0x19c>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d06c      	beq.n	800c7ac <_tx_semaphore_create+0x178>
 800c6d2:	4b40      	ldr	r3, [pc, #256]	; (800c7d4 <_tx_semaphore_create+0x1a0>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d066      	beq.n	800c7ac <_tx_semaphore_create+0x178>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c6de:	f3ef 8305 	mrs	r3, IPSR
 800c6e2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c6e4:	69fa      	ldr	r2, [r7, #28]
 800c6e6:	4b3c      	ldr	r3, [pc, #240]	; (800c7d8 <_tx_semaphore_create+0x1a4>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6ee:	4b3b      	ldr	r3, [pc, #236]	; (800c7dc <_tx_semaphore_create+0x1a8>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d10b      	bne.n	800c712 <_tx_semaphore_create+0xde>
 800c6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c704:	041a      	lsls	r2, r3, #16
 800c706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c708:	4313      	orrs	r3, r2
 800c70a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c70e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c710:	e00e      	b.n	800c730 <_tx_semaphore_create+0xfc>
 800c712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c714:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c718:	d205      	bcs.n	800c726 <_tx_semaphore_create+0xf2>
 800c71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c71e:	f04f 33ff 	mov.w	r3, #4294967295
 800c722:	63bb      	str	r3, [r7, #56]	; 0x38
 800c724:	e004      	b.n	800c730 <_tx_semaphore_create+0xfc>
 800c726:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c72a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c72c:	2300      	movs	r3, #0
 800c72e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c734:	601a      	str	r2, [r3, #0]
 800c736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c738:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c73a:	605a      	str	r2, [r3, #4]
 800c73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73e:	2251      	movs	r2, #81	; 0x51
 800c740:	609a      	str	r2, [r3, #8]
 800c742:	4b27      	ldr	r3, [pc, #156]	; (800c7e0 <_tx_semaphore_create+0x1ac>)
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c748:	60da      	str	r2, [r3, #12]
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74e:	611a      	str	r2, [r3, #16]
 800c750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	615a      	str	r2, [r3, #20]
 800c756:	f107 0214 	add.w	r2, r7, #20
 800c75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75c:	619a      	str	r2, [r3, #24]
 800c75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c760:	2200      	movs	r2, #0
 800c762:	61da      	str	r2, [r3, #28]
 800c764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c766:	3320      	adds	r3, #32
 800c768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c76a:	4b1e      	ldr	r3, [pc, #120]	; (800c7e4 <_tx_semaphore_create+0x1b0>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c770:	429a      	cmp	r2, r3
 800c772:	d314      	bcc.n	800c79e <_tx_semaphore_create+0x16a>
 800c774:	4b1c      	ldr	r3, [pc, #112]	; (800c7e8 <_tx_semaphore_create+0x1b4>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c77a:	4a15      	ldr	r2, [pc, #84]	; (800c7d0 <_tx_semaphore_create+0x19c>)
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	6013      	str	r3, [r2, #0]
 800c780:	4b1a      	ldr	r3, [pc, #104]	; (800c7ec <_tx_semaphore_create+0x1b8>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c786:	621a      	str	r2, [r3, #32]
 800c788:	4b19      	ldr	r3, [pc, #100]	; (800c7f0 <_tx_semaphore_create+0x1bc>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00d      	beq.n	800c7ac <_tx_semaphore_create+0x178>
 800c790:	4b17      	ldr	r3, [pc, #92]	; (800c7f0 <_tx_semaphore_create+0x1bc>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a15      	ldr	r2, [pc, #84]	; (800c7ec <_tx_semaphore_create+0x1b8>)
 800c796:	6812      	ldr	r2, [r2, #0]
 800c798:	4610      	mov	r0, r2
 800c79a:	4798      	blx	r3
 800c79c:	e006      	b.n	800c7ac <_tx_semaphore_create+0x178>
 800c79e:	4a0c      	ldr	r2, [pc, #48]	; (800c7d0 <_tx_semaphore_create+0x19c>)
 800c7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a2:	6013      	str	r3, [r2, #0]
 800c7a4:	4b11      	ldr	r3, [pc, #68]	; (800c7ec <_tx_semaphore_create+0x1b8>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7aa:	621a      	str	r2, [r3, #32]
 800c7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ae:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	f383 8810 	msr	PRIMASK, r3
}
 800c7b6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3740      	adds	r7, #64	; 0x40
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	53454d41 	.word	0x53454d41
 800c7c8:	200016a0 	.word	0x200016a0
 800c7cc:	2000169c 	.word	0x2000169c
 800c7d0:	20001cf0 	.word	0x20001cf0
 800c7d4:	20001cf4 	.word	0x20001cf4
 800c7d8:	2000000c 	.word	0x2000000c
 800c7dc:	200016d4 	.word	0x200016d4
 800c7e0:	e0001004 	.word	0xe0001004
 800c7e4:	20001cec 	.word	0x20001cec
 800c7e8:	20001ce8 	.word	0x20001ce8
 800c7ec:	20001cdc 	.word	0x20001cdc
 800c7f0:	20001cf8 	.word	0x20001cf8

0800c7f4 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b092      	sub	sp, #72	; 0x48
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c7fe:	2300      	movs	r3, #0
 800c800:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c802:	f3ef 8310 	mrs	r3, PRIMASK
 800c806:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c80a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c80c:	b672      	cpsid	i
    return(int_posture);
 800c80e:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800c810:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of attempts to get this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_get_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_GET, semaphore_ptr, wait_option, semaphore_ptr -> tx_semaphore_count, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_SEMAPHORE_EVENTS)
 800c812:	4b78      	ldr	r3, [pc, #480]	; (800c9f4 <_tx_semaphore_get+0x200>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	637b      	str	r3, [r7, #52]	; 0x34
 800c818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d06d      	beq.n	800c8fa <_tx_semaphore_get+0x106>
 800c81e:	4b76      	ldr	r3, [pc, #472]	; (800c9f8 <_tx_semaphore_get+0x204>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c826:	2b00      	cmp	r3, #0
 800c828:	d067      	beq.n	800c8fa <_tx_semaphore_get+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c82a:	f3ef 8305 	mrs	r3, IPSR
 800c82e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c830:	69fa      	ldr	r2, [r7, #28]
 800c832:	4b72      	ldr	r3, [pc, #456]	; (800c9fc <_tx_semaphore_get+0x208>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4313      	orrs	r3, r2
 800c838:	633b      	str	r3, [r7, #48]	; 0x30
 800c83a:	4b71      	ldr	r3, [pc, #452]	; (800ca00 <_tx_semaphore_get+0x20c>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c842:	2b00      	cmp	r3, #0
 800c844:	d10b      	bne.n	800c85e <_tx_semaphore_get+0x6a>
 800c846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84a:	643b      	str	r3, [r7, #64]	; 0x40
 800c84c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c84e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c850:	041a      	lsls	r2, r3, #16
 800c852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c854:	4313      	orrs	r3, r2
 800c856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c85a:	643b      	str	r3, [r7, #64]	; 0x40
 800c85c:	e00e      	b.n	800c87c <_tx_semaphore_get+0x88>
 800c85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c860:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c864:	d205      	bcs.n	800c872 <_tx_semaphore_get+0x7e>
 800c866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c868:	643b      	str	r3, [r7, #64]	; 0x40
 800c86a:	f04f 33ff 	mov.w	r3, #4294967295
 800c86e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c870:	e004      	b.n	800c87c <_tx_semaphore_get+0x88>
 800c872:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c876:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c878:	2300      	movs	r3, #0
 800c87a:	643b      	str	r3, [r7, #64]	; 0x40
 800c87c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c880:	601a      	str	r2, [r3, #0]
 800c882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c886:	605a      	str	r2, [r3, #4]
 800c888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88a:	2253      	movs	r2, #83	; 0x53
 800c88c:	609a      	str	r2, [r3, #8]
 800c88e:	4b5d      	ldr	r3, [pc, #372]	; (800ca04 <_tx_semaphore_get+0x210>)
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c894:	60da      	str	r2, [r3, #12]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c89a:	611a      	str	r2, [r3, #16]
 800c89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c89e:	683a      	ldr	r2, [r7, #0]
 800c8a0:	615a      	str	r2, [r3, #20]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	689a      	ldr	r2, [r3, #8]
 800c8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a8:	619a      	str	r2, [r3, #24]
 800c8aa:	f107 0208 	add.w	r2, r7, #8
 800c8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b0:	61da      	str	r2, [r3, #28]
 800c8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b4:	3320      	adds	r3, #32
 800c8b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c8b8:	4b53      	ldr	r3, [pc, #332]	; (800ca08 <_tx_semaphore_get+0x214>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d314      	bcc.n	800c8ec <_tx_semaphore_get+0xf8>
 800c8c2:	4b52      	ldr	r3, [pc, #328]	; (800ca0c <_tx_semaphore_get+0x218>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	637b      	str	r3, [r7, #52]	; 0x34
 800c8c8:	4a4a      	ldr	r2, [pc, #296]	; (800c9f4 <_tx_semaphore_get+0x200>)
 800c8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8cc:	6013      	str	r3, [r2, #0]
 800c8ce:	4b50      	ldr	r3, [pc, #320]	; (800ca10 <_tx_semaphore_get+0x21c>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8d4:	621a      	str	r2, [r3, #32]
 800c8d6:	4b4f      	ldr	r3, [pc, #316]	; (800ca14 <_tx_semaphore_get+0x220>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d00d      	beq.n	800c8fa <_tx_semaphore_get+0x106>
 800c8de:	4b4d      	ldr	r3, [pc, #308]	; (800ca14 <_tx_semaphore_get+0x220>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a4b      	ldr	r2, [pc, #300]	; (800ca10 <_tx_semaphore_get+0x21c>)
 800c8e4:	6812      	ldr	r2, [r2, #0]
 800c8e6:	4610      	mov	r0, r2
 800c8e8:	4798      	blx	r3
 800c8ea:	e006      	b.n	800c8fa <_tx_semaphore_get+0x106>
 800c8ec:	4a41      	ldr	r2, [pc, #260]	; (800c9f4 <_tx_semaphore_get+0x200>)
 800c8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8f0:	6013      	str	r3, [r2, #0]
 800c8f2:	4b47      	ldr	r3, [pc, #284]	; (800ca10 <_tx_semaphore_get+0x21c>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8f8:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00a      	beq.n	800c918 <_tx_semaphore_get+0x124>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	1e5a      	subs	r2, r3, #1
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	609a      	str	r2, [r3, #8]
 800c90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	f383 8810 	msr	PRIMASK, r3
}
 800c916:	e068      	b.n	800c9ea <_tx_semaphore_get+0x1f6>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d05d      	beq.n	800c9da <_tx_semaphore_get+0x1e6>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c91e:	4b3e      	ldr	r3, [pc, #248]	; (800ca18 <_tx_semaphore_get+0x224>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d008      	beq.n	800c938 <_tx_semaphore_get+0x144>
 800c926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c928:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f383 8810 	msr	PRIMASK, r3
}
 800c930:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800c932:	230d      	movs	r3, #13
 800c934:	647b      	str	r3, [r7, #68]	; 0x44
 800c936:	e058      	b.n	800c9ea <_tx_semaphore_get+0x1f6>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c938:	4b31      	ldr	r3, [pc, #196]	; (800ca00 <_tx_semaphore_get+0x20c>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	60bb      	str	r3, [r7, #8]

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	4a36      	ldr	r2, [pc, #216]	; (800ca1c <_tx_semaphore_get+0x228>)
 800c942:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c950:	3201      	adds	r2, #1
 800c952:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	691b      	ldr	r3, [r3, #16]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d109      	bne.n	800c972 <_tx_semaphore_get+0x17e>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	68ba      	ldr	r2, [r7, #8]
 800c968:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	675a      	str	r2, [r3, #116]	; 0x74
 800c970:	e011      	b.n	800c996 <_tx_semaphore_get+0x1a2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c97c:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c982:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c988:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c98a:	68ba      	ldr	r2, [r7, #8]
 800c98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98e:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c990:	68ba      	ldr	r2, [r7, #8]
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	1c5a      	adds	r2, r3, #1
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	2206      	movs	r2, #6
 800c9a4:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	683a      	ldr	r2, [r7, #0]
 800c9b0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c9b2:	4b19      	ldr	r3, [pc, #100]	; (800ca18 <_tx_semaphore_get+0x224>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	4a17      	ldr	r2, [pc, #92]	; (800ca18 <_tx_semaphore_get+0x224>)
 800c9ba:	6013      	str	r3, [r2, #0]
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	f383 8810 	msr	PRIMASK, r3
}
 800c9c6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f000 fd2a 	bl	800d424 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9d6:	647b      	str	r3, [r7, #68]	; 0x44
 800c9d8:	e007      	b.n	800c9ea <_tx_semaphore_get+0x1f6>
 800c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9dc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f383 8810 	msr	PRIMASK, r3
}
 800c9e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800c9e6:	230d      	movs	r3, #13
 800c9e8:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800c9ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3748      	adds	r7, #72	; 0x48
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	20001cf0 	.word	0x20001cf0
 800c9f8:	20001cf4 	.word	0x20001cf4
 800c9fc:	2000000c 	.word	0x2000000c
 800ca00:	200016d4 	.word	0x200016d4
 800ca04:	e0001004 	.word	0xe0001004
 800ca08:	20001cec 	.word	0x20001cec
 800ca0c:	20001ce8 	.word	0x20001ce8
 800ca10:	20001cdc 	.word	0x20001cdc
 800ca14:	20001cf8 	.word	0x20001cf8
 800ca18:	2000176c 	.word	0x2000176c
 800ca1c:	0800c53d 	.word	0x0800c53d

0800ca20 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b09a      	sub	sp, #104	; 0x68
 800ca24:	af02      	add	r7, sp, #8
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
 800ca2c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800ca2e:	2300      	movs	r3, #0
 800ca30:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800ca32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca34:	21ef      	movs	r1, #239	; 0xef
 800ca36:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800ca38:	f008 f9a2 	bl	8014d80 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800ca3c:	22b0      	movs	r2, #176	; 0xb0
 800ca3e:	2100      	movs	r1, #0
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f008 f99d 	bl	8014d80 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	683a      	ldr	r2, [r7, #0]
 800ca56:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca5c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca62:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ca68:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ca6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ca76:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ca7c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2220      	movs	r2, #32
 800ca82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800ca86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca88:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800ca8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca90:	4413      	add	r3, r2
 800ca92:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca98:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800ca9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ca9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d007      	beq.n	800cab2 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2200      	movs	r2, #0
 800caa6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2200      	movs	r2, #0
 800caac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800cab0:	e006      	b.n	800cac0 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cab6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cabc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2203      	movs	r2, #3
 800cac4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	4a86      	ldr	r2, [pc, #536]	; (800cce4 <_tx_thread_create+0x2c4>)
 800caca:	655a      	str	r2, [r3, #84]	; 0x54
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800cad2:	4985      	ldr	r1, [pc, #532]	; (800cce8 <_tx_thread_create+0x2c8>)
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f7f3 fc79 	bl	80003cc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cada:	f3ef 8310 	mrs	r3, PRIMASK
 800cade:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800cae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800cae2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800cae4:	b672      	cpsid	i
    return(int_posture);
 800cae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800cae8:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	4a7f      	ldr	r2, [pc, #508]	; (800ccec <_tx_thread_create+0x2cc>)
 800caee:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800caf0:	4b7f      	ldr	r3, [pc, #508]	; (800ccf0 <_tx_thread_create+0x2d0>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d10b      	bne.n	800cb10 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800caf8:	4a7e      	ldr	r2, [pc, #504]	; (800ccf4 <_tx_thread_create+0x2d4>)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800cb0e:	e016      	b.n	800cb3e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800cb10:	4b78      	ldr	r3, [pc, #480]	; (800ccf4 <_tx_thread_create+0x2d4>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 800cb16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb1c:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800cb1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb20:	68fa      	ldr	r2, [r7, #12]
 800cb22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800cb26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800cb3e:	4b6c      	ldr	r3, [pc, #432]	; (800ccf0 <_tx_thread_create+0x2d0>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3301      	adds	r3, #1
 800cb44:	4a6a      	ldr	r2, [pc, #424]	; (800ccf0 <_tx_thread_create+0x2d0>)
 800cb46:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 800cb48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cb4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb4c:	9300      	str	r3, [sp, #0]
 800cb4e:	4613      	mov	r3, r2
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	68f9      	ldr	r1, [r7, #12]
 800cb54:	2001      	movs	r0, #1
 800cb56:	f001 f9cd 	bl	800def4 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 800cb5a:	4b67      	ldr	r3, [pc, #412]	; (800ccf8 <_tx_thread_create+0x2d8>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d06b      	beq.n	800cc3e <_tx_thread_create+0x21e>
 800cb66:	4b65      	ldr	r3, [pc, #404]	; (800ccfc <_tx_thread_create+0x2dc>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d065      	beq.n	800cc3e <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cb72:	f3ef 8305 	mrs	r3, IPSR
 800cb76:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800cb78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb7a:	4b61      	ldr	r3, [pc, #388]	; (800cd00 <_tx_thread_create+0x2e0>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb82:	4b60      	ldr	r3, [pc, #384]	; (800cd04 <_tx_thread_create+0x2e4>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	653b      	str	r3, [r7, #80]	; 0x50
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d10b      	bne.n	800cba6 <_tx_thread_create+0x186>
 800cb8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb92:	657b      	str	r3, [r7, #84]	; 0x54
 800cb94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb98:	041a      	lsls	r2, r3, #16
 800cb9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cba2:	657b      	str	r3, [r7, #84]	; 0x54
 800cba4:	e00e      	b.n	800cbc4 <_tx_thread_create+0x1a4>
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cbac:	d205      	bcs.n	800cbba <_tx_thread_create+0x19a>
 800cbae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbb0:	657b      	str	r3, [r7, #84]	; 0x54
 800cbb2:	f04f 33ff 	mov.w	r3, #4294967295
 800cbb6:	653b      	str	r3, [r7, #80]	; 0x50
 800cbb8:	e004      	b.n	800cbc4 <_tx_thread_create+0x1a4>
 800cbba:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cbbe:	653b      	str	r3, [r7, #80]	; 0x50
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	657b      	str	r3, [r7, #84]	; 0x54
 800cbc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbc8:	601a      	str	r2, [r3, #0]
 800cbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cbce:	605a      	str	r2, [r3, #4]
 800cbd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbd2:	2264      	movs	r2, #100	; 0x64
 800cbd4:	609a      	str	r2, [r3, #8]
 800cbd6:	4b4c      	ldr	r3, [pc, #304]	; (800cd08 <_tx_thread_create+0x2e8>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbdc:	60da      	str	r2, [r3, #12]
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe2:	611a      	str	r2, [r3, #16]
 800cbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cbe8:	615a      	str	r2, [r3, #20]
 800cbea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cbec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbee:	619a      	str	r2, [r3, #24]
 800cbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cbf4:	61da      	str	r2, [r3, #28]
 800cbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf8:	3320      	adds	r3, #32
 800cbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbfc:	4b43      	ldr	r3, [pc, #268]	; (800cd0c <_tx_thread_create+0x2ec>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d314      	bcc.n	800cc30 <_tx_thread_create+0x210>
 800cc06:	4b42      	ldr	r3, [pc, #264]	; (800cd10 <_tx_thread_create+0x2f0>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc0c:	4a3a      	ldr	r2, [pc, #232]	; (800ccf8 <_tx_thread_create+0x2d8>)
 800cc0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc10:	6013      	str	r3, [r2, #0]
 800cc12:	4b40      	ldr	r3, [pc, #256]	; (800cd14 <_tx_thread_create+0x2f4>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc18:	621a      	str	r2, [r3, #32]
 800cc1a:	4b3f      	ldr	r3, [pc, #252]	; (800cd18 <_tx_thread_create+0x2f8>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00d      	beq.n	800cc3e <_tx_thread_create+0x21e>
 800cc22:	4b3d      	ldr	r3, [pc, #244]	; (800cd18 <_tx_thread_create+0x2f8>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a3b      	ldr	r2, [pc, #236]	; (800cd14 <_tx_thread_create+0x2f4>)
 800cc28:	6812      	ldr	r2, [r2, #0]
 800cc2a:	4610      	mov	r0, r2
 800cc2c:	4798      	blx	r3
 800cc2e:	e006      	b.n	800cc3e <_tx_thread_create+0x21e>
 800cc30:	4a31      	ldr	r2, [pc, #196]	; (800ccf8 <_tx_thread_create+0x2d8>)
 800cc32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc34:	6013      	str	r3, [r2, #0]
 800cc36:	4b37      	ldr	r3, [pc, #220]	; (800cd14 <_tx_thread_create+0x2f4>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc3c:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cc3e:	4b37      	ldr	r3, [pc, #220]	; (800cd1c <_tx_thread_create+0x2fc>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	3301      	adds	r3, #1
 800cc44:	4a35      	ldr	r2, [pc, #212]	; (800cd1c <_tx_thread_create+0x2fc>)
 800cc46:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800cc48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d129      	bne.n	800cca2 <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cc4e:	f3ef 8305 	mrs	r3, IPSR
 800cc52:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800cc54:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800cc56:	4b2a      	ldr	r3, [pc, #168]	; (800cd00 <_tx_thread_create+0x2e0>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cc60:	d30d      	bcc.n	800cc7e <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800cc62:	4b2f      	ldr	r3, [pc, #188]	; (800cd20 <_tx_thread_create+0x300>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800cc68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d009      	beq.n	800cc82 <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800cc6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc72:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800cc74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc7a:	63da      	str	r2, [r3, #60]	; 0x3c
 800cc7c:	e001      	b.n	800cc82 <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc84:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc88:	f383 8810 	msr	PRIMASK, r3
}
 800cc8c:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f000 fa0e 	bl	800d0b0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800cc94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d01e      	beq.n	800ccd8 <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800cc9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc9e:	63da      	str	r2, [r3, #60]	; 0x3c
 800cca0:	e01a      	b.n	800ccd8 <_tx_thread_create+0x2b8>
 800cca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cca4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	f383 8810 	msr	PRIMASK, r3
}
 800ccac:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ccae:	f3ef 8310 	mrs	r3, PRIMASK
 800ccb2:	61fb      	str	r3, [r7, #28]
    return(posture);
 800ccb4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800ccb6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ccb8:	b672      	cpsid	i
    return(int_posture);
 800ccba:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800ccbc:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800ccbe:	4b17      	ldr	r3, [pc, #92]	; (800cd1c <_tx_thread_create+0x2fc>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	3b01      	subs	r3, #1
 800ccc4:	4a15      	ldr	r2, [pc, #84]	; (800cd1c <_tx_thread_create+0x2fc>)
 800ccc6:	6013      	str	r3, [r2, #0]
 800ccc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccca:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cccc:	6a3b      	ldr	r3, [r7, #32]
 800ccce:	f383 8810 	msr	PRIMASK, r3
}
 800ccd2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ccd4:	f000 f9b2 	bl	800d03c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3760      	adds	r7, #96	; 0x60
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	0800d9c5 	.word	0x0800d9c5
 800cce8:	0800cda1 	.word	0x0800cda1
 800ccec:	54485244 	.word	0x54485244
 800ccf0:	200016e0 	.word	0x200016e0
 800ccf4:	200016dc 	.word	0x200016dc
 800ccf8:	20001cf0 	.word	0x20001cf0
 800ccfc:	20001cf4 	.word	0x20001cf4
 800cd00:	2000000c 	.word	0x2000000c
 800cd04:	200016d4 	.word	0x200016d4
 800cd08:	e0001004 	.word	0xe0001004
 800cd0c:	20001cec 	.word	0x20001cec
 800cd10:	20001ce8 	.word	0x20001ce8
 800cd14:	20001cdc 	.word	0x20001cdc
 800cd18:	20001cf8 	.word	0x20001cf8
 800cd1c:	2000176c 	.word	0x2000176c
 800cd20:	200016d8 	.word	0x200016d8

0800cd24 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800cd28:	4b13      	ldr	r3, [pc, #76]	; (800cd78 <_tx_thread_initialize+0x54>)
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800cd2e:	4b13      	ldr	r3, [pc, #76]	; (800cd7c <_tx_thread_initialize+0x58>)
 800cd30:	2200      	movs	r2, #0
 800cd32:	601a      	str	r2, [r3, #0]
 800cd34:	4b12      	ldr	r3, [pc, #72]	; (800cd80 <_tx_thread_initialize+0x5c>)
 800cd36:	2200      	movs	r2, #0
 800cd38:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cd3a:	4b12      	ldr	r3, [pc, #72]	; (800cd84 <_tx_thread_initialize+0x60>)
 800cd3c:	2220      	movs	r2, #32
 800cd3e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800cd40:	2280      	movs	r2, #128	; 0x80
 800cd42:	2100      	movs	r1, #0
 800cd44:	4810      	ldr	r0, [pc, #64]	; (800cd88 <_tx_thread_initialize+0x64>)
 800cd46:	f008 f81b 	bl	8014d80 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800cd4a:	4b10      	ldr	r3, [pc, #64]	; (800cd8c <_tx_thread_initialize+0x68>)
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800cd50:	4b0f      	ldr	r3, [pc, #60]	; (800cd90 <_tx_thread_initialize+0x6c>)
 800cd52:	2200      	movs	r2, #0
 800cd54:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800cd56:	4b0f      	ldr	r3, [pc, #60]	; (800cd94 <_tx_thread_initialize+0x70>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800cd5c:	4b0e      	ldr	r3, [pc, #56]	; (800cd98 <_tx_thread_initialize+0x74>)
 800cd5e:	2200      	movs	r2, #0
 800cd60:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 800cd62:	4b0e      	ldr	r3, [pc, #56]	; (800cd9c <_tx_thread_initialize+0x78>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 800cd6a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 800cd6e:	4a0b      	ldr	r2, [pc, #44]	; (800cd9c <_tx_thread_initialize+0x78>)
 800cd70:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800cd72:	bf00      	nop
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	200016d4 	.word	0x200016d4
 800cd7c:	200016d8 	.word	0x200016d8
 800cd80:	200016e4 	.word	0x200016e4
 800cd84:	200016e8 	.word	0x200016e8
 800cd88:	200016ec 	.word	0x200016ec
 800cd8c:	200016dc 	.word	0x200016dc
 800cd90:	200016e0 	.word	0x200016e0
 800cd94:	2000176c 	.word	0x2000176c
 800cd98:	20001770 	.word	0x20001770
 800cd9c:	20001774 	.word	0x20001774

0800cda0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b088      	sub	sp, #32
 800cda4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cda6:	4b21      	ldr	r3, [pc, #132]	; (800ce2c <_tx_thread_shell_entry+0x8c>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdb0:	69fa      	ldr	r2, [r7, #28]
 800cdb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800cdb8:	4b1d      	ldr	r3, [pc, #116]	; (800ce30 <_tx_thread_shell_entry+0x90>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d003      	beq.n	800cdc8 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800cdc0:	4b1b      	ldr	r3, [pc, #108]	; (800ce30 <_tx_thread_shell_entry+0x90>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	69f8      	ldr	r0, [r7, #28]
 800cdc6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdc8:	f3ef 8310 	mrs	r3, PRIMASK
 800cdcc:	607b      	str	r3, [r7, #4]
    return(posture);
 800cdce:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800cdd0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cdd2:	b672      	cpsid	i
    return(int_posture);
 800cdd4:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800cdd6:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	2201      	movs	r2, #1
 800cddc:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	2201      	movs	r2, #1
 800cde2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	2200      	movs	r2, #0
 800cde8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cdea:	4b12      	ldr	r3, [pc, #72]	; (800ce34 <_tx_thread_shell_entry+0x94>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	4a10      	ldr	r2, [pc, #64]	; (800ce34 <_tx_thread_shell_entry+0x94>)
 800cdf2:	6013      	str	r3, [r2, #0]
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	f383 8810 	msr	PRIMASK, r3
}
 800cdfe:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800ce00:	f3ef 8314 	mrs	r3, CONTROL
 800ce04:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800ce06:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800ce08:	617b      	str	r3, [r7, #20]
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	f023 0304 	bic.w	r3, r3, #4
 800ce10:	617b      	str	r3, [r7, #20]
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	f383 8814 	msr	CONTROL, r3
}
 800ce1c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800ce1e:	69f8      	ldr	r0, [r7, #28]
 800ce20:	f000 fb00 	bl	800d424 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800ce24:	bf00      	nop
 800ce26:	3720      	adds	r7, #32
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	200016d4 	.word	0x200016d4
 800ce30:	20001770 	.word	0x20001770
 800ce34:	2000176c 	.word	0x2000176c

0800ce38 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b094      	sub	sp, #80	; 0x50
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce40:	f3ef 8310 	mrs	r3, PRIMASK
 800ce44:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800ce46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800ce48:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce4a:	b672      	cpsid	i
    return(int_posture);
 800ce4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800ce4e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ce50:	4b6f      	ldr	r3, [pc, #444]	; (800d010 <_tx_thread_sleep+0x1d8>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800ce56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d108      	bne.n	800ce6e <_tx_thread_sleep+0x36>
 800ce5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce62:	f383 8810 	msr	PRIMASK, r3
}
 800ce66:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800ce68:	2313      	movs	r3, #19
 800ce6a:	60fb      	str	r3, [r7, #12]
 800ce6c:	e0ca      	b.n	800d004 <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce6e:	f3ef 8305 	mrs	r3, IPSR
 800ce72:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800ce74:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ce76:	4b67      	ldr	r3, [pc, #412]	; (800d014 <_tx_thread_sleep+0x1dc>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d008      	beq.n	800ce92 <_tx_thread_sleep+0x5a>
 800ce80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce82:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce86:	f383 8810 	msr	PRIMASK, r3
}
 800ce8a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800ce8c:	2313      	movs	r3, #19
 800ce8e:	60fb      	str	r3, [r7, #12]
 800ce90:	e0b8      	b.n	800d004 <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800ce92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce94:	4a60      	ldr	r2, [pc, #384]	; (800d018 <_tx_thread_sleep+0x1e0>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d108      	bne.n	800ceac <_tx_thread_sleep+0x74>
 800ce9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce9c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce9e:	6a3b      	ldr	r3, [r7, #32]
 800cea0:	f383 8810 	msr	PRIMASK, r3
}
 800cea4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cea6:	2313      	movs	r3, #19
 800cea8:	60fb      	str	r3, [r7, #12]
 800ceaa:	e0ab      	b.n	800d004 <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d108      	bne.n	800cec4 <_tx_thread_sleep+0x8c>
 800ceb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceb4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	f383 8810 	msr	PRIMASK, r3
}
 800cebc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800cebe:	2300      	movs	r3, #0
 800cec0:	60fb      	str	r3, [r7, #12]
 800cec2:	e09f      	b.n	800d004 <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800cec4:	4b55      	ldr	r3, [pc, #340]	; (800d01c <_tx_thread_sleep+0x1e4>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d008      	beq.n	800cede <_tx_thread_sleep+0xa6>
 800cecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cece:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	f383 8810 	msr	PRIMASK, r3
}
 800ced6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800ced8:	2313      	movs	r3, #19
 800ceda:	60fb      	str	r3, [r7, #12]
 800cedc:	e092      	b.n	800d004 <_tx_thread_sleep+0x1cc>
        }
        else
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 800cede:	4b50      	ldr	r3, [pc, #320]	; (800d020 <_tx_thread_sleep+0x1e8>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d06d      	beq.n	800cfc6 <_tx_thread_sleep+0x18e>
 800ceea:	4b4e      	ldr	r3, [pc, #312]	; (800d024 <_tx_thread_sleep+0x1ec>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d067      	beq.n	800cfc6 <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cef6:	f3ef 8305 	mrs	r3, IPSR
 800cefa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cefc:	697a      	ldr	r2, [r7, #20]
 800cefe:	4b45      	ldr	r3, [pc, #276]	; (800d014 <_tx_thread_sleep+0x1dc>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4313      	orrs	r3, r2
 800cf04:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf06:	4b42      	ldr	r3, [pc, #264]	; (800d010 <_tx_thread_sleep+0x1d8>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d10b      	bne.n	800cf2a <_tx_thread_sleep+0xf2>
 800cf12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf1c:	041a      	lsls	r2, r3, #16
 800cf1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf20:	4313      	orrs	r3, r2
 800cf22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf28:	e00e      	b.n	800cf48 <_tx_thread_sleep+0x110>
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cf30:	d205      	bcs.n	800cf3e <_tx_thread_sleep+0x106>
 800cf32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf36:	f04f 33ff 	mov.w	r3, #4294967295
 800cf3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf3c:	e004      	b.n	800cf48 <_tx_thread_sleep+0x110>
 800cf3e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cf42:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf44:	2300      	movs	r3, #0
 800cf46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf4c:	601a      	str	r2, [r3, #0]
 800cf4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf52:	605a      	str	r2, [r3, #4]
 800cf54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf56:	2270      	movs	r2, #112	; 0x70
 800cf58:	609a      	str	r2, [r3, #8]
 800cf5a:	4b33      	ldr	r3, [pc, #204]	; (800d028 <_tx_thread_sleep+0x1f0>)
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf60:	60da      	str	r2, [r3, #12]
 800cf62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	611a      	str	r2, [r3, #16]
 800cf68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf6e:	615a      	str	r2, [r3, #20]
 800cf70:	f107 020c 	add.w	r2, r7, #12
 800cf74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf76:	619a      	str	r2, [r3, #24]
 800cf78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	61da      	str	r2, [r3, #28]
 800cf7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf80:	3320      	adds	r3, #32
 800cf82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf84:	4b29      	ldr	r3, [pc, #164]	; (800d02c <_tx_thread_sleep+0x1f4>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d314      	bcc.n	800cfb8 <_tx_thread_sleep+0x180>
 800cf8e:	4b28      	ldr	r3, [pc, #160]	; (800d030 <_tx_thread_sleep+0x1f8>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf94:	4a22      	ldr	r2, [pc, #136]	; (800d020 <_tx_thread_sleep+0x1e8>)
 800cf96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf98:	6013      	str	r3, [r2, #0]
 800cf9a:	4b26      	ldr	r3, [pc, #152]	; (800d034 <_tx_thread_sleep+0x1fc>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cfa0:	621a      	str	r2, [r3, #32]
 800cfa2:	4b25      	ldr	r3, [pc, #148]	; (800d038 <_tx_thread_sleep+0x200>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00d      	beq.n	800cfc6 <_tx_thread_sleep+0x18e>
 800cfaa:	4b23      	ldr	r3, [pc, #140]	; (800d038 <_tx_thread_sleep+0x200>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a21      	ldr	r2, [pc, #132]	; (800d034 <_tx_thread_sleep+0x1fc>)
 800cfb0:	6812      	ldr	r2, [r2, #0]
 800cfb2:	4610      	mov	r0, r2
 800cfb4:	4798      	blx	r3
 800cfb6:	e006      	b.n	800cfc6 <_tx_thread_sleep+0x18e>
 800cfb8:	4a19      	ldr	r2, [pc, #100]	; (800d020 <_tx_thread_sleep+0x1e8>)
 800cfba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfbc:	6013      	str	r3, [r2, #0]
 800cfbe:	4b1d      	ldr	r3, [pc, #116]	; (800d034 <_tx_thread_sleep+0x1fc>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cfc4:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800cfc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfc8:	2204      	movs	r2, #4
 800cfca:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cfcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfce:	2201      	movs	r2, #1
 800cfd0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800cfd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800cfda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800cfe0:	4b0e      	ldr	r3, [pc, #56]	; (800d01c <_tx_thread_sleep+0x1e4>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	4a0d      	ldr	r2, [pc, #52]	; (800d01c <_tx_thread_sleep+0x1e4>)
 800cfe8:	6013      	str	r3, [r2, #0]
 800cfea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfec:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	f383 8810 	msr	PRIMASK, r3
}
 800cff4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800cff6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cff8:	f000 fa14 	bl	800d424 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800cffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d002:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Return completion status.  */
    return(status);
 800d004:	68fb      	ldr	r3, [r7, #12]
}
 800d006:	4618      	mov	r0, r3
 800d008:	3750      	adds	r7, #80	; 0x50
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	200016d4 	.word	0x200016d4
 800d014:	2000000c 	.word	0x2000000c
 800d018:	2000181c 	.word	0x2000181c
 800d01c:	2000176c 	.word	0x2000176c
 800d020:	20001cf0 	.word	0x20001cf0
 800d024:	20001cf4 	.word	0x20001cf4
 800d028:	e0001004 	.word	0xe0001004
 800d02c:	20001cec 	.word	0x20001cec
 800d030:	20001ce8 	.word	0x20001ce8
 800d034:	20001cdc 	.word	0x20001cdc
 800d038:	20001cf8 	.word	0x20001cf8

0800d03c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b089      	sub	sp, #36	; 0x24
 800d040:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d042:	4b17      	ldr	r3, [pc, #92]	; (800d0a0 <_tx_thread_system_preempt_check+0x64>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d121      	bne.n	800d092 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d04e:	4b15      	ldr	r3, [pc, #84]	; (800d0a4 <_tx_thread_system_preempt_check+0x68>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800d054:	4b14      	ldr	r3, [pc, #80]	; (800d0a8 <_tx_thread_system_preempt_check+0x6c>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800d05a:	69ba      	ldr	r2, [r7, #24]
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d017      	beq.n	800d092 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d062:	4b12      	ldr	r3, [pc, #72]	; (800d0ac <_tx_thread_system_preempt_check+0x70>)
 800d064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d068:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d06a:	f3ef 8305 	mrs	r3, IPSR
 800d06e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d070:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10c      	bne.n	800d090 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d076:	f3ef 8310 	mrs	r3, PRIMASK
 800d07a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d07c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800d07e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d080:	b662      	cpsie	i
}
 800d082:	bf00      	nop
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f383 8810 	msr	PRIMASK, r3
}
 800d08e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800d090:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800d092:	bf00      	nop
 800d094:	3724      	adds	r7, #36	; 0x24
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	2000176c 	.word	0x2000176c
 800d0a4:	200016d4 	.word	0x200016d4
 800d0a8:	200016d8 	.word	0x200016d8
 800d0ac:	e000ed04 	.word	0xe000ed04

0800d0b0 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b09e      	sub	sp, #120	; 0x78
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0bc:	f3ef 8310 	mrs	r3, PRIMASK
 800d0c0:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800d0c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800d0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d0c6:	b672      	cpsid	i
    return(int_posture);
 800d0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d0ca:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d005      	beq.n	800d0e0 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	334c      	adds	r3, #76	; 0x4c
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f000 fdaf 	bl	800dc3c <_tx_timer_system_deactivate>
 800d0de:	e002      	b.n	800d0e6 <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 800d0e6:	4b8b      	ldr	r3, [pc, #556]	; (800d314 <_tx_thread_system_resume+0x264>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d0ec:	4b89      	ldr	r3, [pc, #548]	; (800d314 <_tx_thread_system_resume+0x264>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	663b      	str	r3, [r7, #96]	; 0x60
 800d0f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d06f      	beq.n	800d1d8 <_tx_thread_system_resume+0x128>
 800d0f8:	4b87      	ldr	r3, [pc, #540]	; (800d318 <_tx_thread_system_resume+0x268>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f003 0301 	and.w	r3, r3, #1
 800d100:	2b00      	cmp	r3, #0
 800d102:	d069      	beq.n	800d1d8 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d104:	f3ef 8305 	mrs	r3, IPSR
 800d108:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 800d10a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d10c:	4b83      	ldr	r3, [pc, #524]	; (800d31c <_tx_thread_system_resume+0x26c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4313      	orrs	r3, r2
 800d112:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d114:	4b82      	ldr	r3, [pc, #520]	; (800d320 <_tx_thread_system_resume+0x270>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d11a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10b      	bne.n	800d138 <_tx_thread_system_resume+0x88>
 800d120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d124:	673b      	str	r3, [r7, #112]	; 0x70
 800d126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d12a:	041a      	lsls	r2, r3, #16
 800d12c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d12e:	4313      	orrs	r3, r2
 800d130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d134:	673b      	str	r3, [r7, #112]	; 0x70
 800d136:	e00e      	b.n	800d156 <_tx_thread_system_resume+0xa6>
 800d138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d13a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d13e:	d205      	bcs.n	800d14c <_tx_thread_system_resume+0x9c>
 800d140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d142:	673b      	str	r3, [r7, #112]	; 0x70
 800d144:	f04f 33ff 	mov.w	r3, #4294967295
 800d148:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d14a:	e004      	b.n	800d156 <_tx_thread_system_resume+0xa6>
 800d14c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d150:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d152:	2300      	movs	r3, #0
 800d154:	673b      	str	r3, [r7, #112]	; 0x70
 800d156:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d15a:	601a      	str	r2, [r3, #0]
 800d15c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d15e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d160:	605a      	str	r2, [r3, #4]
 800d162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d164:	2201      	movs	r2, #1
 800d166:	609a      	str	r2, [r3, #8]
 800d168:	4b6e      	ldr	r3, [pc, #440]	; (800d324 <_tx_thread_system_resume+0x274>)
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d16e:	60da      	str	r2, [r3, #12]
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d174:	611a      	str	r2, [r3, #16]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d17a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d17c:	615a      	str	r2, [r3, #20]
 800d17e:	f107 020c 	add.w	r2, r7, #12
 800d182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d184:	619a      	str	r2, [r3, #24]
 800d186:	4b68      	ldr	r3, [pc, #416]	; (800d328 <_tx_thread_system_resume+0x278>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	461a      	mov	r2, r3
 800d18c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d18e:	61da      	str	r2, [r3, #28]
 800d190:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d192:	3320      	adds	r3, #32
 800d194:	663b      	str	r3, [r7, #96]	; 0x60
 800d196:	4b65      	ldr	r3, [pc, #404]	; (800d32c <_tx_thread_system_resume+0x27c>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d314      	bcc.n	800d1ca <_tx_thread_system_resume+0x11a>
 800d1a0:	4b63      	ldr	r3, [pc, #396]	; (800d330 <_tx_thread_system_resume+0x280>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	663b      	str	r3, [r7, #96]	; 0x60
 800d1a6:	4a5b      	ldr	r2, [pc, #364]	; (800d314 <_tx_thread_system_resume+0x264>)
 800d1a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1aa:	6013      	str	r3, [r2, #0]
 800d1ac:	4b61      	ldr	r3, [pc, #388]	; (800d334 <_tx_thread_system_resume+0x284>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d1b2:	621a      	str	r2, [r3, #32]
 800d1b4:	4b60      	ldr	r3, [pc, #384]	; (800d338 <_tx_thread_system_resume+0x288>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d00d      	beq.n	800d1d8 <_tx_thread_system_resume+0x128>
 800d1bc:	4b5e      	ldr	r3, [pc, #376]	; (800d338 <_tx_thread_system_resume+0x288>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a5c      	ldr	r2, [pc, #368]	; (800d334 <_tx_thread_system_resume+0x284>)
 800d1c2:	6812      	ldr	r2, [r2, #0]
 800d1c4:	4610      	mov	r0, r2
 800d1c6:	4798      	blx	r3
 800d1c8:	e006      	b.n	800d1d8 <_tx_thread_system_resume+0x128>
 800d1ca:	4a52      	ldr	r2, [pc, #328]	; (800d314 <_tx_thread_system_resume+0x264>)
 800d1cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1ce:	6013      	str	r3, [r2, #0]
 800d1d0:	4b58      	ldr	r3, [pc, #352]	; (800d334 <_tx_thread_system_resume+0x284>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d1d6:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 800d1d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d002      	beq.n	800d1e4 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d1de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d1e4:	4b55      	ldr	r3, [pc, #340]	; (800d33c <_tx_thread_system_resume+0x28c>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	4a54      	ldr	r2, [pc, #336]	; (800d33c <_tx_thread_system_resume+0x28c>)
 800d1ec:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	f040 80b3 	bne.w	800d35e <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f000 80c7 	beq.w	800d390 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d206:	2b00      	cmp	r3, #0
 800d208:	f040 80a2 	bne.w	800d350 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d216:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800d218:	4a49      	ldr	r2, [pc, #292]	; (800d340 <_tx_thread_system_resume+0x290>)
 800d21a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d220:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 800d222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d224:	2b00      	cmp	r3, #0
 800d226:	d164      	bne.n	800d2f2 <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800d228:	4945      	ldr	r1, [pc, #276]	; (800d340 <_tx_thread_system_resume+0x290>)
 800d22a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d22c:	687a      	ldr	r2, [r7, #4]
 800d22e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d23e:	2201      	movs	r2, #1
 800d240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d242:	fa02 f303 	lsl.w	r3, r2, r3
 800d246:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d248:	4b3e      	ldr	r3, [pc, #248]	; (800d344 <_tx_thread_system_resume+0x294>)
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d24e:	4313      	orrs	r3, r2
 800d250:	4a3c      	ldr	r2, [pc, #240]	; (800d344 <_tx_thread_system_resume+0x294>)
 800d252:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d254:	4b3c      	ldr	r3, [pc, #240]	; (800d348 <_tx_thread_system_resume+0x298>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d25a:	429a      	cmp	r2, r3
 800d25c:	f080 8098 	bcs.w	800d390 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d260:	4a39      	ldr	r2, [pc, #228]	; (800d348 <_tx_thread_system_resume+0x298>)
 800d262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d264:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d266:	4b30      	ldr	r3, [pc, #192]	; (800d328 <_tx_thread_system_resume+0x278>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d103      	bne.n	800d27a <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d272:	4a2d      	ldr	r2, [pc, #180]	; (800d328 <_tx_thread_system_resume+0x278>)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6013      	str	r3, [r2, #0]
 800d278:	e08a      	b.n	800d390 <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d27e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d280:	429a      	cmp	r2, r3
 800d282:	f080 8085 	bcs.w	800d390 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d286:	4a28      	ldr	r2, [pc, #160]	; (800d328 <_tx_thread_system_resume+0x278>)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 800d28c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d009      	beq.n	800d2a6 <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d292:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d298:	429a      	cmp	r2, r3
 800d29a:	d104      	bne.n	800d2a6 <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d29c:	4b22      	ldr	r3, [pc, #136]	; (800d328 <_tx_thread_system_resume+0x278>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2a4:	61da      	str	r2, [r3, #28]
 800d2a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2a8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ac:	f383 8810 	msr	PRIMASK, r3
}
 800d2b0:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d2b2:	4b22      	ldr	r3, [pc, #136]	; (800d33c <_tx_thread_system_resume+0x28c>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 800d2b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f040 80a1 	bne.w	800d402 <_tx_thread_system_resume+0x352>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d2c0:	4b22      	ldr	r3, [pc, #136]	; (800d34c <_tx_thread_system_resume+0x29c>)
 800d2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2c6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2c8:	f3ef 8305 	mrs	r3, IPSR
 800d2cc:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (_tx_ipsr_get() == 0)
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	f040 8098 	bne.w	800d406 <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d2d6:	f3ef 8310 	mrs	r3, PRIMASK
 800d2da:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 800d2de:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d2e0:	b662      	cpsie	i
}
 800d2e2:	bf00      	nop
 800d2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ea:	f383 8810 	msr	PRIMASK, r3
}
 800d2ee:	bf00      	nop
}
 800d2f0:	e089      	b.n	800d406 <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800d2f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f6:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800d2f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800d2fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d308:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d30e:	621a      	str	r2, [r3, #32]
 800d310:	e03e      	b.n	800d390 <_tx_thread_system_resume+0x2e0>
 800d312:	bf00      	nop
 800d314:	20001cf0 	.word	0x20001cf0
 800d318:	20001cf4 	.word	0x20001cf4
 800d31c:	2000000c 	.word	0x2000000c
 800d320:	200016d4 	.word	0x200016d4
 800d324:	e0001004 	.word	0xe0001004
 800d328:	200016d8 	.word	0x200016d8
 800d32c:	20001cec 	.word	0x20001cec
 800d330:	20001ce8 	.word	0x20001ce8
 800d334:	20001cdc 	.word	0x20001cdc
 800d338:	20001cf8 	.word	0x20001cf8
 800d33c:	2000176c 	.word	0x2000176c
 800d340:	200016ec 	.word	0x200016ec
 800d344:	200016e4 	.word	0x200016e4
 800d348:	200016e8 	.word	0x200016e8
 800d34c:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2203      	movs	r2, #3
 800d35a:	631a      	str	r2, [r3, #48]	; 0x30
 800d35c:	e018      	b.n	800d390 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d362:	2b01      	cmp	r3, #1
 800d364:	d014      	beq.n	800d390 <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d36a:	2b02      	cmp	r3, #2
 800d36c:	d010      	beq.n	800d390 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d372:	2b00      	cmp	r3, #0
 800d374:	d106      	bne.n	800d384 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	631a      	str	r2, [r3, #48]	; 0x30
 800d382:	e005      	b.n	800d390 <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2203      	movs	r2, #3
 800d38e:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 800d390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d392:	2b00      	cmp	r3, #0
 800d394:	d009      	beq.n	800d3aa <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d104      	bne.n	800d3aa <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d3a0:	4b1c      	ldr	r3, [pc, #112]	; (800d414 <_tx_thread_system_resume+0x364>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3a8:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d3aa:	4b1b      	ldr	r3, [pc, #108]	; (800d418 <_tx_thread_system_resume+0x368>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	647b      	str	r3, [r7, #68]	; 0x44
 800d3b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3b2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3b4:	6a3b      	ldr	r3, [r7, #32]
 800d3b6:	f383 8810 	msr	PRIMASK, r3
}
 800d3ba:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d3bc:	4b15      	ldr	r3, [pc, #84]	; (800d414 <_tx_thread_system_resume+0x364>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d022      	beq.n	800d40c <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d3c6:	4b15      	ldr	r3, [pc, #84]	; (800d41c <_tx_thread_system_resume+0x36c>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 800d3cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d11c      	bne.n	800d40c <_tx_thread_system_resume+0x35c>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d3d2:	4b13      	ldr	r3, [pc, #76]	; (800d420 <_tx_thread_system_resume+0x370>)
 800d3d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3d8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d3da:	f3ef 8305 	mrs	r3, IPSR
 800d3de:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d3e0:	69fb      	ldr	r3, [r7, #28]
    if (_tx_ipsr_get() == 0)
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d111      	bne.n	800d40a <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d3e6:	f3ef 8310 	mrs	r3, PRIMASK
 800d3ea:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d3ec:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 800d3ee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d3f0:	b662      	cpsie	i
}
 800d3f2:	bf00      	nop
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	f383 8810 	msr	PRIMASK, r3
}
 800d3fe:	bf00      	nop
}
 800d400:	e003      	b.n	800d40a <_tx_thread_system_resume+0x35a>
                                return;
 800d402:	bf00      	nop
 800d404:	e002      	b.n	800d40c <_tx_thread_system_resume+0x35c>
 800d406:	bf00      	nop
 800d408:	e000      	b.n	800d40c <_tx_thread_system_resume+0x35c>
 800d40a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800d40c:	3778      	adds	r7, #120	; 0x78
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	200016d8 	.word	0x200016d8
 800d418:	200016d4 	.word	0x200016d4
 800d41c:	2000176c 	.word	0x2000176c
 800d420:	e000ed04 	.word	0xe000ed04

0800d424 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b0a4      	sub	sp, #144	; 0x90
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d42c:	2300      	movs	r3, #0
 800d42e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d432:	4b98      	ldr	r3, [pc, #608]	; (800d694 <_tx_thread_system_suspend+0x270>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d43a:	f3ef 8310 	mrs	r3, PRIMASK
 800d43e:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 800d440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 800d442:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d444:	b672      	cpsid	i
    return(int_posture);
 800d446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d448:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d450:	429a      	cmp	r2, r3
 800d452:	d112      	bne.n	800d47a <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d458:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800d45a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d008      	beq.n	800d472 <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800d460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d466:	d004      	beq.n	800d472 <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	334c      	adds	r3, #76	; 0x4c
 800d46c:	4618      	mov	r0, r3
 800d46e:	f000 fb83 	bl	800db78 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	69db      	ldr	r3, [r3, #28]
 800d476:	4a88      	ldr	r2, [pc, #544]	; (800d698 <_tx_thread_system_suspend+0x274>)
 800d478:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d47a:	4b88      	ldr	r3, [pc, #544]	; (800d69c <_tx_thread_system_suspend+0x278>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	3b01      	subs	r3, #1
 800d480:	4a86      	ldr	r2, [pc, #536]	; (800d69c <_tx_thread_system_suspend+0x278>)
 800d482:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d488:	2b01      	cmp	r3, #1
 800d48a:	f040 817d 	bne.w	800d788 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 800d48e:	4b84      	ldr	r3, [pc, #528]	; (800d6a0 <_tx_thread_system_suspend+0x27c>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d494:	4b82      	ldr	r3, [pc, #520]	; (800d6a0 <_tx_thread_system_suspend+0x27c>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	673b      	str	r3, [r7, #112]	; 0x70
 800d49a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d07c      	beq.n	800d59a <_tx_thread_system_suspend+0x176>
 800d4a0:	4b80      	ldr	r3, [pc, #512]	; (800d6a4 <_tx_thread_system_suspend+0x280>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f003 0301 	and.w	r3, r3, #1
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d076      	beq.n	800d59a <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d4ac:	f3ef 8305 	mrs	r3, IPSR
 800d4b0:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800d4b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4b4:	4b7c      	ldr	r3, [pc, #496]	; (800d6a8 <_tx_thread_system_suspend+0x284>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4bc:	4b75      	ldr	r3, [pc, #468]	; (800d694 <_tx_thread_system_suspend+0x270>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d4c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d110      	bne.n	800d4ec <_tx_thread_system_suspend+0xc8>
 800d4ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d4d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4da:	041a      	lsls	r2, r3, #16
 800d4dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d4e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d4ea:	e013      	b.n	800d514 <_tx_thread_system_suspend+0xf0>
 800d4ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ee:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d4f2:	d208      	bcs.n	800d506 <_tx_thread_system_suspend+0xe2>
 800d4f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d4fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d504:	e006      	b.n	800d514 <_tx_thread_system_suspend+0xf0>
 800d506:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d50a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d50e:	2300      	movs	r3, #0
 800d510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d514:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d518:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d51a:	601a      	str	r2, [r3, #0]
 800d51c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d51e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d522:	605a      	str	r2, [r3, #4]
 800d524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d526:	2202      	movs	r2, #2
 800d528:	609a      	str	r2, [r3, #8]
 800d52a:	4b60      	ldr	r3, [pc, #384]	; (800d6ac <_tx_thread_system_suspend+0x288>)
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d530:	60da      	str	r2, [r3, #12]
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d536:	611a      	str	r2, [r3, #16]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d53c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d53e:	615a      	str	r2, [r3, #20]
 800d540:	f107 0208 	add.w	r2, r7, #8
 800d544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d546:	619a      	str	r2, [r3, #24]
 800d548:	4b59      	ldr	r3, [pc, #356]	; (800d6b0 <_tx_thread_system_suspend+0x28c>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	461a      	mov	r2, r3
 800d54e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d550:	61da      	str	r2, [r3, #28]
 800d552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d554:	3320      	adds	r3, #32
 800d556:	673b      	str	r3, [r7, #112]	; 0x70
 800d558:	4b56      	ldr	r3, [pc, #344]	; (800d6b4 <_tx_thread_system_suspend+0x290>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d55e:	429a      	cmp	r2, r3
 800d560:	d314      	bcc.n	800d58c <_tx_thread_system_suspend+0x168>
 800d562:	4b55      	ldr	r3, [pc, #340]	; (800d6b8 <_tx_thread_system_suspend+0x294>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	673b      	str	r3, [r7, #112]	; 0x70
 800d568:	4a4d      	ldr	r2, [pc, #308]	; (800d6a0 <_tx_thread_system_suspend+0x27c>)
 800d56a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d56c:	6013      	str	r3, [r2, #0]
 800d56e:	4b53      	ldr	r3, [pc, #332]	; (800d6bc <_tx_thread_system_suspend+0x298>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d574:	621a      	str	r2, [r3, #32]
 800d576:	4b52      	ldr	r3, [pc, #328]	; (800d6c0 <_tx_thread_system_suspend+0x29c>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00d      	beq.n	800d59a <_tx_thread_system_suspend+0x176>
 800d57e:	4b50      	ldr	r3, [pc, #320]	; (800d6c0 <_tx_thread_system_suspend+0x29c>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4a4e      	ldr	r2, [pc, #312]	; (800d6bc <_tx_thread_system_suspend+0x298>)
 800d584:	6812      	ldr	r2, [r2, #0]
 800d586:	4610      	mov	r0, r2
 800d588:	4798      	blx	r3
 800d58a:	e006      	b.n	800d59a <_tx_thread_system_suspend+0x176>
 800d58c:	4a44      	ldr	r2, [pc, #272]	; (800d6a0 <_tx_thread_system_suspend+0x27c>)
 800d58e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d590:	6013      	str	r3, [r2, #0]
 800d592:	4b4a      	ldr	r3, [pc, #296]	; (800d6bc <_tx_thread_system_suspend+0x298>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d598:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 800d59a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d003      	beq.n	800d5a8 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d5a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b2:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6a1b      	ldr	r3, [r3, #32]
 800d5b8:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800d5ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d016      	beq.n	800d5f0 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c6:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800d5c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5cc:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800d5ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d5d2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	4a3b      	ldr	r2, [pc, #236]	; (800d6c4 <_tx_thread_system_suspend+0x2a0>)
 800d5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	f040 8085 	bne.w	800d6ee <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	4937      	ldr	r1, [pc, #220]	; (800d6c4 <_tx_thread_system_suspend+0x2a0>)
 800d5e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d5ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d5ee:	e07e      	b.n	800d6ee <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	4a34      	ldr	r2, [pc, #208]	; (800d6c4 <_tx_thread_system_suspend+0x2a0>)
 800d5f4:	2100      	movs	r1, #0
 800d5f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d602:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800d604:	4b30      	ldr	r3, [pc, #192]	; (800d6c8 <_tx_thread_system_suspend+0x2a4>)
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d60a:	43db      	mvns	r3, r3
 800d60c:	4013      	ands	r3, r2
 800d60e:	4a2e      	ldr	r2, [pc, #184]	; (800d6c8 <_tx_thread_system_suspend+0x2a4>)
 800d610:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800d612:	2300      	movs	r3, #0
 800d614:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800d616:	4b2c      	ldr	r3, [pc, #176]	; (800d6c8 <_tx_thread_system_suspend+0x2a4>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800d61c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d158      	bne.n	800d6d4 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d622:	4b2a      	ldr	r3, [pc, #168]	; (800d6cc <_tx_thread_system_suspend+0x2a8>)
 800d624:	2220      	movs	r2, #32
 800d626:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800d628:	4b21      	ldr	r3, [pc, #132]	; (800d6b0 <_tx_thread_system_suspend+0x28c>)
 800d62a:	2200      	movs	r2, #0
 800d62c:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 800d62e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d630:	2b00      	cmp	r3, #0
 800d632:	d008      	beq.n	800d646 <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d102      	bne.n	800d646 <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 800d640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d642:	2200      	movs	r2, #0
 800d644:	61da      	str	r2, [r3, #28]
 800d646:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d648:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d64a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d64c:	f383 8810 	msr	PRIMASK, r3
}
 800d650:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d652:	4b12      	ldr	r3, [pc, #72]	; (800d69c <_tx_thread_system_suspend+0x278>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 800d658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	f040 80bf 	bne.w	800d7de <_tx_thread_system_suspend+0x3ba>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d660:	4b1b      	ldr	r3, [pc, #108]	; (800d6d0 <_tx_thread_system_suspend+0x2ac>)
 800d662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d666:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d668:	f3ef 8305 	mrs	r3, IPSR
 800d66c:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800d66e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800d670:	2b00      	cmp	r3, #0
 800d672:	d10c      	bne.n	800d68e <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d674:	f3ef 8310 	mrs	r3, PRIMASK
 800d678:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800d67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800d67c:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d67e:	b662      	cpsie	i
}
 800d680:	bf00      	nop
 800d682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d684:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d688:	f383 8810 	msr	PRIMASK, r3
}
 800d68c:	bf00      	nop
}
 800d68e:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800d690:	e0a5      	b.n	800d7de <_tx_thread_system_suspend+0x3ba>
 800d692:	bf00      	nop
 800d694:	200016d4 	.word	0x200016d4
 800d698:	20001cd8 	.word	0x20001cd8
 800d69c:	2000176c 	.word	0x2000176c
 800d6a0:	20001cf0 	.word	0x20001cf0
 800d6a4:	20001cf4 	.word	0x20001cf4
 800d6a8:	2000000c 	.word	0x2000000c
 800d6ac:	e0001004 	.word	0xe0001004
 800d6b0:	200016d8 	.word	0x200016d8
 800d6b4:	20001cec 	.word	0x20001cec
 800d6b8:	20001ce8 	.word	0x20001ce8
 800d6bc:	20001cdc 	.word	0x20001cdc
 800d6c0:	20001cf8 	.word	0x20001cf8
 800d6c4:	200016ec 	.word	0x200016ec
 800d6c8:	200016e4 	.word	0x200016e4
 800d6cc:	200016e8 	.word	0x200016e8
 800d6d0:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800d6d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6d6:	fa93 f3a3 	rbit	r3, r3
 800d6da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6de:	fab3 f383 	clz	r3, r3
 800d6e2:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800d6e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d6e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6e8:	4413      	add	r3, r2
 800d6ea:	4a41      	ldr	r2, [pc, #260]	; (800d7f0 <_tx_thread_system_suspend+0x3cc>)
 800d6ec:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800d6ee:	4b41      	ldr	r3, [pc, #260]	; (800d7f4 <_tx_thread_system_suspend+0x3d0>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	687a      	ldr	r2, [r7, #4]
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d139      	bne.n	800d76c <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d6f8:	4b3d      	ldr	r3, [pc, #244]	; (800d7f0 <_tx_thread_system_suspend+0x3cc>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a3e      	ldr	r2, [pc, #248]	; (800d7f8 <_tx_thread_system_suspend+0x3d4>)
 800d6fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d702:	4a3c      	ldr	r2, [pc, #240]	; (800d7f4 <_tx_thread_system_suspend+0x3d0>)
 800d704:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 800d706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00a      	beq.n	800d722 <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d70c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d714:	429a      	cmp	r2, r3
 800d716:	d104      	bne.n	800d722 <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d718:	4b36      	ldr	r3, [pc, #216]	; (800d7f4 <_tx_thread_system_suspend+0x3d0>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	461a      	mov	r2, r3
 800d71e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d720:	61da      	str	r2, [r3, #28]
 800d722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d724:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	f383 8810 	msr	PRIMASK, r3
}
 800d72c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d72e:	4b33      	ldr	r3, [pc, #204]	; (800d7fc <_tx_thread_system_suspend+0x3d8>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 800d734:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d736:	2b00      	cmp	r3, #0
 800d738:	d153      	bne.n	800d7e2 <_tx_thread_system_suspend+0x3be>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d73a:	4b31      	ldr	r3, [pc, #196]	; (800d800 <_tx_thread_system_suspend+0x3dc>)
 800d73c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d740:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d742:	f3ef 8305 	mrs	r3, IPSR
 800d746:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800d748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d10c      	bne.n	800d768 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d74e:	f3ef 8310 	mrs	r3, PRIMASK
 800d752:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d754:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800d756:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d758:	b662      	cpsie	i
}
 800d75a:	bf00      	nop
 800d75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d760:	6a3b      	ldr	r3, [r7, #32]
 800d762:	f383 8810 	msr	PRIMASK, r3
}
 800d766:	bf00      	nop
}
 800d768:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800d76a:	e03a      	b.n	800d7e2 <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 800d76c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00a      	beq.n	800d788 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d104      	bne.n	800d788 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d77e:	4b1d      	ldr	r3, [pc, #116]	; (800d7f4 <_tx_thread_system_suspend+0x3d0>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	461a      	mov	r2, r3
 800d784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d786:	61da      	str	r2, [r3, #28]
 800d788:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d78a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	f383 8810 	msr	PRIMASK, r3
}
 800d792:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d794:	4b17      	ldr	r3, [pc, #92]	; (800d7f4 <_tx_thread_system_suspend+0x3d0>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d022      	beq.n	800d7e6 <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d7a0:	4b16      	ldr	r3, [pc, #88]	; (800d7fc <_tx_thread_system_suspend+0x3d8>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 800d7a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d11c      	bne.n	800d7e6 <_tx_thread_system_suspend+0x3c2>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d7ac:	4b14      	ldr	r3, [pc, #80]	; (800d800 <_tx_thread_system_suspend+0x3dc>)
 800d7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7b2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d7b4:	f3ef 8305 	mrs	r3, IPSR
 800d7b8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d7ba:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d10c      	bne.n	800d7da <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d7c0:	f3ef 8310 	mrs	r3, PRIMASK
 800d7c4:	617b      	str	r3, [r7, #20]
    return(posture);
 800d7c6:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800d7c8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d7ca:	b662      	cpsie	i
}
 800d7cc:	bf00      	nop
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f383 8810 	msr	PRIMASK, r3
}
 800d7d8:	bf00      	nop
}
 800d7da:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800d7dc:	e003      	b.n	800d7e6 <_tx_thread_system_suspend+0x3c2>
                return;
 800d7de:	bf00      	nop
 800d7e0:	e002      	b.n	800d7e8 <_tx_thread_system_suspend+0x3c4>
            return;
 800d7e2:	bf00      	nop
 800d7e4:	e000      	b.n	800d7e8 <_tx_thread_system_suspend+0x3c4>
    return;
 800d7e6:	bf00      	nop
}
 800d7e8:	3790      	adds	r7, #144	; 0x90
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	200016e8 	.word	0x200016e8
 800d7f4:	200016d8 	.word	0x200016d8
 800d7f8:	200016ec 	.word	0x200016ec
 800d7fc:	2000176c 	.word	0x2000176c
 800d800:	e000ed04 	.word	0xe000ed04

0800d804 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b08e      	sub	sp, #56	; 0x38
 800d808:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d80a:	4b5f      	ldr	r3, [pc, #380]	; (800d988 <_tx_thread_time_slice+0x184>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d810:	f3ef 8310 	mrs	r3, PRIMASK
 800d814:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d816:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d818:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d81a:	b672      	cpsid	i
    return(int_posture);
 800d81c:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800d81e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d820:	4b5a      	ldr	r3, [pc, #360]	; (800d98c <_tx_thread_time_slice+0x188>)
 800d822:	2200      	movs	r2, #0
 800d824:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d024      	beq.n	800d876 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d830:	2b00      	cmp	r3, #0
 800d832:	d120      	bne.n	800d876 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	69d2      	ldr	r2, [r2, #28]
 800d83a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	699b      	ldr	r3, [r3, #24]
 800d840:	4a53      	ldr	r2, [pc, #332]	; (800d990 <_tx_thread_time_slice+0x18c>)
 800d842:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6a1a      	ldr	r2, [r3, #32]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d013      	beq.n	800d876 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d856:	429a      	cmp	r2, r3
 800d858:	d10d      	bne.n	800d876 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d860:	6a12      	ldr	r2, [r2, #32]
 800d862:	494c      	ldr	r1, [pc, #304]	; (800d994 <_tx_thread_time_slice+0x190>)
 800d864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d868:	4b4b      	ldr	r3, [pc, #300]	; (800d998 <_tx_thread_time_slice+0x194>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a49      	ldr	r2, [pc, #292]	; (800d994 <_tx_thread_time_slice+0x190>)
 800d86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d872:	4a4a      	ldr	r2, [pc, #296]	; (800d99c <_tx_thread_time_slice+0x198>)
 800d874:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d876:	f3ef 8305 	mrs	r3, IPSR
 800d87a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d87c:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 800d87e:	4b48      	ldr	r3, [pc, #288]	; (800d9a0 <_tx_thread_time_slice+0x19c>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4313      	orrs	r3, r2
 800d884:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 800d886:	4b47      	ldr	r3, [pc, #284]	; (800d9a4 <_tx_thread_time_slice+0x1a0>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d88c:	4b46      	ldr	r3, [pc, #280]	; (800d9a8 <_tx_thread_time_slice+0x1a4>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	623b      	str	r3, [r7, #32]
 800d892:	6a3b      	ldr	r3, [r7, #32]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d06d      	beq.n	800d974 <_tx_thread_time_slice+0x170>
 800d898:	4b44      	ldr	r3, [pc, #272]	; (800d9ac <_tx_thread_time_slice+0x1a8>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f003 0301 	and.w	r3, r3, #1
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d067      	beq.n	800d974 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d8a4:	f3ef 8305 	mrs	r3, IPSR
 800d8a8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	4b3c      	ldr	r3, [pc, #240]	; (800d9a0 <_tx_thread_time_slice+0x19c>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	61fb      	str	r3, [r7, #28]
 800d8b4:	4b34      	ldr	r3, [pc, #208]	; (800d988 <_tx_thread_time_slice+0x184>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	633b      	str	r3, [r7, #48]	; 0x30
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d10b      	bne.n	800d8d8 <_tx_thread_time_slice+0xd4>
 800d8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c4:	637b      	str	r3, [r7, #52]	; 0x34
 800d8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ca:	041a      	lsls	r2, r3, #16
 800d8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d8d4:	637b      	str	r3, [r7, #52]	; 0x34
 800d8d6:	e00e      	b.n	800d8f6 <_tx_thread_time_slice+0xf2>
 800d8d8:	69fb      	ldr	r3, [r7, #28]
 800d8da:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d8de:	d205      	bcs.n	800d8ec <_tx_thread_time_slice+0xe8>
 800d8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e2:	637b      	str	r3, [r7, #52]	; 0x34
 800d8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d8e8:	633b      	str	r3, [r7, #48]	; 0x30
 800d8ea:	e004      	b.n	800d8f6 <_tx_thread_time_slice+0xf2>
 800d8ec:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d8f0:	633b      	str	r3, [r7, #48]	; 0x30
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	637b      	str	r3, [r7, #52]	; 0x34
 800d8f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8f8:	6a3b      	ldr	r3, [r7, #32]
 800d8fa:	601a      	str	r2, [r3, #0]
 800d8fc:	6a3b      	ldr	r3, [r7, #32]
 800d8fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d900:	605a      	str	r2, [r3, #4]
 800d902:	6a3b      	ldr	r3, [r7, #32]
 800d904:	2205      	movs	r2, #5
 800d906:	609a      	str	r2, [r3, #8]
 800d908:	4b29      	ldr	r3, [pc, #164]	; (800d9b0 <_tx_thread_time_slice+0x1ac>)
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	6a3b      	ldr	r3, [r7, #32]
 800d90e:	60da      	str	r2, [r3, #12]
 800d910:	4b22      	ldr	r3, [pc, #136]	; (800d99c <_tx_thread_time_slice+0x198>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	461a      	mov	r2, r3
 800d916:	6a3b      	ldr	r3, [r7, #32]
 800d918:	611a      	str	r2, [r3, #16]
 800d91a:	6a3b      	ldr	r3, [r7, #32]
 800d91c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d91e:	615a      	str	r2, [r3, #20]
 800d920:	6a3b      	ldr	r3, [r7, #32]
 800d922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d924:	619a      	str	r2, [r3, #24]
 800d926:	1d3a      	adds	r2, r7, #4
 800d928:	6a3b      	ldr	r3, [r7, #32]
 800d92a:	61da      	str	r2, [r3, #28]
 800d92c:	6a3b      	ldr	r3, [r7, #32]
 800d92e:	3320      	adds	r3, #32
 800d930:	623b      	str	r3, [r7, #32]
 800d932:	4b20      	ldr	r3, [pc, #128]	; (800d9b4 <_tx_thread_time_slice+0x1b0>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	6a3a      	ldr	r2, [r7, #32]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d314      	bcc.n	800d966 <_tx_thread_time_slice+0x162>
 800d93c:	4b1e      	ldr	r3, [pc, #120]	; (800d9b8 <_tx_thread_time_slice+0x1b4>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	623b      	str	r3, [r7, #32]
 800d942:	4a19      	ldr	r2, [pc, #100]	; (800d9a8 <_tx_thread_time_slice+0x1a4>)
 800d944:	6a3b      	ldr	r3, [r7, #32]
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	4b1c      	ldr	r3, [pc, #112]	; (800d9bc <_tx_thread_time_slice+0x1b8>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	6a3a      	ldr	r2, [r7, #32]
 800d94e:	621a      	str	r2, [r3, #32]
 800d950:	4b1b      	ldr	r3, [pc, #108]	; (800d9c0 <_tx_thread_time_slice+0x1bc>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00d      	beq.n	800d974 <_tx_thread_time_slice+0x170>
 800d958:	4b19      	ldr	r3, [pc, #100]	; (800d9c0 <_tx_thread_time_slice+0x1bc>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a17      	ldr	r2, [pc, #92]	; (800d9bc <_tx_thread_time_slice+0x1b8>)
 800d95e:	6812      	ldr	r2, [r2, #0]
 800d960:	4610      	mov	r0, r2
 800d962:	4798      	blx	r3
 800d964:	e006      	b.n	800d974 <_tx_thread_time_slice+0x170>
 800d966:	4a10      	ldr	r2, [pc, #64]	; (800d9a8 <_tx_thread_time_slice+0x1a4>)
 800d968:	6a3b      	ldr	r3, [r7, #32]
 800d96a:	6013      	str	r3, [r2, #0]
 800d96c:	4b13      	ldr	r3, [pc, #76]	; (800d9bc <_tx_thread_time_slice+0x1b8>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	6a3a      	ldr	r2, [r7, #32]
 800d972:	621a      	str	r2, [r3, #32]
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	f383 8810 	msr	PRIMASK, r3
}
 800d97e:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800d980:	bf00      	nop
 800d982:	3738      	adds	r7, #56	; 0x38
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	200016d4 	.word	0x200016d4
 800d98c:	2000177c 	.word	0x2000177c
 800d990:	20001cd8 	.word	0x20001cd8
 800d994:	200016ec 	.word	0x200016ec
 800d998:	200016e8 	.word	0x200016e8
 800d99c:	200016d8 	.word	0x200016d8
 800d9a0:	2000000c 	.word	0x2000000c
 800d9a4:	2000176c 	.word	0x2000176c
 800d9a8:	20001cf0 	.word	0x20001cf0
 800d9ac:	20001cf4 	.word	0x20001cf4
 800d9b0:	e0001004 	.word	0xe0001004
 800d9b4:	20001cec 	.word	0x20001cec
 800d9b8:	20001ce8 	.word	0x20001ce8
 800d9bc:	20001cdc 	.word	0x20001cdc
 800d9c0:	20001cf8 	.word	0x20001cf8

0800d9c4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08a      	sub	sp, #40	; 0x28
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d9d0:	f3ef 8310 	mrs	r3, PRIMASK
 800d9d4:	617b      	str	r3, [r7, #20]
    return(posture);
 800d9d6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d9d8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d9da:	b672      	cpsid	i
    return(int_posture);
 800d9dc:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800d9de:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9e4:	2b04      	cmp	r3, #4
 800d9e6:	d10e      	bne.n	800da06 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800d9e8:	4b13      	ldr	r3, [pc, #76]	; (800da38 <_tx_thread_timeout+0x74>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	4a12      	ldr	r2, [pc, #72]	; (800da38 <_tx_thread_timeout+0x74>)
 800d9f0:	6013      	str	r3, [r2, #0]
 800d9f2:	6a3b      	ldr	r3, [r7, #32]
 800d9f4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f383 8810 	msr	PRIMASK, r3
}
 800d9fc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d9fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da00:	f7ff fb56 	bl	800d0b0 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800da04:	e013      	b.n	800da2e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800da06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da0a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800da0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800da12:	61bb      	str	r3, [r7, #24]
 800da14:	6a3b      	ldr	r3, [r7, #32]
 800da16:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	f383 8810 	msr	PRIMASK, r3
}
 800da1e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d003      	beq.n	800da2e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	69b9      	ldr	r1, [r7, #24]
 800da2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da2c:	4798      	blx	r3
}
 800da2e:	bf00      	nop
 800da30:	3728      	adds	r7, #40	; 0x28
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	2000176c 	.word	0x2000176c

0800da3c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da42:	f3ef 8310 	mrs	r3, PRIMASK
 800da46:	607b      	str	r3, [r7, #4]
    return(posture);
 800da48:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800da4a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800da4c:	b672      	cpsid	i
    return(int_posture);
 800da4e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800da50:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800da52:	4b09      	ldr	r3, [pc, #36]	; (800da78 <_tx_timer_expiration_process+0x3c>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	3301      	adds	r3, #1
 800da58:	4a07      	ldr	r2, [pc, #28]	; (800da78 <_tx_timer_expiration_process+0x3c>)
 800da5a:	6013      	str	r3, [r2, #0]
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	f383 8810 	msr	PRIMASK, r3
}
 800da66:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800da68:	4804      	ldr	r0, [pc, #16]	; (800da7c <_tx_timer_expiration_process+0x40>)
 800da6a:	f7ff fb21 	bl	800d0b0 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800da6e:	bf00      	nop
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	2000176c 	.word	0x2000176c
 800da7c:	2000181c 	.word	0x2000181c

0800da80 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800da80:	b590      	push	{r4, r7, lr}
 800da82:	b089      	sub	sp, #36	; 0x24
 800da84:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800da86:	4b28      	ldr	r3, [pc, #160]	; (800db28 <_tx_timer_initialize+0xa8>)
 800da88:	2200      	movs	r2, #0
 800da8a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800da8c:	4b27      	ldr	r3, [pc, #156]	; (800db2c <_tx_timer_initialize+0xac>)
 800da8e:	2200      	movs	r2, #0
 800da90:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800da92:	4b27      	ldr	r3, [pc, #156]	; (800db30 <_tx_timer_initialize+0xb0>)
 800da94:	2200      	movs	r2, #0
 800da96:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800da98:	4b26      	ldr	r3, [pc, #152]	; (800db34 <_tx_timer_initialize+0xb4>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800da9e:	4b26      	ldr	r3, [pc, #152]	; (800db38 <_tx_timer_initialize+0xb8>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800daa4:	2280      	movs	r2, #128	; 0x80
 800daa6:	2100      	movs	r1, #0
 800daa8:	4824      	ldr	r0, [pc, #144]	; (800db3c <_tx_timer_initialize+0xbc>)
 800daaa:	f007 f969 	bl	8014d80 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800daae:	4b24      	ldr	r3, [pc, #144]	; (800db40 <_tx_timer_initialize+0xc0>)
 800dab0:	4a22      	ldr	r2, [pc, #136]	; (800db3c <_tx_timer_initialize+0xbc>)
 800dab2:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800dab4:	4b23      	ldr	r3, [pc, #140]	; (800db44 <_tx_timer_initialize+0xc4>)
 800dab6:	4a21      	ldr	r2, [pc, #132]	; (800db3c <_tx_timer_initialize+0xbc>)
 800dab8:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800daba:	4b23      	ldr	r3, [pc, #140]	; (800db48 <_tx_timer_initialize+0xc8>)
 800dabc:	4a23      	ldr	r2, [pc, #140]	; (800db4c <_tx_timer_initialize+0xcc>)
 800dabe:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800dac0:	4b21      	ldr	r3, [pc, #132]	; (800db48 <_tx_timer_initialize+0xc8>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	3304      	adds	r3, #4
 800dac6:	4a20      	ldr	r2, [pc, #128]	; (800db48 <_tx_timer_initialize+0xc8>)
 800dac8:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800daca:	4b21      	ldr	r3, [pc, #132]	; (800db50 <_tx_timer_initialize+0xd0>)
 800dacc:	4a21      	ldr	r2, [pc, #132]	; (800db54 <_tx_timer_initialize+0xd4>)
 800dace:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800dad0:	4b21      	ldr	r3, [pc, #132]	; (800db58 <_tx_timer_initialize+0xd8>)
 800dad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dad6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800dad8:	4b20      	ldr	r3, [pc, #128]	; (800db5c <_tx_timer_initialize+0xdc>)
 800dada:	2200      	movs	r2, #0
 800dadc:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800dade:	4b1c      	ldr	r3, [pc, #112]	; (800db50 <_tx_timer_initialize+0xd0>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	4a1d      	ldr	r2, [pc, #116]	; (800db58 <_tx_timer_initialize+0xd8>)
 800dae4:	6812      	ldr	r2, [r2, #0]
 800dae6:	491d      	ldr	r1, [pc, #116]	; (800db5c <_tx_timer_initialize+0xdc>)
 800dae8:	6809      	ldr	r1, [r1, #0]
 800daea:	481c      	ldr	r0, [pc, #112]	; (800db5c <_tx_timer_initialize+0xdc>)
 800daec:	6800      	ldr	r0, [r0, #0]
 800daee:	2400      	movs	r4, #0
 800daf0:	9405      	str	r4, [sp, #20]
 800daf2:	2400      	movs	r4, #0
 800daf4:	9404      	str	r4, [sp, #16]
 800daf6:	9003      	str	r0, [sp, #12]
 800daf8:	9102      	str	r1, [sp, #8]
 800dafa:	9201      	str	r2, [sp, #4]
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	4b18      	ldr	r3, [pc, #96]	; (800db60 <_tx_timer_initialize+0xe0>)
 800db00:	4a18      	ldr	r2, [pc, #96]	; (800db64 <_tx_timer_initialize+0xe4>)
 800db02:	4919      	ldr	r1, [pc, #100]	; (800db68 <_tx_timer_initialize+0xe8>)
 800db04:	4819      	ldr	r0, [pc, #100]	; (800db6c <_tx_timer_initialize+0xec>)
 800db06:	f7fe ff8b 	bl	800ca20 <_tx_thread_create>
 800db0a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d1e5      	bne.n	800dade <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800db12:	4b17      	ldr	r3, [pc, #92]	; (800db70 <_tx_timer_initialize+0xf0>)
 800db14:	2200      	movs	r2, #0
 800db16:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800db18:	4b16      	ldr	r3, [pc, #88]	; (800db74 <_tx_timer_initialize+0xf4>)
 800db1a:	2200      	movs	r2, #0
 800db1c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800db1e:	bf00      	nop
 800db20:	370c      	adds	r7, #12
 800db22:	46bd      	mov	sp, r7
 800db24:	bd90      	pop	{r4, r7, pc}
 800db26:	bf00      	nop
 800db28:	20001778 	.word	0x20001778
 800db2c:	20001cd8 	.word	0x20001cd8
 800db30:	2000177c 	.word	0x2000177c
 800db34:	2000180c 	.word	0x2000180c
 800db38:	20001818 	.word	0x20001818
 800db3c:	20001780 	.word	0x20001780
 800db40:	20001800 	.word	0x20001800
 800db44:	20001808 	.word	0x20001808
 800db48:	20001804 	.word	0x20001804
 800db4c:	200017fc 	.word	0x200017fc
 800db50:	200018cc 	.word	0x200018cc
 800db54:	200018d8 	.word	0x200018d8
 800db58:	200018d0 	.word	0x200018d0
 800db5c:	200018d4 	.word	0x200018d4
 800db60:	4154494d 	.word	0x4154494d
 800db64:	0800dcad 	.word	0x0800dcad
 800db68:	08015874 	.word	0x08015874
 800db6c:	2000181c 	.word	0x2000181c
 800db70:	20001810 	.word	0x20001810
 800db74:	20001814 	.word	0x20001814

0800db78 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800db78:	b480      	push	{r7}
 800db7a:	b089      	sub	sp, #36	; 0x24
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d04a      	beq.n	800dc22 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db92:	d046      	beq.n	800dc22 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	699b      	ldr	r3, [r3, #24]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d142      	bne.n	800dc22 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	2b20      	cmp	r3, #32
 800dba0:	d902      	bls.n	800dba8 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800dba2:	231f      	movs	r3, #31
 800dba4:	61bb      	str	r3, [r7, #24]
 800dba6:	e002      	b.n	800dbae <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800dbae:	4b20      	ldr	r3, [pc, #128]	; (800dc30 <_tx_timer_system_activate+0xb8>)
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	009b      	lsls	r3, r3, #2
 800dbb6:	4413      	add	r3, r2
 800dbb8:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800dbba:	4b1e      	ldr	r3, [pc, #120]	; (800dc34 <_tx_timer_system_activate+0xbc>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	69fa      	ldr	r2, [r7, #28]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d30b      	bcc.n	800dbdc <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800dbc4:	4b1b      	ldr	r3, [pc, #108]	; (800dc34 <_tx_timer_system_activate+0xbc>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	69fa      	ldr	r2, [r7, #28]
 800dbca:	1ad3      	subs	r3, r2, r3
 800dbcc:	109b      	asrs	r3, r3, #2
 800dbce:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800dbd0:	4b19      	ldr	r3, [pc, #100]	; (800dc38 <_tx_timer_system_activate+0xc0>)
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	4413      	add	r3, r2
 800dbda:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800dbdc:	69fb      	ldr	r3, [r7, #28]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d109      	bne.n	800dbf8 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	601a      	str	r2, [r3, #0]
 800dbf6:	e011      	b.n	800dc1c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	695b      	ldr	r3, [r3, #20]
 800dc02:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	68fa      	ldr	r2, [r7, #12]
 800dc14:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	69fa      	ldr	r2, [r7, #28]
 800dc20:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800dc22:	bf00      	nop
 800dc24:	3724      	adds	r7, #36	; 0x24
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr
 800dc2e:	bf00      	nop
 800dc30:	20001808 	.word	0x20001808
 800dc34:	20001804 	.word	0x20001804
 800dc38:	20001800 	.word	0x20001800

0800dc3c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b087      	sub	sp, #28
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	699b      	ldr	r3, [r3, #24]
 800dc48:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d026      	beq.n	800dc9e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	691b      	ldr	r3, [r3, #16]
 800dc54:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d108      	bne.n	800dc70 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d117      	bne.n	800dc98 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	601a      	str	r2, [r3, #0]
 800dc6e:	e013      	b.n	800dc98 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	695b      	ldr	r3, [r3, #20]
 800dc74:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	693a      	ldr	r2, [r7, #16]
 800dc80:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d105      	bne.n	800dc98 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	697a      	ldr	r2, [r7, #20]
 800dc90:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	693a      	ldr	r2, [r7, #16]
 800dc96:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	619a      	str	r2, [r3, #24]
    }
}
 800dc9e:	bf00      	nop
 800dca0:	371c      	adds	r7, #28
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr
	...

0800dcac <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b098      	sub	sp, #96	; 0x60
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	4a73      	ldr	r2, [pc, #460]	; (800de88 <_tx_timer_thread_entry+0x1dc>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	f040 80de 	bne.w	800de7e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dcc2:	f3ef 8310 	mrs	r3, PRIMASK
 800dcc6:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800dcc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800dcca:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800dccc:	b672      	cpsid	i
    return(int_posture);
 800dcce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800dcd0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800dcd2:	4b6e      	ldr	r3, [pc, #440]	; (800de8c <_tx_timer_thread_entry+0x1e0>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d003      	beq.n	800dce8 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f107 020c 	add.w	r2, r7, #12
 800dce6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800dce8:	4b68      	ldr	r3, [pc, #416]	; (800de8c <_tx_timer_thread_entry+0x1e0>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2200      	movs	r2, #0
 800dcee:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800dcf0:	4b66      	ldr	r3, [pc, #408]	; (800de8c <_tx_timer_thread_entry+0x1e0>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	3304      	adds	r3, #4
 800dcf6:	4a65      	ldr	r2, [pc, #404]	; (800de8c <_tx_timer_thread_entry+0x1e0>)
 800dcf8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800dcfa:	4b64      	ldr	r3, [pc, #400]	; (800de8c <_tx_timer_thread_entry+0x1e0>)
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	4b64      	ldr	r3, [pc, #400]	; (800de90 <_tx_timer_thread_entry+0x1e4>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d103      	bne.n	800dd0e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800dd06:	4b63      	ldr	r3, [pc, #396]	; (800de94 <_tx_timer_thread_entry+0x1e8>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a60      	ldr	r2, [pc, #384]	; (800de8c <_tx_timer_thread_entry+0x1e0>)
 800dd0c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800dd0e:	4b62      	ldr	r3, [pc, #392]	; (800de98 <_tx_timer_thread_entry+0x1ec>)
 800dd10:	2200      	movs	r2, #0
 800dd12:	601a      	str	r2, [r3, #0]
 800dd14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd16:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1a:	f383 8810 	msr	PRIMASK, r3
}
 800dd1e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd20:	f3ef 8310 	mrs	r3, PRIMASK
 800dd24:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800dd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800dd28:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800dd2a:	b672      	cpsid	i
    return(int_posture);
 800dd2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800dd2e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800dd30:	e07f      	b.n	800de32 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	691b      	ldr	r3, [r3, #16]
 800dd3a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800dd40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d102      	bne.n	800dd4e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	60fb      	str	r3, [r7, #12]
 800dd4c:	e00e      	b.n	800dd6c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800dd4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd50:	695b      	ldr	r3, [r3, #20]
 800dd52:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dd54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd58:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800dd5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd5e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800dd60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd62:	f107 020c 	add.w	r2, r7, #12
 800dd66:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800dd68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd6a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800dd6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b20      	cmp	r3, #32
 800dd72:	d911      	bls.n	800dd98 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800dd74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800dd7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd7e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800dd80:	2300      	movs	r3, #0
 800dd82:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800dd84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd86:	f107 0208 	add.w	r2, r7, #8
 800dd8a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800dd8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd90:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800dd92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd94:	60bb      	str	r3, [r7, #8]
 800dd96:	e01a      	b.n	800ddce <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800dd98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800dd9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800dda4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda6:	685a      	ldr	r2, [r3, #4]
 800dda8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddaa:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800ddac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d009      	beq.n	800ddc8 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ddb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddb6:	f107 0208 	add.w	r2, r7, #8
 800ddba:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800ddbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ddc0:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800ddc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddc4:	60bb      	str	r3, [r7, #8]
 800ddc6:	e002      	b.n	800ddce <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800ddc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddca:	2200      	movs	r2, #0
 800ddcc:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800ddce:	4a33      	ldr	r2, [pc, #204]	; (800de9c <_tx_timer_thread_entry+0x1f0>)
 800ddd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd2:	6013      	str	r3, [r2, #0]
 800ddd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ddd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddda:	f383 8810 	msr	PRIMASK, r3
}
 800ddde:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800dde0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d002      	beq.n	800ddec <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800dde6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dde8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ddea:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ddec:	f3ef 8310 	mrs	r3, PRIMASK
 800ddf0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800ddf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800ddf4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800ddf6:	b672      	cpsid	i
    return(int_posture);
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800ddfa:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800ddfc:	4b27      	ldr	r3, [pc, #156]	; (800de9c <_tx_timer_thread_entry+0x1f0>)
 800ddfe:	2200      	movs	r2, #0
 800de00:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de06:	429a      	cmp	r2, r3
 800de08:	d105      	bne.n	800de16 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800de0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de0c:	2200      	movs	r2, #0
 800de0e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800de10:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800de12:	f7ff feb1 	bl	800db78 <_tx_timer_system_activate>
 800de16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de18:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	f383 8810 	msr	PRIMASK, r3
}
 800de20:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de22:	f3ef 8310 	mrs	r3, PRIMASK
 800de26:	623b      	str	r3, [r7, #32]
    return(posture);
 800de28:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800de2a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800de2c:	b672      	cpsid	i
    return(int_posture);
 800de2e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800de30:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2b00      	cmp	r3, #0
 800de36:	f47f af7c 	bne.w	800dd32 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800de3a:	4b17      	ldr	r3, [pc, #92]	; (800de98 <_tx_timer_thread_entry+0x1ec>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d116      	bne.n	800de70 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800de42:	4b17      	ldr	r3, [pc, #92]	; (800dea0 <_tx_timer_thread_entry+0x1f4>)
 800de44:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800de46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de48:	2203      	movs	r2, #3
 800de4a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800de4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de4e:	2201      	movs	r2, #1
 800de50:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800de52:	4b14      	ldr	r3, [pc, #80]	; (800dea4 <_tx_timer_thread_entry+0x1f8>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	3301      	adds	r3, #1
 800de58:	4a12      	ldr	r2, [pc, #72]	; (800dea4 <_tx_timer_thread_entry+0x1f8>)
 800de5a:	6013      	str	r3, [r2, #0]
 800de5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de5e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	f383 8810 	msr	PRIMASK, r3
}
 800de66:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800de68:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800de6a:	f7ff fadb 	bl	800d424 <_tx_thread_system_suspend>
 800de6e:	e728      	b.n	800dcc2 <_tx_timer_thread_entry+0x16>
 800de70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de72:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	f383 8810 	msr	PRIMASK, r3
}
 800de7a:	bf00      	nop
            TX_DISABLE
 800de7c:	e721      	b.n	800dcc2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800de7e:	bf00      	nop
 800de80:	3760      	adds	r7, #96	; 0x60
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	4154494d 	.word	0x4154494d
 800de8c:	20001808 	.word	0x20001808
 800de90:	20001804 	.word	0x20001804
 800de94:	20001800 	.word	0x20001800
 800de98:	2000180c 	.word	0x2000180c
 800de9c:	20001818 	.word	0x20001818
 800dea0:	2000181c 	.word	0x2000181c
 800dea4:	2000176c 	.word	0x2000176c

0800dea8 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 800dea8:	b480      	push	{r7}
 800deaa:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 800deac:	4b0b      	ldr	r3, [pc, #44]	; (800dedc <_tx_trace_initialize+0x34>)
 800deae:	2200      	movs	r2, #0
 800deb0:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 800deb2:	4b0b      	ldr	r3, [pc, #44]	; (800dee0 <_tx_trace_initialize+0x38>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 800deb8:	4b0a      	ldr	r3, [pc, #40]	; (800dee4 <_tx_trace_initialize+0x3c>)
 800deba:	2200      	movs	r2, #0
 800debc:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 800debe:	4b0a      	ldr	r3, [pc, #40]	; (800dee8 <_tx_trace_initialize+0x40>)
 800dec0:	2200      	movs	r2, #0
 800dec2:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 800dec4:	4b09      	ldr	r3, [pc, #36]	; (800deec <_tx_trace_initialize+0x44>)
 800dec6:	2200      	movs	r2, #0
 800dec8:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 800deca:	4b09      	ldr	r3, [pc, #36]	; (800def0 <_tx_trace_initialize+0x48>)
 800decc:	2200      	movs	r2, #0
 800dece:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 800ded0:	bf00      	nop
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	20001cdc 	.word	0x20001cdc
 800dee0:	20001ce0 	.word	0x20001ce0
 800dee4:	20001ce4 	.word	0x20001ce4
 800dee8:	20001ce8 	.word	0x20001ce8
 800deec:	20001cec 	.word	0x20001cec
 800def0:	20001cf0 	.word	0x20001cf0

0800def4 <_tx_trace_object_register>:
/*                                            check for null name,        */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 800def4:	b480      	push	{r7}
 800def6:	b08d      	sub	sp, #52	; 0x34
 800def8:	af00      	add	r7, sp, #0
 800defa:	60b9      	str	r1, [r7, #8]
 800defc:	607a      	str	r2, [r7, #4]
 800defe:	603b      	str	r3, [r7, #0]
 800df00:	4603      	mov	r3, r0
 800df02:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 800df04:	4b6f      	ldr	r3, [pc, #444]	; (800e0c4 <_tx_trace_object_register+0x1d0>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f000 80d5 	beq.w	800e0b8 <_tx_trace_object_register+0x1c4>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 800df0e:	4b6e      	ldr	r3, [pc, #440]	; (800e0c8 <_tx_trace_object_register+0x1d4>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 800df14:	4b6d      	ldr	r3, [pc, #436]	; (800e0cc <_tx_trace_object_register+0x1d8>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f000 80cd 	beq.w	800e0b8 <_tx_trace_object_register+0x1c4>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 800df1e:	6a3b      	ldr	r3, [r7, #32]
 800df20:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 800df22:	2300      	movs	r3, #0
 800df24:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 800df26:	4b6a      	ldr	r3, [pc, #424]	; (800e0d0 <_tx_trace_object_register+0x1dc>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800df2c:	4b65      	ldr	r3, [pc, #404]	; (800e0c4 <_tx_trace_object_register+0x1d0>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 800df32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df34:	4613      	mov	r3, r2
 800df36:	005b      	lsls	r3, r3, #1
 800df38:	4413      	add	r3, r2
 800df3a:	011b      	lsls	r3, r3, #4
 800df3c:	461a      	mov	r2, r3
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	4413      	add	r3, r2
 800df42:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d103      	bne.n	800df58 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800df50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df52:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800df54:	2301      	movs	r3, #1
 800df56:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	685a      	ldr	r2, [r3, #4]
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	429a      	cmp	r2, r3
 800df60:	d103      	bne.n	800df6a <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800df62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df64:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800df66:	2301      	movs	r3, #1
 800df68:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 800df6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d02d      	beq.n	800dfcc <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	2b01      	cmp	r3, #1
 800df76:	d11a      	bne.n	800dfae <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 800df78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df7a:	6a3b      	ldr	r3, [r7, #32]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d102      	bne.n	800df86 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 800df80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df82:	62bb      	str	r3, [r7, #40]	; 0x28
 800df84:	e013      	b.n	800dfae <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800df86:	4b4f      	ldr	r3, [pc, #316]	; (800e0c4 <_tx_trace_object_register+0x1d0>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800df8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df8e:	4613      	mov	r3, r2
 800df90:	005b      	lsls	r3, r3, #1
 800df92:	4413      	add	r3, r2
 800df94:	011b      	lsls	r3, r3, #4
 800df96:	461a      	mov	r2, r3
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	4413      	add	r3, r2
 800df9c:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 800dfa2:	69bb      	ldr	r3, [r7, #24]
 800dfa4:	785b      	ldrb	r3, [r3, #1]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d001      	beq.n	800dfae <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 800dfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfac:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 800dfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 800dfb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfb6:	6a3b      	ldr	r3, [r7, #32]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d301      	bcc.n	800dfc0 <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 800dfc0:	4b43      	ldr	r3, [pc, #268]	; (800e0d0 <_tx_trace_object_register+0x1dc>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d1b0      	bne.n	800df2c <_tx_trace_object_register+0x38>
 800dfca:	e000      	b.n	800dfce <_tx_trace_object_register+0xda>
                    break;
 800dfcc:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 800dfce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfd0:	6a3b      	ldr	r3, [r7, #32]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d270      	bcs.n	800e0b8 <_tx_trace_object_register+0x1c4>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 800dfd6:	4b3d      	ldr	r3, [pc, #244]	; (800e0cc <_tx_trace_object_register+0x1d8>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	4a3b      	ldr	r2, [pc, #236]	; (800e0cc <_tx_trace_object_register+0x1d8>)
 800dfde:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 800dfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	6a3a      	ldr	r2, [r7, #32]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d904      	bls.n	800dff4 <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 800dfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfec:	3301      	adds	r3, #1
 800dfee:	4a38      	ldr	r2, [pc, #224]	; (800e0d0 <_tx_trace_object_register+0x1dc>)
 800dff0:	6013      	str	r3, [r2, #0]
 800dff2:	e002      	b.n	800dffa <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 800dff4:	4b36      	ldr	r3, [pc, #216]	; (800e0d0 <_tx_trace_object_register+0x1dc>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800dffa:	4b32      	ldr	r3, [pc, #200]	; (800e0c4 <_tx_trace_object_register+0x1d0>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800e000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e002:	4613      	mov	r3, r2
 800e004:	005b      	lsls	r3, r3, #1
 800e006:	4413      	add	r3, r2
 800e008:	011b      	lsls	r3, r3, #4
 800e00a:	461a      	mov	r2, r3
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	4413      	add	r3, r2
 800e010:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	2200      	movs	r2, #0
 800e01a:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 800e01c:	69bb      	ldr	r3, [r7, #24]
 800e01e:	7bfa      	ldrb	r2, [r7, #15]
 800e020:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 800e022:	68ba      	ldr	r2, [r7, #8]
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 800e028:	69bb      	ldr	r3, [r7, #24]
 800e02a:	683a      	ldr	r2, [r7, #0]
 800e02c:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e032:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800e034:	2300      	movs	r3, #0
 800e036:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e038:	e017      	b.n	800e06a <_tx_trace_object_register+0x176>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 800e03e:	69fa      	ldr	r2, [r7, #28]
 800e040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e042:	4413      	add	r3, r2
 800e044:	61fb      	str	r3, [r7, #28]

                    /* Determine if object_name (work_ptr) is null.  */
                    if (work_ptr == TX_NULL)
 800e046:	69fb      	ldr	r3, [r7, #28]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d012      	beq.n	800e072 <_tx_trace_object_register+0x17e>
                    {
                        break;
                    }

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 800e04c:	69fb      	ldr	r3, [r7, #28]
 800e04e:	7819      	ldrb	r1, [r3, #0]
 800e050:	69ba      	ldr	r2, [r7, #24]
 800e052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e054:	4413      	add	r3, r2
 800e056:	3310      	adds	r3, #16
 800e058:	460a      	mov	r2, r1
 800e05a:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d008      	beq.n	800e076 <_tx_trace_object_register+0x182>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800e064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e066:	3301      	adds	r3, #1
 800e068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06c:	2b1e      	cmp	r3, #30
 800e06e:	d9e4      	bls.n	800e03a <_tx_trace_object_register+0x146>
 800e070:	e002      	b.n	800e078 <_tx_trace_object_register+0x184>
                        break;
 800e072:	bf00      	nop
 800e074:	e000      	b.n	800e078 <_tx_trace_object_register+0x184>
                    {
                        break;
 800e076:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 800e078:	69ba      	ldr	r2, [r7, #24]
 800e07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07c:	4413      	add	r3, r2
 800e07e:	3310      	adds	r3, #16
 800e080:	2200      	movs	r2, #0
 800e082:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 800e084:	7bfb      	ldrb	r3, [r7, #15]
 800e086:	2b01      	cmp	r3, #1
 800e088:	d110      	bne.n	800e0ac <_tx_trace_object_register+0x1b8>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e092:	0a1b      	lsrs	r3, r3, #8
 800e094:	b2db      	uxtb	r3, r3
 800e096:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e09a:	b2da      	uxtb	r2, r3
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a4:	b2da      	uxtb	r2, r3
 800e0a6:	69bb      	ldr	r3, [r7, #24]
 800e0a8:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 800e0aa:	e005      	b.n	800e0b8 <_tx_trace_object_register+0x1c4>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 800e0b2:	69bb      	ldr	r3, [r7, #24]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	70da      	strb	r2, [r3, #3]
}
 800e0b8:	bf00      	nop
 800e0ba:	3734      	adds	r7, #52	; 0x34
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr
 800e0c4:	20001ce0 	.word	0x20001ce0
 800e0c8:	20001cfc 	.word	0x20001cfc
 800e0cc:	20001d00 	.word	0x20001d00
 800e0d0:	20001d04 	.word	0x20001d04

0800e0d4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b092      	sub	sp, #72	; 0x48
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
 800e0e0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d102      	bne.n	800e0f2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e0ec:	2302      	movs	r3, #2
 800e0ee:	647b      	str	r3, [r7, #68]	; 0x44
 800e0f0:	e075      	b.n	800e1de <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800e0f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0f4:	2b34      	cmp	r3, #52	; 0x34
 800e0f6:	d002      	beq.n	800e0fe <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e0f8:	2302      	movs	r3, #2
 800e0fa:	647b      	str	r3, [r7, #68]	; 0x44
 800e0fc:	e06f      	b.n	800e1de <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e0fe:	f3ef 8310 	mrs	r3, PRIMASK
 800e102:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e106:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e108:	b672      	cpsid	i
    return(int_posture);
 800e10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e10c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e10e:	4b3b      	ldr	r3, [pc, #236]	; (800e1fc <_txe_byte_pool_create+0x128>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	3301      	adds	r3, #1
 800e114:	4a39      	ldr	r2, [pc, #228]	; (800e1fc <_txe_byte_pool_create+0x128>)
 800e116:	6013      	str	r3, [r2, #0]
 800e118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11e:	f383 8810 	msr	PRIMASK, r3
}
 800e122:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800e124:	4b36      	ldr	r3, [pc, #216]	; (800e200 <_txe_byte_pool_create+0x12c>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e12a:	2300      	movs	r3, #0
 800e12c:	643b      	str	r3, [r7, #64]	; 0x40
 800e12e:	e009      	b.n	800e144 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e134:	429a      	cmp	r2, r3
 800e136:	d00b      	beq.n	800e150 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800e138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e13c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e13e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e140:	3301      	adds	r3, #1
 800e142:	643b      	str	r3, [r7, #64]	; 0x40
 800e144:	4b2f      	ldr	r3, [pc, #188]	; (800e204 <_txe_byte_pool_create+0x130>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d3f0      	bcc.n	800e130 <_txe_byte_pool_create+0x5c>
 800e14e:	e000      	b.n	800e152 <_txe_byte_pool_create+0x7e>
                break;
 800e150:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e152:	f3ef 8310 	mrs	r3, PRIMASK
 800e156:	623b      	str	r3, [r7, #32]
    return(posture);
 800e158:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e15a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e15c:	b672      	cpsid	i
    return(int_posture);
 800e15e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e160:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e162:	4b26      	ldr	r3, [pc, #152]	; (800e1fc <_txe_byte_pool_create+0x128>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	3b01      	subs	r3, #1
 800e168:	4a24      	ldr	r2, [pc, #144]	; (800e1fc <_txe_byte_pool_create+0x128>)
 800e16a:	6013      	str	r3, [r2, #0]
 800e16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e172:	f383 8810 	msr	PRIMASK, r3
}
 800e176:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e178:	f7fe ff60 	bl	800d03c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800e17c:	68fa      	ldr	r2, [r7, #12]
 800e17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e180:	429a      	cmp	r2, r3
 800e182:	d102      	bne.n	800e18a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800e184:	2302      	movs	r3, #2
 800e186:	647b      	str	r3, [r7, #68]	; 0x44
 800e188:	e029      	b.n	800e1de <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d102      	bne.n	800e196 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800e190:	2303      	movs	r3, #3
 800e192:	647b      	str	r3, [r7, #68]	; 0x44
 800e194:	e023      	b.n	800e1de <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	2b63      	cmp	r3, #99	; 0x63
 800e19a:	d802      	bhi.n	800e1a2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800e19c:	2305      	movs	r3, #5
 800e19e:	647b      	str	r3, [r7, #68]	; 0x44
 800e1a0:	e01d      	b.n	800e1de <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e1a2:	4b19      	ldr	r3, [pc, #100]	; (800e208 <_txe_byte_pool_create+0x134>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1aa:	4a18      	ldr	r2, [pc, #96]	; (800e20c <_txe_byte_pool_create+0x138>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d101      	bne.n	800e1b4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e1b0:	2313      	movs	r3, #19
 800e1b2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e1b4:	f3ef 8305 	mrs	r3, IPSR
 800e1b8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e1ba:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e1bc:	4b14      	ldr	r3, [pc, #80]	; (800e210 <_txe_byte_pool_create+0x13c>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4313      	orrs	r3, r2
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d00b      	beq.n	800e1de <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e1c6:	f3ef 8305 	mrs	r3, IPSR
 800e1ca:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e1cc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e1ce:	4b10      	ldr	r3, [pc, #64]	; (800e210 <_txe_byte_pool_create+0x13c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e1d8:	d201      	bcs.n	800e1de <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e1da:	2313      	movs	r3, #19
 800e1dc:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e1de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d106      	bne.n	800e1f2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	68b9      	ldr	r1, [r7, #8]
 800e1ea:	68f8      	ldr	r0, [r7, #12]
 800e1ec:	f7fd f88a 	bl	800b304 <_tx_byte_pool_create>
 800e1f0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e1f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3748      	adds	r7, #72	; 0x48
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	2000176c 	.word	0x2000176c
 800e200:	200016c4 	.word	0x200016c4
 800e204:	200016c8 	.word	0x200016c8
 800e208:	200016d4 	.word	0x200016d4
 800e20c:	2000181c 	.word	0x2000181c
 800e210:	2000000c 	.word	0x2000000c

0800e214 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b094      	sub	sp, #80	; 0x50
 800e218:	af02      	add	r7, sp, #8
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]
 800e220:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e222:	2300      	movs	r3, #0
 800e224:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d102      	bne.n	800e232 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e22c:	2309      	movs	r3, #9
 800e22e:	647b      	str	r3, [r7, #68]	; 0x44
 800e230:	e083      	b.n	800e33a <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800e232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e234:	2b38      	cmp	r3, #56	; 0x38
 800e236:	d002      	beq.n	800e23e <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e238:	2309      	movs	r3, #9
 800e23a:	647b      	str	r3, [r7, #68]	; 0x44
 800e23c:	e07d      	b.n	800e33a <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e23e:	f3ef 8310 	mrs	r3, PRIMASK
 800e242:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e246:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e248:	b672      	cpsid	i
    return(int_posture);
 800e24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e24c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e24e:	4b43      	ldr	r3, [pc, #268]	; (800e35c <_txe_queue_create+0x148>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	3301      	adds	r3, #1
 800e254:	4a41      	ldr	r2, [pc, #260]	; (800e35c <_txe_queue_create+0x148>)
 800e256:	6013      	str	r3, [r2, #0]
 800e258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25e:	f383 8810 	msr	PRIMASK, r3
}
 800e262:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800e264:	4b3e      	ldr	r3, [pc, #248]	; (800e360 <_txe_queue_create+0x14c>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e26a:	2300      	movs	r3, #0
 800e26c:	643b      	str	r3, [r7, #64]	; 0x40
 800e26e:	e009      	b.n	800e284 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e274:	429a      	cmp	r2, r3
 800e276:	d00b      	beq.n	800e290 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800e278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e27c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e280:	3301      	adds	r3, #1
 800e282:	643b      	str	r3, [r7, #64]	; 0x40
 800e284:	4b37      	ldr	r3, [pc, #220]	; (800e364 <_txe_queue_create+0x150>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d3f0      	bcc.n	800e270 <_txe_queue_create+0x5c>
 800e28e:	e000      	b.n	800e292 <_txe_queue_create+0x7e>
                break;
 800e290:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e292:	f3ef 8310 	mrs	r3, PRIMASK
 800e296:	623b      	str	r3, [r7, #32]
    return(posture);
 800e298:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e29a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e29c:	b672      	cpsid	i
    return(int_posture);
 800e29e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e2a0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e2a2:	4b2e      	ldr	r3, [pc, #184]	; (800e35c <_txe_queue_create+0x148>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	3b01      	subs	r3, #1
 800e2a8:	4a2c      	ldr	r2, [pc, #176]	; (800e35c <_txe_queue_create+0x148>)
 800e2aa:	6013      	str	r3, [r2, #0]
 800e2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b2:	f383 8810 	msr	PRIMASK, r3
}
 800e2b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e2b8:	f7fe fec0 	bl	800d03c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800e2bc:	68fa      	ldr	r2, [r7, #12]
 800e2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d102      	bne.n	800e2ca <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800e2c4:	2309      	movs	r3, #9
 800e2c6:	647b      	str	r3, [r7, #68]	; 0x44
 800e2c8:	e037      	b.n	800e33a <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d102      	bne.n	800e2d6 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800e2d0:	2303      	movs	r3, #3
 800e2d2:	647b      	str	r3, [r7, #68]	; 0x44
 800e2d4:	e031      	b.n	800e33a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d102      	bne.n	800e2e2 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e2dc:	2305      	movs	r3, #5
 800e2de:	647b      	str	r3, [r7, #68]	; 0x44
 800e2e0:	e02b      	b.n	800e33a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2b10      	cmp	r3, #16
 800e2e6:	d902      	bls.n	800e2ee <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e2e8:	2305      	movs	r3, #5
 800e2ea:	647b      	str	r3, [r7, #68]	; 0x44
 800e2ec:	e025      	b.n	800e33a <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800e2ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2f0:	089b      	lsrs	r3, r3, #2
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d902      	bls.n	800e2fe <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800e2f8:	2305      	movs	r3, #5
 800e2fa:	647b      	str	r3, [r7, #68]	; 0x44
 800e2fc:	e01d      	b.n	800e33a <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e2fe:	4b1a      	ldr	r3, [pc, #104]	; (800e368 <_txe_queue_create+0x154>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e306:	4a19      	ldr	r2, [pc, #100]	; (800e36c <_txe_queue_create+0x158>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d101      	bne.n	800e310 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e30c:	2313      	movs	r3, #19
 800e30e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e310:	f3ef 8305 	mrs	r3, IPSR
 800e314:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e316:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e318:	4b15      	ldr	r3, [pc, #84]	; (800e370 <_txe_queue_create+0x15c>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4313      	orrs	r3, r2
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d00b      	beq.n	800e33a <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e322:	f3ef 8305 	mrs	r3, IPSR
 800e326:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e328:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e32a:	4b11      	ldr	r3, [pc, #68]	; (800e370 <_txe_queue_create+0x15c>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4313      	orrs	r3, r2
 800e330:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e334:	d201      	bcs.n	800e33a <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e336:	2313      	movs	r3, #19
 800e338:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e33a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d108      	bne.n	800e352 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800e340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	68b9      	ldr	r1, [r7, #8]
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	f7fd f9f2 	bl	800b734 <_tx_queue_create>
 800e350:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e354:	4618      	mov	r0, r3
 800e356:	3748      	adds	r7, #72	; 0x48
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	2000176c 	.word	0x2000176c
 800e360:	200016a4 	.word	0x200016a4
 800e364:	200016a8 	.word	0x200016a8
 800e368:	200016d4 	.word	0x200016d4
 800e36c:	2000181c 	.word	0x2000181c
 800e370:	2000000c 	.word	0x2000000c

0800e374 <_txe_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d102      	bne.n	800e388 <_txe_queue_flush+0x14>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e382:	2309      	movs	r3, #9
 800e384:	60fb      	str	r3, [r7, #12]
 800e386:	e00b      	b.n	800e3a0 <_txe_queue_flush+0x2c>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4a07      	ldr	r2, [pc, #28]	; (800e3ac <_txe_queue_flush+0x38>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d002      	beq.n	800e398 <_txe_queue_flush+0x24>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e392:	2309      	movs	r3, #9
 800e394:	60fb      	str	r3, [r7, #12]
 800e396:	e003      	b.n	800e3a0 <_txe_queue_flush+0x2c>
    }
    else
    {

        /* Call actual queue flush function.  */
        status =  _tx_queue_flush(queue_ptr);
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f7fd facb 	bl	800b934 <_tx_queue_flush>
 800e39e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3710      	adds	r7, #16
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	51554555 	.word	0x51554555

0800e3b0 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b088      	sub	sp, #32
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d102      	bne.n	800e3cc <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e3c6:	2309      	movs	r3, #9
 800e3c8:	61fb      	str	r3, [r7, #28]
 800e3ca:	e025      	b.n	800e418 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a18      	ldr	r2, [pc, #96]	; (800e434 <_txe_queue_receive+0x84>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d002      	beq.n	800e3dc <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e3d6:	2309      	movs	r3, #9
 800e3d8:	61fb      	str	r3, [r7, #28]
 800e3da:	e01d      	b.n	800e418 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d102      	bne.n	800e3e8 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e3e2:	2303      	movs	r3, #3
 800e3e4:	61fb      	str	r3, [r7, #28]
 800e3e6:	e017      	b.n	800e418 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d014      	beq.n	800e418 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e3ee:	f3ef 8305 	mrs	r3, IPSR
 800e3f2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e3f4:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e3f6:	4b10      	ldr	r3, [pc, #64]	; (800e438 <_txe_queue_receive+0x88>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d002      	beq.n	800e406 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e400:	2304      	movs	r3, #4
 800e402:	61fb      	str	r3, [r7, #28]
 800e404:	e008      	b.n	800e418 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e406:	4b0d      	ldr	r3, [pc, #52]	; (800e43c <_txe_queue_receive+0x8c>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	4a0c      	ldr	r2, [pc, #48]	; (800e440 <_txe_queue_receive+0x90>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d101      	bne.n	800e418 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e414:	2304      	movs	r3, #4
 800e416:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d105      	bne.n	800e42a <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	68b9      	ldr	r1, [r7, #8]
 800e422:	68f8      	ldr	r0, [r7, #12]
 800e424:	f7fd fb98 	bl	800bb58 <_tx_queue_receive>
 800e428:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e42a:	69fb      	ldr	r3, [r7, #28]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3720      	adds	r7, #32
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	51554555 	.word	0x51554555
 800e438:	2000000c 	.word	0x2000000c
 800e43c:	200016d4 	.word	0x200016d4
 800e440:	2000181c 	.word	0x2000181c

0800e444 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b088      	sub	sp, #32
 800e448:	af00      	add	r7, sp, #0
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	60b9      	str	r1, [r7, #8]
 800e44e:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e450:	2300      	movs	r3, #0
 800e452:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d102      	bne.n	800e460 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e45a:	2309      	movs	r3, #9
 800e45c:	61fb      	str	r3, [r7, #28]
 800e45e:	e025      	b.n	800e4ac <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a18      	ldr	r2, [pc, #96]	; (800e4c8 <_txe_queue_send+0x84>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d002      	beq.n	800e470 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e46a:	2309      	movs	r3, #9
 800e46c:	61fb      	str	r3, [r7, #28]
 800e46e:	e01d      	b.n	800e4ac <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d102      	bne.n	800e47c <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e476:	2303      	movs	r3, #3
 800e478:	61fb      	str	r3, [r7, #28]
 800e47a:	e017      	b.n	800e4ac <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d014      	beq.n	800e4ac <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e482:	f3ef 8305 	mrs	r3, IPSR
 800e486:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e488:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e48a:	4b10      	ldr	r3, [pc, #64]	; (800e4cc <_txe_queue_send+0x88>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	4313      	orrs	r3, r2
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e494:	2304      	movs	r3, #4
 800e496:	61fb      	str	r3, [r7, #28]
 800e498:	e008      	b.n	800e4ac <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e49a:	4b0d      	ldr	r3, [pc, #52]	; (800e4d0 <_txe_queue_send+0x8c>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e4a0:	69bb      	ldr	r3, [r7, #24]
 800e4a2:	4a0c      	ldr	r2, [pc, #48]	; (800e4d4 <_txe_queue_send+0x90>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d101      	bne.n	800e4ac <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e4a8:	2304      	movs	r3, #4
 800e4aa:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d105      	bne.n	800e4be <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	68b9      	ldr	r1, [r7, #8]
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f7fd fd9c 	bl	800bff4 <_tx_queue_send>
 800e4bc:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e4be:	69fb      	ldr	r3, [r7, #28]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3720      	adds	r7, #32
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	51554555 	.word	0x51554555
 800e4cc:	2000000c 	.word	0x2000000c
 800e4d0:	200016d4 	.word	0x200016d4
 800e4d4:	2000181c 	.word	0x2000181c

0800e4d8 <_txe_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d102      	bne.n	800e4ee <_txe_semaphore_ceiling_put+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e4e8:	230c      	movs	r3, #12
 800e4ea:	60fb      	str	r3, [r7, #12]
 800e4ec:	e012      	b.n	800e514 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a0b      	ldr	r2, [pc, #44]	; (800e520 <_txe_semaphore_ceiling_put+0x48>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d002      	beq.n	800e4fe <_txe_semaphore_ceiling_put+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e4f8:	230c      	movs	r3, #12
 800e4fa:	60fb      	str	r3, [r7, #12]
 800e4fc:	e00a      	b.n	800e514 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Determine if the ceiling is valid - must be greater than 1.  */
    else if (ceiling == ((ULONG) 0))
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d102      	bne.n	800e50a <_txe_semaphore_ceiling_put+0x32>
    {

        /* Invalid ceiling, return error.  */
        status =  TX_INVALID_CEILING;
 800e504:	2322      	movs	r3, #34	; 0x22
 800e506:	60fb      	str	r3, [r7, #12]
 800e508:	e004      	b.n	800e514 <_txe_semaphore_ceiling_put+0x3c>
    }
    else
    {

        /* Call actual semaphore ceiling put function.  */
        status =  _tx_semaphore_ceiling_put(semaphore_ptr, ceiling);
 800e50a:	6839      	ldr	r1, [r7, #0]
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f7fd ff23 	bl	800c358 <_tx_semaphore_ceiling_put>
 800e512:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e514:	68fb      	ldr	r3, [r7, #12]
}
 800e516:	4618      	mov	r0, r3
 800e518:	3710      	adds	r7, #16
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	53454d41 	.word	0x53454d41

0800e524 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b092      	sub	sp, #72	; 0x48
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	607a      	str	r2, [r7, #4]
 800e530:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e532:	2300      	movs	r3, #0
 800e534:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d102      	bne.n	800e542 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e53c:	230c      	movs	r3, #12
 800e53e:	647b      	str	r3, [r7, #68]	; 0x44
 800e540:	e054      	b.n	800e5ec <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	2b1c      	cmp	r3, #28
 800e546:	d002      	beq.n	800e54e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e548:	230c      	movs	r3, #12
 800e54a:	647b      	str	r3, [r7, #68]	; 0x44
 800e54c:	e04e      	b.n	800e5ec <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e54e:	f3ef 8310 	mrs	r3, PRIMASK
 800e552:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e556:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e558:	b672      	cpsid	i
    return(int_posture);
 800e55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e55c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e55e:	4b36      	ldr	r3, [pc, #216]	; (800e638 <_txe_semaphore_create+0x114>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	3301      	adds	r3, #1
 800e564:	4a34      	ldr	r2, [pc, #208]	; (800e638 <_txe_semaphore_create+0x114>)
 800e566:	6013      	str	r3, [r2, #0]
 800e568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56e:	f383 8810 	msr	PRIMASK, r3
}
 800e572:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800e574:	4b31      	ldr	r3, [pc, #196]	; (800e63c <_txe_semaphore_create+0x118>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e57a:	2300      	movs	r3, #0
 800e57c:	643b      	str	r3, [r7, #64]	; 0x40
 800e57e:	e009      	b.n	800e594 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800e580:	68fa      	ldr	r2, [r7, #12]
 800e582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e584:	429a      	cmp	r2, r3
 800e586:	d00b      	beq.n	800e5a0 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800e588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e58a:	695b      	ldr	r3, [r3, #20]
 800e58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e58e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e590:	3301      	adds	r3, #1
 800e592:	643b      	str	r3, [r7, #64]	; 0x40
 800e594:	4b2a      	ldr	r3, [pc, #168]	; (800e640 <_txe_semaphore_create+0x11c>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d3f0      	bcc.n	800e580 <_txe_semaphore_create+0x5c>
 800e59e:	e000      	b.n	800e5a2 <_txe_semaphore_create+0x7e>
                break;
 800e5a0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e5a2:	f3ef 8310 	mrs	r3, PRIMASK
 800e5a6:	623b      	str	r3, [r7, #32]
    return(posture);
 800e5a8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e5aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e5ac:	b672      	cpsid	i
    return(int_posture);
 800e5ae:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e5b0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e5b2:	4b21      	ldr	r3, [pc, #132]	; (800e638 <_txe_semaphore_create+0x114>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	3b01      	subs	r3, #1
 800e5b8:	4a1f      	ldr	r2, [pc, #124]	; (800e638 <_txe_semaphore_create+0x114>)
 800e5ba:	6013      	str	r3, [r2, #0]
 800e5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5be:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c2:	f383 8810 	msr	PRIMASK, r3
}
 800e5c6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e5c8:	f7fe fd38 	bl	800d03c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800e5cc:	68fa      	ldr	r2, [r7, #12]
 800e5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d102      	bne.n	800e5da <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800e5d4:	230c      	movs	r3, #12
 800e5d6:	647b      	str	r3, [r7, #68]	; 0x44
 800e5d8:	e008      	b.n	800e5ec <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e5da:	4b1a      	ldr	r3, [pc, #104]	; (800e644 <_txe_semaphore_create+0x120>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5e2:	4a19      	ldr	r2, [pc, #100]	; (800e648 <_txe_semaphore_create+0x124>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d101      	bne.n	800e5ec <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e5e8:	2313      	movs	r3, #19
 800e5ea:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e5ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d114      	bne.n	800e61c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e5f2:	f3ef 8305 	mrs	r3, IPSR
 800e5f6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e5f8:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e5fa:	4b14      	ldr	r3, [pc, #80]	; (800e64c <_txe_semaphore_create+0x128>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4313      	orrs	r3, r2
 800e600:	2b00      	cmp	r3, #0
 800e602:	d00b      	beq.n	800e61c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e604:	f3ef 8305 	mrs	r3, IPSR
 800e608:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e60a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e60c:	4b0f      	ldr	r3, [pc, #60]	; (800e64c <_txe_semaphore_create+0x128>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4313      	orrs	r3, r2
 800e612:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e616:	d201      	bcs.n	800e61c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e618:	2313      	movs	r3, #19
 800e61a:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e61c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d105      	bne.n	800e62e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	68b9      	ldr	r1, [r7, #8]
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f7fe f804 	bl	800c634 <_tx_semaphore_create>
 800e62c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e62e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e630:	4618      	mov	r0, r3
 800e632:	3748      	adds	r7, #72	; 0x48
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	2000176c 	.word	0x2000176c
 800e63c:	2000169c 	.word	0x2000169c
 800e640:	200016a0 	.word	0x200016a0
 800e644:	200016d4 	.word	0x200016d4
 800e648:	2000181c 	.word	0x2000181c
 800e64c:	2000000c 	.word	0x2000000c

0800e650 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b086      	sub	sp, #24
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e65a:	2300      	movs	r3, #0
 800e65c:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d102      	bne.n	800e66a <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e664:	230c      	movs	r3, #12
 800e666:	617b      	str	r3, [r7, #20]
 800e668:	e01f      	b.n	800e6aa <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4a15      	ldr	r2, [pc, #84]	; (800e6c4 <_txe_semaphore_get+0x74>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d002      	beq.n	800e67a <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e674:	230c      	movs	r3, #12
 800e676:	617b      	str	r3, [r7, #20]
 800e678:	e017      	b.n	800e6aa <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d014      	beq.n	800e6aa <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e680:	f3ef 8305 	mrs	r3, IPSR
 800e684:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e686:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e688:	4b0f      	ldr	r3, [pc, #60]	; (800e6c8 <_txe_semaphore_get+0x78>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4313      	orrs	r3, r2
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d002      	beq.n	800e698 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e692:	2304      	movs	r3, #4
 800e694:	617b      	str	r3, [r7, #20]
 800e696:	e008      	b.n	800e6aa <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e698:	4b0c      	ldr	r3, [pc, #48]	; (800e6cc <_txe_semaphore_get+0x7c>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	4a0b      	ldr	r2, [pc, #44]	; (800e6d0 <_txe_semaphore_get+0x80>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d101      	bne.n	800e6aa <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e6a6:	2304      	movs	r3, #4
 800e6a8:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d104      	bne.n	800e6ba <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800e6b0:	6839      	ldr	r1, [r7, #0]
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f7fe f89e 	bl	800c7f4 <_tx_semaphore_get>
 800e6b8:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800e6ba:	697b      	ldr	r3, [r7, #20]
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3718      	adds	r7, #24
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}
 800e6c4:	53454d41 	.word	0x53454d41
 800e6c8:	2000000c 	.word	0x2000000c
 800e6cc:	200016d4 	.word	0x200016d4
 800e6d0:	2000181c 	.word	0x2000181c

0800e6d4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b09a      	sub	sp, #104	; 0x68
 800e6d8:	af06      	add	r7, sp, #24
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	607a      	str	r2, [r7, #4]
 800e6e0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d102      	bne.n	800e6f2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e6ec:	230e      	movs	r3, #14
 800e6ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6f0:	e0bb      	b.n	800e86a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800e6f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e6f4:	2bb0      	cmp	r3, #176	; 0xb0
 800e6f6:	d002      	beq.n	800e6fe <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e6f8:	230e      	movs	r3, #14
 800e6fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6fc:	e0b5      	b.n	800e86a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e6fe:	f3ef 8310 	mrs	r3, PRIMASK
 800e702:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e704:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e706:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e708:	b672      	cpsid	i
    return(int_posture);
 800e70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e70c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e70e:	4b64      	ldr	r3, [pc, #400]	; (800e8a0 <_txe_thread_create+0x1cc>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	3301      	adds	r3, #1
 800e714:	4a62      	ldr	r2, [pc, #392]	; (800e8a0 <_txe_thread_create+0x1cc>)
 800e716:	6013      	str	r3, [r2, #0]
 800e718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e71a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71e:	f383 8810 	msr	PRIMASK, r3
}
 800e722:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800e724:	2300      	movs	r3, #0
 800e726:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800e728:	4b5e      	ldr	r3, [pc, #376]	; (800e8a4 <_txe_thread_create+0x1d0>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800e72e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e730:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e734:	3b01      	subs	r3, #1
 800e736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e738:	4413      	add	r3, r2
 800e73a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800e73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e740:	2300      	movs	r3, #0
 800e742:	647b      	str	r3, [r7, #68]	; 0x44
 800e744:	e02b      	b.n	800e79e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d101      	bne.n	800e752 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800e74e:	2301      	movs	r3, #1
 800e750:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800e752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e754:	2b01      	cmp	r3, #1
 800e756:	d028      	beq.n	800e7aa <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800e758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e75e:	429a      	cmp	r2, r3
 800e760:	d308      	bcc.n	800e774 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800e762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e764:	691b      	ldr	r3, [r3, #16]
 800e766:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e768:	429a      	cmp	r2, r3
 800e76a:	d203      	bcs.n	800e774 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e76c:	2300      	movs	r3, #0
 800e76e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e770:	2301      	movs	r3, #1
 800e772:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d308      	bcc.n	800e790 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800e77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e780:	691b      	ldr	r3, [r3, #16]
 800e782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e784:	429a      	cmp	r2, r3
 800e786:	d203      	bcs.n	800e790 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e788:	2300      	movs	r3, #0
 800e78a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e78c:	2301      	movs	r3, #1
 800e78e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800e790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e796:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e79a:	3301      	adds	r3, #1
 800e79c:	647b      	str	r3, [r7, #68]	; 0x44
 800e79e:	4b42      	ldr	r3, [pc, #264]	; (800e8a8 <_txe_thread_create+0x1d4>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d3ce      	bcc.n	800e746 <_txe_thread_create+0x72>
 800e7a8:	e000      	b.n	800e7ac <_txe_thread_create+0xd8>
                break;
 800e7aa:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e7ac:	f3ef 8310 	mrs	r3, PRIMASK
 800e7b0:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e7b2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e7b4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e7b6:	b672      	cpsid	i
    return(int_posture);
 800e7b8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e7ba:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e7bc:	4b38      	ldr	r3, [pc, #224]	; (800e8a0 <_txe_thread_create+0x1cc>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	3b01      	subs	r3, #1
 800e7c2:	4a37      	ldr	r2, [pc, #220]	; (800e8a0 <_txe_thread_create+0x1cc>)
 800e7c4:	6013      	str	r3, [r2, #0]
 800e7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7c8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e7ca:	6a3b      	ldr	r3, [r7, #32]
 800e7cc:	f383 8810 	msr	PRIMASK, r3
}
 800e7d0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e7d2:	f7fe fc33 	bl	800d03c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800e7d6:	68fa      	ldr	r2, [r7, #12]
 800e7d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d102      	bne.n	800e7e4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800e7de:	230e      	movs	r3, #14
 800e7e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7e2:	e042      	b.n	800e86a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800e7e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d102      	bne.n	800e7f0 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e7ea:	2303      	movs	r3, #3
 800e7ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7ee:	e03c      	b.n	800e86a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d102      	bne.n	800e7fc <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e7f6:	2303      	movs	r3, #3
 800e7f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7fa:	e036      	b.n	800e86a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800e7fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7fe:	2bc7      	cmp	r3, #199	; 0xc7
 800e800:	d802      	bhi.n	800e808 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800e802:	2305      	movs	r3, #5
 800e804:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e806:	e030      	b.n	800e86a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800e808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e80a:	2b1f      	cmp	r3, #31
 800e80c:	d902      	bls.n	800e814 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800e80e:	230f      	movs	r3, #15
 800e810:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e812:	e02a      	b.n	800e86a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800e814:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e818:	429a      	cmp	r2, r3
 800e81a:	d902      	bls.n	800e822 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800e81c:	2318      	movs	r3, #24
 800e81e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e820:	e023      	b.n	800e86a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800e822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e824:	2b01      	cmp	r3, #1
 800e826:	d902      	bls.n	800e82e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800e828:	2310      	movs	r3, #16
 800e82a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e82c:	e01d      	b.n	800e86a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800e82e:	4b1f      	ldr	r3, [pc, #124]	; (800e8ac <_txe_thread_create+0x1d8>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800e834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e836:	4a1e      	ldr	r2, [pc, #120]	; (800e8b0 <_txe_thread_create+0x1dc>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d101      	bne.n	800e840 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e83c:	2313      	movs	r3, #19
 800e83e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e840:	f3ef 8305 	mrs	r3, IPSR
 800e844:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e846:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e848:	4b1a      	ldr	r3, [pc, #104]	; (800e8b4 <_txe_thread_create+0x1e0>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4313      	orrs	r3, r2
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d00b      	beq.n	800e86a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e852:	f3ef 8305 	mrs	r3, IPSR
 800e856:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e858:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e85a:	4b16      	ldr	r3, [pc, #88]	; (800e8b4 <_txe_thread_create+0x1e0>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	4313      	orrs	r3, r2
 800e860:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e864:	d201      	bcs.n	800e86a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e866:	2313      	movs	r3, #19
 800e868:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e86a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d112      	bne.n	800e896 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e872:	9305      	str	r3, [sp, #20]
 800e874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e876:	9304      	str	r3, [sp, #16]
 800e878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e87a:	9303      	str	r3, [sp, #12]
 800e87c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e87e:	9302      	str	r3, [sp, #8]
 800e880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e882:	9301      	str	r3, [sp, #4]
 800e884:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	68b9      	ldr	r1, [r7, #8]
 800e88e:	68f8      	ldr	r0, [r7, #12]
 800e890:	f7fe f8c6 	bl	800ca20 <_tx_thread_create>
 800e894:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800e896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3750      	adds	r7, #80	; 0x50
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	2000176c 	.word	0x2000176c
 800e8a4:	200016dc 	.word	0x200016dc
 800e8a8:	200016e0 	.word	0x200016e0
 800e8ac:	200016d4 	.word	0x200016d4
 800e8b0:	2000181c 	.word	0x2000181c
 800e8b4:	2000000c 	.word	0x2000000c

0800e8b8 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b086      	sub	sp, #24
 800e8bc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e8be:	f3ef 8310 	mrs	r3, PRIMASK
 800e8c2:	60fb      	str	r3, [r7, #12]
    return(posture);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800e8c6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e8c8:	b672      	cpsid	i
    return(int_posture);
 800e8ca:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 800e8cc:	613b      	str	r3, [r7, #16]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 800e8ce:	463b      	mov	r3, r7
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f000 f83d 	bl	800e950 <tx_timer_get_next>
 800e8d6:	6178      	str	r0, [r7, #20]
            a low power clock needs to be set up.
    */

#ifndef TX_LOW_POWER_TICKLESS
    /* We still want to keep track of time in low power mode. */
    if (timers_active == TX_FALSE)
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d104      	bne.n	800e8e8 <tx_low_power_enter+0x30>
    {
        /* Set the next expiration to 0xFFFFFFF, an indication that the timer sleeps for
           maximum amount of time the HW supports.*/
        tx_low_power_next_expiration = 0xFFFFFFFF;
 800e8de:	f04f 33ff 	mov.w	r3, #4294967295
 800e8e2:	603b      	str	r3, [r7, #0]
        timers_active = TX_TRUE;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	617b      	str	r3, [r7, #20]
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	d103      	bne.n	800e8f6 <tx_low_power_enter+0x3e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7f2 f80d 	bl	8000910 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 800e8f6:	4b07      	ldr	r3, [pc, #28]	; (800e914 <tx_low_power_enter+0x5c>)
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	601a      	str	r2, [r3, #0]
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f383 8810 	msr	PRIMASK, r3
}
 800e906:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 800e908:	f7f2 f82c 	bl	8000964 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 800e90c:	bf00      	nop
 800e90e:	3718      	adds	r7, #24
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}
 800e914:	20001d08 	.word	0x20001d08

0800e918 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 800e91e:	4b0b      	ldr	r3, [pc, #44]	; (800e94c <tx_low_power_exit+0x34>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00d      	beq.n	800e942 <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 800e926:	4b09      	ldr	r3, [pc, #36]	; (800e94c <tx_low_power_exit+0x34>)
 800e928:	2200      	movs	r2, #0
 800e92a:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 800e92c:	f7f2 f828 	bl	8000980 <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 800e930:	f7f2 f834 	bl	800099c <App_ThreadX_LowPower_Timer_Adjust>
 800e934:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d002      	beq.n	800e942 <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 f86f 	bl	800ea20 <tx_time_increment>
        }
    }
}
 800e942:	bf00      	nop
 800e944:	3708      	adds	r7, #8
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	20001d08 	.word	0x20001d08

0800e950 <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 800e950:	b480      	push	{r7}
 800e952:	b08d      	sub	sp, #52	; 0x34
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 800e958:	f04f 33ff 	mov.w	r3, #4294967295
 800e95c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e95e:	f3ef 8310 	mrs	r3, PRIMASK
 800e962:	617b      	str	r3, [r7, #20]
    return(posture);
 800e964:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e966:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e968:	b672      	cpsid	i
    return(int_posture);
 800e96a:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 800e96c:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 800e96e:	4b29      	ldr	r3, [pc, #164]	; (800ea14 <tx_timer_get_next+0xc4>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800e974:	2300      	movs	r3, #0
 800e976:	627b      	str	r3, [r7, #36]	; 0x24
 800e978:	e02f      	b.n	800e9da <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 800e97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d01d      	beq.n	800e9be <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800e982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2b20      	cmp	r3, #32
 800e98e:	d906      	bls.n	800e99e <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 800e990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e996:	4413      	add	r3, r2
 800e998:	3b20      	subs	r3, #32
 800e99a:	623b      	str	r3, [r7, #32]
 800e99c:	e001      	b.n	800e9a2 <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 800e99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a0:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 800e9a2:	69fa      	ldr	r2, [r7, #28]
 800e9a4:	6a3b      	ldr	r3, [r7, #32]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d901      	bls.n	800e9ae <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 800e9aa:	6a3b      	ldr	r3, [r7, #32]
 800e9ac:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800e9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b0:	691b      	ldr	r3, [r3, #16]
 800e9b2:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 800e9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d1e4      	bne.n	800e988 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 800e9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c0:	3304      	adds	r3, #4
 800e9c2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 800e9c4:	4b14      	ldr	r3, [pc, #80]	; (800ea18 <tx_timer_get_next+0xc8>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d302      	bcc.n	800e9d4 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800e9ce:	4b13      	ldr	r3, [pc, #76]	; (800ea1c <tx_timer_get_next+0xcc>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	627b      	str	r3, [r7, #36]	; 0x24
 800e9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9dc:	2b1f      	cmp	r3, #31
 800e9de:	d9cc      	bls.n	800e97a <tx_timer_get_next+0x2a>
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f383 8810 	msr	PRIMASK, r3
}
 800e9ea:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 800e9ec:	69fb      	ldr	r3, [r7, #28]
 800e9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9f2:	d004      	beq.n	800e9fe <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	69fa      	ldr	r2, [r7, #28]
 800e9f8:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	e003      	b.n	800ea06 <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2200      	movs	r2, #0
 800ea02:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 800ea04:	2300      	movs	r3, #0
    }
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3734      	adds	r7, #52	; 0x34
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr
 800ea12:	bf00      	nop
 800ea14:	20001808 	.word	0x20001808
 800ea18:	20001804 	.word	0x20001804
 800ea1c:	20001800 	.word	0x20001800

0800ea20 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b08a      	sub	sp, #40	; 0x28
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f000 809b 	beq.w	800eb66 <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ea30:	f3ef 8310 	mrs	r3, PRIMASK
 800ea34:	613b      	str	r3, [r7, #16]
    return(posture);
 800ea36:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ea38:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ea3a:	b672      	cpsid	i
    return(int_posture);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800ea3e:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 800ea40:	4b4b      	ldr	r3, [pc, #300]	; (800eb70 <tx_time_increment+0x150>)
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4413      	add	r3, r2
 800ea48:	4a49      	ldr	r2, [pc, #292]	; (800eb70 <tx_time_increment+0x150>)
 800ea4a:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 800ea4c:	4b49      	ldr	r3, [pc, #292]	; (800eb74 <tx_time_increment+0x154>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d00e      	beq.n	800ea72 <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 800ea54:	4b47      	ldr	r3, [pc, #284]	; (800eb74 <tx_time_increment+0x154>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	687a      	ldr	r2, [r7, #4]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d206      	bcs.n	800ea6c <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800ea5e:	4b45      	ldr	r3, [pc, #276]	; (800eb74 <tx_time_increment+0x154>)
 800ea60:	681a      	ldr	r2, [r3, #0]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	1ad3      	subs	r3, r2, r3
 800ea66:	4a43      	ldr	r2, [pc, #268]	; (800eb74 <tx_time_increment+0x154>)
 800ea68:	6013      	str	r3, [r2, #0]
 800ea6a:	e002      	b.n	800ea72 <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 800ea6c:	4b41      	ldr	r3, [pc, #260]	; (800eb74 <tx_time_increment+0x154>)
 800ea6e:	2201      	movs	r2, #1
 800ea70:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800ea72:	4b41      	ldr	r3, [pc, #260]	; (800eb78 <tx_time_increment+0x158>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	627b      	str	r3, [r7, #36]	; 0x24
 800ea80:	e046      	b.n	800eb10 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800ea82:	6a3b      	ldr	r3, [r7, #32]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d034      	beq.n	800eaf4 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800ea8a:	6a3b      	ldr	r3, [r7, #32]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	2b20      	cmp	r3, #32
 800ea96:	d908      	bls.n	800eaaa <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	681a      	ldr	r2, [r3, #0]
 800ea9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9e:	4413      	add	r3, r2
 800eaa0:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	601a      	str	r2, [r3, #0]
 800eaa8:	e003      	b.n	800eab2 <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 800eaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaac:	1c5a      	adds	r2, r3, #1
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800eab2:	69fb      	ldr	r3, [r7, #28]
 800eab4:	691b      	ldr	r3, [r3, #16]
 800eab6:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 800eab8:	6a3b      	ldr	r3, [r7, #32]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	69fa      	ldr	r2, [r7, #28]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d1e6      	bne.n	800ea90 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800eac2:	6a3b      	ldr	r3, [r7, #32]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	695b      	ldr	r3, [r3, #20]
 800eac8:	2200      	movs	r2, #0
 800eaca:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 800eacc:	69bb      	ldr	r3, [r7, #24]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d103      	bne.n	800eada <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 800ead2:	6a3b      	ldr	r3, [r7, #32]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	61bb      	str	r3, [r7, #24]
 800ead8:	e009      	b.n	800eaee <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	695b      	ldr	r3, [r3, #20]
 800eade:	6a3a      	ldr	r2, [r7, #32]
 800eae0:	6812      	ldr	r2, [r2, #0]
 800eae2:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 800eae4:	6a3b      	ldr	r3, [r7, #32]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	695a      	ldr	r2, [r3, #20]
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 800eaee:	6a3b      	ldr	r3, [r7, #32]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 800eaf4:	6a3b      	ldr	r3, [r7, #32]
 800eaf6:	3304      	adds	r3, #4
 800eaf8:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 800eafa:	4b20      	ldr	r3, [pc, #128]	; (800eb7c <tx_time_increment+0x15c>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	6a3a      	ldr	r2, [r7, #32]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d302      	bcc.n	800eb0a <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800eb04:	4b1e      	ldr	r3, [pc, #120]	; (800eb80 <tx_time_increment+0x160>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800eb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	627b      	str	r3, [r7, #36]	; 0x24
 800eb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb12:	2b1f      	cmp	r3, #31
 800eb14:	d9b5      	bls.n	800ea82 <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 800eb16:	4b1a      	ldr	r3, [pc, #104]	; (800eb80 <tx_time_increment+0x160>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	4a17      	ldr	r2, [pc, #92]	; (800eb78 <tx_time_increment+0x158>)
 800eb1c:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 800eb1e:	e019      	b.n	800eb54 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 800eb20:	69bb      	ldr	r3, [r7, #24]
 800eb22:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	691b      	ldr	r3, [r3, #16]
 800eb28:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 800eb2a:	69fb      	ldr	r3, [r7, #28]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d206      	bcs.n	800eb42 <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	1ad2      	subs	r2, r2, r3
 800eb3c:	69fb      	ldr	r3, [r7, #28]
 800eb3e:	601a      	str	r2, [r3, #0]
 800eb40:	e002      	b.n	800eb48 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 800eb42:	69fb      	ldr	r3, [r7, #28]
 800eb44:	2201      	movs	r2, #1
 800eb46:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 800eb48:	69fb      	ldr	r3, [r7, #28]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 800eb4e:	69f8      	ldr	r0, [r7, #28]
 800eb50:	f7ff f812 	bl	800db78 <_tx_timer_system_activate>
    while (temp_list_head)
 800eb54:	69bb      	ldr	r3, [r7, #24]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d1e2      	bne.n	800eb20 <tx_time_increment+0x100>
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	f383 8810 	msr	PRIMASK, r3
}
 800eb64:	e000      	b.n	800eb68 <tx_time_increment+0x148>
        return;
 800eb66:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800eb68:	3728      	adds	r7, #40	; 0x28
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	20001778 	.word	0x20001778
 800eb74:	20001cd8 	.word	0x20001cd8
 800eb78:	20001808 	.word	0x20001808
 800eb7c:	20001804 	.word	0x20001804
 800eb80:	20001800 	.word	0x20001800

0800eb84 <fm_calendar_format_date>:
 * en fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_date()
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b088      	sub	sp, #32
 800eb88:	af02      	add	r7, sp, #8
    int date_int = 0;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	617b      	str	r3, [r7, #20]
    char date_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800eb8e:	f000 f845 	bl	800ec1c <fm_calendar_get>
    sprintf(date_arr, "%02d%02d20%02d", sDate.Date, sDate.Month, sDate.Year);
 800eb92:	4b0d      	ldr	r3, [pc, #52]	; (800ebc8 <fm_calendar_format_date+0x44>)
 800eb94:	789b      	ldrb	r3, [r3, #2]
 800eb96:	461a      	mov	r2, r3
 800eb98:	4b0b      	ldr	r3, [pc, #44]	; (800ebc8 <fm_calendar_format_date+0x44>)
 800eb9a:	785b      	ldrb	r3, [r3, #1]
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	4b0a      	ldr	r3, [pc, #40]	; (800ebc8 <fm_calendar_format_date+0x44>)
 800eba0:	78db      	ldrb	r3, [r3, #3]
 800eba2:	4638      	mov	r0, r7
 800eba4:	9300      	str	r3, [sp, #0]
 800eba6:	460b      	mov	r3, r1
 800eba8:	4908      	ldr	r1, [pc, #32]	; (800ebcc <fm_calendar_format_date+0x48>)
 800ebaa:	f006 f925 	bl	8014df8 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    date_int = atoi(date_arr);
 800ebae:	463b      	mov	r3, r7
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f006 f8b7 	bl	8014d24 <atoi>
 800ebb6:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_date(date_int);
 800ebb8:	6978      	ldr	r0, [r7, #20]
 800ebba:	f000 fa4f 	bl	800f05c <fm_factory_modify_fp_date>
}
 800ebbe:	bf00      	nop
 800ebc0:	3718      	adds	r7, #24
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	20001d20 	.word	0x20001d20
 800ebcc:	08015888 	.word	0x08015888

0800ebd0 <fm_calendar_format_time>:
 * fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_time()
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b088      	sub	sp, #32
 800ebd4:	af02      	add	r7, sp, #8
    int time_int = 0;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	617b      	str	r3, [r7, #20]
    char time_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800ebda:	f000 f81f 	bl	800ec1c <fm_calendar_get>
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800ebde:	4b0d      	ldr	r3, [pc, #52]	; (800ec14 <fm_calendar_format_time+0x44>)
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	4b0b      	ldr	r3, [pc, #44]	; (800ec14 <fm_calendar_format_time+0x44>)
 800ebe6:	785b      	ldrb	r3, [r3, #1]
 800ebe8:	4619      	mov	r1, r3
    sTime.Seconds);
 800ebea:	4b0a      	ldr	r3, [pc, #40]	; (800ec14 <fm_calendar_format_time+0x44>)
 800ebec:	789b      	ldrb	r3, [r3, #2]
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800ebee:	4638      	mov	r0, r7
 800ebf0:	9300      	str	r3, [sp, #0]
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	4908      	ldr	r1, [pc, #32]	; (800ec18 <fm_calendar_format_time+0x48>)
 800ebf6:	f006 f8ff 	bl	8014df8 <siprintf>
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */

    time_int = atoi(time_arr);
 800ebfa:	463b      	mov	r3, r7
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f006 f891 	bl	8014d24 <atoi>
 800ec02:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_time(time_int);
 800ec04:	6978      	ldr	r0, [r7, #20]
 800ec06:	f000 fa39 	bl	800f07c <fm_factory_modify_fp_time>
}
 800ec0a:	bf00      	nop
 800ec0c:	3718      	adds	r7, #24
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	20001d0c 	.word	0x20001d0c
 800ec18:	08015898 	.word	0x08015898

0800ec1c <fm_calendar_get>:
 * usa.
 * @param None
 * @retval None
 */
void fm_calendar_get()
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	af00      	add	r7, sp, #0
     *     __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
     *     HAL_RTC_WaitForSynchro(&hrtc);
     *     __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
     */

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800ec20:	2200      	movs	r2, #0
 800ec22:	4905      	ldr	r1, [pc, #20]	; (800ec38 <fm_calendar_get+0x1c>)
 800ec24:	4805      	ldr	r0, [pc, #20]	; (800ec3c <fm_calendar_get+0x20>)
 800ec26:	f7fa fa33 	bl	8009090 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	4904      	ldr	r1, [pc, #16]	; (800ec40 <fm_calendar_get+0x24>)
 800ec2e:	4803      	ldr	r0, [pc, #12]	; (800ec3c <fm_calendar_get+0x20>)
 800ec30:	f7fa fb26 	bl	8009280 <HAL_RTC_GetDate>
}
 800ec34:	bf00      	nop
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	20001d0c 	.word	0x20001d0c
 800ec3c:	200014f4 	.word	0x200014f4
 800ec40:	20001d20 	.word	0x20001d20

0800ec44 <fm_calendar_get_day>:
 * @brief Función que lee el día desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Día leido del calendario.
 */
int fm_calendar_get_day()
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ec48:	f7ff ffe8 	bl	800ec1c <fm_calendar_get>
    return (sDate.Date);
 800ec4c:	4b01      	ldr	r3, [pc, #4]	; (800ec54 <fm_calendar_get_day+0x10>)
 800ec4e:	789b      	ldrb	r3, [r3, #2]
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	20001d20 	.word	0x20001d20

0800ec58 <fm_calendar_get_hour>:
 * @brief Función que lee la hora desde el RTC y la devuelve como parámetro.
 * @param None
 * @retval Hora leida del calendario.
 */
int fm_calendar_get_hour()
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ec5c:	f7ff ffde 	bl	800ec1c <fm_calendar_get>
    return (sTime.Hours);
 800ec60:	4b01      	ldr	r3, [pc, #4]	; (800ec68 <fm_calendar_get_hour+0x10>)
 800ec62:	781b      	ldrb	r3, [r3, #0]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	20001d0c 	.word	0x20001d0c

0800ec6c <fm_calendar_get_minute>:
 * parámetro.
 * @param None
 * @retval Minutos leidos del calendario.
 */
int fm_calendar_get_minute()
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ec70:	f7ff ffd4 	bl	800ec1c <fm_calendar_get>
    return (sTime.Minutes);
 800ec74:	4b01      	ldr	r3, [pc, #4]	; (800ec7c <fm_calendar_get_minute+0x10>)
 800ec76:	785b      	ldrb	r3, [r3, #1]
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	20001d0c 	.word	0x20001d0c

0800ec80 <fm_calendar_get_month>:
 * @brief Función que lee el mes desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Mes leido del calendario.
 */
int fm_calendar_get_month()
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ec84:	f7ff ffca 	bl	800ec1c <fm_calendar_get>
    return (sDate.Month);
 800ec88:	4b01      	ldr	r3, [pc, #4]	; (800ec90 <fm_calendar_get_month+0x10>)
 800ec8a:	785b      	ldrb	r3, [r3, #1]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	20001d20 	.word	0x20001d20

0800ec94 <fm_calendar_get_second>:
 * parámetro.
 * @param None
 * @retval Segundos leidos del calendario.
 */
int fm_calendar_get_second()
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ec98:	f7ff ffc0 	bl	800ec1c <fm_calendar_get>
    return (sTime.Seconds);
 800ec9c:	4b01      	ldr	r3, [pc, #4]	; (800eca4 <fm_calendar_get_second+0x10>)
 800ec9e:	789b      	ldrb	r3, [r3, #2]
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	20001d0c 	.word	0x20001d0c

0800eca8 <fm_calendar_get_year>:
 * @brief Función que lee el año desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Año leido del calendario.
 */
int fm_calendar_get_year()
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ecac:	f7ff ffb6 	bl	800ec1c <fm_calendar_get>
    return (sDate.Year);
 800ecb0:	4b01      	ldr	r3, [pc, #4]	; (800ecb8 <fm_calendar_get_year+0x10>)
 800ecb2:	78db      	ldrb	r3, [r3, #3]
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	20001d20 	.word	0x20001d20

0800ecbc <fm_debug_msg_uart>:
 * @param Mensaje a transmitir y su longitud.
 * @retval None
 *
 */
void fm_debug_msg_uart(const uint8_t *p_msg, uint8_t len)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret = HAL_BUSY;
 800ecc8:	2302      	movs	r3, #2
 800ecca:	73fb      	strb	r3, [r7, #15]
     * ejecutada en otro hilo. La siguiente implementación no es buena porque
     * bloquea puede bloquear al sistema, una mejor solucion seria bloquear
     * por un corto tiempo, aun mejor seria implementar algo con RTOS.
     *
     */
    while (ret == HAL_BUSY)
 800eccc:	e008      	b.n	800ece0 <fm_debug_msg_uart+0x24>
    {
        ret = HAL_UART_Transmit(&huart1, p_msg, len, DELAY_DEFAULT);
 800ecce:	78fb      	ldrb	r3, [r7, #3]
 800ecd0:	b29a      	uxth	r2, r3
 800ecd2:	230a      	movs	r3, #10
 800ecd4:	6879      	ldr	r1, [r7, #4]
 800ecd6:	4806      	ldr	r0, [pc, #24]	; (800ecf0 <fm_debug_msg_uart+0x34>)
 800ecd8:	f7fb fdb8 	bl	800a84c <HAL_UART_Transmit>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	73fb      	strb	r3, [r7, #15]
    while (ret == HAL_BUSY)
 800ece0:	7bfb      	ldrb	r3, [r7, #15]
 800ece2:	2b02      	cmp	r3, #2
 800ece4:	d0f3      	beq.n	800ecce <fm_debug_msg_uart+0x12>
    }

}
 800ece6:	bf00      	nop
 800ece8:	bf00      	nop
 800ecea:	3710      	adds	r7, #16
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	200015b4 	.word	0x200015b4

0800ecf4 <fm_factory_get_acm>:
 * @brief Función que devuelve el parámetro ACM almacenado en fm_factory.
 * @param None
 * @retval Parámetro ACM como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_acm()
{
 800ecf4:	b4b0      	push	{r4, r5, r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
    return (acm_config);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	4a07      	ldr	r2, [pc, #28]	; (800ed1c <fm_factory_get_acm+0x28>)
 800ed00:	461c      	mov	r4, r3
 800ed02:	4615      	mov	r5, r2
 800ed04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ed0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bcb0      	pop	{r4, r5, r7}
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	20000030 	.word	0x20000030

0800ed20 <fm_factory_get_date_time>:
 * @param None
 * @retval Hora, minutos, segundos, día, mes y año almacenados en
 * date_time_config.
 */
fmc_date_time_t fm_factory_get_date_time()
{
 800ed20:	b4b0      	push	{r4, r5, r7}
 800ed22:	b083      	sub	sp, #12
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
    return (date_time_config);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	4a07      	ldr	r2, [pc, #28]	; (800ed48 <fm_factory_get_date_time+0x28>)
 800ed2c:	461c      	mov	r4, r3
 800ed2e:	4615      	mov	r5, r2
 800ed30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed34:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ed38:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	370c      	adds	r7, #12
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bcb0      	pop	{r4, r5, r7}
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop
 800ed48:	2000007c 	.word	0x2000007c

0800ed4c <fm_factory_get_fp_date>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha.
 */
fmc_fp_t fm_factory_get_fp_date()
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
    return (date_user);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	4a05      	ldr	r2, [pc, #20]	; (800ed6c <fm_factory_get_fp_date+0x20>)
 800ed58:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed5c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	370c      	adds	r7, #12
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr
 800ed6c:	20000104 	.word	0x20000104

0800ed70 <fm_factory_get_fp_date_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha congelada.
 */
fmc_fp_t fm_factory_get_fp_date_conf()
{
 800ed70:	b480      	push	{r7}
 800ed72:	b083      	sub	sp, #12
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
    return (date_config);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	4a05      	ldr	r2, [pc, #20]	; (800ed90 <fm_factory_get_fp_date_conf+0x20>)
 800ed7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed80:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	370c      	adds	r7, #12
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr
 800ed90:	20000114 	.word	0x20000114

0800ed94 <fm_factory_get_fp_time>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora.
 */
fmc_fp_t fm_factory_get_fp_time()
{
 800ed94:	b480      	push	{r7}
 800ed96:	b083      	sub	sp, #12
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
    return (time_user);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	4a05      	ldr	r2, [pc, #20]	; (800edb4 <fm_factory_get_fp_time+0x20>)
 800eda0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eda4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	370c      	adds	r7, #12
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr
 800edb4:	200000fc 	.word	0x200000fc

0800edb8 <fm_factory_get_fp_time_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora congelada.
 */
fmc_fp_t fm_factory_get_fp_time_conf()
{
 800edb8:	b480      	push	{r7}
 800edba:	b083      	sub	sp, #12
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
    return (time_config);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	4a05      	ldr	r2, [pc, #20]	; (800edd8 <fm_factory_get_fp_time_conf+0x20>)
 800edc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800edc8:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	370c      	adds	r7, #12
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr
 800edd8:	2000010c 	.word	0x2000010c

0800eddc <fm_factory_get_frec_lin>:

fmc_fp_t fm_factory_get_frec_lin(sel_k k_sel)
{
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	460b      	mov	r3, r1
 800ede6:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t frec_lin_selected;

    if (k_sel == K_LIN_1)
 800ede8:	78fb      	ldrb	r3, [r7, #3]
 800edea:	2b01      	cmp	r3, #1
 800edec:	d106      	bne.n	800edfc <fm_factory_get_frec_lin+0x20>
    {
        frec_lin_selected = frec_lin_1;
 800edee:	4b1d      	ldr	r3, [pc, #116]	; (800ee64 <fm_factory_get_frec_lin+0x88>)
 800edf0:	4a1d      	ldr	r2, [pc, #116]	; (800ee68 <fm_factory_get_frec_lin+0x8c>)
 800edf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800edf6:	e883 0003 	stmia.w	r3, {r0, r1}
 800edfa:	e026      	b.n	800ee4a <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_2)
 800edfc:	78fb      	ldrb	r3, [r7, #3]
 800edfe:	2b02      	cmp	r3, #2
 800ee00:	d106      	bne.n	800ee10 <fm_factory_get_frec_lin+0x34>
    {
        frec_lin_selected = frec_lin_2;
 800ee02:	4b18      	ldr	r3, [pc, #96]	; (800ee64 <fm_factory_get_frec_lin+0x88>)
 800ee04:	4a19      	ldr	r2, [pc, #100]	; (800ee6c <fm_factory_get_frec_lin+0x90>)
 800ee06:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee0a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee0e:	e01c      	b.n	800ee4a <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_3)
 800ee10:	78fb      	ldrb	r3, [r7, #3]
 800ee12:	2b03      	cmp	r3, #3
 800ee14:	d106      	bne.n	800ee24 <fm_factory_get_frec_lin+0x48>
    {
        frec_lin_selected = frec_lin_3;
 800ee16:	4b13      	ldr	r3, [pc, #76]	; (800ee64 <fm_factory_get_frec_lin+0x88>)
 800ee18:	4a15      	ldr	r2, [pc, #84]	; (800ee70 <fm_factory_get_frec_lin+0x94>)
 800ee1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee1e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee22:	e012      	b.n	800ee4a <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_4)
 800ee24:	78fb      	ldrb	r3, [r7, #3]
 800ee26:	2b04      	cmp	r3, #4
 800ee28:	d106      	bne.n	800ee38 <fm_factory_get_frec_lin+0x5c>
    {
        frec_lin_selected = frec_lin_4;
 800ee2a:	4b0e      	ldr	r3, [pc, #56]	; (800ee64 <fm_factory_get_frec_lin+0x88>)
 800ee2c:	4a11      	ldr	r2, [pc, #68]	; (800ee74 <fm_factory_get_frec_lin+0x98>)
 800ee2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee32:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee36:	e008      	b.n	800ee4a <fm_factory_get_frec_lin+0x6e>
    }
    else if (k_sel == K_LIN_5)
 800ee38:	78fb      	ldrb	r3, [r7, #3]
 800ee3a:	2b05      	cmp	r3, #5
 800ee3c:	d105      	bne.n	800ee4a <fm_factory_get_frec_lin+0x6e>
    {
        frec_lin_selected = frec_lin_5;
 800ee3e:	4b09      	ldr	r3, [pc, #36]	; (800ee64 <fm_factory_get_frec_lin+0x88>)
 800ee40:	4a0d      	ldr	r2, [pc, #52]	; (800ee78 <fm_factory_get_frec_lin+0x9c>)
 800ee42:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee46:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (frec_lin_selected);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4a05      	ldr	r2, [pc, #20]	; (800ee64 <fm_factory_get_frec_lin+0x88>)
 800ee4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee52:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	370c      	adds	r7, #12
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	20001d3c 	.word	0x20001d3c
 800ee68:	200000a4 	.word	0x200000a4
 800ee6c:	200000ac 	.word	0x200000ac
 800ee70:	200000b4 	.word	0x200000b4
 800ee74:	200000bc 	.word	0x200000bc
 800ee78:	200000c4 	.word	0x200000c4

0800ee7c <fm_factory_get_k_factor>:
 * @brief Función que devuelve el factor K almacenado en fm_factory.
 * @param None
 * @retval Factor K.
 */
fmc_fp_t fm_factory_get_k_factor(sel_k k_sel)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	460b      	mov	r3, r1
 800ee86:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t k_selected;
    if (k_sel == K_FACTOR)
 800ee88:	78fb      	ldrb	r3, [r7, #3]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d106      	bne.n	800ee9c <fm_factory_get_k_factor+0x20>
    {
        k_selected = k_factor_config;
 800ee8e:	4b22      	ldr	r3, [pc, #136]	; (800ef18 <fm_factory_get_k_factor+0x9c>)
 800ee90:	4a22      	ldr	r2, [pc, #136]	; (800ef1c <fm_factory_get_k_factor+0xa0>)
 800ee92:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee96:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee9a:	e030      	b.n	800eefe <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_1)
 800ee9c:	78fb      	ldrb	r3, [r7, #3]
 800ee9e:	2b01      	cmp	r3, #1
 800eea0:	d106      	bne.n	800eeb0 <fm_factory_get_k_factor+0x34>
    {
        k_selected = k_lin_1_config;
 800eea2:	4b1d      	ldr	r3, [pc, #116]	; (800ef18 <fm_factory_get_k_factor+0x9c>)
 800eea4:	4a1e      	ldr	r2, [pc, #120]	; (800ef20 <fm_factory_get_k_factor+0xa4>)
 800eea6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eeaa:	e883 0003 	stmia.w	r3, {r0, r1}
 800eeae:	e026      	b.n	800eefe <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_2)
 800eeb0:	78fb      	ldrb	r3, [r7, #3]
 800eeb2:	2b02      	cmp	r3, #2
 800eeb4:	d106      	bne.n	800eec4 <fm_factory_get_k_factor+0x48>
    {
        k_selected = k_lin_2_config;
 800eeb6:	4b18      	ldr	r3, [pc, #96]	; (800ef18 <fm_factory_get_k_factor+0x9c>)
 800eeb8:	4a1a      	ldr	r2, [pc, #104]	; (800ef24 <fm_factory_get_k_factor+0xa8>)
 800eeba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eebe:	e883 0003 	stmia.w	r3, {r0, r1}
 800eec2:	e01c      	b.n	800eefe <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_3)
 800eec4:	78fb      	ldrb	r3, [r7, #3]
 800eec6:	2b03      	cmp	r3, #3
 800eec8:	d106      	bne.n	800eed8 <fm_factory_get_k_factor+0x5c>
    {
        k_selected = k_lin_3_config;
 800eeca:	4b13      	ldr	r3, [pc, #76]	; (800ef18 <fm_factory_get_k_factor+0x9c>)
 800eecc:	4a16      	ldr	r2, [pc, #88]	; (800ef28 <fm_factory_get_k_factor+0xac>)
 800eece:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eed2:	e883 0003 	stmia.w	r3, {r0, r1}
 800eed6:	e012      	b.n	800eefe <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_4)
 800eed8:	78fb      	ldrb	r3, [r7, #3]
 800eeda:	2b04      	cmp	r3, #4
 800eedc:	d106      	bne.n	800eeec <fm_factory_get_k_factor+0x70>
    {
        k_selected = k_lin_4_config;
 800eede:	4b0e      	ldr	r3, [pc, #56]	; (800ef18 <fm_factory_get_k_factor+0x9c>)
 800eee0:	4a12      	ldr	r2, [pc, #72]	; (800ef2c <fm_factory_get_k_factor+0xb0>)
 800eee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eee6:	e883 0003 	stmia.w	r3, {r0, r1}
 800eeea:	e008      	b.n	800eefe <fm_factory_get_k_factor+0x82>
    }
    else if (k_sel == K_LIN_5)
 800eeec:	78fb      	ldrb	r3, [r7, #3]
 800eeee:	2b05      	cmp	r3, #5
 800eef0:	d105      	bne.n	800eefe <fm_factory_get_k_factor+0x82>
    {
        k_selected = k_lin_5_config;
 800eef2:	4b09      	ldr	r3, [pc, #36]	; (800ef18 <fm_factory_get_k_factor+0x9c>)
 800eef4:	4a0e      	ldr	r2, [pc, #56]	; (800ef30 <fm_factory_get_k_factor+0xb4>)
 800eef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eefa:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (k_selected);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	4a05      	ldr	r2, [pc, #20]	; (800ef18 <fm_factory_get_k_factor+0x9c>)
 800ef02:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef06:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	370c      	adds	r7, #12
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop
 800ef18:	20001d44 	.word	0x20001d44
 800ef1c:	200000f4 	.word	0x200000f4
 800ef20:	200000cc 	.word	0x200000cc
 800ef24:	200000d4 	.word	0x200000d4
 800ef28:	200000dc 	.word	0x200000dc
 800ef2c:	200000e4 	.word	0x200000e4
 800ef30:	200000ec 	.word	0x200000ec

0800ef34 <fm_factory_get_rate>:
 * @brief Función que devuelve el parámetro RATE almacenado en fm_factory.
 * @param None
 * @retval Parámetro RATE como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_rate()
{
 800ef34:	b4b0      	push	{r4, r5, r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
    return (rate_config);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	4a07      	ldr	r2, [pc, #28]	; (800ef5c <fm_factory_get_rate+0x28>)
 800ef40:	461c      	mov	r4, r3
 800ef42:	4615      	mov	r5, r2
 800ef44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ef4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bcb0      	pop	{r4, r5, r7}
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	20000050 	.word	0x20000050

0800ef60 <fm_factory_get_temp>:
 * fm_factory.
 * @param None
 * @retval Temperatura interna del micro como estructura de tipo fmc_temp_t.
 */
fmc_temp_t fm_factory_get_temp()
{
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
    return (temperature_config);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4a05      	ldr	r2, [pc, #20]	; (800ef80 <fm_factory_get_temp+0x20>)
 800ef6c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ef6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	370c      	adds	r7, #12
 800ef76:	46bd      	mov	sp, r7
 800ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7c:	4770      	bx	lr
 800ef7e:	bf00      	nop
 800ef80:	20000070 	.word	0x20000070

0800ef84 <fm_factory_get_ttl>:
 * @brief Función que devuelve el parámetro TTL almacenado en fm_factory.
 * @param None
 * @retval Parámetro TTL como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_ttl()
{
 800ef84:	b4b0      	push	{r4, r5, r7}
 800ef86:	b083      	sub	sp, #12
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
    return (ttl_config);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	4a07      	ldr	r2, [pc, #28]	; (800efac <fm_factory_get_ttl+0x28>)
 800ef90:	461c      	mov	r4, r3
 800ef92:	4615      	mov	r5, r2
 800ef94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ef9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	370c      	adds	r7, #12
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bcb0      	pop	{r4, r5, r7}
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	20000010 	.word	0x20000010

0800efb0 <fm_factory_get_units_tim>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_tim()
{
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
    return (units_digits_tim);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	4a05      	ldr	r2, [pc, #20]	; (800efd0 <fm_factory_get_units_tim+0x20>)
 800efbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800efc0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	370c      	adds	r7, #12
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr
 800efd0:	20000094 	.word	0x20000094

0800efd4 <fm_factory_get_units_vol>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_vol()
{
 800efd4:	b480      	push	{r7}
 800efd6:	b083      	sub	sp, #12
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
    return (units_digits_vol);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4a05      	ldr	r2, [pc, #20]	; (800eff4 <fm_factory_get_units_vol+0x20>)
 800efe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800efe4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr
 800eff4:	2000009c 	.word	0x2000009c

0800eff8 <fm_factory_modify_date>:
 * fijo.
 * @param día, mes y año leídos del calendario.
 * @retval None
 */
void fm_factory_modify_date(int mod_day, int mod_month, int mod_year)
{
 800eff8:	b480      	push	{r7}
 800effa:	b085      	sub	sp, #20
 800effc:	af00      	add	r7, sp, #0
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	60b9      	str	r1, [r7, #8]
 800f002:	607a      	str	r2, [r7, #4]
    static const int century = 2000;
    static const int day_mult = 1000000;
    static const int month_mult = 10000;

    date_time_config.day = mod_day;
 800f004:	4a10      	ldr	r2, [pc, #64]	; (800f048 <fm_factory_modify_date+0x50>)
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	6013      	str	r3, [r2, #0]
    date_time_config.month = mod_month;
 800f00a:	4a0f      	ldr	r2, [pc, #60]	; (800f048 <fm_factory_modify_date+0x50>)
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	6053      	str	r3, [r2, #4]
    date_time_config.year = mod_year;
 800f010:	4a0d      	ldr	r2, [pc, #52]	; (800f048 <fm_factory_modify_date+0x50>)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6093      	str	r3, [r2, #8]

    date_config.num = mod_day * day_mult + mod_month * month_mult + century
 800f016:	4b0d      	ldr	r3, [pc, #52]	; (800f04c <fm_factory_modify_date+0x54>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	68fa      	ldr	r2, [r7, #12]
 800f01c:	fb03 f202 	mul.w	r2, r3, r2
 800f020:	4b0b      	ldr	r3, [pc, #44]	; (800f050 <fm_factory_modify_date+0x58>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	68b9      	ldr	r1, [r7, #8]
 800f026:	fb01 f303 	mul.w	r3, r1, r3
 800f02a:	441a      	add	r2, r3
 800f02c:	4b09      	ldr	r3, [pc, #36]	; (800f054 <fm_factory_modify_date+0x5c>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	441a      	add	r2, r3
    + mod_year;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	4413      	add	r3, r2
 800f036:	461a      	mov	r2, r3
    date_config.num = mod_day * day_mult + mod_month * month_mult + century
 800f038:	4b07      	ldr	r3, [pc, #28]	; (800f058 <fm_factory_modify_date+0x60>)
 800f03a:	601a      	str	r2, [r3, #0]
}
 800f03c:	bf00      	nop
 800f03e:	3714      	adds	r7, #20
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr
 800f048:	2000007c 	.word	0x2000007c
 800f04c:	08015b90 	.word	0x08015b90
 800f050:	08015b94 	.word	0x08015b94
 800f054:	08015b98 	.word	0x08015b98
 800f058:	20000114 	.word	0x20000114

0800f05c <fm_factory_modify_fp_date>:
 * fijo.
 * @param Fecha a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_date(int date)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
    date_user.num = date;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4a04      	ldr	r2, [pc, #16]	; (800f078 <fm_factory_modify_fp_date+0x1c>)
 800f068:	6013      	str	r3, [r2, #0]
}
 800f06a:	bf00      	nop
 800f06c:	370c      	adds	r7, #12
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr
 800f076:	bf00      	nop
 800f078:	20000104 	.word	0x20000104

0800f07c <fm_factory_modify_fp_time>:
 * fijo.
 * @param Hora a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_time(int time)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
    time_user.num = time;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a04      	ldr	r2, [pc, #16]	; (800f098 <fm_factory_modify_fp_time+0x1c>)
 800f088:	6013      	str	r3, [r2, #0]
}
 800f08a:	bf00      	nop
 800f08c:	370c      	adds	r7, #12
 800f08e:	46bd      	mov	sp, r7
 800f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f094:	4770      	bx	lr
 800f096:	bf00      	nop
 800f098:	200000fc 	.word	0x200000fc

0800f09c <fm_factory_modify_k_factor_add>:
 * @brief Función que suma uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_add(sel_digit_t digit_k)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800f0aa:	f000 faf7 	bl	800f69c <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] < VAL_9)
 800f0ae:	79fb      	ldrb	r3, [r7, #7]
 800f0b0:	f1c3 0307 	rsb	r3, r3, #7
 800f0b4:	4a17      	ldr	r2, [pc, #92]	; (800f114 <fm_factory_modify_k_factor_add+0x78>)
 800f0b6:	5cd3      	ldrb	r3, [r2, r3]
 800f0b8:	2b08      	cmp	r3, #8
 800f0ba:	d809      	bhi.n	800f0d0 <fm_factory_modify_k_factor_add+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]++;
 800f0bc:	79fb      	ldrb	r3, [r7, #7]
 800f0be:	f1c3 0307 	rsb	r3, r3, #7
 800f0c2:	4a14      	ldr	r2, [pc, #80]	; (800f114 <fm_factory_modify_k_factor_add+0x78>)
 800f0c4:	5cd2      	ldrb	r2, [r2, r3]
 800f0c6:	3201      	adds	r2, #1
 800f0c8:	b2d1      	uxtb	r1, r2
 800f0ca:	4a12      	ldr	r2, [pc, #72]	; (800f114 <fm_factory_modify_k_factor_add+0x78>)
 800f0cc:	54d1      	strb	r1, [r2, r3]
 800f0ce:	e005      	b.n	800f0dc <fm_factory_modify_k_factor_add+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_0;
 800f0d0:	79fb      	ldrb	r3, [r7, #7]
 800f0d2:	f1c3 0307 	rsb	r3, r3, #7
 800f0d6:	4a0f      	ldr	r2, [pc, #60]	; (800f114 <fm_factory_modify_k_factor_add+0x78>)
 800f0d8:	2100      	movs	r1, #0
 800f0da:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f0dc:	2300      	movs	r3, #0
 800f0de:	60bb      	str	r3, [r7, #8]
 800f0e0:	e00d      	b.n	800f0fe <fm_factory_modify_k_factor_add+0x62>
    {
        k_new_num = (k_new_num * ten_multipllier) + k_array[i];
 800f0e2:	230a      	movs	r3, #10
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	fb02 f303 	mul.w	r3, r2, r3
 800f0ec:	4909      	ldr	r1, [pc, #36]	; (800f114 <fm_factory_modify_k_factor_add+0x78>)
 800f0ee:	68ba      	ldr	r2, [r7, #8]
 800f0f0:	440a      	add	r2, r1
 800f0f2:	7812      	ldrb	r2, [r2, #0]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	60bb      	str	r3, [r7, #8]
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	2b07      	cmp	r3, #7
 800f102:	ddee      	ble.n	800f0e2 <fm_factory_modify_k_factor_add+0x46>
    }

    k_factor_config.num = k_new_num;
 800f104:	4a04      	ldr	r2, [pc, #16]	; (800f118 <fm_factory_modify_k_factor_add+0x7c>)
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	6013      	str	r3, [r2, #0]
}
 800f10a:	bf00      	nop
 800f10c:	3710      	adds	r7, #16
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	20001d24 	.word	0x20001d24
 800f118:	200000f4 	.word	0x200000f4

0800f11c <fm_factory_modify_k_factor_subs>:
 * @brief Función que resta uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_subs(sel_digit_t digit_k)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	4603      	mov	r3, r0
 800f124:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800f126:	2300      	movs	r3, #0
 800f128:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800f12a:	f000 fab7 	bl	800f69c <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] > VAL_0)
 800f12e:	79fb      	ldrb	r3, [r7, #7]
 800f130:	f1c3 0307 	rsb	r3, r3, #7
 800f134:	4a17      	ldr	r2, [pc, #92]	; (800f194 <fm_factory_modify_k_factor_subs+0x78>)
 800f136:	5cd3      	ldrb	r3, [r2, r3]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d009      	beq.n	800f150 <fm_factory_modify_k_factor_subs+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]--;
 800f13c:	79fb      	ldrb	r3, [r7, #7]
 800f13e:	f1c3 0307 	rsb	r3, r3, #7
 800f142:	4a14      	ldr	r2, [pc, #80]	; (800f194 <fm_factory_modify_k_factor_subs+0x78>)
 800f144:	5cd2      	ldrb	r2, [r2, r3]
 800f146:	3a01      	subs	r2, #1
 800f148:	b2d1      	uxtb	r1, r2
 800f14a:	4a12      	ldr	r2, [pc, #72]	; (800f194 <fm_factory_modify_k_factor_subs+0x78>)
 800f14c:	54d1      	strb	r1, [r2, r3]
 800f14e:	e005      	b.n	800f15c <fm_factory_modify_k_factor_subs+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_9;
 800f150:	79fb      	ldrb	r3, [r7, #7]
 800f152:	f1c3 0307 	rsb	r3, r3, #7
 800f156:	4a0f      	ldr	r2, [pc, #60]	; (800f194 <fm_factory_modify_k_factor_subs+0x78>)
 800f158:	2109      	movs	r1, #9
 800f15a:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f15c:	2300      	movs	r3, #0
 800f15e:	60bb      	str	r3, [r7, #8]
 800f160:	e00d      	b.n	800f17e <fm_factory_modify_k_factor_subs+0x62>
    {
        k_new_num = (k_new_num * ten_multipllier) + k_array[i];
 800f162:	230a      	movs	r3, #10
 800f164:	461a      	mov	r2, r3
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	fb02 f303 	mul.w	r3, r2, r3
 800f16c:	4909      	ldr	r1, [pc, #36]	; (800f194 <fm_factory_modify_k_factor_subs+0x78>)
 800f16e:	68ba      	ldr	r2, [r7, #8]
 800f170:	440a      	add	r2, r1
 800f172:	7812      	ldrb	r2, [r2, #0]
 800f174:	4413      	add	r3, r2
 800f176:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	3301      	adds	r3, #1
 800f17c:	60bb      	str	r3, [r7, #8]
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	2b07      	cmp	r3, #7
 800f182:	ddee      	ble.n	800f162 <fm_factory_modify_k_factor_subs+0x46>
    }

    k_factor_config.num = k_new_num;
 800f184:	4a04      	ldr	r2, [pc, #16]	; (800f198 <fm_factory_modify_k_factor_subs+0x7c>)
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	6013      	str	r3, [r2, #0]
}
 800f18a:	bf00      	nop
 800f18c:	3710      	adds	r7, #16
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	20001d24 	.word	0x20001d24
 800f198:	200000f4 	.word	0x200000f4

0800f19c <fm_factory_modify_k_lin_add>:
 * @param Digito a modificar del factor K de la enumeración sel_digit_k_lin_t y
 * factor k linealizado seleccionado.
 * @retval None
 */
void fm_factory_modify_k_lin_add(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b086      	sub	sp, #24
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	460a      	mov	r2, r1
 800f1a6:	71fb      	strb	r3, [r7, #7]
 800f1a8:	4613      	mov	r3, r2
 800f1aa:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f1b4:	79bb      	ldrb	r3, [r7, #6]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f000 faa8 	bl	800f70c <fm_factory_separate_k_lin_and_frec>
    if (digit_k_lin <= DIG_LIN_7)
 800f1bc:	79fb      	ldrb	r3, [r7, #7]
 800f1be:	2b07      	cmp	r3, #7
 800f1c0:	d84d      	bhi.n	800f25e <fm_factory_modify_k_lin_add+0xc2>
    {
        if (k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] < VAL_9)
 800f1c2:	79fb      	ldrb	r3, [r7, #7]
 800f1c4:	f1c3 0307 	rsb	r3, r3, #7
 800f1c8:	4a5d      	ldr	r2, [pc, #372]	; (800f340 <fm_factory_modify_k_lin_add+0x1a4>)
 800f1ca:	5cd3      	ldrb	r3, [r2, r3]
 800f1cc:	2b08      	cmp	r3, #8
 800f1ce:	d809      	bhi.n	800f1e4 <fm_factory_modify_k_lin_add+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]++;
 800f1d0:	79fb      	ldrb	r3, [r7, #7]
 800f1d2:	f1c3 0307 	rsb	r3, r3, #7
 800f1d6:	4a5a      	ldr	r2, [pc, #360]	; (800f340 <fm_factory_modify_k_lin_add+0x1a4>)
 800f1d8:	5cd2      	ldrb	r2, [r2, r3]
 800f1da:	3201      	adds	r2, #1
 800f1dc:	b2d1      	uxtb	r1, r2
 800f1de:	4a58      	ldr	r2, [pc, #352]	; (800f340 <fm_factory_modify_k_lin_add+0x1a4>)
 800f1e0:	54d1      	strb	r1, [r2, r3]
 800f1e2:	e005      	b.n	800f1f0 <fm_factory_modify_k_lin_add+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_0;
 800f1e4:	79fb      	ldrb	r3, [r7, #7]
 800f1e6:	f1c3 0307 	rsb	r3, r3, #7
 800f1ea:	4a55      	ldr	r2, [pc, #340]	; (800f340 <fm_factory_modify_k_lin_add+0x1a4>)
 800f1ec:	2100      	movs	r1, #0
 800f1ee:	54d1      	strb	r1, [r2, r3]
        }

        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	60fb      	str	r3, [r7, #12]
 800f1f4:	e00d      	b.n	800f212 <fm_factory_modify_k_lin_add+0x76>
        {
            k_lin_new_num = (k_lin_new_num * ten_multipllier) + k_lin_array[i];
 800f1f6:	230a      	movs	r3, #10
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	fb02 f303 	mul.w	r3, r2, r3
 800f200:	494f      	ldr	r1, [pc, #316]	; (800f340 <fm_factory_modify_k_lin_add+0x1a4>)
 800f202:	68fa      	ldr	r2, [r7, #12]
 800f204:	440a      	add	r2, r1
 800f206:	7812      	ldrb	r2, [r2, #0]
 800f208:	4413      	add	r3, r2
 800f20a:	617b      	str	r3, [r7, #20]
        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	3301      	adds	r3, #1
 800f210:	60fb      	str	r3, [r7, #12]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2b07      	cmp	r3, #7
 800f216:	ddee      	ble.n	800f1f6 <fm_factory_modify_k_lin_add+0x5a>
        }

        if (k_sel == K_LIN_1)
 800f218:	79bb      	ldrb	r3, [r7, #6]
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d103      	bne.n	800f226 <fm_factory_modify_k_lin_add+0x8a>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f21e:	4a49      	ldr	r2, [pc, #292]	; (800f344 <fm_factory_modify_k_lin_add+0x1a8>)
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	6013      	str	r3, [r2, #0]
        else if (k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f224:	e088      	b.n	800f338 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_2)
 800f226:	79bb      	ldrb	r3, [r7, #6]
 800f228:	2b02      	cmp	r3, #2
 800f22a:	d103      	bne.n	800f234 <fm_factory_modify_k_lin_add+0x98>
            k_lin_2_config.num = k_lin_new_num;
 800f22c:	4a46      	ldr	r2, [pc, #280]	; (800f348 <fm_factory_modify_k_lin_add+0x1ac>)
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	6013      	str	r3, [r2, #0]
}
 800f232:	e081      	b.n	800f338 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_3)
 800f234:	79bb      	ldrb	r3, [r7, #6]
 800f236:	2b03      	cmp	r3, #3
 800f238:	d103      	bne.n	800f242 <fm_factory_modify_k_lin_add+0xa6>
            k_lin_3_config.num = k_lin_new_num;
 800f23a:	4a44      	ldr	r2, [pc, #272]	; (800f34c <fm_factory_modify_k_lin_add+0x1b0>)
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	6013      	str	r3, [r2, #0]
}
 800f240:	e07a      	b.n	800f338 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_4)
 800f242:	79bb      	ldrb	r3, [r7, #6]
 800f244:	2b04      	cmp	r3, #4
 800f246:	d103      	bne.n	800f250 <fm_factory_modify_k_lin_add+0xb4>
            k_lin_4_config.num = k_lin_new_num;
 800f248:	4a41      	ldr	r2, [pc, #260]	; (800f350 <fm_factory_modify_k_lin_add+0x1b4>)
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	6013      	str	r3, [r2, #0]
}
 800f24e:	e073      	b.n	800f338 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_5)
 800f250:	79bb      	ldrb	r3, [r7, #6]
 800f252:	2b05      	cmp	r3, #5
 800f254:	d170      	bne.n	800f338 <fm_factory_modify_k_lin_add+0x19c>
            k_lin_5_config.num = k_lin_new_num;
 800f256:	4a3f      	ldr	r2, [pc, #252]	; (800f354 <fm_factory_modify_k_lin_add+0x1b8>)
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	6013      	str	r3, [r2, #0]
}
 800f25c:	e06c      	b.n	800f338 <fm_factory_modify_k_lin_add+0x19c>
    else if (digit_k_lin > DIG_LIN_7)
 800f25e:	79fb      	ldrb	r3, [r7, #7]
 800f260:	2b07      	cmp	r3, #7
 800f262:	d969      	bls.n	800f338 <fm_factory_modify_k_lin_add+0x19c>
        if (LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f264:	79fb      	ldrb	r3, [r7, #7]
 800f266:	f1c3 030e 	rsb	r3, r3, #14
 800f26a:	2b03      	cmp	r3, #3
 800f26c:	d017      	beq.n	800f29e <fm_factory_modify_k_lin_add+0x102>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_9)
 800f26e:	79fb      	ldrb	r3, [r7, #7]
 800f270:	f1c3 030e 	rsb	r3, r3, #14
 800f274:	4a38      	ldr	r2, [pc, #224]	; (800f358 <fm_factory_modify_k_lin_add+0x1bc>)
 800f276:	5cd3      	ldrb	r3, [r2, r3]
 800f278:	2b08      	cmp	r3, #8
 800f27a:	d809      	bhi.n	800f290 <fm_factory_modify_k_lin_add+0xf4>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f27c:	79fb      	ldrb	r3, [r7, #7]
 800f27e:	f1c3 030e 	rsb	r3, r3, #14
 800f282:	4a35      	ldr	r2, [pc, #212]	; (800f358 <fm_factory_modify_k_lin_add+0x1bc>)
 800f284:	5cd2      	ldrb	r2, [r2, r3]
 800f286:	3201      	adds	r2, #1
 800f288:	b2d1      	uxtb	r1, r2
 800f28a:	4a33      	ldr	r2, [pc, #204]	; (800f358 <fm_factory_modify_k_lin_add+0x1bc>)
 800f28c:	54d1      	strb	r1, [r2, r3]
 800f28e:	e01d      	b.n	800f2cc <fm_factory_modify_k_lin_add+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f290:	79fb      	ldrb	r3, [r7, #7]
 800f292:	f1c3 030e 	rsb	r3, r3, #14
 800f296:	4a30      	ldr	r2, [pc, #192]	; (800f358 <fm_factory_modify_k_lin_add+0x1bc>)
 800f298:	2100      	movs	r1, #0
 800f29a:	54d1      	strb	r1, [r2, r3]
 800f29c:	e016      	b.n	800f2cc <fm_factory_modify_k_lin_add+0x130>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_1)
 800f29e:	79fb      	ldrb	r3, [r7, #7]
 800f2a0:	f1c3 030e 	rsb	r3, r3, #14
 800f2a4:	4a2c      	ldr	r2, [pc, #176]	; (800f358 <fm_factory_modify_k_lin_add+0x1bc>)
 800f2a6:	5cd3      	ldrb	r3, [r2, r3]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d109      	bne.n	800f2c0 <fm_factory_modify_k_lin_add+0x124>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f2ac:	79fb      	ldrb	r3, [r7, #7]
 800f2ae:	f1c3 030e 	rsb	r3, r3, #14
 800f2b2:	4a29      	ldr	r2, [pc, #164]	; (800f358 <fm_factory_modify_k_lin_add+0x1bc>)
 800f2b4:	5cd2      	ldrb	r2, [r2, r3]
 800f2b6:	3201      	adds	r2, #1
 800f2b8:	b2d1      	uxtb	r1, r2
 800f2ba:	4a27      	ldr	r2, [pc, #156]	; (800f358 <fm_factory_modify_k_lin_add+0x1bc>)
 800f2bc:	54d1      	strb	r1, [r2, r3]
 800f2be:	e005      	b.n	800f2cc <fm_factory_modify_k_lin_add+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f2c0:	79fb      	ldrb	r3, [r7, #7]
 800f2c2:	f1c3 030e 	rsb	r3, r3, #14
 800f2c6:	4a24      	ldr	r2, [pc, #144]	; (800f358 <fm_factory_modify_k_lin_add+0x1bc>)
 800f2c8:	2100      	movs	r1, #0
 800f2ca:	54d1      	strb	r1, [r2, r3]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	60bb      	str	r3, [r7, #8]
 800f2d0:	e00d      	b.n	800f2ee <fm_factory_modify_k_lin_add+0x152>
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f2d2:	230a      	movs	r3, #10
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	fb02 f303 	mul.w	r3, r2, r3
            + frec_array[j];
 800f2dc:	491e      	ldr	r1, [pc, #120]	; (800f358 <fm_factory_modify_k_lin_add+0x1bc>)
 800f2de:	68ba      	ldr	r2, [r7, #8]
 800f2e0:	440a      	add	r2, r1
 800f2e2:	7812      	ldrb	r2, [r2, #0]
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f2e4:	4413      	add	r3, r2
 800f2e6:	613b      	str	r3, [r7, #16]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	60bb      	str	r3, [r7, #8]
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	2b06      	cmp	r3, #6
 800f2f2:	ddee      	ble.n	800f2d2 <fm_factory_modify_k_lin_add+0x136>
        if (k_sel == K_LIN_1)
 800f2f4:	79bb      	ldrb	r3, [r7, #6]
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	d103      	bne.n	800f302 <fm_factory_modify_k_lin_add+0x166>
            frec_lin_1.num = frec_lin_new_num;
 800f2fa:	4a18      	ldr	r2, [pc, #96]	; (800f35c <fm_factory_modify_k_lin_add+0x1c0>)
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	6013      	str	r3, [r2, #0]
}
 800f300:	e01a      	b.n	800f338 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_2)
 800f302:	79bb      	ldrb	r3, [r7, #6]
 800f304:	2b02      	cmp	r3, #2
 800f306:	d103      	bne.n	800f310 <fm_factory_modify_k_lin_add+0x174>
            frec_lin_2.num = frec_lin_new_num;
 800f308:	4a15      	ldr	r2, [pc, #84]	; (800f360 <fm_factory_modify_k_lin_add+0x1c4>)
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	6013      	str	r3, [r2, #0]
}
 800f30e:	e013      	b.n	800f338 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_3)
 800f310:	79bb      	ldrb	r3, [r7, #6]
 800f312:	2b03      	cmp	r3, #3
 800f314:	d103      	bne.n	800f31e <fm_factory_modify_k_lin_add+0x182>
            frec_lin_3.num = frec_lin_new_num;
 800f316:	4a13      	ldr	r2, [pc, #76]	; (800f364 <fm_factory_modify_k_lin_add+0x1c8>)
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	6013      	str	r3, [r2, #0]
}
 800f31c:	e00c      	b.n	800f338 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_4)
 800f31e:	79bb      	ldrb	r3, [r7, #6]
 800f320:	2b04      	cmp	r3, #4
 800f322:	d103      	bne.n	800f32c <fm_factory_modify_k_lin_add+0x190>
            frec_lin_4.num = frec_lin_new_num;
 800f324:	4a10      	ldr	r2, [pc, #64]	; (800f368 <fm_factory_modify_k_lin_add+0x1cc>)
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	6013      	str	r3, [r2, #0]
}
 800f32a:	e005      	b.n	800f338 <fm_factory_modify_k_lin_add+0x19c>
        else if (k_sel == K_LIN_5)
 800f32c:	79bb      	ldrb	r3, [r7, #6]
 800f32e:	2b05      	cmp	r3, #5
 800f330:	d102      	bne.n	800f338 <fm_factory_modify_k_lin_add+0x19c>
            frec_lin_5.num = frec_lin_new_num;
 800f332:	4a0e      	ldr	r2, [pc, #56]	; (800f36c <fm_factory_modify_k_lin_add+0x1d0>)
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	6013      	str	r3, [r2, #0]
}
 800f338:	bf00      	nop
 800f33a:	3718      	adds	r7, #24
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	20001d2c 	.word	0x20001d2c
 800f344:	200000cc 	.word	0x200000cc
 800f348:	200000d4 	.word	0x200000d4
 800f34c:	200000dc 	.word	0x200000dc
 800f350:	200000e4 	.word	0x200000e4
 800f354:	200000ec 	.word	0x200000ec
 800f358:	20001d34 	.word	0x20001d34
 800f35c:	200000a4 	.word	0x200000a4
 800f360:	200000ac 	.word	0x200000ac
 800f364:	200000b4 	.word	0x200000b4
 800f368:	200000bc 	.word	0x200000bc
 800f36c:	200000c4 	.word	0x200000c4

0800f370 <fm_factory_modify_k_lin_subs>:
 * @param Digito a modificar del factor K de la enumeración sel_digit_k_lin_t y
 * factor k linealizado seleccionado.
 * @retval None
 */
void fm_factory_modify_k_lin_subs(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b086      	sub	sp, #24
 800f374:	af00      	add	r7, sp, #0
 800f376:	4603      	mov	r3, r0
 800f378:	460a      	mov	r2, r1
 800f37a:	71fb      	strb	r3, [r7, #7]
 800f37c:	4613      	mov	r3, r2
 800f37e:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f380:	2300      	movs	r3, #0
 800f382:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f384:	2300      	movs	r3, #0
 800f386:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f388:	79bb      	ldrb	r3, [r7, #6]
 800f38a:	4618      	mov	r0, r3
 800f38c:	f000 f9be 	bl	800f70c <fm_factory_separate_k_lin_and_frec>
    if (digit_k_lin <= DIG_LIN_7)
 800f390:	79fb      	ldrb	r3, [r7, #7]
 800f392:	2b07      	cmp	r3, #7
 800f394:	d84d      	bhi.n	800f432 <fm_factory_modify_k_lin_subs+0xc2>
    {
        if (k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] > VAL_0)
 800f396:	79fb      	ldrb	r3, [r7, #7]
 800f398:	f1c3 0307 	rsb	r3, r3, #7
 800f39c:	4a5d      	ldr	r2, [pc, #372]	; (800f514 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f39e:	5cd3      	ldrb	r3, [r2, r3]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d009      	beq.n	800f3b8 <fm_factory_modify_k_lin_subs+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]--;
 800f3a4:	79fb      	ldrb	r3, [r7, #7]
 800f3a6:	f1c3 0307 	rsb	r3, r3, #7
 800f3aa:	4a5a      	ldr	r2, [pc, #360]	; (800f514 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f3ac:	5cd2      	ldrb	r2, [r2, r3]
 800f3ae:	3a01      	subs	r2, #1
 800f3b0:	b2d1      	uxtb	r1, r2
 800f3b2:	4a58      	ldr	r2, [pc, #352]	; (800f514 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f3b4:	54d1      	strb	r1, [r2, r3]
 800f3b6:	e005      	b.n	800f3c4 <fm_factory_modify_k_lin_subs+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_9;
 800f3b8:	79fb      	ldrb	r3, [r7, #7]
 800f3ba:	f1c3 0307 	rsb	r3, r3, #7
 800f3be:	4a55      	ldr	r2, [pc, #340]	; (800f514 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f3c0:	2109      	movs	r1, #9
 800f3c2:	54d1      	strb	r1, [r2, r3]
        }

        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	60fb      	str	r3, [r7, #12]
 800f3c8:	e00d      	b.n	800f3e6 <fm_factory_modify_k_lin_subs+0x76>
        {
            k_lin_new_num = (k_lin_new_num * ten_multipllier) + k_lin_array[i];
 800f3ca:	230a      	movs	r3, #10
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	fb02 f303 	mul.w	r3, r2, r3
 800f3d4:	494f      	ldr	r1, [pc, #316]	; (800f514 <fm_factory_modify_k_lin_subs+0x1a4>)
 800f3d6:	68fa      	ldr	r2, [r7, #12]
 800f3d8:	440a      	add	r2, r1
 800f3da:	7812      	ldrb	r2, [r2, #0]
 800f3dc:	4413      	add	r3, r2
 800f3de:	617b      	str	r3, [r7, #20]
        for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	60fb      	str	r3, [r7, #12]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2b07      	cmp	r3, #7
 800f3ea:	ddee      	ble.n	800f3ca <fm_factory_modify_k_lin_subs+0x5a>
        }

        if (k_sel == K_LIN_1)
 800f3ec:	79bb      	ldrb	r3, [r7, #6]
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	d103      	bne.n	800f3fa <fm_factory_modify_k_lin_subs+0x8a>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f3f2:	4a49      	ldr	r2, [pc, #292]	; (800f518 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	6013      	str	r3, [r2, #0]
        else if (k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f3f8:	e088      	b.n	800f50c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_2)
 800f3fa:	79bb      	ldrb	r3, [r7, #6]
 800f3fc:	2b02      	cmp	r3, #2
 800f3fe:	d103      	bne.n	800f408 <fm_factory_modify_k_lin_subs+0x98>
            k_lin_2_config.num = k_lin_new_num;
 800f400:	4a46      	ldr	r2, [pc, #280]	; (800f51c <fm_factory_modify_k_lin_subs+0x1ac>)
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	6013      	str	r3, [r2, #0]
}
 800f406:	e081      	b.n	800f50c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_3)
 800f408:	79bb      	ldrb	r3, [r7, #6]
 800f40a:	2b03      	cmp	r3, #3
 800f40c:	d103      	bne.n	800f416 <fm_factory_modify_k_lin_subs+0xa6>
            k_lin_3_config.num = k_lin_new_num;
 800f40e:	4a44      	ldr	r2, [pc, #272]	; (800f520 <fm_factory_modify_k_lin_subs+0x1b0>)
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	6013      	str	r3, [r2, #0]
}
 800f414:	e07a      	b.n	800f50c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_4)
 800f416:	79bb      	ldrb	r3, [r7, #6]
 800f418:	2b04      	cmp	r3, #4
 800f41a:	d103      	bne.n	800f424 <fm_factory_modify_k_lin_subs+0xb4>
            k_lin_4_config.num = k_lin_new_num;
 800f41c:	4a41      	ldr	r2, [pc, #260]	; (800f524 <fm_factory_modify_k_lin_subs+0x1b4>)
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	6013      	str	r3, [r2, #0]
}
 800f422:	e073      	b.n	800f50c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_5)
 800f424:	79bb      	ldrb	r3, [r7, #6]
 800f426:	2b05      	cmp	r3, #5
 800f428:	d170      	bne.n	800f50c <fm_factory_modify_k_lin_subs+0x19c>
            k_lin_5_config.num = k_lin_new_num;
 800f42a:	4a3f      	ldr	r2, [pc, #252]	; (800f528 <fm_factory_modify_k_lin_subs+0x1b8>)
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	6013      	str	r3, [r2, #0]
}
 800f430:	e06c      	b.n	800f50c <fm_factory_modify_k_lin_subs+0x19c>
    else if (digit_k_lin > DIG_LIN_7)
 800f432:	79fb      	ldrb	r3, [r7, #7]
 800f434:	2b07      	cmp	r3, #7
 800f436:	d969      	bls.n	800f50c <fm_factory_modify_k_lin_subs+0x19c>
        if (LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f438:	79fb      	ldrb	r3, [r7, #7]
 800f43a:	f1c3 030e 	rsb	r3, r3, #14
 800f43e:	2b03      	cmp	r3, #3
 800f440:	d017      	beq.n	800f472 <fm_factory_modify_k_lin_subs+0x102>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f442:	79fb      	ldrb	r3, [r7, #7]
 800f444:	f1c3 030e 	rsb	r3, r3, #14
 800f448:	4a38      	ldr	r2, [pc, #224]	; (800f52c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f44a:	5cd3      	ldrb	r3, [r2, r3]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d009      	beq.n	800f464 <fm_factory_modify_k_lin_subs+0xf4>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f450:	79fb      	ldrb	r3, [r7, #7]
 800f452:	f1c3 030e 	rsb	r3, r3, #14
 800f456:	4a35      	ldr	r2, [pc, #212]	; (800f52c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f458:	5cd2      	ldrb	r2, [r2, r3]
 800f45a:	3a01      	subs	r2, #1
 800f45c:	b2d1      	uxtb	r1, r2
 800f45e:	4a33      	ldr	r2, [pc, #204]	; (800f52c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f460:	54d1      	strb	r1, [r2, r3]
 800f462:	e01d      	b.n	800f4a0 <fm_factory_modify_k_lin_subs+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_9;
 800f464:	79fb      	ldrb	r3, [r7, #7]
 800f466:	f1c3 030e 	rsb	r3, r3, #14
 800f46a:	4a30      	ldr	r2, [pc, #192]	; (800f52c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f46c:	2109      	movs	r1, #9
 800f46e:	54d1      	strb	r1, [r2, r3]
 800f470:	e016      	b.n	800f4a0 <fm_factory_modify_k_lin_subs+0x130>
            if (frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f472:	79fb      	ldrb	r3, [r7, #7]
 800f474:	f1c3 030e 	rsb	r3, r3, #14
 800f478:	4a2c      	ldr	r2, [pc, #176]	; (800f52c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f47a:	5cd3      	ldrb	r3, [r2, r3]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d009      	beq.n	800f494 <fm_factory_modify_k_lin_subs+0x124>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f480:	79fb      	ldrb	r3, [r7, #7]
 800f482:	f1c3 030e 	rsb	r3, r3, #14
 800f486:	4a29      	ldr	r2, [pc, #164]	; (800f52c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f488:	5cd2      	ldrb	r2, [r2, r3]
 800f48a:	3a01      	subs	r2, #1
 800f48c:	b2d1      	uxtb	r1, r2
 800f48e:	4a27      	ldr	r2, [pc, #156]	; (800f52c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f490:	54d1      	strb	r1, [r2, r3]
 800f492:	e005      	b.n	800f4a0 <fm_factory_modify_k_lin_subs+0x130>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_1;
 800f494:	79fb      	ldrb	r3, [r7, #7]
 800f496:	f1c3 030e 	rsb	r3, r3, #14
 800f49a:	4a24      	ldr	r2, [pc, #144]	; (800f52c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f49c:	2101      	movs	r1, #1
 800f49e:	54d1      	strb	r1, [r2, r3]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	60bb      	str	r3, [r7, #8]
 800f4a4:	e00d      	b.n	800f4c2 <fm_factory_modify_k_lin_subs+0x152>
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f4a6:	230a      	movs	r3, #10
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	fb02 f303 	mul.w	r3, r2, r3
            + frec_array[j];
 800f4b0:	491e      	ldr	r1, [pc, #120]	; (800f52c <fm_factory_modify_k_lin_subs+0x1bc>)
 800f4b2:	68ba      	ldr	r2, [r7, #8]
 800f4b4:	440a      	add	r2, r1
 800f4b6:	7812      	ldrb	r2, [r2, #0]
            frec_lin_new_num = (frec_lin_new_num * ten_multipllier)
 800f4b8:	4413      	add	r3, r2
 800f4ba:	613b      	str	r3, [r7, #16]
        for (int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	3301      	adds	r3, #1
 800f4c0:	60bb      	str	r3, [r7, #8]
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	2b06      	cmp	r3, #6
 800f4c6:	ddee      	ble.n	800f4a6 <fm_factory_modify_k_lin_subs+0x136>
        if (k_sel == K_LIN_1)
 800f4c8:	79bb      	ldrb	r3, [r7, #6]
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	d103      	bne.n	800f4d6 <fm_factory_modify_k_lin_subs+0x166>
            frec_lin_1.num = frec_lin_new_num;
 800f4ce:	4a18      	ldr	r2, [pc, #96]	; (800f530 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	6013      	str	r3, [r2, #0]
}
 800f4d4:	e01a      	b.n	800f50c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_2)
 800f4d6:	79bb      	ldrb	r3, [r7, #6]
 800f4d8:	2b02      	cmp	r3, #2
 800f4da:	d103      	bne.n	800f4e4 <fm_factory_modify_k_lin_subs+0x174>
            frec_lin_2.num = frec_lin_new_num;
 800f4dc:	4a15      	ldr	r2, [pc, #84]	; (800f534 <fm_factory_modify_k_lin_subs+0x1c4>)
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	6013      	str	r3, [r2, #0]
}
 800f4e2:	e013      	b.n	800f50c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_3)
 800f4e4:	79bb      	ldrb	r3, [r7, #6]
 800f4e6:	2b03      	cmp	r3, #3
 800f4e8:	d103      	bne.n	800f4f2 <fm_factory_modify_k_lin_subs+0x182>
            frec_lin_3.num = frec_lin_new_num;
 800f4ea:	4a13      	ldr	r2, [pc, #76]	; (800f538 <fm_factory_modify_k_lin_subs+0x1c8>)
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	6013      	str	r3, [r2, #0]
}
 800f4f0:	e00c      	b.n	800f50c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_4)
 800f4f2:	79bb      	ldrb	r3, [r7, #6]
 800f4f4:	2b04      	cmp	r3, #4
 800f4f6:	d103      	bne.n	800f500 <fm_factory_modify_k_lin_subs+0x190>
            frec_lin_4.num = frec_lin_new_num;
 800f4f8:	4a10      	ldr	r2, [pc, #64]	; (800f53c <fm_factory_modify_k_lin_subs+0x1cc>)
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	6013      	str	r3, [r2, #0]
}
 800f4fe:	e005      	b.n	800f50c <fm_factory_modify_k_lin_subs+0x19c>
        else if (k_sel == K_LIN_5)
 800f500:	79bb      	ldrb	r3, [r7, #6]
 800f502:	2b05      	cmp	r3, #5
 800f504:	d102      	bne.n	800f50c <fm_factory_modify_k_lin_subs+0x19c>
            frec_lin_5.num = frec_lin_new_num;
 800f506:	4a0e      	ldr	r2, [pc, #56]	; (800f540 <fm_factory_modify_k_lin_subs+0x1d0>)
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	6013      	str	r3, [r2, #0]
}
 800f50c:	bf00      	nop
 800f50e:	3718      	adds	r7, #24
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}
 800f514:	20001d2c 	.word	0x20001d2c
 800f518:	200000cc 	.word	0x200000cc
 800f51c:	200000d4 	.word	0x200000d4
 800f520:	200000dc 	.word	0x200000dc
 800f524:	200000e4 	.word	0x200000e4
 800f528:	200000ec 	.word	0x200000ec
 800f52c:	20001d34 	.word	0x20001d34
 800f530:	200000a4 	.word	0x200000a4
 800f534:	200000ac 	.word	0x200000ac
 800f538:	200000b4 	.word	0x200000b4
 800f53c:	200000bc 	.word	0x200000bc
 800f540:	200000c4 	.word	0x200000c4

0800f544 <fm_factory_modify_res_acm_ttl>:
 * @param Resoluciones de fabrica, y de los parámetros ACM y TTL.
 * @retval None
 */
void fm_factory_modify_res_acm_ttl(sel_resolution_t units_res,
sel_resolution_t acm_res, sel_resolution_t ttl_res)
{
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	4603      	mov	r3, r0
 800f54c:	71fb      	strb	r3, [r7, #7]
 800f54e:	460b      	mov	r3, r1
 800f550:	71bb      	strb	r3, [r7, #6]
 800f552:	4613      	mov	r3, r2
 800f554:	717b      	strb	r3, [r7, #5]
    units_digits_vol.res = units_res;
 800f556:	4a07      	ldr	r2, [pc, #28]	; (800f574 <fm_factory_modify_res_acm_ttl+0x30>)
 800f558:	79fb      	ldrb	r3, [r7, #7]
 800f55a:	7113      	strb	r3, [r2, #4]
    acm_config.volume.res = acm_res;
 800f55c:	4a06      	ldr	r2, [pc, #24]	; (800f578 <fm_factory_modify_res_acm_ttl+0x34>)
 800f55e:	79bb      	ldrb	r3, [r7, #6]
 800f560:	7313      	strb	r3, [r2, #12]
    ttl_config.volume.res = ttl_res;
 800f562:	4a06      	ldr	r2, [pc, #24]	; (800f57c <fm_factory_modify_res_acm_ttl+0x38>)
 800f564:	797b      	ldrb	r3, [r7, #5]
 800f566:	7313      	strb	r3, [r2, #12]
}
 800f568:	bf00      	nop
 800f56a:	370c      	adds	r7, #12
 800f56c:	46bd      	mov	sp, r7
 800f56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f572:	4770      	bx	lr
 800f574:	2000009c 	.word	0x2000009c
 800f578:	20000030 	.word	0x20000030
 800f57c:	20000010 	.word	0x20000010

0800f580 <fm_factory_modify_res_rate>:
 * @param Resolución de fabrica, y del parámetro rate.
 * @retval None
 */
void fm_factory_modify_res_rate(sel_resolution_t units_res,
sel_resolution_t rate_res)
{
 800f580:	b480      	push	{r7}
 800f582:	b083      	sub	sp, #12
 800f584:	af00      	add	r7, sp, #0
 800f586:	4603      	mov	r3, r0
 800f588:	460a      	mov	r2, r1
 800f58a:	71fb      	strb	r3, [r7, #7]
 800f58c:	4613      	mov	r3, r2
 800f58e:	71bb      	strb	r3, [r7, #6]
    units_digits_tim.res = units_res;
 800f590:	4a05      	ldr	r2, [pc, #20]	; (800f5a8 <fm_factory_modify_res_rate+0x28>)
 800f592:	79fb      	ldrb	r3, [r7, #7]
 800f594:	7113      	strb	r3, [r2, #4]
    rate_config.volume.res = rate_res;
 800f596:	4a05      	ldr	r2, [pc, #20]	; (800f5ac <fm_factory_modify_res_rate+0x2c>)
 800f598:	79bb      	ldrb	r3, [r7, #6]
 800f59a:	7313      	strb	r3, [r2, #12]
}
 800f59c:	bf00      	nop
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr
 800f5a8:	20000094 	.word	0x20000094
 800f5ac:	20000050 	.word	0x20000050

0800f5b0 <fm_factory_modify_time>:
 * fijo.
 * @param Hora, minutos y segundos leídos del calendario.
 * @retval None
 */
void fm_factory_modify_time(int mod_hour, int mod_minute, int mod_second)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b085      	sub	sp, #20
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	60b9      	str	r1, [r7, #8]
 800f5ba:	607a      	str	r2, [r7, #4]
    static const int hour_mult = 10000;
    static const int min_mult = 100;

    date_time_config.hour = mod_hour;
 800f5bc:	4a0f      	ldr	r2, [pc, #60]	; (800f5fc <fm_factory_modify_time+0x4c>)
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	60d3      	str	r3, [r2, #12]
    date_time_config.minute = mod_minute;
 800f5c2:	4a0e      	ldr	r2, [pc, #56]	; (800f5fc <fm_factory_modify_time+0x4c>)
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	6113      	str	r3, [r2, #16]
    date_time_config.second = mod_second;
 800f5c8:	4a0c      	ldr	r2, [pc, #48]	; (800f5fc <fm_factory_modify_time+0x4c>)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6153      	str	r3, [r2, #20]

    time_config.num = mod_hour * hour_mult + mod_minute * min_mult + mod_second;
 800f5ce:	4b0c      	ldr	r3, [pc, #48]	; (800f600 <fm_factory_modify_time+0x50>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	68fa      	ldr	r2, [r7, #12]
 800f5d4:	fb03 f202 	mul.w	r2, r3, r2
 800f5d8:	4b0a      	ldr	r3, [pc, #40]	; (800f604 <fm_factory_modify_time+0x54>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	68b9      	ldr	r1, [r7, #8]
 800f5de:	fb01 f303 	mul.w	r3, r1, r3
 800f5e2:	441a      	add	r2, r3
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	4b07      	ldr	r3, [pc, #28]	; (800f608 <fm_factory_modify_time+0x58>)
 800f5ec:	601a      	str	r2, [r3, #0]
}
 800f5ee:	bf00      	nop
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop
 800f5fc:	2000007c 	.word	0x2000007c
 800f600:	08015b9c 	.word	0x08015b9c
 800f604:	08015ba0 	.word	0x08015ba0
 800f608:	2000010c 	.word	0x2000010c

0800f60c <fm_factory_modify_time_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_time_units(fmc_unit_time_t time_units)
{
 800f60c:	b480      	push	{r7}
 800f60e:	b083      	sub	sp, #12
 800f610:	af00      	add	r7, sp, #0
 800f612:	4603      	mov	r3, r0
 800f614:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_time = time_units;
 800f616:	4a07      	ldr	r2, [pc, #28]	; (800f634 <fm_factory_modify_time_units+0x28>)
 800f618:	79fb      	ldrb	r3, [r7, #7]
 800f61a:	7653      	strb	r3, [r2, #25]
    ttl_config.unit_time = time_units;
 800f61c:	4a06      	ldr	r2, [pc, #24]	; (800f638 <fm_factory_modify_time_units+0x2c>)
 800f61e:	79fb      	ldrb	r3, [r7, #7]
 800f620:	7653      	strb	r3, [r2, #25]
    rate_config.unit_time = time_units;
 800f622:	4a06      	ldr	r2, [pc, #24]	; (800f63c <fm_factory_modify_time_units+0x30>)
 800f624:	79fb      	ldrb	r3, [r7, #7]
 800f626:	7653      	strb	r3, [r2, #25]
}
 800f628:	bf00      	nop
 800f62a:	370c      	adds	r7, #12
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr
 800f634:	20000030 	.word	0x20000030
 800f638:	20000010 	.word	0x20000010
 800f63c:	20000050 	.word	0x20000050

0800f640 <fm_factory_modify_volume_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_volume_units(fmc_unit_volume_t volume_units)
{
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	4603      	mov	r3, r0
 800f648:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_volume = volume_units;
 800f64a:	4a07      	ldr	r2, [pc, #28]	; (800f668 <fm_factory_modify_volume_units+0x28>)
 800f64c:	79fb      	ldrb	r3, [r7, #7]
 800f64e:	7613      	strb	r3, [r2, #24]
    ttl_config.unit_volume = volume_units;
 800f650:	4a06      	ldr	r2, [pc, #24]	; (800f66c <fm_factory_modify_volume_units+0x2c>)
 800f652:	79fb      	ldrb	r3, [r7, #7]
 800f654:	7613      	strb	r3, [r2, #24]
    rate_config.unit_volume = volume_units;
 800f656:	4a06      	ldr	r2, [pc, #24]	; (800f670 <fm_factory_modify_volume_units+0x30>)
 800f658:	79fb      	ldrb	r3, [r7, #7]
 800f65a:	7613      	strb	r3, [r2, #24]
}
 800f65c:	bf00      	nop
 800f65e:	370c      	adds	r7, #12
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr
 800f668:	20000030 	.word	0x20000030
 800f66c:	20000010 	.word	0x20000010
 800f670:	20000050 	.word	0x20000050

0800f674 <fm_factory_reset_acm>:
 * funcionalidad del botón ENTER en el menú de usuario ACM-RATE.
 * @param None
 * @retval None
 */
void fm_factory_reset_acm()
{
 800f674:	b480      	push	{r7}
 800f676:	af00      	add	r7, sp, #0
    acm_config.pulse = 0;
 800f678:	4907      	ldr	r1, [pc, #28]	; (800f698 <fm_factory_reset_acm+0x24>)
 800f67a:	f04f 0200 	mov.w	r2, #0
 800f67e:	f04f 0300 	mov.w	r3, #0
 800f682:	e9c1 2300 	strd	r2, r3, [r1]
    acm_config.volume.num = 0;
 800f686:	4b04      	ldr	r3, [pc, #16]	; (800f698 <fm_factory_reset_acm+0x24>)
 800f688:	2200      	movs	r2, #0
 800f68a:	609a      	str	r2, [r3, #8]
}
 800f68c:	bf00      	nop
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr
 800f696:	bf00      	nop
 800f698:	20000030 	.word	0x20000030

0800f69c <fm_factory_separate_k_factor>:
 * global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_factor()
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	af00      	add	r7, sp, #0
    uint32_t k_num;
    int i = 7;
 800f6a2:	2307      	movs	r3, #7
 800f6a4:	60bb      	str	r3, [r7, #8]
    k_num = fm_factory_get_k_factor(K_FACTOR).num;
 800f6a6:	463b      	mov	r3, r7
 800f6a8:	2100      	movs	r1, #0
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7ff fbe6 	bl	800ee7c <fm_factory_get_k_factor>
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	60fb      	str	r3, [r7, #12]

    while (i >= 0)
 800f6b4:	e01f      	b.n	800f6f6 <fm_factory_separate_k_factor+0x5a>
    {
        if (k_num > 0)
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d014      	beq.n	800f6e6 <fm_factory_separate_k_factor+0x4a>
        {
            k_array[i] = k_num % ten_multipllier;
 800f6bc:	230a      	movs	r3, #10
 800f6be:	461a      	mov	r2, r3
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6c6:	fb01 f202 	mul.w	r2, r1, r2
 800f6ca:	1a9b      	subs	r3, r3, r2
 800f6cc:	b2d9      	uxtb	r1, r3
 800f6ce:	4a0e      	ldr	r2, [pc, #56]	; (800f708 <fm_factory_separate_k_factor+0x6c>)
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	4413      	add	r3, r2
 800f6d4:	460a      	mov	r2, r1
 800f6d6:	701a      	strb	r2, [r3, #0]
            k_num /= ten_multipllier;
 800f6d8:	230a      	movs	r3, #10
 800f6da:	461a      	mov	r2, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6e2:	60fb      	str	r3, [r7, #12]
 800f6e4:	e004      	b.n	800f6f0 <fm_factory_separate_k_factor+0x54>
        }
        else
        {
            k_array[i] = 0;
 800f6e6:	4a08      	ldr	r2, [pc, #32]	; (800f708 <fm_factory_separate_k_factor+0x6c>)
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	4413      	add	r3, r2
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	3b01      	subs	r3, #1
 800f6f4:	60bb      	str	r3, [r7, #8]
    while (i >= 0)
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	dadc      	bge.n	800f6b6 <fm_factory_separate_k_factor+0x1a>
    }
}
 800f6fc:	bf00      	nop
 800f6fe:	bf00      	nop
 800f700:	3710      	adds	r7, #16
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	20001d24 	.word	0x20001d24

0800f70c <fm_factory_separate_k_lin_and_frec>:
 * y los guarda en un arreglo global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_lin_and_frec(sel_k k_sel)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b08a      	sub	sp, #40	; 0x28
 800f710:	af00      	add	r7, sp, #0
 800f712:	4603      	mov	r3, r0
 800f714:	71fb      	strb	r3, [r7, #7]
    uint32_t k_lin_num;
    uint32_t frec_num;

    int i = 7; //Contador que funciona solo en el while de esta función.
 800f716:	2307      	movs	r3, #7
 800f718:	61fb      	str	r3, [r7, #28]
    int j = 6; //Contador que funciona solo en el while de esta función.
 800f71a:	2306      	movs	r3, #6
 800f71c:	61bb      	str	r3, [r7, #24]
    k_lin_num = fm_factory_get_k_factor(k_sel).num;
 800f71e:	f107 0308 	add.w	r3, r7, #8
 800f722:	79fa      	ldrb	r2, [r7, #7]
 800f724:	4611      	mov	r1, r2
 800f726:	4618      	mov	r0, r3
 800f728:	f7ff fba8 	bl	800ee7c <fm_factory_get_k_factor>
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	627b      	str	r3, [r7, #36]	; 0x24
    frec_num = fm_factory_get_frec_lin(k_sel).num;
 800f730:	f107 0310 	add.w	r3, r7, #16
 800f734:	79fa      	ldrb	r2, [r7, #7]
 800f736:	4611      	mov	r1, r2
 800f738:	4618      	mov	r0, r3
 800f73a:	f7ff fb4f 	bl	800eddc <fm_factory_get_frec_lin>
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	623b      	str	r3, [r7, #32]

    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800f742:	e01f      	b.n	800f784 <fm_factory_separate_k_lin_and_frec+0x78>
    {
        if (k_lin_num > 0)
 800f744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f746:	2b00      	cmp	r3, #0
 800f748:	d014      	beq.n	800f774 <fm_factory_separate_k_lin_and_frec+0x68>
        {
            k_lin_array[i] = k_lin_num % ten_multipllier;
 800f74a:	230a      	movs	r3, #10
 800f74c:	461a      	mov	r2, r3
 800f74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f750:	fbb3 f1f2 	udiv	r1, r3, r2
 800f754:	fb01 f202 	mul.w	r2, r1, r2
 800f758:	1a9b      	subs	r3, r3, r2
 800f75a:	b2d9      	uxtb	r1, r3
 800f75c:	4a1f      	ldr	r2, [pc, #124]	; (800f7dc <fm_factory_separate_k_lin_and_frec+0xd0>)
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	4413      	add	r3, r2
 800f762:	460a      	mov	r2, r1
 800f764:	701a      	strb	r2, [r3, #0]
            k_lin_num /= ten_multipllier;
 800f766:	230a      	movs	r3, #10
 800f768:	461a      	mov	r2, r3
 800f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f770:	627b      	str	r3, [r7, #36]	; 0x24
 800f772:	e004      	b.n	800f77e <fm_factory_separate_k_lin_and_frec+0x72>
        }
        else
        {
            k_lin_array[i] = 0;
 800f774:	4a19      	ldr	r2, [pc, #100]	; (800f7dc <fm_factory_separate_k_lin_and_frec+0xd0>)
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	4413      	add	r3, r2
 800f77a:	2200      	movs	r2, #0
 800f77c:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800f77e:	69fb      	ldr	r3, [r7, #28]
 800f780:	3b01      	subs	r3, #1
 800f782:	61fb      	str	r3, [r7, #28]
    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	2b00      	cmp	r3, #0
 800f788:	dadc      	bge.n	800f744 <fm_factory_separate_k_lin_and_frec+0x38>
    }

    while (j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800f78a:	e01f      	b.n	800f7cc <fm_factory_separate_k_lin_and_frec+0xc0>
    {
        if (frec_num > 0)
 800f78c:	6a3b      	ldr	r3, [r7, #32]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d014      	beq.n	800f7bc <fm_factory_separate_k_lin_and_frec+0xb0>
        {
            frec_array[j] = frec_num % ten_multipllier;
 800f792:	230a      	movs	r3, #10
 800f794:	461a      	mov	r2, r3
 800f796:	6a3b      	ldr	r3, [r7, #32]
 800f798:	fbb3 f1f2 	udiv	r1, r3, r2
 800f79c:	fb01 f202 	mul.w	r2, r1, r2
 800f7a0:	1a9b      	subs	r3, r3, r2
 800f7a2:	b2d9      	uxtb	r1, r3
 800f7a4:	4a0e      	ldr	r2, [pc, #56]	; (800f7e0 <fm_factory_separate_k_lin_and_frec+0xd4>)
 800f7a6:	69bb      	ldr	r3, [r7, #24]
 800f7a8:	4413      	add	r3, r2
 800f7aa:	460a      	mov	r2, r1
 800f7ac:	701a      	strb	r2, [r3, #0]
            frec_num /= ten_multipllier;
 800f7ae:	230a      	movs	r3, #10
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	6a3b      	ldr	r3, [r7, #32]
 800f7b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7b8:	623b      	str	r3, [r7, #32]
 800f7ba:	e004      	b.n	800f7c6 <fm_factory_separate_k_lin_and_frec+0xba>
        }
        else
        {
            frec_array[j] = 0;
 800f7bc:	4a08      	ldr	r2, [pc, #32]	; (800f7e0 <fm_factory_separate_k_lin_and_frec+0xd4>)
 800f7be:	69bb      	ldr	r3, [r7, #24]
 800f7c0:	4413      	add	r3, r2
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	701a      	strb	r2, [r3, #0]
        }
        j--;
 800f7c6:	69bb      	ldr	r3, [r7, #24]
 800f7c8:	3b01      	subs	r3, #1
 800f7ca:	61bb      	str	r3, [r7, #24]
    while (j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800f7cc:	69bb      	ldr	r3, [r7, #24]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	dadc      	bge.n	800f78c <fm_factory_separate_k_lin_and_frec+0x80>
    }
}
 800f7d2:	bf00      	nop
 800f7d4:	bf00      	nop
 800f7d6:	3728      	adds	r7, #40	; 0x28
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}
 800f7dc:	20001d2c 	.word	0x20001d2c
 800f7e0:	20001d34 	.word	0x20001d34

0800f7e4 <HAL_GPIO_EXTI_Rising_Callback>:
// Private function bodies.

// Interrupts

void HAL_GPIO_EXTI_Rising_Callback(uint16_t gpio_pin) // @suppress("Name convention for function")
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	80fb      	strh	r3, [r7, #6]
    /*
     * Deshabilito interrupciones para evitar rebotes de los botones, hasta que
     * la tarea task_debounce termine su ejecución y se bloquee.
     */
    HAL_NVIC_DisableIRQ(EXTI10_IRQn);
 800f7ee:	2015      	movs	r0, #21
 800f7f0:	f7f4 fc5c 	bl	80040ac <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI11_IRQn);
 800f7f4:	2016      	movs	r0, #22
 800f7f6:	f7f4 fc59 	bl	80040ac <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI12_IRQn);
 800f7fa:	2017      	movs	r0, #23
 800f7fc:	f7f4 fc56 	bl	80040ac <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI13_IRQn);
 800f800:	2018      	movs	r0, #24
 800f802:	f7f4 fc53 	bl	80040ac <HAL_NVIC_DisableIRQ>
    fm_event_t event_now;

    /*
     * Compruebo qué botón fue el presionado.
     */
    switch (gpio_pin)
 800f806:	88fb      	ldrh	r3, [r7, #6]
 800f808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f80c:	d018      	beq.n	800f840 <HAL_GPIO_EXTI_Rising_Callback+0x5c>
 800f80e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f812:	dc18      	bgt.n	800f846 <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800f814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f818:	d00f      	beq.n	800f83a <HAL_GPIO_EXTI_Rising_Callback+0x56>
 800f81a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f81e:	dc12      	bgt.n	800f846 <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800f820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f824:	d003      	beq.n	800f82e <HAL_GPIO_EXTI_Rising_Callback+0x4a>
 800f826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f82a:	d003      	beq.n	800f834 <HAL_GPIO_EXTI_Rising_Callback+0x50>
        break;
        case KEY_ESC:
            event_now = EVENT_KEY_ESC;
        break;
        default:
        break;
 800f82c:	e00b      	b.n	800f846 <HAL_GPIO_EXTI_Rising_Callback+0x62>
            event_now = EVENT_KEY_UP;
 800f82e:	2302      	movs	r3, #2
 800f830:	73fb      	strb	r3, [r7, #15]
        break;
 800f832:	e009      	b.n	800f848 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_DOWN;
 800f834:	2303      	movs	r3, #3
 800f836:	73fb      	strb	r3, [r7, #15]
        break;
 800f838:	e006      	b.n	800f848 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ENTER;
 800f83a:	2304      	movs	r3, #4
 800f83c:	73fb      	strb	r3, [r7, #15]
        break;
 800f83e:	e003      	b.n	800f848 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ESC;
 800f840:	2305      	movs	r3, #5
 800f842:	73fb      	strb	r3, [r7, #15]
        break;
 800f844:	e000      	b.n	800f848 <HAL_GPIO_EXTI_Rising_Callback+0x64>
        break;
 800f846:	bf00      	nop
    /*
     * Pongo el nombre del botón presionado en la cola de eventos y libero el
     * semáforo de la tarea task_debounce, para que esta se bloquee durante el
     * tiempo necesario para que no haya rebotes de los botones.
     */
    tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 800f848:	f107 030f 	add.w	r3, r7, #15
 800f84c:	2200      	movs	r2, #0
 800f84e:	4619      	mov	r1, r3
 800f850:	4805      	ldr	r0, [pc, #20]	; (800f868 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 800f852:	f7fe fdf7 	bl	800e444 <_txe_queue_send>
    tx_semaphore_ceiling_put(&debounce_semaphore_ptr, 1);
 800f856:	2101      	movs	r1, #1
 800f858:	4804      	ldr	r0, [pc, #16]	; (800f86c <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 800f85a:	f7fe fe3d 	bl	800e4d8 <_txe_semaphore_ceiling_put>
}
 800f85e:	bf00      	nop
 800f860:	3710      	adds	r7, #16
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	20001388 	.word	0x20001388
 800f86c:	2000136c 	.word	0x2000136c

0800f870 <fm_lcd_acm_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_rate()
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b0b8      	sub	sp, #224	; 0xe0
 800f874:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800f876:	f107 0318 	add.w	r3, r7, #24
 800f87a:	4618      	mov	r0, r3
 800f87c:	f005 f90e 	bl	8014a9c <fmc_get_acm>
 800f880:	2314      	movs	r3, #20
 800f882:	9301      	str	r3, [sp, #4]
 800f884:	1d3b      	adds	r3, r7, #4
 800f886:	9300      	str	r3, [sp, #0]
 800f888:	2309      	movs	r3, #9
 800f88a:	2220      	movs	r2, #32
 800f88c:	f107 0120 	add.w	r1, r7, #32
 800f890:	c903      	ldmia	r1, {r0, r1}
 800f892:	f000 fa13 	bl	800fcbc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800f896:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f89a:	4618      	mov	r0, r3
 800f89c:	f005 f8fe 	bl	8014a9c <fmc_get_acm>
 800f8a0:	1d3a      	adds	r2, r7, #4
 800f8a2:	2314      	movs	r3, #20
 800f8a4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f8a8:	c903      	ldmia	r1, {r0, r1}
 800f8aa:	f000 f9c3 	bl	800fc34 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f8ae:	1d3b      	adds	r3, r7, #4
 800f8b0:	2100      	movs	r1, #0
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f000 fbea 	bl	801008c <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800f8b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f005 f92d 	bl	8014b1c <fmc_get_rate>
 800f8c2:	2314      	movs	r3, #20
 800f8c4:	9301      	str	r3, [sp, #4]
 800f8c6:	1d3b      	adds	r3, r7, #4
 800f8c8:	9300      	str	r3, [sp, #0]
 800f8ca:	2308      	movs	r3, #8
 800f8cc:	2220      	movs	r2, #32
 800f8ce:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f8d2:	c903      	ldmia	r1, {r0, r1}
 800f8d4:	f000 f9f2 	bl	800fcbc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800f8d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f005 f91d 	bl	8014b1c <fmc_get_rate>
 800f8e2:	1d3a      	adds	r2, r7, #4
 800f8e4:	2314      	movs	r3, #20
 800f8e6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800f8ea:	c903      	ldmia	r1, {r0, r1}
 800f8ec:	f000 f9a2 	bl	800fc34 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800f8f0:	1d3b      	adds	r3, r7, #4
 800f8f2:	2101      	movs	r1, #1
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f000 fbc9 	bl	801008c <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800f8fa:	2100      	movs	r1, #0
 800f8fc:	2006      	movs	r0, #6
 800f8fe:	f001 ff2b 	bl	8011758 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800f902:	2100      	movs	r1, #0
 800f904:	2002      	movs	r0, #2
 800f906:	f001 ff27 	bl	8011758 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800f90a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f90e:	4618      	mov	r0, r3
 800f910:	f005 f8c4 	bl	8014a9c <fmc_get_acm>
 800f914:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800f918:	2100      	movs	r1, #0
 800f91a:	4618      	mov	r0, r3
 800f91c:	f002 fadc 	bl	8011ed8 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800f920:	2100      	movs	r1, #0
 800f922:	2007      	movs	r0, #7
 800f924:	f001 ff18 	bl	8011758 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_acm().unit_time, 0x0);
 800f928:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800f92c:	4618      	mov	r0, r3
 800f92e:	f005 f8b5 	bl	8014a9c <fmc_get_acm>
 800f932:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800f936:	2100      	movs	r1, #0
 800f938:	4618      	mov	r0, r3
 800f93a:	f002 fa8b 	bl	8011e54 <lcd_set_time_unit>
}
 800f93e:	bf00      	nop
 800f940:	37d8      	adds	r7, #216	; 0xd8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}

0800f946 <fm_lcd_acm_temp>:
 * de forma personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_temp()
{
 800f946:	b580      	push	{r7, lr}
 800f948:	b0a2      	sub	sp, #136	; 0x88
 800f94a:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800f94c:	f107 0318 	add.w	r3, r7, #24
 800f950:	4618      	mov	r0, r3
 800f952:	f005 f8a3 	bl	8014a9c <fmc_get_acm>
 800f956:	2314      	movs	r3, #20
 800f958:	9301      	str	r3, [sp, #4]
 800f95a:	1d3b      	adds	r3, r7, #4
 800f95c:	9300      	str	r3, [sp, #0]
 800f95e:	2309      	movs	r3, #9
 800f960:	2220      	movs	r2, #32
 800f962:	f107 0120 	add.w	r1, r7, #32
 800f966:	c903      	ldmia	r1, {r0, r1}
 800f968:	f000 f9a8 	bl	800fcbc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800f96c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f970:	4618      	mov	r0, r3
 800f972:	f005 f893 	bl	8014a9c <fmc_get_acm>
 800f976:	1d3a      	adds	r2, r7, #4
 800f978:	2314      	movs	r3, #20
 800f97a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f97e:	c903      	ldmia	r1, {r0, r1}
 800f980:	f000 f958 	bl	800fc34 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f984:	1d3b      	adds	r3, r7, #4
 800f986:	2100      	movs	r1, #0
 800f988:	4618      	mov	r0, r3
 800f98a:	f000 fb7f 	bl	801008c <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_stm32_temp().temperature, ' ', LINE_1_DIGITS,
 800f98e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f992:	4618      	mov	r0, r3
 800f994:	f005 f902 	bl	8014b9c <fmc_get_stm32_temp>
 800f998:	2314      	movs	r3, #20
 800f99a:	9301      	str	r3, [sp, #4]
 800f99c:	1d3b      	adds	r3, r7, #4
 800f99e:	9300      	str	r3, [sp, #0]
 800f9a0:	2308      	movs	r3, #8
 800f9a2:	2220      	movs	r2, #32
 800f9a4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800f9a8:	c903      	ldmia	r1, {r0, r1}
 800f9aa:	f000 f987 	bl	800fcbc <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_stm32_temp().temperature, lcd_msg,
 800f9ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f005 f8f2 	bl	8014b9c <fmc_get_stm32_temp>
 800f9b8:	1d3a      	adds	r2, r7, #4
 800f9ba:	2314      	movs	r3, #20
 800f9bc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800f9c0:	c903      	ldmia	r1, {r0, r1}
 800f9c2:	f000 f937 	bl	800fc34 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800f9c6:	1d3b      	adds	r3, r7, #4
 800f9c8:	2101      	movs	r1, #1
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f000 fb5e 	bl	801008c <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800f9d0:	2100      	movs	r1, #0
 800f9d2:	2006      	movs	r0, #6
 800f9d4:	f001 fec0 	bl	8011758 <lcd_set_symbol>
    lcd_set_vol_unit(fmc_get_stm32_temp().unit_volume_temp, 0x0);
 800f9d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f005 f8dd 	bl	8014b9c <fmc_get_stm32_temp>
 800f9e2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f002 fa75 	bl	8011ed8 <lcd_set_vol_unit>
}
 800f9ee:	bf00      	nop
 800f9f0:	3780      	adds	r7, #128	; 0x80
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}

0800f9f6 <fm_lcd_clear>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void fm_lcd_clear()
{
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800f9fa:	f000 fd5f 	bl	80104bc <lcd_clear_all>
}
 800f9fe:	bf00      	nop
 800fa00:	bd80      	pop	{r7, pc}
	...

0800fa04 <fm_lcd_date_hour>:
 * @param Campo seleccionado el cual debe titilar.
 * @retval None
 */
void fm_lcd_date_hour(user_or_configuration_t configuration,
fm_event_t event_id, sel_date_time_field_t field)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b090      	sub	sp, #64	; 0x40
 800fa08:	af02      	add	r7, sp, #8
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	73fb      	strb	r3, [r7, #15]
 800fa0e:	460b      	mov	r3, r1
 800fa10:	73bb      	strb	r3, [r7, #14]
 800fa12:	4613      	mov	r3, r2
 800fa14:	737b      	strb	r3, [r7, #13]
    char lcd_msg[PCF8553_DATA_SIZE];

    /*
     * Se comprueba si se está en el menú de configuración o de usuario.
     */
    if (configuration)
 800fa16:	7bfb      	ldrb	r3, [r7, #15]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d00a      	beq.n	800fa32 <fm_lcd_date_hour+0x2e>
    {
        date_to_str = fm_factory_get_fp_date_conf();
 800fa1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7ff f9a5 	bl	800ed70 <fm_factory_get_fp_date_conf>
        time_to_str = fm_factory_get_fp_time_conf();
 800fa26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7ff f9c4 	bl	800edb8 <fm_factory_get_fp_time_conf>
 800fa30:	e019      	b.n	800fa66 <fm_lcd_date_hour+0x62>
    }
    else
    {
        fm_calendar_format_date();
 800fa32:	f7ff f8a7 	bl	800eb84 <fm_calendar_format_date>
        fm_calendar_format_time();
 800fa36:	f7ff f8cb 	bl	800ebd0 <fm_calendar_format_time>

        date_to_str = fm_factory_get_fp_date();
 800fa3a:	463b      	mov	r3, r7
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7ff f985 	bl	800ed4c <fm_factory_get_fp_date>
 800fa42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa46:	463a      	mov	r2, r7
 800fa48:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa4c:	e883 0003 	stmia.w	r3, {r0, r1}
        time_to_str = fm_factory_get_fp_time();
 800fa50:	463b      	mov	r3, r7
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7ff f99e 	bl	800ed94 <fm_factory_get_fp_time>
 800fa58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fa5c:	463a      	mov	r2, r7
 800fa5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa62:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    fm_lcd_fp_to_str(date_to_str, '0', LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
 800fa66:	2314      	movs	r3, #20
 800fa68:	9301      	str	r3, [sp, #4]
 800fa6a:	f107 0314 	add.w	r3, r7, #20
 800fa6e:	9300      	str	r3, [sp, #0]
 800fa70:	2309      	movs	r3, #9
 800fa72:	2230      	movs	r2, #48	; 0x30
 800fa74:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fa78:	c903      	ldmia	r1, {r0, r1}
 800fa7a:	f000 f91f 	bl	800fcbc <fm_lcd_fp_to_str>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fa7e:	f107 0314 	add.w	r3, r7, #20
 800fa82:	2100      	movs	r1, #0
 800fa84:	4618      	mov	r0, r3
 800fa86:	f000 fb01 	bl	801008c <fm_lcd_puts>
    lcd_set_point(HIGH_ROW, PNT_1);
 800fa8a:	2101      	movs	r1, #1
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	f001 fdb7 	bl	8011600 <lcd_set_point>
    lcd_set_point(HIGH_ROW, PNT_3);
 800fa92:	2103      	movs	r1, #3
 800fa94:	2000      	movs	r0, #0
 800fa96:	f001 fdb3 	bl	8011600 <lcd_set_point>

    fm_lcd_fp_to_str(time_to_str, '0', LINE_1_DIGITS, lcd_msg, sizeof(lcd_msg));
 800fa9a:	2314      	movs	r3, #20
 800fa9c:	9301      	str	r3, [sp, #4]
 800fa9e:	f107 0314 	add.w	r3, r7, #20
 800faa2:	9300      	str	r3, [sp, #0]
 800faa4:	2308      	movs	r3, #8
 800faa6:	2230      	movs	r2, #48	; 0x30
 800faa8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800faac:	c903      	ldmia	r1, {r0, r1}
 800faae:	f000 f905 	bl	800fcbc <fm_lcd_fp_to_str>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fab2:	f107 0314 	add.w	r3, r7, #20
 800fab6:	2101      	movs	r1, #1
 800fab8:	4618      	mov	r0, r3
 800faba:	f000 fae7 	bl	801008c <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800fabe:	2101      	movs	r1, #1
 800fac0:	2000      	movs	r0, #0
 800fac2:	f000 fd23 	bl	801050c <lcd_clear_digit>
    lcd_set_point(LOW_ROW, PNT_2);
 800fac6:	2102      	movs	r1, #2
 800fac8:	2001      	movs	r0, #1
 800faca:	f001 fd99 	bl	8011600 <lcd_set_point>
    lcd_set_point(LOW_ROW, PNT_4);
 800face:	2104      	movs	r1, #4
 800fad0:	2001      	movs	r0, #1
 800fad2:	f001 fd95 	bl	8011600 <lcd_set_point>

    if (configuration)
 800fad6:	7bfb      	ldrb	r3, [r7, #15]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d07e      	beq.n	800fbda <fm_lcd_date_hour+0x1d6>
    {
        if (event_id == EVENT_KEY_ENTER
 800fadc:	7bbb      	ldrb	r3, [r7, #14]
 800fade:	2b04      	cmp	r3, #4
 800fae0:	d006      	beq.n	800faf0 <fm_lcd_date_hour+0xec>
        || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fae2:	4b40      	ldr	r3, [pc, #256]	; (800fbe4 <fm_lcd_date_hour+0x1e0>)
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	2b04      	cmp	r3, #4
 800fae8:	d106      	bne.n	800faf8 <fm_lcd_date_hour+0xf4>
 800faea:	7bbb      	ldrb	r3, [r7, #14]
 800faec:	2b01      	cmp	r3, #1
 800faee:	d103      	bne.n	800faf8 <fm_lcd_date_hour+0xf4>
        {
            blink = 1;
 800faf0:	4b3d      	ldr	r3, [pc, #244]	; (800fbe8 <fm_lcd_date_hour+0x1e4>)
 800faf2:	2201      	movs	r2, #1
 800faf4:	601a      	str	r2, [r3, #0]
 800faf6:	e016      	b.n	800fb26 <fm_lcd_date_hour+0x122>
        }
        else if (event_id == EVENT_KEY_DOWN
 800faf8:	7bbb      	ldrb	r3, [r7, #14]
 800fafa:	2b03      	cmp	r3, #3
 800fafc:	d010      	beq.n	800fb20 <fm_lcd_date_hour+0x11c>
        || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 800fafe:	4b39      	ldr	r3, [pc, #228]	; (800fbe4 <fm_lcd_date_hour+0x1e0>)
 800fb00:	781b      	ldrb	r3, [r3, #0]
 800fb02:	2b03      	cmp	r3, #3
 800fb04:	d102      	bne.n	800fb0c <fm_lcd_date_hour+0x108>
 800fb06:	7bbb      	ldrb	r3, [r7, #14]
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d009      	beq.n	800fb20 <fm_lcd_date_hour+0x11c>
        || event_id == EVENT_KEY_UP
 800fb0c:	7bbb      	ldrb	r3, [r7, #14]
 800fb0e:	2b02      	cmp	r3, #2
 800fb10:	d006      	beq.n	800fb20 <fm_lcd_date_hour+0x11c>
        || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fb12:	4b34      	ldr	r3, [pc, #208]	; (800fbe4 <fm_lcd_date_hour+0x1e0>)
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	2b02      	cmp	r3, #2
 800fb18:	d105      	bne.n	800fb26 <fm_lcd_date_hour+0x122>
 800fb1a:	7bbb      	ldrb	r3, [r7, #14]
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d102      	bne.n	800fb26 <fm_lcd_date_hour+0x122>
        {
            blink = 0;
 800fb20:	4b31      	ldr	r3, [pc, #196]	; (800fbe8 <fm_lcd_date_hour+0x1e4>)
 800fb22:	2200      	movs	r2, #0
 800fb24:	601a      	str	r2, [r3, #0]
        }

        if (blink == 1)
 800fb26:	4b30      	ldr	r3, [pc, #192]	; (800fbe8 <fm_lcd_date_hour+0x1e4>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	d152      	bne.n	800fbd4 <fm_lcd_date_hour+0x1d0>
        {
            if (field == DAY)
 800fb2e:	7b7b      	ldrb	r3, [r7, #13]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d108      	bne.n	800fb46 <fm_lcd_date_hour+0x142>
            {
                lcd_clear_digit(DIGIT_1, HIGH_ROW);
 800fb34:	2100      	movs	r1, #0
 800fb36:	2001      	movs	r0, #1
 800fb38:	f000 fce8 	bl	801050c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_0, HIGH_ROW);
 800fb3c:	2100      	movs	r1, #0
 800fb3e:	2000      	movs	r0, #0
 800fb40:	f000 fce4 	bl	801050c <lcd_clear_digit>
 800fb44:	e042      	b.n	800fbcc <fm_lcd_date_hour+0x1c8>
            }
            else if (field == MONTH)
 800fb46:	7b7b      	ldrb	r3, [r7, #13]
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d108      	bne.n	800fb5e <fm_lcd_date_hour+0x15a>
            {
                lcd_clear_digit(DIGIT_3, HIGH_ROW);
 800fb4c:	2100      	movs	r1, #0
 800fb4e:	2003      	movs	r0, #3
 800fb50:	f000 fcdc 	bl	801050c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_2, HIGH_ROW);
 800fb54:	2100      	movs	r1, #0
 800fb56:	2002      	movs	r0, #2
 800fb58:	f000 fcd8 	bl	801050c <lcd_clear_digit>
 800fb5c:	e036      	b.n	800fbcc <fm_lcd_date_hour+0x1c8>
            }
            else if (field == YEAR)
 800fb5e:	7b7b      	ldrb	r3, [r7, #13]
 800fb60:	2b02      	cmp	r3, #2
 800fb62:	d110      	bne.n	800fb86 <fm_lcd_date_hour+0x182>
            {
                lcd_clear_digit(DIGIT_7, HIGH_ROW);
 800fb64:	2100      	movs	r1, #0
 800fb66:	2007      	movs	r0, #7
 800fb68:	f000 fcd0 	bl	801050c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_6, HIGH_ROW);
 800fb6c:	2100      	movs	r1, #0
 800fb6e:	2006      	movs	r0, #6
 800fb70:	f000 fccc 	bl	801050c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, HIGH_ROW);
 800fb74:	2100      	movs	r1, #0
 800fb76:	2005      	movs	r0, #5
 800fb78:	f000 fcc8 	bl	801050c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_4, HIGH_ROW);
 800fb7c:	2100      	movs	r1, #0
 800fb7e:	2004      	movs	r0, #4
 800fb80:	f000 fcc4 	bl	801050c <lcd_clear_digit>
 800fb84:	e022      	b.n	800fbcc <fm_lcd_date_hour+0x1c8>
            }
            else if (field == HOUR)
 800fb86:	7b7b      	ldrb	r3, [r7, #13]
 800fb88:	2b03      	cmp	r3, #3
 800fb8a:	d108      	bne.n	800fb9e <fm_lcd_date_hour+0x19a>
            {
                lcd_clear_digit(DIGIT_2, LOW_ROW);
 800fb8c:	2101      	movs	r1, #1
 800fb8e:	2002      	movs	r0, #2
 800fb90:	f000 fcbc 	bl	801050c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_1, LOW_ROW);
 800fb94:	2101      	movs	r1, #1
 800fb96:	2001      	movs	r0, #1
 800fb98:	f000 fcb8 	bl	801050c <lcd_clear_digit>
 800fb9c:	e016      	b.n	800fbcc <fm_lcd_date_hour+0x1c8>
            }
            else if (field == MINUTE)
 800fb9e:	7b7b      	ldrb	r3, [r7, #13]
 800fba0:	2b04      	cmp	r3, #4
 800fba2:	d108      	bne.n	800fbb6 <fm_lcd_date_hour+0x1b2>
            {
                lcd_clear_digit(DIGIT_4, LOW_ROW);
 800fba4:	2101      	movs	r1, #1
 800fba6:	2004      	movs	r0, #4
 800fba8:	f000 fcb0 	bl	801050c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_3, LOW_ROW);
 800fbac:	2101      	movs	r1, #1
 800fbae:	2003      	movs	r0, #3
 800fbb0:	f000 fcac 	bl	801050c <lcd_clear_digit>
 800fbb4:	e00a      	b.n	800fbcc <fm_lcd_date_hour+0x1c8>
            }
            else if (field == SECOND)
 800fbb6:	7b7b      	ldrb	r3, [r7, #13]
 800fbb8:	2b05      	cmp	r3, #5
 800fbba:	d107      	bne.n	800fbcc <fm_lcd_date_hour+0x1c8>
            {
                lcd_clear_digit(DIGIT_6, LOW_ROW);
 800fbbc:	2101      	movs	r1, #1
 800fbbe:	2006      	movs	r0, #6
 800fbc0:	f000 fca4 	bl	801050c <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, LOW_ROW);
 800fbc4:	2101      	movs	r1, #1
 800fbc6:	2005      	movs	r0, #5
 800fbc8:	f000 fca0 	bl	801050c <lcd_clear_digit>
            }

            blink = 0;
 800fbcc:	4b06      	ldr	r3, [pc, #24]	; (800fbe8 <fm_lcd_date_hour+0x1e4>)
 800fbce:	2200      	movs	r2, #0
 800fbd0:	601a      	str	r2, [r3, #0]
        else
        {
            blink = 1;
        }
    }
}
 800fbd2:	e002      	b.n	800fbda <fm_lcd_date_hour+0x1d6>
            blink = 1;
 800fbd4:	4b04      	ldr	r3, [pc, #16]	; (800fbe8 <fm_lcd_date_hour+0x1e4>)
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	601a      	str	r2, [r3, #0]
}
 800fbda:	bf00      	nop
 800fbdc:	3738      	adds	r7, #56	; 0x38
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	20001e0b 	.word	0x20001e0b
 800fbe8:	2000011c 	.word	0x2000011c

0800fbec <fm_lcd_format_number_in_line>:
 * @param Longitud de este String.
 * @retval arreglo con la información formateada tipo char.
 */
void fm_lcd_format_number_in_line(rows_t line, uint32_t data, char *p_str,
int length)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	60b9      	str	r1, [r7, #8]
 800fbf4:	607a      	str	r2, [r7, #4]
 800fbf6:	603b      	str	r3, [r7, #0]
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	73fb      	strb	r3, [r7, #15]
    if (line == HIGH_ROW)
 800fbfc:	7bfb      	ldrb	r3, [r7, #15]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d106      	bne.n	800fc10 <fm_lcd_format_number_in_line+0x24>
    {
        snprintf(p_str, length, "%8lu", data);
 800fc02:	6839      	ldr	r1, [r7, #0]
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	4a09      	ldr	r2, [pc, #36]	; (800fc2c <fm_lcd_format_number_in_line+0x40>)
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f005 f8c1 	bl	8014d90 <sniprintf>
    }
    else if (line == LOW_ROW)
    {
        snprintf(p_str, length, "%7lu", data);
    }
}
 800fc0e:	e008      	b.n	800fc22 <fm_lcd_format_number_in_line+0x36>
    else if (line == LOW_ROW)
 800fc10:	7bfb      	ldrb	r3, [r7, #15]
 800fc12:	2b01      	cmp	r3, #1
 800fc14:	d105      	bne.n	800fc22 <fm_lcd_format_number_in_line+0x36>
        snprintf(p_str, length, "%7lu", data);
 800fc16:	6839      	ldr	r1, [r7, #0]
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	4a05      	ldr	r2, [pc, #20]	; (800fc30 <fm_lcd_format_number_in_line+0x44>)
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f005 f8b7 	bl	8014d90 <sniprintf>
}
 800fc22:	bf00      	nop
 800fc24:	3710      	adds	r7, #16
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	080158a8 	.word	0x080158a8
 800fc30:	080158b0 	.word	0x080158b0

0800fc34 <fm_lcd_fp_add_dot>:
 * @param str_size tamaño del string.
 * @retval int.
 *
 */
int fm_lcd_fp_add_dot(fmc_fp_t fp, char *p_str, int str_size)
{
 800fc34:	b590      	push	{r4, r7, lr}
 800fc36:	b087      	sub	sp, #28
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	f107 0408 	add.w	r4, r7, #8
 800fc3e:	e884 0003 	stmia.w	r4, {r0, r1}
 800fc42:	607a      	str	r2, [r7, #4]
 800fc44:	603b      	str	r3, [r7, #0]
    int idx_now;

    /*
     * Si la resolución asignada por el usuario es 0, no hay nada que hacer.
     */
    if (fp.res == 0)
 800fc46:	7b3b      	ldrb	r3, [r7, #12]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d101      	bne.n	800fc50 <fm_lcd_fp_add_dot+0x1c>
    {
        return (0);
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	e031      	b.n	800fcb4 <fm_lcd_fp_add_dot+0x80>
    }

    idx_now = strlen(p_str); //Como indice apunta a terminador nulo.
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f7f0 fc37 	bl	80004c4 <strlen>
 800fc56:	4603      	mov	r3, r0
 800fc58:	617b      	str	r3, [r7, #20]

    /*
     * Chequeo de contorno para ver si entra el punto o no.
     */

    if ((idx_now + 1 + 1) >= str_size)
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	3302      	adds	r3, #2
 800fc5e:	683a      	ldr	r2, [r7, #0]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	dc02      	bgt.n	800fc6a <fm_lcd_fp_add_dot+0x36>
    {
        return (-1);
 800fc64:	f04f 33ff 	mov.w	r3, #4294967295
 800fc68:	e024      	b.n	800fcb4 <fm_lcd_fp_add_dot+0x80>
    }

    idx_end = idx_now - fp.res; //Como índice apunta a donde debe ir el '.'
 800fc6a:	7b3b      	ldrb	r3, [r7, #12]
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	1a9b      	subs	r3, r3, r2
 800fc72:	613b      	str	r3, [r7, #16]

    /*
     * Desplazo posiciones en el arreglo hasta llegar a la posición donde debe
     * ir ubicado el '.'
     */
    while (idx_now != idx_end)
 800fc74:	e00b      	b.n	800fc8e <fm_lcd_fp_add_dot+0x5a>
    {
        p_str[idx_now + 1] = p_str[idx_now];
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	441a      	add	r2, r3
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	6879      	ldr	r1, [r7, #4]
 800fc82:	440b      	add	r3, r1
 800fc84:	7812      	ldrb	r2, [r2, #0]
 800fc86:	701a      	strb	r2, [r3, #0]
        idx_now--;
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	3b01      	subs	r3, #1
 800fc8c:	617b      	str	r3, [r7, #20]
    while (idx_now != idx_end)
 800fc8e:	697a      	ldr	r2, [r7, #20]
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d1ef      	bne.n	800fc76 <fm_lcd_fp_add_dot+0x42>
    }
    p_str[idx_now + 1] = p_str[idx_now];
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	441a      	add	r2, r3
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	3301      	adds	r3, #1
 800fca0:	6879      	ldr	r1, [r7, #4]
 800fca2:	440b      	add	r3, r1
 800fca4:	7812      	ldrb	r2, [r2, #0]
 800fca6:	701a      	strb	r2, [r3, #0]
    p_str[idx_now] = '.';
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	687a      	ldr	r2, [r7, #4]
 800fcac:	4413      	add	r3, r2
 800fcae:	222e      	movs	r2, #46	; 0x2e
 800fcb0:	701a      	strb	r2, [r3, #0]

    return (0);
 800fcb2:	2300      	movs	r3, #0
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	371c      	adds	r7, #28
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd90      	pop	{r4, r7, pc}

0800fcbc <fm_lcd_fp_to_str>:
 * @param str_size tamaño del string.
 * @retval int.
 */
int fm_lcd_fp_to_str(fmc_fp_t fp, char leading_char, int str_width, char *p_str,
int str_size)
{
 800fcbc:	b490      	push	{r4, r7}
 800fcbe:	b088      	sub	sp, #32
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	f107 0408 	add.w	r4, r7, #8
 800fcc6:	e884 0003 	stmia.w	r4, {r0, r1}
 800fcca:	603b      	str	r3, [r7, #0]
 800fccc:	4613      	mov	r3, r2
 800fcce:	71fb      	strb	r3, [r7, #7]
    int idx_1 = 0;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	61fb      	str	r3, [r7, #28]
    /*
     * Este es el unico chequeo de contorno. Verifica que el tamaño del string
     * no sea menor a PCF8553_DATA_SIZE, calculado como suficiente para operar
     * con las líneas del lcd.
     */
    if (str_size < PCF8553_DATA_SIZE)
 800fcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd6:	2b13      	cmp	r3, #19
 800fcd8:	dc02      	bgt.n	800fce0 <fm_lcd_fp_to_str+0x24>
    {
        return (-1);
 800fcda:	f04f 33ff 	mov.w	r3, #4294967295
 800fcde:	e07d      	b.n	800fddc <fm_lcd_fp_to_str+0x120>
    }

    /*
     * Esta linea es necesaria para representa bien a num = 0
     */
    p_str[idx_1] = fp.num % ten_multiplier + '0';
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	220a      	movs	r2, #10
 800fce4:	fbb3 f1f2 	udiv	r1, r3, r2
 800fce8:	fb01 f202 	mul.w	r2, r1, r2
 800fcec:	1a9b      	subs	r3, r3, r2
 800fcee:	b2da      	uxtb	r2, r3
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fcf4:	440b      	add	r3, r1
 800fcf6:	3230      	adds	r2, #48	; 0x30
 800fcf8:	b2d2      	uxtb	r2, r2
 800fcfa:	701a      	strb	r2, [r3, #0]

    uint32_t num_aux = fp.num;
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	617b      	str	r3, [r7, #20]

    /*
     * Almaceno el número de atrás para adelante hasta que llegar al primer
     * dígito inclusive
     */
    while (fp.num / ten_multiplier)
 800fd00:	e015      	b.n	800fd2e <fm_lcd_fp_to_str+0x72>
    {
        idx_1++;
 800fd02:	69fb      	ldr	r3, [r7, #28]
 800fd04:	3301      	adds	r3, #1
 800fd06:	61fb      	str	r3, [r7, #28]
        fp.num /= ten_multiplier;
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	220a      	movs	r2, #10
 800fd0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd10:	60bb      	str	r3, [r7, #8]
        p_str[idx_1] = fp.num % ten_multiplier + '0';
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	220a      	movs	r2, #10
 800fd16:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd1a:	fb01 f202 	mul.w	r2, r1, r2
 800fd1e:	1a9b      	subs	r3, r3, r2
 800fd20:	b2da      	uxtb	r2, r3
 800fd22:	69fb      	ldr	r3, [r7, #28]
 800fd24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd26:	440b      	add	r3, r1
 800fd28:	3230      	adds	r2, #48	; 0x30
 800fd2a:	b2d2      	uxtb	r2, r2
 800fd2c:	701a      	strb	r2, [r3, #0]
    while (fp.num / ten_multiplier)
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	220a      	movs	r2, #10
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d2e5      	bcs.n	800fd02 <fm_lcd_fp_to_str+0x46>

    /*
     * Si se midió 0 pulsos, se rellena con 0 hasta pasar el punto y asi se
     * mantiene la resolución deseada.
     */
    if (num_aux == 0)
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d116      	bne.n	800fd6a <fm_lcd_fp_to_str+0xae>
    {
        while (idx_1 < fp.res)
 800fd3c:	e010      	b.n	800fd60 <fm_lcd_fp_to_str+0xa4>
        {
            idx_1++;
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	3301      	adds	r3, #1
 800fd42:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = fp.num % ten_multiplier + '0';
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	220a      	movs	r2, #10
 800fd48:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd4c:	fb01 f202 	mul.w	r2, r1, r2
 800fd50:	1a9b      	subs	r3, r3, r2
 800fd52:	b2da      	uxtb	r2, r3
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd58:	440b      	add	r3, r1
 800fd5a:	3230      	adds	r2, #48	; 0x30
 800fd5c:	b2d2      	uxtb	r2, r2
 800fd5e:	701a      	strb	r2, [r3, #0]
        while (idx_1 < fp.res)
 800fd60:	7b3b      	ldrb	r3, [r7, #12]
 800fd62:	461a      	mov	r2, r3
 800fd64:	69fb      	ldr	r3, [r7, #28]
 800fd66:	4293      	cmp	r3, r2
 800fd68:	dbe9      	blt.n	800fd3e <fm_lcd_fp_to_str+0x82>

    /*
     * Si el caracter a completar no es 0, se lo debe agregar al final del
     * arreglo hasta completar el largo de la linea (7 u 8 caracteres + \0).
     */
    if (leading_char)
 800fd6a:	79fb      	ldrb	r3, [r7, #7]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d00d      	beq.n	800fd8c <fm_lcd_fp_to_str+0xd0>
    {
        while (idx_1 < str_width - 1)
 800fd70:	e007      	b.n	800fd82 <fm_lcd_fp_to_str+0xc6>
        {
            idx_1++;
 800fd72:	69fb      	ldr	r3, [r7, #28]
 800fd74:	3301      	adds	r3, #1
 800fd76:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = leading_char;
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd7c:	4413      	add	r3, r2
 800fd7e:	79fa      	ldrb	r2, [r7, #7]
 800fd80:	701a      	strb	r2, [r3, #0]
        while (idx_1 < str_width - 1)
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	3b01      	subs	r3, #1
 800fd86:	69fa      	ldr	r2, [r7, #28]
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	dbf2      	blt.n	800fd72 <fm_lcd_fp_to_str+0xb6>
        }
    }
    p_str[idx_1] = '\0';
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd90:	4413      	add	r3, r2
 800fd92:	2200      	movs	r2, #0
 800fd94:	701a      	strb	r2, [r3, #0]
    idx_1--;
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	3b01      	subs	r3, #1
 800fd9a:	61fb      	str	r3, [r7, #28]

    /*
     *Esta sección da vuelta el arreglo ya que se completó al revés.
     */
    int idx_2 = 0;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	61bb      	str	r3, [r7, #24]
    char ch_temp;

    while (idx_1 > idx_2)
 800fda0:	e017      	b.n	800fdd2 <fm_lcd_fp_to_str+0x116>
    {
        ch_temp = p_str[idx_1];
 800fda2:	69fb      	ldr	r3, [r7, #28]
 800fda4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fda6:	4413      	add	r3, r2
 800fda8:	781b      	ldrb	r3, [r3, #0]
 800fdaa:	74fb      	strb	r3, [r7, #19]
        p_str[idx_1] = p_str[idx_2];
 800fdac:	69bb      	ldr	r3, [r7, #24]
 800fdae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdb0:	441a      	add	r2, r3
 800fdb2:	69fb      	ldr	r3, [r7, #28]
 800fdb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fdb6:	440b      	add	r3, r1
 800fdb8:	7812      	ldrb	r2, [r2, #0]
 800fdba:	701a      	strb	r2, [r3, #0]
        p_str[idx_2] = ch_temp;
 800fdbc:	69bb      	ldr	r3, [r7, #24]
 800fdbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdc0:	4413      	add	r3, r2
 800fdc2:	7cfa      	ldrb	r2, [r7, #19]
 800fdc4:	701a      	strb	r2, [r3, #0]
        idx_1--;
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	3b01      	subs	r3, #1
 800fdca:	61fb      	str	r3, [r7, #28]
        idx_2++;
 800fdcc:	69bb      	ldr	r3, [r7, #24]
 800fdce:	3301      	adds	r3, #1
 800fdd0:	61bb      	str	r3, [r7, #24]
    while (idx_1 > idx_2)
 800fdd2:	69fa      	ldr	r2, [r7, #28]
 800fdd4:	69bb      	ldr	r3, [r7, #24]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	dce3      	bgt.n	800fda2 <fm_lcd_fp_to_str+0xe6>
    }

    return (0);
 800fdda:	2300      	movs	r3, #0
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3720      	adds	r7, #32
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bc90      	pop	{r4, r7}
 800fde4:	4770      	bx	lr

0800fde6 <fm_lcd_init>:
 * @brief Es la primera instrucción a llamar para usar el lcd.
 * @param  None
 * @retval None
 */
void fm_lcd_init()
{
 800fde6:	b580      	push	{r7, lr}
 800fde8:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800fdea:	f000 fb67 	bl	80104bc <lcd_clear_all>
    lcd_init();
 800fdee:	f001 f9fd 	bl	80111ec <lcd_init>
}
 800fdf2:	bf00      	nop
 800fdf4:	bd80      	pop	{r7, pc}
	...

0800fdf8 <fm_lcd_k_factor>:
 * @param Evento actual con el que se imprime esta pantalla.
 * @param Dígito a modificar el cual debe titilar.
 * @retval None
 */
void fm_lcd_k_factor(fm_event_t event_id, sel_digit_t digit_modify)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b08e      	sub	sp, #56	; 0x38
 800fdfc:	af02      	add	r7, sp, #8
 800fdfe:	4603      	mov	r3, r0
 800fe00:	460a      	mov	r2, r1
 800fe02:	71fb      	strb	r3, [r7, #7]
 800fe04:	4613      	mov	r3, r2
 800fe06:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(K_FACTOR), '0',
 800fe08:	f107 0320 	add.w	r3, r7, #32
 800fe0c:	2100      	movs	r1, #0
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7ff f834 	bl	800ee7c <fm_factory_get_k_factor>
 800fe14:	2314      	movs	r3, #20
 800fe16:	9301      	str	r3, [sp, #4]
 800fe18:	f107 030c 	add.w	r3, r7, #12
 800fe1c:	9300      	str	r3, [sp, #0]
 800fe1e:	2309      	movs	r3, #9
 800fe20:	2230      	movs	r2, #48	; 0x30
 800fe22:	f107 0120 	add.w	r1, r7, #32
 800fe26:	c903      	ldmia	r1, {r0, r1}
 800fe28:	f7ff ff48 	bl	800fcbc <fm_lcd_fp_to_str>
    LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(K_FACTOR), lcd_msg,
 800fe2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe30:	2100      	movs	r1, #0
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7ff f822 	bl	800ee7c <fm_factory_get_k_factor>
 800fe38:	f107 020c 	add.w	r2, r7, #12
 800fe3c:	2314      	movs	r3, #20
 800fe3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fe42:	c903      	ldmia	r1, {r0, r1}
 800fe44:	f7ff fef6 	bl	800fc34 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fe48:	f107 030c 	add.w	r3, r7, #12
 800fe4c:	2100      	movs	r1, #0
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f000 f91c 	bl	801008c <fm_lcd_puts>

    if (event_id == EVENT_KEY_ENTER
 800fe54:	79fb      	ldrb	r3, [r7, #7]
 800fe56:	2b04      	cmp	r3, #4
 800fe58:	d006      	beq.n	800fe68 <fm_lcd_k_factor+0x70>
    || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fe5a:	4b1e      	ldr	r3, [pc, #120]	; (800fed4 <fm_lcd_k_factor+0xdc>)
 800fe5c:	781b      	ldrb	r3, [r3, #0]
 800fe5e:	2b04      	cmp	r3, #4
 800fe60:	d106      	bne.n	800fe70 <fm_lcd_k_factor+0x78>
 800fe62:	79fb      	ldrb	r3, [r7, #7]
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d103      	bne.n	800fe70 <fm_lcd_k_factor+0x78>
    {
        blink = 1;
 800fe68:	4b1b      	ldr	r3, [pc, #108]	; (800fed8 <fm_lcd_k_factor+0xe0>)
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	e016      	b.n	800fe9e <fm_lcd_k_factor+0xa6>
    }
    else if (event_id == EVENT_KEY_DOWN
 800fe70:	79fb      	ldrb	r3, [r7, #7]
 800fe72:	2b03      	cmp	r3, #3
 800fe74:	d010      	beq.n	800fe98 <fm_lcd_k_factor+0xa0>
    || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 800fe76:	4b17      	ldr	r3, [pc, #92]	; (800fed4 <fm_lcd_k_factor+0xdc>)
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	2b03      	cmp	r3, #3
 800fe7c:	d102      	bne.n	800fe84 <fm_lcd_k_factor+0x8c>
 800fe7e:	79fb      	ldrb	r3, [r7, #7]
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d009      	beq.n	800fe98 <fm_lcd_k_factor+0xa0>
    || event_id == EVENT_KEY_UP
 800fe84:	79fb      	ldrb	r3, [r7, #7]
 800fe86:	2b02      	cmp	r3, #2
 800fe88:	d006      	beq.n	800fe98 <fm_lcd_k_factor+0xa0>
    || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fe8a:	4b12      	ldr	r3, [pc, #72]	; (800fed4 <fm_lcd_k_factor+0xdc>)
 800fe8c:	781b      	ldrb	r3, [r3, #0]
 800fe8e:	2b02      	cmp	r3, #2
 800fe90:	d105      	bne.n	800fe9e <fm_lcd_k_factor+0xa6>
 800fe92:	79fb      	ldrb	r3, [r7, #7]
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d102      	bne.n	800fe9e <fm_lcd_k_factor+0xa6>
    {
        blink = 0;
 800fe98:	4b0f      	ldr	r3, [pc, #60]	; (800fed8 <fm_lcd_k_factor+0xe0>)
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 800fe9e:	4b0e      	ldr	r3, [pc, #56]	; (800fed8 <fm_lcd_k_factor+0xe0>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	2b01      	cmp	r3, #1
 800fea4:	d10b      	bne.n	800febe <fm_lcd_k_factor+0xc6>
    {
        lcd_clear_digit(DIG_7 - digit_modify, HIGH_ROW);
 800fea6:	79bb      	ldrb	r3, [r7, #6]
 800fea8:	f1c3 0307 	rsb	r3, r3, #7
 800feac:	b2db      	uxtb	r3, r3
 800feae:	2100      	movs	r1, #0
 800feb0:	4618      	mov	r0, r3
 800feb2:	f000 fb2b 	bl	801050c <lcd_clear_digit>
        blink = 0;
 800feb6:	4b08      	ldr	r3, [pc, #32]	; (800fed8 <fm_lcd_k_factor+0xe0>)
 800feb8:	2200      	movs	r2, #0
 800feba:	601a      	str	r2, [r3, #0]
 800febc:	e002      	b.n	800fec4 <fm_lcd_k_factor+0xcc>
    }
    else
    {
        blink = 1;
 800febe:	4b06      	ldr	r3, [pc, #24]	; (800fed8 <fm_lcd_k_factor+0xe0>)
 800fec0:	2201      	movs	r2, #1
 800fec2:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(K, 0x00);
 800fec4:	2100      	movs	r1, #0
 800fec6:	200b      	movs	r0, #11
 800fec8:	f001 fc46 	bl	8011758 <lcd_set_symbol>
}
 800fecc:	bf00      	nop
 800fece:	3730      	adds	r7, #48	; 0x30
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	20001e0b 	.word	0x20001e0b
 800fed8:	2000011c 	.word	0x2000011c

0800fedc <fm_lcd_k_lin>:
 * @param Evento actual con el que se imprimió esta pantalla.
 * @param Digito a modificar, el cual debe parpadear.
 */
void fm_lcd_k_lin(sel_k k_sel, fm_event_t event_id,
sel_digit_k_lin_t digit_lin_modify)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b090      	sub	sp, #64	; 0x40
 800fee0:	af02      	add	r7, sp, #8
 800fee2:	4603      	mov	r3, r0
 800fee4:	71fb      	strb	r3, [r7, #7]
 800fee6:	460b      	mov	r3, r1
 800fee8:	71bb      	strb	r3, [r7, #6]
 800feea:	4613      	mov	r3, r2
 800feec:	717b      	strb	r3, [r7, #5]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(k_sel), '0', LINE_0_DIGITS,
 800feee:	f107 0320 	add.w	r3, r7, #32
 800fef2:	79fa      	ldrb	r2, [r7, #7]
 800fef4:	4611      	mov	r1, r2
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7fe ffc0 	bl	800ee7c <fm_factory_get_k_factor>
 800fefc:	2314      	movs	r3, #20
 800fefe:	9301      	str	r3, [sp, #4]
 800ff00:	f107 030c 	add.w	r3, r7, #12
 800ff04:	9300      	str	r3, [sp, #0]
 800ff06:	2309      	movs	r3, #9
 800ff08:	2230      	movs	r2, #48	; 0x30
 800ff0a:	f107 0120 	add.w	r1, r7, #32
 800ff0e:	c903      	ldmia	r1, {r0, r1}
 800ff10:	f7ff fed4 	bl	800fcbc <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(k_sel), lcd_msg, sizeof(lcd_msg));
 800ff14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff18:	79fa      	ldrb	r2, [r7, #7]
 800ff1a:	4611      	mov	r1, r2
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f7fe ffad 	bl	800ee7c <fm_factory_get_k_factor>
 800ff22:	f107 020c 	add.w	r2, r7, #12
 800ff26:	2314      	movs	r3, #20
 800ff28:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ff2c:	c903      	ldmia	r1, {r0, r1}
 800ff2e:	f7ff fe81 	bl	800fc34 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800ff32:	f107 030c 	add.w	r3, r7, #12
 800ff36:	2100      	movs	r1, #0
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f000 f8a7 	bl	801008c <fm_lcd_puts>

    fm_lcd_fp_to_str(fm_factory_get_frec_lin(k_sel), '0', LINE_1_DIGITS,
 800ff3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff42:	79fa      	ldrb	r2, [r7, #7]
 800ff44:	4611      	mov	r1, r2
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fe ff48 	bl	800eddc <fm_factory_get_frec_lin>
 800ff4c:	2314      	movs	r3, #20
 800ff4e:	9301      	str	r3, [sp, #4]
 800ff50:	f107 030c 	add.w	r3, r7, #12
 800ff54:	9300      	str	r3, [sp, #0]
 800ff56:	2308      	movs	r3, #8
 800ff58:	2230      	movs	r2, #48	; 0x30
 800ff5a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800ff5e:	c903      	ldmia	r1, {r0, r1}
 800ff60:	f7ff feac 	bl	800fcbc <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800ff64:	f107 030c 	add.w	r3, r7, #12
 800ff68:	2101      	movs	r1, #1
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f000 f88e 	bl	801008c <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800ff70:	2101      	movs	r1, #1
 800ff72:	2000      	movs	r0, #0
 800ff74:	f000 faca 	bl	801050c <lcd_clear_digit>
    lcd_clear_digit(DIGIT_1, LOW_ROW);
 800ff78:	2101      	movs	r1, #1
 800ff7a:	2001      	movs	r0, #1
 800ff7c:	f000 fac6 	bl	801050c <lcd_clear_digit>
    lcd_clear_digit(DIGIT_2, LOW_ROW);
 800ff80:	2101      	movs	r1, #1
 800ff82:	2002      	movs	r0, #2
 800ff84:	f000 fac2 	bl	801050c <lcd_clear_digit>

    if (event_id == EVENT_KEY_ENTER
 800ff88:	79bb      	ldrb	r3, [r7, #6]
 800ff8a:	2b04      	cmp	r3, #4
 800ff8c:	d006      	beq.n	800ff9c <fm_lcd_k_lin+0xc0>
    || (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800ff8e:	4b3d      	ldr	r3, [pc, #244]	; (8010084 <fm_lcd_k_lin+0x1a8>)
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	2b04      	cmp	r3, #4
 800ff94:	d106      	bne.n	800ffa4 <fm_lcd_k_lin+0xc8>
 800ff96:	79bb      	ldrb	r3, [r7, #6]
 800ff98:	2b01      	cmp	r3, #1
 800ff9a:	d103      	bne.n	800ffa4 <fm_lcd_k_lin+0xc8>
    {
        blink = 1;
 800ff9c:	4b3a      	ldr	r3, [pc, #232]	; (8010088 <fm_lcd_k_lin+0x1ac>)
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	601a      	str	r2, [r3, #0]
 800ffa2:	e016      	b.n	800ffd2 <fm_lcd_k_lin+0xf6>
    }
    else if (event_id == EVENT_KEY_DOWN
 800ffa4:	79bb      	ldrb	r3, [r7, #6]
 800ffa6:	2b03      	cmp	r3, #3
 800ffa8:	d010      	beq.n	800ffcc <fm_lcd_k_lin+0xf0>
    || (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH)
 800ffaa:	4b36      	ldr	r3, [pc, #216]	; (8010084 <fm_lcd_k_lin+0x1a8>)
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	2b03      	cmp	r3, #3
 800ffb0:	d102      	bne.n	800ffb8 <fm_lcd_k_lin+0xdc>
 800ffb2:	79bb      	ldrb	r3, [r7, #6]
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d009      	beq.n	800ffcc <fm_lcd_k_lin+0xf0>
    || event_id == EVENT_KEY_UP
 800ffb8:	79bb      	ldrb	r3, [r7, #6]
 800ffba:	2b02      	cmp	r3, #2
 800ffbc:	d006      	beq.n	800ffcc <fm_lcd_k_lin+0xf0>
    || (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800ffbe:	4b31      	ldr	r3, [pc, #196]	; (8010084 <fm_lcd_k_lin+0x1a8>)
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	2b02      	cmp	r3, #2
 800ffc4:	d105      	bne.n	800ffd2 <fm_lcd_k_lin+0xf6>
 800ffc6:	79bb      	ldrb	r3, [r7, #6]
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d102      	bne.n	800ffd2 <fm_lcd_k_lin+0xf6>
    {
        blink = 0;
 800ffcc:	4b2e      	ldr	r3, [pc, #184]	; (8010088 <fm_lcd_k_lin+0x1ac>)
 800ffce:	2200      	movs	r2, #0
 800ffd0:	601a      	str	r2, [r3, #0]
    }

    if (digit_lin_modify <= DIG_LIN_7)
 800ffd2:	797b      	ldrb	r3, [r7, #5]
 800ffd4:	2b07      	cmp	r3, #7
 800ffd6:	d813      	bhi.n	8010000 <fm_lcd_k_lin+0x124>
    {
        if (blink == 1)
 800ffd8:	4b2b      	ldr	r3, [pc, #172]	; (8010088 <fm_lcd_k_lin+0x1ac>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d10b      	bne.n	800fff8 <fm_lcd_k_lin+0x11c>
        {
            lcd_clear_digit(DIG_LIN_7 - digit_lin_modify, HIGH_ROW);
 800ffe0:	797b      	ldrb	r3, [r7, #5]
 800ffe2:	f1c3 0307 	rsb	r3, r3, #7
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	2100      	movs	r1, #0
 800ffea:	4618      	mov	r0, r3
 800ffec:	f000 fa8e 	bl	801050c <lcd_clear_digit>
            blink = 0;
 800fff0:	4b25      	ldr	r3, [pc, #148]	; (8010088 <fm_lcd_k_lin+0x1ac>)
 800fff2:	2200      	movs	r2, #0
 800fff4:	601a      	str	r2, [r3, #0]
 800fff6:	e016      	b.n	8010026 <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 800fff8:	4b23      	ldr	r3, [pc, #140]	; (8010088 <fm_lcd_k_lin+0x1ac>)
 800fffa:	2201      	movs	r2, #1
 800fffc:	601a      	str	r2, [r3, #0]
 800fffe:	e012      	b.n	8010026 <fm_lcd_k_lin+0x14a>
        }
    }
    else
    {
        if (blink == 1)
 8010000:	4b21      	ldr	r3, [pc, #132]	; (8010088 <fm_lcd_k_lin+0x1ac>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	2b01      	cmp	r3, #1
 8010006:	d10b      	bne.n	8010020 <fm_lcd_k_lin+0x144>
        {
            lcd_clear_digit(DIG_LIN_6 - digit_lin_modify + DIG_LIN_8, LOW_ROW);
 8010008:	797b      	ldrb	r3, [r7, #5]
 801000a:	f1c3 030e 	rsb	r3, r3, #14
 801000e:	b2db      	uxtb	r3, r3
 8010010:	2101      	movs	r1, #1
 8010012:	4618      	mov	r0, r3
 8010014:	f000 fa7a 	bl	801050c <lcd_clear_digit>
            blink = 0;
 8010018:	4b1b      	ldr	r3, [pc, #108]	; (8010088 <fm_lcd_k_lin+0x1ac>)
 801001a:	2200      	movs	r2, #0
 801001c:	601a      	str	r2, [r3, #0]
 801001e:	e002      	b.n	8010026 <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 8010020:	4b19      	ldr	r3, [pc, #100]	; (8010088 <fm_lcd_k_lin+0x1ac>)
 8010022:	2201      	movs	r2, #1
 8010024:	601a      	str	r2, [r3, #0]
        }
    }

    lcd_set_symbol(F, 0x00);
 8010026:	2100      	movs	r1, #0
 8010028:	2010      	movs	r0, #16
 801002a:	f001 fb95 	bl	8011758 <lcd_set_symbol>
    if (k_sel == K_LIN_1)
 801002e:	79fb      	ldrb	r3, [r7, #7]
 8010030:	2b01      	cmp	r3, #1
 8010032:	d103      	bne.n	801003c <fm_lcd_k_lin+0x160>
    {
        lcd_set_symbol(LIN_1, 0x00);
 8010034:	2100      	movs	r1, #0
 8010036:	2011      	movs	r0, #17
 8010038:	f001 fb8e 	bl	8011758 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_2)
 801003c:	79fb      	ldrb	r3, [r7, #7]
 801003e:	2b02      	cmp	r3, #2
 8010040:	d103      	bne.n	801004a <fm_lcd_k_lin+0x16e>
    {
        lcd_set_symbol(LIN_2, 0x00);
 8010042:	2100      	movs	r1, #0
 8010044:	2012      	movs	r0, #18
 8010046:	f001 fb87 	bl	8011758 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_3)
 801004a:	79fb      	ldrb	r3, [r7, #7]
 801004c:	2b03      	cmp	r3, #3
 801004e:	d103      	bne.n	8010058 <fm_lcd_k_lin+0x17c>
    {
        lcd_set_symbol(LIN_3, 0x00);
 8010050:	2100      	movs	r1, #0
 8010052:	2013      	movs	r0, #19
 8010054:	f001 fb80 	bl	8011758 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_4)
 8010058:	79fb      	ldrb	r3, [r7, #7]
 801005a:	2b04      	cmp	r3, #4
 801005c:	d103      	bne.n	8010066 <fm_lcd_k_lin+0x18a>
    {
        lcd_set_symbol(LIN_4, 0x00);
 801005e:	2100      	movs	r1, #0
 8010060:	2014      	movs	r0, #20
 8010062:	f001 fb79 	bl	8011758 <lcd_set_symbol>
    }
    if (k_sel == K_LIN_5)
 8010066:	79fb      	ldrb	r3, [r7, #7]
 8010068:	2b05      	cmp	r3, #5
 801006a:	d103      	bne.n	8010074 <fm_lcd_k_lin+0x198>
    {
        lcd_set_symbol(LIN_5, 0x00);
 801006c:	2100      	movs	r1, #0
 801006e:	2015      	movs	r0, #21
 8010070:	f001 fb72 	bl	8011758 <lcd_set_symbol>
    }
    lcd_set_symbol(HZ, 0x00);
 8010074:	2100      	movs	r1, #0
 8010076:	2016      	movs	r0, #22
 8010078:	f001 fb6e 	bl	8011758 <lcd_set_symbol>
}
 801007c:	bf00      	nop
 801007e:	3738      	adds	r7, #56	; 0x38
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	20001e0b 	.word	0x20001e0b
 8010088:	2000011c 	.word	0x2000011c

0801008c <fm_lcd_puts>:
 * @param Arreglo a imprimir.
 * @param Fila donde se coloca el arreglo a imprimir.
 * @retval None
 */
void fm_lcd_puts(const char *c, const rows_t row)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b084      	sub	sp, #16
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	460b      	mov	r3, r1
 8010096:	70fb      	strb	r3, [r7, #3]
    uint8_t col = 0;
 8010098:	2300      	movs	r3, #0
 801009a:	73fb      	strb	r3, [r7, #15]
    uint8_t col_limit;

    if (row == 0)
 801009c:	78fb      	ldrb	r3, [r7, #3]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d102      	bne.n	80100a8 <fm_lcd_puts+0x1c>
    {
        col_limit = LINE_0_DIGITS - 1;
 80100a2:	2308      	movs	r3, #8
 80100a4:	73bb      	strb	r3, [r7, #14]
 80100a6:	e026      	b.n	80100f6 <fm_lcd_puts+0x6a>
    }
    else
    {
        col_limit = LINE_1_DIGITS - 1;
 80100a8:	2307      	movs	r3, #7
 80100aa:	73bb      	strb	r3, [r7, #14]
    }

    while ((*c) && (col < col_limit))
 80100ac:	e023      	b.n	80100f6 <fm_lcd_puts+0x6a>
    {
        if (((*c >= '0') && (*c <= '9')) || (*c == ' ') || (*c == '.'))
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	2b2f      	cmp	r3, #47	; 0x2f
 80100b4:	d903      	bls.n	80100be <fm_lcd_puts+0x32>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	2b39      	cmp	r3, #57	; 0x39
 80100bc:	d907      	bls.n	80100ce <fm_lcd_puts+0x42>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	781b      	ldrb	r3, [r3, #0]
 80100c2:	2b20      	cmp	r3, #32
 80100c4:	d003      	beq.n	80100ce <fm_lcd_puts+0x42>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	781b      	ldrb	r3, [r3, #0]
 80100ca:	2b2e      	cmp	r3, #46	; 0x2e
 80100cc:	d106      	bne.n	80100dc <fm_lcd_puts+0x50>
        {
            lcd_put_char(*c, col, row);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	78fa      	ldrb	r2, [r7, #3]
 80100d4:	7bf9      	ldrb	r1, [r7, #15]
 80100d6:	4618      	mov	r0, r3
 80100d8:	f001 f88e 	bl	80111f8 <lcd_put_char>
        }
        col++;
 80100dc:	7bfb      	ldrb	r3, [r7, #15]
 80100de:	3301      	adds	r3, #1
 80100e0:	73fb      	strb	r3, [r7, #15]
        c++;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	3301      	adds	r3, #1
 80100e6:	607b      	str	r3, [r7, #4]
        if (*c == '.')
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	2b2e      	cmp	r3, #46	; 0x2e
 80100ee:	d102      	bne.n	80100f6 <fm_lcd_puts+0x6a>
        {
            col--;
 80100f0:	7bfb      	ldrb	r3, [r7, #15]
 80100f2:	3b01      	subs	r3, #1
 80100f4:	73fb      	strb	r3, [r7, #15]
    while ((*c) && (col < col_limit))
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d003      	beq.n	8010106 <fm_lcd_puts+0x7a>
 80100fe:	7bfa      	ldrb	r2, [r7, #15]
 8010100:	7bbb      	ldrb	r3, [r7, #14]
 8010102:	429a      	cmp	r2, r3
 8010104:	d3d3      	bcc.n	80100ae <fm_lcd_puts+0x22>
        }
    }
}
 8010106:	bf00      	nop
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}

0801010e <fm_lcd_refresh>:
 * la librería de mas bajo nivel 'lcd.h'.
 * @param  None
 * @retval None
 */
void fm_lcd_refresh()
{
 801010e:	b580      	push	{r7, lr}
 8010110:	af00      	add	r7, sp, #0
    lcd_refresh();
 8010112:	f001 fa6f 	bl	80115f4 <lcd_refresh>
}
 8010116:	bf00      	nop
 8010118:	bd80      	pop	{r7, pc}

0801011a <fm_lcd_ttl_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_ttl_rate()
{
 801011a:	b580      	push	{r7, lr}
 801011c:	b0b8      	sub	sp, #224	; 0xe0
 801011e:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_ttl().volume, ' ', LINE_0_DIGITS, lcd_msg,
 8010120:	f107 0318 	add.w	r3, r7, #24
 8010124:	4618      	mov	r0, r3
 8010126:	f004 fd5f 	bl	8014be8 <fmc_get_ttl>
 801012a:	2314      	movs	r3, #20
 801012c:	9301      	str	r3, [sp, #4]
 801012e:	1d3b      	adds	r3, r7, #4
 8010130:	9300      	str	r3, [sp, #0]
 8010132:	2309      	movs	r3, #9
 8010134:	2220      	movs	r2, #32
 8010136:	f107 0120 	add.w	r1, r7, #32
 801013a:	c903      	ldmia	r1, {r0, r1}
 801013c:	f7ff fdbe 	bl	800fcbc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_ttl().volume, lcd_msg, sizeof(lcd_msg));
 8010140:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010144:	4618      	mov	r0, r3
 8010146:	f004 fd4f 	bl	8014be8 <fmc_get_ttl>
 801014a:	1d3a      	adds	r2, r7, #4
 801014c:	2314      	movs	r3, #20
 801014e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010152:	c903      	ldmia	r1, {r0, r1}
 8010154:	f7ff fd6e 	bl	800fc34 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 8010158:	1d3b      	adds	r3, r7, #4
 801015a:	2100      	movs	r1, #0
 801015c:	4618      	mov	r0, r3
 801015e:	f7ff ff95 	bl	801008c <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 8010162:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010166:	4618      	mov	r0, r3
 8010168:	f004 fcd8 	bl	8014b1c <fmc_get_rate>
 801016c:	2314      	movs	r3, #20
 801016e:	9301      	str	r3, [sp, #4]
 8010170:	1d3b      	adds	r3, r7, #4
 8010172:	9300      	str	r3, [sp, #0]
 8010174:	2308      	movs	r3, #8
 8010176:	2220      	movs	r2, #32
 8010178:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801017c:	c903      	ldmia	r1, {r0, r1}
 801017e:	f7ff fd9d 	bl	800fcbc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 8010182:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010186:	4618      	mov	r0, r3
 8010188:	f004 fcc8 	bl	8014b1c <fmc_get_rate>
 801018c:	1d3a      	adds	r2, r7, #4
 801018e:	2314      	movs	r3, #20
 8010190:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8010194:	c903      	ldmia	r1, {r0, r1}
 8010196:	f7ff fd4d 	bl	800fc34 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 801019a:	1d3b      	adds	r3, r7, #4
 801019c:	2101      	movs	r1, #1
 801019e:	4618      	mov	r0, r3
 80101a0:	f7ff ff74 	bl	801008c <fm_lcd_puts>

    lcd_set_symbol(TTL, 0x0);
 80101a4:	2100      	movs	r1, #0
 80101a6:	2005      	movs	r0, #5
 80101a8:	f001 fad6 	bl	8011758 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 80101ac:	2100      	movs	r1, #0
 80101ae:	2002      	movs	r0, #2
 80101b0:	f001 fad2 	bl	8011758 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_ttl().unit_volume, 0x0);
 80101b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80101b8:	4618      	mov	r0, r3
 80101ba:	f004 fd15 	bl	8014be8 <fmc_get_ttl>
 80101be:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80101c2:	2100      	movs	r1, #0
 80101c4:	4618      	mov	r0, r3
 80101c6:	f001 fe87 	bl	8011ed8 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 80101ca:	2100      	movs	r1, #0
 80101cc:	2007      	movs	r0, #7
 80101ce:	f001 fac3 	bl	8011758 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_ttl().unit_time, 0x0);
 80101d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80101d6:	4618      	mov	r0, r3
 80101d8:	f004 fd06 	bl	8014be8 <fmc_get_ttl>
 80101dc:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 80101e0:	2100      	movs	r1, #0
 80101e2:	4618      	mov	r0, r3
 80101e4:	f001 fe36 	bl	8011e54 <lcd_set_time_unit>
}
 80101e8:	bf00      	nop
 80101ea:	37d8      	adds	r7, #216	; 0xd8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <fm_lcd_units_tim>:
 * configuración de unidades tiempo y la resolución del factor RATE.
 * @param  Evento actual con el que se imprime la pantalla.
 * @retval None
 */
void fm_lcd_units_tim(fm_event_t event_id)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b0a6      	sub	sp, #152	; 0x98
 80101f4:	af02      	add	r7, sp, #8
 80101f6:	4603      	mov	r3, r0
 80101f8:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_tim(), '0', LINE_1_DIGITS, lcd_msg,
 80101fa:	f107 0320 	add.w	r3, r7, #32
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fe fed6 	bl	800efb0 <fm_factory_get_units_tim>
 8010204:	2314      	movs	r3, #20
 8010206:	9301      	str	r3, [sp, #4]
 8010208:	f107 030c 	add.w	r3, r7, #12
 801020c:	9300      	str	r3, [sp, #0]
 801020e:	2308      	movs	r3, #8
 8010210:	2230      	movs	r2, #48	; 0x30
 8010212:	f107 0120 	add.w	r1, r7, #32
 8010216:	c903      	ldmia	r1, {r0, r1}
 8010218:	f7ff fd50 	bl	800fcbc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_tim(), lcd_msg, sizeof(lcd_msg));
 801021c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010220:	4618      	mov	r0, r3
 8010222:	f7fe fec5 	bl	800efb0 <fm_factory_get_units_tim>
 8010226:	f107 020c 	add.w	r2, r7, #12
 801022a:	2314      	movs	r3, #20
 801022c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010230:	c903      	ldmia	r1, {r0, r1}
 8010232:	f7ff fcff 	bl	800fc34 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 8010236:	f107 030c 	add.w	r3, r7, #12
 801023a:	2101      	movs	r1, #1
 801023c:	4618      	mov	r0, r3
 801023e:	f7ff ff25 	bl	801008c <fm_lcd_puts>

    if (event_id != EVENT_LCD_REFRESH
 8010242:	79fb      	ldrb	r3, [r7, #7]
 8010244:	2b01      	cmp	r3, #1
 8010246:	d106      	bne.n	8010256 <fm_lcd_units_tim+0x66>
    || (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 8010248:	4b35      	ldr	r3, [pc, #212]	; (8010320 <fm_lcd_units_tim+0x130>)
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	2b01      	cmp	r3, #1
 801024e:	d005      	beq.n	801025c <fm_lcd_units_tim+0x6c>
 8010250:	79fb      	ldrb	r3, [r7, #7]
 8010252:	2b01      	cmp	r3, #1
 8010254:	d102      	bne.n	801025c <fm_lcd_units_tim+0x6c>
    {
        blink = 0;
 8010256:	4b33      	ldr	r3, [pc, #204]	; (8010324 <fm_lcd_units_tim+0x134>)
 8010258:	2200      	movs	r2, #0
 801025a:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 801025c:	4b31      	ldr	r3, [pc, #196]	; (8010324 <fm_lcd_units_tim+0x134>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b01      	cmp	r3, #1
 8010262:	d146      	bne.n	80102f2 <fm_lcd_units_tim+0x102>
    {
        if (fm_factory_get_units_tim().res == DECIMAL_1)
 8010264:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010268:	4618      	mov	r0, r3
 801026a:	f7fe fea1 	bl	800efb0 <fm_factory_get_units_tim>
 801026e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010272:	2b01      	cmp	r3, #1
 8010274:	d109      	bne.n	801028a <fm_lcd_units_tim+0x9a>
        {
            resolution_modify = PNT_5;
 8010276:	2305      	movs	r3, #5
 8010278:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 801027c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010280:	4619      	mov	r1, r3
 8010282:	2001      	movs	r0, #1
 8010284:	f000 fc80 	bl	8010b88 <lcd_clear_point>
 8010288:	e024      	b.n	80102d4 <fm_lcd_units_tim+0xe4>
        }
        else if (fm_factory_get_units_tim().res == DECIMAL_2)
 801028a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801028e:	4618      	mov	r0, r3
 8010290:	f7fe fe8e 	bl	800efb0 <fm_factory_get_units_tim>
 8010294:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010298:	2b02      	cmp	r3, #2
 801029a:	d109      	bne.n	80102b0 <fm_lcd_units_tim+0xc0>
        {
            resolution_modify = PNT_4;
 801029c:	2304      	movs	r3, #4
 801029e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 80102a2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80102a6:	4619      	mov	r1, r3
 80102a8:	2001      	movs	r0, #1
 80102aa:	f000 fc6d 	bl	8010b88 <lcd_clear_point>
 80102ae:	e011      	b.n	80102d4 <fm_lcd_units_tim+0xe4>
        }
        else if (fm_factory_get_units_tim().res == DECIMAL_3)
 80102b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7fe fe7b 	bl	800efb0 <fm_factory_get_units_tim>
 80102ba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80102be:	2b03      	cmp	r3, #3
 80102c0:	d108      	bne.n	80102d4 <fm_lcd_units_tim+0xe4>
        {
            resolution_modify = PNT_3;
 80102c2:	2303      	movs	r3, #3
 80102c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 80102c8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80102cc:	4619      	mov	r1, r3
 80102ce:	2001      	movs	r0, #1
 80102d0:	f000 fc5a 	bl	8010b88 <lcd_clear_point>
        }

        lcd_clear_time_unit(fmc_get_rate().unit_time, 0x0);
 80102d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80102d8:	4618      	mov	r0, r3
 80102da:	f004 fc1f 	bl	8014b1c <fmc_get_rate>
 80102de:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80102e2:	2100      	movs	r1, #0
 80102e4:	4618      	mov	r0, r3
 80102e6:	f000 fcfb 	bl	8010ce0 <lcd_clear_time_unit>

        blink = 0;
 80102ea:	4b0e      	ldr	r3, [pc, #56]	; (8010324 <fm_lcd_units_tim+0x134>)
 80102ec:	2200      	movs	r2, #0
 80102ee:	601a      	str	r2, [r3, #0]
 80102f0:	e00d      	b.n	801030e <fm_lcd_units_tim+0x11e>
    }
    else
    {
        lcd_set_time_unit(fmc_get_rate().unit_time, 0x0);
 80102f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80102f6:	4618      	mov	r0, r3
 80102f8:	f004 fc10 	bl	8014b1c <fmc_get_rate>
 80102fc:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010300:	2100      	movs	r1, #0
 8010302:	4618      	mov	r0, r3
 8010304:	f001 fda6 	bl	8011e54 <lcd_set_time_unit>
        blink = 1;
 8010308:	4b06      	ldr	r3, [pc, #24]	; (8010324 <fm_lcd_units_tim+0x134>)
 801030a:	2201      	movs	r2, #1
 801030c:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(RATE, 0x00);
 801030e:	2100      	movs	r1, #0
 8010310:	2002      	movs	r0, #2
 8010312:	f001 fa21 	bl	8011758 <lcd_set_symbol>
}
 8010316:	bf00      	nop
 8010318:	3790      	adds	r7, #144	; 0x90
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop
 8010320:	20001e0b 	.word	0x20001e0b
 8010324:	2000011c 	.word	0x2000011c

08010328 <fm_lcd_units_vol>:
 * TTL.
 * @param  Evento actual con el que se imprime la pantalla.
 * @retval None
 */
void fm_lcd_units_vol(fm_event_t event_id)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b0a6      	sub	sp, #152	; 0x98
 801032c:	af02      	add	r7, sp, #8
 801032e:	4603      	mov	r3, r0
 8010330:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_vol(), '0', LINE_0_DIGITS, lcd_msg,
 8010332:	f107 0320 	add.w	r3, r7, #32
 8010336:	4618      	mov	r0, r3
 8010338:	f7fe fe4c 	bl	800efd4 <fm_factory_get_units_vol>
 801033c:	2314      	movs	r3, #20
 801033e:	9301      	str	r3, [sp, #4]
 8010340:	f107 030c 	add.w	r3, r7, #12
 8010344:	9300      	str	r3, [sp, #0]
 8010346:	2309      	movs	r3, #9
 8010348:	2230      	movs	r2, #48	; 0x30
 801034a:	f107 0120 	add.w	r1, r7, #32
 801034e:	c903      	ldmia	r1, {r0, r1}
 8010350:	f7ff fcb4 	bl	800fcbc <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_vol(), lcd_msg, sizeof(lcd_msg));
 8010354:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010358:	4618      	mov	r0, r3
 801035a:	f7fe fe3b 	bl	800efd4 <fm_factory_get_units_vol>
 801035e:	f107 020c 	add.w	r2, r7, #12
 8010362:	2314      	movs	r3, #20
 8010364:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010368:	c903      	ldmia	r1, {r0, r1}
 801036a:	f7ff fc63 	bl	800fc34 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 801036e:	f107 030c 	add.w	r3, r7, #12
 8010372:	2100      	movs	r1, #0
 8010374:	4618      	mov	r0, r3
 8010376:	f7ff fe89 	bl	801008c <fm_lcd_puts>

    if (event_id != EVENT_LCD_REFRESH
 801037a:	79fb      	ldrb	r3, [r7, #7]
 801037c:	2b01      	cmp	r3, #1
 801037e:	d106      	bne.n	801038e <fm_lcd_units_vol+0x66>
    || (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 8010380:	4b37      	ldr	r3, [pc, #220]	; (8010460 <fm_lcd_units_vol+0x138>)
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	2b01      	cmp	r3, #1
 8010386:	d005      	beq.n	8010394 <fm_lcd_units_vol+0x6c>
 8010388:	79fb      	ldrb	r3, [r7, #7]
 801038a:	2b01      	cmp	r3, #1
 801038c:	d102      	bne.n	8010394 <fm_lcd_units_vol+0x6c>
    {
        blink = 0;
 801038e:	4b35      	ldr	r3, [pc, #212]	; (8010464 <fm_lcd_units_vol+0x13c>)
 8010390:	2200      	movs	r2, #0
 8010392:	601a      	str	r2, [r3, #0]
    }

    if (blink == 1)
 8010394:	4b33      	ldr	r3, [pc, #204]	; (8010464 <fm_lcd_units_vol+0x13c>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	2b01      	cmp	r3, #1
 801039a:	d146      	bne.n	801042a <fm_lcd_units_vol+0x102>
    {
        if (fm_factory_get_units_vol().res == DECIMAL_1)
 801039c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7fe fe17 	bl	800efd4 <fm_factory_get_units_vol>
 80103a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80103aa:	2b01      	cmp	r3, #1
 80103ac:	d109      	bne.n	80103c2 <fm_lcd_units_vol+0x9a>
        {
            resolution_modify = PNT_6;
 80103ae:	2306      	movs	r3, #6
 80103b0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 80103b4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80103b8:	4619      	mov	r1, r3
 80103ba:	2000      	movs	r0, #0
 80103bc:	f000 fbe4 	bl	8010b88 <lcd_clear_point>
 80103c0:	e024      	b.n	801040c <fm_lcd_units_vol+0xe4>
        }
        else if (fm_factory_get_units_vol().res == DECIMAL_2)
 80103c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7fe fe04 	bl	800efd4 <fm_factory_get_units_vol>
 80103cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80103d0:	2b02      	cmp	r3, #2
 80103d2:	d109      	bne.n	80103e8 <fm_lcd_units_vol+0xc0>
        {
            resolution_modify = PNT_5;
 80103d4:	2305      	movs	r3, #5
 80103d6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 80103da:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80103de:	4619      	mov	r1, r3
 80103e0:	2000      	movs	r0, #0
 80103e2:	f000 fbd1 	bl	8010b88 <lcd_clear_point>
 80103e6:	e011      	b.n	801040c <fm_lcd_units_vol+0xe4>
        }
        else if (fm_factory_get_units_vol().res == DECIMAL_3)
 80103e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7fe fdf1 	bl	800efd4 <fm_factory_get_units_vol>
 80103f2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80103f6:	2b03      	cmp	r3, #3
 80103f8:	d108      	bne.n	801040c <fm_lcd_units_vol+0xe4>
        {
            resolution_modify = PNT_4;
 80103fa:	2304      	movs	r3, #4
 80103fc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 8010400:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010404:	4619      	mov	r1, r3
 8010406:	2000      	movs	r0, #0
 8010408:	f000 fbbe 	bl	8010b88 <lcd_clear_point>
        }

        lcd_clear_vol_unit(fmc_get_acm().unit_volume, 0x0);
 801040c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010410:	4618      	mov	r0, r3
 8010412:	f004 fb43 	bl	8014a9c <fmc_get_acm>
 8010416:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801041a:	2100      	movs	r1, #0
 801041c:	4618      	mov	r0, r3
 801041e:	f000 fca1 	bl	8010d64 <lcd_clear_vol_unit>

        blink = 0;
 8010422:	4b10      	ldr	r3, [pc, #64]	; (8010464 <fm_lcd_units_vol+0x13c>)
 8010424:	2200      	movs	r2, #0
 8010426:	601a      	str	r2, [r3, #0]
 8010428:	e00d      	b.n	8010446 <fm_lcd_units_vol+0x11e>
    }
    else
    {
        lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 801042a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801042e:	4618      	mov	r0, r3
 8010430:	f004 fb34 	bl	8014a9c <fmc_get_acm>
 8010434:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010438:	2100      	movs	r1, #0
 801043a:	4618      	mov	r0, r3
 801043c:	f001 fd4c 	bl	8011ed8 <lcd_set_vol_unit>
        blink = 1;
 8010440:	4b08      	ldr	r3, [pc, #32]	; (8010464 <fm_lcd_units_vol+0x13c>)
 8010442:	2201      	movs	r2, #1
 8010444:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(ACM, 0x00);
 8010446:	2100      	movs	r1, #0
 8010448:	2006      	movs	r0, #6
 801044a:	f001 f985 	bl	8011758 <lcd_set_symbol>
    lcd_set_symbol(TTL, 0x00);
 801044e:	2100      	movs	r1, #0
 8010450:	2005      	movs	r0, #5
 8010452:	f001 f981 	bl	8011758 <lcd_set_symbol>
}
 8010456:	bf00      	nop
 8010458:	3790      	adds	r7, #144	; 0x90
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
 801045e:	bf00      	nop
 8010460:	20001e0b 	.word	0x20001e0b
 8010464:	2000011c 	.word	0x2000011c

08010468 <fm_lcd_version>:
 * según las opciones que se elijan.
 * @param puntos de la fila inferior a imprimir, de tipo point_t.
 * @retval None
 */
void fm_lcd_version(point_t low_point1, point_t low_point2)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b086      	sub	sp, #24
 801046c:	af00      	add	r7, sp, #0
 801046e:	4603      	mov	r3, r0
 8010470:	460a      	mov	r2, r1
 8010472:	71fb      	strb	r3, [r7, #7]
 8010474:	4613      	mov	r3, r2
 8010476:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[MSG_LENGTH];

    fm_lcd_format_number_in_line(LOW_ROW, fm_version_get(), lcd_msg,
 8010478:	f004 faf6 	bl	8014a68 <fm_version_get>
 801047c:	4601      	mov	r1, r0
 801047e:	f107 020c 	add.w	r2, r7, #12
 8010482:	230c      	movs	r3, #12
 8010484:	2001      	movs	r0, #1
 8010486:	f7ff fbb1 	bl	800fbec <fm_lcd_format_number_in_line>
    MSG_LENGTH);
    fm_lcd_puts(lcd_msg, LOW_ROW);
 801048a:	f107 030c 	add.w	r3, r7, #12
 801048e:	2101      	movs	r1, #1
 8010490:	4618      	mov	r0, r3
 8010492:	f7ff fdfb 	bl	801008c <fm_lcd_puts>
    lcd_set_point(LOW_ROW, low_point1);
 8010496:	79fb      	ldrb	r3, [r7, #7]
 8010498:	4619      	mov	r1, r3
 801049a:	2001      	movs	r0, #1
 801049c:	f001 f8b0 	bl	8011600 <lcd_set_point>
    lcd_set_point(LOW_ROW, low_point2);
 80104a0:	79bb      	ldrb	r3, [r7, #6]
 80104a2:	4619      	mov	r1, r3
 80104a4:	2001      	movs	r0, #1
 80104a6:	f001 f8ab 	bl	8011600 <lcd_set_point>

    lcd_set_symbol(VE, 0x0);
 80104aa:	2100      	movs	r1, #0
 80104ac:	2009      	movs	r0, #9
 80104ae:	f001 f953 	bl	8011758 <lcd_set_symbol>
}
 80104b2:	bf00      	nop
 80104b4:	3718      	adds	r7, #24
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
	...

080104bc <lcd_clear_all>:
 * bits de los segmentos a imprimir.
 * @param  None
 * @retval None
 */
void lcd_clear_all()
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
    pcf8553_clear_buff();
 80104c2:	f002 f873 	bl	80125ac <pcf8553_clear_buff>
     * Limpia el buffer intermedio de los números que aparecen en las filas HIGH
     * y LOW de la pantalla LCD. No es muy eficiente si se pretende usar al
     * refrescar la pantalla cada x tiempo, pero será necesario usarla por el
     * momento al pasar de una pantalla a otra.
     */
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 80104c6:	2300      	movs	r3, #0
 80104c8:	607b      	str	r3, [r7, #4]
 80104ca:	e013      	b.n	80104f4 <lcd_clear_all+0x38>
    {
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 80104cc:	2300      	movs	r3, #0
 80104ce:	603b      	str	r3, [r7, #0]
 80104d0:	e00a      	b.n	80104e8 <lcd_clear_all+0x2c>
        {
            g_buf[cont_buff_row][cont_buff_col] = 0;
 80104d2:	4a0d      	ldr	r2, [pc, #52]	; (8010508 <lcd_clear_all+0x4c>)
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	00db      	lsls	r3, r3, #3
 80104d8:	441a      	add	r2, r3
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	4413      	add	r3, r2
 80104de:	2200      	movs	r2, #0
 80104e0:	701a      	strb	r2, [r3, #0]
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	3301      	adds	r3, #1
 80104e6:	603b      	str	r3, [r7, #0]
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	2b07      	cmp	r3, #7
 80104ec:	ddf1      	ble.n	80104d2 <lcd_clear_all+0x16>
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	3301      	adds	r3, #1
 80104f2:	607b      	str	r3, [r7, #4]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	dde8      	ble.n	80104cc <lcd_clear_all+0x10>
        }
    }

    pcf8553_write_all(NONE_SEGMENTS);
 80104fa:	2000      	movs	r0, #0
 80104fc:	f002 f8e6 	bl	80126cc <pcf8553_write_all>
}
 8010500:	bf00      	nop
 8010502:	3708      	adds	r7, #8
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}
 8010508:	20001d4c 	.word	0x20001d4c

0801050c <lcd_clear_digit>:
 * @param Dígito a borrar de la pantalla.
 * @param Fila de este dígito.
 * @retval None
 */
void lcd_clear_digit(screen_digits_t digit, rows_t line)
{
 801050c:	b480      	push	{r7}
 801050e:	b083      	sub	sp, #12
 8010510:	af00      	add	r7, sp, #0
 8010512:	4603      	mov	r3, r0
 8010514:	460a      	mov	r2, r1
 8010516:	71fb      	strb	r3, [r7, #7]
 8010518:	4613      	mov	r3, r2
 801051a:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 801051c:	79bb      	ldrb	r3, [r7, #6]
 801051e:	2b00      	cmp	r3, #0
 8010520:	f040 81aa 	bne.w	8010878 <lcd_clear_digit+0x36c>
    {
        switch (digit)
 8010524:	79fb      	ldrb	r3, [r7, #7]
 8010526:	2b07      	cmp	r3, #7
 8010528:	f200 8320 	bhi.w	8010b6c <lcd_clear_digit+0x660>
 801052c:	a201      	add	r2, pc, #4	; (adr r2, 8010534 <lcd_clear_digit+0x28>)
 801052e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010532:	bf00      	nop
 8010534:	08010555 	.word	0x08010555
 8010538:	080105b9 	.word	0x080105b9
 801053c:	0801061d 	.word	0x0801061d
 8010540:	08010681 	.word	0x08010681
 8010544:	080106e5 	.word	0x080106e5
 8010548:	08010749 	.word	0x08010749
 801054c:	080107b1 	.word	0x080107b1
 8010550:	08010815 	.word	0x08010815
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_7);
 8010554:	4b95      	ldr	r3, [pc, #596]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010556:	7b1b      	ldrb	r3, [r3, #12]
 8010558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801055c:	b2da      	uxtb	r2, r3
 801055e:	4b93      	ldr	r3, [pc, #588]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010560:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_6);
 8010562:	4b92      	ldr	r3, [pc, #584]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010564:	7b1b      	ldrb	r3, [r3, #12]
 8010566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801056a:	b2da      	uxtb	r2, r3
 801056c:	4b8f      	ldr	r3, [pc, #572]	; (80107ac <lcd_clear_digit+0x2a0>)
 801056e:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_7);
 8010570:	4b8e      	ldr	r3, [pc, #568]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010572:	7c5b      	ldrb	r3, [r3, #17]
 8010574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010578:	b2da      	uxtb	r2, r3
 801057a:	4b8c      	ldr	r3, [pc, #560]	; (80107ac <lcd_clear_digit+0x2a0>)
 801057c:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_6);
 801057e:	4b8b      	ldr	r3, [pc, #556]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010580:	7c5b      	ldrb	r3, [r3, #17]
 8010582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010586:	b2da      	uxtb	r2, r3
 8010588:	4b88      	ldr	r3, [pc, #544]	; (80107ac <lcd_clear_digit+0x2a0>)
 801058a:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_6);
 801058c:	4b87      	ldr	r3, [pc, #540]	; (80107ac <lcd_clear_digit+0x2a0>)
 801058e:	789b      	ldrb	r3, [r3, #2]
 8010590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010594:	b2da      	uxtb	r2, r3
 8010596:	4b85      	ldr	r3, [pc, #532]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010598:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_7);
 801059a:	4b84      	ldr	r3, [pc, #528]	; (80107ac <lcd_clear_digit+0x2a0>)
 801059c:	789b      	ldrb	r3, [r3, #2]
 801059e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105a2:	b2da      	uxtb	r2, r3
 80105a4:	4b81      	ldr	r3, [pc, #516]	; (80107ac <lcd_clear_digit+0x2a0>)
 80105a6:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_6);
 80105a8:	4b80      	ldr	r3, [pc, #512]	; (80107ac <lcd_clear_digit+0x2a0>)
 80105aa:	79db      	ldrb	r3, [r3, #7]
 80105ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105b0:	b2da      	uxtb	r2, r3
 80105b2:	4b7e      	ldr	r3, [pc, #504]	; (80107ac <lcd_clear_digit+0x2a0>)
 80105b4:	71da      	strb	r2, [r3, #7]
            break;
 80105b6:	e2de      	b.n	8010b76 <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_13] &= ~(1 << BIT_1);
 80105b8:	4b7c      	ldr	r3, [pc, #496]	; (80107ac <lcd_clear_digit+0x2a0>)
 80105ba:	7b5b      	ldrb	r3, [r3, #13]
 80105bc:	f023 0302 	bic.w	r3, r3, #2
 80105c0:	b2da      	uxtb	r2, r3
 80105c2:	4b7a      	ldr	r3, [pc, #488]	; (80107ac <lcd_clear_digit+0x2a0>)
 80105c4:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_0);
 80105c6:	4b79      	ldr	r3, [pc, #484]	; (80107ac <lcd_clear_digit+0x2a0>)
 80105c8:	7b5b      	ldrb	r3, [r3, #13]
 80105ca:	f023 0301 	bic.w	r3, r3, #1
 80105ce:	b2da      	uxtb	r2, r3
 80105d0:	4b76      	ldr	r3, [pc, #472]	; (80107ac <lcd_clear_digit+0x2a0>)
 80105d2:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_1);
 80105d4:	4b75      	ldr	r3, [pc, #468]	; (80107ac <lcd_clear_digit+0x2a0>)
 80105d6:	7c9b      	ldrb	r3, [r3, #18]
 80105d8:	f023 0302 	bic.w	r3, r3, #2
 80105dc:	b2da      	uxtb	r2, r3
 80105de:	4b73      	ldr	r3, [pc, #460]	; (80107ac <lcd_clear_digit+0x2a0>)
 80105e0:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_0);
 80105e2:	4b72      	ldr	r3, [pc, #456]	; (80107ac <lcd_clear_digit+0x2a0>)
 80105e4:	7c9b      	ldrb	r3, [r3, #18]
 80105e6:	f023 0301 	bic.w	r3, r3, #1
 80105ea:	b2da      	uxtb	r2, r3
 80105ec:	4b6f      	ldr	r3, [pc, #444]	; (80107ac <lcd_clear_digit+0x2a0>)
 80105ee:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_0);
 80105f0:	4b6e      	ldr	r3, [pc, #440]	; (80107ac <lcd_clear_digit+0x2a0>)
 80105f2:	78db      	ldrb	r3, [r3, #3]
 80105f4:	f023 0301 	bic.w	r3, r3, #1
 80105f8:	b2da      	uxtb	r2, r3
 80105fa:	4b6c      	ldr	r3, [pc, #432]	; (80107ac <lcd_clear_digit+0x2a0>)
 80105fc:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_1);
 80105fe:	4b6b      	ldr	r3, [pc, #428]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010600:	78db      	ldrb	r3, [r3, #3]
 8010602:	f023 0302 	bic.w	r3, r3, #2
 8010606:	b2da      	uxtb	r2, r3
 8010608:	4b68      	ldr	r3, [pc, #416]	; (80107ac <lcd_clear_digit+0x2a0>)
 801060a:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_0);
 801060c:	4b67      	ldr	r3, [pc, #412]	; (80107ac <lcd_clear_digit+0x2a0>)
 801060e:	7a1b      	ldrb	r3, [r3, #8]
 8010610:	f023 0301 	bic.w	r3, r3, #1
 8010614:	b2da      	uxtb	r2, r3
 8010616:	4b65      	ldr	r3, [pc, #404]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010618:	721a      	strb	r2, [r3, #8]
            break;
 801061a:	e2ac      	b.n	8010b76 <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_13] &= ~(1 << BIT_3);
 801061c:	4b63      	ldr	r3, [pc, #396]	; (80107ac <lcd_clear_digit+0x2a0>)
 801061e:	7b5b      	ldrb	r3, [r3, #13]
 8010620:	f023 0308 	bic.w	r3, r3, #8
 8010624:	b2da      	uxtb	r2, r3
 8010626:	4b61      	ldr	r3, [pc, #388]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010628:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_2);
 801062a:	4b60      	ldr	r3, [pc, #384]	; (80107ac <lcd_clear_digit+0x2a0>)
 801062c:	7b5b      	ldrb	r3, [r3, #13]
 801062e:	f023 0304 	bic.w	r3, r3, #4
 8010632:	b2da      	uxtb	r2, r3
 8010634:	4b5d      	ldr	r3, [pc, #372]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010636:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_3);
 8010638:	4b5c      	ldr	r3, [pc, #368]	; (80107ac <lcd_clear_digit+0x2a0>)
 801063a:	7c9b      	ldrb	r3, [r3, #18]
 801063c:	f023 0308 	bic.w	r3, r3, #8
 8010640:	b2da      	uxtb	r2, r3
 8010642:	4b5a      	ldr	r3, [pc, #360]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010644:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_2);
 8010646:	4b59      	ldr	r3, [pc, #356]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010648:	7c9b      	ldrb	r3, [r3, #18]
 801064a:	f023 0304 	bic.w	r3, r3, #4
 801064e:	b2da      	uxtb	r2, r3
 8010650:	4b56      	ldr	r3, [pc, #344]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010652:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_2);
 8010654:	4b55      	ldr	r3, [pc, #340]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010656:	78db      	ldrb	r3, [r3, #3]
 8010658:	f023 0304 	bic.w	r3, r3, #4
 801065c:	b2da      	uxtb	r2, r3
 801065e:	4b53      	ldr	r3, [pc, #332]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010660:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_3);
 8010662:	4b52      	ldr	r3, [pc, #328]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010664:	78db      	ldrb	r3, [r3, #3]
 8010666:	f023 0308 	bic.w	r3, r3, #8
 801066a:	b2da      	uxtb	r2, r3
 801066c:	4b4f      	ldr	r3, [pc, #316]	; (80107ac <lcd_clear_digit+0x2a0>)
 801066e:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_2);
 8010670:	4b4e      	ldr	r3, [pc, #312]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010672:	7a1b      	ldrb	r3, [r3, #8]
 8010674:	f023 0304 	bic.w	r3, r3, #4
 8010678:	b2da      	uxtb	r2, r3
 801067a:	4b4c      	ldr	r3, [pc, #304]	; (80107ac <lcd_clear_digit+0x2a0>)
 801067c:	721a      	strb	r2, [r3, #8]
            break;
 801067e:	e27a      	b.n	8010b76 <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_13] &= ~(1 << BIT_5);
 8010680:	4b4a      	ldr	r3, [pc, #296]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010682:	7b5b      	ldrb	r3, [r3, #13]
 8010684:	f023 0320 	bic.w	r3, r3, #32
 8010688:	b2da      	uxtb	r2, r3
 801068a:	4b48      	ldr	r3, [pc, #288]	; (80107ac <lcd_clear_digit+0x2a0>)
 801068c:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_4);
 801068e:	4b47      	ldr	r3, [pc, #284]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010690:	7b5b      	ldrb	r3, [r3, #13]
 8010692:	f023 0310 	bic.w	r3, r3, #16
 8010696:	b2da      	uxtb	r2, r3
 8010698:	4b44      	ldr	r3, [pc, #272]	; (80107ac <lcd_clear_digit+0x2a0>)
 801069a:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_5);
 801069c:	4b43      	ldr	r3, [pc, #268]	; (80107ac <lcd_clear_digit+0x2a0>)
 801069e:	7c9b      	ldrb	r3, [r3, #18]
 80106a0:	f023 0320 	bic.w	r3, r3, #32
 80106a4:	b2da      	uxtb	r2, r3
 80106a6:	4b41      	ldr	r3, [pc, #260]	; (80107ac <lcd_clear_digit+0x2a0>)
 80106a8:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_4);
 80106aa:	4b40      	ldr	r3, [pc, #256]	; (80107ac <lcd_clear_digit+0x2a0>)
 80106ac:	7c9b      	ldrb	r3, [r3, #18]
 80106ae:	f023 0310 	bic.w	r3, r3, #16
 80106b2:	b2da      	uxtb	r2, r3
 80106b4:	4b3d      	ldr	r3, [pc, #244]	; (80107ac <lcd_clear_digit+0x2a0>)
 80106b6:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_4);
 80106b8:	4b3c      	ldr	r3, [pc, #240]	; (80107ac <lcd_clear_digit+0x2a0>)
 80106ba:	78db      	ldrb	r3, [r3, #3]
 80106bc:	f023 0310 	bic.w	r3, r3, #16
 80106c0:	b2da      	uxtb	r2, r3
 80106c2:	4b3a      	ldr	r3, [pc, #232]	; (80107ac <lcd_clear_digit+0x2a0>)
 80106c4:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_5);
 80106c6:	4b39      	ldr	r3, [pc, #228]	; (80107ac <lcd_clear_digit+0x2a0>)
 80106c8:	78db      	ldrb	r3, [r3, #3]
 80106ca:	f023 0320 	bic.w	r3, r3, #32
 80106ce:	b2da      	uxtb	r2, r3
 80106d0:	4b36      	ldr	r3, [pc, #216]	; (80107ac <lcd_clear_digit+0x2a0>)
 80106d2:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_4);
 80106d4:	4b35      	ldr	r3, [pc, #212]	; (80107ac <lcd_clear_digit+0x2a0>)
 80106d6:	7a1b      	ldrb	r3, [r3, #8]
 80106d8:	f023 0310 	bic.w	r3, r3, #16
 80106dc:	b2da      	uxtb	r2, r3
 80106de:	4b33      	ldr	r3, [pc, #204]	; (80107ac <lcd_clear_digit+0x2a0>)
 80106e0:	721a      	strb	r2, [r3, #8]
            break;
 80106e2:	e248      	b.n	8010b76 <lcd_clear_digit+0x66a>
            case DIGIT_4:
                g_lcd_map[REG_13] &= ~(1 << BIT_7);
 80106e4:	4b31      	ldr	r3, [pc, #196]	; (80107ac <lcd_clear_digit+0x2a0>)
 80106e6:	7b5b      	ldrb	r3, [r3, #13]
 80106e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106ec:	b2da      	uxtb	r2, r3
 80106ee:	4b2f      	ldr	r3, [pc, #188]	; (80107ac <lcd_clear_digit+0x2a0>)
 80106f0:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_6);
 80106f2:	4b2e      	ldr	r3, [pc, #184]	; (80107ac <lcd_clear_digit+0x2a0>)
 80106f4:	7b5b      	ldrb	r3, [r3, #13]
 80106f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106fa:	b2da      	uxtb	r2, r3
 80106fc:	4b2b      	ldr	r3, [pc, #172]	; (80107ac <lcd_clear_digit+0x2a0>)
 80106fe:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_7);
 8010700:	4b2a      	ldr	r3, [pc, #168]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010702:	7c9b      	ldrb	r3, [r3, #18]
 8010704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010708:	b2da      	uxtb	r2, r3
 801070a:	4b28      	ldr	r3, [pc, #160]	; (80107ac <lcd_clear_digit+0x2a0>)
 801070c:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_6);
 801070e:	4b27      	ldr	r3, [pc, #156]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010710:	7c9b      	ldrb	r3, [r3, #18]
 8010712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010716:	b2da      	uxtb	r2, r3
 8010718:	4b24      	ldr	r3, [pc, #144]	; (80107ac <lcd_clear_digit+0x2a0>)
 801071a:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_6);
 801071c:	4b23      	ldr	r3, [pc, #140]	; (80107ac <lcd_clear_digit+0x2a0>)
 801071e:	78db      	ldrb	r3, [r3, #3]
 8010720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010724:	b2da      	uxtb	r2, r3
 8010726:	4b21      	ldr	r3, [pc, #132]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010728:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_7);
 801072a:	4b20      	ldr	r3, [pc, #128]	; (80107ac <lcd_clear_digit+0x2a0>)
 801072c:	78db      	ldrb	r3, [r3, #3]
 801072e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010732:	b2da      	uxtb	r2, r3
 8010734:	4b1d      	ldr	r3, [pc, #116]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010736:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_6);
 8010738:	4b1c      	ldr	r3, [pc, #112]	; (80107ac <lcd_clear_digit+0x2a0>)
 801073a:	7a1b      	ldrb	r3, [r3, #8]
 801073c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010740:	b2da      	uxtb	r2, r3
 8010742:	4b1a      	ldr	r3, [pc, #104]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010744:	721a      	strb	r2, [r3, #8]
            break;
 8010746:	e216      	b.n	8010b76 <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_14] &= ~(1 << BIT_1);
 8010748:	4b18      	ldr	r3, [pc, #96]	; (80107ac <lcd_clear_digit+0x2a0>)
 801074a:	7b9b      	ldrb	r3, [r3, #14]
 801074c:	f023 0302 	bic.w	r3, r3, #2
 8010750:	b2da      	uxtb	r2, r3
 8010752:	4b16      	ldr	r3, [pc, #88]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010754:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_0);
 8010756:	4b15      	ldr	r3, [pc, #84]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010758:	7b9b      	ldrb	r3, [r3, #14]
 801075a:	f023 0301 	bic.w	r3, r3, #1
 801075e:	b2da      	uxtb	r2, r3
 8010760:	4b12      	ldr	r3, [pc, #72]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010762:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_1);
 8010764:	4b11      	ldr	r3, [pc, #68]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010766:	7cdb      	ldrb	r3, [r3, #19]
 8010768:	f023 0302 	bic.w	r3, r3, #2
 801076c:	b2da      	uxtb	r2, r3
 801076e:	4b0f      	ldr	r3, [pc, #60]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010770:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_0);
 8010772:	4b0e      	ldr	r3, [pc, #56]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010774:	7cdb      	ldrb	r3, [r3, #19]
 8010776:	f023 0301 	bic.w	r3, r3, #1
 801077a:	b2da      	uxtb	r2, r3
 801077c:	4b0b      	ldr	r3, [pc, #44]	; (80107ac <lcd_clear_digit+0x2a0>)
 801077e:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_0);
 8010780:	4b0a      	ldr	r3, [pc, #40]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010782:	791b      	ldrb	r3, [r3, #4]
 8010784:	f023 0301 	bic.w	r3, r3, #1
 8010788:	b2da      	uxtb	r2, r3
 801078a:	4b08      	ldr	r3, [pc, #32]	; (80107ac <lcd_clear_digit+0x2a0>)
 801078c:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_1);
 801078e:	4b07      	ldr	r3, [pc, #28]	; (80107ac <lcd_clear_digit+0x2a0>)
 8010790:	791b      	ldrb	r3, [r3, #4]
 8010792:	f023 0302 	bic.w	r3, r3, #2
 8010796:	b2da      	uxtb	r2, r3
 8010798:	4b04      	ldr	r3, [pc, #16]	; (80107ac <lcd_clear_digit+0x2a0>)
 801079a:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_0);
 801079c:	4b03      	ldr	r3, [pc, #12]	; (80107ac <lcd_clear_digit+0x2a0>)
 801079e:	7a5b      	ldrb	r3, [r3, #9]
 80107a0:	f023 0301 	bic.w	r3, r3, #1
 80107a4:	b2da      	uxtb	r2, r3
 80107a6:	4b01      	ldr	r3, [pc, #4]	; (80107ac <lcd_clear_digit+0x2a0>)
 80107a8:	725a      	strb	r2, [r3, #9]
            break;
 80107aa:	e1e4      	b.n	8010b76 <lcd_clear_digit+0x66a>
 80107ac:	20001df0 	.word	0x20001df0
            case DIGIT_6:
                g_lcd_map[REG_14] &= ~(1 << BIT_3);
 80107b0:	4ba2      	ldr	r3, [pc, #648]	; (8010a3c <lcd_clear_digit+0x530>)
 80107b2:	7b9b      	ldrb	r3, [r3, #14]
 80107b4:	f023 0308 	bic.w	r3, r3, #8
 80107b8:	b2da      	uxtb	r2, r3
 80107ba:	4ba0      	ldr	r3, [pc, #640]	; (8010a3c <lcd_clear_digit+0x530>)
 80107bc:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_2);
 80107be:	4b9f      	ldr	r3, [pc, #636]	; (8010a3c <lcd_clear_digit+0x530>)
 80107c0:	7b9b      	ldrb	r3, [r3, #14]
 80107c2:	f023 0304 	bic.w	r3, r3, #4
 80107c6:	b2da      	uxtb	r2, r3
 80107c8:	4b9c      	ldr	r3, [pc, #624]	; (8010a3c <lcd_clear_digit+0x530>)
 80107ca:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_3);
 80107cc:	4b9b      	ldr	r3, [pc, #620]	; (8010a3c <lcd_clear_digit+0x530>)
 80107ce:	7cdb      	ldrb	r3, [r3, #19]
 80107d0:	f023 0308 	bic.w	r3, r3, #8
 80107d4:	b2da      	uxtb	r2, r3
 80107d6:	4b99      	ldr	r3, [pc, #612]	; (8010a3c <lcd_clear_digit+0x530>)
 80107d8:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_2);
 80107da:	4b98      	ldr	r3, [pc, #608]	; (8010a3c <lcd_clear_digit+0x530>)
 80107dc:	7cdb      	ldrb	r3, [r3, #19]
 80107de:	f023 0304 	bic.w	r3, r3, #4
 80107e2:	b2da      	uxtb	r2, r3
 80107e4:	4b95      	ldr	r3, [pc, #596]	; (8010a3c <lcd_clear_digit+0x530>)
 80107e6:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_2);
 80107e8:	4b94      	ldr	r3, [pc, #592]	; (8010a3c <lcd_clear_digit+0x530>)
 80107ea:	791b      	ldrb	r3, [r3, #4]
 80107ec:	f023 0304 	bic.w	r3, r3, #4
 80107f0:	b2da      	uxtb	r2, r3
 80107f2:	4b92      	ldr	r3, [pc, #584]	; (8010a3c <lcd_clear_digit+0x530>)
 80107f4:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_3);
 80107f6:	4b91      	ldr	r3, [pc, #580]	; (8010a3c <lcd_clear_digit+0x530>)
 80107f8:	791b      	ldrb	r3, [r3, #4]
 80107fa:	f023 0308 	bic.w	r3, r3, #8
 80107fe:	b2da      	uxtb	r2, r3
 8010800:	4b8e      	ldr	r3, [pc, #568]	; (8010a3c <lcd_clear_digit+0x530>)
 8010802:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_2);
 8010804:	4b8d      	ldr	r3, [pc, #564]	; (8010a3c <lcd_clear_digit+0x530>)
 8010806:	7a5b      	ldrb	r3, [r3, #9]
 8010808:	f023 0304 	bic.w	r3, r3, #4
 801080c:	b2da      	uxtb	r2, r3
 801080e:	4b8b      	ldr	r3, [pc, #556]	; (8010a3c <lcd_clear_digit+0x530>)
 8010810:	725a      	strb	r2, [r3, #9]
            break;
 8010812:	e1b0      	b.n	8010b76 <lcd_clear_digit+0x66a>
            case DIGIT_7:
                g_lcd_map[REG_14] &= ~(1 << BIT_5);
 8010814:	4b89      	ldr	r3, [pc, #548]	; (8010a3c <lcd_clear_digit+0x530>)
 8010816:	7b9b      	ldrb	r3, [r3, #14]
 8010818:	f023 0320 	bic.w	r3, r3, #32
 801081c:	b2da      	uxtb	r2, r3
 801081e:	4b87      	ldr	r3, [pc, #540]	; (8010a3c <lcd_clear_digit+0x530>)
 8010820:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_4);
 8010822:	4b86      	ldr	r3, [pc, #536]	; (8010a3c <lcd_clear_digit+0x530>)
 8010824:	7b9b      	ldrb	r3, [r3, #14]
 8010826:	f023 0310 	bic.w	r3, r3, #16
 801082a:	b2da      	uxtb	r2, r3
 801082c:	4b83      	ldr	r3, [pc, #524]	; (8010a3c <lcd_clear_digit+0x530>)
 801082e:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_5);
 8010830:	4b82      	ldr	r3, [pc, #520]	; (8010a3c <lcd_clear_digit+0x530>)
 8010832:	7cdb      	ldrb	r3, [r3, #19]
 8010834:	f023 0320 	bic.w	r3, r3, #32
 8010838:	b2da      	uxtb	r2, r3
 801083a:	4b80      	ldr	r3, [pc, #512]	; (8010a3c <lcd_clear_digit+0x530>)
 801083c:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_4);
 801083e:	4b7f      	ldr	r3, [pc, #508]	; (8010a3c <lcd_clear_digit+0x530>)
 8010840:	7cdb      	ldrb	r3, [r3, #19]
 8010842:	f023 0310 	bic.w	r3, r3, #16
 8010846:	b2da      	uxtb	r2, r3
 8010848:	4b7c      	ldr	r3, [pc, #496]	; (8010a3c <lcd_clear_digit+0x530>)
 801084a:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_4);
 801084c:	4b7b      	ldr	r3, [pc, #492]	; (8010a3c <lcd_clear_digit+0x530>)
 801084e:	791b      	ldrb	r3, [r3, #4]
 8010850:	f023 0310 	bic.w	r3, r3, #16
 8010854:	b2da      	uxtb	r2, r3
 8010856:	4b79      	ldr	r3, [pc, #484]	; (8010a3c <lcd_clear_digit+0x530>)
 8010858:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_5);
 801085a:	4b78      	ldr	r3, [pc, #480]	; (8010a3c <lcd_clear_digit+0x530>)
 801085c:	791b      	ldrb	r3, [r3, #4]
 801085e:	f023 0320 	bic.w	r3, r3, #32
 8010862:	b2da      	uxtb	r2, r3
 8010864:	4b75      	ldr	r3, [pc, #468]	; (8010a3c <lcd_clear_digit+0x530>)
 8010866:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_4);
 8010868:	4b74      	ldr	r3, [pc, #464]	; (8010a3c <lcd_clear_digit+0x530>)
 801086a:	7a5b      	ldrb	r3, [r3, #9]
 801086c:	f023 0310 	bic.w	r3, r3, #16
 8010870:	b2da      	uxtb	r2, r3
 8010872:	4b72      	ldr	r3, [pc, #456]	; (8010a3c <lcd_clear_digit+0x530>)
 8010874:	725a      	strb	r2, [r3, #9]
            break;
 8010876:	e17e      	b.n	8010b76 <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8010878:	79bb      	ldrb	r3, [r7, #6]
 801087a:	2b01      	cmp	r3, #1
 801087c:	f040 8178 	bne.w	8010b70 <lcd_clear_digit+0x664>
    {
        switch (digit)
 8010880:	79fb      	ldrb	r3, [r7, #7]
 8010882:	2b06      	cmp	r3, #6
 8010884:	f200 8176 	bhi.w	8010b74 <lcd_clear_digit+0x668>
 8010888:	a201      	add	r2, pc, #4	; (adr r2, 8010890 <lcd_clear_digit+0x384>)
 801088a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801088e:	bf00      	nop
 8010890:	080108ad 	.word	0x080108ad
 8010894:	08010911 	.word	0x08010911
 8010898:	08010975 	.word	0x08010975
 801089c:	080109d9 	.word	0x080109d9
 80108a0:	08010a41 	.word	0x08010a41
 80108a4:	08010aa5 	.word	0x08010aa5
 80108a8:	08010b09 	.word	0x08010b09
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_2);
 80108ac:	4b63      	ldr	r3, [pc, #396]	; (8010a3c <lcd_clear_digit+0x530>)
 80108ae:	7b1b      	ldrb	r3, [r3, #12]
 80108b0:	f023 0304 	bic.w	r3, r3, #4
 80108b4:	b2da      	uxtb	r2, r3
 80108b6:	4b61      	ldr	r3, [pc, #388]	; (8010a3c <lcd_clear_digit+0x530>)
 80108b8:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_3);
 80108ba:	4b60      	ldr	r3, [pc, #384]	; (8010a3c <lcd_clear_digit+0x530>)
 80108bc:	7b1b      	ldrb	r3, [r3, #12]
 80108be:	f023 0308 	bic.w	r3, r3, #8
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	4b5d      	ldr	r3, [pc, #372]	; (8010a3c <lcd_clear_digit+0x530>)
 80108c6:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_2);
 80108c8:	4b5c      	ldr	r3, [pc, #368]	; (8010a3c <lcd_clear_digit+0x530>)
 80108ca:	7c5b      	ldrb	r3, [r3, #17]
 80108cc:	f023 0304 	bic.w	r3, r3, #4
 80108d0:	b2da      	uxtb	r2, r3
 80108d2:	4b5a      	ldr	r3, [pc, #360]	; (8010a3c <lcd_clear_digit+0x530>)
 80108d4:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_3);
 80108d6:	4b59      	ldr	r3, [pc, #356]	; (8010a3c <lcd_clear_digit+0x530>)
 80108d8:	7c5b      	ldrb	r3, [r3, #17]
 80108da:	f023 0308 	bic.w	r3, r3, #8
 80108de:	b2da      	uxtb	r2, r3
 80108e0:	4b56      	ldr	r3, [pc, #344]	; (8010a3c <lcd_clear_digit+0x530>)
 80108e2:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_2);
 80108e4:	4b55      	ldr	r3, [pc, #340]	; (8010a3c <lcd_clear_digit+0x530>)
 80108e6:	789b      	ldrb	r3, [r3, #2]
 80108e8:	f023 0304 	bic.w	r3, r3, #4
 80108ec:	b2da      	uxtb	r2, r3
 80108ee:	4b53      	ldr	r3, [pc, #332]	; (8010a3c <lcd_clear_digit+0x530>)
 80108f0:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_3);
 80108f2:	4b52      	ldr	r3, [pc, #328]	; (8010a3c <lcd_clear_digit+0x530>)
 80108f4:	789b      	ldrb	r3, [r3, #2]
 80108f6:	f023 0308 	bic.w	r3, r3, #8
 80108fa:	b2da      	uxtb	r2, r3
 80108fc:	4b4f      	ldr	r3, [pc, #316]	; (8010a3c <lcd_clear_digit+0x530>)
 80108fe:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_3);
 8010900:	4b4e      	ldr	r3, [pc, #312]	; (8010a3c <lcd_clear_digit+0x530>)
 8010902:	79db      	ldrb	r3, [r3, #7]
 8010904:	f023 0308 	bic.w	r3, r3, #8
 8010908:	b2da      	uxtb	r2, r3
 801090a:	4b4c      	ldr	r3, [pc, #304]	; (8010a3c <lcd_clear_digit+0x530>)
 801090c:	71da      	strb	r2, [r3, #7]
            break;
 801090e:	e132      	b.n	8010b76 <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_12] &= ~(1 << BIT_0);
 8010910:	4b4a      	ldr	r3, [pc, #296]	; (8010a3c <lcd_clear_digit+0x530>)
 8010912:	7b1b      	ldrb	r3, [r3, #12]
 8010914:	f023 0301 	bic.w	r3, r3, #1
 8010918:	b2da      	uxtb	r2, r3
 801091a:	4b48      	ldr	r3, [pc, #288]	; (8010a3c <lcd_clear_digit+0x530>)
 801091c:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_1);
 801091e:	4b47      	ldr	r3, [pc, #284]	; (8010a3c <lcd_clear_digit+0x530>)
 8010920:	7b1b      	ldrb	r3, [r3, #12]
 8010922:	f023 0302 	bic.w	r3, r3, #2
 8010926:	b2da      	uxtb	r2, r3
 8010928:	4b44      	ldr	r3, [pc, #272]	; (8010a3c <lcd_clear_digit+0x530>)
 801092a:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_0);
 801092c:	4b43      	ldr	r3, [pc, #268]	; (8010a3c <lcd_clear_digit+0x530>)
 801092e:	7c5b      	ldrb	r3, [r3, #17]
 8010930:	f023 0301 	bic.w	r3, r3, #1
 8010934:	b2da      	uxtb	r2, r3
 8010936:	4b41      	ldr	r3, [pc, #260]	; (8010a3c <lcd_clear_digit+0x530>)
 8010938:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_1);
 801093a:	4b40      	ldr	r3, [pc, #256]	; (8010a3c <lcd_clear_digit+0x530>)
 801093c:	7c5b      	ldrb	r3, [r3, #17]
 801093e:	f023 0302 	bic.w	r3, r3, #2
 8010942:	b2da      	uxtb	r2, r3
 8010944:	4b3d      	ldr	r3, [pc, #244]	; (8010a3c <lcd_clear_digit+0x530>)
 8010946:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_0);
 8010948:	4b3c      	ldr	r3, [pc, #240]	; (8010a3c <lcd_clear_digit+0x530>)
 801094a:	789b      	ldrb	r3, [r3, #2]
 801094c:	f023 0301 	bic.w	r3, r3, #1
 8010950:	b2da      	uxtb	r2, r3
 8010952:	4b3a      	ldr	r3, [pc, #232]	; (8010a3c <lcd_clear_digit+0x530>)
 8010954:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_1);
 8010956:	4b39      	ldr	r3, [pc, #228]	; (8010a3c <lcd_clear_digit+0x530>)
 8010958:	789b      	ldrb	r3, [r3, #2]
 801095a:	f023 0302 	bic.w	r3, r3, #2
 801095e:	b2da      	uxtb	r2, r3
 8010960:	4b36      	ldr	r3, [pc, #216]	; (8010a3c <lcd_clear_digit+0x530>)
 8010962:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_1);
 8010964:	4b35      	ldr	r3, [pc, #212]	; (8010a3c <lcd_clear_digit+0x530>)
 8010966:	79db      	ldrb	r3, [r3, #7]
 8010968:	f023 0302 	bic.w	r3, r3, #2
 801096c:	b2da      	uxtb	r2, r3
 801096e:	4b33      	ldr	r3, [pc, #204]	; (8010a3c <lcd_clear_digit+0x530>)
 8010970:	71da      	strb	r2, [r3, #7]
            break;
 8010972:	e100      	b.n	8010b76 <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_11] &= ~(1 << BIT_6);
 8010974:	4b31      	ldr	r3, [pc, #196]	; (8010a3c <lcd_clear_digit+0x530>)
 8010976:	7adb      	ldrb	r3, [r3, #11]
 8010978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801097c:	b2da      	uxtb	r2, r3
 801097e:	4b2f      	ldr	r3, [pc, #188]	; (8010a3c <lcd_clear_digit+0x530>)
 8010980:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_7);
 8010982:	4b2e      	ldr	r3, [pc, #184]	; (8010a3c <lcd_clear_digit+0x530>)
 8010984:	7adb      	ldrb	r3, [r3, #11]
 8010986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801098a:	b2da      	uxtb	r2, r3
 801098c:	4b2b      	ldr	r3, [pc, #172]	; (8010a3c <lcd_clear_digit+0x530>)
 801098e:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_6);
 8010990:	4b2a      	ldr	r3, [pc, #168]	; (8010a3c <lcd_clear_digit+0x530>)
 8010992:	7c1b      	ldrb	r3, [r3, #16]
 8010994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010998:	b2da      	uxtb	r2, r3
 801099a:	4b28      	ldr	r3, [pc, #160]	; (8010a3c <lcd_clear_digit+0x530>)
 801099c:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_7);
 801099e:	4b27      	ldr	r3, [pc, #156]	; (8010a3c <lcd_clear_digit+0x530>)
 80109a0:	7c1b      	ldrb	r3, [r3, #16]
 80109a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109a6:	b2da      	uxtb	r2, r3
 80109a8:	4b24      	ldr	r3, [pc, #144]	; (8010a3c <lcd_clear_digit+0x530>)
 80109aa:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_6);
 80109ac:	4b23      	ldr	r3, [pc, #140]	; (8010a3c <lcd_clear_digit+0x530>)
 80109ae:	785b      	ldrb	r3, [r3, #1]
 80109b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109b4:	b2da      	uxtb	r2, r3
 80109b6:	4b21      	ldr	r3, [pc, #132]	; (8010a3c <lcd_clear_digit+0x530>)
 80109b8:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_7);
 80109ba:	4b20      	ldr	r3, [pc, #128]	; (8010a3c <lcd_clear_digit+0x530>)
 80109bc:	785b      	ldrb	r3, [r3, #1]
 80109be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109c2:	b2da      	uxtb	r2, r3
 80109c4:	4b1d      	ldr	r3, [pc, #116]	; (8010a3c <lcd_clear_digit+0x530>)
 80109c6:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_7);
 80109c8:	4b1c      	ldr	r3, [pc, #112]	; (8010a3c <lcd_clear_digit+0x530>)
 80109ca:	799b      	ldrb	r3, [r3, #6]
 80109cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109d0:	b2da      	uxtb	r2, r3
 80109d2:	4b1a      	ldr	r3, [pc, #104]	; (8010a3c <lcd_clear_digit+0x530>)
 80109d4:	719a      	strb	r2, [r3, #6]
            break;
 80109d6:	e0ce      	b.n	8010b76 <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_11] &= ~(1 << BIT_4);
 80109d8:	4b18      	ldr	r3, [pc, #96]	; (8010a3c <lcd_clear_digit+0x530>)
 80109da:	7adb      	ldrb	r3, [r3, #11]
 80109dc:	f023 0310 	bic.w	r3, r3, #16
 80109e0:	b2da      	uxtb	r2, r3
 80109e2:	4b16      	ldr	r3, [pc, #88]	; (8010a3c <lcd_clear_digit+0x530>)
 80109e4:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_5);
 80109e6:	4b15      	ldr	r3, [pc, #84]	; (8010a3c <lcd_clear_digit+0x530>)
 80109e8:	7adb      	ldrb	r3, [r3, #11]
 80109ea:	f023 0320 	bic.w	r3, r3, #32
 80109ee:	b2da      	uxtb	r2, r3
 80109f0:	4b12      	ldr	r3, [pc, #72]	; (8010a3c <lcd_clear_digit+0x530>)
 80109f2:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_4);
 80109f4:	4b11      	ldr	r3, [pc, #68]	; (8010a3c <lcd_clear_digit+0x530>)
 80109f6:	7c1b      	ldrb	r3, [r3, #16]
 80109f8:	f023 0310 	bic.w	r3, r3, #16
 80109fc:	b2da      	uxtb	r2, r3
 80109fe:	4b0f      	ldr	r3, [pc, #60]	; (8010a3c <lcd_clear_digit+0x530>)
 8010a00:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_5);
 8010a02:	4b0e      	ldr	r3, [pc, #56]	; (8010a3c <lcd_clear_digit+0x530>)
 8010a04:	7c1b      	ldrb	r3, [r3, #16]
 8010a06:	f023 0320 	bic.w	r3, r3, #32
 8010a0a:	b2da      	uxtb	r2, r3
 8010a0c:	4b0b      	ldr	r3, [pc, #44]	; (8010a3c <lcd_clear_digit+0x530>)
 8010a0e:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_4);
 8010a10:	4b0a      	ldr	r3, [pc, #40]	; (8010a3c <lcd_clear_digit+0x530>)
 8010a12:	785b      	ldrb	r3, [r3, #1]
 8010a14:	f023 0310 	bic.w	r3, r3, #16
 8010a18:	b2da      	uxtb	r2, r3
 8010a1a:	4b08      	ldr	r3, [pc, #32]	; (8010a3c <lcd_clear_digit+0x530>)
 8010a1c:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_5);
 8010a1e:	4b07      	ldr	r3, [pc, #28]	; (8010a3c <lcd_clear_digit+0x530>)
 8010a20:	785b      	ldrb	r3, [r3, #1]
 8010a22:	f023 0320 	bic.w	r3, r3, #32
 8010a26:	b2da      	uxtb	r2, r3
 8010a28:	4b04      	ldr	r3, [pc, #16]	; (8010a3c <lcd_clear_digit+0x530>)
 8010a2a:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_5);
 8010a2c:	4b03      	ldr	r3, [pc, #12]	; (8010a3c <lcd_clear_digit+0x530>)
 8010a2e:	799b      	ldrb	r3, [r3, #6]
 8010a30:	f023 0320 	bic.w	r3, r3, #32
 8010a34:	b2da      	uxtb	r2, r3
 8010a36:	4b01      	ldr	r3, [pc, #4]	; (8010a3c <lcd_clear_digit+0x530>)
 8010a38:	719a      	strb	r2, [r3, #6]
            break;
 8010a3a:	e09c      	b.n	8010b76 <lcd_clear_digit+0x66a>
 8010a3c:	20001df0 	.word	0x20001df0
            case DIGIT_4:
                g_lcd_map[REG_11] &= ~(1 << BIT_2);
 8010a40:	4b50      	ldr	r3, [pc, #320]	; (8010b84 <lcd_clear_digit+0x678>)
 8010a42:	7adb      	ldrb	r3, [r3, #11]
 8010a44:	f023 0304 	bic.w	r3, r3, #4
 8010a48:	b2da      	uxtb	r2, r3
 8010a4a:	4b4e      	ldr	r3, [pc, #312]	; (8010b84 <lcd_clear_digit+0x678>)
 8010a4c:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_3);
 8010a4e:	4b4d      	ldr	r3, [pc, #308]	; (8010b84 <lcd_clear_digit+0x678>)
 8010a50:	7adb      	ldrb	r3, [r3, #11]
 8010a52:	f023 0308 	bic.w	r3, r3, #8
 8010a56:	b2da      	uxtb	r2, r3
 8010a58:	4b4a      	ldr	r3, [pc, #296]	; (8010b84 <lcd_clear_digit+0x678>)
 8010a5a:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_2);
 8010a5c:	4b49      	ldr	r3, [pc, #292]	; (8010b84 <lcd_clear_digit+0x678>)
 8010a5e:	7c1b      	ldrb	r3, [r3, #16]
 8010a60:	f023 0304 	bic.w	r3, r3, #4
 8010a64:	b2da      	uxtb	r2, r3
 8010a66:	4b47      	ldr	r3, [pc, #284]	; (8010b84 <lcd_clear_digit+0x678>)
 8010a68:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_3);
 8010a6a:	4b46      	ldr	r3, [pc, #280]	; (8010b84 <lcd_clear_digit+0x678>)
 8010a6c:	7c1b      	ldrb	r3, [r3, #16]
 8010a6e:	f023 0308 	bic.w	r3, r3, #8
 8010a72:	b2da      	uxtb	r2, r3
 8010a74:	4b43      	ldr	r3, [pc, #268]	; (8010b84 <lcd_clear_digit+0x678>)
 8010a76:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_2);
 8010a78:	4b42      	ldr	r3, [pc, #264]	; (8010b84 <lcd_clear_digit+0x678>)
 8010a7a:	785b      	ldrb	r3, [r3, #1]
 8010a7c:	f023 0304 	bic.w	r3, r3, #4
 8010a80:	b2da      	uxtb	r2, r3
 8010a82:	4b40      	ldr	r3, [pc, #256]	; (8010b84 <lcd_clear_digit+0x678>)
 8010a84:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_3);
 8010a86:	4b3f      	ldr	r3, [pc, #252]	; (8010b84 <lcd_clear_digit+0x678>)
 8010a88:	785b      	ldrb	r3, [r3, #1]
 8010a8a:	f023 0308 	bic.w	r3, r3, #8
 8010a8e:	b2da      	uxtb	r2, r3
 8010a90:	4b3c      	ldr	r3, [pc, #240]	; (8010b84 <lcd_clear_digit+0x678>)
 8010a92:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_3);
 8010a94:	4b3b      	ldr	r3, [pc, #236]	; (8010b84 <lcd_clear_digit+0x678>)
 8010a96:	799b      	ldrb	r3, [r3, #6]
 8010a98:	f023 0308 	bic.w	r3, r3, #8
 8010a9c:	b2da      	uxtb	r2, r3
 8010a9e:	4b39      	ldr	r3, [pc, #228]	; (8010b84 <lcd_clear_digit+0x678>)
 8010aa0:	719a      	strb	r2, [r3, #6]
            break;
 8010aa2:	e068      	b.n	8010b76 <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_11] &= ~(1 << BIT_0);
 8010aa4:	4b37      	ldr	r3, [pc, #220]	; (8010b84 <lcd_clear_digit+0x678>)
 8010aa6:	7adb      	ldrb	r3, [r3, #11]
 8010aa8:	f023 0301 	bic.w	r3, r3, #1
 8010aac:	b2da      	uxtb	r2, r3
 8010aae:	4b35      	ldr	r3, [pc, #212]	; (8010b84 <lcd_clear_digit+0x678>)
 8010ab0:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_1);
 8010ab2:	4b34      	ldr	r3, [pc, #208]	; (8010b84 <lcd_clear_digit+0x678>)
 8010ab4:	7adb      	ldrb	r3, [r3, #11]
 8010ab6:	f023 0302 	bic.w	r3, r3, #2
 8010aba:	b2da      	uxtb	r2, r3
 8010abc:	4b31      	ldr	r3, [pc, #196]	; (8010b84 <lcd_clear_digit+0x678>)
 8010abe:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_0);
 8010ac0:	4b30      	ldr	r3, [pc, #192]	; (8010b84 <lcd_clear_digit+0x678>)
 8010ac2:	7c1b      	ldrb	r3, [r3, #16]
 8010ac4:	f023 0301 	bic.w	r3, r3, #1
 8010ac8:	b2da      	uxtb	r2, r3
 8010aca:	4b2e      	ldr	r3, [pc, #184]	; (8010b84 <lcd_clear_digit+0x678>)
 8010acc:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_1);
 8010ace:	4b2d      	ldr	r3, [pc, #180]	; (8010b84 <lcd_clear_digit+0x678>)
 8010ad0:	7c1b      	ldrb	r3, [r3, #16]
 8010ad2:	f023 0302 	bic.w	r3, r3, #2
 8010ad6:	b2da      	uxtb	r2, r3
 8010ad8:	4b2a      	ldr	r3, [pc, #168]	; (8010b84 <lcd_clear_digit+0x678>)
 8010ada:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_0);
 8010adc:	4b29      	ldr	r3, [pc, #164]	; (8010b84 <lcd_clear_digit+0x678>)
 8010ade:	785b      	ldrb	r3, [r3, #1]
 8010ae0:	f023 0301 	bic.w	r3, r3, #1
 8010ae4:	b2da      	uxtb	r2, r3
 8010ae6:	4b27      	ldr	r3, [pc, #156]	; (8010b84 <lcd_clear_digit+0x678>)
 8010ae8:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_1);
 8010aea:	4b26      	ldr	r3, [pc, #152]	; (8010b84 <lcd_clear_digit+0x678>)
 8010aec:	785b      	ldrb	r3, [r3, #1]
 8010aee:	f023 0302 	bic.w	r3, r3, #2
 8010af2:	b2da      	uxtb	r2, r3
 8010af4:	4b23      	ldr	r3, [pc, #140]	; (8010b84 <lcd_clear_digit+0x678>)
 8010af6:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_1);
 8010af8:	4b22      	ldr	r3, [pc, #136]	; (8010b84 <lcd_clear_digit+0x678>)
 8010afa:	799b      	ldrb	r3, [r3, #6]
 8010afc:	f023 0302 	bic.w	r3, r3, #2
 8010b00:	b2da      	uxtb	r2, r3
 8010b02:	4b20      	ldr	r3, [pc, #128]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b04:	719a      	strb	r2, [r3, #6]
            break;
 8010b06:	e036      	b.n	8010b76 <lcd_clear_digit+0x66a>
            case DIGIT_6:
                g_lcd_map[REG_10] &= ~(1 << BIT_6);
 8010b08:	4b1e      	ldr	r3, [pc, #120]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b0a:	7a9b      	ldrb	r3, [r3, #10]
 8010b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b10:	b2da      	uxtb	r2, r3
 8010b12:	4b1c      	ldr	r3, [pc, #112]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b14:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_10] &= ~(1 << BIT_7);
 8010b16:	4b1b      	ldr	r3, [pc, #108]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b18:	7a9b      	ldrb	r3, [r3, #10]
 8010b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b1e:	b2da      	uxtb	r2, r3
 8010b20:	4b18      	ldr	r3, [pc, #96]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b22:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_15] &= ~(1 << BIT_6);
 8010b24:	4b17      	ldr	r3, [pc, #92]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b26:	7bdb      	ldrb	r3, [r3, #15]
 8010b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b2c:	b2da      	uxtb	r2, r3
 8010b2e:	4b15      	ldr	r3, [pc, #84]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b30:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_15] &= ~(1 << BIT_7);
 8010b32:	4b14      	ldr	r3, [pc, #80]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b34:	7bdb      	ldrb	r3, [r3, #15]
 8010b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b3a:	b2da      	uxtb	r2, r3
 8010b3c:	4b11      	ldr	r3, [pc, #68]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b3e:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_0] &= ~(1 << BIT_6);
 8010b40:	4b10      	ldr	r3, [pc, #64]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b48:	b2da      	uxtb	r2, r3
 8010b4a:	4b0e      	ldr	r3, [pc, #56]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b4c:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_0] &= ~(1 << BIT_7);
 8010b4e:	4b0d      	ldr	r3, [pc, #52]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b56:	b2da      	uxtb	r2, r3
 8010b58:	4b0a      	ldr	r3, [pc, #40]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b5a:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_5] &= ~(1 << BIT_7);
 8010b5c:	4b09      	ldr	r3, [pc, #36]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b5e:	795b      	ldrb	r3, [r3, #5]
 8010b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b64:	b2da      	uxtb	r2, r3
 8010b66:	4b07      	ldr	r3, [pc, #28]	; (8010b84 <lcd_clear_digit+0x678>)
 8010b68:	715a      	strb	r2, [r3, #5]
            break;
 8010b6a:	e004      	b.n	8010b76 <lcd_clear_digit+0x66a>
            break;
 8010b6c:	bf00      	nop
 8010b6e:	e002      	b.n	8010b76 <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
 8010b70:	bf00      	nop
 8010b72:	e000      	b.n	8010b76 <lcd_clear_digit+0x66a>
            break;
 8010b74:	bf00      	nop
}
 8010b76:	bf00      	nop
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr
 8010b82:	bf00      	nop
 8010b84:	20001df0 	.word	0x20001df0

08010b88 <lcd_clear_point>:
 * pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_clear_point(rows_t line, point_t point)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b083      	sub	sp, #12
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	4603      	mov	r3, r0
 8010b90:	460a      	mov	r2, r1
 8010b92:	71fb      	strb	r3, [r7, #7]
 8010b94:	4613      	mov	r3, r2
 8010b96:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8010b98:	79fb      	ldrb	r3, [r7, #7]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d14c      	bne.n	8010c38 <lcd_clear_point+0xb0>
    {
        switch (point)
 8010b9e:	79bb      	ldrb	r3, [r7, #6]
 8010ba0:	2b06      	cmp	r3, #6
 8010ba2:	f200 808f 	bhi.w	8010cc4 <lcd_clear_point+0x13c>
 8010ba6:	a201      	add	r2, pc, #4	; (adr r2, 8010bac <lcd_clear_point+0x24>)
 8010ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bac:	08010bc9 	.word	0x08010bc9
 8010bb0:	08010bd9 	.word	0x08010bd9
 8010bb4:	08010be9 	.word	0x08010be9
 8010bb8:	08010bf9 	.word	0x08010bf9
 8010bbc:	08010c09 	.word	0x08010c09
 8010bc0:	08010c19 	.word	0x08010c19
 8010bc4:	08010c29 	.word	0x08010c29
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_7);
 8010bc8:	4b44      	ldr	r3, [pc, #272]	; (8010cdc <lcd_clear_point+0x154>)
 8010bca:	79db      	ldrb	r3, [r3, #7]
 8010bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bd0:	b2da      	uxtb	r2, r3
 8010bd2:	4b42      	ldr	r3, [pc, #264]	; (8010cdc <lcd_clear_point+0x154>)
 8010bd4:	71da      	strb	r2, [r3, #7]
            break;
 8010bd6:	e07a      	b.n	8010cce <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] &= ~(1 << BIT_1);
 8010bd8:	4b40      	ldr	r3, [pc, #256]	; (8010cdc <lcd_clear_point+0x154>)
 8010bda:	7a1b      	ldrb	r3, [r3, #8]
 8010bdc:	f023 0302 	bic.w	r3, r3, #2
 8010be0:	b2da      	uxtb	r2, r3
 8010be2:	4b3e      	ldr	r3, [pc, #248]	; (8010cdc <lcd_clear_point+0x154>)
 8010be4:	721a      	strb	r2, [r3, #8]
            break;
 8010be6:	e072      	b.n	8010cce <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] &= ~(1 << BIT_3);
 8010be8:	4b3c      	ldr	r3, [pc, #240]	; (8010cdc <lcd_clear_point+0x154>)
 8010bea:	7a1b      	ldrb	r3, [r3, #8]
 8010bec:	f023 0308 	bic.w	r3, r3, #8
 8010bf0:	b2da      	uxtb	r2, r3
 8010bf2:	4b3a      	ldr	r3, [pc, #232]	; (8010cdc <lcd_clear_point+0x154>)
 8010bf4:	721a      	strb	r2, [r3, #8]
            break;
 8010bf6:	e06a      	b.n	8010cce <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] &= ~(1 << BIT_5);
 8010bf8:	4b38      	ldr	r3, [pc, #224]	; (8010cdc <lcd_clear_point+0x154>)
 8010bfa:	7a1b      	ldrb	r3, [r3, #8]
 8010bfc:	f023 0320 	bic.w	r3, r3, #32
 8010c00:	b2da      	uxtb	r2, r3
 8010c02:	4b36      	ldr	r3, [pc, #216]	; (8010cdc <lcd_clear_point+0x154>)
 8010c04:	721a      	strb	r2, [r3, #8]
            break;
 8010c06:	e062      	b.n	8010cce <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] &= ~(1 << BIT_7);
 8010c08:	4b34      	ldr	r3, [pc, #208]	; (8010cdc <lcd_clear_point+0x154>)
 8010c0a:	7a1b      	ldrb	r3, [r3, #8]
 8010c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c10:	b2da      	uxtb	r2, r3
 8010c12:	4b32      	ldr	r3, [pc, #200]	; (8010cdc <lcd_clear_point+0x154>)
 8010c14:	721a      	strb	r2, [r3, #8]
            break;
 8010c16:	e05a      	b.n	8010cce <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] &= ~(1 << BIT_1);
 8010c18:	4b30      	ldr	r3, [pc, #192]	; (8010cdc <lcd_clear_point+0x154>)
 8010c1a:	7a5b      	ldrb	r3, [r3, #9]
 8010c1c:	f023 0302 	bic.w	r3, r3, #2
 8010c20:	b2da      	uxtb	r2, r3
 8010c22:	4b2e      	ldr	r3, [pc, #184]	; (8010cdc <lcd_clear_point+0x154>)
 8010c24:	725a      	strb	r2, [r3, #9]
            break;
 8010c26:	e052      	b.n	8010cce <lcd_clear_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] &= ~(1 << BIT_3);
 8010c28:	4b2c      	ldr	r3, [pc, #176]	; (8010cdc <lcd_clear_point+0x154>)
 8010c2a:	7a5b      	ldrb	r3, [r3, #9]
 8010c2c:	f023 0308 	bic.w	r3, r3, #8
 8010c30:	b2da      	uxtb	r2, r3
 8010c32:	4b2a      	ldr	r3, [pc, #168]	; (8010cdc <lcd_clear_point+0x154>)
 8010c34:	725a      	strb	r2, [r3, #9]
            break;
 8010c36:	e04a      	b.n	8010cce <lcd_clear_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8010c38:	79fb      	ldrb	r3, [r7, #7]
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	d144      	bne.n	8010cc8 <lcd_clear_point+0x140>
    {
        switch (point)
 8010c3e:	79bb      	ldrb	r3, [r7, #6]
 8010c40:	2b05      	cmp	r3, #5
 8010c42:	d843      	bhi.n	8010ccc <lcd_clear_point+0x144>
 8010c44:	a201      	add	r2, pc, #4	; (adr r2, 8010c4c <lcd_clear_point+0xc4>)
 8010c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c4a:	bf00      	nop
 8010c4c:	08010c65 	.word	0x08010c65
 8010c50:	08010c75 	.word	0x08010c75
 8010c54:	08010c85 	.word	0x08010c85
 8010c58:	08010c95 	.word	0x08010c95
 8010c5c:	08010ca5 	.word	0x08010ca5
 8010c60:	08010cb5 	.word	0x08010cb5
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_2);
 8010c64:	4b1d      	ldr	r3, [pc, #116]	; (8010cdc <lcd_clear_point+0x154>)
 8010c66:	79db      	ldrb	r3, [r3, #7]
 8010c68:	f023 0304 	bic.w	r3, r3, #4
 8010c6c:	b2da      	uxtb	r2, r3
 8010c6e:	4b1b      	ldr	r3, [pc, #108]	; (8010cdc <lcd_clear_point+0x154>)
 8010c70:	71da      	strb	r2, [r3, #7]
            break;
 8010c72:	e02c      	b.n	8010cce <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] &= ~(1 << BIT_0);
 8010c74:	4b19      	ldr	r3, [pc, #100]	; (8010cdc <lcd_clear_point+0x154>)
 8010c76:	79db      	ldrb	r3, [r3, #7]
 8010c78:	f023 0301 	bic.w	r3, r3, #1
 8010c7c:	b2da      	uxtb	r2, r3
 8010c7e:	4b17      	ldr	r3, [pc, #92]	; (8010cdc <lcd_clear_point+0x154>)
 8010c80:	71da      	strb	r2, [r3, #7]
            break;
 8010c82:	e024      	b.n	8010cce <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] &= ~(1 << BIT_6);
 8010c84:	4b15      	ldr	r3, [pc, #84]	; (8010cdc <lcd_clear_point+0x154>)
 8010c86:	799b      	ldrb	r3, [r3, #6]
 8010c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c8c:	b2da      	uxtb	r2, r3
 8010c8e:	4b13      	ldr	r3, [pc, #76]	; (8010cdc <lcd_clear_point+0x154>)
 8010c90:	719a      	strb	r2, [r3, #6]
            break;
 8010c92:	e01c      	b.n	8010cce <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] &= ~(1 << BIT_4);
 8010c94:	4b11      	ldr	r3, [pc, #68]	; (8010cdc <lcd_clear_point+0x154>)
 8010c96:	799b      	ldrb	r3, [r3, #6]
 8010c98:	f023 0310 	bic.w	r3, r3, #16
 8010c9c:	b2da      	uxtb	r2, r3
 8010c9e:	4b0f      	ldr	r3, [pc, #60]	; (8010cdc <lcd_clear_point+0x154>)
 8010ca0:	719a      	strb	r2, [r3, #6]
            break;
 8010ca2:	e014      	b.n	8010cce <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] &= ~(1 << BIT_2);
 8010ca4:	4b0d      	ldr	r3, [pc, #52]	; (8010cdc <lcd_clear_point+0x154>)
 8010ca6:	799b      	ldrb	r3, [r3, #6]
 8010ca8:	f023 0304 	bic.w	r3, r3, #4
 8010cac:	b2da      	uxtb	r2, r3
 8010cae:	4b0b      	ldr	r3, [pc, #44]	; (8010cdc <lcd_clear_point+0x154>)
 8010cb0:	719a      	strb	r2, [r3, #6]
            break;
 8010cb2:	e00c      	b.n	8010cce <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] &= ~(1 << BIT_0);
 8010cb4:	4b09      	ldr	r3, [pc, #36]	; (8010cdc <lcd_clear_point+0x154>)
 8010cb6:	799b      	ldrb	r3, [r3, #6]
 8010cb8:	f023 0301 	bic.w	r3, r3, #1
 8010cbc:	b2da      	uxtb	r2, r3
 8010cbe:	4b07      	ldr	r3, [pc, #28]	; (8010cdc <lcd_clear_point+0x154>)
 8010cc0:	719a      	strb	r2, [r3, #6]
            break;
 8010cc2:	e004      	b.n	8010cce <lcd_clear_point+0x146>
            break;
 8010cc4:	bf00      	nop
 8010cc6:	e002      	b.n	8010cce <lcd_clear_point+0x146>
            default:
            break;
        }
    }
 8010cc8:	bf00      	nop
 8010cca:	e000      	b.n	8010cce <lcd_clear_point+0x146>
            break;
 8010ccc:	bf00      	nop
}
 8010cce:	bf00      	nop
 8010cd0:	370c      	adds	r7, #12
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd8:	4770      	bx	lr
 8010cda:	bf00      	nop
 8010cdc:	20001df0 	.word	0x20001df0

08010ce0 <lcd_clear_time_unit>:
 * @param Unidad a borrar.
 * @param Velocidad de parpadeo de la pantalla.
 * @retval None
 */
void lcd_clear_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	460a      	mov	r2, r1
 8010cea:	71fb      	strb	r3, [r7, #7]
 8010cec:	4613      	mov	r3, r2
 8010cee:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8010cf0:	79fb      	ldrb	r3, [r7, #7]
 8010cf2:	2b03      	cmp	r3, #3
 8010cf4:	d82a      	bhi.n	8010d4c <lcd_clear_time_unit+0x6c>
 8010cf6:	a201      	add	r2, pc, #4	; (adr r2, 8010cfc <lcd_clear_time_unit+0x1c>)
 8010cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cfc:	08010d0d 	.word	0x08010d0d
 8010d00:	08010d1d 	.word	0x08010d1d
 8010d04:	08010d2d 	.word	0x08010d2d
 8010d08:	08010d3d 	.word	0x08010d3d
    {
        case H:
            g_lcd_map[REG_5] &= ~(1 << BIT_6);
 8010d0c:	4b14      	ldr	r3, [pc, #80]	; (8010d60 <lcd_clear_time_unit+0x80>)
 8010d0e:	795b      	ldrb	r3, [r3, #5]
 8010d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d14:	b2da      	uxtb	r2, r3
 8010d16:	4b12      	ldr	r3, [pc, #72]	; (8010d60 <lcd_clear_time_unit+0x80>)
 8010d18:	715a      	strb	r2, [r3, #5]
        break;
 8010d1a:	e018      	b.n	8010d4e <lcd_clear_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] &= ~(1 << BIT_5);
 8010d1c:	4b10      	ldr	r3, [pc, #64]	; (8010d60 <lcd_clear_time_unit+0x80>)
 8010d1e:	7a5b      	ldrb	r3, [r3, #9]
 8010d20:	f023 0320 	bic.w	r3, r3, #32
 8010d24:	b2da      	uxtb	r2, r3
 8010d26:	4b0e      	ldr	r3, [pc, #56]	; (8010d60 <lcd_clear_time_unit+0x80>)
 8010d28:	725a      	strb	r2, [r3, #9]
        break;
 8010d2a:	e010      	b.n	8010d4e <lcd_clear_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] &= ~(1 << BIT_5);
 8010d2c:	4b0c      	ldr	r3, [pc, #48]	; (8010d60 <lcd_clear_time_unit+0x80>)
 8010d2e:	7a9b      	ldrb	r3, [r3, #10]
 8010d30:	f023 0320 	bic.w	r3, r3, #32
 8010d34:	b2da      	uxtb	r2, r3
 8010d36:	4b0a      	ldr	r3, [pc, #40]	; (8010d60 <lcd_clear_time_unit+0x80>)
 8010d38:	729a      	strb	r2, [r3, #10]
        break;
 8010d3a:	e008      	b.n	8010d4e <lcd_clear_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] &= ~(1 << BIT_7);
 8010d3c:	4b08      	ldr	r3, [pc, #32]	; (8010d60 <lcd_clear_time_unit+0x80>)
 8010d3e:	7a5b      	ldrb	r3, [r3, #9]
 8010d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d44:	b2da      	uxtb	r2, r3
 8010d46:	4b06      	ldr	r3, [pc, #24]	; (8010d60 <lcd_clear_time_unit+0x80>)
 8010d48:	725a      	strb	r2, [r3, #9]
        break;
 8010d4a:	e000      	b.n	8010d4e <lcd_clear_time_unit+0x6e>
        default:
        break;
 8010d4c:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8010d4e:	79bb      	ldrb	r3, [r7, #6]
 8010d50:	4618      	mov	r0, r3
 8010d52:	f001 fbff 	bl	8012554 <pcf8553_blink>
}
 8010d56:	bf00      	nop
 8010d58:	3708      	adds	r7, #8
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	20001df0 	.word	0x20001df0

08010d64 <lcd_clear_vol_unit>:
 * @param Unidad a borrar.
 * @param Velocidad de parpadeo de la pantalla.
 * @retval None
 */
void lcd_clear_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	460a      	mov	r2, r1
 8010d6e:	71fb      	strb	r3, [r7, #7]
 8010d70:	4613      	mov	r3, r2
 8010d72:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8010d74:	79fb      	ldrb	r3, [r7, #7]
 8010d76:	2b07      	cmp	r3, #7
 8010d78:	f200 822c 	bhi.w	80111d4 <lcd_clear_vol_unit+0x470>
 8010d7c:	a201      	add	r2, pc, #4	; (adr r2, 8010d84 <lcd_clear_vol_unit+0x20>)
 8010d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d82:	bf00      	nop
 8010d84:	08010da5 	.word	0x08010da5
 8010d88:	08010e97 	.word	0x08010e97
 8010d8c:	08010f41 	.word	0x08010f41
 8010d90:	08010dfb 	.word	0x08010dfb
 8010d94:	0801109b 	.word	0x0801109b
 8010d98:	08010fd5 	.word	0x08010fd5
 8010d9c:	0801111b 	.word	0x0801111b
 8010da0:	0801119b 	.word	0x0801119b
    {
        case LT:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010da4:	4b8a      	ldr	r3, [pc, #552]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010da6:	7bdb      	ldrb	r3, [r3, #15]
 8010da8:	f023 0320 	bic.w	r3, r3, #32
 8010dac:	b2da      	uxtb	r2, r3
 8010dae:	4b88      	ldr	r3, [pc, #544]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010db0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010db2:	4b87      	ldr	r3, [pc, #540]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	f023 0320 	bic.w	r3, r3, #32
 8010dba:	b2da      	uxtb	r2, r3
 8010dbc:	4b84      	ldr	r3, [pc, #528]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010dbe:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8010dc0:	4b83      	ldr	r3, [pc, #524]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010dc2:	795b      	ldrb	r3, [r3, #5]
 8010dc4:	f023 0320 	bic.w	r3, r3, #32
 8010dc8:	b2da      	uxtb	r2, r3
 8010dca:	4b81      	ldr	r3, [pc, #516]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010dcc:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010dce:	4b80      	ldr	r3, [pc, #512]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010dd0:	7b9b      	ldrb	r3, [r3, #14]
 8010dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dd6:	b2da      	uxtb	r2, r3
 8010dd8:	4b7d      	ldr	r3, [pc, #500]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010dda:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] &= ~(1 << BIT_0);
 8010ddc:	4b7c      	ldr	r3, [pc, #496]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010dde:	7a9b      	ldrb	r3, [r3, #10]
 8010de0:	f023 0301 	bic.w	r3, r3, #1
 8010de4:	b2da      	uxtb	r2, r3
 8010de6:	4b7a      	ldr	r3, [pc, #488]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010de8:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] &= ~(1 << BIT_6);
 8010dea:	4b79      	ldr	r3, [pc, #484]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010dec:	7a5b      	ldrb	r3, [r3, #9]
 8010dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010df2:	b2da      	uxtb	r2, r3
 8010df4:	4b76      	ldr	r3, [pc, #472]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010df6:	725a      	strb	r2, [r3, #9]
        break;
 8010df8:	e1ed      	b.n	80111d6 <lcd_clear_vol_unit+0x472>
        case KG:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010dfa:	4b75      	ldr	r3, [pc, #468]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010dfc:	7bdb      	ldrb	r3, [r3, #15]
 8010dfe:	f023 0320 	bic.w	r3, r3, #32
 8010e02:	b2da      	uxtb	r2, r3
 8010e04:	4b72      	ldr	r3, [pc, #456]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e06:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010e08:	4b71      	ldr	r3, [pc, #452]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e0a:	7bdb      	ldrb	r3, [r3, #15]
 8010e0c:	f023 0310 	bic.w	r3, r3, #16
 8010e10:	b2da      	uxtb	r2, r3
 8010e12:	4b6f      	ldr	r3, [pc, #444]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e14:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8010e16:	4b6e      	ldr	r3, [pc, #440]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e18:	7bdb      	ldrb	r3, [r3, #15]
 8010e1a:	f023 0304 	bic.w	r3, r3, #4
 8010e1e:	b2da      	uxtb	r2, r3
 8010e20:	4b6b      	ldr	r3, [pc, #428]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e22:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010e24:	4b6a      	ldr	r3, [pc, #424]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e26:	781b      	ldrb	r3, [r3, #0]
 8010e28:	f023 0320 	bic.w	r3, r3, #32
 8010e2c:	b2da      	uxtb	r2, r3
 8010e2e:	4b68      	ldr	r3, [pc, #416]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e30:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_4);
 8010e32:	4b67      	ldr	r3, [pc, #412]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e34:	795b      	ldrb	r3, [r3, #5]
 8010e36:	f023 0310 	bic.w	r3, r3, #16
 8010e3a:	b2da      	uxtb	r2, r3
 8010e3c:	4b64      	ldr	r3, [pc, #400]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e3e:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010e40:	4b63      	ldr	r3, [pc, #396]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e42:	7b9b      	ldrb	r3, [r3, #14]
 8010e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e48:	b2da      	uxtb	r2, r3
 8010e4a:	4b61      	ldr	r3, [pc, #388]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e4c:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010e4e:	4b60      	ldr	r3, [pc, #384]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e50:	7bdb      	ldrb	r3, [r3, #15]
 8010e52:	f023 0302 	bic.w	r3, r3, #2
 8010e56:	b2da      	uxtb	r2, r3
 8010e58:	4b5d      	ldr	r3, [pc, #372]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e5a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010e5c:	4b5c      	ldr	r3, [pc, #368]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e5e:	781b      	ldrb	r3, [r3, #0]
 8010e60:	f023 0301 	bic.w	r3, r3, #1
 8010e64:	b2da      	uxtb	r2, r3
 8010e66:	4b5a      	ldr	r3, [pc, #360]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e68:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010e6a:	4b59      	ldr	r3, [pc, #356]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	f023 0302 	bic.w	r3, r3, #2
 8010e72:	b2da      	uxtb	r2, r3
 8010e74:	4b56      	ldr	r3, [pc, #344]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e76:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 8010e78:	4b55      	ldr	r3, [pc, #340]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e7a:	791b      	ldrb	r3, [r3, #4]
 8010e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e80:	b2da      	uxtb	r2, r3
 8010e82:	4b53      	ldr	r3, [pc, #332]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e84:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010e86:	4b52      	ldr	r3, [pc, #328]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e88:	795b      	ldrb	r3, [r3, #5]
 8010e8a:	f023 0302 	bic.w	r3, r3, #2
 8010e8e:	b2da      	uxtb	r2, r3
 8010e90:	4b4f      	ldr	r3, [pc, #316]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e92:	715a      	strb	r2, [r3, #5]
        break;
 8010e94:	e19f      	b.n	80111d6 <lcd_clear_vol_unit+0x472>
        case M3:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010e96:	4b4e      	ldr	r3, [pc, #312]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010e98:	7bdb      	ldrb	r3, [r3, #15]
 8010e9a:	f023 0320 	bic.w	r3, r3, #32
 8010e9e:	b2da      	uxtb	r2, r3
 8010ea0:	4b4b      	ldr	r3, [pc, #300]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010ea2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 8010ea4:	4b4a      	ldr	r3, [pc, #296]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010ea6:	7a9b      	ldrb	r3, [r3, #10]
 8010ea8:	f023 0304 	bic.w	r3, r3, #4
 8010eac:	b2da      	uxtb	r2, r3
 8010eae:	4b48      	ldr	r3, [pc, #288]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010eb0:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010eb2:	4b47      	ldr	r3, [pc, #284]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010eb4:	7bdb      	ldrb	r3, [r3, #15]
 8010eb6:	f023 0310 	bic.w	r3, r3, #16
 8010eba:	b2da      	uxtb	r2, r3
 8010ebc:	4b44      	ldr	r3, [pc, #272]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010ebe:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010ec0:	4b43      	ldr	r3, [pc, #268]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010ec2:	7bdb      	ldrb	r3, [r3, #15]
 8010ec4:	f023 0308 	bic.w	r3, r3, #8
 8010ec8:	b2da      	uxtb	r2, r3
 8010eca:	4b41      	ldr	r3, [pc, #260]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010ecc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010ece:	4b40      	ldr	r3, [pc, #256]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	f023 0320 	bic.w	r3, r3, #32
 8010ed6:	b2da      	uxtb	r2, r3
 8010ed8:	4b3d      	ldr	r3, [pc, #244]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010eda:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8010edc:	4b3c      	ldr	r3, [pc, #240]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010ede:	781b      	ldrb	r3, [r3, #0]
 8010ee0:	f023 0308 	bic.w	r3, r3, #8
 8010ee4:	b2da      	uxtb	r2, r3
 8010ee6:	4b3a      	ldr	r3, [pc, #232]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010ee8:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010eea:	4b39      	ldr	r3, [pc, #228]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010eec:	7b9b      	ldrb	r3, [r3, #14]
 8010eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ef2:	b2da      	uxtb	r2, r3
 8010ef4:	4b36      	ldr	r3, [pc, #216]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010ef6:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 8010ef8:	4b35      	ldr	r3, [pc, #212]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010efa:	7cdb      	ldrb	r3, [r3, #19]
 8010efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f00:	b2da      	uxtb	r2, r3
 8010f02:	4b33      	ldr	r3, [pc, #204]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f04:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8010f06:	4b32      	ldr	r3, [pc, #200]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f08:	7cdb      	ldrb	r3, [r3, #19]
 8010f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f0e:	b2da      	uxtb	r2, r3
 8010f10:	4b2f      	ldr	r3, [pc, #188]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f12:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010f14:	4b2e      	ldr	r3, [pc, #184]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	f023 0301 	bic.w	r3, r3, #1
 8010f1c:	b2da      	uxtb	r2, r3
 8010f1e:	4b2c      	ldr	r3, [pc, #176]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f20:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 8010f22:	4b2b      	ldr	r3, [pc, #172]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f24:	791b      	ldrb	r3, [r3, #4]
 8010f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f2a:	b2da      	uxtb	r2, r3
 8010f2c:	4b28      	ldr	r3, [pc, #160]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f2e:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010f30:	4b27      	ldr	r3, [pc, #156]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f32:	795b      	ldrb	r3, [r3, #5]
 8010f34:	f023 0302 	bic.w	r3, r3, #2
 8010f38:	b2da      	uxtb	r2, r3
 8010f3a:	4b25      	ldr	r3, [pc, #148]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f3c:	715a      	strb	r2, [r3, #5]
        break;
 8010f3e:	e14a      	b.n	80111d6 <lcd_clear_vol_unit+0x472>
        case MC:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010f40:	4b23      	ldr	r3, [pc, #140]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f42:	7bdb      	ldrb	r3, [r3, #15]
 8010f44:	f023 0320 	bic.w	r3, r3, #32
 8010f48:	b2da      	uxtb	r2, r3
 8010f4a:	4b21      	ldr	r3, [pc, #132]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f4c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 8010f4e:	4b20      	ldr	r3, [pc, #128]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f50:	7a9b      	ldrb	r3, [r3, #10]
 8010f52:	f023 0304 	bic.w	r3, r3, #4
 8010f56:	b2da      	uxtb	r2, r3
 8010f58:	4b1d      	ldr	r3, [pc, #116]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f5a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010f5c:	4b1c      	ldr	r3, [pc, #112]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f5e:	7bdb      	ldrb	r3, [r3, #15]
 8010f60:	f023 0310 	bic.w	r3, r3, #16
 8010f64:	b2da      	uxtb	r2, r3
 8010f66:	4b1a      	ldr	r3, [pc, #104]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f68:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010f6a:	4b19      	ldr	r3, [pc, #100]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f6c:	7bdb      	ldrb	r3, [r3, #15]
 8010f6e:	f023 0308 	bic.w	r3, r3, #8
 8010f72:	b2da      	uxtb	r2, r3
 8010f74:	4b16      	ldr	r3, [pc, #88]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f76:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010f78:	4b15      	ldr	r3, [pc, #84]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	f023 0320 	bic.w	r3, r3, #32
 8010f80:	b2da      	uxtb	r2, r3
 8010f82:	4b13      	ldr	r3, [pc, #76]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f84:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8010f86:	4b12      	ldr	r3, [pc, #72]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	f023 0308 	bic.w	r3, r3, #8
 8010f8e:	b2da      	uxtb	r2, r3
 8010f90:	4b0f      	ldr	r3, [pc, #60]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f92:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010f94:	4b0e      	ldr	r3, [pc, #56]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010f96:	7b9b      	ldrb	r3, [r3, #14]
 8010f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f9c:	b2da      	uxtb	r2, r3
 8010f9e:	4b0c      	ldr	r3, [pc, #48]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010fa0:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010fa2:	4b0b      	ldr	r3, [pc, #44]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010fa4:	7bdb      	ldrb	r3, [r3, #15]
 8010fa6:	f023 0302 	bic.w	r3, r3, #2
 8010faa:	b2da      	uxtb	r2, r3
 8010fac:	4b08      	ldr	r3, [pc, #32]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010fae:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010fb0:	4b07      	ldr	r3, [pc, #28]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	f023 0302 	bic.w	r3, r3, #2
 8010fb8:	b2da      	uxtb	r2, r3
 8010fba:	4b05      	ldr	r3, [pc, #20]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010fbc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010fbe:	4b04      	ldr	r3, [pc, #16]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010fc0:	795b      	ldrb	r3, [r3, #5]
 8010fc2:	f023 0302 	bic.w	r3, r3, #2
 8010fc6:	b2da      	uxtb	r2, r3
 8010fc8:	4b01      	ldr	r3, [pc, #4]	; (8010fd0 <lcd_clear_vol_unit+0x26c>)
 8010fca:	715a      	strb	r2, [r3, #5]
        break;
 8010fcc:	e103      	b.n	80111d6 <lcd_clear_vol_unit+0x472>
 8010fce:	bf00      	nop
 8010fd0:	20001df0 	.word	0x20001df0
        case BR:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8010fd4:	4b84      	ldr	r3, [pc, #528]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8010fd6:	7a9b      	ldrb	r3, [r3, #10]
 8010fd8:	f023 0308 	bic.w	r3, r3, #8
 8010fdc:	b2da      	uxtb	r2, r3
 8010fde:	4b82      	ldr	r3, [pc, #520]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8010fe0:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] &= ~(1 << BIT_4);
 8010fe2:	4b81      	ldr	r3, [pc, #516]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8010fe4:	7a9b      	ldrb	r3, [r3, #10]
 8010fe6:	f023 0310 	bic.w	r3, r3, #16
 8010fea:	b2da      	uxtb	r2, r3
 8010fec:	4b7e      	ldr	r3, [pc, #504]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8010fee:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010ff0:	4b7d      	ldr	r3, [pc, #500]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8010ff2:	7bdb      	ldrb	r3, [r3, #15]
 8010ff4:	f023 0308 	bic.w	r3, r3, #8
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	4b7b      	ldr	r3, [pc, #492]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8010ffc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8010ffe:	4b7a      	ldr	r3, [pc, #488]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	f023 0310 	bic.w	r3, r3, #16
 8011006:	b2da      	uxtb	r2, r3
 8011008:	4b77      	ldr	r3, [pc, #476]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801100a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_2);
 801100c:	4b76      	ldr	r3, [pc, #472]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801100e:	795b      	ldrb	r3, [r3, #5]
 8011010:	f023 0304 	bic.w	r3, r3, #4
 8011014:	b2da      	uxtb	r2, r3
 8011016:	4b74      	ldr	r3, [pc, #464]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011018:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 801101a:	4b73      	ldr	r3, [pc, #460]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	f023 0308 	bic.w	r3, r3, #8
 8011022:	b2da      	uxtb	r2, r3
 8011024:	4b70      	ldr	r3, [pc, #448]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011026:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8011028:	4b6f      	ldr	r3, [pc, #444]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801102a:	795b      	ldrb	r3, [r3, #5]
 801102c:	f023 0320 	bic.w	r3, r3, #32
 8011030:	b2da      	uxtb	r2, r3
 8011032:	4b6d      	ldr	r3, [pc, #436]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011034:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8011036:	4b6c      	ldr	r3, [pc, #432]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011038:	7b9b      	ldrb	r3, [r3, #14]
 801103a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801103e:	b2da      	uxtb	r2, r3
 8011040:	4b69      	ldr	r3, [pc, #420]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011042:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8011044:	4b68      	ldr	r3, [pc, #416]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011046:	7bdb      	ldrb	r3, [r3, #15]
 8011048:	f023 0302 	bic.w	r3, r3, #2
 801104c:	b2da      	uxtb	r2, r3
 801104e:	4b66      	ldr	r3, [pc, #408]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011050:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 8011052:	4b65      	ldr	r3, [pc, #404]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011054:	7cdb      	ldrb	r3, [r3, #19]
 8011056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801105a:	b2da      	uxtb	r2, r3
 801105c:	4b62      	ldr	r3, [pc, #392]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801105e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8011060:	4b61      	ldr	r3, [pc, #388]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011062:	7cdb      	ldrb	r3, [r3, #19]
 8011064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011068:	b2da      	uxtb	r2, r3
 801106a:	4b5f      	ldr	r3, [pc, #380]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801106c:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 801106e:	4b5e      	ldr	r3, [pc, #376]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011070:	781b      	ldrb	r3, [r3, #0]
 8011072:	f023 0301 	bic.w	r3, r3, #1
 8011076:	b2da      	uxtb	r2, r3
 8011078:	4b5b      	ldr	r3, [pc, #364]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801107a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 801107c:	4b5a      	ldr	r3, [pc, #360]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	f023 0302 	bic.w	r3, r3, #2
 8011084:	b2da      	uxtb	r2, r3
 8011086:	4b58      	ldr	r3, [pc, #352]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011088:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_0);
 801108a:	4b57      	ldr	r3, [pc, #348]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801108c:	795b      	ldrb	r3, [r3, #5]
 801108e:	f023 0301 	bic.w	r3, r3, #1
 8011092:	b2da      	uxtb	r2, r3
 8011094:	4b54      	ldr	r3, [pc, #336]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011096:	715a      	strb	r2, [r3, #5]
        break;
 8011098:	e09d      	b.n	80111d6 <lcd_clear_vol_unit+0x472>
        case GL:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 801109a:	4b53      	ldr	r3, [pc, #332]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801109c:	7a9b      	ldrb	r3, [r3, #10]
 801109e:	f023 0308 	bic.w	r3, r3, #8
 80110a2:	b2da      	uxtb	r2, r3
 80110a4:	4b50      	ldr	r3, [pc, #320]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80110a6:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 80110a8:	4b4f      	ldr	r3, [pc, #316]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80110aa:	7bdb      	ldrb	r3, [r3, #15]
 80110ac:	f023 0320 	bic.w	r3, r3, #32
 80110b0:	b2da      	uxtb	r2, r3
 80110b2:	4b4d      	ldr	r3, [pc, #308]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80110b4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 80110b6:	4b4c      	ldr	r3, [pc, #304]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	f023 0310 	bic.w	r3, r3, #16
 80110be:	b2da      	uxtb	r2, r3
 80110c0:	4b49      	ldr	r3, [pc, #292]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80110c2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 80110c4:	4b48      	ldr	r3, [pc, #288]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	f023 0320 	bic.w	r3, r3, #32
 80110cc:	b2da      	uxtb	r2, r3
 80110ce:	4b46      	ldr	r3, [pc, #280]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80110d0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 80110d2:	4b45      	ldr	r3, [pc, #276]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	f023 0308 	bic.w	r3, r3, #8
 80110da:	b2da      	uxtb	r2, r3
 80110dc:	4b42      	ldr	r3, [pc, #264]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80110de:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 80110e0:	4b41      	ldr	r3, [pc, #260]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80110e2:	795b      	ldrb	r3, [r3, #5]
 80110e4:	f023 0320 	bic.w	r3, r3, #32
 80110e8:	b2da      	uxtb	r2, r3
 80110ea:	4b3f      	ldr	r3, [pc, #252]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80110ec:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 80110ee:	4b3e      	ldr	r3, [pc, #248]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80110f0:	7bdb      	ldrb	r3, [r3, #15]
 80110f2:	f023 0302 	bic.w	r3, r3, #2
 80110f6:	b2da      	uxtb	r2, r3
 80110f8:	4b3b      	ldr	r3, [pc, #236]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80110fa:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 80110fc:	4b3a      	ldr	r3, [pc, #232]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	f023 0302 	bic.w	r3, r3, #2
 8011104:	b2da      	uxtb	r2, r3
 8011106:	4b38      	ldr	r3, [pc, #224]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011108:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 801110a:	4b37      	ldr	r3, [pc, #220]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801110c:	795b      	ldrb	r3, [r3, #5]
 801110e:	f023 0302 	bic.w	r3, r3, #2
 8011112:	b2da      	uxtb	r2, r3
 8011114:	4b34      	ldr	r3, [pc, #208]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011116:	715a      	strb	r2, [r3, #5]
        break;
 8011118:	e05d      	b.n	80111d6 <lcd_clear_vol_unit+0x472>
        case CELSIUS:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 801111a:	4b33      	ldr	r3, [pc, #204]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801111c:	7a9b      	ldrb	r3, [r3, #10]
 801111e:	f023 0308 	bic.w	r3, r3, #8
 8011122:	b2da      	uxtb	r2, r3
 8011124:	4b30      	ldr	r3, [pc, #192]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011126:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8011128:	4b2f      	ldr	r3, [pc, #188]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801112a:	7bdb      	ldrb	r3, [r3, #15]
 801112c:	f023 0320 	bic.w	r3, r3, #32
 8011130:	b2da      	uxtb	r2, r3
 8011132:	4b2d      	ldr	r3, [pc, #180]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011134:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8011136:	4b2c      	ldr	r3, [pc, #176]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011138:	7bdb      	ldrb	r3, [r3, #15]
 801113a:	f023 0308 	bic.w	r3, r3, #8
 801113e:	b2da      	uxtb	r2, r3
 8011140:	4b29      	ldr	r3, [pc, #164]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011142:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8011144:	4b28      	ldr	r3, [pc, #160]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011146:	7bdb      	ldrb	r3, [r3, #15]
 8011148:	f023 0304 	bic.w	r3, r3, #4
 801114c:	b2da      	uxtb	r2, r3
 801114e:	4b26      	ldr	r3, [pc, #152]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011150:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8011152:	4b25      	ldr	r3, [pc, #148]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	f023 0310 	bic.w	r3, r3, #16
 801115a:	b2da      	uxtb	r2, r3
 801115c:	4b22      	ldr	r3, [pc, #136]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801115e:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8011160:	4b21      	ldr	r3, [pc, #132]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011162:	7b9b      	ldrb	r3, [r3, #14]
 8011164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011168:	b2da      	uxtb	r2, r3
 801116a:	4b1f      	ldr	r3, [pc, #124]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801116c:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 801116e:	4b1e      	ldr	r3, [pc, #120]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011170:	7bdb      	ldrb	r3, [r3, #15]
 8011172:	f023 0302 	bic.w	r3, r3, #2
 8011176:	b2da      	uxtb	r2, r3
 8011178:	4b1b      	ldr	r3, [pc, #108]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801117a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 801117c:	4b1a      	ldr	r3, [pc, #104]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801117e:	781b      	ldrb	r3, [r3, #0]
 8011180:	f023 0302 	bic.w	r3, r3, #2
 8011184:	b2da      	uxtb	r2, r3
 8011186:	4b18      	ldr	r3, [pc, #96]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011188:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 801118a:	4b17      	ldr	r3, [pc, #92]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801118c:	795b      	ldrb	r3, [r3, #5]
 801118e:	f023 0302 	bic.w	r3, r3, #2
 8011192:	b2da      	uxtb	r2, r3
 8011194:	4b14      	ldr	r3, [pc, #80]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 8011196:	715a      	strb	r2, [r3, #5]
        break;
 8011198:	e01d      	b.n	80111d6 <lcd_clear_vol_unit+0x472>
        case NOTHING:
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 801119a:	4b13      	ldr	r3, [pc, #76]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 801119c:	7bdb      	ldrb	r3, [r3, #15]
 801119e:	f023 0304 	bic.w	r3, r3, #4
 80111a2:	b2da      	uxtb	r2, r3
 80111a4:	4b10      	ldr	r3, [pc, #64]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80111a6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 80111a8:	4b0f      	ldr	r3, [pc, #60]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	f023 0310 	bic.w	r3, r3, #16
 80111b0:	b2da      	uxtb	r2, r3
 80111b2:	4b0d      	ldr	r3, [pc, #52]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80111b4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 80111b6:	4b0c      	ldr	r3, [pc, #48]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80111b8:	7cdb      	ldrb	r3, [r3, #19]
 80111ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111be:	b2da      	uxtb	r2, r3
 80111c0:	4b09      	ldr	r3, [pc, #36]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80111c2:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 80111c4:	4b08      	ldr	r3, [pc, #32]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80111c6:	781b      	ldrb	r3, [r3, #0]
 80111c8:	f023 0301 	bic.w	r3, r3, #1
 80111cc:	b2da      	uxtb	r2, r3
 80111ce:	4b06      	ldr	r3, [pc, #24]	; (80111e8 <lcd_clear_vol_unit+0x484>)
 80111d0:	701a      	strb	r2, [r3, #0]
        break;
 80111d2:	e000      	b.n	80111d6 <lcd_clear_vol_unit+0x472>
        default:
        break;
 80111d4:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 80111d6:	79bb      	ldrb	r3, [r7, #6]
 80111d8:	4618      	mov	r0, r3
 80111da:	f001 f9bb 	bl	8012554 <pcf8553_blink>
}
 80111de:	bf00      	nop
 80111e0:	3708      	adds	r7, #8
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}
 80111e6:	bf00      	nop
 80111e8:	20001df0 	.word	0x20001df0

080111ec <lcd_init>:
 * @brief Inicialización de la pantalla LCD mediante el puerto SPI1.
 * @param  None
 * @retval None
 */
void lcd_init()
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	af00      	add	r7, sp, #0
    pcf8553_init();
 80111f0:	f001 fa22 	bl	8012638 <pcf8553_init>
}
 80111f4:	bf00      	nop
 80111f6:	bd80      	pop	{r7, pc}

080111f8 <lcd_put_char>:
 * elegida.
 * @param caracter a escribir tipo char, columna y fila de tipo uint8_t
 * @retval None
 */
void lcd_put_char(char c, uint8_t col, uint8_t row)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	4603      	mov	r3, r0
 8011200:	71fb      	strb	r3, [r7, #7]
 8011202:	460b      	mov	r3, r1
 8011204:	71bb      	strb	r3, [r7, #6]
 8011206:	4613      	mov	r3, r2
 8011208:	717b      	strb	r3, [r7, #5]
    g_row = row + 1;
 801120a:	797b      	ldrb	r3, [r7, #5]
 801120c:	3301      	adds	r3, #1
 801120e:	b2da      	uxtb	r2, r3
 8011210:	4bde      	ldr	r3, [pc, #888]	; (801158c <lcd_put_char+0x394>)
 8011212:	701a      	strb	r2, [r3, #0]
     *
     * No se activa esta funcionalidad si se está en el menú de configuración,
     * debido a que entra en conflicto con la funcionalidad del parpadeo de los
     * campos a modificar.
     */
    if (in_configuration == 0)
 8011214:	4bde      	ldr	r3, [pc, #888]	; (8011590 <lcd_put_char+0x398>)
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d10a      	bne.n	8011232 <lcd_put_char+0x3a>
    {
        if (g_buf[row][col] == c)
 801121c:	797a      	ldrb	r2, [r7, #5]
 801121e:	79bb      	ldrb	r3, [r7, #6]
 8011220:	49dc      	ldr	r1, [pc, #880]	; (8011594 <lcd_put_char+0x39c>)
 8011222:	00d2      	lsls	r2, r2, #3
 8011224:	440a      	add	r2, r1
 8011226:	4413      	add	r3, r2
 8011228:	781b      	ldrb	r3, [r3, #0]
 801122a:	79fa      	ldrb	r2, [r7, #7]
 801122c:	429a      	cmp	r2, r3
 801122e:	f000 81d6 	beq.w	80115de <lcd_put_char+0x3e6>
        {
            return;
        }
    }

    g_buf[row][col] = c;
 8011232:	797a      	ldrb	r2, [r7, #5]
 8011234:	79bb      	ldrb	r3, [r7, #6]
 8011236:	49d7      	ldr	r1, [pc, #860]	; (8011594 <lcd_put_char+0x39c>)
 8011238:	00d2      	lsls	r2, r2, #3
 801123a:	440a      	add	r2, r1
 801123c:	4413      	add	r3, r2
 801123e:	79fa      	ldrb	r2, [r7, #7]
 8011240:	701a      	strb	r2, [r3, #0]

    switch (row)
 8011242:	797b      	ldrb	r3, [r7, #5]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d002      	beq.n	801124e <lcd_put_char+0x56>
 8011248:	2b01      	cmp	r3, #1
 801124a:	d008      	beq.n	801125e <lcd_put_char+0x66>
                return;
            }

        break;
        default:
            return;
 801124c:	e1ce      	b.n	80115ec <lcd_put_char+0x3f4>
            if (col < LINE_0_DIGITS - 1)
 801124e:	79bb      	ldrb	r3, [r7, #6]
 8011250:	2b07      	cmp	r3, #7
 8011252:	f200 81c6 	bhi.w	80115e2 <lcd_put_char+0x3ea>
                g_col = col;
 8011256:	4ad0      	ldr	r2, [pc, #832]	; (8011598 <lcd_put_char+0x3a0>)
 8011258:	79bb      	ldrb	r3, [r7, #6]
 801125a:	7013      	strb	r3, [r2, #0]
        break;
 801125c:	e00a      	b.n	8011274 <lcd_put_char+0x7c>
            if (col < LINE_1_DIGITS - 1)
 801125e:	79bb      	ldrb	r3, [r7, #6]
 8011260:	2b06      	cmp	r3, #6
 8011262:	f200 81c0 	bhi.w	80115e6 <lcd_put_char+0x3ee>
                g_col = 6 - col; // @suppress("Avoid magic numbers")
 8011266:	79bb      	ldrb	r3, [r7, #6]
 8011268:	f1c3 0306 	rsb	r3, r3, #6
 801126c:	b2da      	uxtb	r2, r3
 801126e:	4bca      	ldr	r3, [pc, #808]	; (8011598 <lcd_put_char+0x3a0>)
 8011270:	701a      	strb	r2, [r3, #0]
        break;
 8011272:	bf00      	nop
        break;
    }

    switch (c)
 8011274:	79fb      	ldrb	r3, [r7, #7]
 8011276:	3b20      	subs	r3, #32
 8011278:	2b19      	cmp	r3, #25
 801127a:	f200 81b6 	bhi.w	80115ea <lcd_put_char+0x3f2>
 801127e:	a201      	add	r2, pc, #4	; (adr r2, 8011284 <lcd_put_char+0x8c>)
 8011280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011284:	080112ed 	.word	0x080112ed
 8011288:	080115eb 	.word	0x080115eb
 801128c:	080115eb 	.word	0x080115eb
 8011290:	080115eb 	.word	0x080115eb
 8011294:	080115eb 	.word	0x080115eb
 8011298:	080115eb 	.word	0x080115eb
 801129c:	080115eb 	.word	0x080115eb
 80112a0:	080115eb 	.word	0x080115eb
 80112a4:	080115eb 	.word	0x080115eb
 80112a8:	080115eb 	.word	0x080115eb
 80112ac:	080115eb 	.word	0x080115eb
 80112b0:	080115eb 	.word	0x080115eb
 80112b4:	080115eb 	.word	0x080115eb
 80112b8:	080115eb 	.word	0x080115eb
 80112bc:	0801132f 	.word	0x0801132f
 80112c0:	080115eb 	.word	0x080115eb
 80112c4:	08011339 	.word	0x08011339
 80112c8:	0801137b 	.word	0x0801137b
 80112cc:	080113bd 	.word	0x080113bd
 80112d0:	080113ff 	.word	0x080113ff
 80112d4:	08011441 	.word	0x08011441
 80112d8:	08011483 	.word	0x08011483
 80112dc:	080114c5 	.word	0x080114c5
 80112e0:	08011507 	.word	0x08011507
 80112e4:	08011549 	.word	0x08011549
 80112e8:	0801159d 	.word	0x0801159d
    {
        case ' ':
            lcd_write_line(SEG_A, 0);
 80112ec:	2100      	movs	r1, #0
 80112ee:	2000      	movs	r0, #0
 80112f0:	f001 f836 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80112f4:	2100      	movs	r1, #0
 80112f6:	2001      	movs	r0, #1
 80112f8:	f001 f832 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 80112fc:	2100      	movs	r1, #0
 80112fe:	2002      	movs	r0, #2
 8011300:	f001 f82e 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011304:	2100      	movs	r1, #0
 8011306:	2003      	movs	r0, #3
 8011308:	f001 f82a 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801130c:	2100      	movs	r1, #0
 801130e:	2004      	movs	r0, #4
 8011310:	f001 f826 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 8011314:	2100      	movs	r1, #0
 8011316:	2005      	movs	r0, #5
 8011318:	f001 f822 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 801131c:	2100      	movs	r1, #0
 801131e:	2006      	movs	r0, #6
 8011320:	f001 f81e 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011324:	2100      	movs	r1, #0
 8011326:	2007      	movs	r0, #7
 8011328:	f001 f81a 	bl	8012360 <lcd_write_line>
        break;
 801132c:	e15e      	b.n	80115ec <lcd_put_char+0x3f4>
        case '.':
            lcd_write_line(SEG_H, 1);
 801132e:	2101      	movs	r1, #1
 8011330:	2007      	movs	r0, #7
 8011332:	f001 f815 	bl	8012360 <lcd_write_line>
        break;
 8011336:	e159      	b.n	80115ec <lcd_put_char+0x3f4>
        case '0':
            lcd_write_line(SEG_A, 1);
 8011338:	2101      	movs	r1, #1
 801133a:	2000      	movs	r0, #0
 801133c:	f001 f810 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011340:	2101      	movs	r1, #1
 8011342:	2001      	movs	r0, #1
 8011344:	f001 f80c 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011348:	2101      	movs	r1, #1
 801134a:	2002      	movs	r0, #2
 801134c:	f001 f808 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011350:	2100      	movs	r1, #0
 8011352:	2003      	movs	r0, #3
 8011354:	f001 f804 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011358:	2101      	movs	r1, #1
 801135a:	2004      	movs	r0, #4
 801135c:	f001 f800 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011360:	2101      	movs	r1, #1
 8011362:	2005      	movs	r0, #5
 8011364:	f000 fffc 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011368:	2101      	movs	r1, #1
 801136a:	2006      	movs	r0, #6
 801136c:	f000 fff8 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011370:	2100      	movs	r1, #0
 8011372:	2007      	movs	r0, #7
 8011374:	f000 fff4 	bl	8012360 <lcd_write_line>
        break;
 8011378:	e138      	b.n	80115ec <lcd_put_char+0x3f4>
        case '1':
            lcd_write_line(SEG_A, 0);
 801137a:	2100      	movs	r1, #0
 801137c:	2000      	movs	r0, #0
 801137e:	f000 ffef 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011382:	2100      	movs	r1, #0
 8011384:	2001      	movs	r0, #1
 8011386:	f000 ffeb 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801138a:	2101      	movs	r1, #1
 801138c:	2002      	movs	r0, #2
 801138e:	f000 ffe7 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011392:	2100      	movs	r1, #0
 8011394:	2003      	movs	r0, #3
 8011396:	f000 ffe3 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801139a:	2100      	movs	r1, #0
 801139c:	2004      	movs	r0, #4
 801139e:	f000 ffdf 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80113a2:	2101      	movs	r1, #1
 80113a4:	2005      	movs	r0, #5
 80113a6:	f000 ffdb 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 80113aa:	2100      	movs	r1, #0
 80113ac:	2006      	movs	r0, #6
 80113ae:	f000 ffd7 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80113b2:	2100      	movs	r1, #0
 80113b4:	2007      	movs	r0, #7
 80113b6:	f000 ffd3 	bl	8012360 <lcd_write_line>
        break;
 80113ba:	e117      	b.n	80115ec <lcd_put_char+0x3f4>
        case '2':
            lcd_write_line(SEG_A, 1);
 80113bc:	2101      	movs	r1, #1
 80113be:	2000      	movs	r0, #0
 80113c0:	f000 ffce 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80113c4:	2101      	movs	r1, #1
 80113c6:	2001      	movs	r0, #1
 80113c8:	f000 ffca 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 80113cc:	2100      	movs	r1, #0
 80113ce:	2002      	movs	r0, #2
 80113d0:	f000 ffc6 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80113d4:	2101      	movs	r1, #1
 80113d6:	2003      	movs	r0, #3
 80113d8:	f000 ffc2 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 80113dc:	2100      	movs	r1, #0
 80113de:	2004      	movs	r0, #4
 80113e0:	f000 ffbe 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80113e4:	2101      	movs	r1, #1
 80113e6:	2005      	movs	r0, #5
 80113e8:	f000 ffba 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80113ec:	2101      	movs	r1, #1
 80113ee:	2006      	movs	r0, #6
 80113f0:	f000 ffb6 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80113f4:	2100      	movs	r1, #0
 80113f6:	2007      	movs	r0, #7
 80113f8:	f000 ffb2 	bl	8012360 <lcd_write_line>
        break;
 80113fc:	e0f6      	b.n	80115ec <lcd_put_char+0x3f4>
        case '3':
            lcd_write_line(SEG_A, 1);
 80113fe:	2101      	movs	r1, #1
 8011400:	2000      	movs	r0, #0
 8011402:	f000 ffad 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011406:	2100      	movs	r1, #0
 8011408:	2001      	movs	r0, #1
 801140a:	f000 ffa9 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801140e:	2101      	movs	r1, #1
 8011410:	2002      	movs	r0, #2
 8011412:	f000 ffa5 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011416:	2101      	movs	r1, #1
 8011418:	2003      	movs	r0, #3
 801141a:	f000 ffa1 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801141e:	2100      	movs	r1, #0
 8011420:	2004      	movs	r0, #4
 8011422:	f000 ff9d 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011426:	2101      	movs	r1, #1
 8011428:	2005      	movs	r0, #5
 801142a:	f000 ff99 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801142e:	2101      	movs	r1, #1
 8011430:	2006      	movs	r0, #6
 8011432:	f000 ff95 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011436:	2100      	movs	r1, #0
 8011438:	2007      	movs	r0, #7
 801143a:	f000 ff91 	bl	8012360 <lcd_write_line>
        break;
 801143e:	e0d5      	b.n	80115ec <lcd_put_char+0x3f4>
        case '4':
            lcd_write_line(SEG_A, 0);
 8011440:	2100      	movs	r1, #0
 8011442:	2000      	movs	r0, #0
 8011444:	f000 ff8c 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011448:	2100      	movs	r1, #0
 801144a:	2001      	movs	r0, #1
 801144c:	f000 ff88 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011450:	2101      	movs	r1, #1
 8011452:	2002      	movs	r0, #2
 8011454:	f000 ff84 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011458:	2101      	movs	r1, #1
 801145a:	2003      	movs	r0, #3
 801145c:	f000 ff80 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011460:	2101      	movs	r1, #1
 8011462:	2004      	movs	r0, #4
 8011464:	f000 ff7c 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011468:	2101      	movs	r1, #1
 801146a:	2005      	movs	r0, #5
 801146c:	f000 ff78 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 8011470:	2100      	movs	r1, #0
 8011472:	2006      	movs	r0, #6
 8011474:	f000 ff74 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011478:	2100      	movs	r1, #0
 801147a:	2007      	movs	r0, #7
 801147c:	f000 ff70 	bl	8012360 <lcd_write_line>
        break;
 8011480:	e0b4      	b.n	80115ec <lcd_put_char+0x3f4>
        case '5':
            lcd_write_line(SEG_A, 1);
 8011482:	2101      	movs	r1, #1
 8011484:	2000      	movs	r0, #0
 8011486:	f000 ff6b 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 801148a:	2100      	movs	r1, #0
 801148c:	2001      	movs	r0, #1
 801148e:	f000 ff67 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011492:	2101      	movs	r1, #1
 8011494:	2002      	movs	r0, #2
 8011496:	f000 ff63 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 801149a:	2101      	movs	r1, #1
 801149c:	2003      	movs	r0, #3
 801149e:	f000 ff5f 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80114a2:	2101      	movs	r1, #1
 80114a4:	2004      	movs	r0, #4
 80114a6:	f000 ff5b 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 80114aa:	2100      	movs	r1, #0
 80114ac:	2005      	movs	r0, #5
 80114ae:	f000 ff57 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80114b2:	2101      	movs	r1, #1
 80114b4:	2006      	movs	r0, #6
 80114b6:	f000 ff53 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80114ba:	2100      	movs	r1, #0
 80114bc:	2007      	movs	r0, #7
 80114be:	f000 ff4f 	bl	8012360 <lcd_write_line>
        break;
 80114c2:	e093      	b.n	80115ec <lcd_put_char+0x3f4>
        case '6':
            lcd_write_line(SEG_A, 1);
 80114c4:	2101      	movs	r1, #1
 80114c6:	2000      	movs	r0, #0
 80114c8:	f000 ff4a 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80114cc:	2101      	movs	r1, #1
 80114ce:	2001      	movs	r0, #1
 80114d0:	f000 ff46 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80114d4:	2101      	movs	r1, #1
 80114d6:	2002      	movs	r0, #2
 80114d8:	f000 ff42 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80114dc:	2101      	movs	r1, #1
 80114de:	2003      	movs	r0, #3
 80114e0:	f000 ff3e 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80114e4:	2101      	movs	r1, #1
 80114e6:	2004      	movs	r0, #4
 80114e8:	f000 ff3a 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 80114ec:	2100      	movs	r1, #0
 80114ee:	2005      	movs	r0, #5
 80114f0:	f000 ff36 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80114f4:	2101      	movs	r1, #1
 80114f6:	2006      	movs	r0, #6
 80114f8:	f000 ff32 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80114fc:	2100      	movs	r1, #0
 80114fe:	2007      	movs	r0, #7
 8011500:	f000 ff2e 	bl	8012360 <lcd_write_line>
        break;
 8011504:	e072      	b.n	80115ec <lcd_put_char+0x3f4>
        case '7':
            lcd_write_line(SEG_A, 0);
 8011506:	2100      	movs	r1, #0
 8011508:	2000      	movs	r0, #0
 801150a:	f000 ff29 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 801150e:	2100      	movs	r1, #0
 8011510:	2001      	movs	r0, #1
 8011512:	f000 ff25 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011516:	2101      	movs	r1, #1
 8011518:	2002      	movs	r0, #2
 801151a:	f000 ff21 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 801151e:	2100      	movs	r1, #0
 8011520:	2003      	movs	r0, #3
 8011522:	f000 ff1d 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 8011526:	2100      	movs	r1, #0
 8011528:	2004      	movs	r0, #4
 801152a:	f000 ff19 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 801152e:	2101      	movs	r1, #1
 8011530:	2005      	movs	r0, #5
 8011532:	f000 ff15 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011536:	2101      	movs	r1, #1
 8011538:	2006      	movs	r0, #6
 801153a:	f000 ff11 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801153e:	2100      	movs	r1, #0
 8011540:	2007      	movs	r0, #7
 8011542:	f000 ff0d 	bl	8012360 <lcd_write_line>
        break;
 8011546:	e051      	b.n	80115ec <lcd_put_char+0x3f4>
        case '8':
            lcd_write_line(SEG_A, 1);
 8011548:	2101      	movs	r1, #1
 801154a:	2000      	movs	r0, #0
 801154c:	f000 ff08 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011550:	2101      	movs	r1, #1
 8011552:	2001      	movs	r0, #1
 8011554:	f000 ff04 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011558:	2101      	movs	r1, #1
 801155a:	2002      	movs	r0, #2
 801155c:	f000 ff00 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011560:	2101      	movs	r1, #1
 8011562:	2003      	movs	r0, #3
 8011564:	f000 fefc 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011568:	2101      	movs	r1, #1
 801156a:	2004      	movs	r0, #4
 801156c:	f000 fef8 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011570:	2101      	movs	r1, #1
 8011572:	2005      	movs	r0, #5
 8011574:	f000 fef4 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011578:	2101      	movs	r1, #1
 801157a:	2006      	movs	r0, #6
 801157c:	f000 fef0 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011580:	2100      	movs	r1, #0
 8011582:	2007      	movs	r0, #7
 8011584:	f000 feec 	bl	8012360 <lcd_write_line>
        break;
 8011588:	e030      	b.n	80115ec <lcd_put_char+0x3f4>
 801158a:	bf00      	nop
 801158c:	20001d5d 	.word	0x20001d5d
 8011590:	20001e0c 	.word	0x20001e0c
 8011594:	20001d4c 	.word	0x20001d4c
 8011598:	20001d5c 	.word	0x20001d5c
        case '9':
            lcd_write_line(SEG_A, 0);
 801159c:	2100      	movs	r1, #0
 801159e:	2000      	movs	r0, #0
 80115a0:	f000 fede 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80115a4:	2100      	movs	r1, #0
 80115a6:	2001      	movs	r0, #1
 80115a8:	f000 feda 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80115ac:	2101      	movs	r1, #1
 80115ae:	2002      	movs	r0, #2
 80115b0:	f000 fed6 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80115b4:	2101      	movs	r1, #1
 80115b6:	2003      	movs	r0, #3
 80115b8:	f000 fed2 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80115bc:	2101      	movs	r1, #1
 80115be:	2004      	movs	r0, #4
 80115c0:	f000 fece 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80115c4:	2101      	movs	r1, #1
 80115c6:	2005      	movs	r0, #5
 80115c8:	f000 feca 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80115cc:	2101      	movs	r1, #1
 80115ce:	2006      	movs	r0, #6
 80115d0:	f000 fec6 	bl	8012360 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80115d4:	2100      	movs	r1, #0
 80115d6:	2007      	movs	r0, #7
 80115d8:	f000 fec2 	bl	8012360 <lcd_write_line>
        break;
 80115dc:	e006      	b.n	80115ec <lcd_put_char+0x3f4>
            return;
 80115de:	bf00      	nop
 80115e0:	e004      	b.n	80115ec <lcd_put_char+0x3f4>
                return;
 80115e2:	bf00      	nop
 80115e4:	e002      	b.n	80115ec <lcd_put_char+0x3f4>
                return;
 80115e6:	bf00      	nop
 80115e8:	e000      	b.n	80115ec <lcd_put_char+0x3f4>
        default:
        break;
 80115ea:	bf00      	nop
    }
}
 80115ec:	3708      	adds	r7, #8
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
 80115f2:	bf00      	nop

080115f4 <lcd_refresh>:
 * enviar en dicho buffer y luego enviar todo junto.
 * @param None
 * @retval None
 */
void lcd_refresh()
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	af00      	add	r7, sp, #0
    pcf8553_dump();
 80115f8:	f000 fff2 	bl	80125e0 <pcf8553_dump>
}
 80115fc:	bf00      	nop
 80115fe:	bd80      	pop	{r7, pc}

08011600 <lcd_set_point>:
 * @brief Función que escribe un punto en específico en la pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_set_point(rows_t line, point_t point)
{
 8011600:	b480      	push	{r7}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	4603      	mov	r3, r0
 8011608:	460a      	mov	r2, r1
 801160a:	71fb      	strb	r3, [r7, #7]
 801160c:	4613      	mov	r3, r2
 801160e:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8011610:	79fb      	ldrb	r3, [r7, #7]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d14c      	bne.n	80116b0 <lcd_set_point+0xb0>
    {
        switch (point)
 8011616:	79bb      	ldrb	r3, [r7, #6]
 8011618:	2b06      	cmp	r3, #6
 801161a:	f200 808f 	bhi.w	801173c <lcd_set_point+0x13c>
 801161e:	a201      	add	r2, pc, #4	; (adr r2, 8011624 <lcd_set_point+0x24>)
 8011620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011624:	08011641 	.word	0x08011641
 8011628:	08011651 	.word	0x08011651
 801162c:	08011661 	.word	0x08011661
 8011630:	08011671 	.word	0x08011671
 8011634:	08011681 	.word	0x08011681
 8011638:	08011691 	.word	0x08011691
 801163c:	080116a1 	.word	0x080116a1
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_7);
 8011640:	4b44      	ldr	r3, [pc, #272]	; (8011754 <lcd_set_point+0x154>)
 8011642:	79db      	ldrb	r3, [r3, #7]
 8011644:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011648:	b2da      	uxtb	r2, r3
 801164a:	4b42      	ldr	r3, [pc, #264]	; (8011754 <lcd_set_point+0x154>)
 801164c:	71da      	strb	r2, [r3, #7]
            break;
 801164e:	e07a      	b.n	8011746 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] |= (1 << BIT_1);
 8011650:	4b40      	ldr	r3, [pc, #256]	; (8011754 <lcd_set_point+0x154>)
 8011652:	7a1b      	ldrb	r3, [r3, #8]
 8011654:	f043 0302 	orr.w	r3, r3, #2
 8011658:	b2da      	uxtb	r2, r3
 801165a:	4b3e      	ldr	r3, [pc, #248]	; (8011754 <lcd_set_point+0x154>)
 801165c:	721a      	strb	r2, [r3, #8]
            break;
 801165e:	e072      	b.n	8011746 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] |= (1 << BIT_3);
 8011660:	4b3c      	ldr	r3, [pc, #240]	; (8011754 <lcd_set_point+0x154>)
 8011662:	7a1b      	ldrb	r3, [r3, #8]
 8011664:	f043 0308 	orr.w	r3, r3, #8
 8011668:	b2da      	uxtb	r2, r3
 801166a:	4b3a      	ldr	r3, [pc, #232]	; (8011754 <lcd_set_point+0x154>)
 801166c:	721a      	strb	r2, [r3, #8]
            break;
 801166e:	e06a      	b.n	8011746 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] |= (1 << BIT_5);
 8011670:	4b38      	ldr	r3, [pc, #224]	; (8011754 <lcd_set_point+0x154>)
 8011672:	7a1b      	ldrb	r3, [r3, #8]
 8011674:	f043 0320 	orr.w	r3, r3, #32
 8011678:	b2da      	uxtb	r2, r3
 801167a:	4b36      	ldr	r3, [pc, #216]	; (8011754 <lcd_set_point+0x154>)
 801167c:	721a      	strb	r2, [r3, #8]
            break;
 801167e:	e062      	b.n	8011746 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] |= (1 << BIT_7);
 8011680:	4b34      	ldr	r3, [pc, #208]	; (8011754 <lcd_set_point+0x154>)
 8011682:	7a1b      	ldrb	r3, [r3, #8]
 8011684:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011688:	b2da      	uxtb	r2, r3
 801168a:	4b32      	ldr	r3, [pc, #200]	; (8011754 <lcd_set_point+0x154>)
 801168c:	721a      	strb	r2, [r3, #8]
            break;
 801168e:	e05a      	b.n	8011746 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] |= (1 << BIT_1);
 8011690:	4b30      	ldr	r3, [pc, #192]	; (8011754 <lcd_set_point+0x154>)
 8011692:	7a5b      	ldrb	r3, [r3, #9]
 8011694:	f043 0302 	orr.w	r3, r3, #2
 8011698:	b2da      	uxtb	r2, r3
 801169a:	4b2e      	ldr	r3, [pc, #184]	; (8011754 <lcd_set_point+0x154>)
 801169c:	725a      	strb	r2, [r3, #9]
            break;
 801169e:	e052      	b.n	8011746 <lcd_set_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] |= (1 << BIT_3);
 80116a0:	4b2c      	ldr	r3, [pc, #176]	; (8011754 <lcd_set_point+0x154>)
 80116a2:	7a5b      	ldrb	r3, [r3, #9]
 80116a4:	f043 0308 	orr.w	r3, r3, #8
 80116a8:	b2da      	uxtb	r2, r3
 80116aa:	4b2a      	ldr	r3, [pc, #168]	; (8011754 <lcd_set_point+0x154>)
 80116ac:	725a      	strb	r2, [r3, #9]
            break;
 80116ae:	e04a      	b.n	8011746 <lcd_set_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 80116b0:	79fb      	ldrb	r3, [r7, #7]
 80116b2:	2b01      	cmp	r3, #1
 80116b4:	d144      	bne.n	8011740 <lcd_set_point+0x140>
    {
        switch (point)
 80116b6:	79bb      	ldrb	r3, [r7, #6]
 80116b8:	2b05      	cmp	r3, #5
 80116ba:	d843      	bhi.n	8011744 <lcd_set_point+0x144>
 80116bc:	a201      	add	r2, pc, #4	; (adr r2, 80116c4 <lcd_set_point+0xc4>)
 80116be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116c2:	bf00      	nop
 80116c4:	080116dd 	.word	0x080116dd
 80116c8:	080116ed 	.word	0x080116ed
 80116cc:	080116fd 	.word	0x080116fd
 80116d0:	0801170d 	.word	0x0801170d
 80116d4:	0801171d 	.word	0x0801171d
 80116d8:	0801172d 	.word	0x0801172d
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_2);
 80116dc:	4b1d      	ldr	r3, [pc, #116]	; (8011754 <lcd_set_point+0x154>)
 80116de:	79db      	ldrb	r3, [r3, #7]
 80116e0:	f043 0304 	orr.w	r3, r3, #4
 80116e4:	b2da      	uxtb	r2, r3
 80116e6:	4b1b      	ldr	r3, [pc, #108]	; (8011754 <lcd_set_point+0x154>)
 80116e8:	71da      	strb	r2, [r3, #7]
            break;
 80116ea:	e02c      	b.n	8011746 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] |= (1 << BIT_0);
 80116ec:	4b19      	ldr	r3, [pc, #100]	; (8011754 <lcd_set_point+0x154>)
 80116ee:	79db      	ldrb	r3, [r3, #7]
 80116f0:	f043 0301 	orr.w	r3, r3, #1
 80116f4:	b2da      	uxtb	r2, r3
 80116f6:	4b17      	ldr	r3, [pc, #92]	; (8011754 <lcd_set_point+0x154>)
 80116f8:	71da      	strb	r2, [r3, #7]
            break;
 80116fa:	e024      	b.n	8011746 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] |= (1 << BIT_6);
 80116fc:	4b15      	ldr	r3, [pc, #84]	; (8011754 <lcd_set_point+0x154>)
 80116fe:	799b      	ldrb	r3, [r3, #6]
 8011700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011704:	b2da      	uxtb	r2, r3
 8011706:	4b13      	ldr	r3, [pc, #76]	; (8011754 <lcd_set_point+0x154>)
 8011708:	719a      	strb	r2, [r3, #6]
            break;
 801170a:	e01c      	b.n	8011746 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] |= (1 << BIT_4);
 801170c:	4b11      	ldr	r3, [pc, #68]	; (8011754 <lcd_set_point+0x154>)
 801170e:	799b      	ldrb	r3, [r3, #6]
 8011710:	f043 0310 	orr.w	r3, r3, #16
 8011714:	b2da      	uxtb	r2, r3
 8011716:	4b0f      	ldr	r3, [pc, #60]	; (8011754 <lcd_set_point+0x154>)
 8011718:	719a      	strb	r2, [r3, #6]
            break;
 801171a:	e014      	b.n	8011746 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] |= (1 << BIT_2);
 801171c:	4b0d      	ldr	r3, [pc, #52]	; (8011754 <lcd_set_point+0x154>)
 801171e:	799b      	ldrb	r3, [r3, #6]
 8011720:	f043 0304 	orr.w	r3, r3, #4
 8011724:	b2da      	uxtb	r2, r3
 8011726:	4b0b      	ldr	r3, [pc, #44]	; (8011754 <lcd_set_point+0x154>)
 8011728:	719a      	strb	r2, [r3, #6]
            break;
 801172a:	e00c      	b.n	8011746 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] |= (1 << BIT_0);
 801172c:	4b09      	ldr	r3, [pc, #36]	; (8011754 <lcd_set_point+0x154>)
 801172e:	799b      	ldrb	r3, [r3, #6]
 8011730:	f043 0301 	orr.w	r3, r3, #1
 8011734:	b2da      	uxtb	r2, r3
 8011736:	4b07      	ldr	r3, [pc, #28]	; (8011754 <lcd_set_point+0x154>)
 8011738:	719a      	strb	r2, [r3, #6]
            break;
 801173a:	e004      	b.n	8011746 <lcd_set_point+0x146>
            break;
 801173c:	bf00      	nop
 801173e:	e002      	b.n	8011746 <lcd_set_point+0x146>
            default:
            break;
        }
    }
 8011740:	bf00      	nop
 8011742:	e000      	b.n	8011746 <lcd_set_point+0x146>
            break;
 8011744:	bf00      	nop
}
 8011746:	bf00      	nop
 8011748:	370c      	adds	r7, #12
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr
 8011752:	bf00      	nop
 8011754:	20001df0 	.word	0x20001df0

08011758 <lcd_set_symbol>:
 * @brief Función que escribe un símbolo en específico en la pantalla.
 * @param Enumeraciones symbols_t y blink_t de lcd.h
 * @retval None
 */
void lcd_set_symbol(symbols_t symbol, blink_t blink_speed)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
 801175e:	4603      	mov	r3, r0
 8011760:	460a      	mov	r2, r1
 8011762:	71fb      	strb	r3, [r7, #7]
 8011764:	4613      	mov	r3, r2
 8011766:	71bb      	strb	r3, [r7, #6]
    switch (symbol)
 8011768:	79fb      	ldrb	r3, [r7, #7]
 801176a:	2b16      	cmp	r3, #22
 801176c:	f200 8366 	bhi.w	8011e3c <lcd_set_symbol+0x6e4>
 8011770:	a201      	add	r2, pc, #4	; (adr r2, 8011778 <lcd_set_symbol+0x20>)
 8011772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011776:	bf00      	nop
 8011778:	080117e5 	.word	0x080117e5
 801177c:	080117d5 	.word	0x080117d5
 8011780:	08011805 	.word	0x08011805
 8011784:	08011815 	.word	0x08011815
 8011788:	080117f5 	.word	0x080117f5
 801178c:	08011845 	.word	0x08011845
 8011790:	08011835 	.word	0x08011835
 8011794:	08011855 	.word	0x08011855
 8011798:	08011825 	.word	0x08011825
 801179c:	08011865 	.word	0x08011865
 80117a0:	080118f3 	.word	0x080118f3
 80117a4:	08011a21 	.word	0x08011a21
 80117a8:	08011a69 	.word	0x08011a69
 80117ac:	08011af7 	.word	0x08011af7
 80117b0:	08011b5b 	.word	0x08011b5b
 80117b4:	08011bbf 	.word	0x08011bbf
 80117b8:	08011c23 	.word	0x08011c23
 80117bc:	08011c5d 	.word	0x08011c5d
 80117c0:	08011c81 	.word	0x08011c81
 80117c4:	08011cc9 	.word	0x08011cc9
 80117c8:	08011d11 	.word	0x08011d11
 80117cc:	08011d4b 	.word	0x08011d4b
 80117d0:	08011d93 	.word	0x08011d93
    {
        case POWER:
            g_lcd_map[REG_2] |= (1 << BIT_5);
 80117d4:	4b91      	ldr	r3, [pc, #580]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80117d6:	789b      	ldrb	r3, [r3, #2]
 80117d8:	f043 0320 	orr.w	r3, r3, #32
 80117dc:	b2da      	uxtb	r2, r3
 80117de:	4b8f      	ldr	r3, [pc, #572]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80117e0:	709a      	strb	r2, [r3, #2]
        break;
 80117e2:	e32c      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case BATTERY:
            g_lcd_map[REG_7] |= (1 << BIT_5);
 80117e4:	4b8d      	ldr	r3, [pc, #564]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80117e6:	79db      	ldrb	r3, [r3, #7]
 80117e8:	f043 0320 	orr.w	r3, r3, #32
 80117ec:	b2da      	uxtb	r2, r3
 80117ee:	4b8b      	ldr	r3, [pc, #556]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80117f0:	71da      	strb	r2, [r3, #7]
        break;
 80117f2:	e324      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case BATCH:
            g_lcd_map[REG_12] |= (1 << BIT_5);
 80117f4:	4b89      	ldr	r3, [pc, #548]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80117f6:	7b1b      	ldrb	r3, [r3, #12]
 80117f8:	f043 0320 	orr.w	r3, r3, #32
 80117fc:	b2da      	uxtb	r2, r3
 80117fe:	4b87      	ldr	r3, [pc, #540]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011800:	731a      	strb	r2, [r3, #12]
        break;
 8011802:	e31c      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case RATE:
            g_lcd_map[REG_17] |= (1 << BIT_5);
 8011804:	4b85      	ldr	r3, [pc, #532]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011806:	7c5b      	ldrb	r3, [r3, #17]
 8011808:	f043 0320 	orr.w	r3, r3, #32
 801180c:	b2da      	uxtb	r2, r3
 801180e:	4b83      	ldr	r3, [pc, #524]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011810:	745a      	strb	r2, [r3, #17]
        break;
 8011812:	e314      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case E:
            g_lcd_map[REG_2] |= (1 << BIT_4);
 8011814:	4b81      	ldr	r3, [pc, #516]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011816:	789b      	ldrb	r3, [r3, #2]
 8011818:	f043 0310 	orr.w	r3, r3, #16
 801181c:	b2da      	uxtb	r2, r3
 801181e:	4b7f      	ldr	r3, [pc, #508]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011820:	709a      	strb	r2, [r3, #2]
        break;
 8011822:	e30c      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case POINT:
            g_lcd_map[REG_7] |= (1 << BIT_4);
 8011824:	4b7d      	ldr	r3, [pc, #500]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011826:	79db      	ldrb	r3, [r3, #7]
 8011828:	f043 0310 	orr.w	r3, r3, #16
 801182c:	b2da      	uxtb	r2, r3
 801182e:	4b7b      	ldr	r3, [pc, #492]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011830:	71da      	strb	r2, [r3, #7]
        break;
 8011832:	e304      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case ACM:
            g_lcd_map[REG_12] |= (1 << BIT_4);
 8011834:	4b79      	ldr	r3, [pc, #484]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011836:	7b1b      	ldrb	r3, [r3, #12]
 8011838:	f043 0310 	orr.w	r3, r3, #16
 801183c:	b2da      	uxtb	r2, r3
 801183e:	4b77      	ldr	r3, [pc, #476]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011840:	731a      	strb	r2, [r3, #12]
        break;
 8011842:	e2fc      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case TTL:
            g_lcd_map[REG_17] |= (1 << BIT_4);
 8011844:	4b75      	ldr	r3, [pc, #468]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011846:	7c5b      	ldrb	r3, [r3, #17]
 8011848:	f043 0310 	orr.w	r3, r3, #16
 801184c:	b2da      	uxtb	r2, r3
 801184e:	4b73      	ldr	r3, [pc, #460]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011850:	745a      	strb	r2, [r3, #17]
        break;
 8011852:	e2f4      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case BACKSLASH:
            g_lcd_map[REG_10] |= (1 << BIT_1);
 8011854:	4b71      	ldr	r3, [pc, #452]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011856:	7a9b      	ldrb	r3, [r3, #10]
 8011858:	f043 0302 	orr.w	r3, r3, #2
 801185c:	b2da      	uxtb	r2, r3
 801185e:	4b6f      	ldr	r3, [pc, #444]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011860:	729a      	strb	r2, [r3, #10]
        break;
 8011862:	e2ec      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case VE:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011864:	4b6d      	ldr	r3, [pc, #436]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011866:	7bdb      	ldrb	r3, [r3, #15]
 8011868:	f043 0320 	orr.w	r3, r3, #32
 801186c:	b2da      	uxtb	r2, r3
 801186e:	4b6b      	ldr	r3, [pc, #428]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011870:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011872:	4b6a      	ldr	r3, [pc, #424]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011874:	7bdb      	ldrb	r3, [r3, #15]
 8011876:	f043 0310 	orr.w	r3, r3, #16
 801187a:	b2da      	uxtb	r2, r3
 801187c:	4b67      	ldr	r3, [pc, #412]	; (8011a1c <lcd_set_symbol+0x2c4>)
 801187e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011880:	4b66      	ldr	r3, [pc, #408]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	f043 0320 	orr.w	r3, r3, #32
 8011888:	b2da      	uxtb	r2, r3
 801188a:	4b64      	ldr	r3, [pc, #400]	; (8011a1c <lcd_set_symbol+0x2c4>)
 801188c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_2);
 801188e:	4b63      	ldr	r3, [pc, #396]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	f043 0304 	orr.w	r3, r3, #4
 8011896:	b2da      	uxtb	r2, r3
 8011898:	4b60      	ldr	r3, [pc, #384]	; (8011a1c <lcd_set_symbol+0x2c4>)
 801189a:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 801189c:	4b5f      	ldr	r3, [pc, #380]	; (8011a1c <lcd_set_symbol+0x2c4>)
 801189e:	7b9b      	ldrb	r3, [r3, #14]
 80118a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80118a4:	b2da      	uxtb	r2, r3
 80118a6:	4b5d      	ldr	r3, [pc, #372]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80118a8:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 80118aa:	4b5c      	ldr	r3, [pc, #368]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80118ac:	7bdb      	ldrb	r3, [r3, #15]
 80118ae:	f043 0302 	orr.w	r3, r3, #2
 80118b2:	b2da      	uxtb	r2, r3
 80118b4:	4b59      	ldr	r3, [pc, #356]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80118b6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 80118b8:	4b58      	ldr	r3, [pc, #352]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80118ba:	7cdb      	ldrb	r3, [r3, #19]
 80118bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118c0:	b2da      	uxtb	r2, r3
 80118c2:	4b56      	ldr	r3, [pc, #344]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80118c4:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 80118c6:	4b55      	ldr	r3, [pc, #340]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80118c8:	781b      	ldrb	r3, [r3, #0]
 80118ca:	f043 0301 	orr.w	r3, r3, #1
 80118ce:	b2da      	uxtb	r2, r3
 80118d0:	4b52      	ldr	r3, [pc, #328]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80118d2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80118d4:	4b51      	ldr	r3, [pc, #324]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	f043 0302 	orr.w	r3, r3, #2
 80118dc:	b2da      	uxtb	r2, r3
 80118de:	4b4f      	ldr	r3, [pc, #316]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80118e0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 80118e2:	4b4e      	ldr	r3, [pc, #312]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80118e4:	795b      	ldrb	r3, [r3, #5]
 80118e6:	f043 0302 	orr.w	r3, r3, #2
 80118ea:	b2da      	uxtb	r2, r3
 80118ec:	4b4b      	ldr	r3, [pc, #300]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80118ee:	715a      	strb	r2, [r3, #5]
        break;
 80118f0:	e2a5      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case PASS:
            g_lcd_map[REG_13] |= (1 << BIT_1);
 80118f2:	4b4a      	ldr	r3, [pc, #296]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80118f4:	7b5b      	ldrb	r3, [r3, #13]
 80118f6:	f043 0302 	orr.w	r3, r3, #2
 80118fa:	b2da      	uxtb	r2, r3
 80118fc:	4b47      	ldr	r3, [pc, #284]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80118fe:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_0);
 8011900:	4b46      	ldr	r3, [pc, #280]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011902:	7b5b      	ldrb	r3, [r3, #13]
 8011904:	f043 0301 	orr.w	r3, r3, #1
 8011908:	b2da      	uxtb	r2, r3
 801190a:	4b44      	ldr	r3, [pc, #272]	; (8011a1c <lcd_set_symbol+0x2c4>)
 801190c:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_1);
 801190e:	4b43      	ldr	r3, [pc, #268]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011910:	7c9b      	ldrb	r3, [r3, #18]
 8011912:	f043 0302 	orr.w	r3, r3, #2
 8011916:	b2da      	uxtb	r2, r3
 8011918:	4b40      	ldr	r3, [pc, #256]	; (8011a1c <lcd_set_symbol+0x2c4>)
 801191a:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_0);
 801191c:	4b3f      	ldr	r3, [pc, #252]	; (8011a1c <lcd_set_symbol+0x2c4>)
 801191e:	7c9b      	ldrb	r3, [r3, #18]
 8011920:	f043 0301 	orr.w	r3, r3, #1
 8011924:	b2da      	uxtb	r2, r3
 8011926:	4b3d      	ldr	r3, [pc, #244]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011928:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_0);
 801192a:	4b3c      	ldr	r3, [pc, #240]	; (8011a1c <lcd_set_symbol+0x2c4>)
 801192c:	78db      	ldrb	r3, [r3, #3]
 801192e:	f043 0301 	orr.w	r3, r3, #1
 8011932:	b2da      	uxtb	r2, r3
 8011934:	4b39      	ldr	r3, [pc, #228]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011936:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_3);
 8011938:	4b38      	ldr	r3, [pc, #224]	; (8011a1c <lcd_set_symbol+0x2c4>)
 801193a:	7b5b      	ldrb	r3, [r3, #13]
 801193c:	f043 0308 	orr.w	r3, r3, #8
 8011940:	b2da      	uxtb	r2, r3
 8011942:	4b36      	ldr	r3, [pc, #216]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011944:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_2);
 8011946:	4b35      	ldr	r3, [pc, #212]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011948:	7b5b      	ldrb	r3, [r3, #13]
 801194a:	f043 0304 	orr.w	r3, r3, #4
 801194e:	b2da      	uxtb	r2, r3
 8011950:	4b32      	ldr	r3, [pc, #200]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011952:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_3);
 8011954:	4b31      	ldr	r3, [pc, #196]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011956:	7c9b      	ldrb	r3, [r3, #18]
 8011958:	f043 0308 	orr.w	r3, r3, #8
 801195c:	b2da      	uxtb	r2, r3
 801195e:	4b2f      	ldr	r3, [pc, #188]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011960:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_2);
 8011962:	4b2e      	ldr	r3, [pc, #184]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011964:	7c9b      	ldrb	r3, [r3, #18]
 8011966:	f043 0304 	orr.w	r3, r3, #4
 801196a:	b2da      	uxtb	r2, r3
 801196c:	4b2b      	ldr	r3, [pc, #172]	; (8011a1c <lcd_set_symbol+0x2c4>)
 801196e:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_2);
 8011970:	4b2a      	ldr	r3, [pc, #168]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011972:	78db      	ldrb	r3, [r3, #3]
 8011974:	f043 0304 	orr.w	r3, r3, #4
 8011978:	b2da      	uxtb	r2, r3
 801197a:	4b28      	ldr	r3, [pc, #160]	; (8011a1c <lcd_set_symbol+0x2c4>)
 801197c:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_3] |= (1 << BIT_3);
 801197e:	4b27      	ldr	r3, [pc, #156]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011980:	78db      	ldrb	r3, [r3, #3]
 8011982:	f043 0308 	orr.w	r3, r3, #8
 8011986:	b2da      	uxtb	r2, r3
 8011988:	4b24      	ldr	r3, [pc, #144]	; (8011a1c <lcd_set_symbol+0x2c4>)
 801198a:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_5);
 801198c:	4b23      	ldr	r3, [pc, #140]	; (8011a1c <lcd_set_symbol+0x2c4>)
 801198e:	7b5b      	ldrb	r3, [r3, #13]
 8011990:	f043 0320 	orr.w	r3, r3, #32
 8011994:	b2da      	uxtb	r2, r3
 8011996:	4b21      	ldr	r3, [pc, #132]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011998:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_4);
 801199a:	4b20      	ldr	r3, [pc, #128]	; (8011a1c <lcd_set_symbol+0x2c4>)
 801199c:	7b5b      	ldrb	r3, [r3, #13]
 801199e:	f043 0310 	orr.w	r3, r3, #16
 80119a2:	b2da      	uxtb	r2, r3
 80119a4:	4b1d      	ldr	r3, [pc, #116]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80119a6:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_4);
 80119a8:	4b1c      	ldr	r3, [pc, #112]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80119aa:	7c9b      	ldrb	r3, [r3, #18]
 80119ac:	f043 0310 	orr.w	r3, r3, #16
 80119b0:	b2da      	uxtb	r2, r3
 80119b2:	4b1a      	ldr	r3, [pc, #104]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80119b4:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_5);
 80119b6:	4b19      	ldr	r3, [pc, #100]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80119b8:	78db      	ldrb	r3, [r3, #3]
 80119ba:	f043 0320 	orr.w	r3, r3, #32
 80119be:	b2da      	uxtb	r2, r3
 80119c0:	4b16      	ldr	r3, [pc, #88]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80119c2:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_4);
 80119c4:	4b15      	ldr	r3, [pc, #84]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80119c6:	7a1b      	ldrb	r3, [r3, #8]
 80119c8:	f043 0310 	orr.w	r3, r3, #16
 80119cc:	b2da      	uxtb	r2, r3
 80119ce:	4b13      	ldr	r3, [pc, #76]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80119d0:	721a      	strb	r2, [r3, #8]

            g_lcd_map[REG_13] |= (1 << BIT_7);
 80119d2:	4b12      	ldr	r3, [pc, #72]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80119d4:	7b5b      	ldrb	r3, [r3, #13]
 80119d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80119da:	b2da      	uxtb	r2, r3
 80119dc:	4b0f      	ldr	r3, [pc, #60]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80119de:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_6);
 80119e0:	4b0e      	ldr	r3, [pc, #56]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80119e2:	7b5b      	ldrb	r3, [r3, #13]
 80119e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119e8:	b2da      	uxtb	r2, r3
 80119ea:	4b0c      	ldr	r3, [pc, #48]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80119ec:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_6);
 80119ee:	4b0b      	ldr	r3, [pc, #44]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80119f0:	7c9b      	ldrb	r3, [r3, #18]
 80119f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119f6:	b2da      	uxtb	r2, r3
 80119f8:	4b08      	ldr	r3, [pc, #32]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80119fa:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_7);
 80119fc:	4b07      	ldr	r3, [pc, #28]	; (8011a1c <lcd_set_symbol+0x2c4>)
 80119fe:	78db      	ldrb	r3, [r3, #3]
 8011a00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a04:	b2da      	uxtb	r2, r3
 8011a06:	4b05      	ldr	r3, [pc, #20]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011a08:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_6);
 8011a0a:	4b04      	ldr	r3, [pc, #16]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011a0c:	7a1b      	ldrb	r3, [r3, #8]
 8011a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a12:	b2da      	uxtb	r2, r3
 8011a14:	4b01      	ldr	r3, [pc, #4]	; (8011a1c <lcd_set_symbol+0x2c4>)
 8011a16:	721a      	strb	r2, [r3, #8]

        break;
 8011a18:	e211      	b.n	8011e3e <lcd_set_symbol+0x6e6>
 8011a1a:	bf00      	nop
 8011a1c:	20001df0 	.word	0x20001df0
        case K:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011a20:	4b96      	ldr	r3, [pc, #600]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a22:	7bdb      	ldrb	r3, [r3, #15]
 8011a24:	f043 0320 	orr.w	r3, r3, #32
 8011a28:	b2da      	uxtb	r2, r3
 8011a2a:	4b94      	ldr	r3, [pc, #592]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a2c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011a2e:	4b93      	ldr	r3, [pc, #588]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a30:	7bdb      	ldrb	r3, [r3, #15]
 8011a32:	f043 0310 	orr.w	r3, r3, #16
 8011a36:	b2da      	uxtb	r2, r3
 8011a38:	4b90      	ldr	r3, [pc, #576]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a3a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011a3c:	4b8f      	ldr	r3, [pc, #572]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a3e:	7bdb      	ldrb	r3, [r3, #15]
 8011a40:	f043 0304 	orr.w	r3, r3, #4
 8011a44:	b2da      	uxtb	r2, r3
 8011a46:	4b8d      	ldr	r3, [pc, #564]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a48:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011a4a:	4b8c      	ldr	r3, [pc, #560]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	f043 0320 	orr.w	r3, r3, #32
 8011a52:	b2da      	uxtb	r2, r3
 8011a54:	4b89      	ldr	r3, [pc, #548]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a56:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011a58:	4b88      	ldr	r3, [pc, #544]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a5a:	795b      	ldrb	r3, [r3, #5]
 8011a5c:	f043 0310 	orr.w	r3, r3, #16
 8011a60:	b2da      	uxtb	r2, r3
 8011a62:	4b86      	ldr	r3, [pc, #536]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a64:	715a      	strb	r2, [r3, #5]
        break;
 8011a66:	e1ea      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case KO:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011a68:	4b84      	ldr	r3, [pc, #528]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a6a:	7bdb      	ldrb	r3, [r3, #15]
 8011a6c:	f043 0320 	orr.w	r3, r3, #32
 8011a70:	b2da      	uxtb	r2, r3
 8011a72:	4b82      	ldr	r3, [pc, #520]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a74:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011a76:	4b81      	ldr	r3, [pc, #516]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a78:	7bdb      	ldrb	r3, [r3, #15]
 8011a7a:	f043 0310 	orr.w	r3, r3, #16
 8011a7e:	b2da      	uxtb	r2, r3
 8011a80:	4b7e      	ldr	r3, [pc, #504]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a82:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011a84:	4b7d      	ldr	r3, [pc, #500]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a86:	7bdb      	ldrb	r3, [r3, #15]
 8011a88:	f043 0304 	orr.w	r3, r3, #4
 8011a8c:	b2da      	uxtb	r2, r3
 8011a8e:	4b7b      	ldr	r3, [pc, #492]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a90:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011a92:	4b7a      	ldr	r3, [pc, #488]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a94:	781b      	ldrb	r3, [r3, #0]
 8011a96:	f043 0320 	orr.w	r3, r3, #32
 8011a9a:	b2da      	uxtb	r2, r3
 8011a9c:	4b77      	ldr	r3, [pc, #476]	; (8011c7c <lcd_set_symbol+0x524>)
 8011a9e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011aa0:	4b76      	ldr	r3, [pc, #472]	; (8011c7c <lcd_set_symbol+0x524>)
 8011aa2:	795b      	ldrb	r3, [r3, #5]
 8011aa4:	f043 0310 	orr.w	r3, r3, #16
 8011aa8:	b2da      	uxtb	r2, r3
 8011aaa:	4b74      	ldr	r3, [pc, #464]	; (8011c7c <lcd_set_symbol+0x524>)
 8011aac:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011aae:	4b73      	ldr	r3, [pc, #460]	; (8011c7c <lcd_set_symbol+0x524>)
 8011ab0:	7cdb      	ldrb	r3, [r3, #19]
 8011ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ab6:	b2da      	uxtb	r2, r3
 8011ab8:	4b70      	ldr	r3, [pc, #448]	; (8011c7c <lcd_set_symbol+0x524>)
 8011aba:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011abc:	4b6f      	ldr	r3, [pc, #444]	; (8011c7c <lcd_set_symbol+0x524>)
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	f043 0301 	orr.w	r3, r3, #1
 8011ac4:	b2da      	uxtb	r2, r3
 8011ac6:	4b6d      	ldr	r3, [pc, #436]	; (8011c7c <lcd_set_symbol+0x524>)
 8011ac8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011aca:	4b6c      	ldr	r3, [pc, #432]	; (8011c7c <lcd_set_symbol+0x524>)
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	f043 0302 	orr.w	r3, r3, #2
 8011ad2:	b2da      	uxtb	r2, r3
 8011ad4:	4b69      	ldr	r3, [pc, #420]	; (8011c7c <lcd_set_symbol+0x524>)
 8011ad6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011ad8:	4b68      	ldr	r3, [pc, #416]	; (8011c7c <lcd_set_symbol+0x524>)
 8011ada:	791b      	ldrb	r3, [r3, #4]
 8011adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ae0:	b2da      	uxtb	r2, r3
 8011ae2:	4b66      	ldr	r3, [pc, #408]	; (8011c7c <lcd_set_symbol+0x524>)
 8011ae4:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011ae6:	4b65      	ldr	r3, [pc, #404]	; (8011c7c <lcd_set_symbol+0x524>)
 8011ae8:	795b      	ldrb	r3, [r3, #5]
 8011aea:	f043 0302 	orr.w	r3, r3, #2
 8011aee:	b2da      	uxtb	r2, r3
 8011af0:	4b62      	ldr	r3, [pc, #392]	; (8011c7c <lcd_set_symbol+0x524>)
 8011af2:	715a      	strb	r2, [r3, #5]
        break;
 8011af4:	e1a3      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case PASS1:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011af6:	4b61      	ldr	r3, [pc, #388]	; (8011c7c <lcd_set_symbol+0x524>)
 8011af8:	7b1b      	ldrb	r3, [r3, #12]
 8011afa:	f043 0301 	orr.w	r3, r3, #1
 8011afe:	b2da      	uxtb	r2, r3
 8011b00:	4b5e      	ldr	r3, [pc, #376]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b02:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011b04:	4b5d      	ldr	r3, [pc, #372]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b06:	7b1b      	ldrb	r3, [r3, #12]
 8011b08:	f043 0302 	orr.w	r3, r3, #2
 8011b0c:	b2da      	uxtb	r2, r3
 8011b0e:	4b5b      	ldr	r3, [pc, #364]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b10:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011b12:	4b5a      	ldr	r3, [pc, #360]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b14:	7c5b      	ldrb	r3, [r3, #17]
 8011b16:	f043 0301 	orr.w	r3, r3, #1
 8011b1a:	b2da      	uxtb	r2, r3
 8011b1c:	4b57      	ldr	r3, [pc, #348]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b1e:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011b20:	4b56      	ldr	r3, [pc, #344]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b22:	7c5b      	ldrb	r3, [r3, #17]
 8011b24:	f043 0302 	orr.w	r3, r3, #2
 8011b28:	b2da      	uxtb	r2, r3
 8011b2a:	4b54      	ldr	r3, [pc, #336]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b2c:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 8011b2e:	4b53      	ldr	r3, [pc, #332]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b30:	789b      	ldrb	r3, [r3, #2]
 8011b32:	f043 0302 	orr.w	r3, r3, #2
 8011b36:	b2da      	uxtb	r2, r3
 8011b38:	4b50      	ldr	r3, [pc, #320]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b3a:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011b3c:	4b4f      	ldr	r3, [pc, #316]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b3e:	789b      	ldrb	r3, [r3, #2]
 8011b40:	f043 0301 	orr.w	r3, r3, #1
 8011b44:	b2da      	uxtb	r2, r3
 8011b46:	4b4d      	ldr	r3, [pc, #308]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b48:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011b4a:	4b4c      	ldr	r3, [pc, #304]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b4c:	79db      	ldrb	r3, [r3, #7]
 8011b4e:	f043 0302 	orr.w	r3, r3, #2
 8011b52:	b2da      	uxtb	r2, r3
 8011b54:	4b49      	ldr	r3, [pc, #292]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b56:	71da      	strb	r2, [r3, #7]
        break;
 8011b58:	e171      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case PASS2:
            g_lcd_map[REG_11] |= (1 << BIT_6);
 8011b5a:	4b48      	ldr	r3, [pc, #288]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b5c:	7adb      	ldrb	r3, [r3, #11]
 8011b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b62:	b2da      	uxtb	r2, r3
 8011b64:	4b45      	ldr	r3, [pc, #276]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b66:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_7);
 8011b68:	4b44      	ldr	r3, [pc, #272]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b6a:	7adb      	ldrb	r3, [r3, #11]
 8011b6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b70:	b2da      	uxtb	r2, r3
 8011b72:	4b42      	ldr	r3, [pc, #264]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b74:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_6);
 8011b76:	4b41      	ldr	r3, [pc, #260]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b78:	7c1b      	ldrb	r3, [r3, #16]
 8011b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b7e:	b2da      	uxtb	r2, r3
 8011b80:	4b3e      	ldr	r3, [pc, #248]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b82:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_7);
 8011b84:	4b3d      	ldr	r3, [pc, #244]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b86:	7c1b      	ldrb	r3, [r3, #16]
 8011b88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b8c:	b2da      	uxtb	r2, r3
 8011b8e:	4b3b      	ldr	r3, [pc, #236]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b90:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_7);
 8011b92:	4b3a      	ldr	r3, [pc, #232]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b94:	785b      	ldrb	r3, [r3, #1]
 8011b96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b9a:	b2da      	uxtb	r2, r3
 8011b9c:	4b37      	ldr	r3, [pc, #220]	; (8011c7c <lcd_set_symbol+0x524>)
 8011b9e:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_6);
 8011ba0:	4b36      	ldr	r3, [pc, #216]	; (8011c7c <lcd_set_symbol+0x524>)
 8011ba2:	785b      	ldrb	r3, [r3, #1]
 8011ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ba8:	b2da      	uxtb	r2, r3
 8011baa:	4b34      	ldr	r3, [pc, #208]	; (8011c7c <lcd_set_symbol+0x524>)
 8011bac:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_7);
 8011bae:	4b33      	ldr	r3, [pc, #204]	; (8011c7c <lcd_set_symbol+0x524>)
 8011bb0:	799b      	ldrb	r3, [r3, #6]
 8011bb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011bb6:	b2da      	uxtb	r2, r3
 8011bb8:	4b30      	ldr	r3, [pc, #192]	; (8011c7c <lcd_set_symbol+0x524>)
 8011bba:	719a      	strb	r2, [r3, #6]
        break;
 8011bbc:	e13f      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case PASS3:
            g_lcd_map[REG_11] |= (1 << BIT_4);
 8011bbe:	4b2f      	ldr	r3, [pc, #188]	; (8011c7c <lcd_set_symbol+0x524>)
 8011bc0:	7adb      	ldrb	r3, [r3, #11]
 8011bc2:	f043 0310 	orr.w	r3, r3, #16
 8011bc6:	b2da      	uxtb	r2, r3
 8011bc8:	4b2c      	ldr	r3, [pc, #176]	; (8011c7c <lcd_set_symbol+0x524>)
 8011bca:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_5);
 8011bcc:	4b2b      	ldr	r3, [pc, #172]	; (8011c7c <lcd_set_symbol+0x524>)
 8011bce:	7adb      	ldrb	r3, [r3, #11]
 8011bd0:	f043 0320 	orr.w	r3, r3, #32
 8011bd4:	b2da      	uxtb	r2, r3
 8011bd6:	4b29      	ldr	r3, [pc, #164]	; (8011c7c <lcd_set_symbol+0x524>)
 8011bd8:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_4);
 8011bda:	4b28      	ldr	r3, [pc, #160]	; (8011c7c <lcd_set_symbol+0x524>)
 8011bdc:	7c1b      	ldrb	r3, [r3, #16]
 8011bde:	f043 0310 	orr.w	r3, r3, #16
 8011be2:	b2da      	uxtb	r2, r3
 8011be4:	4b25      	ldr	r3, [pc, #148]	; (8011c7c <lcd_set_symbol+0x524>)
 8011be6:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_5);
 8011be8:	4b24      	ldr	r3, [pc, #144]	; (8011c7c <lcd_set_symbol+0x524>)
 8011bea:	7c1b      	ldrb	r3, [r3, #16]
 8011bec:	f043 0320 	orr.w	r3, r3, #32
 8011bf0:	b2da      	uxtb	r2, r3
 8011bf2:	4b22      	ldr	r3, [pc, #136]	; (8011c7c <lcd_set_symbol+0x524>)
 8011bf4:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_5);
 8011bf6:	4b21      	ldr	r3, [pc, #132]	; (8011c7c <lcd_set_symbol+0x524>)
 8011bf8:	785b      	ldrb	r3, [r3, #1]
 8011bfa:	f043 0320 	orr.w	r3, r3, #32
 8011bfe:	b2da      	uxtb	r2, r3
 8011c00:	4b1e      	ldr	r3, [pc, #120]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c02:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_4);
 8011c04:	4b1d      	ldr	r3, [pc, #116]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c06:	785b      	ldrb	r3, [r3, #1]
 8011c08:	f043 0310 	orr.w	r3, r3, #16
 8011c0c:	b2da      	uxtb	r2, r3
 8011c0e:	4b1b      	ldr	r3, [pc, #108]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c10:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_5);
 8011c12:	4b1a      	ldr	r3, [pc, #104]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c14:	799b      	ldrb	r3, [r3, #6]
 8011c16:	f043 0320 	orr.w	r3, r3, #32
 8011c1a:	b2da      	uxtb	r2, r3
 8011c1c:	4b17      	ldr	r3, [pc, #92]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c1e:	719a      	strb	r2, [r3, #6]
        break;
 8011c20:	e10d      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case F:
            g_lcd_map[REG_12] |= (1 << BIT_2);
 8011c22:	4b16      	ldr	r3, [pc, #88]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c24:	7b1b      	ldrb	r3, [r3, #12]
 8011c26:	f043 0304 	orr.w	r3, r3, #4
 8011c2a:	b2da      	uxtb	r2, r3
 8011c2c:	4b13      	ldr	r3, [pc, #76]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c2e:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_3);
 8011c30:	4b12      	ldr	r3, [pc, #72]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c32:	7b1b      	ldrb	r3, [r3, #12]
 8011c34:	f043 0308 	orr.w	r3, r3, #8
 8011c38:	b2da      	uxtb	r2, r3
 8011c3a:	4b10      	ldr	r3, [pc, #64]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c3c:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_3);
 8011c3e:	4b0f      	ldr	r3, [pc, #60]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c40:	7c5b      	ldrb	r3, [r3, #17]
 8011c42:	f043 0308 	orr.w	r3, r3, #8
 8011c46:	b2da      	uxtb	r2, r3
 8011c48:	4b0c      	ldr	r3, [pc, #48]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c4a:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_3);
 8011c4c:	4b0b      	ldr	r3, [pc, #44]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c4e:	789b      	ldrb	r3, [r3, #2]
 8011c50:	f043 0308 	orr.w	r3, r3, #8
 8011c54:	b2da      	uxtb	r2, r3
 8011c56:	4b09      	ldr	r3, [pc, #36]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c58:	709a      	strb	r2, [r3, #2]
        break;
 8011c5a:	e0f0      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case LIN_1:
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011c5c:	4b07      	ldr	r3, [pc, #28]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c5e:	7c5b      	ldrb	r3, [r3, #17]
 8011c60:	f043 0301 	orr.w	r3, r3, #1
 8011c64:	b2da      	uxtb	r2, r3
 8011c66:	4b05      	ldr	r3, [pc, #20]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c68:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011c6a:	4b04      	ldr	r3, [pc, #16]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c6c:	789b      	ldrb	r3, [r3, #2]
 8011c6e:	f043 0301 	orr.w	r3, r3, #1
 8011c72:	b2da      	uxtb	r2, r3
 8011c74:	4b01      	ldr	r3, [pc, #4]	; (8011c7c <lcd_set_symbol+0x524>)
 8011c76:	709a      	strb	r2, [r3, #2]
        break;
 8011c78:	e0e1      	b.n	8011e3e <lcd_set_symbol+0x6e6>
 8011c7a:	bf00      	nop
 8011c7c:	20001df0 	.word	0x20001df0
        case LIN_2:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011c80:	4b73      	ldr	r3, [pc, #460]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011c82:	7b1b      	ldrb	r3, [r3, #12]
 8011c84:	f043 0301 	orr.w	r3, r3, #1
 8011c88:	b2da      	uxtb	r2, r3
 8011c8a:	4b71      	ldr	r3, [pc, #452]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011c8c:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011c8e:	4b70      	ldr	r3, [pc, #448]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011c90:	7c5b      	ldrb	r3, [r3, #17]
 8011c92:	f043 0301 	orr.w	r3, r3, #1
 8011c96:	b2da      	uxtb	r2, r3
 8011c98:	4b6d      	ldr	r3, [pc, #436]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011c9a:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011c9c:	4b6c      	ldr	r3, [pc, #432]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011c9e:	7c5b      	ldrb	r3, [r3, #17]
 8011ca0:	f043 0302 	orr.w	r3, r3, #2
 8011ca4:	b2da      	uxtb	r2, r3
 8011ca6:	4b6a      	ldr	r3, [pc, #424]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011ca8:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 8011caa:	4b69      	ldr	r3, [pc, #420]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011cac:	789b      	ldrb	r3, [r3, #2]
 8011cae:	f043 0302 	orr.w	r3, r3, #2
 8011cb2:	b2da      	uxtb	r2, r3
 8011cb4:	4b66      	ldr	r3, [pc, #408]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011cb6:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011cb8:	4b65      	ldr	r3, [pc, #404]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011cba:	79db      	ldrb	r3, [r3, #7]
 8011cbc:	f043 0302 	orr.w	r3, r3, #2
 8011cc0:	b2da      	uxtb	r2, r3
 8011cc2:	4b63      	ldr	r3, [pc, #396]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011cc4:	71da      	strb	r2, [r3, #7]
        break;
 8011cc6:	e0ba      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case LIN_3:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011cc8:	4b61      	ldr	r3, [pc, #388]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011cca:	7b1b      	ldrb	r3, [r3, #12]
 8011ccc:	f043 0301 	orr.w	r3, r3, #1
 8011cd0:	b2da      	uxtb	r2, r3
 8011cd2:	4b5f      	ldr	r3, [pc, #380]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011cd4:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011cd6:	4b5e      	ldr	r3, [pc, #376]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011cd8:	7c5b      	ldrb	r3, [r3, #17]
 8011cda:	f043 0301 	orr.w	r3, r3, #1
 8011cde:	b2da      	uxtb	r2, r3
 8011ce0:	4b5b      	ldr	r3, [pc, #364]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011ce2:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011ce4:	4b5a      	ldr	r3, [pc, #360]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011ce6:	7c5b      	ldrb	r3, [r3, #17]
 8011ce8:	f043 0302 	orr.w	r3, r3, #2
 8011cec:	b2da      	uxtb	r2, r3
 8011cee:	4b58      	ldr	r3, [pc, #352]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011cf0:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011cf2:	4b57      	ldr	r3, [pc, #348]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011cf4:	789b      	ldrb	r3, [r3, #2]
 8011cf6:	f043 0301 	orr.w	r3, r3, #1
 8011cfa:	b2da      	uxtb	r2, r3
 8011cfc:	4b54      	ldr	r3, [pc, #336]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011cfe:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011d00:	4b53      	ldr	r3, [pc, #332]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d02:	79db      	ldrb	r3, [r3, #7]
 8011d04:	f043 0302 	orr.w	r3, r3, #2
 8011d08:	b2da      	uxtb	r2, r3
 8011d0a:	4b51      	ldr	r3, [pc, #324]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d0c:	71da      	strb	r2, [r3, #7]
        break;
 8011d0e:	e096      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case LIN_4:
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011d10:	4b4f      	ldr	r3, [pc, #316]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d12:	7b1b      	ldrb	r3, [r3, #12]
 8011d14:	f043 0302 	orr.w	r3, r3, #2
 8011d18:	b2da      	uxtb	r2, r3
 8011d1a:	4b4d      	ldr	r3, [pc, #308]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d1c:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011d1e:	4b4c      	ldr	r3, [pc, #304]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d20:	7c5b      	ldrb	r3, [r3, #17]
 8011d22:	f043 0301 	orr.w	r3, r3, #1
 8011d26:	b2da      	uxtb	r2, r3
 8011d28:	4b49      	ldr	r3, [pc, #292]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d2a:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011d2c:	4b48      	ldr	r3, [pc, #288]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d2e:	7c5b      	ldrb	r3, [r3, #17]
 8011d30:	f043 0302 	orr.w	r3, r3, #2
 8011d34:	b2da      	uxtb	r2, r3
 8011d36:	4b46      	ldr	r3, [pc, #280]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d38:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011d3a:	4b45      	ldr	r3, [pc, #276]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d3c:	789b      	ldrb	r3, [r3, #2]
 8011d3e:	f043 0301 	orr.w	r3, r3, #1
 8011d42:	b2da      	uxtb	r2, r3
 8011d44:	4b42      	ldr	r3, [pc, #264]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d46:	709a      	strb	r2, [r3, #2]
        break;
 8011d48:	e079      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case LIN_5:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011d4a:	4b41      	ldr	r3, [pc, #260]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d4c:	7b1b      	ldrb	r3, [r3, #12]
 8011d4e:	f043 0301 	orr.w	r3, r3, #1
 8011d52:	b2da      	uxtb	r2, r3
 8011d54:	4b3e      	ldr	r3, [pc, #248]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d56:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011d58:	4b3d      	ldr	r3, [pc, #244]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d5a:	7b1b      	ldrb	r3, [r3, #12]
 8011d5c:	f043 0302 	orr.w	r3, r3, #2
 8011d60:	b2da      	uxtb	r2, r3
 8011d62:	4b3b      	ldr	r3, [pc, #236]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d64:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011d66:	4b3a      	ldr	r3, [pc, #232]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d68:	7c5b      	ldrb	r3, [r3, #17]
 8011d6a:	f043 0302 	orr.w	r3, r3, #2
 8011d6e:	b2da      	uxtb	r2, r3
 8011d70:	4b37      	ldr	r3, [pc, #220]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d72:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011d74:	4b36      	ldr	r3, [pc, #216]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d76:	789b      	ldrb	r3, [r3, #2]
 8011d78:	f043 0301 	orr.w	r3, r3, #1
 8011d7c:	b2da      	uxtb	r2, r3
 8011d7e:	4b34      	ldr	r3, [pc, #208]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d80:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011d82:	4b33      	ldr	r3, [pc, #204]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d84:	79db      	ldrb	r3, [r3, #7]
 8011d86:	f043 0302 	orr.w	r3, r3, #2
 8011d8a:	b2da      	uxtb	r2, r3
 8011d8c:	4b30      	ldr	r3, [pc, #192]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d8e:	71da      	strb	r2, [r3, #7]
        break;
 8011d90:	e055      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        case HZ:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011d92:	4b2f      	ldr	r3, [pc, #188]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d94:	7bdb      	ldrb	r3, [r3, #15]
 8011d96:	f043 0320 	orr.w	r3, r3, #32
 8011d9a:	b2da      	uxtb	r2, r3
 8011d9c:	4b2c      	ldr	r3, [pc, #176]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011d9e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8011da0:	4b2b      	ldr	r3, [pc, #172]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011da2:	7bdb      	ldrb	r3, [r3, #15]
 8011da4:	f043 0308 	orr.w	r3, r3, #8
 8011da8:	b2da      	uxtb	r2, r3
 8011daa:	4b29      	ldr	r3, [pc, #164]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011dac:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011dae:	4b28      	ldr	r3, [pc, #160]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011db0:	7bdb      	ldrb	r3, [r3, #15]
 8011db2:	f043 0304 	orr.w	r3, r3, #4
 8011db6:	b2da      	uxtb	r2, r3
 8011db8:	4b25      	ldr	r3, [pc, #148]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011dba:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8011dbc:	4b24      	ldr	r3, [pc, #144]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	f043 0310 	orr.w	r3, r3, #16
 8011dc4:	b2da      	uxtb	r2, r3
 8011dc6:	4b22      	ldr	r3, [pc, #136]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011dc8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011dca:	4b21      	ldr	r3, [pc, #132]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	f043 0320 	orr.w	r3, r3, #32
 8011dd2:	b2da      	uxtb	r2, r3
 8011dd4:	4b1e      	ldr	r3, [pc, #120]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011dd6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8011dd8:	4b1d      	ldr	r3, [pc, #116]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	f043 0308 	orr.w	r3, r3, #8
 8011de0:	b2da      	uxtb	r2, r3
 8011de2:	4b1b      	ldr	r3, [pc, #108]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011de4:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011de6:	4b1a      	ldr	r3, [pc, #104]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011de8:	7b9b      	ldrb	r3, [r3, #14]
 8011dea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011dee:	b2da      	uxtb	r2, r3
 8011df0:	4b17      	ldr	r3, [pc, #92]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011df2:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_0);
 8011df4:	4b16      	ldr	r3, [pc, #88]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011df6:	7bdb      	ldrb	r3, [r3, #15]
 8011df8:	f043 0301 	orr.w	r3, r3, #1
 8011dfc:	b2da      	uxtb	r2, r3
 8011dfe:	4b14      	ldr	r3, [pc, #80]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011e00:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011e02:	4b13      	ldr	r3, [pc, #76]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011e04:	7cdb      	ldrb	r3, [r3, #19]
 8011e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e0a:	b2da      	uxtb	r2, r3
 8011e0c:	4b10      	ldr	r3, [pc, #64]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011e0e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011e10:	4b0f      	ldr	r3, [pc, #60]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011e12:	781b      	ldrb	r3, [r3, #0]
 8011e14:	f043 0301 	orr.w	r3, r3, #1
 8011e18:	b2da      	uxtb	r2, r3
 8011e1a:	4b0d      	ldr	r3, [pc, #52]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011e1c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_6);
 8011e1e:	4b0c      	ldr	r3, [pc, #48]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011e20:	791b      	ldrb	r3, [r3, #4]
 8011e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e26:	b2da      	uxtb	r2, r3
 8011e28:	4b09      	ldr	r3, [pc, #36]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011e2a:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011e2c:	4b08      	ldr	r3, [pc, #32]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011e2e:	795b      	ldrb	r3, [r3, #5]
 8011e30:	f043 0302 	orr.w	r3, r3, #2
 8011e34:	b2da      	uxtb	r2, r3
 8011e36:	4b06      	ldr	r3, [pc, #24]	; (8011e50 <lcd_set_symbol+0x6f8>)
 8011e38:	715a      	strb	r2, [r3, #5]
        break;
 8011e3a:	e000      	b.n	8011e3e <lcd_set_symbol+0x6e6>
        default:
        break;
 8011e3c:	bf00      	nop
    }

    pcf8553_blink(blink_speed);
 8011e3e:	79bb      	ldrb	r3, [r7, #6]
 8011e40:	4618      	mov	r0, r3
 8011e42:	f000 fb87 	bl	8012554 <pcf8553_blink>
}
 8011e46:	bf00      	nop
 8011e48:	3708      	adds	r7, #8
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}
 8011e4e:	bf00      	nop
 8011e50:	20001df0 	.word	0x20001df0

08011e54 <lcd_set_time_unit>:
 * pantalla LCD custom.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b082      	sub	sp, #8
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	460a      	mov	r2, r1
 8011e5e:	71fb      	strb	r3, [r7, #7]
 8011e60:	4613      	mov	r3, r2
 8011e62:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8011e64:	79fb      	ldrb	r3, [r7, #7]
 8011e66:	2b03      	cmp	r3, #3
 8011e68:	d82a      	bhi.n	8011ec0 <lcd_set_time_unit+0x6c>
 8011e6a:	a201      	add	r2, pc, #4	; (adr r2, 8011e70 <lcd_set_time_unit+0x1c>)
 8011e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e70:	08011e81 	.word	0x08011e81
 8011e74:	08011e91 	.word	0x08011e91
 8011e78:	08011ea1 	.word	0x08011ea1
 8011e7c:	08011eb1 	.word	0x08011eb1
    {
        case H:
            g_lcd_map[REG_5] |= (1 << BIT_6);
 8011e80:	4b14      	ldr	r3, [pc, #80]	; (8011ed4 <lcd_set_time_unit+0x80>)
 8011e82:	795b      	ldrb	r3, [r3, #5]
 8011e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e88:	b2da      	uxtb	r2, r3
 8011e8a:	4b12      	ldr	r3, [pc, #72]	; (8011ed4 <lcd_set_time_unit+0x80>)
 8011e8c:	715a      	strb	r2, [r3, #5]
        break;
 8011e8e:	e018      	b.n	8011ec2 <lcd_set_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] |= (1 << BIT_5);
 8011e90:	4b10      	ldr	r3, [pc, #64]	; (8011ed4 <lcd_set_time_unit+0x80>)
 8011e92:	7a5b      	ldrb	r3, [r3, #9]
 8011e94:	f043 0320 	orr.w	r3, r3, #32
 8011e98:	b2da      	uxtb	r2, r3
 8011e9a:	4b0e      	ldr	r3, [pc, #56]	; (8011ed4 <lcd_set_time_unit+0x80>)
 8011e9c:	725a      	strb	r2, [r3, #9]
        break;
 8011e9e:	e010      	b.n	8011ec2 <lcd_set_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] |= (1 << BIT_5);
 8011ea0:	4b0c      	ldr	r3, [pc, #48]	; (8011ed4 <lcd_set_time_unit+0x80>)
 8011ea2:	7a9b      	ldrb	r3, [r3, #10]
 8011ea4:	f043 0320 	orr.w	r3, r3, #32
 8011ea8:	b2da      	uxtb	r2, r3
 8011eaa:	4b0a      	ldr	r3, [pc, #40]	; (8011ed4 <lcd_set_time_unit+0x80>)
 8011eac:	729a      	strb	r2, [r3, #10]
        break;
 8011eae:	e008      	b.n	8011ec2 <lcd_set_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] |= (1 << BIT_7);
 8011eb0:	4b08      	ldr	r3, [pc, #32]	; (8011ed4 <lcd_set_time_unit+0x80>)
 8011eb2:	7a5b      	ldrb	r3, [r3, #9]
 8011eb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011eb8:	b2da      	uxtb	r2, r3
 8011eba:	4b06      	ldr	r3, [pc, #24]	; (8011ed4 <lcd_set_time_unit+0x80>)
 8011ebc:	725a      	strb	r2, [r3, #9]
        break;
 8011ebe:	e000      	b.n	8011ec2 <lcd_set_time_unit+0x6e>
        default:
        break;
 8011ec0:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8011ec2:	79bb      	ldrb	r3, [r7, #6]
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f000 fb45 	bl	8012554 <pcf8553_blink>
}
 8011eca:	bf00      	nop
 8011ecc:	3708      	adds	r7, #8
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	20001df0 	.word	0x20001df0

08011ed8 <lcd_set_vol_unit>:
 * @brief Función que imprime la unidad de volumen a utilizar.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	4603      	mov	r3, r0
 8011ee0:	460a      	mov	r2, r1
 8011ee2:	71fb      	strb	r3, [r7, #7]
 8011ee4:	4613      	mov	r3, r2
 8011ee6:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8011ee8:	79fb      	ldrb	r3, [r7, #7]
 8011eea:	2b07      	cmp	r3, #7
 8011eec:	f200 822c 	bhi.w	8012348 <lcd_set_vol_unit+0x470>
 8011ef0:	a201      	add	r2, pc, #4	; (adr r2, 8011ef8 <lcd_set_vol_unit+0x20>)
 8011ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ef6:	bf00      	nop
 8011ef8:	08011f19 	.word	0x08011f19
 8011efc:	0801200b 	.word	0x0801200b
 8011f00:	080120b5 	.word	0x080120b5
 8011f04:	08011f6f 	.word	0x08011f6f
 8011f08:	0801220f 	.word	0x0801220f
 8011f0c:	08012149 	.word	0x08012149
 8011f10:	0801228f 	.word	0x0801228f
 8011f14:	0801230f 	.word	0x0801230f
    {
        case LT:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011f18:	4b8a      	ldr	r3, [pc, #552]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f1a:	7bdb      	ldrb	r3, [r3, #15]
 8011f1c:	f043 0320 	orr.w	r3, r3, #32
 8011f20:	b2da      	uxtb	r2, r3
 8011f22:	4b88      	ldr	r3, [pc, #544]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f24:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011f26:	4b87      	ldr	r3, [pc, #540]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	f043 0320 	orr.w	r3, r3, #32
 8011f2e:	b2da      	uxtb	r2, r3
 8011f30:	4b84      	ldr	r3, [pc, #528]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f32:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8011f34:	4b83      	ldr	r3, [pc, #524]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f36:	795b      	ldrb	r3, [r3, #5]
 8011f38:	f043 0320 	orr.w	r3, r3, #32
 8011f3c:	b2da      	uxtb	r2, r3
 8011f3e:	4b81      	ldr	r3, [pc, #516]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f40:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011f42:	4b80      	ldr	r3, [pc, #512]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f44:	7b9b      	ldrb	r3, [r3, #14]
 8011f46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011f4a:	b2da      	uxtb	r2, r3
 8011f4c:	4b7d      	ldr	r3, [pc, #500]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f4e:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] |= (1 << BIT_0);
 8011f50:	4b7c      	ldr	r3, [pc, #496]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f52:	7a9b      	ldrb	r3, [r3, #10]
 8011f54:	f043 0301 	orr.w	r3, r3, #1
 8011f58:	b2da      	uxtb	r2, r3
 8011f5a:	4b7a      	ldr	r3, [pc, #488]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f5c:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] |= (1 << BIT_6);
 8011f5e:	4b79      	ldr	r3, [pc, #484]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f60:	7a5b      	ldrb	r3, [r3, #9]
 8011f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f66:	b2da      	uxtb	r2, r3
 8011f68:	4b76      	ldr	r3, [pc, #472]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f6a:	725a      	strb	r2, [r3, #9]
        break;
 8011f6c:	e1ed      	b.n	801234a <lcd_set_vol_unit+0x472>
        case KG:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011f6e:	4b75      	ldr	r3, [pc, #468]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f70:	7bdb      	ldrb	r3, [r3, #15]
 8011f72:	f043 0320 	orr.w	r3, r3, #32
 8011f76:	b2da      	uxtb	r2, r3
 8011f78:	4b72      	ldr	r3, [pc, #456]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f7a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011f7c:	4b71      	ldr	r3, [pc, #452]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f7e:	7bdb      	ldrb	r3, [r3, #15]
 8011f80:	f043 0310 	orr.w	r3, r3, #16
 8011f84:	b2da      	uxtb	r2, r3
 8011f86:	4b6f      	ldr	r3, [pc, #444]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f88:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011f8a:	4b6e      	ldr	r3, [pc, #440]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f8c:	7bdb      	ldrb	r3, [r3, #15]
 8011f8e:	f043 0304 	orr.w	r3, r3, #4
 8011f92:	b2da      	uxtb	r2, r3
 8011f94:	4b6b      	ldr	r3, [pc, #428]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f96:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011f98:	4b6a      	ldr	r3, [pc, #424]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	f043 0320 	orr.w	r3, r3, #32
 8011fa0:	b2da      	uxtb	r2, r3
 8011fa2:	4b68      	ldr	r3, [pc, #416]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011fa4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011fa6:	4b67      	ldr	r3, [pc, #412]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011fa8:	795b      	ldrb	r3, [r3, #5]
 8011faa:	f043 0310 	orr.w	r3, r3, #16
 8011fae:	b2da      	uxtb	r2, r3
 8011fb0:	4b64      	ldr	r3, [pc, #400]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011fb2:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011fb4:	4b63      	ldr	r3, [pc, #396]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011fb6:	7b9b      	ldrb	r3, [r3, #14]
 8011fb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011fbc:	b2da      	uxtb	r2, r3
 8011fbe:	4b61      	ldr	r3, [pc, #388]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011fc0:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011fc2:	4b60      	ldr	r3, [pc, #384]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011fc4:	7bdb      	ldrb	r3, [r3, #15]
 8011fc6:	f043 0302 	orr.w	r3, r3, #2
 8011fca:	b2da      	uxtb	r2, r3
 8011fcc:	4b5d      	ldr	r3, [pc, #372]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011fce:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011fd0:	4b5c      	ldr	r3, [pc, #368]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011fd2:	781b      	ldrb	r3, [r3, #0]
 8011fd4:	f043 0301 	orr.w	r3, r3, #1
 8011fd8:	b2da      	uxtb	r2, r3
 8011fda:	4b5a      	ldr	r3, [pc, #360]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011fdc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011fde:	4b59      	ldr	r3, [pc, #356]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	f043 0302 	orr.w	r3, r3, #2
 8011fe6:	b2da      	uxtb	r2, r3
 8011fe8:	4b56      	ldr	r3, [pc, #344]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011fea:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011fec:	4b55      	ldr	r3, [pc, #340]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011fee:	791b      	ldrb	r3, [r3, #4]
 8011ff0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ff4:	b2da      	uxtb	r2, r3
 8011ff6:	4b53      	ldr	r3, [pc, #332]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011ff8:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011ffa:	4b52      	ldr	r3, [pc, #328]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8011ffc:	795b      	ldrb	r3, [r3, #5]
 8011ffe:	f043 0302 	orr.w	r3, r3, #2
 8012002:	b2da      	uxtb	r2, r3
 8012004:	4b4f      	ldr	r3, [pc, #316]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012006:	715a      	strb	r2, [r3, #5]
        break;
 8012008:	e19f      	b.n	801234a <lcd_set_vol_unit+0x472>
        case M3:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 801200a:	4b4e      	ldr	r3, [pc, #312]	; (8012144 <lcd_set_vol_unit+0x26c>)
 801200c:	7bdb      	ldrb	r3, [r3, #15]
 801200e:	f043 0320 	orr.w	r3, r3, #32
 8012012:	b2da      	uxtb	r2, r3
 8012014:	4b4b      	ldr	r3, [pc, #300]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012016:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 8012018:	4b4a      	ldr	r3, [pc, #296]	; (8012144 <lcd_set_vol_unit+0x26c>)
 801201a:	7a9b      	ldrb	r3, [r3, #10]
 801201c:	f043 0304 	orr.w	r3, r3, #4
 8012020:	b2da      	uxtb	r2, r3
 8012022:	4b48      	ldr	r3, [pc, #288]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012024:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8012026:	4b47      	ldr	r3, [pc, #284]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012028:	7bdb      	ldrb	r3, [r3, #15]
 801202a:	f043 0310 	orr.w	r3, r3, #16
 801202e:	b2da      	uxtb	r2, r3
 8012030:	4b44      	ldr	r3, [pc, #272]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012032:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8012034:	4b43      	ldr	r3, [pc, #268]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012036:	7bdb      	ldrb	r3, [r3, #15]
 8012038:	f043 0308 	orr.w	r3, r3, #8
 801203c:	b2da      	uxtb	r2, r3
 801203e:	4b41      	ldr	r3, [pc, #260]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012040:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8012042:	4b40      	ldr	r3, [pc, #256]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012044:	781b      	ldrb	r3, [r3, #0]
 8012046:	f043 0320 	orr.w	r3, r3, #32
 801204a:	b2da      	uxtb	r2, r3
 801204c:	4b3d      	ldr	r3, [pc, #244]	; (8012144 <lcd_set_vol_unit+0x26c>)
 801204e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8012050:	4b3c      	ldr	r3, [pc, #240]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012052:	781b      	ldrb	r3, [r3, #0]
 8012054:	f043 0308 	orr.w	r3, r3, #8
 8012058:	b2da      	uxtb	r2, r3
 801205a:	4b3a      	ldr	r3, [pc, #232]	; (8012144 <lcd_set_vol_unit+0x26c>)
 801205c:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 801205e:	4b39      	ldr	r3, [pc, #228]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012060:	7b9b      	ldrb	r3, [r3, #14]
 8012062:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012066:	b2da      	uxtb	r2, r3
 8012068:	4b36      	ldr	r3, [pc, #216]	; (8012144 <lcd_set_vol_unit+0x26c>)
 801206a:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 801206c:	4b35      	ldr	r3, [pc, #212]	; (8012144 <lcd_set_vol_unit+0x26c>)
 801206e:	7cdb      	ldrb	r3, [r3, #19]
 8012070:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012074:	b2da      	uxtb	r2, r3
 8012076:	4b33      	ldr	r3, [pc, #204]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012078:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 801207a:	4b32      	ldr	r3, [pc, #200]	; (8012144 <lcd_set_vol_unit+0x26c>)
 801207c:	7cdb      	ldrb	r3, [r3, #19]
 801207e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012082:	b2da      	uxtb	r2, r3
 8012084:	4b2f      	ldr	r3, [pc, #188]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012086:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8012088:	4b2e      	ldr	r3, [pc, #184]	; (8012144 <lcd_set_vol_unit+0x26c>)
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	f043 0301 	orr.w	r3, r3, #1
 8012090:	b2da      	uxtb	r2, r3
 8012092:	4b2c      	ldr	r3, [pc, #176]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012094:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8012096:	4b2b      	ldr	r3, [pc, #172]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012098:	791b      	ldrb	r3, [r3, #4]
 801209a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801209e:	b2da      	uxtb	r2, r3
 80120a0:	4b28      	ldr	r3, [pc, #160]	; (8012144 <lcd_set_vol_unit+0x26c>)
 80120a2:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 80120a4:	4b27      	ldr	r3, [pc, #156]	; (8012144 <lcd_set_vol_unit+0x26c>)
 80120a6:	795b      	ldrb	r3, [r3, #5]
 80120a8:	f043 0302 	orr.w	r3, r3, #2
 80120ac:	b2da      	uxtb	r2, r3
 80120ae:	4b25      	ldr	r3, [pc, #148]	; (8012144 <lcd_set_vol_unit+0x26c>)
 80120b0:	715a      	strb	r2, [r3, #5]
        break;
 80120b2:	e14a      	b.n	801234a <lcd_set_vol_unit+0x472>
        case MC:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80120b4:	4b23      	ldr	r3, [pc, #140]	; (8012144 <lcd_set_vol_unit+0x26c>)
 80120b6:	7bdb      	ldrb	r3, [r3, #15]
 80120b8:	f043 0320 	orr.w	r3, r3, #32
 80120bc:	b2da      	uxtb	r2, r3
 80120be:	4b21      	ldr	r3, [pc, #132]	; (8012144 <lcd_set_vol_unit+0x26c>)
 80120c0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 80120c2:	4b20      	ldr	r3, [pc, #128]	; (8012144 <lcd_set_vol_unit+0x26c>)
 80120c4:	7a9b      	ldrb	r3, [r3, #10]
 80120c6:	f043 0304 	orr.w	r3, r3, #4
 80120ca:	b2da      	uxtb	r2, r3
 80120cc:	4b1d      	ldr	r3, [pc, #116]	; (8012144 <lcd_set_vol_unit+0x26c>)
 80120ce:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 80120d0:	4b1c      	ldr	r3, [pc, #112]	; (8012144 <lcd_set_vol_unit+0x26c>)
 80120d2:	7bdb      	ldrb	r3, [r3, #15]
 80120d4:	f043 0310 	orr.w	r3, r3, #16
 80120d8:	b2da      	uxtb	r2, r3
 80120da:	4b1a      	ldr	r3, [pc, #104]	; (8012144 <lcd_set_vol_unit+0x26c>)
 80120dc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 80120de:	4b19      	ldr	r3, [pc, #100]	; (8012144 <lcd_set_vol_unit+0x26c>)
 80120e0:	7bdb      	ldrb	r3, [r3, #15]
 80120e2:	f043 0308 	orr.w	r3, r3, #8
 80120e6:	b2da      	uxtb	r2, r3
 80120e8:	4b16      	ldr	r3, [pc, #88]	; (8012144 <lcd_set_vol_unit+0x26c>)
 80120ea:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80120ec:	4b15      	ldr	r3, [pc, #84]	; (8012144 <lcd_set_vol_unit+0x26c>)
 80120ee:	781b      	ldrb	r3, [r3, #0]
 80120f0:	f043 0320 	orr.w	r3, r3, #32
 80120f4:	b2da      	uxtb	r2, r3
 80120f6:	4b13      	ldr	r3, [pc, #76]	; (8012144 <lcd_set_vol_unit+0x26c>)
 80120f8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 80120fa:	4b12      	ldr	r3, [pc, #72]	; (8012144 <lcd_set_vol_unit+0x26c>)
 80120fc:	781b      	ldrb	r3, [r3, #0]
 80120fe:	f043 0308 	orr.w	r3, r3, #8
 8012102:	b2da      	uxtb	r2, r3
 8012104:	4b0f      	ldr	r3, [pc, #60]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012106:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8012108:	4b0e      	ldr	r3, [pc, #56]	; (8012144 <lcd_set_vol_unit+0x26c>)
 801210a:	7b9b      	ldrb	r3, [r3, #14]
 801210c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012110:	b2da      	uxtb	r2, r3
 8012112:	4b0c      	ldr	r3, [pc, #48]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012114:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012116:	4b0b      	ldr	r3, [pc, #44]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012118:	7bdb      	ldrb	r3, [r3, #15]
 801211a:	f043 0302 	orr.w	r3, r3, #2
 801211e:	b2da      	uxtb	r2, r3
 8012120:	4b08      	ldr	r3, [pc, #32]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012122:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012124:	4b07      	ldr	r3, [pc, #28]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	f043 0302 	orr.w	r3, r3, #2
 801212c:	b2da      	uxtb	r2, r3
 801212e:	4b05      	ldr	r3, [pc, #20]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012130:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8012132:	4b04      	ldr	r3, [pc, #16]	; (8012144 <lcd_set_vol_unit+0x26c>)
 8012134:	795b      	ldrb	r3, [r3, #5]
 8012136:	f043 0302 	orr.w	r3, r3, #2
 801213a:	b2da      	uxtb	r2, r3
 801213c:	4b01      	ldr	r3, [pc, #4]	; (8012144 <lcd_set_vol_unit+0x26c>)
 801213e:	715a      	strb	r2, [r3, #5]
        break;
 8012140:	e103      	b.n	801234a <lcd_set_vol_unit+0x472>
 8012142:	bf00      	nop
 8012144:	20001df0 	.word	0x20001df0
        case BR:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 8012148:	4b84      	ldr	r3, [pc, #528]	; (801235c <lcd_set_vol_unit+0x484>)
 801214a:	7a9b      	ldrb	r3, [r3, #10]
 801214c:	f043 0308 	orr.w	r3, r3, #8
 8012150:	b2da      	uxtb	r2, r3
 8012152:	4b82      	ldr	r3, [pc, #520]	; (801235c <lcd_set_vol_unit+0x484>)
 8012154:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] |= (1 << BIT_4);
 8012156:	4b81      	ldr	r3, [pc, #516]	; (801235c <lcd_set_vol_unit+0x484>)
 8012158:	7a9b      	ldrb	r3, [r3, #10]
 801215a:	f043 0310 	orr.w	r3, r3, #16
 801215e:	b2da      	uxtb	r2, r3
 8012160:	4b7e      	ldr	r3, [pc, #504]	; (801235c <lcd_set_vol_unit+0x484>)
 8012162:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8012164:	4b7d      	ldr	r3, [pc, #500]	; (801235c <lcd_set_vol_unit+0x484>)
 8012166:	7bdb      	ldrb	r3, [r3, #15]
 8012168:	f043 0308 	orr.w	r3, r3, #8
 801216c:	b2da      	uxtb	r2, r3
 801216e:	4b7b      	ldr	r3, [pc, #492]	; (801235c <lcd_set_vol_unit+0x484>)
 8012170:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8012172:	4b7a      	ldr	r3, [pc, #488]	; (801235c <lcd_set_vol_unit+0x484>)
 8012174:	781b      	ldrb	r3, [r3, #0]
 8012176:	f043 0310 	orr.w	r3, r3, #16
 801217a:	b2da      	uxtb	r2, r3
 801217c:	4b77      	ldr	r3, [pc, #476]	; (801235c <lcd_set_vol_unit+0x484>)
 801217e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_2);
 8012180:	4b76      	ldr	r3, [pc, #472]	; (801235c <lcd_set_vol_unit+0x484>)
 8012182:	795b      	ldrb	r3, [r3, #5]
 8012184:	f043 0304 	orr.w	r3, r3, #4
 8012188:	b2da      	uxtb	r2, r3
 801218a:	4b74      	ldr	r3, [pc, #464]	; (801235c <lcd_set_vol_unit+0x484>)
 801218c:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 801218e:	4b73      	ldr	r3, [pc, #460]	; (801235c <lcd_set_vol_unit+0x484>)
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	f043 0308 	orr.w	r3, r3, #8
 8012196:	b2da      	uxtb	r2, r3
 8012198:	4b70      	ldr	r3, [pc, #448]	; (801235c <lcd_set_vol_unit+0x484>)
 801219a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 801219c:	4b6f      	ldr	r3, [pc, #444]	; (801235c <lcd_set_vol_unit+0x484>)
 801219e:	795b      	ldrb	r3, [r3, #5]
 80121a0:	f043 0320 	orr.w	r3, r3, #32
 80121a4:	b2da      	uxtb	r2, r3
 80121a6:	4b6d      	ldr	r3, [pc, #436]	; (801235c <lcd_set_vol_unit+0x484>)
 80121a8:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 80121aa:	4b6c      	ldr	r3, [pc, #432]	; (801235c <lcd_set_vol_unit+0x484>)
 80121ac:	7b9b      	ldrb	r3, [r3, #14]
 80121ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80121b2:	b2da      	uxtb	r2, r3
 80121b4:	4b69      	ldr	r3, [pc, #420]	; (801235c <lcd_set_vol_unit+0x484>)
 80121b6:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 80121b8:	4b68      	ldr	r3, [pc, #416]	; (801235c <lcd_set_vol_unit+0x484>)
 80121ba:	7bdb      	ldrb	r3, [r3, #15]
 80121bc:	f043 0302 	orr.w	r3, r3, #2
 80121c0:	b2da      	uxtb	r2, r3
 80121c2:	4b66      	ldr	r3, [pc, #408]	; (801235c <lcd_set_vol_unit+0x484>)
 80121c4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 80121c6:	4b65      	ldr	r3, [pc, #404]	; (801235c <lcd_set_vol_unit+0x484>)
 80121c8:	7cdb      	ldrb	r3, [r3, #19]
 80121ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80121ce:	b2da      	uxtb	r2, r3
 80121d0:	4b62      	ldr	r3, [pc, #392]	; (801235c <lcd_set_vol_unit+0x484>)
 80121d2:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 80121d4:	4b61      	ldr	r3, [pc, #388]	; (801235c <lcd_set_vol_unit+0x484>)
 80121d6:	7cdb      	ldrb	r3, [r3, #19]
 80121d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121dc:	b2da      	uxtb	r2, r3
 80121de:	4b5f      	ldr	r3, [pc, #380]	; (801235c <lcd_set_vol_unit+0x484>)
 80121e0:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 80121e2:	4b5e      	ldr	r3, [pc, #376]	; (801235c <lcd_set_vol_unit+0x484>)
 80121e4:	781b      	ldrb	r3, [r3, #0]
 80121e6:	f043 0301 	orr.w	r3, r3, #1
 80121ea:	b2da      	uxtb	r2, r3
 80121ec:	4b5b      	ldr	r3, [pc, #364]	; (801235c <lcd_set_vol_unit+0x484>)
 80121ee:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80121f0:	4b5a      	ldr	r3, [pc, #360]	; (801235c <lcd_set_vol_unit+0x484>)
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	f043 0302 	orr.w	r3, r3, #2
 80121f8:	b2da      	uxtb	r2, r3
 80121fa:	4b58      	ldr	r3, [pc, #352]	; (801235c <lcd_set_vol_unit+0x484>)
 80121fc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_0);
 80121fe:	4b57      	ldr	r3, [pc, #348]	; (801235c <lcd_set_vol_unit+0x484>)
 8012200:	795b      	ldrb	r3, [r3, #5]
 8012202:	f043 0301 	orr.w	r3, r3, #1
 8012206:	b2da      	uxtb	r2, r3
 8012208:	4b54      	ldr	r3, [pc, #336]	; (801235c <lcd_set_vol_unit+0x484>)
 801220a:	715a      	strb	r2, [r3, #5]
        break;
 801220c:	e09d      	b.n	801234a <lcd_set_vol_unit+0x472>
        case GL:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 801220e:	4b53      	ldr	r3, [pc, #332]	; (801235c <lcd_set_vol_unit+0x484>)
 8012210:	7a9b      	ldrb	r3, [r3, #10]
 8012212:	f043 0308 	orr.w	r3, r3, #8
 8012216:	b2da      	uxtb	r2, r3
 8012218:	4b50      	ldr	r3, [pc, #320]	; (801235c <lcd_set_vol_unit+0x484>)
 801221a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 801221c:	4b4f      	ldr	r3, [pc, #316]	; (801235c <lcd_set_vol_unit+0x484>)
 801221e:	7bdb      	ldrb	r3, [r3, #15]
 8012220:	f043 0320 	orr.w	r3, r3, #32
 8012224:	b2da      	uxtb	r2, r3
 8012226:	4b4d      	ldr	r3, [pc, #308]	; (801235c <lcd_set_vol_unit+0x484>)
 8012228:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 801222a:	4b4c      	ldr	r3, [pc, #304]	; (801235c <lcd_set_vol_unit+0x484>)
 801222c:	781b      	ldrb	r3, [r3, #0]
 801222e:	f043 0310 	orr.w	r3, r3, #16
 8012232:	b2da      	uxtb	r2, r3
 8012234:	4b49      	ldr	r3, [pc, #292]	; (801235c <lcd_set_vol_unit+0x484>)
 8012236:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8012238:	4b48      	ldr	r3, [pc, #288]	; (801235c <lcd_set_vol_unit+0x484>)
 801223a:	781b      	ldrb	r3, [r3, #0]
 801223c:	f043 0320 	orr.w	r3, r3, #32
 8012240:	b2da      	uxtb	r2, r3
 8012242:	4b46      	ldr	r3, [pc, #280]	; (801235c <lcd_set_vol_unit+0x484>)
 8012244:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8012246:	4b45      	ldr	r3, [pc, #276]	; (801235c <lcd_set_vol_unit+0x484>)
 8012248:	781b      	ldrb	r3, [r3, #0]
 801224a:	f043 0308 	orr.w	r3, r3, #8
 801224e:	b2da      	uxtb	r2, r3
 8012250:	4b42      	ldr	r3, [pc, #264]	; (801235c <lcd_set_vol_unit+0x484>)
 8012252:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8012254:	4b41      	ldr	r3, [pc, #260]	; (801235c <lcd_set_vol_unit+0x484>)
 8012256:	795b      	ldrb	r3, [r3, #5]
 8012258:	f043 0320 	orr.w	r3, r3, #32
 801225c:	b2da      	uxtb	r2, r3
 801225e:	4b3f      	ldr	r3, [pc, #252]	; (801235c <lcd_set_vol_unit+0x484>)
 8012260:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012262:	4b3e      	ldr	r3, [pc, #248]	; (801235c <lcd_set_vol_unit+0x484>)
 8012264:	7bdb      	ldrb	r3, [r3, #15]
 8012266:	f043 0302 	orr.w	r3, r3, #2
 801226a:	b2da      	uxtb	r2, r3
 801226c:	4b3b      	ldr	r3, [pc, #236]	; (801235c <lcd_set_vol_unit+0x484>)
 801226e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012270:	4b3a      	ldr	r3, [pc, #232]	; (801235c <lcd_set_vol_unit+0x484>)
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	f043 0302 	orr.w	r3, r3, #2
 8012278:	b2da      	uxtb	r2, r3
 801227a:	4b38      	ldr	r3, [pc, #224]	; (801235c <lcd_set_vol_unit+0x484>)
 801227c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 801227e:	4b37      	ldr	r3, [pc, #220]	; (801235c <lcd_set_vol_unit+0x484>)
 8012280:	795b      	ldrb	r3, [r3, #5]
 8012282:	f043 0302 	orr.w	r3, r3, #2
 8012286:	b2da      	uxtb	r2, r3
 8012288:	4b34      	ldr	r3, [pc, #208]	; (801235c <lcd_set_vol_unit+0x484>)
 801228a:	715a      	strb	r2, [r3, #5]
        break;
 801228c:	e05d      	b.n	801234a <lcd_set_vol_unit+0x472>
        case CELSIUS:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 801228e:	4b33      	ldr	r3, [pc, #204]	; (801235c <lcd_set_vol_unit+0x484>)
 8012290:	7a9b      	ldrb	r3, [r3, #10]
 8012292:	f043 0308 	orr.w	r3, r3, #8
 8012296:	b2da      	uxtb	r2, r3
 8012298:	4b30      	ldr	r3, [pc, #192]	; (801235c <lcd_set_vol_unit+0x484>)
 801229a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 801229c:	4b2f      	ldr	r3, [pc, #188]	; (801235c <lcd_set_vol_unit+0x484>)
 801229e:	7bdb      	ldrb	r3, [r3, #15]
 80122a0:	f043 0320 	orr.w	r3, r3, #32
 80122a4:	b2da      	uxtb	r2, r3
 80122a6:	4b2d      	ldr	r3, [pc, #180]	; (801235c <lcd_set_vol_unit+0x484>)
 80122a8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 80122aa:	4b2c      	ldr	r3, [pc, #176]	; (801235c <lcd_set_vol_unit+0x484>)
 80122ac:	7bdb      	ldrb	r3, [r3, #15]
 80122ae:	f043 0308 	orr.w	r3, r3, #8
 80122b2:	b2da      	uxtb	r2, r3
 80122b4:	4b29      	ldr	r3, [pc, #164]	; (801235c <lcd_set_vol_unit+0x484>)
 80122b6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 80122b8:	4b28      	ldr	r3, [pc, #160]	; (801235c <lcd_set_vol_unit+0x484>)
 80122ba:	7bdb      	ldrb	r3, [r3, #15]
 80122bc:	f043 0304 	orr.w	r3, r3, #4
 80122c0:	b2da      	uxtb	r2, r3
 80122c2:	4b26      	ldr	r3, [pc, #152]	; (801235c <lcd_set_vol_unit+0x484>)
 80122c4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 80122c6:	4b25      	ldr	r3, [pc, #148]	; (801235c <lcd_set_vol_unit+0x484>)
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	f043 0310 	orr.w	r3, r3, #16
 80122ce:	b2da      	uxtb	r2, r3
 80122d0:	4b22      	ldr	r3, [pc, #136]	; (801235c <lcd_set_vol_unit+0x484>)
 80122d2:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 80122d4:	4b21      	ldr	r3, [pc, #132]	; (801235c <lcd_set_vol_unit+0x484>)
 80122d6:	7b9b      	ldrb	r3, [r3, #14]
 80122d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80122dc:	b2da      	uxtb	r2, r3
 80122de:	4b1f      	ldr	r3, [pc, #124]	; (801235c <lcd_set_vol_unit+0x484>)
 80122e0:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 80122e2:	4b1e      	ldr	r3, [pc, #120]	; (801235c <lcd_set_vol_unit+0x484>)
 80122e4:	7bdb      	ldrb	r3, [r3, #15]
 80122e6:	f043 0302 	orr.w	r3, r3, #2
 80122ea:	b2da      	uxtb	r2, r3
 80122ec:	4b1b      	ldr	r3, [pc, #108]	; (801235c <lcd_set_vol_unit+0x484>)
 80122ee:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80122f0:	4b1a      	ldr	r3, [pc, #104]	; (801235c <lcd_set_vol_unit+0x484>)
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	f043 0302 	orr.w	r3, r3, #2
 80122f8:	b2da      	uxtb	r2, r3
 80122fa:	4b18      	ldr	r3, [pc, #96]	; (801235c <lcd_set_vol_unit+0x484>)
 80122fc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 80122fe:	4b17      	ldr	r3, [pc, #92]	; (801235c <lcd_set_vol_unit+0x484>)
 8012300:	795b      	ldrb	r3, [r3, #5]
 8012302:	f043 0302 	orr.w	r3, r3, #2
 8012306:	b2da      	uxtb	r2, r3
 8012308:	4b14      	ldr	r3, [pc, #80]	; (801235c <lcd_set_vol_unit+0x484>)
 801230a:	715a      	strb	r2, [r3, #5]
        break;
 801230c:	e01d      	b.n	801234a <lcd_set_vol_unit+0x472>
        case NOTHING:
            g_lcd_map[REG_15] |= (1 << BIT_2);
 801230e:	4b13      	ldr	r3, [pc, #76]	; (801235c <lcd_set_vol_unit+0x484>)
 8012310:	7bdb      	ldrb	r3, [r3, #15]
 8012312:	f043 0304 	orr.w	r3, r3, #4
 8012316:	b2da      	uxtb	r2, r3
 8012318:	4b10      	ldr	r3, [pc, #64]	; (801235c <lcd_set_vol_unit+0x484>)
 801231a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 801231c:	4b0f      	ldr	r3, [pc, #60]	; (801235c <lcd_set_vol_unit+0x484>)
 801231e:	781b      	ldrb	r3, [r3, #0]
 8012320:	f043 0310 	orr.w	r3, r3, #16
 8012324:	b2da      	uxtb	r2, r3
 8012326:	4b0d      	ldr	r3, [pc, #52]	; (801235c <lcd_set_vol_unit+0x484>)
 8012328:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 801232a:	4b0c      	ldr	r3, [pc, #48]	; (801235c <lcd_set_vol_unit+0x484>)
 801232c:	7cdb      	ldrb	r3, [r3, #19]
 801232e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012332:	b2da      	uxtb	r2, r3
 8012334:	4b09      	ldr	r3, [pc, #36]	; (801235c <lcd_set_vol_unit+0x484>)
 8012336:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8012338:	4b08      	ldr	r3, [pc, #32]	; (801235c <lcd_set_vol_unit+0x484>)
 801233a:	781b      	ldrb	r3, [r3, #0]
 801233c:	f043 0301 	orr.w	r3, r3, #1
 8012340:	b2da      	uxtb	r2, r3
 8012342:	4b06      	ldr	r3, [pc, #24]	; (801235c <lcd_set_vol_unit+0x484>)
 8012344:	701a      	strb	r2, [r3, #0]
        break;
 8012346:	e000      	b.n	801234a <lcd_set_vol_unit+0x472>
        default:
        break;
 8012348:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 801234a:	79bb      	ldrb	r3, [r7, #6]
 801234c:	4618      	mov	r0, r3
 801234e:	f000 f901 	bl	8012554 <pcf8553_blink>
}
 8012352:	bf00      	nop
 8012354:	3708      	adds	r7, #8
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
 801235a:	bf00      	nop
 801235c:	20001df0 	.word	0x20001df0

08012360 <lcd_write_line>:
 * la primera posicion de cada linea.
 * @param
 * @retval None
 */
void lcd_write_line(uint8_t seg, uint8_t data)
{
 8012360:	b480      	push	{r7}
 8012362:	b085      	sub	sp, #20
 8012364:	af00      	add	r7, sp, #0
 8012366:	4603      	mov	r3, r0
 8012368:	460a      	mov	r2, r1
 801236a:	71fb      	strb	r3, [r7, #7]
 801236c:	4613      	mov	r3, r2
 801236e:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = 0;
 8012370:	2300      	movs	r3, #0
 8012372:	73fb      	strb	r3, [r7, #15]
    uint8_t pos = 0;
 8012374:	2300      	movs	r3, #0
 8012376:	73bb      	strb	r3, [r7, #14]

    /*
     *
     *
     */
    switch (g_row)
 8012378:	4b33      	ldr	r3, [pc, #204]	; (8012448 <lcd_write_line+0xe8>)
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	2b01      	cmp	r3, #1
 801237e:	d002      	beq.n	8012386 <lcd_write_line+0x26>
 8012380:	2b02      	cmp	r3, #2
 8012382:	d01b      	beq.n	80123bc <lcd_write_line+0x5c>
            pos += g_col * 2;
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
            pos = pos % 8; // @suppress("Avoid magic numbers")
        break;
        default:
        break;
 8012384:	e035      	b.n	80123f2 <lcd_write_line+0x92>
            pos = octal_1[seg].pos;
 8012386:	79fb      	ldrb	r3, [r7, #7]
 8012388:	4a30      	ldr	r2, [pc, #192]	; (801244c <lcd_write_line+0xec>)
 801238a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 801238e:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 8012390:	4b2f      	ldr	r3, [pc, #188]	; (8012450 <lcd_write_line+0xf0>)
 8012392:	781b      	ldrb	r3, [r3, #0]
 8012394:	005b      	lsls	r3, r3, #1
 8012396:	b2da      	uxtb	r2, r3
 8012398:	7bbb      	ldrb	r3, [r7, #14]
 801239a:	4413      	add	r3, r2
 801239c:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_1[seg].reg; // @suppress("Avoid magic numbers")
 801239e:	7bbb      	ldrb	r3, [r7, #14]
 80123a0:	08db      	lsrs	r3, r3, #3
 80123a2:	b2da      	uxtb	r2, r3
 80123a4:	79fb      	ldrb	r3, [r7, #7]
 80123a6:	4929      	ldr	r1, [pc, #164]	; (801244c <lcd_write_line+0xec>)
 80123a8:	005b      	lsls	r3, r3, #1
 80123aa:	440b      	add	r3, r1
 80123ac:	785b      	ldrb	r3, [r3, #1]
 80123ae:	4413      	add	r3, r2
 80123b0:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 80123b2:	7bbb      	ldrb	r3, [r7, #14]
 80123b4:	f003 0307 	and.w	r3, r3, #7
 80123b8:	73bb      	strb	r3, [r7, #14]
        break;
 80123ba:	e01a      	b.n	80123f2 <lcd_write_line+0x92>
            pos = octal_2[seg].pos;
 80123bc:	79fb      	ldrb	r3, [r7, #7]
 80123be:	4a25      	ldr	r2, [pc, #148]	; (8012454 <lcd_write_line+0xf4>)
 80123c0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80123c4:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 80123c6:	4b22      	ldr	r3, [pc, #136]	; (8012450 <lcd_write_line+0xf0>)
 80123c8:	781b      	ldrb	r3, [r3, #0]
 80123ca:	005b      	lsls	r3, r3, #1
 80123cc:	b2da      	uxtb	r2, r3
 80123ce:	7bbb      	ldrb	r3, [r7, #14]
 80123d0:	4413      	add	r3, r2
 80123d2:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
 80123d4:	7bbb      	ldrb	r3, [r7, #14]
 80123d6:	08db      	lsrs	r3, r3, #3
 80123d8:	b2da      	uxtb	r2, r3
 80123da:	79fb      	ldrb	r3, [r7, #7]
 80123dc:	491d      	ldr	r1, [pc, #116]	; (8012454 <lcd_write_line+0xf4>)
 80123de:	005b      	lsls	r3, r3, #1
 80123e0:	440b      	add	r3, r1
 80123e2:	785b      	ldrb	r3, [r3, #1]
 80123e4:	4413      	add	r3, r2
 80123e6:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 80123e8:	7bbb      	ldrb	r3, [r7, #14]
 80123ea:	f003 0307 	and.w	r3, r3, #7
 80123ee:	73bb      	strb	r3, [r7, #14]
        break;
 80123f0:	bf00      	nop
    }

    if (data)
 80123f2:	79bb      	ldrb	r3, [r7, #6]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d00f      	beq.n	8012418 <lcd_write_line+0xb8>
    {
        g_lcd_map[reg] |= 1 << pos;
 80123f8:	7bfb      	ldrb	r3, [r7, #15]
 80123fa:	4a17      	ldr	r2, [pc, #92]	; (8012458 <lcd_write_line+0xf8>)
 80123fc:	5cd3      	ldrb	r3, [r2, r3]
 80123fe:	b25a      	sxtb	r2, r3
 8012400:	7bbb      	ldrb	r3, [r7, #14]
 8012402:	2101      	movs	r1, #1
 8012404:	fa01 f303 	lsl.w	r3, r1, r3
 8012408:	b25b      	sxtb	r3, r3
 801240a:	4313      	orrs	r3, r2
 801240c:	b25a      	sxtb	r2, r3
 801240e:	7bfb      	ldrb	r3, [r7, #15]
 8012410:	b2d1      	uxtb	r1, r2
 8012412:	4a11      	ldr	r2, [pc, #68]	; (8012458 <lcd_write_line+0xf8>)
 8012414:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        g_lcd_map[reg] &= ~(1 << pos);
    }
}
 8012416:	e010      	b.n	801243a <lcd_write_line+0xda>
        g_lcd_map[reg] &= ~(1 << pos);
 8012418:	7bfb      	ldrb	r3, [r7, #15]
 801241a:	4a0f      	ldr	r2, [pc, #60]	; (8012458 <lcd_write_line+0xf8>)
 801241c:	5cd3      	ldrb	r3, [r2, r3]
 801241e:	b25a      	sxtb	r2, r3
 8012420:	7bbb      	ldrb	r3, [r7, #14]
 8012422:	2101      	movs	r1, #1
 8012424:	fa01 f303 	lsl.w	r3, r1, r3
 8012428:	b25b      	sxtb	r3, r3
 801242a:	43db      	mvns	r3, r3
 801242c:	b25b      	sxtb	r3, r3
 801242e:	4013      	ands	r3, r2
 8012430:	b25a      	sxtb	r2, r3
 8012432:	7bfb      	ldrb	r3, [r7, #15]
 8012434:	b2d1      	uxtb	r1, r2
 8012436:	4a08      	ldr	r2, [pc, #32]	; (8012458 <lcd_write_line+0xf8>)
 8012438:	54d1      	strb	r1, [r2, r3]
}
 801243a:	bf00      	nop
 801243c:	3714      	adds	r7, #20
 801243e:	46bd      	mov	sp, r7
 8012440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012444:	4770      	bx	lr
 8012446:	bf00      	nop
 8012448:	20001d5d 	.word	0x20001d5d
 801244c:	20000120 	.word	0x20000120
 8012450:	20001d5c 	.word	0x20001d5c
 8012454:	20000130 	.word	0x20000130
 8012458:	20001df0 	.word	0x20001df0

0801245c <prepare_to_send>:
 * COM_0_ADDRESS
 * COM_1_ADDRESS
 *
 */
void static prepare_to_send(uint8_t add)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b084      	sub	sp, #16
 8012460:	af00      	add	r7, sp, #0
 8012462:	4603      	mov	r3, r0
 8012464:	71fb      	strb	r3, [r7, #7]
    register_address_t reg;
    reg.bits.address = add;
 8012466:	79fb      	ldrb	r3, [r7, #7]
 8012468:	f003 031f 	and.w	r3, r3, #31
 801246c:	b2da      	uxtb	r2, r3
 801246e:	7b3b      	ldrb	r3, [r7, #12]
 8012470:	f362 0304 	bfi	r3, r2, #0, #5
 8012474:	733b      	strb	r3, [r7, #12]
    reg.bits.not_used = 0;
 8012476:	7b3b      	ldrb	r3, [r7, #12]
 8012478:	f36f 1346 	bfc	r3, #5, #2
 801247c:	733b      	strb	r3, [r7, #12]
    reg.bits.read_write = WRITE_DATA;
 801247e:	7b3b      	ldrb	r3, [r7, #12]
 8012480:	f36f 13c7 	bfc	r3, #7, #1
 8012484:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(&h_spi1, &(reg.data), 1, DEFAULT_DELAY);
 8012486:	2314      	movs	r3, #20
 8012488:	f107 010c 	add.w	r1, r7, #12
 801248c:	2201      	movs	r2, #1
 801248e:	4803      	ldr	r0, [pc, #12]	; (801249c <prepare_to_send+0x40>)
 8012490:	f7f7 fa5a 	bl	8009948 <HAL_SPI_Transmit>
}
 8012494:	bf00      	nop
 8012496:	3710      	adds	r7, #16
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}
 801249c:	20001d60 	.word	0x20001d60

080124a0 <spi1_init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void spi1_init(void)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	af00      	add	r7, sp, #0
    h_spi1.Instance = SPI1;
 80124a4:	4b29      	ldr	r3, [pc, #164]	; (801254c <spi1_init+0xac>)
 80124a6:	4a2a      	ldr	r2, [pc, #168]	; (8012550 <spi1_init+0xb0>)
 80124a8:	601a      	str	r2, [r3, #0]
    h_spi1.Init.Mode = SPI_MODE_MASTER;
 80124aa:	4b28      	ldr	r3, [pc, #160]	; (801254c <spi1_init+0xac>)
 80124ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80124b0:	605a      	str	r2, [r3, #4]
    h_spi1.Init.Direction = SPI_DIRECTION_1LINE;
 80124b2:	4b26      	ldr	r3, [pc, #152]	; (801254c <spi1_init+0xac>)
 80124b4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80124b8:	609a      	str	r2, [r3, #8]
    h_spi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80124ba:	4b24      	ldr	r3, [pc, #144]	; (801254c <spi1_init+0xac>)
 80124bc:	2207      	movs	r2, #7
 80124be:	60da      	str	r2, [r3, #12]
    h_spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80124c0:	4b22      	ldr	r3, [pc, #136]	; (801254c <spi1_init+0xac>)
 80124c2:	2200      	movs	r2, #0
 80124c4:	611a      	str	r2, [r3, #16]
    h_spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80124c6:	4b21      	ldr	r3, [pc, #132]	; (801254c <spi1_init+0xac>)
 80124c8:	2200      	movs	r2, #0
 80124ca:	615a      	str	r2, [r3, #20]
    h_spi1.Init.NSS = SPI_NSS_SOFT;
 80124cc:	4b1f      	ldr	r3, [pc, #124]	; (801254c <spi1_init+0xac>)
 80124ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80124d2:	619a      	str	r2, [r3, #24]
    h_spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80124d4:	4b1d      	ldr	r3, [pc, #116]	; (801254c <spi1_init+0xac>)
 80124d6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80124da:	61da      	str	r2, [r3, #28]
    h_spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80124dc:	4b1b      	ldr	r3, [pc, #108]	; (801254c <spi1_init+0xac>)
 80124de:	2200      	movs	r2, #0
 80124e0:	621a      	str	r2, [r3, #32]
    h_spi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80124e2:	4b1a      	ldr	r3, [pc, #104]	; (801254c <spi1_init+0xac>)
 80124e4:	2200      	movs	r2, #0
 80124e6:	625a      	str	r2, [r3, #36]	; 0x24
    h_spi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80124e8:	4b18      	ldr	r3, [pc, #96]	; (801254c <spi1_init+0xac>)
 80124ea:	2200      	movs	r2, #0
 80124ec:	629a      	str	r2, [r3, #40]	; 0x28
    h_spi1.Init.CRCPolynomial = 7; // @suppress("Avoid magic numbers")
 80124ee:	4b17      	ldr	r3, [pc, #92]	; (801254c <spi1_init+0xac>)
 80124f0:	2207      	movs	r2, #7
 80124f2:	62da      	str	r2, [r3, #44]	; 0x2c
    h_spi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80124f4:	4b15      	ldr	r3, [pc, #84]	; (801254c <spi1_init+0xac>)
 80124f6:	2200      	movs	r2, #0
 80124f8:	631a      	str	r2, [r3, #48]	; 0x30
    h_spi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80124fa:	4b14      	ldr	r3, [pc, #80]	; (801254c <spi1_init+0xac>)
 80124fc:	2200      	movs	r2, #0
 80124fe:	635a      	str	r2, [r3, #52]	; 0x34
    h_spi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8012500:	4b12      	ldr	r3, [pc, #72]	; (801254c <spi1_init+0xac>)
 8012502:	2200      	movs	r2, #0
 8012504:	639a      	str	r2, [r3, #56]	; 0x38
    h_spi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8012506:	4b11      	ldr	r3, [pc, #68]	; (801254c <spi1_init+0xac>)
 8012508:	2200      	movs	r2, #0
 801250a:	63da      	str	r2, [r3, #60]	; 0x3c
    h_spi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 801250c:	4b0f      	ldr	r3, [pc, #60]	; (801254c <spi1_init+0xac>)
 801250e:	2200      	movs	r2, #0
 8012510:	649a      	str	r2, [r3, #72]	; 0x48
    h_spi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8012512:	4b0e      	ldr	r3, [pc, #56]	; (801254c <spi1_init+0xac>)
 8012514:	2200      	movs	r2, #0
 8012516:	64da      	str	r2, [r3, #76]	; 0x4c
    h_spi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8012518:	4b0c      	ldr	r3, [pc, #48]	; (801254c <spi1_init+0xac>)
 801251a:	2200      	movs	r2, #0
 801251c:	651a      	str	r2, [r3, #80]	; 0x50
    h_spi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 801251e:	4b0b      	ldr	r3, [pc, #44]	; (801254c <spi1_init+0xac>)
 8012520:	2200      	movs	r2, #0
 8012522:	655a      	str	r2, [r3, #84]	; 0x54
    h_spi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8012524:	4b09      	ldr	r3, [pc, #36]	; (801254c <spi1_init+0xac>)
 8012526:	2200      	movs	r2, #0
 8012528:	659a      	str	r2, [r3, #88]	; 0x58
    h_spi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 801252a:	4b08      	ldr	r3, [pc, #32]	; (801254c <spi1_init+0xac>)
 801252c:	2200      	movs	r2, #0
 801252e:	65da      	str	r2, [r3, #92]	; 0x5c
    h_spi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8012530:	4b06      	ldr	r3, [pc, #24]	; (801254c <spi1_init+0xac>)
 8012532:	2200      	movs	r2, #0
 8012534:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_SPI_Init(&h_spi1) != HAL_OK)
 8012536:	4805      	ldr	r0, [pc, #20]	; (801254c <spi1_init+0xac>)
 8012538:	f7f7 f8f0 	bl	800971c <HAL_SPI_Init>
 801253c:	4603      	mov	r3, r0
 801253e:	2b00      	cmp	r3, #0
 8012540:	d001      	beq.n	8012546 <spi1_init+0xa6>
    {
        Error_Handler();
 8012542:	f7ee fef9 	bl	8001338 <Error_Handler>
    }
}
 8012546:	bf00      	nop
 8012548:	bd80      	pop	{r7, pc}
 801254a:	bf00      	nop
 801254c:	20001d60 	.word	0x20001d60
 8012550:	40013000 	.word	0x40013000

08012554 <pcf8553_blink>:
 * PCF_BLINK_ONE_SECOND,
 * PCF_BLINK_HALF_SECOND
 * @retval None
 */
void pcf8553_blink(blink_t mode)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
 801255a:	4603      	mov	r3, r0
 801255c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 801255e:	2200      	movs	r2, #0
 8012560:	2110      	movs	r1, #16
 8012562:	480f      	ldr	r0, [pc, #60]	; (80125a0 <pcf8553_blink+0x4c>)
 8012564:	f7f1 ff88 	bl	8004478 <HAL_GPIO_WritePin>
    g_display_ctrl_2.reg_bits.blink = mode;
 8012568:	79fb      	ldrb	r3, [r7, #7]
 801256a:	f003 0303 	and.w	r3, r3, #3
 801256e:	b2d9      	uxtb	r1, r3
 8012570:	4a0c      	ldr	r2, [pc, #48]	; (80125a4 <pcf8553_blink+0x50>)
 8012572:	7813      	ldrb	r3, [r2, #0]
 8012574:	f361 0342 	bfi	r3, r1, #1, #2
 8012578:	7013      	strb	r3, [r2, #0]
    prepare_to_send(DISPLAY_CTRL_2_ADDRESS);
 801257a:	2003      	movs	r0, #3
 801257c:	f7ff ff6e 	bl	801245c <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 8012580:	2314      	movs	r3, #20
 8012582:	2201      	movs	r2, #1
 8012584:	4907      	ldr	r1, [pc, #28]	; (80125a4 <pcf8553_blink+0x50>)
 8012586:	4808      	ldr	r0, [pc, #32]	; (80125a8 <pcf8553_blink+0x54>)
 8012588:	f7f7 f9de 	bl	8009948 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 801258c:	2201      	movs	r2, #1
 801258e:	2110      	movs	r1, #16
 8012590:	4803      	ldr	r0, [pc, #12]	; (80125a0 <pcf8553_blink+0x4c>)
 8012592:	f7f1 ff71 	bl	8004478 <HAL_GPIO_WritePin>
}
 8012596:	bf00      	nop
 8012598:	3708      	adds	r7, #8
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	42020000 	.word	0x42020000
 80125a4:	20001e08 	.word	0x20001e08
 80125a8:	20001d60 	.word	0x20001d60

080125ac <pcf8553_clear_buff>:

void pcf8553_clear_buff()
{
 80125ac:	b480      	push	{r7}
 80125ae:	b083      	sub	sp, #12
 80125b0:	af00      	add	r7, sp, #0
    /*
     * Limpia el buffer final, que es mandado directamente al controlador de la
     * pantalla LCD.
     */
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 80125b2:	2300      	movs	r3, #0
 80125b4:	607b      	str	r3, [r7, #4]
 80125b6:	e007      	b.n	80125c8 <pcf8553_clear_buff+0x1c>
    {
        g_lcd_map[cont_buff_t] = 0;
 80125b8:	4a08      	ldr	r2, [pc, #32]	; (80125dc <pcf8553_clear_buff+0x30>)
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	4413      	add	r3, r2
 80125be:	2200      	movs	r2, #0
 80125c0:	701a      	strb	r2, [r3, #0]
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	3301      	adds	r3, #1
 80125c6:	607b      	str	r3, [r7, #4]
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2b13      	cmp	r3, #19
 80125cc:	ddf4      	ble.n	80125b8 <pcf8553_clear_buff+0xc>
    }
}
 80125ce:	bf00      	nop
 80125d0:	bf00      	nop
 80125d2:	370c      	adds	r7, #12
 80125d4:	46bd      	mov	sp, r7
 80125d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125da:	4770      	bx	lr
 80125dc:	20001df0 	.word	0x20001df0

080125e0 <pcf8553_dump>:
 *
 * @param None
 * @retval None
 */
void pcf8553_dump()
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b082      	sub	sp, #8
 80125e4:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 80125e6:	2200      	movs	r2, #0
 80125e8:	2110      	movs	r1, #16
 80125ea:	4810      	ldr	r0, [pc, #64]	; (801262c <pcf8553_dump+0x4c>)
 80125ec:	f7f1 ff44 	bl	8004478 <HAL_GPIO_WritePin>
    prepare_to_send(DATA_ADDRESS);
 80125f0:	2004      	movs	r0, #4
 80125f2:	f7ff ff33 	bl	801245c <prepare_to_send>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 80125f6:	2300      	movs	r3, #0
 80125f8:	607b      	str	r3, [r7, #4]
 80125fa:	e00a      	b.n	8012612 <pcf8553_dump+0x32>
    {
        HAL_SPI_Transmit(&h_spi1, g_lcd_map + i, 1, DEFAULT_DELAY);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	4a0c      	ldr	r2, [pc, #48]	; (8012630 <pcf8553_dump+0x50>)
 8012600:	1899      	adds	r1, r3, r2
 8012602:	2314      	movs	r3, #20
 8012604:	2201      	movs	r2, #1
 8012606:	480b      	ldr	r0, [pc, #44]	; (8012634 <pcf8553_dump+0x54>)
 8012608:	f7f7 f99e 	bl	8009948 <HAL_SPI_Transmit>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	3301      	adds	r3, #1
 8012610:	607b      	str	r3, [r7, #4]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2b13      	cmp	r3, #19
 8012616:	ddf1      	ble.n	80125fc <pcf8553_dump+0x1c>
    }
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 8012618:	2201      	movs	r2, #1
 801261a:	2110      	movs	r1, #16
 801261c:	4803      	ldr	r0, [pc, #12]	; (801262c <pcf8553_dump+0x4c>)
 801261e:	f7f1 ff2b 	bl	8004478 <HAL_GPIO_WritePin>
}
 8012622:	bf00      	nop
 8012624:	3708      	adds	r7, #8
 8012626:	46bd      	mov	sp, r7
 8012628:	bd80      	pop	{r7, pc}
 801262a:	bf00      	nop
 801262c:	42020000 	.word	0x42020000
 8012630:	20001df0 	.word	0x20001df0
 8012634:	20001d60 	.word	0x20001d60

08012638 <pcf8553_init>:
 * @brief Llamar a esta función antes de empezar a trabajar con el driver.
 * @param None
 * @retval None
 */
void pcf8553_init()
{
 8012638:	b580      	push	{r7, lr}
 801263a:	af00      	add	r7, sp, #0
    spi1_init();
 801263c:	f7ff ff30 	bl	80124a0 <spi1_init>
    pcf8553_reset();
 8012640:	f000 f830 	bl	80126a4 <pcf8553_reset>
    HAL_Delay(DEFAULT_DELAY);
 8012644:	2314      	movs	r3, #20
 8012646:	4618      	mov	r0, r3
 8012648:	f7ef fa3e 	bl	8001ac8 <HAL_Delay>
     * @brief El pcf8553 tiene un pin de chip select, la siguiente instruccion
     * habilita el chip, el parametro GPIO_PIN_RESET es muy parecido a un
     * numero magico, se debe buscar una mejor solucion.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 801264c:	2200      	movs	r2, #0
 801264e:	2110      	movs	r1, #16
 8012650:	480f      	ldr	r0, [pc, #60]	; (8012690 <pcf8553_init+0x58>)
 8012652:	f7f1 ff11 	bl	8004478 <HAL_GPIO_WritePin>
     *  Display_crtl_2 = 1 to enable display.
     *  Luego de un tiempo olvidé porque hice este comentario, no parece
     *  tener sentido.
     *
     */
    prepare_to_send(0x1);
 8012656:	2001      	movs	r0, #1
 8012658:	f7ff ff00 	bl	801245c <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_device_ctrl.reg_data), 1, DEFAULT_DELAY);
 801265c:	2314      	movs	r3, #20
 801265e:	2201      	movs	r2, #1
 8012660:	490c      	ldr	r1, [pc, #48]	; (8012694 <pcf8553_init+0x5c>)
 8012662:	480d      	ldr	r0, [pc, #52]	; (8012698 <pcf8553_init+0x60>)
 8012664:	f7f7 f970 	bl	8009948 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_1.reg_data), 1, DEFAULT_DELAY);
 8012668:	2314      	movs	r3, #20
 801266a:	2201      	movs	r2, #1
 801266c:	490b      	ldr	r1, [pc, #44]	; (801269c <pcf8553_init+0x64>)
 801266e:	480a      	ldr	r0, [pc, #40]	; (8012698 <pcf8553_init+0x60>)
 8012670:	f7f7 f96a 	bl	8009948 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 8012674:	2314      	movs	r3, #20
 8012676:	2201      	movs	r2, #1
 8012678:	4909      	ldr	r1, [pc, #36]	; (80126a0 <pcf8553_init+0x68>)
 801267a:	4807      	ldr	r0, [pc, #28]	; (8012698 <pcf8553_init+0x60>)
 801267c:	f7f7 f964 	bl	8009948 <HAL_SPI_Transmit>

    /*
     *  Chip disable.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 8012680:	2201      	movs	r2, #1
 8012682:	2110      	movs	r1, #16
 8012684:	4802      	ldr	r0, [pc, #8]	; (8012690 <pcf8553_init+0x58>)
 8012686:	f7f1 fef7 	bl	8004478 <HAL_GPIO_WritePin>
}
 801268a:	bf00      	nop
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop
 8012690:	42020000 	.word	0x42020000
 8012694:	20001e04 	.word	0x20001e04
 8012698:	20001d60 	.word	0x20001d60
 801269c:	20000140 	.word	0x20000140
 80126a0:	20001e08 	.word	0x20001e08

080126a4 <pcf8553_reset>:
 * at least 10 μs.
 * @param  None
 * @retval None
 */
void pcf8553_reset()
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_PIN, GPIO_PIN_RESET);
 80126a8:	2200      	movs	r2, #0
 80126aa:	2140      	movs	r1, #64	; 0x40
 80126ac:	4806      	ldr	r0, [pc, #24]	; (80126c8 <pcf8553_reset+0x24>)
 80126ae:	f7f1 fee3 	bl	8004478 <HAL_GPIO_WritePin>
    HAL_Delay(DEFAULT_DELAY);
 80126b2:	2314      	movs	r3, #20
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7ef fa07 	bl	8001ac8 <HAL_Delay>
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_Pin, GPIO_PIN_SET);
 80126ba:	2201      	movs	r2, #1
 80126bc:	2140      	movs	r1, #64	; 0x40
 80126be:	4802      	ldr	r0, [pc, #8]	; (80126c8 <pcf8553_reset+0x24>)
 80126c0:	f7f1 feda 	bl	8004478 <HAL_GPIO_WritePin>
}
 80126c4:	bf00      	nop
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	42020000 	.word	0x42020000

080126cc <pcf8553_write_all>:
 * futuro se hará con una enumeración que lo deje claro, ya sea en esta función
 * o en una de mas alto nivel.
 * @retval None
 */
void pcf8553_write_all(uint8_t data)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b084      	sub	sp, #16
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	4603      	mov	r3, r0
 80126d4:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 80126d6:	2300      	movs	r3, #0
 80126d8:	60fb      	str	r3, [r7, #12]
 80126da:	e007      	b.n	80126ec <pcf8553_write_all+0x20>
    {
        g_lcd_map[i] = data;
 80126dc:	4a08      	ldr	r2, [pc, #32]	; (8012700 <pcf8553_write_all+0x34>)
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	4413      	add	r3, r2
 80126e2:	79fa      	ldrb	r2, [r7, #7]
 80126e4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	3301      	adds	r3, #1
 80126ea:	60fb      	str	r3, [r7, #12]
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	2b13      	cmp	r3, #19
 80126f0:	ddf4      	ble.n	80126dc <pcf8553_write_all+0x10>
    }
    pcf8553_dump();
 80126f2:	f7ff ff75 	bl	80125e0 <pcf8553_dump>
}
 80126f6:	bf00      	nop
 80126f8:	3710      	adds	r7, #16
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}
 80126fe:	bf00      	nop
 8012700:	20001df0 	.word	0x20001df0

08012704 <fm_menu_config_date_hour>:
 * @brief Función que imprime el menú de configuración de fecha y hora.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_date_hour(fm_event_t event_id)
{
 8012704:	b5b0      	push	{r4, r5, r7, lr}
 8012706:	b0b4      	sub	sp, #208	; 0xd0
 8012708:	af00      	add	r7, sp, #0
 801270a:	4603      	mov	r3, r0
 801270c:	71fb      	strb	r3, [r7, #7]
    static sel_second second_enum;
    RTC_TimeTypeDef time_final;
    RTC_DateTypeDef date_final;
    extern RTC_HandleTypeDef hrtc;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 801270e:	4b9d      	ldr	r3, [pc, #628]	; (8012984 <fm_menu_config_date_hour+0x280>)
 8012710:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    fm_event_t event_now;

    if (new_entry == 1)
 8012714:	4b9c      	ldr	r3, [pc, #624]	; (8012988 <fm_menu_config_date_hour+0x284>)
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	2b01      	cmp	r3, #1
 801271a:	d107      	bne.n	801272c <fm_menu_config_date_hour+0x28>
    {
        field = DAY;
 801271c:	4b9b      	ldr	r3, [pc, #620]	; (801298c <fm_menu_config_date_hour+0x288>)
 801271e:	2200      	movs	r2, #0
 8012720:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 8012722:	f7fd f968 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 8012726:	4b98      	ldr	r3, [pc, #608]	; (8012988 <fm_menu_config_date_hour+0x284>)
 8012728:	2200      	movs	r2, #0
 801272a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(CONFIGURATION, event_id, field);
 801272c:	4b97      	ldr	r3, [pc, #604]	; (801298c <fm_menu_config_date_hour+0x288>)
 801272e:	781a      	ldrb	r2, [r3, #0]
 8012730:	79fb      	ldrb	r3, [r7, #7]
 8012732:	4619      	mov	r1, r3
 8012734:	2001      	movs	r0, #1
 8012736:	f7fd f965 	bl	800fa04 <fm_lcd_date_hour>
    fm_lcd_refresh();
 801273a:	f7fd fce8 	bl	801010e <fm_lcd_refresh>

    day_enum = fm_factory_get_date_time().day;
 801273e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012742:	4618      	mov	r0, r3
 8012744:	f7fc faec 	bl	800ed20 <fm_factory_get_date_time>
 8012748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801274a:	b2da      	uxtb	r2, r3
 801274c:	4b90      	ldr	r3, [pc, #576]	; (8012990 <fm_menu_config_date_hour+0x28c>)
 801274e:	701a      	strb	r2, [r3, #0]
    month_enum = fm_factory_get_date_time().month;
 8012750:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012754:	4618      	mov	r0, r3
 8012756:	f7fc fae3 	bl	800ed20 <fm_factory_get_date_time>
 801275a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801275c:	b2da      	uxtb	r2, r3
 801275e:	4b8d      	ldr	r3, [pc, #564]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012760:	701a      	strb	r2, [r3, #0]
    year_enum = fm_factory_get_date_time().year;
 8012762:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012766:	4618      	mov	r0, r3
 8012768:	f7fc fada 	bl	800ed20 <fm_factory_get_date_time>
 801276c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801276e:	b2da      	uxtb	r2, r3
 8012770:	4b89      	ldr	r3, [pc, #548]	; (8012998 <fm_menu_config_date_hour+0x294>)
 8012772:	701a      	strb	r2, [r3, #0]
    hour_enum = fm_factory_get_date_time().hour;
 8012774:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012778:	4618      	mov	r0, r3
 801277a:	f7fc fad1 	bl	800ed20 <fm_factory_get_date_time>
 801277e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012782:	b2da      	uxtb	r2, r3
 8012784:	4b85      	ldr	r3, [pc, #532]	; (801299c <fm_menu_config_date_hour+0x298>)
 8012786:	701a      	strb	r2, [r3, #0]
    minute_enum = fm_factory_get_date_time().minute;
 8012788:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801278c:	4618      	mov	r0, r3
 801278e:	f7fc fac7 	bl	800ed20 <fm_factory_get_date_time>
 8012792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012796:	b2da      	uxtb	r2, r3
 8012798:	4b81      	ldr	r3, [pc, #516]	; (80129a0 <fm_menu_config_date_hour+0x29c>)
 801279a:	701a      	strb	r2, [r3, #0]
    second_enum = fm_factory_get_date_time().second;
 801279c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7fc fabd 	bl	800ed20 <fm_factory_get_date_time>
 80127a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80127aa:	b2da      	uxtb	r2, r3
 80127ac:	4b7d      	ldr	r3, [pc, #500]	; (80129a4 <fm_menu_config_date_hour+0x2a0>)
 80127ae:	701a      	strb	r2, [r3, #0]

    switch (event_id)
 80127b0:	79fb      	ldrb	r3, [r7, #7]
 80127b2:	3b01      	subs	r3, #1
 80127b4:	2b04      	cmp	r3, #4
 80127b6:	f200 83be 	bhi.w	8012f36 <fm_menu_config_date_hour+0x832>
 80127ba:	a201      	add	r2, pc, #4	; (adr r2, 80127c0 <fm_menu_config_date_hour+0xbc>)
 80127bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127c0:	08012f37 	.word	0x08012f37
 80127c4:	080127d5 	.word	0x080127d5
 80127c8:	08012b29 	.word	0x08012b29
 80127cc:	08012e99 	.word	0x08012e99
 80127d0:	08012f15 	.word	0x08012f15
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80127d4:	4b74      	ldr	r3, [pc, #464]	; (80129a8 <fm_menu_config_date_hour+0x2a4>)
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	f000 83ae 	beq.w	8012f3a <fm_menu_config_date_hour+0x836>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if (field == DAY)
 80127de:	4b6b      	ldr	r3, [pc, #428]	; (801298c <fm_menu_config_date_hour+0x288>)
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	f040 809b 	bne.w	801291e <fm_menu_config_date_hour+0x21a>
                {
                    if (month_enum == JANUARY || month_enum == MARCH
 80127e8:	4b6a      	ldr	r3, [pc, #424]	; (8012994 <fm_menu_config_date_hour+0x290>)
 80127ea:	781b      	ldrb	r3, [r3, #0]
 80127ec:	2b01      	cmp	r3, #1
 80127ee:	d017      	beq.n	8012820 <fm_menu_config_date_hour+0x11c>
 80127f0:	4b68      	ldr	r3, [pc, #416]	; (8012994 <fm_menu_config_date_hour+0x290>)
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	2b03      	cmp	r3, #3
 80127f6:	d013      	beq.n	8012820 <fm_menu_config_date_hour+0x11c>
                    || month_enum == MAY || month_enum == JULY
 80127f8:	4b66      	ldr	r3, [pc, #408]	; (8012994 <fm_menu_config_date_hour+0x290>)
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	2b05      	cmp	r3, #5
 80127fe:	d00f      	beq.n	8012820 <fm_menu_config_date_hour+0x11c>
 8012800:	4b64      	ldr	r3, [pc, #400]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	2b07      	cmp	r3, #7
 8012806:	d00b      	beq.n	8012820 <fm_menu_config_date_hour+0x11c>
                    || month_enum == AUGUST || month_enum == OCTOBER
 8012808:	4b62      	ldr	r3, [pc, #392]	; (8012994 <fm_menu_config_date_hour+0x290>)
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	2b08      	cmp	r3, #8
 801280e:	d007      	beq.n	8012820 <fm_menu_config_date_hour+0x11c>
 8012810:	4b60      	ldr	r3, [pc, #384]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	2b0a      	cmp	r3, #10
 8012816:	d003      	beq.n	8012820 <fm_menu_config_date_hour+0x11c>
                    || month_enum == DECEMBER)
 8012818:	4b5e      	ldr	r3, [pc, #376]	; (8012994 <fm_menu_config_date_hour+0x290>)
 801281a:	781b      	ldrb	r3, [r3, #0]
 801281c:	2b0c      	cmp	r3, #12
 801281e:	d119      	bne.n	8012854 <fm_menu_config_date_hour+0x150>
                    {
                        if (day_enum < DAY_31)
 8012820:	4b5b      	ldr	r3, [pc, #364]	; (8012990 <fm_menu_config_date_hour+0x28c>)
 8012822:	781b      	ldrb	r3, [r3, #0]
 8012824:	2b1e      	cmp	r3, #30
 8012826:	d80b      	bhi.n	8012840 <fm_menu_config_date_hour+0x13c>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 8012828:	4b59      	ldr	r3, [pc, #356]	; (8012990 <fm_menu_config_date_hour+0x28c>)
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	3301      	adds	r3, #1
 801282e:	4a59      	ldr	r2, [pc, #356]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012830:	7812      	ldrb	r2, [r2, #0]
 8012832:	4611      	mov	r1, r2
 8012834:	4a58      	ldr	r2, [pc, #352]	; (8012998 <fm_menu_config_date_hour+0x294>)
 8012836:	7812      	ldrb	r2, [r2, #0]
 8012838:	4618      	mov	r0, r3
 801283a:	f7fc fbdd 	bl	800eff8 <fm_factory_modify_date>
                        if (day_enum < DAY_31)
 801283e:	e168      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 8012840:	4b54      	ldr	r3, [pc, #336]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	4619      	mov	r1, r3
 8012846:	4b54      	ldr	r3, [pc, #336]	; (8012998 <fm_menu_config_date_hour+0x294>)
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	461a      	mov	r2, r3
 801284c:	2001      	movs	r0, #1
 801284e:	f7fc fbd3 	bl	800eff8 <fm_factory_modify_date>
                        if (day_enum < DAY_31)
 8012852:	e15e      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else if (month_enum == APRIL || month_enum == JUNE
 8012854:	4b4f      	ldr	r3, [pc, #316]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	2b04      	cmp	r3, #4
 801285a:	d00b      	beq.n	8012874 <fm_menu_config_date_hour+0x170>
 801285c:	4b4d      	ldr	r3, [pc, #308]	; (8012994 <fm_menu_config_date_hour+0x290>)
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	2b06      	cmp	r3, #6
 8012862:	d007      	beq.n	8012874 <fm_menu_config_date_hour+0x170>
                    || month_enum == SEPTEMBER || month_enum == NOVEMBER)
 8012864:	4b4b      	ldr	r3, [pc, #300]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	2b09      	cmp	r3, #9
 801286a:	d003      	beq.n	8012874 <fm_menu_config_date_hour+0x170>
 801286c:	4b49      	ldr	r3, [pc, #292]	; (8012994 <fm_menu_config_date_hour+0x290>)
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	2b0b      	cmp	r3, #11
 8012872:	d119      	bne.n	80128a8 <fm_menu_config_date_hour+0x1a4>
                    {
                        if (day_enum < DAY_30)
 8012874:	4b46      	ldr	r3, [pc, #280]	; (8012990 <fm_menu_config_date_hour+0x28c>)
 8012876:	781b      	ldrb	r3, [r3, #0]
 8012878:	2b1d      	cmp	r3, #29
 801287a:	d80b      	bhi.n	8012894 <fm_menu_config_date_hour+0x190>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 801287c:	4b44      	ldr	r3, [pc, #272]	; (8012990 <fm_menu_config_date_hour+0x28c>)
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	3301      	adds	r3, #1
 8012882:	4a44      	ldr	r2, [pc, #272]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012884:	7812      	ldrb	r2, [r2, #0]
 8012886:	4611      	mov	r1, r2
 8012888:	4a43      	ldr	r2, [pc, #268]	; (8012998 <fm_menu_config_date_hour+0x294>)
 801288a:	7812      	ldrb	r2, [r2, #0]
 801288c:	4618      	mov	r0, r3
 801288e:	f7fc fbb3 	bl	800eff8 <fm_factory_modify_date>
                        if (day_enum < DAY_30)
 8012892:	e13e      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 8012894:	4b3f      	ldr	r3, [pc, #252]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	4619      	mov	r1, r3
 801289a:	4b3f      	ldr	r3, [pc, #252]	; (8012998 <fm_menu_config_date_hour+0x294>)
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	461a      	mov	r2, r3
 80128a0:	2001      	movs	r0, #1
 80128a2:	f7fc fba9 	bl	800eff8 <fm_factory_modify_date>
                        if (day_enum < DAY_30)
 80128a6:	e134      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else
                    {
                        if (year_enum % YEAR_4 == 0)
 80128a8:	4b3b      	ldr	r3, [pc, #236]	; (8012998 <fm_menu_config_date_hour+0x294>)
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	f003 0303 	and.w	r3, r3, #3
 80128b0:	b2db      	uxtb	r3, r3
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d119      	bne.n	80128ea <fm_menu_config_date_hour+0x1e6>
                        {
                            if (day_enum < DAY_29)
 80128b6:	4b36      	ldr	r3, [pc, #216]	; (8012990 <fm_menu_config_date_hour+0x28c>)
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	2b1c      	cmp	r3, #28
 80128bc:	d80b      	bhi.n	80128d6 <fm_menu_config_date_hour+0x1d2>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 80128be:	4b34      	ldr	r3, [pc, #208]	; (8012990 <fm_menu_config_date_hour+0x28c>)
 80128c0:	781b      	ldrb	r3, [r3, #0]
 80128c2:	3301      	adds	r3, #1
 80128c4:	4a33      	ldr	r2, [pc, #204]	; (8012994 <fm_menu_config_date_hour+0x290>)
 80128c6:	7812      	ldrb	r2, [r2, #0]
 80128c8:	4611      	mov	r1, r2
 80128ca:	4a33      	ldr	r2, [pc, #204]	; (8012998 <fm_menu_config_date_hour+0x294>)
 80128cc:	7812      	ldrb	r2, [r2, #0]
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7fc fb92 	bl	800eff8 <fm_factory_modify_date>
 80128d4:	e11d      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 80128d6:	4b2f      	ldr	r3, [pc, #188]	; (8012994 <fm_menu_config_date_hour+0x290>)
 80128d8:	781b      	ldrb	r3, [r3, #0]
 80128da:	4619      	mov	r1, r3
 80128dc:	4b2e      	ldr	r3, [pc, #184]	; (8012998 <fm_menu_config_date_hour+0x294>)
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	461a      	mov	r2, r3
 80128e2:	2001      	movs	r0, #1
 80128e4:	f7fc fb88 	bl	800eff8 <fm_factory_modify_date>
 80128e8:	e113      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if (day_enum < DAY_28)
 80128ea:	4b29      	ldr	r3, [pc, #164]	; (8012990 <fm_menu_config_date_hour+0x28c>)
 80128ec:	781b      	ldrb	r3, [r3, #0]
 80128ee:	2b1b      	cmp	r3, #27
 80128f0:	d80b      	bhi.n	801290a <fm_menu_config_date_hour+0x206>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 80128f2:	4b27      	ldr	r3, [pc, #156]	; (8012990 <fm_menu_config_date_hour+0x28c>)
 80128f4:	781b      	ldrb	r3, [r3, #0]
 80128f6:	3301      	adds	r3, #1
 80128f8:	4a26      	ldr	r2, [pc, #152]	; (8012994 <fm_menu_config_date_hour+0x290>)
 80128fa:	7812      	ldrb	r2, [r2, #0]
 80128fc:	4611      	mov	r1, r2
 80128fe:	4a26      	ldr	r2, [pc, #152]	; (8012998 <fm_menu_config_date_hour+0x294>)
 8012900:	7812      	ldrb	r2, [r2, #0]
 8012902:	4618      	mov	r0, r3
 8012904:	f7fc fb78 	bl	800eff8 <fm_factory_modify_date>
 8012908:	e103      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 801290a:	4b22      	ldr	r3, [pc, #136]	; (8012994 <fm_menu_config_date_hour+0x290>)
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	4619      	mov	r1, r3
 8012910:	4b21      	ldr	r3, [pc, #132]	; (8012998 <fm_menu_config_date_hour+0x294>)
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	461a      	mov	r2, r3
 8012916:	2001      	movs	r0, #1
 8012918:	f7fc fb6e 	bl	800eff8 <fm_factory_modify_date>
 801291c:	e0f9      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                    }
                }
                else if (field == MONTH)
 801291e:	4b1b      	ldr	r3, [pc, #108]	; (801298c <fm_menu_config_date_hour+0x288>)
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	2b01      	cmp	r3, #1
 8012924:	d16a      	bne.n	80129fc <fm_menu_config_date_hour+0x2f8>
                {
                    if (month_enum < DECEMBER)
 8012926:	4b1b      	ldr	r3, [pc, #108]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012928:	781b      	ldrb	r3, [r3, #0]
 801292a:	2b0b      	cmp	r3, #11
 801292c:	d85c      	bhi.n	80129e8 <fm_menu_config_date_hour+0x2e4>
                    {
                        if ((month_enum + 1 == APRIL || month_enum + 1 == JUNE
 801292e:	4b19      	ldr	r3, [pc, #100]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012930:	781b      	ldrb	r3, [r3, #0]
 8012932:	2b03      	cmp	r3, #3
 8012934:	d00b      	beq.n	801294e <fm_menu_config_date_hour+0x24a>
 8012936:	4b17      	ldr	r3, [pc, #92]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	2b05      	cmp	r3, #5
 801293c:	d007      	beq.n	801294e <fm_menu_config_date_hour+0x24a>
                        || month_enum + 1 == SEPTEMBER
 801293e:	4b15      	ldr	r3, [pc, #84]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	2b08      	cmp	r3, #8
 8012944:	d003      	beq.n	801294e <fm_menu_config_date_hour+0x24a>
                        || month_enum + 1 == NOVEMBER) && (day_enum > DAY_30))
 8012946:	4b13      	ldr	r3, [pc, #76]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	2b0a      	cmp	r3, #10
 801294c:	d107      	bne.n	801295e <fm_menu_config_date_hour+0x25a>
 801294e:	4b10      	ldr	r3, [pc, #64]	; (8012990 <fm_menu_config_date_hour+0x28c>)
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	2b1e      	cmp	r3, #30
 8012954:	d903      	bls.n	801295e <fm_menu_config_date_hour+0x25a>
                        {
                            day_enum = DAY_30;
 8012956:	4b0e      	ldr	r3, [pc, #56]	; (8012990 <fm_menu_config_date_hour+0x28c>)
 8012958:	221e      	movs	r2, #30
 801295a:	701a      	strb	r2, [r3, #0]
 801295c:	e038      	b.n	80129d0 <fm_menu_config_date_hour+0x2cc>
                        }
                        else if ((month_enum + 1 == FEBRUARY)
 801295e:	4b0d      	ldr	r3, [pc, #52]	; (8012994 <fm_menu_config_date_hour+0x290>)
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	2b01      	cmp	r3, #1
 8012964:	d122      	bne.n	80129ac <fm_menu_config_date_hour+0x2a8>
                        && (year_enum % YEAR_4 == 0) && (day_enum > DAY_29))
 8012966:	4b0c      	ldr	r3, [pc, #48]	; (8012998 <fm_menu_config_date_hour+0x294>)
 8012968:	781b      	ldrb	r3, [r3, #0]
 801296a:	f003 0303 	and.w	r3, r3, #3
 801296e:	b2db      	uxtb	r3, r3
 8012970:	2b00      	cmp	r3, #0
 8012972:	d11b      	bne.n	80129ac <fm_menu_config_date_hour+0x2a8>
 8012974:	4b06      	ldr	r3, [pc, #24]	; (8012990 <fm_menu_config_date_hour+0x28c>)
 8012976:	781b      	ldrb	r3, [r3, #0]
 8012978:	2b1d      	cmp	r3, #29
 801297a:	d917      	bls.n	80129ac <fm_menu_config_date_hour+0x2a8>
                        {
                            day_enum = DAY_29;
 801297c:	4b04      	ldr	r3, [pc, #16]	; (8012990 <fm_menu_config_date_hour+0x28c>)
 801297e:	221d      	movs	r2, #29
 8012980:	701a      	strb	r2, [r3, #0]
 8012982:	e025      	b.n	80129d0 <fm_menu_config_date_hour+0x2cc>
 8012984:	08012705 	.word	0x08012705
 8012988:	20000141 	.word	0x20000141
 801298c:	20001e0d 	.word	0x20001e0d
 8012990:	20001e0e 	.word	0x20001e0e
 8012994:	20001e0f 	.word	0x20001e0f
 8012998:	20001e10 	.word	0x20001e10
 801299c:	20001e11 	.word	0x20001e11
 80129a0:	20001e12 	.word	0x20001e12
 80129a4:	20001e13 	.word	0x20001e13
 80129a8:	20001e0a 	.word	0x20001e0a
                        }
                        else if ((month_enum + 1 == FEBRUARY)
 80129ac:	4b93      	ldr	r3, [pc, #588]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 80129ae:	781b      	ldrb	r3, [r3, #0]
 80129b0:	2b01      	cmp	r3, #1
 80129b2:	d10d      	bne.n	80129d0 <fm_menu_config_date_hour+0x2cc>
                        && (year_enum % YEAR_4 != 0) && (day_enum > DAY_28))
 80129b4:	4b92      	ldr	r3, [pc, #584]	; (8012c00 <fm_menu_config_date_hour+0x4fc>)
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	f003 0303 	and.w	r3, r3, #3
 80129bc:	b2db      	uxtb	r3, r3
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d006      	beq.n	80129d0 <fm_menu_config_date_hour+0x2cc>
 80129c2:	4b90      	ldr	r3, [pc, #576]	; (8012c04 <fm_menu_config_date_hour+0x500>)
 80129c4:	781b      	ldrb	r3, [r3, #0]
 80129c6:	2b1c      	cmp	r3, #28
 80129c8:	d902      	bls.n	80129d0 <fm_menu_config_date_hour+0x2cc>
                        {
                            day_enum = DAY_28;
 80129ca:	4b8e      	ldr	r3, [pc, #568]	; (8012c04 <fm_menu_config_date_hour+0x500>)
 80129cc:	221c      	movs	r2, #28
 80129ce:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum + 1,
 80129d0:	4b8c      	ldr	r3, [pc, #560]	; (8012c04 <fm_menu_config_date_hour+0x500>)
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	4618      	mov	r0, r3
 80129d6:	4b89      	ldr	r3, [pc, #548]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	3301      	adds	r3, #1
 80129dc:	4a88      	ldr	r2, [pc, #544]	; (8012c00 <fm_menu_config_date_hour+0x4fc>)
 80129de:	7812      	ldrb	r2, [r2, #0]
 80129e0:	4619      	mov	r1, r3
 80129e2:	f7fc fb09 	bl	800eff8 <fm_factory_modify_date>
 80129e6:	e094      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, JANUARY, year_enum);
 80129e8:	4b86      	ldr	r3, [pc, #536]	; (8012c04 <fm_menu_config_date_hour+0x500>)
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	4618      	mov	r0, r3
 80129ee:	4b84      	ldr	r3, [pc, #528]	; (8012c00 <fm_menu_config_date_hour+0x4fc>)
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	461a      	mov	r2, r3
 80129f4:	2101      	movs	r1, #1
 80129f6:	f7fc faff 	bl	800eff8 <fm_factory_modify_date>
 80129fa:	e08a      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == YEAR)
 80129fc:	4b82      	ldr	r3, [pc, #520]	; (8012c08 <fm_menu_config_date_hour+0x504>)
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	2b02      	cmp	r3, #2
 8012a02:	d12c      	bne.n	8012a5e <fm_menu_config_date_hour+0x35a>
                {
                    if (year_enum < YEAR_99)
 8012a04:	4b7e      	ldr	r3, [pc, #504]	; (8012c00 <fm_menu_config_date_hour+0x4fc>)
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	2b62      	cmp	r3, #98	; 0x62
 8012a0a:	d81e      	bhi.n	8012a4a <fm_menu_config_date_hour+0x346>
                    {
                        if (((year_enum + 1) % YEAR_4 != YEAR_0)
 8012a0c:	4b7c      	ldr	r3, [pc, #496]	; (8012c00 <fm_menu_config_date_hour+0x4fc>)
 8012a0e:	781b      	ldrb	r3, [r3, #0]
 8012a10:	3301      	adds	r3, #1
 8012a12:	f003 0303 	and.w	r3, r3, #3
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d00a      	beq.n	8012a30 <fm_menu_config_date_hour+0x32c>
                        && (month_enum == FEBRUARY) && (day_enum > DAY_28))
 8012a1a:	4b78      	ldr	r3, [pc, #480]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	2b02      	cmp	r3, #2
 8012a20:	d106      	bne.n	8012a30 <fm_menu_config_date_hour+0x32c>
 8012a22:	4b78      	ldr	r3, [pc, #480]	; (8012c04 <fm_menu_config_date_hour+0x500>)
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	2b1c      	cmp	r3, #28
 8012a28:	d902      	bls.n	8012a30 <fm_menu_config_date_hour+0x32c>
                        {
                            day_enum = DAY_28;
 8012a2a:	4b76      	ldr	r3, [pc, #472]	; (8012c04 <fm_menu_config_date_hour+0x500>)
 8012a2c:	221c      	movs	r2, #28
 8012a2e:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 8012a30:	4b74      	ldr	r3, [pc, #464]	; (8012c04 <fm_menu_config_date_hour+0x500>)
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	4618      	mov	r0, r3
 8012a36:	4b71      	ldr	r3, [pc, #452]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012a38:	781b      	ldrb	r3, [r3, #0]
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	4b70      	ldr	r3, [pc, #448]	; (8012c00 <fm_menu_config_date_hour+0x4fc>)
 8012a3e:	781b      	ldrb	r3, [r3, #0]
 8012a40:	3301      	adds	r3, #1
 8012a42:	461a      	mov	r2, r3
 8012a44:	f7fc fad8 	bl	800eff8 <fm_factory_modify_date>
 8012a48:	e063      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                        year_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_0);
 8012a4a:	4b6e      	ldr	r3, [pc, #440]	; (8012c04 <fm_menu_config_date_hour+0x500>)
 8012a4c:	781b      	ldrb	r3, [r3, #0]
 8012a4e:	4618      	mov	r0, r3
 8012a50:	4b6a      	ldr	r3, [pc, #424]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	2200      	movs	r2, #0
 8012a56:	4619      	mov	r1, r3
 8012a58:	f7fc face 	bl	800eff8 <fm_factory_modify_date>
 8012a5c:	e059      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == HOUR)
 8012a5e:	4b6a      	ldr	r3, [pc, #424]	; (8012c08 <fm_menu_config_date_hour+0x504>)
 8012a60:	781b      	ldrb	r3, [r3, #0]
 8012a62:	2b03      	cmp	r3, #3
 8012a64:	d119      	bne.n	8012a9a <fm_menu_config_date_hour+0x396>
                {
                    if (hour_enum < HOUR_23)
 8012a66:	4b69      	ldr	r3, [pc, #420]	; (8012c0c <fm_menu_config_date_hour+0x508>)
 8012a68:	781b      	ldrb	r3, [r3, #0]
 8012a6a:	2b16      	cmp	r3, #22
 8012a6c:	d80b      	bhi.n	8012a86 <fm_menu_config_date_hour+0x382>
                    {
                        fm_factory_modify_time(hour_enum + 1, minute_enum,
 8012a6e:	4b67      	ldr	r3, [pc, #412]	; (8012c0c <fm_menu_config_date_hour+0x508>)
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	3301      	adds	r3, #1
 8012a74:	4a66      	ldr	r2, [pc, #408]	; (8012c10 <fm_menu_config_date_hour+0x50c>)
 8012a76:	7812      	ldrb	r2, [r2, #0]
 8012a78:	4611      	mov	r1, r2
 8012a7a:	4a66      	ldr	r2, [pc, #408]	; (8012c14 <fm_menu_config_date_hour+0x510>)
 8012a7c:	7812      	ldrb	r2, [r2, #0]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7fc fd96 	bl	800f5b0 <fm_factory_modify_time>
 8012a84:	e045      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_0, minute_enum,
 8012a86:	4b62      	ldr	r3, [pc, #392]	; (8012c10 <fm_menu_config_date_hour+0x50c>)
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	4619      	mov	r1, r3
 8012a8c:	4b61      	ldr	r3, [pc, #388]	; (8012c14 <fm_menu_config_date_hour+0x510>)
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	461a      	mov	r2, r3
 8012a92:	2000      	movs	r0, #0
 8012a94:	f7fc fd8c 	bl	800f5b0 <fm_factory_modify_time>
 8012a98:	e03b      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                }
                else if (field == MINUTE)
 8012a9a:	4b5b      	ldr	r3, [pc, #364]	; (8012c08 <fm_menu_config_date_hour+0x504>)
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	2b04      	cmp	r3, #4
 8012aa0:	d119      	bne.n	8012ad6 <fm_menu_config_date_hour+0x3d2>
                {
                    if (minute_enum < MINU_59)
 8012aa2:	4b5b      	ldr	r3, [pc, #364]	; (8012c10 <fm_menu_config_date_hour+0x50c>)
 8012aa4:	781b      	ldrb	r3, [r3, #0]
 8012aa6:	2b3a      	cmp	r3, #58	; 0x3a
 8012aa8:	d80b      	bhi.n	8012ac2 <fm_menu_config_date_hour+0x3be>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum + 1,
 8012aaa:	4b58      	ldr	r3, [pc, #352]	; (8012c0c <fm_menu_config_date_hour+0x508>)
 8012aac:	781b      	ldrb	r3, [r3, #0]
 8012aae:	4618      	mov	r0, r3
 8012ab0:	4b57      	ldr	r3, [pc, #348]	; (8012c10 <fm_menu_config_date_hour+0x50c>)
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	3301      	adds	r3, #1
 8012ab6:	4a57      	ldr	r2, [pc, #348]	; (8012c14 <fm_menu_config_date_hour+0x510>)
 8012ab8:	7812      	ldrb	r2, [r2, #0]
 8012aba:	4619      	mov	r1, r3
 8012abc:	f7fc fd78 	bl	800f5b0 <fm_factory_modify_time>
 8012ac0:	e027      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_0, second_enum);
 8012ac2:	4b52      	ldr	r3, [pc, #328]	; (8012c0c <fm_menu_config_date_hour+0x508>)
 8012ac4:	781b      	ldrb	r3, [r3, #0]
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	4b52      	ldr	r3, [pc, #328]	; (8012c14 <fm_menu_config_date_hour+0x510>)
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	461a      	mov	r2, r3
 8012ace:	2100      	movs	r1, #0
 8012ad0:	f7fc fd6e 	bl	800f5b0 <fm_factory_modify_time>
 8012ad4:	e01d      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if (field == SECOND)
 8012ad6:	4b4c      	ldr	r3, [pc, #304]	; (8012c08 <fm_menu_config_date_hour+0x504>)
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	2b05      	cmp	r3, #5
 8012adc:	d119      	bne.n	8012b12 <fm_menu_config_date_hour+0x40e>
                {
                    if (second_enum < SEC_59)
 8012ade:	4b4d      	ldr	r3, [pc, #308]	; (8012c14 <fm_menu_config_date_hour+0x510>)
 8012ae0:	781b      	ldrb	r3, [r3, #0]
 8012ae2:	2b3a      	cmp	r3, #58	; 0x3a
 8012ae4:	d80c      	bhi.n	8012b00 <fm_menu_config_date_hour+0x3fc>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 8012ae6:	4b49      	ldr	r3, [pc, #292]	; (8012c0c <fm_menu_config_date_hour+0x508>)
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	4618      	mov	r0, r3
 8012aec:	4b48      	ldr	r3, [pc, #288]	; (8012c10 <fm_menu_config_date_hour+0x50c>)
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	4619      	mov	r1, r3
 8012af2:	4b48      	ldr	r3, [pc, #288]	; (8012c14 <fm_menu_config_date_hour+0x510>)
 8012af4:	781b      	ldrb	r3, [r3, #0]
 8012af6:	3301      	adds	r3, #1
 8012af8:	461a      	mov	r2, r3
 8012afa:	f7fc fd59 	bl	800f5b0 <fm_factory_modify_time>
 8012afe:	e008      	b.n	8012b12 <fm_menu_config_date_hour+0x40e>
                        second_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_0);
 8012b00:	4b42      	ldr	r3, [pc, #264]	; (8012c0c <fm_menu_config_date_hour+0x508>)
 8012b02:	781b      	ldrb	r3, [r3, #0]
 8012b04:	4618      	mov	r0, r3
 8012b06:	4b42      	ldr	r3, [pc, #264]	; (8012c10 <fm_menu_config_date_hour+0x50c>)
 8012b08:	781b      	ldrb	r3, [r3, #0]
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	f7fc fd4f 	bl	800f5b0 <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 8012b12:	2301      	movs	r3, #1
 8012b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012b18:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	4619      	mov	r1, r3
 8012b20:	483d      	ldr	r0, [pc, #244]	; (8012c18 <fm_menu_config_date_hour+0x514>)
 8012b22:	f7fb fc8f 	bl	800e444 <_txe_queue_send>
            }
        break;
 8012b26:	e208      	b.n	8012f3a <fm_menu_config_date_hour+0x836>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8012b28:	4b3c      	ldr	r3, [pc, #240]	; (8012c1c <fm_menu_config_date_hour+0x518>)
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f000 8206 	beq.w	8012f3e <fm_menu_config_date_hour+0x83a>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if (field == DAY)
 8012b32:	4b35      	ldr	r3, [pc, #212]	; (8012c08 <fm_menu_config_date_hour+0x504>)
 8012b34:	781b      	ldrb	r3, [r3, #0]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	f040 80ad 	bne.w	8012c96 <fm_menu_config_date_hour+0x592>
                {
                    if (month_enum == JANUARY || month_enum == MARCH
 8012b3c:	4b2f      	ldr	r3, [pc, #188]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012b3e:	781b      	ldrb	r3, [r3, #0]
 8012b40:	2b01      	cmp	r3, #1
 8012b42:	d017      	beq.n	8012b74 <fm_menu_config_date_hour+0x470>
 8012b44:	4b2d      	ldr	r3, [pc, #180]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	2b03      	cmp	r3, #3
 8012b4a:	d013      	beq.n	8012b74 <fm_menu_config_date_hour+0x470>
                    || month_enum == MAY || month_enum == JULY
 8012b4c:	4b2b      	ldr	r3, [pc, #172]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012b4e:	781b      	ldrb	r3, [r3, #0]
 8012b50:	2b05      	cmp	r3, #5
 8012b52:	d00f      	beq.n	8012b74 <fm_menu_config_date_hour+0x470>
 8012b54:	4b29      	ldr	r3, [pc, #164]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012b56:	781b      	ldrb	r3, [r3, #0]
 8012b58:	2b07      	cmp	r3, #7
 8012b5a:	d00b      	beq.n	8012b74 <fm_menu_config_date_hour+0x470>
                    || month_enum == AUGUST || month_enum == OCTOBER
 8012b5c:	4b27      	ldr	r3, [pc, #156]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012b5e:	781b      	ldrb	r3, [r3, #0]
 8012b60:	2b08      	cmp	r3, #8
 8012b62:	d007      	beq.n	8012b74 <fm_menu_config_date_hour+0x470>
 8012b64:	4b25      	ldr	r3, [pc, #148]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	2b0a      	cmp	r3, #10
 8012b6a:	d003      	beq.n	8012b74 <fm_menu_config_date_hour+0x470>
                    || month_enum == DECEMBER)
 8012b6c:	4b23      	ldr	r3, [pc, #140]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	2b0c      	cmp	r3, #12
 8012b72:	d119      	bne.n	8012ba8 <fm_menu_config_date_hour+0x4a4>
                    {
                        if (day_enum > DAY_1)
 8012b74:	4b23      	ldr	r3, [pc, #140]	; (8012c04 <fm_menu_config_date_hour+0x500>)
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	2b01      	cmp	r3, #1
 8012b7a:	d90b      	bls.n	8012b94 <fm_menu_config_date_hour+0x490>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012b7c:	4b21      	ldr	r3, [pc, #132]	; (8012c04 <fm_menu_config_date_hour+0x500>)
 8012b7e:	781b      	ldrb	r3, [r3, #0]
 8012b80:	3b01      	subs	r3, #1
 8012b82:	4a1e      	ldr	r2, [pc, #120]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012b84:	7812      	ldrb	r2, [r2, #0]
 8012b86:	4611      	mov	r1, r2
 8012b88:	4a1d      	ldr	r2, [pc, #116]	; (8012c00 <fm_menu_config_date_hour+0x4fc>)
 8012b8a:	7812      	ldrb	r2, [r2, #0]
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7fc fa33 	bl	800eff8 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012b92:	e166      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_31, month_enum,
 8012b94:	4b19      	ldr	r3, [pc, #100]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	4619      	mov	r1, r3
 8012b9a:	4b19      	ldr	r3, [pc, #100]	; (8012c00 <fm_menu_config_date_hour+0x4fc>)
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	461a      	mov	r2, r3
 8012ba0:	201f      	movs	r0, #31
 8012ba2:	f7fc fa29 	bl	800eff8 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012ba6:	e15c      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                    }
                    else if (month_enum == APRIL || month_enum == JUNE
 8012ba8:	4b14      	ldr	r3, [pc, #80]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012baa:	781b      	ldrb	r3, [r3, #0]
 8012bac:	2b04      	cmp	r3, #4
 8012bae:	d00b      	beq.n	8012bc8 <fm_menu_config_date_hour+0x4c4>
 8012bb0:	4b12      	ldr	r3, [pc, #72]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	2b06      	cmp	r3, #6
 8012bb6:	d007      	beq.n	8012bc8 <fm_menu_config_date_hour+0x4c4>
                    || month_enum == SEPTEMBER || month_enum == NOVEMBER)
 8012bb8:	4b10      	ldr	r3, [pc, #64]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	2b09      	cmp	r3, #9
 8012bbe:	d003      	beq.n	8012bc8 <fm_menu_config_date_hour+0x4c4>
 8012bc0:	4b0e      	ldr	r3, [pc, #56]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	2b0b      	cmp	r3, #11
 8012bc6:	d12b      	bne.n	8012c20 <fm_menu_config_date_hour+0x51c>
                    {
                        if (day_enum > DAY_1)
 8012bc8:	4b0e      	ldr	r3, [pc, #56]	; (8012c04 <fm_menu_config_date_hour+0x500>)
 8012bca:	781b      	ldrb	r3, [r3, #0]
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	d90b      	bls.n	8012be8 <fm_menu_config_date_hour+0x4e4>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012bd0:	4b0c      	ldr	r3, [pc, #48]	; (8012c04 <fm_menu_config_date_hour+0x500>)
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	3b01      	subs	r3, #1
 8012bd6:	4a09      	ldr	r2, [pc, #36]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012bd8:	7812      	ldrb	r2, [r2, #0]
 8012bda:	4611      	mov	r1, r2
 8012bdc:	4a08      	ldr	r2, [pc, #32]	; (8012c00 <fm_menu_config_date_hour+0x4fc>)
 8012bde:	7812      	ldrb	r2, [r2, #0]
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7fc fa09 	bl	800eff8 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012be6:	e13c      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_30, month_enum,
 8012be8:	4b04      	ldr	r3, [pc, #16]	; (8012bfc <fm_menu_config_date_hour+0x4f8>)
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	4619      	mov	r1, r3
 8012bee:	4b04      	ldr	r3, [pc, #16]	; (8012c00 <fm_menu_config_date_hour+0x4fc>)
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	201e      	movs	r0, #30
 8012bf6:	f7fc f9ff 	bl	800eff8 <fm_factory_modify_date>
                        if (day_enum > DAY_1)
 8012bfa:	e132      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
 8012bfc:	20001e0f 	.word	0x20001e0f
 8012c00:	20001e10 	.word	0x20001e10
 8012c04:	20001e0e 	.word	0x20001e0e
 8012c08:	20001e0d 	.word	0x20001e0d
 8012c0c:	20001e11 	.word	0x20001e11
 8012c10:	20001e12 	.word	0x20001e12
 8012c14:	20001e13 	.word	0x20001e13
 8012c18:	20001388 	.word	0x20001388
 8012c1c:	20001e0a 	.word	0x20001e0a
                            year_enum);
                        }
                    }
                    else
                    {
                        if (year_enum % YEAR_4 == 0)
 8012c20:	4b95      	ldr	r3, [pc, #596]	; (8012e78 <fm_menu_config_date_hour+0x774>)
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	f003 0303 	and.w	r3, r3, #3
 8012c28:	b2db      	uxtb	r3, r3
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d119      	bne.n	8012c62 <fm_menu_config_date_hour+0x55e>
                        {
                            if (day_enum > DAY_1)
 8012c2e:	4b93      	ldr	r3, [pc, #588]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	2b01      	cmp	r3, #1
 8012c34:	d90b      	bls.n	8012c4e <fm_menu_config_date_hour+0x54a>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 8012c36:	4b91      	ldr	r3, [pc, #580]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012c38:	781b      	ldrb	r3, [r3, #0]
 8012c3a:	3b01      	subs	r3, #1
 8012c3c:	4a90      	ldr	r2, [pc, #576]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012c3e:	7812      	ldrb	r2, [r2, #0]
 8012c40:	4611      	mov	r1, r2
 8012c42:	4a8d      	ldr	r2, [pc, #564]	; (8012e78 <fm_menu_config_date_hour+0x774>)
 8012c44:	7812      	ldrb	r2, [r2, #0]
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7fc f9d6 	bl	800eff8 <fm_factory_modify_date>
 8012c4c:	e109      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_29, month_enum,
 8012c4e:	4b8c      	ldr	r3, [pc, #560]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012c50:	781b      	ldrb	r3, [r3, #0]
 8012c52:	4619      	mov	r1, r3
 8012c54:	4b88      	ldr	r3, [pc, #544]	; (8012e78 <fm_menu_config_date_hour+0x774>)
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	461a      	mov	r2, r3
 8012c5a:	201d      	movs	r0, #29
 8012c5c:	f7fc f9cc 	bl	800eff8 <fm_factory_modify_date>
 8012c60:	e0ff      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if (day_enum > DAY_1)
 8012c62:	4b86      	ldr	r3, [pc, #536]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012c64:	781b      	ldrb	r3, [r3, #0]
 8012c66:	2b01      	cmp	r3, #1
 8012c68:	d90b      	bls.n	8012c82 <fm_menu_config_date_hour+0x57e>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 8012c6a:	4b84      	ldr	r3, [pc, #528]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012c6c:	781b      	ldrb	r3, [r3, #0]
 8012c6e:	3b01      	subs	r3, #1
 8012c70:	4a83      	ldr	r2, [pc, #524]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012c72:	7812      	ldrb	r2, [r2, #0]
 8012c74:	4611      	mov	r1, r2
 8012c76:	4a80      	ldr	r2, [pc, #512]	; (8012e78 <fm_menu_config_date_hour+0x774>)
 8012c78:	7812      	ldrb	r2, [r2, #0]
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7fc f9bc 	bl	800eff8 <fm_factory_modify_date>
 8012c80:	e0ef      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_28, month_enum,
 8012c82:	4b7f      	ldr	r3, [pc, #508]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012c84:	781b      	ldrb	r3, [r3, #0]
 8012c86:	4619      	mov	r1, r3
 8012c88:	4b7b      	ldr	r3, [pc, #492]	; (8012e78 <fm_menu_config_date_hour+0x774>)
 8012c8a:	781b      	ldrb	r3, [r3, #0]
 8012c8c:	461a      	mov	r2, r3
 8012c8e:	201c      	movs	r0, #28
 8012c90:	f7fc f9b2 	bl	800eff8 <fm_factory_modify_date>
 8012c94:	e0e5      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                    }
                }
                else if (field == MONTH)
 8012c96:	4b7b      	ldr	r3, [pc, #492]	; (8012e84 <fm_menu_config_date_hour+0x780>)
 8012c98:	781b      	ldrb	r3, [r3, #0]
 8012c9a:	2b01      	cmp	r3, #1
 8012c9c:	d156      	bne.n	8012d4c <fm_menu_config_date_hour+0x648>
                {
                    if (month_enum > JANUARY)
 8012c9e:	4b78      	ldr	r3, [pc, #480]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	2b01      	cmp	r3, #1
 8012ca4:	d948      	bls.n	8012d38 <fm_menu_config_date_hour+0x634>
                    {
                        if ((month_enum - 1 == APRIL || month_enum - 1 == JUNE
 8012ca6:	4b76      	ldr	r3, [pc, #472]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	2b05      	cmp	r3, #5
 8012cac:	d00b      	beq.n	8012cc6 <fm_menu_config_date_hour+0x5c2>
 8012cae:	4b74      	ldr	r3, [pc, #464]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	2b07      	cmp	r3, #7
 8012cb4:	d007      	beq.n	8012cc6 <fm_menu_config_date_hour+0x5c2>
                        || month_enum - 1 == SEPTEMBER
 8012cb6:	4b72      	ldr	r3, [pc, #456]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012cb8:	781b      	ldrb	r3, [r3, #0]
 8012cba:	2b0a      	cmp	r3, #10
 8012cbc:	d003      	beq.n	8012cc6 <fm_menu_config_date_hour+0x5c2>
                        || month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 8012cbe:	4b70      	ldr	r3, [pc, #448]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	2b0c      	cmp	r3, #12
 8012cc4:	d107      	bne.n	8012cd6 <fm_menu_config_date_hour+0x5d2>
 8012cc6:	4b6d      	ldr	r3, [pc, #436]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	2b1e      	cmp	r3, #30
 8012ccc:	d903      	bls.n	8012cd6 <fm_menu_config_date_hour+0x5d2>
                        {
                            day_enum = DAY_30;
 8012cce:	4b6b      	ldr	r3, [pc, #428]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012cd0:	221e      	movs	r2, #30
 8012cd2:	701a      	strb	r2, [r3, #0]
 8012cd4:	e024      	b.n	8012d20 <fm_menu_config_date_hour+0x61c>
                        }
                        else if ((month_enum - 1 == FEBRUARY)
 8012cd6:	4b6a      	ldr	r3, [pc, #424]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	2b03      	cmp	r3, #3
 8012cdc:	d10e      	bne.n	8012cfc <fm_menu_config_date_hour+0x5f8>
                        && (year_enum % YEAR_4 == 0) && (day_enum > DAY_29))
 8012cde:	4b66      	ldr	r3, [pc, #408]	; (8012e78 <fm_menu_config_date_hour+0x774>)
 8012ce0:	781b      	ldrb	r3, [r3, #0]
 8012ce2:	f003 0303 	and.w	r3, r3, #3
 8012ce6:	b2db      	uxtb	r3, r3
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d107      	bne.n	8012cfc <fm_menu_config_date_hour+0x5f8>
 8012cec:	4b63      	ldr	r3, [pc, #396]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	2b1d      	cmp	r3, #29
 8012cf2:	d903      	bls.n	8012cfc <fm_menu_config_date_hour+0x5f8>
                        {
                            day_enum = DAY_29;
 8012cf4:	4b61      	ldr	r3, [pc, #388]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012cf6:	221d      	movs	r2, #29
 8012cf8:	701a      	strb	r2, [r3, #0]
 8012cfa:	e011      	b.n	8012d20 <fm_menu_config_date_hour+0x61c>
                        }
                        else if ((month_enum - 1 == FEBRUARY)
 8012cfc:	4b60      	ldr	r3, [pc, #384]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	2b03      	cmp	r3, #3
 8012d02:	d10d      	bne.n	8012d20 <fm_menu_config_date_hour+0x61c>
                        && (year_enum % YEAR_4 != 0) && (day_enum > DAY_28))
 8012d04:	4b5c      	ldr	r3, [pc, #368]	; (8012e78 <fm_menu_config_date_hour+0x774>)
 8012d06:	781b      	ldrb	r3, [r3, #0]
 8012d08:	f003 0303 	and.w	r3, r3, #3
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d006      	beq.n	8012d20 <fm_menu_config_date_hour+0x61c>
 8012d12:	4b5a      	ldr	r3, [pc, #360]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012d14:	781b      	ldrb	r3, [r3, #0]
 8012d16:	2b1c      	cmp	r3, #28
 8012d18:	d902      	bls.n	8012d20 <fm_menu_config_date_hour+0x61c>
                        {
                            day_enum = DAY_28;
 8012d1a:	4b58      	ldr	r3, [pc, #352]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012d1c:	221c      	movs	r2, #28
 8012d1e:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum - 1,
 8012d20:	4b56      	ldr	r3, [pc, #344]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	4618      	mov	r0, r3
 8012d26:	4b56      	ldr	r3, [pc, #344]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	3b01      	subs	r3, #1
 8012d2c:	4a52      	ldr	r2, [pc, #328]	; (8012e78 <fm_menu_config_date_hour+0x774>)
 8012d2e:	7812      	ldrb	r2, [r2, #0]
 8012d30:	4619      	mov	r1, r3
 8012d32:	f7fc f961 	bl	800eff8 <fm_factory_modify_date>
 8012d36:	e094      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, DECEMBER, year_enum);
 8012d38:	4b50      	ldr	r3, [pc, #320]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	4b4e      	ldr	r3, [pc, #312]	; (8012e78 <fm_menu_config_date_hour+0x774>)
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	461a      	mov	r2, r3
 8012d44:	210c      	movs	r1, #12
 8012d46:	f7fc f957 	bl	800eff8 <fm_factory_modify_date>
 8012d4a:	e08a      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == YEAR)
 8012d4c:	4b4d      	ldr	r3, [pc, #308]	; (8012e84 <fm_menu_config_date_hour+0x780>)
 8012d4e:	781b      	ldrb	r3, [r3, #0]
 8012d50:	2b02      	cmp	r3, #2
 8012d52:	d12c      	bne.n	8012dae <fm_menu_config_date_hour+0x6aa>
                {
                    if (year_enum > YEAR_0)
 8012d54:	4b48      	ldr	r3, [pc, #288]	; (8012e78 <fm_menu_config_date_hour+0x774>)
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d01e      	beq.n	8012d9a <fm_menu_config_date_hour+0x696>
                    {
                        if (((year_enum - 1) % YEAR_4 != YEAR_0)
 8012d5c:	4b46      	ldr	r3, [pc, #280]	; (8012e78 <fm_menu_config_date_hour+0x774>)
 8012d5e:	781b      	ldrb	r3, [r3, #0]
 8012d60:	3b01      	subs	r3, #1
 8012d62:	f003 0303 	and.w	r3, r3, #3
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d00a      	beq.n	8012d80 <fm_menu_config_date_hour+0x67c>
                        && (month_enum == FEBRUARY) && (day_enum > DAY_28))
 8012d6a:	4b45      	ldr	r3, [pc, #276]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012d6c:	781b      	ldrb	r3, [r3, #0]
 8012d6e:	2b02      	cmp	r3, #2
 8012d70:	d106      	bne.n	8012d80 <fm_menu_config_date_hour+0x67c>
 8012d72:	4b42      	ldr	r3, [pc, #264]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	2b1c      	cmp	r3, #28
 8012d78:	d902      	bls.n	8012d80 <fm_menu_config_date_hour+0x67c>
                        {
                            day_enum = DAY_28;
 8012d7a:	4b40      	ldr	r3, [pc, #256]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012d7c:	221c      	movs	r2, #28
 8012d7e:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 8012d80:	4b3e      	ldr	r3, [pc, #248]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012d82:	781b      	ldrb	r3, [r3, #0]
 8012d84:	4618      	mov	r0, r3
 8012d86:	4b3e      	ldr	r3, [pc, #248]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	4b3a      	ldr	r3, [pc, #232]	; (8012e78 <fm_menu_config_date_hour+0x774>)
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	3b01      	subs	r3, #1
 8012d92:	461a      	mov	r2, r3
 8012d94:	f7fc f930 	bl	800eff8 <fm_factory_modify_date>
 8012d98:	e063      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                        year_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_99);
 8012d9a:	4b38      	ldr	r3, [pc, #224]	; (8012e7c <fm_menu_config_date_hour+0x778>)
 8012d9c:	781b      	ldrb	r3, [r3, #0]
 8012d9e:	4618      	mov	r0, r3
 8012da0:	4b37      	ldr	r3, [pc, #220]	; (8012e80 <fm_menu_config_date_hour+0x77c>)
 8012da2:	781b      	ldrb	r3, [r3, #0]
 8012da4:	2263      	movs	r2, #99	; 0x63
 8012da6:	4619      	mov	r1, r3
 8012da8:	f7fc f926 	bl	800eff8 <fm_factory_modify_date>
 8012dac:	e059      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == HOUR)
 8012dae:	4b35      	ldr	r3, [pc, #212]	; (8012e84 <fm_menu_config_date_hour+0x780>)
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	2b03      	cmp	r3, #3
 8012db4:	d119      	bne.n	8012dea <fm_menu_config_date_hour+0x6e6>
                {
                    if (hour_enum > HOUR_0)
 8012db6:	4b34      	ldr	r3, [pc, #208]	; (8012e88 <fm_menu_config_date_hour+0x784>)
 8012db8:	781b      	ldrb	r3, [r3, #0]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d00b      	beq.n	8012dd6 <fm_menu_config_date_hour+0x6d2>
                    {
                        fm_factory_modify_time(hour_enum - 1, minute_enum,
 8012dbe:	4b32      	ldr	r3, [pc, #200]	; (8012e88 <fm_menu_config_date_hour+0x784>)
 8012dc0:	781b      	ldrb	r3, [r3, #0]
 8012dc2:	3b01      	subs	r3, #1
 8012dc4:	4a31      	ldr	r2, [pc, #196]	; (8012e8c <fm_menu_config_date_hour+0x788>)
 8012dc6:	7812      	ldrb	r2, [r2, #0]
 8012dc8:	4611      	mov	r1, r2
 8012dca:	4a31      	ldr	r2, [pc, #196]	; (8012e90 <fm_menu_config_date_hour+0x78c>)
 8012dcc:	7812      	ldrb	r2, [r2, #0]
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7fc fbee 	bl	800f5b0 <fm_factory_modify_time>
 8012dd4:	e045      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_23, minute_enum,
 8012dd6:	4b2d      	ldr	r3, [pc, #180]	; (8012e8c <fm_menu_config_date_hour+0x788>)
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	4619      	mov	r1, r3
 8012ddc:	4b2c      	ldr	r3, [pc, #176]	; (8012e90 <fm_menu_config_date_hour+0x78c>)
 8012dde:	781b      	ldrb	r3, [r3, #0]
 8012de0:	461a      	mov	r2, r3
 8012de2:	2017      	movs	r0, #23
 8012de4:	f7fc fbe4 	bl	800f5b0 <fm_factory_modify_time>
 8012de8:	e03b      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                }
                else if (field == MINUTE)
 8012dea:	4b26      	ldr	r3, [pc, #152]	; (8012e84 <fm_menu_config_date_hour+0x780>)
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	2b04      	cmp	r3, #4
 8012df0:	d119      	bne.n	8012e26 <fm_menu_config_date_hour+0x722>
                {
                    if (minute_enum > MINU_0)
 8012df2:	4b26      	ldr	r3, [pc, #152]	; (8012e8c <fm_menu_config_date_hour+0x788>)
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d00b      	beq.n	8012e12 <fm_menu_config_date_hour+0x70e>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum - 1,
 8012dfa:	4b23      	ldr	r3, [pc, #140]	; (8012e88 <fm_menu_config_date_hour+0x784>)
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	4b22      	ldr	r3, [pc, #136]	; (8012e8c <fm_menu_config_date_hour+0x788>)
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	3b01      	subs	r3, #1
 8012e06:	4a22      	ldr	r2, [pc, #136]	; (8012e90 <fm_menu_config_date_hour+0x78c>)
 8012e08:	7812      	ldrb	r2, [r2, #0]
 8012e0a:	4619      	mov	r1, r3
 8012e0c:	f7fc fbd0 	bl	800f5b0 <fm_factory_modify_time>
 8012e10:	e027      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_59, second_enum);
 8012e12:	4b1d      	ldr	r3, [pc, #116]	; (8012e88 <fm_menu_config_date_hour+0x784>)
 8012e14:	781b      	ldrb	r3, [r3, #0]
 8012e16:	4618      	mov	r0, r3
 8012e18:	4b1d      	ldr	r3, [pc, #116]	; (8012e90 <fm_menu_config_date_hour+0x78c>)
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	461a      	mov	r2, r3
 8012e1e:	213b      	movs	r1, #59	; 0x3b
 8012e20:	f7fc fbc6 	bl	800f5b0 <fm_factory_modify_time>
 8012e24:	e01d      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if (field == SECOND)
 8012e26:	4b17      	ldr	r3, [pc, #92]	; (8012e84 <fm_menu_config_date_hour+0x780>)
 8012e28:	781b      	ldrb	r3, [r3, #0]
 8012e2a:	2b05      	cmp	r3, #5
 8012e2c:	d119      	bne.n	8012e62 <fm_menu_config_date_hour+0x75e>
                {
                    if (second_enum > SEC_0)
 8012e2e:	4b18      	ldr	r3, [pc, #96]	; (8012e90 <fm_menu_config_date_hour+0x78c>)
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d00c      	beq.n	8012e50 <fm_menu_config_date_hour+0x74c>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 8012e36:	4b14      	ldr	r3, [pc, #80]	; (8012e88 <fm_menu_config_date_hour+0x784>)
 8012e38:	781b      	ldrb	r3, [r3, #0]
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	4b13      	ldr	r3, [pc, #76]	; (8012e8c <fm_menu_config_date_hour+0x788>)
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	4619      	mov	r1, r3
 8012e42:	4b13      	ldr	r3, [pc, #76]	; (8012e90 <fm_menu_config_date_hour+0x78c>)
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	3b01      	subs	r3, #1
 8012e48:	461a      	mov	r2, r3
 8012e4a:	f7fc fbb1 	bl	800f5b0 <fm_factory_modify_time>
 8012e4e:	e008      	b.n	8012e62 <fm_menu_config_date_hour+0x75e>
                        second_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_59);
 8012e50:	4b0d      	ldr	r3, [pc, #52]	; (8012e88 <fm_menu_config_date_hour+0x784>)
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	4618      	mov	r0, r3
 8012e56:	4b0d      	ldr	r3, [pc, #52]	; (8012e8c <fm_menu_config_date_hour+0x788>)
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	223b      	movs	r2, #59	; 0x3b
 8012e5c:	4619      	mov	r1, r3
 8012e5e:	f7fc fba7 	bl	800f5b0 <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 8012e62:	2301      	movs	r3, #1
 8012e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012e68:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	4619      	mov	r1, r3
 8012e70:	4808      	ldr	r0, [pc, #32]	; (8012e94 <fm_menu_config_date_hour+0x790>)
 8012e72:	f7fb fae7 	bl	800e444 <_txe_queue_send>
            }
        break;
 8012e76:	e062      	b.n	8012f3e <fm_menu_config_date_hour+0x83a>
 8012e78:	20001e10 	.word	0x20001e10
 8012e7c:	20001e0e 	.word	0x20001e0e
 8012e80:	20001e0f 	.word	0x20001e0f
 8012e84:	20001e0d 	.word	0x20001e0d
 8012e88:	20001e11 	.word	0x20001e11
 8012e8c:	20001e12 	.word	0x20001e12
 8012e90:	20001e13 	.word	0x20001e13
 8012e94:	20001388 	.word	0x20001388
        case EVENT_KEY_ENTER:
            if (correct_password)
 8012e98:	4b5b      	ldr	r3, [pc, #364]	; (8013008 <fm_menu_config_date_hour+0x904>)
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d050      	beq.n	8012f42 <fm_menu_config_date_hour+0x83e>
            {
                /*
                 * Se cambia qué parámetro se va a modificar según cual estaba
                 * seleccionado para modificarse actualmente.
                 */
                if (field == DAY)
 8012ea0:	4b5a      	ldr	r3, [pc, #360]	; (801300c <fm_menu_config_date_hour+0x908>)
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d103      	bne.n	8012eb0 <fm_menu_config_date_hour+0x7ac>
                {
                    field = MONTH;
 8012ea8:	4b58      	ldr	r3, [pc, #352]	; (801300c <fm_menu_config_date_hour+0x908>)
 8012eaa:	2201      	movs	r2, #1
 8012eac:	701a      	strb	r2, [r3, #0]
 8012eae:	e026      	b.n	8012efe <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == MONTH)
 8012eb0:	4b56      	ldr	r3, [pc, #344]	; (801300c <fm_menu_config_date_hour+0x908>)
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	2b01      	cmp	r3, #1
 8012eb6:	d103      	bne.n	8012ec0 <fm_menu_config_date_hour+0x7bc>
                {
                    field = YEAR;
 8012eb8:	4b54      	ldr	r3, [pc, #336]	; (801300c <fm_menu_config_date_hour+0x908>)
 8012eba:	2202      	movs	r2, #2
 8012ebc:	701a      	strb	r2, [r3, #0]
 8012ebe:	e01e      	b.n	8012efe <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == YEAR)
 8012ec0:	4b52      	ldr	r3, [pc, #328]	; (801300c <fm_menu_config_date_hour+0x908>)
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	2b02      	cmp	r3, #2
 8012ec6:	d103      	bne.n	8012ed0 <fm_menu_config_date_hour+0x7cc>
                {
                    field = HOUR;
 8012ec8:	4b50      	ldr	r3, [pc, #320]	; (801300c <fm_menu_config_date_hour+0x908>)
 8012eca:	2203      	movs	r2, #3
 8012ecc:	701a      	strb	r2, [r3, #0]
 8012ece:	e016      	b.n	8012efe <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == HOUR)
 8012ed0:	4b4e      	ldr	r3, [pc, #312]	; (801300c <fm_menu_config_date_hour+0x908>)
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	2b03      	cmp	r3, #3
 8012ed6:	d103      	bne.n	8012ee0 <fm_menu_config_date_hour+0x7dc>
                {
                    field = MINUTE;
 8012ed8:	4b4c      	ldr	r3, [pc, #304]	; (801300c <fm_menu_config_date_hour+0x908>)
 8012eda:	2204      	movs	r2, #4
 8012edc:	701a      	strb	r2, [r3, #0]
 8012ede:	e00e      	b.n	8012efe <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == MINUTE)
 8012ee0:	4b4a      	ldr	r3, [pc, #296]	; (801300c <fm_menu_config_date_hour+0x908>)
 8012ee2:	781b      	ldrb	r3, [r3, #0]
 8012ee4:	2b04      	cmp	r3, #4
 8012ee6:	d103      	bne.n	8012ef0 <fm_menu_config_date_hour+0x7ec>
                {
                    field = SECOND;
 8012ee8:	4b48      	ldr	r3, [pc, #288]	; (801300c <fm_menu_config_date_hour+0x908>)
 8012eea:	2205      	movs	r2, #5
 8012eec:	701a      	strb	r2, [r3, #0]
 8012eee:	e006      	b.n	8012efe <fm_menu_config_date_hour+0x7fa>
                }
                else if (field == SECOND)
 8012ef0:	4b46      	ldr	r3, [pc, #280]	; (801300c <fm_menu_config_date_hour+0x908>)
 8012ef2:	781b      	ldrb	r3, [r3, #0]
 8012ef4:	2b05      	cmp	r3, #5
 8012ef6:	d102      	bne.n	8012efe <fm_menu_config_date_hour+0x7fa>
                {
                    field = DAY;
 8012ef8:	4b44      	ldr	r3, [pc, #272]	; (801300c <fm_menu_config_date_hour+0x908>)
 8012efa:	2200      	movs	r2, #0
 8012efc:	701a      	strb	r2, [r3, #0]
                }
                event_now = EVENT_LCD_REFRESH;
 8012efe:	2301      	movs	r3, #1
 8012f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012f04:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012f08:	2200      	movs	r2, #0
 8012f0a:	4619      	mov	r1, r3
 8012f0c:	4840      	ldr	r0, [pc, #256]	; (8013010 <fm_menu_config_date_hour+0x90c>)
 8012f0e:	f7fb fa99 	bl	800e444 <_txe_queue_send>
            }
        break;
 8012f12:	e016      	b.n	8012f42 <fm_menu_config_date_hour+0x83e>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8012f14:	4b3f      	ldr	r3, [pc, #252]	; (8013014 <fm_menu_config_date_hour+0x910>)
 8012f16:	2201      	movs	r2, #1
 8012f18:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8012f1a:	4b3f      	ldr	r3, [pc, #252]	; (8013018 <fm_menu_config_date_hour+0x914>)
 8012f1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            event_now = EVENT_LCD_REFRESH;
 8012f20:	2301      	movs	r3, #1
 8012f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012f26:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	4838      	ldr	r0, [pc, #224]	; (8013010 <fm_menu_config_date_hour+0x90c>)
 8012f30:	f7fb fa88 	bl	800e444 <_txe_queue_send>
        break;
 8012f34:	e006      	b.n	8012f44 <fm_menu_config_date_hour+0x840>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8012f36:	bf00      	nop
 8012f38:	e004      	b.n	8012f44 <fm_menu_config_date_hour+0x840>
        break;
 8012f3a:	bf00      	nop
 8012f3c:	e002      	b.n	8012f44 <fm_menu_config_date_hour+0x840>
        break;
 8012f3e:	bf00      	nop
 8012f40:	e000      	b.n	8012f44 <fm_menu_config_date_hour+0x840>
        break;
 8012f42:	bf00      	nop
    }

    previous_event = event_id;
 8012f44:	4a35      	ldr	r2, [pc, #212]	; (801301c <fm_menu_config_date_hour+0x918>)
 8012f46:	79fb      	ldrb	r3, [r7, #7]
 8012f48:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar fecha y hora\n";
 8012f4a:	4b35      	ldr	r3, [pc, #212]	; (8013020 <fm_menu_config_date_hour+0x91c>)
 8012f4c:	f107 0408 	add.w	r4, r7, #8
 8012f50:	461d      	mov	r5, r3
 8012f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012f5a:	c403      	stmia	r4!, {r0, r1}
 8012f5c:	7022      	strb	r2, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8012f5e:	f107 0308 	add.w	r3, r7, #8
 8012f62:	2119      	movs	r1, #25
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7fb fea9 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8012f6a:	4b2a      	ldr	r3, [pc, #168]	; (8013014 <fm_menu_config_date_hour+0x910>)
 8012f6c:	781b      	ldrb	r3, [r3, #0]
 8012f6e:	2b01      	cmp	r3, #1
 8012f70:	d143      	bne.n	8012ffa <fm_menu_config_date_hour+0x8f6>
    {
        if (correct_password)
 8012f72:	4b25      	ldr	r3, [pc, #148]	; (8013008 <fm_menu_config_date_hour+0x904>)
 8012f74:	781b      	ldrb	r3, [r3, #0]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d036      	beq.n	8012fe8 <fm_menu_config_date_hour+0x8e4>
             * encuentren corrompidos y se lea cualquier cosa. Para mas info de
             * esto ver el link siguiente:
             *
             * http://www.efton.sk/STM32/gotcha/g113.html
             */
            date_final.Date = day_enum;
 8012f7a:	4b2a      	ldr	r3, [pc, #168]	; (8013024 <fm_menu_config_date_hour+0x920>)
 8012f7c:	781b      	ldrb	r3, [r3, #0]
 8012f7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            date_final.Month = month_enum;
 8012f82:	4b29      	ldr	r3, [pc, #164]	; (8013028 <fm_menu_config_date_hour+0x924>)
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            date_final.Year = year_enum;
 8012f8a:	4b28      	ldr	r3, [pc, #160]	; (801302c <fm_menu_config_date_hour+0x928>)
 8012f8c:	781b      	ldrb	r3, [r3, #0]
 8012f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            date_final.WeekDay = RTC_WEEKDAY_FRIDAY;
 8012f92:	2305      	movs	r3, #5
 8012f94:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            HAL_RTC_SetDate(&hrtc, &date_final, RTC_FORMAT_BIN);
 8012f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	4619      	mov	r1, r3
 8012fa0:	4823      	ldr	r0, [pc, #140]	; (8013030 <fm_menu_config_date_hour+0x92c>)
 8012fa2:	f7f6 f8e7 	bl	8009174 <HAL_RTC_SetDate>

            /*
             * Idem que lo de la fecha escrito arriba, pero para la hora, y en
             * general siempre que se use la HAL completando estructuras.
             */
            time_final.Hours = hour_enum;
 8012fa6:	4b23      	ldr	r3, [pc, #140]	; (8013034 <fm_menu_config_date_hour+0x930>)
 8012fa8:	781b      	ldrb	r3, [r3, #0]
 8012faa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            time_final.Minutes = minute_enum;
 8012fae:	4b22      	ldr	r3, [pc, #136]	; (8013038 <fm_menu_config_date_hour+0x934>)
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            time_final.Seconds = second_enum;
 8012fb6:	4b21      	ldr	r3, [pc, #132]	; (801303c <fm_menu_config_date_hour+0x938>)
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            time_final.SecondFraction = 0;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	633b      	str	r3, [r7, #48]	; 0x30
            time_final.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	637b      	str	r3, [r7, #52]	; 0x34
            time_final.StoreOperation = RTC_STOREOPERATION_RESET;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	63bb      	str	r3, [r7, #56]	; 0x38
            time_final.SubSeconds = 0;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
            time_final.TimeFormat = RTC_HOURFORMAT12_AM;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            HAL_RTC_SetTime(&hrtc, &time_final, RTC_FORMAT_BIN);
 8012fd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012fd8:	2200      	movs	r2, #0
 8012fda:	4619      	mov	r1, r3
 8012fdc:	4814      	ldr	r0, [pc, #80]	; (8013030 <fm_menu_config_date_hour+0x92c>)
 8012fde:	f7f5 ffbb 	bl	8008f58 <HAL_RTC_SetTime>

            correct_password = 0;
 8012fe2:	4b09      	ldr	r3, [pc, #36]	; (8013008 <fm_menu_config_date_hour+0x904>)
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	701a      	strb	r2, [r3, #0]
        }
        in_configuration = 0;
 8012fe8:	4b15      	ldr	r3, [pc, #84]	; (8013040 <fm_menu_config_date_hour+0x93c>)
 8012fea:	2200      	movs	r2, #0
 8012fec:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8012fee:	4b15      	ldr	r3, [pc, #84]	; (8013044 <fm_menu_config_date_hour+0x940>)
 8012ff0:	2201      	movs	r2, #1
 8012ff2:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8012ff4:	4b07      	ldr	r3, [pc, #28]	; (8013014 <fm_menu_config_date_hour+0x910>)
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8012ffa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	37d0      	adds	r7, #208	; 0xd0
 8013002:	46bd      	mov	sp, r7
 8013004:	bdb0      	pop	{r4, r5, r7, pc}
 8013006:	bf00      	nop
 8013008:	20001e0a 	.word	0x20001e0a
 801300c:	20001e0d 	.word	0x20001e0d
 8013010:	20001388 	.word	0x20001388
 8013014:	20001e14 	.word	0x20001e14
 8013018:	08014655 	.word	0x08014655
 801301c:	20001e0b 	.word	0x20001e0b
 8013020:	080158b8 	.word	0x080158b8
 8013024:	20001e0e 	.word	0x20001e0e
 8013028:	20001e0f 	.word	0x20001e0f
 801302c:	20001e10 	.word	0x20001e10
 8013030:	200014f4 	.word	0x200014f4
 8013034:	20001e11 	.word	0x20001e11
 8013038:	20001e12 	.word	0x20001e12
 801303c:	20001e13 	.word	0x20001e13
 8013040:	20001e0c 	.word	0x20001e0c
 8013044:	20000141 	.word	0x20000141

08013048 <fm_menu_config_k_lin_1>:
 * @brief Función que imprime el menú del K linealizado 1.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_1(fm_event_t event_id)
{
 8013048:	b5b0      	push	{r4, r5, r7, lr}
 801304a:	b08c      	sub	sp, #48	; 0x30
 801304c:	af00      	add	r7, sp, #0
 801304e:	4603      	mov	r3, r0
 8013050:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 8013052:	4b51      	ldr	r3, [pc, #324]	; (8013198 <fm_menu_config_k_lin_1+0x150>)
 8013054:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8013056:	4b51      	ldr	r3, [pc, #324]	; (801319c <fm_menu_config_k_lin_1+0x154>)
 8013058:	781b      	ldrb	r3, [r3, #0]
 801305a:	2b01      	cmp	r3, #1
 801305c:	d104      	bne.n	8013068 <fm_menu_config_k_lin_1+0x20>
    {
        fm_lcd_clear();
 801305e:	f7fc fcca 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 8013062:	4b4e      	ldr	r3, [pc, #312]	; (801319c <fm_menu_config_k_lin_1+0x154>)
 8013064:	2200      	movs	r2, #0
 8013066:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_1, event_id, digit_lin_modify);
 8013068:	4b4d      	ldr	r3, [pc, #308]	; (80131a0 <fm_menu_config_k_lin_1+0x158>)
 801306a:	781a      	ldrb	r2, [r3, #0]
 801306c:	79fb      	ldrb	r3, [r7, #7]
 801306e:	4619      	mov	r1, r3
 8013070:	2001      	movs	r0, #1
 8013072:	f7fc ff33 	bl	800fedc <fm_lcd_k_lin>
    fm_lcd_refresh();
 8013076:	f7fd f84a 	bl	801010e <fm_lcd_refresh>

    switch (event_id)
 801307a:	79fb      	ldrb	r3, [r7, #7]
 801307c:	3b01      	subs	r3, #1
 801307e:	2b04      	cmp	r3, #4
 8013080:	d863      	bhi.n	801314a <fm_menu_config_k_lin_1+0x102>
 8013082:	a201      	add	r2, pc, #4	; (adr r2, 8013088 <fm_menu_config_k_lin_1+0x40>)
 8013084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013088:	0801314b 	.word	0x0801314b
 801308c:	0801309d 	.word	0x0801309d
 8013090:	080130c7 	.word	0x080130c7
 8013094:	080130f1 	.word	0x080130f1
 8013098:	0801312b 	.word	0x0801312b
    {
        case EVENT_KEY_UP:
            if (correct_password)
 801309c:	4b41      	ldr	r3, [pc, #260]	; (80131a4 <fm_menu_config_k_lin_1+0x15c>)
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d005      	beq.n	80130b0 <fm_menu_config_k_lin_1+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_1);
 80130a4:	4b3e      	ldr	r3, [pc, #248]	; (80131a0 <fm_menu_config_k_lin_1+0x158>)
 80130a6:	781b      	ldrb	r3, [r3, #0]
 80130a8:	2101      	movs	r1, #1
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7fc f876 	bl	800f19c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80130b0:	2301      	movs	r3, #1
 80130b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80130b6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80130ba:	2200      	movs	r2, #0
 80130bc:	4619      	mov	r1, r3
 80130be:	483a      	ldr	r0, [pc, #232]	; (80131a8 <fm_menu_config_k_lin_1+0x160>)
 80130c0:	f7fb f9c0 	bl	800e444 <_txe_queue_send>
        break;
 80130c4:	e042      	b.n	801314c <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80130c6:	4b37      	ldr	r3, [pc, #220]	; (80131a4 <fm_menu_config_k_lin_1+0x15c>)
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d005      	beq.n	80130da <fm_menu_config_k_lin_1+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_1);
 80130ce:	4b34      	ldr	r3, [pc, #208]	; (80131a0 <fm_menu_config_k_lin_1+0x158>)
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	2101      	movs	r1, #1
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7fc f94b 	bl	800f370 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80130da:	2301      	movs	r3, #1
 80130dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80130e0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80130e4:	2200      	movs	r2, #0
 80130e6:	4619      	mov	r1, r3
 80130e8:	482f      	ldr	r0, [pc, #188]	; (80131a8 <fm_menu_config_k_lin_1+0x160>)
 80130ea:	f7fb f9ab 	bl	800e444 <_txe_queue_send>
        break;
 80130ee:	e02d      	b.n	801314c <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80130f0:	4b2c      	ldr	r3, [pc, #176]	; (80131a4 <fm_menu_config_k_lin_1+0x15c>)
 80130f2:	781b      	ldrb	r3, [r3, #0]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d00d      	beq.n	8013114 <fm_menu_config_k_lin_1+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 80130f8:	4b29      	ldr	r3, [pc, #164]	; (80131a0 <fm_menu_config_k_lin_1+0x158>)
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	2b0a      	cmp	r3, #10
 80130fe:	d806      	bhi.n	801310e <fm_menu_config_k_lin_1+0xc6>
                {
                    digit_lin_modify++;
 8013100:	4b27      	ldr	r3, [pc, #156]	; (80131a0 <fm_menu_config_k_lin_1+0x158>)
 8013102:	781b      	ldrb	r3, [r3, #0]
 8013104:	3301      	adds	r3, #1
 8013106:	b2da      	uxtb	r2, r3
 8013108:	4b25      	ldr	r3, [pc, #148]	; (80131a0 <fm_menu_config_k_lin_1+0x158>)
 801310a:	701a      	strb	r2, [r3, #0]
 801310c:	e002      	b.n	8013114 <fm_menu_config_k_lin_1+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801310e:	4b24      	ldr	r3, [pc, #144]	; (80131a0 <fm_menu_config_k_lin_1+0x158>)
 8013110:	2200      	movs	r2, #0
 8013112:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013114:	2301      	movs	r3, #1
 8013116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801311a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801311e:	2200      	movs	r2, #0
 8013120:	4619      	mov	r1, r3
 8013122:	4821      	ldr	r0, [pc, #132]	; (80131a8 <fm_menu_config_k_lin_1+0x160>)
 8013124:	f7fb f98e 	bl	800e444 <_txe_queue_send>
        break;
 8013128:	e010      	b.n	801314c <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801312a:	4b20      	ldr	r3, [pc, #128]	; (80131ac <fm_menu_config_k_lin_1+0x164>)
 801312c:	2201      	movs	r2, #1
 801312e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 8013130:	4b1f      	ldr	r3, [pc, #124]	; (80131b0 <fm_menu_config_k_lin_1+0x168>)
 8013132:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8013134:	2301      	movs	r3, #1
 8013136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801313a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801313e:	2200      	movs	r2, #0
 8013140:	4619      	mov	r1, r3
 8013142:	4819      	ldr	r0, [pc, #100]	; (80131a8 <fm_menu_config_k_lin_1+0x160>)
 8013144:	f7fb f97e 	bl	800e444 <_txe_queue_send>
        break;
 8013148:	e000      	b.n	801314c <fm_menu_config_k_lin_1+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801314a:	bf00      	nop
    }

    previous_event = event_id;
 801314c:	4a19      	ldr	r2, [pc, #100]	; (80131b4 <fm_menu_config_k_lin_1+0x16c>)
 801314e:	79fb      	ldrb	r3, [r7, #7]
 8013150:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_1\n";
 8013152:	4b19      	ldr	r3, [pc, #100]	; (80131b8 <fm_menu_config_k_lin_1+0x170>)
 8013154:	f107 040c 	add.w	r4, r7, #12
 8013158:	461d      	mov	r5, r3
 801315a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801315c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801315e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013162:	c407      	stmia	r4!, {r0, r1, r2}
 8013164:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013166:	f107 030c 	add.w	r3, r7, #12
 801316a:	211e      	movs	r1, #30
 801316c:	4618      	mov	r0, r3
 801316e:	f7fb fda5 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013172:	4b0e      	ldr	r3, [pc, #56]	; (80131ac <fm_menu_config_k_lin_1+0x164>)
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	2b01      	cmp	r3, #1
 8013178:	d108      	bne.n	801318c <fm_menu_config_k_lin_1+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 801317a:	4b09      	ldr	r3, [pc, #36]	; (80131a0 <fm_menu_config_k_lin_1+0x158>)
 801317c:	2200      	movs	r2, #0
 801317e:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013180:	4b06      	ldr	r3, [pc, #24]	; (801319c <fm_menu_config_k_lin_1+0x154>)
 8013182:	2201      	movs	r2, #1
 8013184:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013186:	4b09      	ldr	r3, [pc, #36]	; (80131ac <fm_menu_config_k_lin_1+0x164>)
 8013188:	2200      	movs	r2, #0
 801318a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801318e:	4618      	mov	r0, r3
 8013190:	3730      	adds	r7, #48	; 0x30
 8013192:	46bd      	mov	sp, r7
 8013194:	bdb0      	pop	{r4, r5, r7, pc}
 8013196:	bf00      	nop
 8013198:	08013049 	.word	0x08013049
 801319c:	20000142 	.word	0x20000142
 80131a0:	20001e15 	.word	0x20001e15
 80131a4:	20001e0a 	.word	0x20001e0a
 80131a8:	20001388 	.word	0x20001388
 80131ac:	20001e16 	.word	0x20001e16
 80131b0:	080131bd 	.word	0x080131bd
 80131b4:	20001e0b 	.word	0x20001e0b
 80131b8:	080158f4 	.word	0x080158f4

080131bc <fm_menu_config_k_lin_2>:
 * @brief Función que imprime el menú del K linealizado 2.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_2(fm_event_t event_id)
{
 80131bc:	b5b0      	push	{r4, r5, r7, lr}
 80131be:	b08c      	sub	sp, #48	; 0x30
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	4603      	mov	r3, r0
 80131c4:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 80131c6:	4b51      	ldr	r3, [pc, #324]	; (801330c <fm_menu_config_k_lin_2+0x150>)
 80131c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 80131ca:	4b51      	ldr	r3, [pc, #324]	; (8013310 <fm_menu_config_k_lin_2+0x154>)
 80131cc:	781b      	ldrb	r3, [r3, #0]
 80131ce:	2b01      	cmp	r3, #1
 80131d0:	d104      	bne.n	80131dc <fm_menu_config_k_lin_2+0x20>
    {
        fm_lcd_clear();
 80131d2:	f7fc fc10 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 80131d6:	4b4e      	ldr	r3, [pc, #312]	; (8013310 <fm_menu_config_k_lin_2+0x154>)
 80131d8:	2200      	movs	r2, #0
 80131da:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_2, event_id, digit_lin_modify);
 80131dc:	4b4d      	ldr	r3, [pc, #308]	; (8013314 <fm_menu_config_k_lin_2+0x158>)
 80131de:	781a      	ldrb	r2, [r3, #0]
 80131e0:	79fb      	ldrb	r3, [r7, #7]
 80131e2:	4619      	mov	r1, r3
 80131e4:	2002      	movs	r0, #2
 80131e6:	f7fc fe79 	bl	800fedc <fm_lcd_k_lin>
    fm_lcd_refresh();
 80131ea:	f7fc ff90 	bl	801010e <fm_lcd_refresh>

    switch (event_id)
 80131ee:	79fb      	ldrb	r3, [r7, #7]
 80131f0:	3b01      	subs	r3, #1
 80131f2:	2b04      	cmp	r3, #4
 80131f4:	d863      	bhi.n	80132be <fm_menu_config_k_lin_2+0x102>
 80131f6:	a201      	add	r2, pc, #4	; (adr r2, 80131fc <fm_menu_config_k_lin_2+0x40>)
 80131f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131fc:	080132bf 	.word	0x080132bf
 8013200:	08013211 	.word	0x08013211
 8013204:	0801323b 	.word	0x0801323b
 8013208:	08013265 	.word	0x08013265
 801320c:	0801329f 	.word	0x0801329f
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013210:	4b41      	ldr	r3, [pc, #260]	; (8013318 <fm_menu_config_k_lin_2+0x15c>)
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d005      	beq.n	8013224 <fm_menu_config_k_lin_2+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_2);
 8013218:	4b3e      	ldr	r3, [pc, #248]	; (8013314 <fm_menu_config_k_lin_2+0x158>)
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	2102      	movs	r1, #2
 801321e:	4618      	mov	r0, r3
 8013220:	f7fb ffbc 	bl	800f19c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013224:	2301      	movs	r3, #1
 8013226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801322a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801322e:	2200      	movs	r2, #0
 8013230:	4619      	mov	r1, r3
 8013232:	483a      	ldr	r0, [pc, #232]	; (801331c <fm_menu_config_k_lin_2+0x160>)
 8013234:	f7fb f906 	bl	800e444 <_txe_queue_send>
        break;
 8013238:	e042      	b.n	80132c0 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 801323a:	4b37      	ldr	r3, [pc, #220]	; (8013318 <fm_menu_config_k_lin_2+0x15c>)
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d005      	beq.n	801324e <fm_menu_config_k_lin_2+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_2);
 8013242:	4b34      	ldr	r3, [pc, #208]	; (8013314 <fm_menu_config_k_lin_2+0x158>)
 8013244:	781b      	ldrb	r3, [r3, #0]
 8013246:	2102      	movs	r1, #2
 8013248:	4618      	mov	r0, r3
 801324a:	f7fc f891 	bl	800f370 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801324e:	2301      	movs	r3, #1
 8013250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013254:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013258:	2200      	movs	r2, #0
 801325a:	4619      	mov	r1, r3
 801325c:	482f      	ldr	r0, [pc, #188]	; (801331c <fm_menu_config_k_lin_2+0x160>)
 801325e:	f7fb f8f1 	bl	800e444 <_txe_queue_send>
        break;
 8013262:	e02d      	b.n	80132c0 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013264:	4b2c      	ldr	r3, [pc, #176]	; (8013318 <fm_menu_config_k_lin_2+0x15c>)
 8013266:	781b      	ldrb	r3, [r3, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d00d      	beq.n	8013288 <fm_menu_config_k_lin_2+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 801326c:	4b29      	ldr	r3, [pc, #164]	; (8013314 <fm_menu_config_k_lin_2+0x158>)
 801326e:	781b      	ldrb	r3, [r3, #0]
 8013270:	2b0a      	cmp	r3, #10
 8013272:	d806      	bhi.n	8013282 <fm_menu_config_k_lin_2+0xc6>
                {
                    digit_lin_modify++;
 8013274:	4b27      	ldr	r3, [pc, #156]	; (8013314 <fm_menu_config_k_lin_2+0x158>)
 8013276:	781b      	ldrb	r3, [r3, #0]
 8013278:	3301      	adds	r3, #1
 801327a:	b2da      	uxtb	r2, r3
 801327c:	4b25      	ldr	r3, [pc, #148]	; (8013314 <fm_menu_config_k_lin_2+0x158>)
 801327e:	701a      	strb	r2, [r3, #0]
 8013280:	e002      	b.n	8013288 <fm_menu_config_k_lin_2+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8013282:	4b24      	ldr	r3, [pc, #144]	; (8013314 <fm_menu_config_k_lin_2+0x158>)
 8013284:	2200      	movs	r2, #0
 8013286:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013288:	2301      	movs	r3, #1
 801328a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801328e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013292:	2200      	movs	r2, #0
 8013294:	4619      	mov	r1, r3
 8013296:	4821      	ldr	r0, [pc, #132]	; (801331c <fm_menu_config_k_lin_2+0x160>)
 8013298:	f7fb f8d4 	bl	800e444 <_txe_queue_send>
        break;
 801329c:	e010      	b.n	80132c0 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801329e:	4b20      	ldr	r3, [pc, #128]	; (8013320 <fm_menu_config_k_lin_2+0x164>)
 80132a0:	2201      	movs	r2, #1
 80132a2:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 80132a4:	4b1f      	ldr	r3, [pc, #124]	; (8013324 <fm_menu_config_k_lin_2+0x168>)
 80132a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 80132a8:	2301      	movs	r3, #1
 80132aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80132ae:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80132b2:	2200      	movs	r2, #0
 80132b4:	4619      	mov	r1, r3
 80132b6:	4819      	ldr	r0, [pc, #100]	; (801331c <fm_menu_config_k_lin_2+0x160>)
 80132b8:	f7fb f8c4 	bl	800e444 <_txe_queue_send>
        break;
 80132bc:	e000      	b.n	80132c0 <fm_menu_config_k_lin_2+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80132be:	bf00      	nop
    }

    previous_event = event_id;
 80132c0:	4a19      	ldr	r2, [pc, #100]	; (8013328 <fm_menu_config_k_lin_2+0x16c>)
 80132c2:	79fb      	ldrb	r3, [r7, #7]
 80132c4:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_2\n";
 80132c6:	4b19      	ldr	r3, [pc, #100]	; (801332c <fm_menu_config_k_lin_2+0x170>)
 80132c8:	f107 040c 	add.w	r4, r7, #12
 80132cc:	461d      	mov	r5, r3
 80132ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80132d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80132d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80132d6:	c407      	stmia	r4!, {r0, r1, r2}
 80132d8:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80132da:	f107 030c 	add.w	r3, r7, #12
 80132de:	211e      	movs	r1, #30
 80132e0:	4618      	mov	r0, r3
 80132e2:	f7fb fceb 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80132e6:	4b0e      	ldr	r3, [pc, #56]	; (8013320 <fm_menu_config_k_lin_2+0x164>)
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	2b01      	cmp	r3, #1
 80132ec:	d108      	bne.n	8013300 <fm_menu_config_k_lin_2+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 80132ee:	4b09      	ldr	r3, [pc, #36]	; (8013314 <fm_menu_config_k_lin_2+0x158>)
 80132f0:	2200      	movs	r2, #0
 80132f2:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80132f4:	4b06      	ldr	r3, [pc, #24]	; (8013310 <fm_menu_config_k_lin_2+0x154>)
 80132f6:	2201      	movs	r2, #1
 80132f8:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80132fa:	4b09      	ldr	r3, [pc, #36]	; (8013320 <fm_menu_config_k_lin_2+0x164>)
 80132fc:	2200      	movs	r2, #0
 80132fe:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013302:	4618      	mov	r0, r3
 8013304:	3730      	adds	r7, #48	; 0x30
 8013306:	46bd      	mov	sp, r7
 8013308:	bdb0      	pop	{r4, r5, r7, pc}
 801330a:	bf00      	nop
 801330c:	080131bd 	.word	0x080131bd
 8013310:	20000143 	.word	0x20000143
 8013314:	20001e17 	.word	0x20001e17
 8013318:	20001e0a 	.word	0x20001e0a
 801331c:	20001388 	.word	0x20001388
 8013320:	20001e18 	.word	0x20001e18
 8013324:	08013331 	.word	0x08013331
 8013328:	20001e0b 	.word	0x20001e0b
 801332c:	08015914 	.word	0x08015914

08013330 <fm_menu_config_k_lin_3>:
 * @brief Función que imprime el menú del K linealizado 3.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_3(fm_event_t event_id)
{
 8013330:	b5b0      	push	{r4, r5, r7, lr}
 8013332:	b08c      	sub	sp, #48	; 0x30
 8013334:	af00      	add	r7, sp, #0
 8013336:	4603      	mov	r3, r0
 8013338:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 801333a:	4b51      	ldr	r3, [pc, #324]	; (8013480 <fm_menu_config_k_lin_3+0x150>)
 801333c:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 801333e:	4b51      	ldr	r3, [pc, #324]	; (8013484 <fm_menu_config_k_lin_3+0x154>)
 8013340:	781b      	ldrb	r3, [r3, #0]
 8013342:	2b01      	cmp	r3, #1
 8013344:	d104      	bne.n	8013350 <fm_menu_config_k_lin_3+0x20>
    {
        fm_lcd_clear();
 8013346:	f7fc fb56 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 801334a:	4b4e      	ldr	r3, [pc, #312]	; (8013484 <fm_menu_config_k_lin_3+0x154>)
 801334c:	2200      	movs	r2, #0
 801334e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_3, event_id, digit_lin_modify);
 8013350:	4b4d      	ldr	r3, [pc, #308]	; (8013488 <fm_menu_config_k_lin_3+0x158>)
 8013352:	781a      	ldrb	r2, [r3, #0]
 8013354:	79fb      	ldrb	r3, [r7, #7]
 8013356:	4619      	mov	r1, r3
 8013358:	2003      	movs	r0, #3
 801335a:	f7fc fdbf 	bl	800fedc <fm_lcd_k_lin>
    fm_lcd_refresh();
 801335e:	f7fc fed6 	bl	801010e <fm_lcd_refresh>

    switch (event_id)
 8013362:	79fb      	ldrb	r3, [r7, #7]
 8013364:	3b01      	subs	r3, #1
 8013366:	2b04      	cmp	r3, #4
 8013368:	d863      	bhi.n	8013432 <fm_menu_config_k_lin_3+0x102>
 801336a:	a201      	add	r2, pc, #4	; (adr r2, 8013370 <fm_menu_config_k_lin_3+0x40>)
 801336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013370:	08013433 	.word	0x08013433
 8013374:	08013385 	.word	0x08013385
 8013378:	080133af 	.word	0x080133af
 801337c:	080133d9 	.word	0x080133d9
 8013380:	08013413 	.word	0x08013413
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013384:	4b41      	ldr	r3, [pc, #260]	; (801348c <fm_menu_config_k_lin_3+0x15c>)
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d005      	beq.n	8013398 <fm_menu_config_k_lin_3+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_3);
 801338c:	4b3e      	ldr	r3, [pc, #248]	; (8013488 <fm_menu_config_k_lin_3+0x158>)
 801338e:	781b      	ldrb	r3, [r3, #0]
 8013390:	2103      	movs	r1, #3
 8013392:	4618      	mov	r0, r3
 8013394:	f7fb ff02 	bl	800f19c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013398:	2301      	movs	r3, #1
 801339a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801339e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80133a2:	2200      	movs	r2, #0
 80133a4:	4619      	mov	r1, r3
 80133a6:	483a      	ldr	r0, [pc, #232]	; (8013490 <fm_menu_config_k_lin_3+0x160>)
 80133a8:	f7fb f84c 	bl	800e444 <_txe_queue_send>
        break;
 80133ac:	e042      	b.n	8013434 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80133ae:	4b37      	ldr	r3, [pc, #220]	; (801348c <fm_menu_config_k_lin_3+0x15c>)
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d005      	beq.n	80133c2 <fm_menu_config_k_lin_3+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_3);
 80133b6:	4b34      	ldr	r3, [pc, #208]	; (8013488 <fm_menu_config_k_lin_3+0x158>)
 80133b8:	781b      	ldrb	r3, [r3, #0]
 80133ba:	2103      	movs	r1, #3
 80133bc:	4618      	mov	r0, r3
 80133be:	f7fb ffd7 	bl	800f370 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80133c2:	2301      	movs	r3, #1
 80133c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80133c8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80133cc:	2200      	movs	r2, #0
 80133ce:	4619      	mov	r1, r3
 80133d0:	482f      	ldr	r0, [pc, #188]	; (8013490 <fm_menu_config_k_lin_3+0x160>)
 80133d2:	f7fb f837 	bl	800e444 <_txe_queue_send>
        break;
 80133d6:	e02d      	b.n	8013434 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80133d8:	4b2c      	ldr	r3, [pc, #176]	; (801348c <fm_menu_config_k_lin_3+0x15c>)
 80133da:	781b      	ldrb	r3, [r3, #0]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d00d      	beq.n	80133fc <fm_menu_config_k_lin_3+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 80133e0:	4b29      	ldr	r3, [pc, #164]	; (8013488 <fm_menu_config_k_lin_3+0x158>)
 80133e2:	781b      	ldrb	r3, [r3, #0]
 80133e4:	2b0a      	cmp	r3, #10
 80133e6:	d806      	bhi.n	80133f6 <fm_menu_config_k_lin_3+0xc6>
                {
                    digit_lin_modify++;
 80133e8:	4b27      	ldr	r3, [pc, #156]	; (8013488 <fm_menu_config_k_lin_3+0x158>)
 80133ea:	781b      	ldrb	r3, [r3, #0]
 80133ec:	3301      	adds	r3, #1
 80133ee:	b2da      	uxtb	r2, r3
 80133f0:	4b25      	ldr	r3, [pc, #148]	; (8013488 <fm_menu_config_k_lin_3+0x158>)
 80133f2:	701a      	strb	r2, [r3, #0]
 80133f4:	e002      	b.n	80133fc <fm_menu_config_k_lin_3+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 80133f6:	4b24      	ldr	r3, [pc, #144]	; (8013488 <fm_menu_config_k_lin_3+0x158>)
 80133f8:	2200      	movs	r2, #0
 80133fa:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80133fc:	2301      	movs	r3, #1
 80133fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013402:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013406:	2200      	movs	r2, #0
 8013408:	4619      	mov	r1, r3
 801340a:	4821      	ldr	r0, [pc, #132]	; (8013490 <fm_menu_config_k_lin_3+0x160>)
 801340c:	f7fb f81a 	bl	800e444 <_txe_queue_send>
        break;
 8013410:	e010      	b.n	8013434 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013412:	4b20      	ldr	r3, [pc, #128]	; (8013494 <fm_menu_config_k_lin_3+0x164>)
 8013414:	2201      	movs	r2, #1
 8013416:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 8013418:	4b1f      	ldr	r3, [pc, #124]	; (8013498 <fm_menu_config_k_lin_3+0x168>)
 801341a:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 801341c:	2301      	movs	r3, #1
 801341e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013422:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013426:	2200      	movs	r2, #0
 8013428:	4619      	mov	r1, r3
 801342a:	4819      	ldr	r0, [pc, #100]	; (8013490 <fm_menu_config_k_lin_3+0x160>)
 801342c:	f7fb f80a 	bl	800e444 <_txe_queue_send>
        break;
 8013430:	e000      	b.n	8013434 <fm_menu_config_k_lin_3+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013432:	bf00      	nop
    }

    previous_event = event_id;
 8013434:	4a19      	ldr	r2, [pc, #100]	; (801349c <fm_menu_config_k_lin_3+0x16c>)
 8013436:	79fb      	ldrb	r3, [r7, #7]
 8013438:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_3\n";
 801343a:	4b19      	ldr	r3, [pc, #100]	; (80134a0 <fm_menu_config_k_lin_3+0x170>)
 801343c:	f107 040c 	add.w	r4, r7, #12
 8013440:	461d      	mov	r5, r3
 8013442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013446:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801344a:	c407      	stmia	r4!, {r0, r1, r2}
 801344c:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801344e:	f107 030c 	add.w	r3, r7, #12
 8013452:	211e      	movs	r1, #30
 8013454:	4618      	mov	r0, r3
 8013456:	f7fb fc31 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 801345a:	4b0e      	ldr	r3, [pc, #56]	; (8013494 <fm_menu_config_k_lin_3+0x164>)
 801345c:	781b      	ldrb	r3, [r3, #0]
 801345e:	2b01      	cmp	r3, #1
 8013460:	d108      	bne.n	8013474 <fm_menu_config_k_lin_3+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 8013462:	4b09      	ldr	r3, [pc, #36]	; (8013488 <fm_menu_config_k_lin_3+0x158>)
 8013464:	2200      	movs	r2, #0
 8013466:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013468:	4b06      	ldr	r3, [pc, #24]	; (8013484 <fm_menu_config_k_lin_3+0x154>)
 801346a:	2201      	movs	r2, #1
 801346c:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801346e:	4b09      	ldr	r3, [pc, #36]	; (8013494 <fm_menu_config_k_lin_3+0x164>)
 8013470:	2200      	movs	r2, #0
 8013472:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013476:	4618      	mov	r0, r3
 8013478:	3730      	adds	r7, #48	; 0x30
 801347a:	46bd      	mov	sp, r7
 801347c:	bdb0      	pop	{r4, r5, r7, pc}
 801347e:	bf00      	nop
 8013480:	08013331 	.word	0x08013331
 8013484:	20000144 	.word	0x20000144
 8013488:	20001e19 	.word	0x20001e19
 801348c:	20001e0a 	.word	0x20001e0a
 8013490:	20001388 	.word	0x20001388
 8013494:	20001e1a 	.word	0x20001e1a
 8013498:	080134a5 	.word	0x080134a5
 801349c:	20001e0b 	.word	0x20001e0b
 80134a0:	08015934 	.word	0x08015934

080134a4 <fm_menu_config_k_lin_4>:
 * @brief Función que imprime el menú del K linealizado 4.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_4(fm_event_t event_id)
{
 80134a4:	b5b0      	push	{r4, r5, r7, lr}
 80134a6:	b08c      	sub	sp, #48	; 0x30
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	4603      	mov	r3, r0
 80134ac:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 80134ae:	4b51      	ldr	r3, [pc, #324]	; (80135f4 <fm_menu_config_k_lin_4+0x150>)
 80134b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 80134b2:	4b51      	ldr	r3, [pc, #324]	; (80135f8 <fm_menu_config_k_lin_4+0x154>)
 80134b4:	781b      	ldrb	r3, [r3, #0]
 80134b6:	2b01      	cmp	r3, #1
 80134b8:	d104      	bne.n	80134c4 <fm_menu_config_k_lin_4+0x20>
    {
        fm_lcd_clear();
 80134ba:	f7fc fa9c 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 80134be:	4b4e      	ldr	r3, [pc, #312]	; (80135f8 <fm_menu_config_k_lin_4+0x154>)
 80134c0:	2200      	movs	r2, #0
 80134c2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_4, event_id, digit_lin_modify);
 80134c4:	4b4d      	ldr	r3, [pc, #308]	; (80135fc <fm_menu_config_k_lin_4+0x158>)
 80134c6:	781a      	ldrb	r2, [r3, #0]
 80134c8:	79fb      	ldrb	r3, [r7, #7]
 80134ca:	4619      	mov	r1, r3
 80134cc:	2004      	movs	r0, #4
 80134ce:	f7fc fd05 	bl	800fedc <fm_lcd_k_lin>
    fm_lcd_refresh();
 80134d2:	f7fc fe1c 	bl	801010e <fm_lcd_refresh>

    switch (event_id)
 80134d6:	79fb      	ldrb	r3, [r7, #7]
 80134d8:	3b01      	subs	r3, #1
 80134da:	2b04      	cmp	r3, #4
 80134dc:	d863      	bhi.n	80135a6 <fm_menu_config_k_lin_4+0x102>
 80134de:	a201      	add	r2, pc, #4	; (adr r2, 80134e4 <fm_menu_config_k_lin_4+0x40>)
 80134e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134e4:	080135a7 	.word	0x080135a7
 80134e8:	080134f9 	.word	0x080134f9
 80134ec:	08013523 	.word	0x08013523
 80134f0:	0801354d 	.word	0x0801354d
 80134f4:	08013587 	.word	0x08013587
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80134f8:	4b41      	ldr	r3, [pc, #260]	; (8013600 <fm_menu_config_k_lin_4+0x15c>)
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d005      	beq.n	801350c <fm_menu_config_k_lin_4+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_4);
 8013500:	4b3e      	ldr	r3, [pc, #248]	; (80135fc <fm_menu_config_k_lin_4+0x158>)
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	2104      	movs	r1, #4
 8013506:	4618      	mov	r0, r3
 8013508:	f7fb fe48 	bl	800f19c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 801350c:	2301      	movs	r3, #1
 801350e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013512:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013516:	2200      	movs	r2, #0
 8013518:	4619      	mov	r1, r3
 801351a:	483a      	ldr	r0, [pc, #232]	; (8013604 <fm_menu_config_k_lin_4+0x160>)
 801351c:	f7fa ff92 	bl	800e444 <_txe_queue_send>
        break;
 8013520:	e042      	b.n	80135a8 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013522:	4b37      	ldr	r3, [pc, #220]	; (8013600 <fm_menu_config_k_lin_4+0x15c>)
 8013524:	781b      	ldrb	r3, [r3, #0]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d005      	beq.n	8013536 <fm_menu_config_k_lin_4+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_4);
 801352a:	4b34      	ldr	r3, [pc, #208]	; (80135fc <fm_menu_config_k_lin_4+0x158>)
 801352c:	781b      	ldrb	r3, [r3, #0]
 801352e:	2104      	movs	r1, #4
 8013530:	4618      	mov	r0, r3
 8013532:	f7fb ff1d 	bl	800f370 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013536:	2301      	movs	r3, #1
 8013538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801353c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013540:	2200      	movs	r2, #0
 8013542:	4619      	mov	r1, r3
 8013544:	482f      	ldr	r0, [pc, #188]	; (8013604 <fm_menu_config_k_lin_4+0x160>)
 8013546:	f7fa ff7d 	bl	800e444 <_txe_queue_send>
        break;
 801354a:	e02d      	b.n	80135a8 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 801354c:	4b2c      	ldr	r3, [pc, #176]	; (8013600 <fm_menu_config_k_lin_4+0x15c>)
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d00d      	beq.n	8013570 <fm_menu_config_k_lin_4+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 8013554:	4b29      	ldr	r3, [pc, #164]	; (80135fc <fm_menu_config_k_lin_4+0x158>)
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	2b0a      	cmp	r3, #10
 801355a:	d806      	bhi.n	801356a <fm_menu_config_k_lin_4+0xc6>
                {
                    digit_lin_modify++;
 801355c:	4b27      	ldr	r3, [pc, #156]	; (80135fc <fm_menu_config_k_lin_4+0x158>)
 801355e:	781b      	ldrb	r3, [r3, #0]
 8013560:	3301      	adds	r3, #1
 8013562:	b2da      	uxtb	r2, r3
 8013564:	4b25      	ldr	r3, [pc, #148]	; (80135fc <fm_menu_config_k_lin_4+0x158>)
 8013566:	701a      	strb	r2, [r3, #0]
 8013568:	e002      	b.n	8013570 <fm_menu_config_k_lin_4+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801356a:	4b24      	ldr	r3, [pc, #144]	; (80135fc <fm_menu_config_k_lin_4+0x158>)
 801356c:	2200      	movs	r2, #0
 801356e:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013570:	2301      	movs	r3, #1
 8013572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013576:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801357a:	2200      	movs	r2, #0
 801357c:	4619      	mov	r1, r3
 801357e:	4821      	ldr	r0, [pc, #132]	; (8013604 <fm_menu_config_k_lin_4+0x160>)
 8013580:	f7fa ff60 	bl	800e444 <_txe_queue_send>
        break;
 8013584:	e010      	b.n	80135a8 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013586:	4b20      	ldr	r3, [pc, #128]	; (8013608 <fm_menu_config_k_lin_4+0x164>)
 8013588:	2201      	movs	r2, #1
 801358a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 801358c:	4b1f      	ldr	r3, [pc, #124]	; (801360c <fm_menu_config_k_lin_4+0x168>)
 801358e:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8013590:	2301      	movs	r3, #1
 8013592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013596:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801359a:	2200      	movs	r2, #0
 801359c:	4619      	mov	r1, r3
 801359e:	4819      	ldr	r0, [pc, #100]	; (8013604 <fm_menu_config_k_lin_4+0x160>)
 80135a0:	f7fa ff50 	bl	800e444 <_txe_queue_send>
        break;
 80135a4:	e000      	b.n	80135a8 <fm_menu_config_k_lin_4+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80135a6:	bf00      	nop
    }

    previous_event = event_id;
 80135a8:	4a19      	ldr	r2, [pc, #100]	; (8013610 <fm_menu_config_k_lin_4+0x16c>)
 80135aa:	79fb      	ldrb	r3, [r7, #7]
 80135ac:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_4\n";
 80135ae:	4b19      	ldr	r3, [pc, #100]	; (8013614 <fm_menu_config_k_lin_4+0x170>)
 80135b0:	f107 040c 	add.w	r4, r7, #12
 80135b4:	461d      	mov	r5, r3
 80135b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80135ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80135be:	c407      	stmia	r4!, {r0, r1, r2}
 80135c0:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80135c2:	f107 030c 	add.w	r3, r7, #12
 80135c6:	211e      	movs	r1, #30
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7fb fb77 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80135ce:	4b0e      	ldr	r3, [pc, #56]	; (8013608 <fm_menu_config_k_lin_4+0x164>)
 80135d0:	781b      	ldrb	r3, [r3, #0]
 80135d2:	2b01      	cmp	r3, #1
 80135d4:	d108      	bne.n	80135e8 <fm_menu_config_k_lin_4+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 80135d6:	4b09      	ldr	r3, [pc, #36]	; (80135fc <fm_menu_config_k_lin_4+0x158>)
 80135d8:	2200      	movs	r2, #0
 80135da:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80135dc:	4b06      	ldr	r3, [pc, #24]	; (80135f8 <fm_menu_config_k_lin_4+0x154>)
 80135de:	2201      	movs	r2, #1
 80135e0:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80135e2:	4b09      	ldr	r3, [pc, #36]	; (8013608 <fm_menu_config_k_lin_4+0x164>)
 80135e4:	2200      	movs	r2, #0
 80135e6:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80135e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3730      	adds	r7, #48	; 0x30
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bdb0      	pop	{r4, r5, r7, pc}
 80135f2:	bf00      	nop
 80135f4:	080134a5 	.word	0x080134a5
 80135f8:	20000145 	.word	0x20000145
 80135fc:	20001e1b 	.word	0x20001e1b
 8013600:	20001e0a 	.word	0x20001e0a
 8013604:	20001388 	.word	0x20001388
 8013608:	20001e1c 	.word	0x20001e1c
 801360c:	08013619 	.word	0x08013619
 8013610:	20001e0b 	.word	0x20001e0b
 8013614:	08015954 	.word	0x08015954

08013618 <fm_menu_config_k_lin_5>:
 * @brief Función que imprime el menú del K linealizado 5.
 * @param Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_lin_5(fm_event_t event_id)
{
 8013618:	b5b0      	push	{r4, r5, r7, lr}
 801361a:	b08c      	sub	sp, #48	; 0x30
 801361c:	af00      	add	r7, sp, #0
 801361e:	4603      	mov	r3, r0
 8013620:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 8013622:	4b52      	ldr	r3, [pc, #328]	; (801376c <fm_menu_config_k_lin_5+0x154>)
 8013624:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8013626:	4b52      	ldr	r3, [pc, #328]	; (8013770 <fm_menu_config_k_lin_5+0x158>)
 8013628:	781b      	ldrb	r3, [r3, #0]
 801362a:	2b01      	cmp	r3, #1
 801362c:	d104      	bne.n	8013638 <fm_menu_config_k_lin_5+0x20>
    {
        fm_lcd_clear();
 801362e:	f7fc f9e2 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 8013632:	4b4f      	ldr	r3, [pc, #316]	; (8013770 <fm_menu_config_k_lin_5+0x158>)
 8013634:	2200      	movs	r2, #0
 8013636:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_5, event_id, digit_lin_modify);
 8013638:	4b4e      	ldr	r3, [pc, #312]	; (8013774 <fm_menu_config_k_lin_5+0x15c>)
 801363a:	781a      	ldrb	r2, [r3, #0]
 801363c:	79fb      	ldrb	r3, [r7, #7]
 801363e:	4619      	mov	r1, r3
 8013640:	2005      	movs	r0, #5
 8013642:	f7fc fc4b 	bl	800fedc <fm_lcd_k_lin>
    fm_lcd_refresh();
 8013646:	f7fc fd62 	bl	801010e <fm_lcd_refresh>

    switch (event_id)
 801364a:	79fb      	ldrb	r3, [r7, #7]
 801364c:	3b01      	subs	r3, #1
 801364e:	2b04      	cmp	r3, #4
 8013650:	d866      	bhi.n	8013720 <fm_menu_config_k_lin_5+0x108>
 8013652:	a201      	add	r2, pc, #4	; (adr r2, 8013658 <fm_menu_config_k_lin_5+0x40>)
 8013654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013658:	08013721 	.word	0x08013721
 801365c:	0801366d 	.word	0x0801366d
 8013660:	08013697 	.word	0x08013697
 8013664:	080136c1 	.word	0x080136c1
 8013668:	080136fb 	.word	0x080136fb
    {
        case EVENT_KEY_UP:
            if (correct_password)
 801366c:	4b42      	ldr	r3, [pc, #264]	; (8013778 <fm_menu_config_k_lin_5+0x160>)
 801366e:	781b      	ldrb	r3, [r3, #0]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d005      	beq.n	8013680 <fm_menu_config_k_lin_5+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_5);
 8013674:	4b3f      	ldr	r3, [pc, #252]	; (8013774 <fm_menu_config_k_lin_5+0x15c>)
 8013676:	781b      	ldrb	r3, [r3, #0]
 8013678:	2105      	movs	r1, #5
 801367a:	4618      	mov	r0, r3
 801367c:	f7fb fd8e 	bl	800f19c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013680:	2301      	movs	r3, #1
 8013682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013686:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801368a:	2200      	movs	r2, #0
 801368c:	4619      	mov	r1, r3
 801368e:	483b      	ldr	r0, [pc, #236]	; (801377c <fm_menu_config_k_lin_5+0x164>)
 8013690:	f7fa fed8 	bl	800e444 <_txe_queue_send>
        break;
 8013694:	e045      	b.n	8013722 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013696:	4b38      	ldr	r3, [pc, #224]	; (8013778 <fm_menu_config_k_lin_5+0x160>)
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d005      	beq.n	80136aa <fm_menu_config_k_lin_5+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_5);
 801369e:	4b35      	ldr	r3, [pc, #212]	; (8013774 <fm_menu_config_k_lin_5+0x15c>)
 80136a0:	781b      	ldrb	r3, [r3, #0]
 80136a2:	2105      	movs	r1, #5
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7fb fe63 	bl	800f370 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80136aa:	2301      	movs	r3, #1
 80136ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136b0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80136b4:	2200      	movs	r2, #0
 80136b6:	4619      	mov	r1, r3
 80136b8:	4830      	ldr	r0, [pc, #192]	; (801377c <fm_menu_config_k_lin_5+0x164>)
 80136ba:	f7fa fec3 	bl	800e444 <_txe_queue_send>
        break;
 80136be:	e030      	b.n	8013722 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80136c0:	4b2d      	ldr	r3, [pc, #180]	; (8013778 <fm_menu_config_k_lin_5+0x160>)
 80136c2:	781b      	ldrb	r3, [r3, #0]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d00d      	beq.n	80136e4 <fm_menu_config_k_lin_5+0xcc>
            {
                if (digit_lin_modify < DIG_LIN_11)
 80136c8:	4b2a      	ldr	r3, [pc, #168]	; (8013774 <fm_menu_config_k_lin_5+0x15c>)
 80136ca:	781b      	ldrb	r3, [r3, #0]
 80136cc:	2b0a      	cmp	r3, #10
 80136ce:	d806      	bhi.n	80136de <fm_menu_config_k_lin_5+0xc6>
                {
                    digit_lin_modify++;
 80136d0:	4b28      	ldr	r3, [pc, #160]	; (8013774 <fm_menu_config_k_lin_5+0x15c>)
 80136d2:	781b      	ldrb	r3, [r3, #0]
 80136d4:	3301      	adds	r3, #1
 80136d6:	b2da      	uxtb	r2, r3
 80136d8:	4b26      	ldr	r3, [pc, #152]	; (8013774 <fm_menu_config_k_lin_5+0x15c>)
 80136da:	701a      	strb	r2, [r3, #0]
 80136dc:	e002      	b.n	80136e4 <fm_menu_config_k_lin_5+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 80136de:	4b25      	ldr	r3, [pc, #148]	; (8013774 <fm_menu_config_k_lin_5+0x15c>)
 80136e0:	2200      	movs	r2, #0
 80136e2:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80136e4:	2301      	movs	r3, #1
 80136e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136ea:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80136ee:	2200      	movs	r2, #0
 80136f0:	4619      	mov	r1, r3
 80136f2:	4822      	ldr	r0, [pc, #136]	; (801377c <fm_menu_config_k_lin_5+0x164>)
 80136f4:	f7fa fea6 	bl	800e444 <_txe_queue_send>
        break;
 80136f8:	e013      	b.n	8013722 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_ESC:
            correct_password = 0;
 80136fa:	4b1f      	ldr	r3, [pc, #124]	; (8013778 <fm_menu_config_k_lin_5+0x160>)
 80136fc:	2200      	movs	r2, #0
 80136fe:	701a      	strb	r2, [r3, #0]
            new_exit = 1;
 8013700:	4b1f      	ldr	r3, [pc, #124]	; (8013780 <fm_menu_config_k_lin_5+0x168>)
 8013702:	2201      	movs	r2, #1
 8013704:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013706:	4b1f      	ldr	r3, [pc, #124]	; (8013784 <fm_menu_config_k_lin_5+0x16c>)
 8013708:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 801370a:	2301      	movs	r3, #1
 801370c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013710:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013714:	2200      	movs	r2, #0
 8013716:	4619      	mov	r1, r3
 8013718:	4818      	ldr	r0, [pc, #96]	; (801377c <fm_menu_config_k_lin_5+0x164>)
 801371a:	f7fa fe93 	bl	800e444 <_txe_queue_send>
        break;
 801371e:	e000      	b.n	8013722 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013720:	bf00      	nop
    }

    previous_event = event_id;
 8013722:	4a19      	ldr	r2, [pc, #100]	; (8013788 <fm_menu_config_k_lin_5+0x170>)
 8013724:	79fb      	ldrb	r3, [r7, #7]
 8013726:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K_lin_5\n";
 8013728:	4b18      	ldr	r3, [pc, #96]	; (801378c <fm_menu_config_k_lin_5+0x174>)
 801372a:	f107 040c 	add.w	r4, r7, #12
 801372e:	461d      	mov	r5, r3
 8013730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013734:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013738:	c407      	stmia	r4!, {r0, r1, r2}
 801373a:	8023      	strh	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801373c:	f107 030c 	add.w	r3, r7, #12
 8013740:	211e      	movs	r1, #30
 8013742:	4618      	mov	r0, r3
 8013744:	f7fb faba 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013748:	4b0d      	ldr	r3, [pc, #52]	; (8013780 <fm_menu_config_k_lin_5+0x168>)
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	2b01      	cmp	r3, #1
 801374e:	d108      	bne.n	8013762 <fm_menu_config_k_lin_5+0x14a>
    {
        digit_lin_modify = DIG_LIN_0;
 8013750:	4b08      	ldr	r3, [pc, #32]	; (8013774 <fm_menu_config_k_lin_5+0x15c>)
 8013752:	2200      	movs	r2, #0
 8013754:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013756:	4b06      	ldr	r3, [pc, #24]	; (8013770 <fm_menu_config_k_lin_5+0x158>)
 8013758:	2201      	movs	r2, #1
 801375a:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801375c:	4b08      	ldr	r3, [pc, #32]	; (8013780 <fm_menu_config_k_lin_5+0x168>)
 801375e:	2200      	movs	r2, #0
 8013760:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013764:	4618      	mov	r0, r3
 8013766:	3730      	adds	r7, #48	; 0x30
 8013768:	46bd      	mov	sp, r7
 801376a:	bdb0      	pop	{r4, r5, r7, pc}
 801376c:	08013619 	.word	0x08013619
 8013770:	20000146 	.word	0x20000146
 8013774:	20001e1d 	.word	0x20001e1d
 8013778:	20001e0a 	.word	0x20001e0a
 801377c:	20001388 	.word	0x20001388
 8013780:	20001e1e 	.word	0x20001e1e
 8013784:	08014655 	.word	0x08014655
 8013788:	20001e0b 	.word	0x20001e0b
 801378c:	08015974 	.word	0x08015974

08013790 <fm_menu_config_k_param>:
 * K.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_param(fm_event_t event_id)
{
 8013790:	b5b0      	push	{r4, r5, r7, lr}
 8013792:	b08a      	sub	sp, #40	; 0x28
 8013794:	af00      	add	r7, sp, #0
 8013796:	4603      	mov	r3, r0
 8013798:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_t digit_modify = DIG_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 801379a:	4b69      	ldr	r3, [pc, #420]	; (8013940 <fm_menu_config_k_param+0x1b0>)
 801379c:	627b      	str	r3, [r7, #36]	; 0x24
    fm_event_t event_now;

    if (new_entry == 1)
 801379e:	4b69      	ldr	r3, [pc, #420]	; (8013944 <fm_menu_config_k_param+0x1b4>)
 80137a0:	781b      	ldrb	r3, [r3, #0]
 80137a2:	2b01      	cmp	r3, #1
 80137a4:	d104      	bne.n	80137b0 <fm_menu_config_k_param+0x20>
    {
        fm_lcd_clear();
 80137a6:	f7fc f926 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 80137aa:	4b66      	ldr	r3, [pc, #408]	; (8013944 <fm_menu_config_k_param+0x1b4>)
 80137ac:	2200      	movs	r2, #0
 80137ae:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_factor(event_id, digit_modify);
 80137b0:	4b65      	ldr	r3, [pc, #404]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 80137b2:	781a      	ldrb	r2, [r3, #0]
 80137b4:	79fb      	ldrb	r3, [r7, #7]
 80137b6:	4611      	mov	r1, r2
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7fc fb1d 	bl	800fdf8 <fm_lcd_k_factor>
    fm_lcd_refresh();
 80137be:	f7fc fca6 	bl	801010e <fm_lcd_refresh>

    switch (event_id)
 80137c2:	79fb      	ldrb	r3, [r7, #7]
 80137c4:	3b01      	subs	r3, #1
 80137c6:	2b04      	cmp	r3, #4
 80137c8:	f200 8094 	bhi.w	80138f4 <fm_menu_config_k_param+0x164>
 80137cc:	a201      	add	r2, pc, #4	; (adr r2, 80137d4 <fm_menu_config_k_param+0x44>)
 80137ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137d2:	bf00      	nop
 80137d4:	080138f5 	.word	0x080138f5
 80137d8:	080137e9 	.word	0x080137e9
 80137dc:	08013811 	.word	0x08013811
 80137e0:	08013839 	.word	0x08013839
 80137e4:	080138d5 	.word	0x080138d5
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80137e8:	4b58      	ldr	r3, [pc, #352]	; (801394c <fm_menu_config_k_param+0x1bc>)
 80137ea:	781b      	ldrb	r3, [r3, #0]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d004      	beq.n	80137fa <fm_menu_config_k_param+0x6a>
            {
                fm_factory_modify_k_factor_add(digit_modify);
 80137f0:	4b55      	ldr	r3, [pc, #340]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 80137f2:	781b      	ldrb	r3, [r3, #0]
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7fb fc51 	bl	800f09c <fm_factory_modify_k_factor_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80137fa:	2301      	movs	r3, #1
 80137fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013800:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013804:	2200      	movs	r2, #0
 8013806:	4619      	mov	r1, r3
 8013808:	4851      	ldr	r0, [pc, #324]	; (8013950 <fm_menu_config_k_param+0x1c0>)
 801380a:	f7fa fe1b 	bl	800e444 <_txe_queue_send>
        break;
 801380e:	e072      	b.n	80138f6 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013810:	4b4e      	ldr	r3, [pc, #312]	; (801394c <fm_menu_config_k_param+0x1bc>)
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d004      	beq.n	8013822 <fm_menu_config_k_param+0x92>
            {
                fm_factory_modify_k_factor_subs(digit_modify);
 8013818:	4b4b      	ldr	r3, [pc, #300]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	4618      	mov	r0, r3
 801381e:	f7fb fc7d 	bl	800f11c <fm_factory_modify_k_factor_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013822:	2301      	movs	r3, #1
 8013824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013828:	f107 0323 	add.w	r3, r7, #35	; 0x23
 801382c:	2200      	movs	r2, #0
 801382e:	4619      	mov	r1, r3
 8013830:	4847      	ldr	r0, [pc, #284]	; (8013950 <fm_menu_config_k_param+0x1c0>)
 8013832:	f7fa fe07 	bl	800e444 <_txe_queue_send>
        break;
 8013836:	e05e      	b.n	80138f6 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013838:	4b44      	ldr	r3, [pc, #272]	; (801394c <fm_menu_config_k_param+0x1bc>)
 801383a:	781b      	ldrb	r3, [r3, #0]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d03e      	beq.n	80138be <fm_menu_config_k_param+0x12e>
            {
                if (digit_modify == DIG_0)
 8013840:	4b41      	ldr	r3, [pc, #260]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d103      	bne.n	8013850 <fm_menu_config_k_param+0xc0>
                {
                    digit_modify = DIG_1;
 8013848:	4b3f      	ldr	r3, [pc, #252]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 801384a:	2201      	movs	r2, #1
 801384c:	701a      	strb	r2, [r3, #0]
 801384e:	e036      	b.n	80138be <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_1)
 8013850:	4b3d      	ldr	r3, [pc, #244]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	2b01      	cmp	r3, #1
 8013856:	d103      	bne.n	8013860 <fm_menu_config_k_param+0xd0>
                {
                    digit_modify = DIG_2;
 8013858:	4b3b      	ldr	r3, [pc, #236]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 801385a:	2202      	movs	r2, #2
 801385c:	701a      	strb	r2, [r3, #0]
 801385e:	e02e      	b.n	80138be <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_2)
 8013860:	4b39      	ldr	r3, [pc, #228]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 8013862:	781b      	ldrb	r3, [r3, #0]
 8013864:	2b02      	cmp	r3, #2
 8013866:	d103      	bne.n	8013870 <fm_menu_config_k_param+0xe0>
                {
                    digit_modify = DIG_3;
 8013868:	4b37      	ldr	r3, [pc, #220]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 801386a:	2203      	movs	r2, #3
 801386c:	701a      	strb	r2, [r3, #0]
 801386e:	e026      	b.n	80138be <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_3)
 8013870:	4b35      	ldr	r3, [pc, #212]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 8013872:	781b      	ldrb	r3, [r3, #0]
 8013874:	2b03      	cmp	r3, #3
 8013876:	d103      	bne.n	8013880 <fm_menu_config_k_param+0xf0>
                {
                    digit_modify = DIG_4;
 8013878:	4b33      	ldr	r3, [pc, #204]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 801387a:	2204      	movs	r2, #4
 801387c:	701a      	strb	r2, [r3, #0]
 801387e:	e01e      	b.n	80138be <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_4)
 8013880:	4b31      	ldr	r3, [pc, #196]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 8013882:	781b      	ldrb	r3, [r3, #0]
 8013884:	2b04      	cmp	r3, #4
 8013886:	d103      	bne.n	8013890 <fm_menu_config_k_param+0x100>
                {
                    digit_modify = DIG_5;
 8013888:	4b2f      	ldr	r3, [pc, #188]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 801388a:	2205      	movs	r2, #5
 801388c:	701a      	strb	r2, [r3, #0]
 801388e:	e016      	b.n	80138be <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_5)
 8013890:	4b2d      	ldr	r3, [pc, #180]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 8013892:	781b      	ldrb	r3, [r3, #0]
 8013894:	2b05      	cmp	r3, #5
 8013896:	d103      	bne.n	80138a0 <fm_menu_config_k_param+0x110>
                {
                    digit_modify = DIG_6;
 8013898:	4b2b      	ldr	r3, [pc, #172]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 801389a:	2206      	movs	r2, #6
 801389c:	701a      	strb	r2, [r3, #0]
 801389e:	e00e      	b.n	80138be <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_6)
 80138a0:	4b29      	ldr	r3, [pc, #164]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	2b06      	cmp	r3, #6
 80138a6:	d103      	bne.n	80138b0 <fm_menu_config_k_param+0x120>
                {
                    digit_modify = DIG_7;
 80138a8:	4b27      	ldr	r3, [pc, #156]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 80138aa:	2207      	movs	r2, #7
 80138ac:	701a      	strb	r2, [r3, #0]
 80138ae:	e006      	b.n	80138be <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_7)
 80138b0:	4b25      	ldr	r3, [pc, #148]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 80138b2:	781b      	ldrb	r3, [r3, #0]
 80138b4:	2b07      	cmp	r3, #7
 80138b6:	d102      	bne.n	80138be <fm_menu_config_k_param+0x12e>
                {
                    digit_modify = DIG_0;
 80138b8:	4b23      	ldr	r3, [pc, #140]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 80138ba:	2200      	movs	r2, #0
 80138bc:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80138be:	2301      	movs	r3, #1
 80138c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80138c4:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80138c8:	2200      	movs	r2, #0
 80138ca:	4619      	mov	r1, r3
 80138cc:	4820      	ldr	r0, [pc, #128]	; (8013950 <fm_menu_config_k_param+0x1c0>)
 80138ce:	f7fa fdb9 	bl	800e444 <_txe_queue_send>
        break;
 80138d2:	e010      	b.n	80138f6 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80138d4:	4b1f      	ldr	r3, [pc, #124]	; (8013954 <fm_menu_config_k_param+0x1c4>)
 80138d6:	2201      	movs	r2, #1
 80138d8:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 80138da:	4b1f      	ldr	r3, [pc, #124]	; (8013958 <fm_menu_config_k_param+0x1c8>)
 80138dc:	627b      	str	r3, [r7, #36]	; 0x24
            event_now = EVENT_LCD_REFRESH;
 80138de:	2301      	movs	r3, #1
 80138e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80138e4:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80138e8:	2200      	movs	r2, #0
 80138ea:	4619      	mov	r1, r3
 80138ec:	4818      	ldr	r0, [pc, #96]	; (8013950 <fm_menu_config_k_param+0x1c0>)
 80138ee:	f7fa fda9 	bl	800e444 <_txe_queue_send>
        break;
 80138f2:	e000      	b.n	80138f6 <fm_menu_config_k_param+0x166>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80138f4:	bf00      	nop
    }

    previous_event = event_id;
 80138f6:	4a19      	ldr	r2, [pc, #100]	; (801395c <fm_menu_config_k_param+0x1cc>)
 80138f8:	79fb      	ldrb	r3, [r7, #7]
 80138fa:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar parametro K\n";
 80138fc:	4b18      	ldr	r3, [pc, #96]	; (8013960 <fm_menu_config_k_param+0x1d0>)
 80138fe:	f107 0408 	add.w	r4, r7, #8
 8013902:	461d      	mov	r5, r3
 8013904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013908:	e895 0003 	ldmia.w	r5, {r0, r1}
 801390c:	e884 0003 	stmia.w	r4, {r0, r1}
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013910:	f107 0308 	add.w	r3, r7, #8
 8013914:	2118      	movs	r1, #24
 8013916:	4618      	mov	r0, r3
 8013918:	f7fb f9d0 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 801391c:	4b0d      	ldr	r3, [pc, #52]	; (8013954 <fm_menu_config_k_param+0x1c4>)
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	2b01      	cmp	r3, #1
 8013922:	d108      	bne.n	8013936 <fm_menu_config_k_param+0x1a6>
    {
        digit_modify = DIG_0;
 8013924:	4b08      	ldr	r3, [pc, #32]	; (8013948 <fm_menu_config_k_param+0x1b8>)
 8013926:	2200      	movs	r2, #0
 8013928:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801392a:	4b06      	ldr	r3, [pc, #24]	; (8013944 <fm_menu_config_k_param+0x1b4>)
 801392c:	2201      	movs	r2, #1
 801392e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013930:	4b08      	ldr	r3, [pc, #32]	; (8013954 <fm_menu_config_k_param+0x1c4>)
 8013932:	2200      	movs	r2, #0
 8013934:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013938:	4618      	mov	r0, r3
 801393a:	3728      	adds	r7, #40	; 0x28
 801393c:	46bd      	mov	sp, r7
 801393e:	bdb0      	pop	{r4, r5, r7, pc}
 8013940:	08013791 	.word	0x08013791
 8013944:	20000147 	.word	0x20000147
 8013948:	20001e1f 	.word	0x20001e1f
 801394c:	20001e0a 	.word	0x20001e0a
 8013950:	20001388 	.word	0x20001388
 8013954:	20001e20 	.word	0x20001e20
 8013958:	08013049 	.word	0x08013049
 801395c:	20001e0b 	.word	0x20001e0b
 8013960:	08015994 	.word	0x08015994

08013964 <fm_menu_config_pass>:
 * regresa al menú de inicio donde se encienden todos los leds.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_pass(fm_event_t event_id)
{
 8013964:	b5b0      	push	{r4, r5, r7, lr}
 8013966:	b086      	sub	sp, #24
 8013968:	af00      	add	r7, sp, #0
 801396a:	4603      	mov	r3, r0
 801396c:	71fb      	strb	r3, [r7, #7]
        0,
        0
    };
    static uint8_t password_index = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 801396e:	4ba8      	ldr	r3, [pc, #672]	; (8013c10 <fm_menu_config_pass+0x2ac>)
 8013970:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8013972:	4ba8      	ldr	r3, [pc, #672]	; (8013c14 <fm_menu_config_pass+0x2b0>)
 8013974:	781b      	ldrb	r3, [r3, #0]
 8013976:	2b01      	cmp	r3, #1
 8013978:	d10a      	bne.n	8013990 <fm_menu_config_pass+0x2c>
    {
        in_configuration = 1;
 801397a:	4ba7      	ldr	r3, [pc, #668]	; (8013c18 <fm_menu_config_pass+0x2b4>)
 801397c:	2201      	movs	r2, #1
 801397e:	701a      	strb	r2, [r3, #0]
        correct_password = 0;
 8013980:	4ba6      	ldr	r3, [pc, #664]	; (8013c1c <fm_menu_config_pass+0x2b8>)
 8013982:	2200      	movs	r2, #0
 8013984:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 8013986:	f7fc f836 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 801398a:	4ba2      	ldr	r3, [pc, #648]	; (8013c14 <fm_menu_config_pass+0x2b0>)
 801398c:	2200      	movs	r2, #0
 801398e:	701a      	strb	r2, [r3, #0]
    }

    lcd_set_symbol(PASS, 0x00);
 8013990:	2100      	movs	r1, #0
 8013992:	200a      	movs	r0, #10
 8013994:	f7fd fee0 	bl	8011758 <lcd_set_symbol>
    /*
     * Cada vez que se introduce un dígito de la contraseña, aparece un 8 nuevo
     * en la pantalla, hasta 3 veces (luego de la cuarta vez, se pasa al menú
     * de configuración del factor K).
     */
    if (password_index == 1)
 8013998:	4ba1      	ldr	r3, [pc, #644]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	2b01      	cmp	r3, #1
 801399e:	d104      	bne.n	80139aa <fm_menu_config_pass+0x46>
    {
        lcd_set_symbol(PASS1, 0x00);
 80139a0:	2100      	movs	r1, #0
 80139a2:	200d      	movs	r0, #13
 80139a4:	f7fd fed8 	bl	8011758 <lcd_set_symbol>
 80139a8:	e010      	b.n	80139cc <fm_menu_config_pass+0x68>
    }
    else if (password_index == 2)
 80139aa:	4b9d      	ldr	r3, [pc, #628]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	2b02      	cmp	r3, #2
 80139b0:	d104      	bne.n	80139bc <fm_menu_config_pass+0x58>
    {
        lcd_set_symbol(PASS2, 0x00);
 80139b2:	2100      	movs	r1, #0
 80139b4:	200e      	movs	r0, #14
 80139b6:	f7fd fecf 	bl	8011758 <lcd_set_symbol>
 80139ba:	e007      	b.n	80139cc <fm_menu_config_pass+0x68>
    }
    else if (password_index == PASSWORD_LENGTH - 1)
 80139bc:	4b98      	ldr	r3, [pc, #608]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 80139be:	781b      	ldrb	r3, [r3, #0]
 80139c0:	2b03      	cmp	r3, #3
 80139c2:	d103      	bne.n	80139cc <fm_menu_config_pass+0x68>
    {
        lcd_set_symbol(PASS3, 0x00);
 80139c4:	2100      	movs	r1, #0
 80139c6:	200f      	movs	r0, #15
 80139c8:	f7fd fec6 	bl	8011758 <lcd_set_symbol>
    }
    fm_lcd_refresh();
 80139cc:	f7fc fb9f 	bl	801010e <fm_lcd_refresh>

    switch (event_id)
 80139d0:	79fb      	ldrb	r3, [r7, #7]
 80139d2:	3b01      	subs	r3, #1
 80139d4:	2b04      	cmp	r3, #4
 80139d6:	f200 8085 	bhi.w	8013ae4 <fm_menu_config_pass+0x180>
 80139da:	a201      	add	r2, pc, #4	; (adr r2, 80139e0 <fm_menu_config_pass+0x7c>)
 80139dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139e0:	08013ae5 	.word	0x08013ae5
 80139e4:	080139f5 	.word	0x080139f5
 80139e8:	08013a31 	.word	0x08013a31
 80139ec:	08013a6d 	.word	0x08013a6d
 80139f0:	08013aa9 	.word	0x08013aa9
    {
        case EVENT_KEY_UP:
            password[password_index] = 1;
 80139f4:	4b8a      	ldr	r3, [pc, #552]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 80139f6:	781b      	ldrb	r3, [r3, #0]
 80139f8:	461a      	mov	r2, r3
 80139fa:	4b8a      	ldr	r3, [pc, #552]	; (8013c24 <fm_menu_config_pass+0x2c0>)
 80139fc:	2101      	movs	r1, #1
 80139fe:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013a00:	4b87      	ldr	r3, [pc, #540]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013a02:	781b      	ldrb	r3, [r3, #0]
 8013a04:	2b02      	cmp	r3, #2
 8013a06:	d80f      	bhi.n	8013a28 <fm_menu_config_pass+0xc4>
            {
                event_now = EVENT_LCD_REFRESH;
 8013a08:	2301      	movs	r3, #1
 8013a0a:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013a0c:	f107 0313 	add.w	r3, r7, #19
 8013a10:	2200      	movs	r2, #0
 8013a12:	4619      	mov	r1, r3
 8013a14:	4884      	ldr	r0, [pc, #528]	; (8013c28 <fm_menu_config_pass+0x2c4>)
 8013a16:	f7fa fd15 	bl	800e444 <_txe_queue_send>
                password_index++;
 8013a1a:	4b81      	ldr	r3, [pc, #516]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013a1c:	781b      	ldrb	r3, [r3, #0]
 8013a1e:	3301      	adds	r3, #1
 8013a20:	b2da      	uxtb	r2, r3
 8013a22:	4b7f      	ldr	r3, [pc, #508]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013a24:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013a26:	e05e      	b.n	8013ae6 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013a28:	4b80      	ldr	r3, [pc, #512]	; (8013c2c <fm_menu_config_pass+0x2c8>)
 8013a2a:	2201      	movs	r2, #1
 8013a2c:	701a      	strb	r2, [r3, #0]
        break;
 8013a2e:	e05a      	b.n	8013ae6 <fm_menu_config_pass+0x182>
        case EVENT_KEY_DOWN:
            password[password_index] = 2;
 8013a30:	4b7b      	ldr	r3, [pc, #492]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013a32:	781b      	ldrb	r3, [r3, #0]
 8013a34:	461a      	mov	r2, r3
 8013a36:	4b7b      	ldr	r3, [pc, #492]	; (8013c24 <fm_menu_config_pass+0x2c0>)
 8013a38:	2102      	movs	r1, #2
 8013a3a:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013a3c:	4b78      	ldr	r3, [pc, #480]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013a3e:	781b      	ldrb	r3, [r3, #0]
 8013a40:	2b02      	cmp	r3, #2
 8013a42:	d80f      	bhi.n	8013a64 <fm_menu_config_pass+0x100>
            {
                event_now = EVENT_LCD_REFRESH;
 8013a44:	2301      	movs	r3, #1
 8013a46:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013a48:	f107 0313 	add.w	r3, r7, #19
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	4619      	mov	r1, r3
 8013a50:	4875      	ldr	r0, [pc, #468]	; (8013c28 <fm_menu_config_pass+0x2c4>)
 8013a52:	f7fa fcf7 	bl	800e444 <_txe_queue_send>
                password_index++;
 8013a56:	4b72      	ldr	r3, [pc, #456]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013a58:	781b      	ldrb	r3, [r3, #0]
 8013a5a:	3301      	adds	r3, #1
 8013a5c:	b2da      	uxtb	r2, r3
 8013a5e:	4b70      	ldr	r3, [pc, #448]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013a60:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013a62:	e040      	b.n	8013ae6 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013a64:	4b71      	ldr	r3, [pc, #452]	; (8013c2c <fm_menu_config_pass+0x2c8>)
 8013a66:	2201      	movs	r2, #1
 8013a68:	701a      	strb	r2, [r3, #0]
        break;
 8013a6a:	e03c      	b.n	8013ae6 <fm_menu_config_pass+0x182>
        case EVENT_KEY_ENTER:
            password[password_index] = 3; // @suppress("Avoid magic numbers")
 8013a6c:	4b6c      	ldr	r3, [pc, #432]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	461a      	mov	r2, r3
 8013a72:	4b6c      	ldr	r3, [pc, #432]	; (8013c24 <fm_menu_config_pass+0x2c0>)
 8013a74:	2103      	movs	r1, #3
 8013a76:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013a78:	4b69      	ldr	r3, [pc, #420]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	2b02      	cmp	r3, #2
 8013a7e:	d80f      	bhi.n	8013aa0 <fm_menu_config_pass+0x13c>
            {
                event_now = EVENT_LCD_REFRESH;
 8013a80:	2301      	movs	r3, #1
 8013a82:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013a84:	f107 0313 	add.w	r3, r7, #19
 8013a88:	2200      	movs	r2, #0
 8013a8a:	4619      	mov	r1, r3
 8013a8c:	4866      	ldr	r0, [pc, #408]	; (8013c28 <fm_menu_config_pass+0x2c4>)
 8013a8e:	f7fa fcd9 	bl	800e444 <_txe_queue_send>
                password_index++;
 8013a92:	4b63      	ldr	r3, [pc, #396]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	3301      	adds	r3, #1
 8013a98:	b2da      	uxtb	r2, r3
 8013a9a:	4b61      	ldr	r3, [pc, #388]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013a9c:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013a9e:	e022      	b.n	8013ae6 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013aa0:	4b62      	ldr	r3, [pc, #392]	; (8013c2c <fm_menu_config_pass+0x2c8>)
 8013aa2:	2201      	movs	r2, #1
 8013aa4:	701a      	strb	r2, [r3, #0]
        break;
 8013aa6:	e01e      	b.n	8013ae6 <fm_menu_config_pass+0x182>
        case EVENT_KEY_ESC:
            password[password_index] = 4; // @suppress("Avoid magic numbers")
 8013aa8:	4b5d      	ldr	r3, [pc, #372]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013aaa:	781b      	ldrb	r3, [r3, #0]
 8013aac:	461a      	mov	r2, r3
 8013aae:	4b5d      	ldr	r3, [pc, #372]	; (8013c24 <fm_menu_config_pass+0x2c0>)
 8013ab0:	2104      	movs	r1, #4
 8013ab2:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013ab4:	4b5a      	ldr	r3, [pc, #360]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013ab6:	781b      	ldrb	r3, [r3, #0]
 8013ab8:	2b02      	cmp	r3, #2
 8013aba:	d80f      	bhi.n	8013adc <fm_menu_config_pass+0x178>
            {
                event_now = EVENT_LCD_REFRESH;
 8013abc:	2301      	movs	r3, #1
 8013abe:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013ac0:	f107 0313 	add.w	r3, r7, #19
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	4619      	mov	r1, r3
 8013ac8:	4857      	ldr	r0, [pc, #348]	; (8013c28 <fm_menu_config_pass+0x2c4>)
 8013aca:	f7fa fcbb 	bl	800e444 <_txe_queue_send>
                password_index++;
 8013ace:	4b54      	ldr	r3, [pc, #336]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013ad0:	781b      	ldrb	r3, [r3, #0]
 8013ad2:	3301      	adds	r3, #1
 8013ad4:	b2da      	uxtb	r2, r3
 8013ad6:	4b52      	ldr	r3, [pc, #328]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013ad8:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013ada:	e004      	b.n	8013ae6 <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013adc:	4b53      	ldr	r3, [pc, #332]	; (8013c2c <fm_menu_config_pass+0x2c8>)
 8013ade:	2201      	movs	r2, #1
 8013ae0:	701a      	strb	r2, [r3, #0]
        break;
 8013ae2:	e000      	b.n	8013ae6 <fm_menu_config_pass+0x182>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013ae4:	bf00      	nop
    }

    previous_event = event_id;
 8013ae6:	4a52      	ldr	r2, [pc, #328]	; (8013c30 <fm_menu_config_pass+0x2cc>)
 8013ae8:	79fb      	ldrb	r3, [r7, #7]
 8013aea:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Password\n";
 8013aec:	4a51      	ldr	r2, [pc, #324]	; (8013c34 <fm_menu_config_pass+0x2d0>)
 8013aee:	f107 0308 	add.w	r3, r7, #8
 8013af2:	ca07      	ldmia	r2, {r0, r1, r2}
 8013af4:	c303      	stmia	r3!, {r0, r1}
 8013af6:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013af8:	f107 0308 	add.w	r3, r7, #8
 8013afc:	210a      	movs	r1, #10
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7fb f8dc 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1 && password_index >= PASSWORD_LENGTH - 1)
 8013b04:	4b49      	ldr	r3, [pc, #292]	; (8013c2c <fm_menu_config_pass+0x2c8>)
 8013b06:	781b      	ldrb	r3, [r3, #0]
 8013b08:	2b01      	cmp	r3, #1
 8013b0a:	f040 80c0 	bne.w	8013c8e <fm_menu_config_pass+0x32a>
 8013b0e:	4b44      	ldr	r3, [pc, #272]	; (8013c20 <fm_menu_config_pass+0x2bc>)
 8013b10:	781b      	ldrb	r3, [r3, #0]
 8013b12:	2b02      	cmp	r3, #2
 8013b14:	f240 80bb 	bls.w	8013c8e <fm_menu_config_pass+0x32a>
    {
        /*
         * Si la contraseña ingresada es correcta, se activa una flag global que
         * permite modificar los parámetros de los menús de configuración.
         */
        if (password[0] == PASS_DOWN && password[1] == PASS_UP
 8013b18:	4b42      	ldr	r3, [pc, #264]	; (8013c24 <fm_menu_config_pass+0x2c0>)
 8013b1a:	781b      	ldrb	r3, [r3, #0]
 8013b1c:	2b02      	cmp	r3, #2
 8013b1e:	d11d      	bne.n	8013b5c <fm_menu_config_pass+0x1f8>
 8013b20:	4b40      	ldr	r3, [pc, #256]	; (8013c24 <fm_menu_config_pass+0x2c0>)
 8013b22:	785b      	ldrb	r3, [r3, #1]
 8013b24:	2b01      	cmp	r3, #1
 8013b26:	d119      	bne.n	8013b5c <fm_menu_config_pass+0x1f8>
        && password[2] == PASS_UP
 8013b28:	4b3e      	ldr	r3, [pc, #248]	; (8013c24 <fm_menu_config_pass+0x2c0>)
 8013b2a:	789b      	ldrb	r3, [r3, #2]
 8013b2c:	2b01      	cmp	r3, #1
 8013b2e:	d115      	bne.n	8013b5c <fm_menu_config_pass+0x1f8>
        && password[PASSWORD_LENGTH - 1] == PASS_ENTER)
 8013b30:	4b3c      	ldr	r3, [pc, #240]	; (8013c24 <fm_menu_config_pass+0x2c0>)
 8013b32:	78db      	ldrb	r3, [r3, #3]
 8013b34:	2b03      	cmp	r3, #3
 8013b36:	d111      	bne.n	8013b5c <fm_menu_config_pass+0x1f8>
        {
            correct_password = 1;
 8013b38:	4b38      	ldr	r3, [pc, #224]	; (8013c1c <fm_menu_config_pass+0x2b8>)
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	701a      	strb	r2, [r3, #0]

            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 8013b3e:	4b3e      	ldr	r3, [pc, #248]	; (8013c38 <fm_menu_config_pass+0x2d4>)
 8013b40:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013b42:	2301      	movs	r3, #1
 8013b44:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013b46:	f107 0313 	add.w	r3, r7, #19
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	4619      	mov	r1, r3
 8013b4e:	4836      	ldr	r0, [pc, #216]	; (8013c28 <fm_menu_config_pass+0x2c4>)
 8013b50:	f7fa fc78 	bl	800e444 <_txe_queue_send>

            password_try = 0;
 8013b54:	4b39      	ldr	r3, [pc, #228]	; (8013c3c <fm_menu_config_pass+0x2d8>)
 8013b56:	2200      	movs	r2, #0
 8013b58:	701a      	strb	r2, [r3, #0]
 8013b5a:	e083      	b.n	8013c64 <fm_menu_config_pass+0x300>
        }
        else if (password[0] == PASS_DOWN && password[1] == PASS_DOWN
 8013b5c:	4b31      	ldr	r3, [pc, #196]	; (8013c24 <fm_menu_config_pass+0x2c0>)
 8013b5e:	781b      	ldrb	r3, [r3, #0]
 8013b60:	2b02      	cmp	r3, #2
 8013b62:	d139      	bne.n	8013bd8 <fm_menu_config_pass+0x274>
 8013b64:	4b2f      	ldr	r3, [pc, #188]	; (8013c24 <fm_menu_config_pass+0x2c0>)
 8013b66:	785b      	ldrb	r3, [r3, #1]
 8013b68:	2b02      	cmp	r3, #2
 8013b6a:	d135      	bne.n	8013bd8 <fm_menu_config_pass+0x274>
        && password[2] == PASS_UP && password[PASSWORD_LENGTH - 1] == PASS_UP)
 8013b6c:	4b2d      	ldr	r3, [pc, #180]	; (8013c24 <fm_menu_config_pass+0x2c0>)
 8013b6e:	789b      	ldrb	r3, [r3, #2]
 8013b70:	2b01      	cmp	r3, #1
 8013b72:	d131      	bne.n	8013bd8 <fm_menu_config_pass+0x274>
 8013b74:	4b2b      	ldr	r3, [pc, #172]	; (8013c24 <fm_menu_config_pass+0x2c0>)
 8013b76:	78db      	ldrb	r3, [r3, #3]
 8013b78:	2b01      	cmp	r3, #1
 8013b7a:	d12d      	bne.n	8013bd8 <fm_menu_config_pass+0x274>
        {
            correct_password = 1;
 8013b7c:	4b27      	ldr	r3, [pc, #156]	; (8013c1c <fm_menu_config_pass+0x2b8>)
 8013b7e:	2201      	movs	r2, #1
 8013b80:	701a      	strb	r2, [r3, #0]

            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8013b82:	4b2f      	ldr	r3, [pc, #188]	; (8013c40 <fm_menu_config_pass+0x2dc>)
 8013b84:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013b86:	2301      	movs	r3, #1
 8013b88:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013b8a:	f107 0313 	add.w	r3, r7, #19
 8013b8e:	2200      	movs	r2, #0
 8013b90:	4619      	mov	r1, r3
 8013b92:	4825      	ldr	r0, [pc, #148]	; (8013c28 <fm_menu_config_pass+0x2c4>)
 8013b94:	f7fa fc56 	bl	800e444 <_txe_queue_send>

            fm_factory_modify_date(fm_calendar_get_day(),
 8013b98:	f7fb f854 	bl	800ec44 <fm_calendar_get_day>
 8013b9c:	4604      	mov	r4, r0
 8013b9e:	f7fb f86f 	bl	800ec80 <fm_calendar_get_month>
 8013ba2:	4605      	mov	r5, r0
 8013ba4:	f7fb f880 	bl	800eca8 <fm_calendar_get_year>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	461a      	mov	r2, r3
 8013bac:	4629      	mov	r1, r5
 8013bae:	4620      	mov	r0, r4
 8013bb0:	f7fb fa22 	bl	800eff8 <fm_factory_modify_date>
            fm_calendar_get_month(), fm_calendar_get_year());

            fm_factory_modify_time(fm_calendar_get_hour(),
 8013bb4:	f7fb f850 	bl	800ec58 <fm_calendar_get_hour>
 8013bb8:	4604      	mov	r4, r0
 8013bba:	f7fb f857 	bl	800ec6c <fm_calendar_get_minute>
 8013bbe:	4605      	mov	r5, r0
 8013bc0:	f7fb f868 	bl	800ec94 <fm_calendar_get_second>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	4629      	mov	r1, r5
 8013bca:	4620      	mov	r0, r4
 8013bcc:	f7fb fcf0 	bl	800f5b0 <fm_factory_modify_time>
            fm_calendar_get_minute(), fm_calendar_get_second());

            password_try = 0;
 8013bd0:	4b1a      	ldr	r3, [pc, #104]	; (8013c3c <fm_menu_config_pass+0x2d8>)
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	701a      	strb	r2, [r3, #0]
 8013bd6:	e045      	b.n	8013c64 <fm_menu_config_pass+0x300>
        }
        else
        {
            correct_password = 0;
 8013bd8:	4b10      	ldr	r3, [pc, #64]	; (8013c1c <fm_menu_config_pass+0x2b8>)
 8013bda:	2200      	movs	r2, #0
 8013bdc:	701a      	strb	r2, [r3, #0]
            password_try++;
 8013bde:	4b17      	ldr	r3, [pc, #92]	; (8013c3c <fm_menu_config_pass+0x2d8>)
 8013be0:	781b      	ldrb	r3, [r3, #0]
 8013be2:	3301      	adds	r3, #1
 8013be4:	b2da      	uxtb	r2, r3
 8013be6:	4b15      	ldr	r3, [pc, #84]	; (8013c3c <fm_menu_config_pass+0x2d8>)
 8013be8:	701a      	strb	r2, [r3, #0]

            if (password_try < password_try_max)
 8013bea:	4b14      	ldr	r3, [pc, #80]	; (8013c3c <fm_menu_config_pass+0x2d8>)
 8013bec:	781a      	ldrb	r2, [r3, #0]
 8013bee:	4b15      	ldr	r3, [pc, #84]	; (8013c44 <fm_menu_config_pass+0x2e0>)
 8013bf0:	781b      	ldrb	r3, [r3, #0]
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d228      	bcs.n	8013c48 <fm_menu_config_pass+0x2e4>
            {
                ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013bf6:	4b06      	ldr	r3, [pc, #24]	; (8013c10 <fm_menu_config_pass+0x2ac>)
 8013bf8:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013bfe:	f107 0313 	add.w	r3, r7, #19
 8013c02:	2200      	movs	r2, #0
 8013c04:	4619      	mov	r1, r3
 8013c06:	4808      	ldr	r0, [pc, #32]	; (8013c28 <fm_menu_config_pass+0x2c4>)
 8013c08:	f7fa fc1c 	bl	800e444 <_txe_queue_send>
 8013c0c:	e02a      	b.n	8013c64 <fm_menu_config_pass+0x300>
 8013c0e:	bf00      	nop
 8013c10:	08013965 	.word	0x08013965
 8013c14:	20000148 	.word	0x20000148
 8013c18:	20001e0c 	.word	0x20001e0c
 8013c1c:	20001e0a 	.word	0x20001e0a
 8013c20:	20001e21 	.word	0x20001e21
 8013c24:	20001e24 	.word	0x20001e24
 8013c28:	20001388 	.word	0x20001388
 8013c2c:	20001e28 	.word	0x20001e28
 8013c30:	20001e0b 	.word	0x20001e0b
 8013c34:	080159c8 	.word	0x080159c8
 8013c38:	08013791 	.word	0x08013791
 8013c3c:	20001e29 	.word	0x20001e29
 8013c40:	08013f89 	.word	0x08013f89
 8013c44:	08015ba4 	.word	0x08015ba4
            }
            else
            {
                ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013c48:	4b13      	ldr	r3, [pc, #76]	; (8013c98 <fm_menu_config_pass+0x334>)
 8013c4a:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c50:	f107 0313 	add.w	r3, r7, #19
 8013c54:	2200      	movs	r2, #0
 8013c56:	4619      	mov	r1, r3
 8013c58:	4810      	ldr	r0, [pc, #64]	; (8013c9c <fm_menu_config_pass+0x338>)
 8013c5a:	f7fa fbf3 	bl	800e444 <_txe_queue_send>

                password_try = 0;
 8013c5e:	4b10      	ldr	r3, [pc, #64]	; (8013ca0 <fm_menu_config_pass+0x33c>)
 8013c60:	2200      	movs	r2, #0
 8013c62:	701a      	strb	r2, [r3, #0]
        }

        /*
         * Reinicio el arreglo de la contraseña ingresada.
         */
        password_index = PASS_0;
 8013c64:	4b0f      	ldr	r3, [pc, #60]	; (8013ca4 <fm_menu_config_pass+0x340>)
 8013c66:	2200      	movs	r2, #0
 8013c68:	701a      	strb	r2, [r3, #0]
        password[0] = PASS_0;
 8013c6a:	4b0f      	ldr	r3, [pc, #60]	; (8013ca8 <fm_menu_config_pass+0x344>)
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	701a      	strb	r2, [r3, #0]
        password[1] = PASS_0;
 8013c70:	4b0d      	ldr	r3, [pc, #52]	; (8013ca8 <fm_menu_config_pass+0x344>)
 8013c72:	2200      	movs	r2, #0
 8013c74:	705a      	strb	r2, [r3, #1]
        password[2] = PASS_0;
 8013c76:	4b0c      	ldr	r3, [pc, #48]	; (8013ca8 <fm_menu_config_pass+0x344>)
 8013c78:	2200      	movs	r2, #0
 8013c7a:	709a      	strb	r2, [r3, #2]
        password[PASSWORD_LENGTH - 1] = PASS_0;
 8013c7c:	4b0a      	ldr	r3, [pc, #40]	; (8013ca8 <fm_menu_config_pass+0x344>)
 8013c7e:	2200      	movs	r2, #0
 8013c80:	70da      	strb	r2, [r3, #3]
        new_entry = 1;
 8013c82:	4b0a      	ldr	r3, [pc, #40]	; (8013cac <fm_menu_config_pass+0x348>)
 8013c84:	2201      	movs	r2, #1
 8013c86:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013c88:	4b09      	ldr	r3, [pc, #36]	; (8013cb0 <fm_menu_config_pass+0x34c>)
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013c8e:	697b      	ldr	r3, [r7, #20]
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	3718      	adds	r7, #24
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bdb0      	pop	{r4, r5, r7, pc}
 8013c98:	08014655 	.word	0x08014655
 8013c9c:	20001388 	.word	0x20001388
 8013ca0:	20001e29 	.word	0x20001e29
 8013ca4:	20001e21 	.word	0x20001e21
 8013ca8:	20001e24 	.word	0x20001e24
 8013cac:	20000148 	.word	0x20000148
 8013cb0:	20001e28 	.word	0x20001e28

08013cb4 <fm_menu_config_units_tim>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_tim(fm_event_t event_id)
{
 8013cb4:	b5b0      	push	{r4, r5, r7, lr}
 8013cb6:	b0d8      	sub	sp, #352	; 0x160
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	4602      	mov	r2, r0
 8013cbc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013cc0:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013cc4:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 8013cc6:	4ba8      	ldr	r3, [pc, #672]	; (8013f68 <fm_menu_config_units_tim+0x2b4>)
 8013cc8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    fm_event_t event_now;

    if (new_entry == 1)
 8013ccc:	4ba7      	ldr	r3, [pc, #668]	; (8013f6c <fm_menu_config_units_tim+0x2b8>)
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	2b01      	cmp	r3, #1
 8013cd2:	d104      	bne.n	8013cde <fm_menu_config_units_tim+0x2a>
    {
        fm_lcd_clear();
 8013cd4:	f7fb fe8f 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 8013cd8:	4ba4      	ldr	r3, [pc, #656]	; (8013f6c <fm_menu_config_units_tim+0x2b8>)
 8013cda:	2200      	movs	r2, #0
 8013cdc:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_tim(event_id);
 8013cde:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013ce2:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7fc fa81 	bl	80101f0 <fm_lcd_units_tim>
    fm_lcd_refresh();
 8013cee:	f7fc fa0e 	bl	801010e <fm_lcd_refresh>

    switch (event_id)
 8013cf2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013cf6:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013cfa:	781b      	ldrb	r3, [r3, #0]
 8013cfc:	3b01      	subs	r3, #1
 8013cfe:	2b04      	cmp	r3, #4
 8013d00:	f200 8103 	bhi.w	8013f0a <fm_menu_config_units_tim+0x256>
 8013d04:	a201      	add	r2, pc, #4	; (adr r2, 8013d0c <fm_menu_config_units_tim+0x58>)
 8013d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d0a:	bf00      	nop
 8013d0c:	08013f0b 	.word	0x08013f0b
 8013d10:	08013d21 	.word	0x08013d21
 8013d14:	08013dc3 	.word	0x08013dc3
 8013d18:	08013e51 	.word	0x08013e51
 8013d1c:	08013ee3 	.word	0x08013ee3
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013d20:	4b93      	ldr	r3, [pc, #588]	; (8013f70 <fm_menu_config_units_tim+0x2bc>)
 8013d22:	781b      	ldrb	r3, [r3, #0]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d03e      	beq.n	8013da6 <fm_menu_config_units_tim+0xf2>
            {
                if (fm_factory_get_rate().unit_time == H)
 8013d28:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013d2c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7fb f8ff 	bl	800ef34 <fm_factory_get_rate>
 8013d36:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013d3a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013d3e:	7e5b      	ldrb	r3, [r3, #25]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d103      	bne.n	8013d4c <fm_menu_config_units_tim+0x98>
                {
                    fm_factory_modify_time_units(D);
 8013d44:	2001      	movs	r0, #1
 8013d46:	f7fb fc61 	bl	800f60c <fm_factory_modify_time_units>
 8013d4a:	e02a      	b.n	8013da2 <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013d4c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7fb f8ed 	bl	800ef34 <fm_factory_get_rate>
 8013d5a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d62:	7e5b      	ldrb	r3, [r3, #25]
 8013d64:	2b01      	cmp	r3, #1
 8013d66:	d103      	bne.n	8013d70 <fm_menu_config_units_tim+0xbc>
                {
                    fm_factory_modify_time_units(S);
 8013d68:	2002      	movs	r0, #2
 8013d6a:	f7fb fc4f 	bl	800f60c <fm_factory_modify_time_units>
 8013d6e:	e018      	b.n	8013da2 <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == S)
 8013d70:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7fb f8dd 	bl	800ef34 <fm_factory_get_rate>
 8013d7a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8013d7e:	2b02      	cmp	r3, #2
 8013d80:	d103      	bne.n	8013d8a <fm_menu_config_units_tim+0xd6>
                {
                    fm_factory_modify_time_units(M);
 8013d82:	2003      	movs	r0, #3
 8013d84:	f7fb fc42 	bl	800f60c <fm_factory_modify_time_units>
 8013d88:	e00b      	b.n	8013da2 <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013d8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7fb f8d0 	bl	800ef34 <fm_factory_get_rate>
 8013d94:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8013d98:	2b03      	cmp	r3, #3
 8013d9a:	d102      	bne.n	8013da2 <fm_menu_config_units_tim+0xee>
                {
                    fm_factory_modify_time_units(H);
 8013d9c:	2000      	movs	r0, #0
 8013d9e:	f7fb fc35 	bl	800f60c <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 8013da2:	f7fb fe28 	bl	800f9f6 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013da6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013daa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013dae:	2201      	movs	r2, #1
 8013db0:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013db2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013db6:	2200      	movs	r2, #0
 8013db8:	4619      	mov	r1, r3
 8013dba:	486e      	ldr	r0, [pc, #440]	; (8013f74 <fm_menu_config_units_tim+0x2c0>)
 8013dbc:	f7fa fb42 	bl	800e444 <_txe_queue_send>
        break;
 8013dc0:	e0a4      	b.n	8013f0c <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013dc2:	4b6b      	ldr	r3, [pc, #428]	; (8013f70 <fm_menu_config_units_tim+0x2bc>)
 8013dc4:	781b      	ldrb	r3, [r3, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d034      	beq.n	8013e34 <fm_menu_config_units_tim+0x180>
            {
                if (fm_factory_get_rate().unit_time == H)
 8013dca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f7fb f8b0 	bl	800ef34 <fm_factory_get_rate>
 8013dd4:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d103      	bne.n	8013de4 <fm_menu_config_units_tim+0x130>
                {
                    fm_factory_modify_time_units(M);
 8013ddc:	2003      	movs	r0, #3
 8013dde:	f7fb fc15 	bl	800f60c <fm_factory_modify_time_units>
 8013de2:	e025      	b.n	8013e30 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013de4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fb f8a3 	bl	800ef34 <fm_factory_get_rate>
 8013dee:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8013df2:	2b03      	cmp	r3, #3
 8013df4:	d103      	bne.n	8013dfe <fm_menu_config_units_tim+0x14a>
                {
                    fm_factory_modify_time_units(S);
 8013df6:	2002      	movs	r0, #2
 8013df8:	f7fb fc08 	bl	800f60c <fm_factory_modify_time_units>
 8013dfc:	e018      	b.n	8013e30 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == S)
 8013dfe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7fb f896 	bl	800ef34 <fm_factory_get_rate>
 8013e08:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8013e0c:	2b02      	cmp	r3, #2
 8013e0e:	d103      	bne.n	8013e18 <fm_menu_config_units_tim+0x164>
                {
                    fm_factory_modify_time_units(D);
 8013e10:	2001      	movs	r0, #1
 8013e12:	f7fb fbfb 	bl	800f60c <fm_factory_modify_time_units>
 8013e16:	e00b      	b.n	8013e30 <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013e18:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f7fb f889 	bl	800ef34 <fm_factory_get_rate>
 8013e22:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8013e26:	2b01      	cmp	r3, #1
 8013e28:	d102      	bne.n	8013e30 <fm_menu_config_units_tim+0x17c>
                {
                    fm_factory_modify_time_units(H);
 8013e2a:	2000      	movs	r0, #0
 8013e2c:	f7fb fbee 	bl	800f60c <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 8013e30:	f7fb fde1 	bl	800f9f6 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013e34:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013e38:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013e3c:	2201      	movs	r2, #1
 8013e3e:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013e40:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013e44:	2200      	movs	r2, #0
 8013e46:	4619      	mov	r1, r3
 8013e48:	484a      	ldr	r0, [pc, #296]	; (8013f74 <fm_menu_config_units_tim+0x2c0>)
 8013e4a:	f7fa fafb 	bl	800e444 <_txe_queue_send>
        break;
 8013e4e:	e05d      	b.n	8013f0c <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013e50:	4b47      	ldr	r3, [pc, #284]	; (8013f70 <fm_menu_config_units_tim+0x2bc>)
 8013e52:	781b      	ldrb	r3, [r3, #0]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d036      	beq.n	8013ec6 <fm_menu_config_units_tim+0x212>
            {
                if (fm_factory_get_units_tim().res == RES_0)
 8013e58:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f7fb f8a7 	bl	800efb0 <fm_factory_get_units_tim>
 8013e62:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d104      	bne.n	8013e74 <fm_menu_config_units_tim+0x1c0>
                {
                    fm_factory_modify_res_rate(RES_1, RES_1);
 8013e6a:	2101      	movs	r1, #1
 8013e6c:	2001      	movs	r0, #1
 8013e6e:	f7fb fb87 	bl	800f580 <fm_factory_modify_res_rate>
 8013e72:	e028      	b.n	8013ec6 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_1)
 8013e74:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f7fb f899 	bl	800efb0 <fm_factory_get_units_tim>
 8013e7e:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 8013e82:	2b01      	cmp	r3, #1
 8013e84:	d104      	bne.n	8013e90 <fm_menu_config_units_tim+0x1dc>
                {
                    fm_factory_modify_res_rate(RES_2, RES_2);
 8013e86:	2102      	movs	r1, #2
 8013e88:	2002      	movs	r0, #2
 8013e8a:	f7fb fb79 	bl	800f580 <fm_factory_modify_res_rate>
 8013e8e:	e01a      	b.n	8013ec6 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_2)
 8013e90:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7fb f88b 	bl	800efb0 <fm_factory_get_units_tim>
 8013e9a:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 8013e9e:	2b02      	cmp	r3, #2
 8013ea0:	d104      	bne.n	8013eac <fm_menu_config_units_tim+0x1f8>
                {
                    fm_factory_modify_res_rate(RES_3, RES_3);
 8013ea2:	2103      	movs	r1, #3
 8013ea4:	2003      	movs	r0, #3
 8013ea6:	f7fb fb6b 	bl	800f580 <fm_factory_modify_res_rate>
 8013eaa:	e00c      	b.n	8013ec6 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_3)
 8013eac:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f7fb f87d 	bl	800efb0 <fm_factory_get_units_tim>
 8013eb6:	f897 3158 	ldrb.w	r3, [r7, #344]	; 0x158
 8013eba:	2b03      	cmp	r3, #3
 8013ebc:	d103      	bne.n	8013ec6 <fm_menu_config_units_tim+0x212>
                {
                    fm_factory_modify_res_rate(RES_0, RES_0);
 8013ebe:	2100      	movs	r1, #0
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	f7fb fb5d 	bl	800f580 <fm_factory_modify_res_rate>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013ec6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013eca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013ece:	2201      	movs	r2, #1
 8013ed0:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013ed2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	4619      	mov	r1, r3
 8013eda:	4826      	ldr	r0, [pc, #152]	; (8013f74 <fm_menu_config_units_tim+0x2c0>)
 8013edc:	f7fa fab2 	bl	800e444 <_txe_queue_send>
        break;
 8013ee0:	e014      	b.n	8013f0c <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013ee2:	4b25      	ldr	r3, [pc, #148]	; (8013f78 <fm_menu_config_units_tim+0x2c4>)
 8013ee4:	2201      	movs	r2, #1
 8013ee6:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 8013ee8:	4b24      	ldr	r3, [pc, #144]	; (8013f7c <fm_menu_config_units_tim+0x2c8>)
 8013eea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            event_now = EVENT_LCD_REFRESH;
 8013eee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013ef2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013ef6:	2201      	movs	r2, #1
 8013ef8:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013efa:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013efe:	2200      	movs	r2, #0
 8013f00:	4619      	mov	r1, r3
 8013f02:	481c      	ldr	r0, [pc, #112]	; (8013f74 <fm_menu_config_units_tim+0x2c0>)
 8013f04:	f7fa fa9e 	bl	800e444 <_txe_queue_send>
        break;
 8013f08:	e000      	b.n	8013f0c <fm_menu_config_units_tim+0x258>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013f0a:	bf00      	nop
    }

    previous_event = event_id;
 8013f0c:	4a1c      	ldr	r2, [pc, #112]	; (8013f80 <fm_menu_config_units_tim+0x2cc>)
 8013f0e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013f12:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades de tiempo y resolucion\n";
 8013f1a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013f1e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8013f22:	4a18      	ldr	r2, [pc, #96]	; (8013f84 <fm_menu_config_units_tim+0x2d0>)
 8013f24:	461c      	mov	r4, r3
 8013f26:	4615      	mov	r5, r2
 8013f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013f34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013f38:	f107 0308 	add.w	r3, r7, #8
 8013f3c:	212c      	movs	r1, #44	; 0x2c
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7fa febc 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013f44:	4b0c      	ldr	r3, [pc, #48]	; (8013f78 <fm_menu_config_units_tim+0x2c4>)
 8013f46:	781b      	ldrb	r3, [r3, #0]
 8013f48:	2b01      	cmp	r3, #1
 8013f4a:	d105      	bne.n	8013f58 <fm_menu_config_units_tim+0x2a4>
    {
        new_entry = 1;
 8013f4c:	4b07      	ldr	r3, [pc, #28]	; (8013f6c <fm_menu_config_units_tim+0x2b8>)
 8013f4e:	2201      	movs	r2, #1
 8013f50:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013f52:	4b09      	ldr	r3, [pc, #36]	; (8013f78 <fm_menu_config_units_tim+0x2c4>)
 8013f54:	2200      	movs	r2, #0
 8013f56:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013f58:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bdb0      	pop	{r4, r5, r7, pc}
 8013f66:	bf00      	nop
 8013f68:	08013cb5 	.word	0x08013cb5
 8013f6c:	20000149 	.word	0x20000149
 8013f70:	20001e0a 	.word	0x20001e0a
 8013f74:	20001388 	.word	0x20001388
 8013f78:	20001e2a 	.word	0x20001e2a
 8013f7c:	08012705 	.word	0x08012705
 8013f80:	20001e0b 	.word	0x20001e0b
 8013f84:	080159e8 	.word	0x080159e8

08013f88 <fm_menu_config_units_vol>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_vol(fm_event_t event_id)
{
 8013f88:	b5b0      	push	{r4, r5, r7, lr}
 8013f8a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	4602      	mov	r2, r0
 8013f92:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013f96:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8013f9a:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8013f9c:	4bc8      	ldr	r3, [pc, #800]	; (80142c0 <fm_menu_config_units_vol+0x338>)
 8013f9e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    fm_event_t event_now;

    if (new_entry == 1)
 8013fa2:	4bc8      	ldr	r3, [pc, #800]	; (80142c4 <fm_menu_config_units_vol+0x33c>)
 8013fa4:	781b      	ldrb	r3, [r3, #0]
 8013fa6:	2b01      	cmp	r3, #1
 8013fa8:	d104      	bne.n	8013fb4 <fm_menu_config_units_vol+0x2c>
    {
        fm_lcd_clear();
 8013faa:	f7fb fd24 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 8013fae:	4bc5      	ldr	r3, [pc, #788]	; (80142c4 <fm_menu_config_units_vol+0x33c>)
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_vol(event_id);
 8013fb4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013fb8:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8013fbc:	781b      	ldrb	r3, [r3, #0]
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7fc f9b2 	bl	8010328 <fm_lcd_units_vol>
    fm_lcd_refresh();
 8013fc4:	f7fc f8a3 	bl	801010e <fm_lcd_refresh>

    switch (event_id)
 8013fc8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013fcc:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8013fd0:	781b      	ldrb	r3, [r3, #0]
 8013fd2:	3b01      	subs	r3, #1
 8013fd4:	2b04      	cmp	r3, #4
 8013fd6:	f200 817f 	bhi.w	80142d8 <fm_menu_config_units_vol+0x350>
 8013fda:	a201      	add	r2, pc, #4	; (adr r2, 8013fe0 <fm_menu_config_units_vol+0x58>)
 8013fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fe0:	080142d9 	.word	0x080142d9
 8013fe4:	08013ff5 	.word	0x08013ff5
 8013fe8:	08014117 	.word	0x08014117
 8013fec:	080141fd 	.word	0x080141fd
 8013ff0:	08014297 	.word	0x08014297
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013ff4:	4bb4      	ldr	r3, [pc, #720]	; (80142c8 <fm_menu_config_units_vol+0x340>)
 8013ff6:	781b      	ldrb	r3, [r3, #0]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d07e      	beq.n	80140fa <fm_menu_config_units_vol+0x172>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 8013ffc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014000:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014004:	4618      	mov	r0, r3
 8014006:	f7fa fe75 	bl	800ecf4 <fm_factory_get_acm>
 801400a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801400e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014012:	7e1b      	ldrb	r3, [r3, #24]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d103      	bne.n	8014020 <fm_menu_config_units_vol+0x98>
                {
                    fm_factory_modify_volume_units(M3);
 8014018:	2001      	movs	r0, #1
 801401a:	f7fb fb11 	bl	800f640 <fm_factory_modify_volume_units>
 801401e:	e06a      	b.n	80140f6 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 8014020:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014024:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8014028:	4618      	mov	r0, r3
 801402a:	f7fa fe63 	bl	800ecf4 <fm_factory_get_acm>
 801402e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014032:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8014036:	7e1b      	ldrb	r3, [r3, #24]
 8014038:	2b01      	cmp	r3, #1
 801403a:	d103      	bne.n	8014044 <fm_menu_config_units_vol+0xbc>
                {
                    fm_factory_modify_volume_units(MC);
 801403c:	2002      	movs	r0, #2
 801403e:	f7fb faff 	bl	800f640 <fm_factory_modify_volume_units>
 8014042:	e058      	b.n	80140f6 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == MC)
 8014044:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014048:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801404c:	4618      	mov	r0, r3
 801404e:	f7fa fe51 	bl	800ecf4 <fm_factory_get_acm>
 8014052:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014056:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801405a:	7e1b      	ldrb	r3, [r3, #24]
 801405c:	2b02      	cmp	r3, #2
 801405e:	d103      	bne.n	8014068 <fm_menu_config_units_vol+0xe0>
                {
                    fm_factory_modify_volume_units(KG);
 8014060:	2003      	movs	r0, #3
 8014062:	f7fb faed 	bl	800f640 <fm_factory_modify_volume_units>
 8014066:	e046      	b.n	80140f6 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 8014068:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801406c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8014070:	4618      	mov	r0, r3
 8014072:	f7fa fe3f 	bl	800ecf4 <fm_factory_get_acm>
 8014076:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801407a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801407e:	7e1b      	ldrb	r3, [r3, #24]
 8014080:	2b03      	cmp	r3, #3
 8014082:	d103      	bne.n	801408c <fm_menu_config_units_vol+0x104>
                {
                    fm_factory_modify_volume_units(GL);
 8014084:	2004      	movs	r0, #4
 8014086:	f7fb fadb 	bl	800f640 <fm_factory_modify_volume_units>
 801408a:	e034      	b.n	80140f6 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 801408c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014090:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8014094:	4618      	mov	r0, r3
 8014096:	f7fa fe2d 	bl	800ecf4 <fm_factory_get_acm>
 801409a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801409e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80140a2:	7e1b      	ldrb	r3, [r3, #24]
 80140a4:	2b04      	cmp	r3, #4
 80140a6:	d103      	bne.n	80140b0 <fm_menu_config_units_vol+0x128>
                {
                    fm_factory_modify_volume_units(BR);
 80140a8:	2005      	movs	r0, #5
 80140aa:	f7fb fac9 	bl	800f640 <fm_factory_modify_volume_units>
 80140ae:	e022      	b.n	80140f6 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 80140b0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80140b8:	4618      	mov	r0, r3
 80140ba:	f7fa fe1b 	bl	800ecf4 <fm_factory_get_acm>
 80140be:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140c2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80140c6:	7e1b      	ldrb	r3, [r3, #24]
 80140c8:	2b05      	cmp	r3, #5
 80140ca:	d103      	bne.n	80140d4 <fm_menu_config_units_vol+0x14c>
                {
                    fm_factory_modify_volume_units(NOTHING);
 80140cc:	2007      	movs	r0, #7
 80140ce:	f7fb fab7 	bl	800f640 <fm_factory_modify_volume_units>
 80140d2:	e010      	b.n	80140f6 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 80140d4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80140dc:	4618      	mov	r0, r3
 80140de:	f7fa fe09 	bl	800ecf4 <fm_factory_get_acm>
 80140e2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80140ea:	7e1b      	ldrb	r3, [r3, #24]
 80140ec:	2b07      	cmp	r3, #7
 80140ee:	d102      	bne.n	80140f6 <fm_menu_config_units_vol+0x16e>
                {
                    fm_factory_modify_volume_units(LT);
 80140f0:	2000      	movs	r0, #0
 80140f2:	f7fb faa5 	bl	800f640 <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 80140f6:	f7fb fc7e 	bl	800f9f6 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 80140fa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140fe:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8014102:	2201      	movs	r2, #1
 8014104:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014106:	f107 0337 	add.w	r3, r7, #55	; 0x37
 801410a:	2200      	movs	r2, #0
 801410c:	4619      	mov	r1, r3
 801410e:	486f      	ldr	r0, [pc, #444]	; (80142cc <fm_menu_config_units_vol+0x344>)
 8014110:	f7fa f998 	bl	800e444 <_txe_queue_send>
        break;
 8014114:	e0e1      	b.n	80142da <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8014116:	4b6c      	ldr	r3, [pc, #432]	; (80142c8 <fm_menu_config_units_vol+0x340>)
 8014118:	781b      	ldrb	r3, [r3, #0]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d060      	beq.n	80141e0 <fm_menu_config_units_vol+0x258>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 801411e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014126:	4618      	mov	r0, r3
 8014128:	f7fa fde4 	bl	800ecf4 <fm_factory_get_acm>
 801412c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014134:	7e1b      	ldrb	r3, [r3, #24]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d103      	bne.n	8014142 <fm_menu_config_units_vol+0x1ba>
                {
                    fm_factory_modify_volume_units(NOTHING);
 801413a:	2007      	movs	r0, #7
 801413c:	f7fb fa80 	bl	800f640 <fm_factory_modify_volume_units>
 8014140:	e04c      	b.n	80141dc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 8014142:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014146:	4618      	mov	r0, r3
 8014148:	f7fa fdd4 	bl	800ecf4 <fm_factory_get_acm>
 801414c:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 8014150:	2b07      	cmp	r3, #7
 8014152:	d103      	bne.n	801415c <fm_menu_config_units_vol+0x1d4>
                {
                    fm_factory_modify_volume_units(BR);
 8014154:	2005      	movs	r0, #5
 8014156:	f7fb fa73 	bl	800f640 <fm_factory_modify_volume_units>
 801415a:	e03f      	b.n	80141dc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 801415c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8014160:	4618      	mov	r0, r3
 8014162:	f7fa fdc7 	bl	800ecf4 <fm_factory_get_acm>
 8014166:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
 801416a:	2b05      	cmp	r3, #5
 801416c:	d103      	bne.n	8014176 <fm_menu_config_units_vol+0x1ee>
                {
                    fm_factory_modify_volume_units(GL);
 801416e:	2004      	movs	r0, #4
 8014170:	f7fb fa66 	bl	800f640 <fm_factory_modify_volume_units>
 8014174:	e032      	b.n	80141dc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 8014176:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801417a:	4618      	mov	r0, r3
 801417c:	f7fa fdba 	bl	800ecf4 <fm_factory_get_acm>
 8014180:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 8014184:	2b04      	cmp	r3, #4
 8014186:	d103      	bne.n	8014190 <fm_menu_config_units_vol+0x208>
                {
                    fm_factory_modify_volume_units(KG);
 8014188:	2003      	movs	r0, #3
 801418a:	f7fb fa59 	bl	800f640 <fm_factory_modify_volume_units>
 801418e:	e025      	b.n	80141dc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 8014190:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8014194:	4618      	mov	r0, r3
 8014196:	f7fa fdad 	bl	800ecf4 <fm_factory_get_acm>
 801419a:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 801419e:	2b03      	cmp	r3, #3
 80141a0:	d103      	bne.n	80141aa <fm_menu_config_units_vol+0x222>
                {
                    fm_factory_modify_volume_units(MC);
 80141a2:	2002      	movs	r0, #2
 80141a4:	f7fb fa4c 	bl	800f640 <fm_factory_modify_volume_units>
 80141a8:	e018      	b.n	80141dc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == MC)
 80141aa:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80141ae:	4618      	mov	r0, r3
 80141b0:	f7fa fda0 	bl	800ecf4 <fm_factory_get_acm>
 80141b4:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 80141b8:	2b02      	cmp	r3, #2
 80141ba:	d103      	bne.n	80141c4 <fm_menu_config_units_vol+0x23c>
                {
                    fm_factory_modify_volume_units(M3);
 80141bc:	2001      	movs	r0, #1
 80141be:	f7fb fa3f 	bl	800f640 <fm_factory_modify_volume_units>
 80141c2:	e00b      	b.n	80141dc <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 80141c4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7fa fd93 	bl	800ecf4 <fm_factory_get_acm>
 80141ce:	f897 31f0 	ldrb.w	r3, [r7, #496]	; 0x1f0
 80141d2:	2b01      	cmp	r3, #1
 80141d4:	d102      	bne.n	80141dc <fm_menu_config_units_vol+0x254>
                {
                    fm_factory_modify_volume_units(LT);
 80141d6:	2000      	movs	r0, #0
 80141d8:	f7fb fa32 	bl	800f640 <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 80141dc:	f7fb fc0b 	bl	800f9f6 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 80141e0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80141e4:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 80141e8:	2201      	movs	r2, #1
 80141ea:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80141ec:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80141f0:	2200      	movs	r2, #0
 80141f2:	4619      	mov	r1, r3
 80141f4:	4835      	ldr	r0, [pc, #212]	; (80142cc <fm_menu_config_units_vol+0x344>)
 80141f6:	f7fa f925 	bl	800e444 <_txe_queue_send>
        break;
 80141fa:	e06e      	b.n	80142da <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80141fc:	4b32      	ldr	r3, [pc, #200]	; (80142c8 <fm_menu_config_units_vol+0x340>)
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d03a      	beq.n	801427a <fm_menu_config_units_vol+0x2f2>
            {
                if (fm_factory_get_units_vol().res == RES_0)
 8014204:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8014208:	4618      	mov	r0, r3
 801420a:	f7fa fee3 	bl	800efd4 <fm_factory_get_units_vol>
 801420e:	f897 3200 	ldrb.w	r3, [r7, #512]	; 0x200
 8014212:	2b00      	cmp	r3, #0
 8014214:	d105      	bne.n	8014222 <fm_menu_config_units_vol+0x29a>
                {
                    fm_factory_modify_res_acm_ttl(RES_1, RES_1, RES_1);
 8014216:	2201      	movs	r2, #1
 8014218:	2101      	movs	r1, #1
 801421a:	2001      	movs	r0, #1
 801421c:	f7fb f992 	bl	800f544 <fm_factory_modify_res_acm_ttl>
 8014220:	e02b      	b.n	801427a <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_1)
 8014222:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8014226:	4618      	mov	r0, r3
 8014228:	f7fa fed4 	bl	800efd4 <fm_factory_get_units_vol>
 801422c:	f897 3208 	ldrb.w	r3, [r7, #520]	; 0x208
 8014230:	2b01      	cmp	r3, #1
 8014232:	d105      	bne.n	8014240 <fm_menu_config_units_vol+0x2b8>
                {
                    fm_factory_modify_res_acm_ttl(RES_2, RES_2, RES_2);
 8014234:	2202      	movs	r2, #2
 8014236:	2102      	movs	r1, #2
 8014238:	2002      	movs	r0, #2
 801423a:	f7fb f983 	bl	800f544 <fm_factory_modify_res_acm_ttl>
 801423e:	e01c      	b.n	801427a <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_2)
 8014240:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8014244:	4618      	mov	r0, r3
 8014246:	f7fa fec5 	bl	800efd4 <fm_factory_get_units_vol>
 801424a:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 801424e:	2b02      	cmp	r3, #2
 8014250:	d105      	bne.n	801425e <fm_menu_config_units_vol+0x2d6>
                {
                    fm_factory_modify_res_acm_ttl(RES_3, RES_3, RES_3);
 8014252:	2203      	movs	r2, #3
 8014254:	2103      	movs	r1, #3
 8014256:	2003      	movs	r0, #3
 8014258:	f7fb f974 	bl	800f544 <fm_factory_modify_res_acm_ttl>
 801425c:	e00d      	b.n	801427a <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_3)
 801425e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8014262:	4618      	mov	r0, r3
 8014264:	f7fa feb6 	bl	800efd4 <fm_factory_get_units_vol>
 8014268:	f897 3218 	ldrb.w	r3, [r7, #536]	; 0x218
 801426c:	2b03      	cmp	r3, #3
 801426e:	d104      	bne.n	801427a <fm_menu_config_units_vol+0x2f2>
                {
                    fm_factory_modify_res_acm_ttl(RES_0, RES_0, RES_0);
 8014270:	2200      	movs	r2, #0
 8014272:	2100      	movs	r1, #0
 8014274:	2000      	movs	r0, #0
 8014276:	f7fb f965 	bl	800f544 <fm_factory_modify_res_acm_ttl>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 801427a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801427e:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8014282:	2201      	movs	r2, #1
 8014284:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014286:	f107 0337 	add.w	r3, r7, #55	; 0x37
 801428a:	2200      	movs	r2, #0
 801428c:	4619      	mov	r1, r3
 801428e:	480f      	ldr	r0, [pc, #60]	; (80142cc <fm_menu_config_units_vol+0x344>)
 8014290:	f7fa f8d8 	bl	800e444 <_txe_queue_send>
        break;
 8014294:	e021      	b.n	80142da <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8014296:	4b0e      	ldr	r3, [pc, #56]	; (80142d0 <fm_menu_config_units_vol+0x348>)
 8014298:	2201      	movs	r2, #1
 801429a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 801429c:	4b0d      	ldr	r3, [pc, #52]	; (80142d4 <fm_menu_config_units_vol+0x34c>)
 801429e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
            event_now = EVENT_LCD_REFRESH;
 80142a2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80142a6:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 80142aa:	2201      	movs	r2, #1
 80142ac:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80142ae:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80142b2:	2200      	movs	r2, #0
 80142b4:	4619      	mov	r1, r3
 80142b6:	4805      	ldr	r0, [pc, #20]	; (80142cc <fm_menu_config_units_vol+0x344>)
 80142b8:	f7fa f8c4 	bl	800e444 <_txe_queue_send>
        break;
 80142bc:	e00d      	b.n	80142da <fm_menu_config_units_vol+0x352>
 80142be:	bf00      	nop
 80142c0:	08013f89 	.word	0x08013f89
 80142c4:	2000014a 	.word	0x2000014a
 80142c8:	20001e0a 	.word	0x20001e0a
 80142cc:	20001388 	.word	0x20001388
 80142d0:	20001e2b 	.word	0x20001e2b
 80142d4:	08013cb5 	.word	0x08013cb5
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80142d8:	bf00      	nop
    }

    previous_event = event_id;
 80142da:	4a16      	ldr	r2, [pc, #88]	; (8014334 <fm_menu_config_units_vol+0x3ac>)
 80142dc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80142e0:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80142e4:	781b      	ldrb	r3, [r3, #0]
 80142e6:	7013      	strb	r3, [r2, #0]
#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "Configurar unidades de volumen y resolucion\n";
 80142e8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80142ec:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80142f0:	4a11      	ldr	r2, [pc, #68]	; (8014338 <fm_menu_config_units_vol+0x3b0>)
 80142f2:	461c      	mov	r4, r3
 80142f4:	4615      	mov	r5, r2
 80142f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014302:	c407      	stmia	r4!, {r0, r1, r2}
 8014304:	7023      	strb	r3, [r4, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8014306:	f107 0308 	add.w	r3, r7, #8
 801430a:	212d      	movs	r1, #45	; 0x2d
 801430c:	4618      	mov	r0, r3
 801430e:	f7fa fcd5 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014312:	4b0a      	ldr	r3, [pc, #40]	; (801433c <fm_menu_config_units_vol+0x3b4>)
 8014314:	781b      	ldrb	r3, [r3, #0]
 8014316:	2b01      	cmp	r3, #1
 8014318:	d105      	bne.n	8014326 <fm_menu_config_units_vol+0x39e>
    {
        new_entry = 1;
 801431a:	4b09      	ldr	r3, [pc, #36]	; (8014340 <fm_menu_config_units_vol+0x3b8>)
 801431c:	2201      	movs	r2, #1
 801431e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014320:	4b06      	ldr	r3, [pc, #24]	; (801433c <fm_menu_config_units_vol+0x3b4>)
 8014322:	2200      	movs	r2, #0
 8014324:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014326:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
}
 801432a:	4618      	mov	r0, r3
 801432c:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8014330:	46bd      	mov	sp, r7
 8014332:	bdb0      	pop	{r4, r5, r7, pc}
 8014334:	20001e0b 	.word	0x20001e0b
 8014338:	08015a14 	.word	0x08015a14
 801433c:	20001e2b 	.word	0x20001e2b
 8014340:	2000014a 	.word	0x2000014a

08014344 <fm_menu_show_acm_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_rate(fm_event_t event_id)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b086      	sub	sp, #24
 8014348:	af00      	add	r7, sp, #0
 801434a:	4603      	mov	r3, r0
 801434c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 801434e:	4b38      	ldr	r3, [pc, #224]	; (8014430 <fm_menu_show_acm_rate+0xec>)
 8014350:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8014352:	4b38      	ldr	r3, [pc, #224]	; (8014434 <fm_menu_show_acm_rate+0xf0>)
 8014354:	781b      	ldrb	r3, [r3, #0]
 8014356:	2b01      	cmp	r3, #1
 8014358:	d104      	bne.n	8014364 <fm_menu_show_acm_rate+0x20>
    {
        fm_lcd_clear();
 801435a:	f7fb fb4c 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 801435e:	4b35      	ldr	r3, [pc, #212]	; (8014434 <fm_menu_show_acm_rate+0xf0>)
 8014360:	2200      	movs	r2, #0
 8014362:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_rate();
 8014364:	f7fb fa84 	bl	800f870 <fm_lcd_acm_rate>
    fm_lcd_refresh();
 8014368:	f7fb fed1 	bl	801010e <fm_lcd_refresh>

    switch (event_id)
 801436c:	79fb      	ldrb	r3, [r7, #7]
 801436e:	3b01      	subs	r3, #1
 8014370:	2b04      	cmp	r3, #4
 8014372:	d841      	bhi.n	80143f8 <fm_menu_show_acm_rate+0xb4>
 8014374:	a201      	add	r2, pc, #4	; (adr r2, 801437c <fm_menu_show_acm_rate+0x38>)
 8014376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801437a:	bf00      	nop
 801437c:	080143f9 	.word	0x080143f9
 8014380:	08014391 	.word	0x08014391
 8014384:	080143af 	.word	0x080143af
 8014388:	080143cd 	.word	0x080143cd
 801438c:	080143e5 	.word	0x080143e5
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8014390:	4b29      	ldr	r3, [pc, #164]	; (8014438 <fm_menu_show_acm_rate+0xf4>)
 8014392:	2201      	movs	r2, #1
 8014394:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014396:	4b29      	ldr	r3, [pc, #164]	; (801443c <fm_menu_show_acm_rate+0xf8>)
 8014398:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 801439a:	2301      	movs	r3, #1
 801439c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801439e:	f107 0313 	add.w	r3, r7, #19
 80143a2:	2200      	movs	r2, #0
 80143a4:	4619      	mov	r1, r3
 80143a6:	4826      	ldr	r0, [pc, #152]	; (8014440 <fm_menu_show_acm_rate+0xfc>)
 80143a8:	f7fa f84c 	bl	800e444 <_txe_queue_send>
        break;
 80143ac:	e025      	b.n	80143fa <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 80143ae:	4b22      	ldr	r3, [pc, #136]	; (8014438 <fm_menu_show_acm_rate+0xf4>)
 80143b0:	2201      	movs	r2, #1
 80143b2:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 80143b4:	4b23      	ldr	r3, [pc, #140]	; (8014444 <fm_menu_show_acm_rate+0x100>)
 80143b6:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80143b8:	2301      	movs	r3, #1
 80143ba:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80143bc:	f107 0313 	add.w	r3, r7, #19
 80143c0:	2200      	movs	r2, #0
 80143c2:	4619      	mov	r1, r3
 80143c4:	481e      	ldr	r0, [pc, #120]	; (8014440 <fm_menu_show_acm_rate+0xfc>)
 80143c6:	f7fa f83d 	bl	800e444 <_txe_queue_send>
        break;
 80143ca:	e016      	b.n	80143fa <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_ENTER:
            fm_factory_reset_acm();
 80143cc:	f7fb f952 	bl	800f674 <fm_factory_reset_acm>
            event_now = EVENT_LCD_REFRESH;
 80143d0:	2301      	movs	r3, #1
 80143d2:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80143d4:	f107 0313 	add.w	r3, r7, #19
 80143d8:	2200      	movs	r2, #0
 80143da:	4619      	mov	r1, r3
 80143dc:	4818      	ldr	r0, [pc, #96]	; (8014440 <fm_menu_show_acm_rate+0xfc>)
 80143de:	f7fa f831 	bl	800e444 <_txe_queue_send>
        break;
 80143e2:	e00a      	b.n	80143fa <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 80143e4:	2301      	movs	r3, #1
 80143e6:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80143e8:	f107 0313 	add.w	r3, r7, #19
 80143ec:	2200      	movs	r2, #0
 80143ee:	4619      	mov	r1, r3
 80143f0:	4813      	ldr	r0, [pc, #76]	; (8014440 <fm_menu_show_acm_rate+0xfc>)
 80143f2:	f7fa f827 	bl	800e444 <_txe_queue_send>
        break;
 80143f6:	e000      	b.n	80143fa <fm_menu_show_acm_rate+0xb6>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80143f8:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_rate\n";
 80143fa:	4a13      	ldr	r2, [pc, #76]	; (8014448 <fm_menu_show_acm_rate+0x104>)
 80143fc:	f107 0308 	add.w	r3, r7, #8
 8014400:	ca07      	ldmia	r2, {r0, r1, r2}
 8014402:	c303      	stmia	r3!, {r0, r1}
 8014404:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8014406:	f107 0308 	add.w	r3, r7, #8
 801440a:	210a      	movs	r1, #10
 801440c:	4618      	mov	r0, r3
 801440e:	f7fa fc55 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014412:	4b09      	ldr	r3, [pc, #36]	; (8014438 <fm_menu_show_acm_rate+0xf4>)
 8014414:	781b      	ldrb	r3, [r3, #0]
 8014416:	2b01      	cmp	r3, #1
 8014418:	d105      	bne.n	8014426 <fm_menu_show_acm_rate+0xe2>
    {
        new_entry = 1;
 801441a:	4b06      	ldr	r3, [pc, #24]	; (8014434 <fm_menu_show_acm_rate+0xf0>)
 801441c:	2201      	movs	r2, #1
 801441e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014420:	4b05      	ldr	r3, [pc, #20]	; (8014438 <fm_menu_show_acm_rate+0xf4>)
 8014422:	2200      	movs	r2, #0
 8014424:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014426:	697b      	ldr	r3, [r7, #20]
}
 8014428:	4618      	mov	r0, r3
 801442a:	3718      	adds	r7, #24
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}
 8014430:	08014345 	.word	0x08014345
 8014434:	2000014b 	.word	0x2000014b
 8014438:	20001e2c 	.word	0x20001e2c
 801443c:	0801478d 	.word	0x0801478d
 8014440:	20001388 	.word	0x20001388
 8014444:	0801444d 	.word	0x0801444d
 8014448:	08015a44 	.word	0x08015a44

0801444c <fm_menu_show_acm_temp>:
 * la pantalla.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_temp(fm_event_t event_id)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b086      	sub	sp, #24
 8014450:	af00      	add	r7, sp, #0
 8014452:	4603      	mov	r3, r0
 8014454:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8014456:	4b37      	ldr	r3, [pc, #220]	; (8014534 <fm_menu_show_acm_temp+0xe8>)
 8014458:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 801445a:	4b37      	ldr	r3, [pc, #220]	; (8014538 <fm_menu_show_acm_temp+0xec>)
 801445c:	781b      	ldrb	r3, [r3, #0]
 801445e:	2b01      	cmp	r3, #1
 8014460:	d104      	bne.n	801446c <fm_menu_show_acm_temp+0x20>
    {
        fm_lcd_clear();
 8014462:	f7fb fac8 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 8014466:	4b34      	ldr	r3, [pc, #208]	; (8014538 <fm_menu_show_acm_temp+0xec>)
 8014468:	2200      	movs	r2, #0
 801446a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_temp();
 801446c:	f7fb fa6b 	bl	800f946 <fm_lcd_acm_temp>
    fm_lcd_refresh();
 8014470:	f7fb fe4d 	bl	801010e <fm_lcd_refresh>

    switch (event_id)
 8014474:	79fb      	ldrb	r3, [r7, #7]
 8014476:	3b01      	subs	r3, #1
 8014478:	2b04      	cmp	r3, #4
 801447a:	d83f      	bhi.n	80144fc <fm_menu_show_acm_temp+0xb0>
 801447c:	a201      	add	r2, pc, #4	; (adr r2, 8014484 <fm_menu_show_acm_temp+0x38>)
 801447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014482:	bf00      	nop
 8014484:	080144fd 	.word	0x080144fd
 8014488:	08014499 	.word	0x08014499
 801448c:	080144b7 	.word	0x080144b7
 8014490:	080144d5 	.word	0x080144d5
 8014494:	080144e9 	.word	0x080144e9
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8014498:	4b28      	ldr	r3, [pc, #160]	; (801453c <fm_menu_show_acm_temp+0xf0>)
 801449a:	2201      	movs	r2, #1
 801449c:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 801449e:	4b28      	ldr	r3, [pc, #160]	; (8014540 <fm_menu_show_acm_temp+0xf4>)
 80144a0:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80144a2:	2301      	movs	r3, #1
 80144a4:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80144a6:	f107 0313 	add.w	r3, r7, #19
 80144aa:	2200      	movs	r2, #0
 80144ac:	4619      	mov	r1, r3
 80144ae:	4825      	ldr	r0, [pc, #148]	; (8014544 <fm_menu_show_acm_temp+0xf8>)
 80144b0:	f7f9 ffc8 	bl	800e444 <_txe_queue_send>
        break;
 80144b4:	e023      	b.n	80144fe <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 80144b6:	4b21      	ldr	r3, [pc, #132]	; (801453c <fm_menu_show_acm_temp+0xf0>)
 80144b8:	2201      	movs	r2, #1
 80144ba:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 80144bc:	4b22      	ldr	r3, [pc, #136]	; (8014548 <fm_menu_show_acm_temp+0xfc>)
 80144be:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80144c0:	2301      	movs	r3, #1
 80144c2:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80144c4:	f107 0313 	add.w	r3, r7, #19
 80144c8:	2200      	movs	r2, #0
 80144ca:	4619      	mov	r1, r3
 80144cc:	481d      	ldr	r0, [pc, #116]	; (8014544 <fm_menu_show_acm_temp+0xf8>)
 80144ce:	f7f9 ffb9 	bl	800e444 <_txe_queue_send>
        break;
 80144d2:	e014      	b.n	80144fe <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 80144d4:	2301      	movs	r3, #1
 80144d6:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80144d8:	f107 0313 	add.w	r3, r7, #19
 80144dc:	2200      	movs	r2, #0
 80144de:	4619      	mov	r1, r3
 80144e0:	4818      	ldr	r0, [pc, #96]	; (8014544 <fm_menu_show_acm_temp+0xf8>)
 80144e2:	f7f9 ffaf 	bl	800e444 <_txe_queue_send>
        break;
 80144e6:	e00a      	b.n	80144fe <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 80144e8:	2301      	movs	r3, #1
 80144ea:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80144ec:	f107 0313 	add.w	r3, r7, #19
 80144f0:	2200      	movs	r2, #0
 80144f2:	4619      	mov	r1, r3
 80144f4:	4813      	ldr	r0, [pc, #76]	; (8014544 <fm_menu_show_acm_temp+0xf8>)
 80144f6:	f7f9 ffa5 	bl	800e444 <_txe_queue_send>
        break;
 80144fa:	e000      	b.n	80144fe <fm_menu_show_acm_temp+0xb2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80144fc:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_temp\n";
 80144fe:	4a13      	ldr	r2, [pc, #76]	; (801454c <fm_menu_show_acm_temp+0x100>)
 8014500:	f107 0308 	add.w	r3, r7, #8
 8014504:	ca07      	ldmia	r2, {r0, r1, r2}
 8014506:	c303      	stmia	r3!, {r0, r1}
 8014508:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801450a:	f107 0308 	add.w	r3, r7, #8
 801450e:	210a      	movs	r1, #10
 8014510:	4618      	mov	r0, r3
 8014512:	f7fa fbd3 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014516:	4b09      	ldr	r3, [pc, #36]	; (801453c <fm_menu_show_acm_temp+0xf0>)
 8014518:	781b      	ldrb	r3, [r3, #0]
 801451a:	2b01      	cmp	r3, #1
 801451c:	d105      	bne.n	801452a <fm_menu_show_acm_temp+0xde>
    {
        new_entry = 1;
 801451e:	4b06      	ldr	r3, [pc, #24]	; (8014538 <fm_menu_show_acm_temp+0xec>)
 8014520:	2201      	movs	r2, #1
 8014522:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014524:	4b05      	ldr	r3, [pc, #20]	; (801453c <fm_menu_show_acm_temp+0xf0>)
 8014526:	2200      	movs	r2, #0
 8014528:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801452a:	697b      	ldr	r3, [r7, #20]
}
 801452c:	4618      	mov	r0, r3
 801452e:	3718      	adds	r7, #24
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}
 8014534:	0801444d 	.word	0x0801444d
 8014538:	2000014c 	.word	0x2000014c
 801453c:	20001e2d 	.word	0x20001e2d
 8014540:	08014345 	.word	0x08014345
 8014544:	20001388 	.word	0x20001388
 8014548:	08014551 	.word	0x08014551
 801454c:	08015a50 	.word	0x08015a50

08014550 <fm_menu_show_date_hour>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_date_hour(fm_event_t event_id)
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b086      	sub	sp, #24
 8014554:	af00      	add	r7, sp, #0
 8014556:	4603      	mov	r3, r0
 8014558:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 801455a:	4b38      	ldr	r3, [pc, #224]	; (801463c <fm_menu_show_date_hour+0xec>)
 801455c:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 801455e:	4b38      	ldr	r3, [pc, #224]	; (8014640 <fm_menu_show_date_hour+0xf0>)
 8014560:	781b      	ldrb	r3, [r3, #0]
 8014562:	2b01      	cmp	r3, #1
 8014564:	d104      	bne.n	8014570 <fm_menu_show_date_hour+0x20>
    {
        fm_lcd_clear();
 8014566:	f7fb fa46 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 801456a:	4b35      	ldr	r3, [pc, #212]	; (8014640 <fm_menu_show_date_hour+0xf0>)
 801456c:	2200      	movs	r2, #0
 801456e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(USER, event_id, DAY);
 8014570:	79fb      	ldrb	r3, [r7, #7]
 8014572:	2200      	movs	r2, #0
 8014574:	4619      	mov	r1, r3
 8014576:	2000      	movs	r0, #0
 8014578:	f7fb fa44 	bl	800fa04 <fm_lcd_date_hour>

    fm_lcd_refresh();
 801457c:	f7fb fdc7 	bl	801010e <fm_lcd_refresh>

    switch (event_id)
 8014580:	79fb      	ldrb	r3, [r7, #7]
 8014582:	3b01      	subs	r3, #1
 8014584:	2b04      	cmp	r3, #4
 8014586:	d83a      	bhi.n	80145fe <fm_menu_show_date_hour+0xae>
 8014588:	a201      	add	r2, pc, #4	; (adr r2, 8014590 <fm_menu_show_date_hour+0x40>)
 801458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801458e:	bf00      	nop
 8014590:	080145ff 	.word	0x080145ff
 8014594:	080145a5 	.word	0x080145a5
 8014598:	080145c3 	.word	0x080145c3
 801459c:	080145d7 	.word	0x080145d7
 80145a0:	080145eb 	.word	0x080145eb
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 80145a4:	4b27      	ldr	r3, [pc, #156]	; (8014644 <fm_menu_show_date_hour+0xf4>)
 80145a6:	2201      	movs	r2, #1
 80145a8:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 80145aa:	4b27      	ldr	r3, [pc, #156]	; (8014648 <fm_menu_show_date_hour+0xf8>)
 80145ac:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80145ae:	2301      	movs	r3, #1
 80145b0:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80145b2:	f107 0313 	add.w	r3, r7, #19
 80145b6:	2200      	movs	r2, #0
 80145b8:	4619      	mov	r1, r3
 80145ba:	4824      	ldr	r0, [pc, #144]	; (801464c <fm_menu_show_date_hour+0xfc>)
 80145bc:	f7f9 ff42 	bl	800e444 <_txe_queue_send>
        break;
 80145c0:	e01e      	b.n	8014600 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 80145c2:	2301      	movs	r3, #1
 80145c4:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80145c6:	f107 0313 	add.w	r3, r7, #19
 80145ca:	2200      	movs	r2, #0
 80145cc:	4619      	mov	r1, r3
 80145ce:	481f      	ldr	r0, [pc, #124]	; (801464c <fm_menu_show_date_hour+0xfc>)
 80145d0:	f7f9 ff38 	bl	800e444 <_txe_queue_send>
        break;
 80145d4:	e014      	b.n	8014600 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 80145d6:	2301      	movs	r3, #1
 80145d8:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80145da:	f107 0313 	add.w	r3, r7, #19
 80145de:	2200      	movs	r2, #0
 80145e0:	4619      	mov	r1, r3
 80145e2:	481a      	ldr	r0, [pc, #104]	; (801464c <fm_menu_show_date_hour+0xfc>)
 80145e4:	f7f9 ff2e 	bl	800e444 <_txe_queue_send>
        break;
 80145e8:	e00a      	b.n	8014600 <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 80145ea:	2301      	movs	r3, #1
 80145ec:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80145ee:	f107 0313 	add.w	r3, r7, #19
 80145f2:	2200      	movs	r2, #0
 80145f4:	4619      	mov	r1, r3
 80145f6:	4815      	ldr	r0, [pc, #84]	; (801464c <fm_menu_show_date_hour+0xfc>)
 80145f8:	f7f9 ff24 	bl	800e444 <_txe_queue_send>
        break;
 80145fc:	e000      	b.n	8014600 <fm_menu_show_date_hour+0xb0>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80145fe:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer3[] = "date_hour\n";
 8014600:	4a13      	ldr	r2, [pc, #76]	; (8014650 <fm_menu_show_date_hour+0x100>)
 8014602:	f107 0308 	add.w	r3, r7, #8
 8014606:	ca07      	ldmia	r2, {r0, r1, r2}
 8014608:	c303      	stmia	r3!, {r0, r1}
 801460a:	801a      	strh	r2, [r3, #0]
 801460c:	3302      	adds	r3, #2
 801460e:	0c12      	lsrs	r2, r2, #16
 8014610:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer3, sizeof(msg_buffer3));
 8014612:	f107 0308 	add.w	r3, r7, #8
 8014616:	210b      	movs	r1, #11
 8014618:	4618      	mov	r0, r3
 801461a:	f7fa fb4f 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 801461e:	4b09      	ldr	r3, [pc, #36]	; (8014644 <fm_menu_show_date_hour+0xf4>)
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	2b01      	cmp	r3, #1
 8014624:	d105      	bne.n	8014632 <fm_menu_show_date_hour+0xe2>
    {
        new_entry = 1;
 8014626:	4b06      	ldr	r3, [pc, #24]	; (8014640 <fm_menu_show_date_hour+0xf0>)
 8014628:	2201      	movs	r2, #1
 801462a:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801462c:	4b05      	ldr	r3, [pc, #20]	; (8014644 <fm_menu_show_date_hour+0xf4>)
 801462e:	2200      	movs	r2, #0
 8014630:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014632:	697b      	ldr	r3, [r7, #20]
}
 8014634:	4618      	mov	r0, r3
 8014636:	3718      	adds	r7, #24
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}
 801463c:	08014551 	.word	0x08014551
 8014640:	2000014d 	.word	0x2000014d
 8014644:	20001e2e 	.word	0x20001e2e
 8014648:	0801444d 	.word	0x0801444d
 801464c:	20001388 	.word	0x20001388
 8014650:	08015a5c 	.word	0x08015a5c

08014654 <fm_menu_show_init>:
 * encendiendo todos los segmentos y la backlight por 3 segundos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_init(fm_event_t event_id)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b086      	sub	sp, #24
 8014658:	af00      	add	r7, sp, #0
 801465a:	4603      	mov	r3, r0
 801465c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const uint8_t counter_max = 30;
 801465e:	231e      	movs	r3, #30
 8014660:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8014662:	4b42      	ldr	r3, [pc, #264]	; (801476c <fm_menu_show_init+0x118>)
 8014664:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8014666:	4b42      	ldr	r3, [pc, #264]	; (8014770 <fm_menu_show_init+0x11c>)
 8014668:	781b      	ldrb	r3, [r3, #0]
 801466a:	2b01      	cmp	r3, #1
 801466c:	d10c      	bne.n	8014688 <fm_menu_show_init+0x34>
    {
        HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 801466e:	2200      	movs	r2, #0
 8014670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014674:	483f      	ldr	r0, [pc, #252]	; (8014774 <fm_menu_show_init+0x120>)
 8014676:	f7ef feff 	bl	8004478 <HAL_GPIO_WritePin>
        PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
        fm_lcd_init();
 801467a:	f7fb fbb4 	bl	800fde6 <fm_lcd_init>
        fm_lcd_clear();
 801467e:	f7fb f9ba 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 8014682:	4b3b      	ldr	r3, [pc, #236]	; (8014770 <fm_menu_show_init+0x11c>)
 8014684:	2200      	movs	r2, #0
 8014686:	701a      	strb	r2, [r3, #0]
    }

    pcf8553_write_all(0xFF); // @suppress("Avoid magic numbers")
 8014688:	20ff      	movs	r0, #255	; 0xff
 801468a:	f7fe f81f 	bl	80126cc <pcf8553_write_all>

    switch (event_id)
 801468e:	79fb      	ldrb	r3, [r7, #7]
 8014690:	3b01      	subs	r3, #1
 8014692:	2b04      	cmp	r3, #4
 8014694:	d848      	bhi.n	8014728 <fm_menu_show_init+0xd4>
 8014696:	a201      	add	r2, pc, #4	; (adr r2, 801469c <fm_menu_show_init+0x48>)
 8014698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801469c:	080146d5 	.word	0x080146d5
 80146a0:	08014729 	.word	0x08014729
 80146a4:	08014729 	.word	0x08014729
 80146a8:	080146b1 	.word	0x080146b1
 80146ac:	08014729 	.word	0x08014729
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 80146b0:	4831      	ldr	r0, [pc, #196]	; (8014778 <fm_menu_show_init+0x124>)
 80146b2:	f7f9 fe5f 	bl	800e374 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 80146b6:	4b31      	ldr	r3, [pc, #196]	; (801477c <fm_menu_show_init+0x128>)
 80146b8:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80146ba:	2301      	movs	r3, #1
 80146bc:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80146be:	f107 0312 	add.w	r3, r7, #18
 80146c2:	2200      	movs	r2, #0
 80146c4:	4619      	mov	r1, r3
 80146c6:	482c      	ldr	r0, [pc, #176]	; (8014778 <fm_menu_show_init+0x124>)
 80146c8:	f7f9 febc 	bl	800e444 <_txe_queue_send>
            new_exit = 1;
 80146cc:	4b2c      	ldr	r3, [pc, #176]	; (8014780 <fm_menu_show_init+0x12c>)
 80146ce:	2201      	movs	r2, #1
 80146d0:	701a      	strb	r2, [r3, #0]
        break;
 80146d2:	e02a      	b.n	801472a <fm_menu_show_init+0xd6>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if (counter < counter_max)
 80146d4:	4b2b      	ldr	r3, [pc, #172]	; (8014784 <fm_menu_show_init+0x130>)
 80146d6:	781b      	ldrb	r3, [r3, #0]
 80146d8:	7cfa      	ldrb	r2, [r7, #19]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d912      	bls.n	8014704 <fm_menu_show_init+0xb0>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 80146de:	2064      	movs	r0, #100	; 0x64
 80146e0:	f7ed f9f2 	bl	8001ac8 <HAL_Delay>
                counter++;
 80146e4:	4b27      	ldr	r3, [pc, #156]	; (8014784 <fm_menu_show_init+0x130>)
 80146e6:	781b      	ldrb	r3, [r3, #0]
 80146e8:	3301      	adds	r3, #1
 80146ea:	b2da      	uxtb	r2, r3
 80146ec:	4b25      	ldr	r3, [pc, #148]	; (8014784 <fm_menu_show_init+0x130>)
 80146ee:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 80146f0:	2301      	movs	r3, #1
 80146f2:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80146f4:	f107 0312 	add.w	r3, r7, #18
 80146f8:	2200      	movs	r2, #0
 80146fa:	4619      	mov	r1, r3
 80146fc:	481e      	ldr	r0, [pc, #120]	; (8014778 <fm_menu_show_init+0x124>)
 80146fe:	f7f9 fea1 	bl	800e444 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 8014702:	e012      	b.n	801472a <fm_menu_show_init+0xd6>
                tx_queue_flush(&event_queue_ptr);
 8014704:	481c      	ldr	r0, [pc, #112]	; (8014778 <fm_menu_show_init+0x124>)
 8014706:	f7f9 fe35 	bl	800e374 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 801470a:	4b1c      	ldr	r3, [pc, #112]	; (801477c <fm_menu_show_init+0x128>)
 801470c:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 801470e:	2301      	movs	r3, #1
 8014710:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014712:	f107 0312 	add.w	r3, r7, #18
 8014716:	2200      	movs	r2, #0
 8014718:	4619      	mov	r1, r3
 801471a:	4817      	ldr	r0, [pc, #92]	; (8014778 <fm_menu_show_init+0x124>)
 801471c:	f7f9 fe92 	bl	800e444 <_txe_queue_send>
                new_exit = 1;
 8014720:	4b17      	ldr	r3, [pc, #92]	; (8014780 <fm_menu_show_init+0x12c>)
 8014722:	2201      	movs	r2, #1
 8014724:	701a      	strb	r2, [r3, #0]
        break;
 8014726:	e000      	b.n	801472a <fm_menu_show_init+0xd6>
        default:
        break;
 8014728:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "INIT\n";
 801472a:	4a17      	ldr	r2, [pc, #92]	; (8014788 <fm_menu_show_init+0x134>)
 801472c:	f107 030c 	add.w	r3, r7, #12
 8014730:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014734:	6018      	str	r0, [r3, #0]
 8014736:	3304      	adds	r3, #4
 8014738:	8019      	strh	r1, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801473a:	f107 030c 	add.w	r3, r7, #12
 801473e:	2106      	movs	r1, #6
 8014740:	4618      	mov	r0, r3
 8014742:	f7fa fabb 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014746:	4b0e      	ldr	r3, [pc, #56]	; (8014780 <fm_menu_show_init+0x12c>)
 8014748:	781b      	ldrb	r3, [r3, #0]
 801474a:	2b01      	cmp	r3, #1
 801474c:	d108      	bne.n	8014760 <fm_menu_show_init+0x10c>
    {
        counter = 0;
 801474e:	4b0d      	ldr	r3, [pc, #52]	; (8014784 <fm_menu_show_init+0x130>)
 8014750:	2200      	movs	r2, #0
 8014752:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8014754:	4b06      	ldr	r3, [pc, #24]	; (8014770 <fm_menu_show_init+0x11c>)
 8014756:	2201      	movs	r2, #1
 8014758:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801475a:	4b09      	ldr	r3, [pc, #36]	; (8014780 <fm_menu_show_init+0x12c>)
 801475c:	2200      	movs	r2, #0
 801475e:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014760:	697b      	ldr	r3, [r7, #20]
}
 8014762:	4618      	mov	r0, r3
 8014764:	3718      	adds	r7, #24
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop
 801476c:	08014655 	.word	0x08014655
 8014770:	2000014e 	.word	0x2000014e
 8014774:	42020800 	.word	0x42020800
 8014778:	20001388 	.word	0x20001388
 801477c:	08014891 	.word	0x08014891
 8014780:	20001e2f 	.word	0x20001e2f
 8014784:	20001e30 	.word	0x20001e30
 8014788:	08015a68 	.word	0x08015a68

0801478c <fm_menu_show_ttl_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_ttl_rate(fm_event_t event_id)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b086      	sub	sp, #24
 8014790:	af00      	add	r7, sp, #0
 8014792:	4603      	mov	r3, r0
 8014794:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014796:	4b37      	ldr	r3, [pc, #220]	; (8014874 <fm_menu_show_ttl_rate+0xe8>)
 8014798:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 801479a:	4b37      	ldr	r3, [pc, #220]	; (8014878 <fm_menu_show_ttl_rate+0xec>)
 801479c:	781b      	ldrb	r3, [r3, #0]
 801479e:	2b01      	cmp	r3, #1
 80147a0:	d104      	bne.n	80147ac <fm_menu_show_ttl_rate+0x20>
    {
        fm_lcd_clear();
 80147a2:	f7fb f928 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 80147a6:	4b34      	ldr	r3, [pc, #208]	; (8014878 <fm_menu_show_ttl_rate+0xec>)
 80147a8:	2200      	movs	r2, #0
 80147aa:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_ttl_rate();
 80147ac:	f7fb fcb5 	bl	801011a <fm_lcd_ttl_rate>
    fm_lcd_refresh();
 80147b0:	f7fb fcad 	bl	801010e <fm_lcd_refresh>

    switch (event_id)
 80147b4:	79fb      	ldrb	r3, [r7, #7]
 80147b6:	3b01      	subs	r3, #1
 80147b8:	2b04      	cmp	r3, #4
 80147ba:	d83f      	bhi.n	801483c <fm_menu_show_ttl_rate+0xb0>
 80147bc:	a201      	add	r2, pc, #4	; (adr r2, 80147c4 <fm_menu_show_ttl_rate+0x38>)
 80147be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147c2:	bf00      	nop
 80147c4:	0801483d 	.word	0x0801483d
 80147c8:	080147d9 	.word	0x080147d9
 80147cc:	080147ed 	.word	0x080147ed
 80147d0:	0801480b 	.word	0x0801480b
 80147d4:	0801481f 	.word	0x0801481f
    {
        case EVENT_KEY_UP:
            event_now = EVENT_LCD_REFRESH;
 80147d8:	2301      	movs	r3, #1
 80147da:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80147dc:	f107 0313 	add.w	r3, r7, #19
 80147e0:	2200      	movs	r2, #0
 80147e2:	4619      	mov	r1, r3
 80147e4:	4825      	ldr	r0, [pc, #148]	; (801487c <fm_menu_show_ttl_rate+0xf0>)
 80147e6:	f7f9 fe2d 	bl	800e444 <_txe_queue_send>
        break;
 80147ea:	e028      	b.n	801483e <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 80147ec:	4b24      	ldr	r3, [pc, #144]	; (8014880 <fm_menu_show_ttl_rate+0xf4>)
 80147ee:	2201      	movs	r2, #1
 80147f0:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 80147f2:	4b24      	ldr	r3, [pc, #144]	; (8014884 <fm_menu_show_ttl_rate+0xf8>)
 80147f4:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80147f6:	2301      	movs	r3, #1
 80147f8:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80147fa:	f107 0313 	add.w	r3, r7, #19
 80147fe:	2200      	movs	r2, #0
 8014800:	4619      	mov	r1, r3
 8014802:	481e      	ldr	r0, [pc, #120]	; (801487c <fm_menu_show_ttl_rate+0xf0>)
 8014804:	f7f9 fe1e 	bl	800e444 <_txe_queue_send>
        break;
 8014808:	e019      	b.n	801483e <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 801480a:	2301      	movs	r3, #1
 801480c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801480e:	f107 0313 	add.w	r3, r7, #19
 8014812:	2200      	movs	r2, #0
 8014814:	4619      	mov	r1, r3
 8014816:	4819      	ldr	r0, [pc, #100]	; (801487c <fm_menu_show_ttl_rate+0xf0>)
 8014818:	f7f9 fe14 	bl	800e444 <_txe_queue_send>
        break;
 801481c:	e00f      	b.n	801483e <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801481e:	4b18      	ldr	r3, [pc, #96]	; (8014880 <fm_menu_show_ttl_rate+0xf4>)
 8014820:	2201      	movs	r2, #1
 8014822:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8014824:	4b18      	ldr	r3, [pc, #96]	; (8014888 <fm_menu_show_ttl_rate+0xfc>)
 8014826:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014828:	2301      	movs	r3, #1
 801482a:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801482c:	f107 0313 	add.w	r3, r7, #19
 8014830:	2200      	movs	r2, #0
 8014832:	4619      	mov	r1, r3
 8014834:	4811      	ldr	r0, [pc, #68]	; (801487c <fm_menu_show_ttl_rate+0xf0>)
 8014836:	f7f9 fe05 	bl	800e444 <_txe_queue_send>
        break;
 801483a:	e000      	b.n	801483e <fm_menu_show_ttl_rate+0xb2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801483c:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "ttl_rate\n";
 801483e:	4a13      	ldr	r2, [pc, #76]	; (801488c <fm_menu_show_ttl_rate+0x100>)
 8014840:	f107 0308 	add.w	r3, r7, #8
 8014844:	ca07      	ldmia	r2, {r0, r1, r2}
 8014846:	c303      	stmia	r3!, {r0, r1}
 8014848:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801484a:	f107 0308 	add.w	r3, r7, #8
 801484e:	210a      	movs	r1, #10
 8014850:	4618      	mov	r0, r3
 8014852:	f7fa fa33 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014856:	4b0a      	ldr	r3, [pc, #40]	; (8014880 <fm_menu_show_ttl_rate+0xf4>)
 8014858:	781b      	ldrb	r3, [r3, #0]
 801485a:	2b01      	cmp	r3, #1
 801485c:	d105      	bne.n	801486a <fm_menu_show_ttl_rate+0xde>
    {
        new_entry = 1;
 801485e:	4b06      	ldr	r3, [pc, #24]	; (8014878 <fm_menu_show_ttl_rate+0xec>)
 8014860:	2201      	movs	r2, #1
 8014862:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014864:	4b06      	ldr	r3, [pc, #24]	; (8014880 <fm_menu_show_ttl_rate+0xf4>)
 8014866:	2200      	movs	r2, #0
 8014868:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801486a:	697b      	ldr	r3, [r7, #20]
}
 801486c:	4618      	mov	r0, r3
 801486e:	3718      	adds	r7, #24
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}
 8014874:	0801478d 	.word	0x0801478d
 8014878:	2000014f 	.word	0x2000014f
 801487c:	20001388 	.word	0x20001388
 8014880:	20001e31 	.word	0x20001e31
 8014884:	08014345 	.word	0x08014345
 8014888:	08013965 	.word	0x08013965
 801488c:	08015a70 	.word	0x08015a70

08014890 <fm_menu_show_version>:
 * caudales.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_version(fm_event_t event_id)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b086      	sub	sp, #24
 8014894:	af00      	add	r7, sp, #0
 8014896:	4603      	mov	r3, r0
 8014898:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const uint8_t counter_max = 30;
 801489a:	231e      	movs	r3, #30
 801489c:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 801489e:	4b42      	ldr	r3, [pc, #264]	; (80149a8 <fm_menu_show_version+0x118>)
 80148a0:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80148a2:	4b42      	ldr	r3, [pc, #264]	; (80149ac <fm_menu_show_version+0x11c>)
 80148a4:	781b      	ldrb	r3, [r3, #0]
 80148a6:	2b01      	cmp	r3, #1
 80148a8:	d104      	bne.n	80148b4 <fm_menu_show_version+0x24>
    {
        fm_lcd_clear();
 80148aa:	f7fb f8a4 	bl	800f9f6 <fm_lcd_clear>
        new_entry = 0;
 80148ae:	4b3f      	ldr	r3, [pc, #252]	; (80149ac <fm_menu_show_version+0x11c>)
 80148b0:	2200      	movs	r2, #0
 80148b2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_version(PNT_4, PNT_5);
 80148b4:	2105      	movs	r1, #5
 80148b6:	2004      	movs	r0, #4
 80148b8:	f7fb fdd6 	bl	8010468 <fm_lcd_version>
    fm_lcd_refresh();
 80148bc:	f7fb fc27 	bl	801010e <fm_lcd_refresh>

    switch (event_id)
 80148c0:	79fb      	ldrb	r3, [r7, #7]
 80148c2:	3b01      	subs	r3, #1
 80148c4:	2b04      	cmp	r3, #4
 80148c6:	d849      	bhi.n	801495c <fm_menu_show_version+0xcc>
 80148c8:	a201      	add	r2, pc, #4	; (adr r2, 80148d0 <fm_menu_show_version+0x40>)
 80148ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148ce:	bf00      	nop
 80148d0:	08014909 	.word	0x08014909
 80148d4:	0801495d 	.word	0x0801495d
 80148d8:	0801495d 	.word	0x0801495d
 80148dc:	080148e5 	.word	0x080148e5
 80148e0:	0801495d 	.word	0x0801495d
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 80148e4:	4832      	ldr	r0, [pc, #200]	; (80149b0 <fm_menu_show_version+0x120>)
 80148e6:	f7f9 fd45 	bl	800e374 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 80148ea:	4b32      	ldr	r3, [pc, #200]	; (80149b4 <fm_menu_show_version+0x124>)
 80148ec:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80148ee:	2301      	movs	r3, #1
 80148f0:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80148f2:	f107 0312 	add.w	r3, r7, #18
 80148f6:	2200      	movs	r2, #0
 80148f8:	4619      	mov	r1, r3
 80148fa:	482d      	ldr	r0, [pc, #180]	; (80149b0 <fm_menu_show_version+0x120>)
 80148fc:	f7f9 fda2 	bl	800e444 <_txe_queue_send>
            new_exit = 1;
 8014900:	4b2d      	ldr	r3, [pc, #180]	; (80149b8 <fm_menu_show_version+0x128>)
 8014902:	2201      	movs	r2, #1
 8014904:	701a      	strb	r2, [r3, #0]
        break;
 8014906:	e02a      	b.n	801495e <fm_menu_show_version+0xce>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if (counter < counter_max)
 8014908:	4b2c      	ldr	r3, [pc, #176]	; (80149bc <fm_menu_show_version+0x12c>)
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	7cfa      	ldrb	r2, [r7, #19]
 801490e:	429a      	cmp	r2, r3
 8014910:	d912      	bls.n	8014938 <fm_menu_show_version+0xa8>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 8014912:	2064      	movs	r0, #100	; 0x64
 8014914:	f7ed f8d8 	bl	8001ac8 <HAL_Delay>
                counter++;
 8014918:	4b28      	ldr	r3, [pc, #160]	; (80149bc <fm_menu_show_version+0x12c>)
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	3301      	adds	r3, #1
 801491e:	b2da      	uxtb	r2, r3
 8014920:	4b26      	ldr	r3, [pc, #152]	; (80149bc <fm_menu_show_version+0x12c>)
 8014922:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 8014924:	2301      	movs	r3, #1
 8014926:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014928:	f107 0312 	add.w	r3, r7, #18
 801492c:	2200      	movs	r2, #0
 801492e:	4619      	mov	r1, r3
 8014930:	481f      	ldr	r0, [pc, #124]	; (80149b0 <fm_menu_show_version+0x120>)
 8014932:	f7f9 fd87 	bl	800e444 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 8014936:	e012      	b.n	801495e <fm_menu_show_version+0xce>
                tx_queue_flush(&event_queue_ptr);
 8014938:	481d      	ldr	r0, [pc, #116]	; (80149b0 <fm_menu_show_version+0x120>)
 801493a:	f7f9 fd1b 	bl	800e374 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 801493e:	4b1d      	ldr	r3, [pc, #116]	; (80149b4 <fm_menu_show_version+0x124>)
 8014940:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8014942:	2301      	movs	r3, #1
 8014944:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014946:	f107 0312 	add.w	r3, r7, #18
 801494a:	2200      	movs	r2, #0
 801494c:	4619      	mov	r1, r3
 801494e:	4818      	ldr	r0, [pc, #96]	; (80149b0 <fm_menu_show_version+0x120>)
 8014950:	f7f9 fd78 	bl	800e444 <_txe_queue_send>
                new_exit = 1;
 8014954:	4b18      	ldr	r3, [pc, #96]	; (80149b8 <fm_menu_show_version+0x128>)
 8014956:	2201      	movs	r2, #1
 8014958:	701a      	strb	r2, [r3, #0]
        break;
 801495a:	e000      	b.n	801495e <fm_menu_show_version+0xce>
        default:
        break;
 801495c:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "version\n";
 801495e:	4a18      	ldr	r2, [pc, #96]	; (80149c0 <fm_menu_show_version+0x130>)
 8014960:	f107 0308 	add.w	r3, r7, #8
 8014964:	ca07      	ldmia	r2, {r0, r1, r2}
 8014966:	c303      	stmia	r3!, {r0, r1}
 8014968:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801496a:	f107 0308 	add.w	r3, r7, #8
 801496e:	2109      	movs	r1, #9
 8014970:	4618      	mov	r0, r3
 8014972:	f7fa f9a3 	bl	800ecbc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014976:	4b10      	ldr	r3, [pc, #64]	; (80149b8 <fm_menu_show_version+0x128>)
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	2b01      	cmp	r3, #1
 801497c:	d10e      	bne.n	801499c <fm_menu_show_version+0x10c>
    {
        HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 801497e:	2201      	movs	r2, #1
 8014980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014984:	480f      	ldr	r0, [pc, #60]	; (80149c4 <fm_menu_show_version+0x134>)
 8014986:	f7ef fd77 	bl	8004478 <HAL_GPIO_WritePin>
        PCF8553_BACKLIGHT_Pin, GPIO_PIN_SET);
        counter = 0;
 801498a:	4b0c      	ldr	r3, [pc, #48]	; (80149bc <fm_menu_show_version+0x12c>)
 801498c:	2200      	movs	r2, #0
 801498e:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8014990:	4b06      	ldr	r3, [pc, #24]	; (80149ac <fm_menu_show_version+0x11c>)
 8014992:	2201      	movs	r2, #1
 8014994:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014996:	4b08      	ldr	r3, [pc, #32]	; (80149b8 <fm_menu_show_version+0x128>)
 8014998:	2200      	movs	r2, #0
 801499a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801499c:	697b      	ldr	r3, [r7, #20]
}
 801499e:	4618      	mov	r0, r3
 80149a0:	3718      	adds	r7, #24
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bd80      	pop	{r7, pc}
 80149a6:	bf00      	nop
 80149a8:	08014891 	.word	0x08014891
 80149ac:	20000150 	.word	0x20000150
 80149b0:	20001388 	.word	0x20001388
 80149b4:	0801478d 	.word	0x0801478d
 80149b8:	20001e32 	.word	0x20001e32
 80149bc:	20001e33 	.word	0x20001e33
 80149c0:	08015a7c 	.word	0x08015a7c
 80149c4:	42020800 	.word	0x42020800

080149c8 <fm_temp_stm32_format>:
 * grados celcius.
 * @param None
 * @retval Temperatura interna del micro en grados celcius.
 */
int fm_temp_stm32_format()
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b082      	sub	sp, #8
 80149cc:	af00      	add	r7, sp, #0
    uint16_t raw_value;
    int temp_celcius;

    fm_temp_stm32_get();
 80149ce:	f000 f82f 	bl	8014a30 <fm_temp_stm32_get>
    raw_value = HAL_ADC_GetValue(&hadc1);
 80149d2:	4813      	ldr	r0, [pc, #76]	; (8014a20 <fm_temp_stm32_format+0x58>)
 80149d4:	f7ee f866 	bl	8002aa4 <HAL_ADC_GetValue>
 80149d8:	4603      	mov	r3, r0
 80149da:	80fb      	strh	r3, [r7, #6]
    temp_celcius = __HAL_ADC_CALC_TEMPERATURE(&hadc1, 3285, raw_value,
 80149dc:	88fb      	ldrh	r3, [r7, #6]
 80149de:	009b      	lsls	r3, r3, #2
 80149e0:	f640 42d5 	movw	r2, #3285	; 0xcd5
 80149e4:	fb02 f303 	mul.w	r3, r2, r3
 80149e8:	461a      	mov	r2, r3
 80149ea:	4b0e      	ldr	r3, [pc, #56]	; (8014a24 <fm_temp_stm32_format+0x5c>)
 80149ec:	fba3 2302 	umull	r2, r3, r3, r2
 80149f0:	099b      	lsrs	r3, r3, #6
 80149f2:	461a      	mov	r2, r3
 80149f4:	4b0c      	ldr	r3, [pc, #48]	; (8014a28 <fm_temp_stm32_format+0x60>)
 80149f6:	881b      	ldrh	r3, [r3, #0]
 80149f8:	1ad3      	subs	r3, r2, r3
 80149fa:	2264      	movs	r2, #100	; 0x64
 80149fc:	fb03 f202 	mul.w	r2, r3, r2
 8014a00:	4b0a      	ldr	r3, [pc, #40]	; (8014a2c <fm_temp_stm32_format+0x64>)
 8014a02:	881b      	ldrh	r3, [r3, #0]
 8014a04:	4619      	mov	r1, r3
 8014a06:	4b08      	ldr	r3, [pc, #32]	; (8014a28 <fm_temp_stm32_format+0x60>)
 8014a08:	881b      	ldrh	r3, [r3, #0]
 8014a0a:	1acb      	subs	r3, r1, r3
 8014a0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8014a10:	331e      	adds	r3, #30
 8014a12:	603b      	str	r3, [r7, #0]
    ADC_RESOLUTION_12B);

    return (temp_celcius);
 8014a14:	683b      	ldr	r3, [r7, #0]
}
 8014a16:	4618      	mov	r0, r3
 8014a18:	3708      	adds	r7, #8
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	bd80      	pop	{r7, pc}
 8014a1e:	bf00      	nop
 8014a20:	200013c8 	.word	0x200013c8
 8014a24:	057619f1 	.word	0x057619f1
 8014a28:	0bfa0710 	.word	0x0bfa0710
 8014a2c:	0bfa0742 	.word	0x0bfa0742

08014a30 <fm_temp_stm32_get>:
 * @brief Función que lee el ADC 1 asociado al sensor de temperatura.
 * @param None
 * @retval None
 */
void fm_temp_stm32_get()
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b082      	sub	sp, #8
 8014a34:	af00      	add	r7, sp, #0
    const uint8_t poll_time = 100;
 8014a36:	2364      	movs	r3, #100	; 0x64
 8014a38:	71fb      	strb	r3, [r7, #7]

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8014a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a3e:	2100      	movs	r1, #0
 8014a40:	4808      	ldr	r0, [pc, #32]	; (8014a64 <fm_temp_stm32_get+0x34>)
 8014a42:	f7ef f8df 	bl	8003c04 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(&hadc1);
 8014a46:	4807      	ldr	r0, [pc, #28]	; (8014a64 <fm_temp_stm32_get+0x34>)
 8014a48:	f7ed fe9e 	bl	8002788 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, poll_time);
 8014a4c:	79fb      	ldrb	r3, [r7, #7]
 8014a4e:	4619      	mov	r1, r3
 8014a50:	4804      	ldr	r0, [pc, #16]	; (8014a64 <fm_temp_stm32_get+0x34>)
 8014a52:	f7ed ff41 	bl	80028d8 <HAL_ADC_PollForConversion>
    HAL_ADC_Stop(&hadc1);
 8014a56:	4803      	ldr	r0, [pc, #12]	; (8014a64 <fm_temp_stm32_get+0x34>)
 8014a58:	f7ed ff0a 	bl	8002870 <HAL_ADC_Stop>
}
 8014a5c:	bf00      	nop
 8014a5e:	3708      	adds	r7, #8
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}
 8014a64:	200013c8 	.word	0x200013c8

08014a68 <fm_version_get>:
 * @brief Esta función devuelve la versión actual del firmware.
 * @param None
 * @retval Número de versión en formato VRR.
 */
uint32_t fm_version_get()
{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b088      	sub	sp, #32
 8014a6c:	af02      	add	r7, sp, #8
    uint32_t version = 0;
 8014a6e:	2300      	movs	r3, #0
 8014a70:	617b      	str	r3, [r7, #20]
    char version_arr[PCF8553_DATA_SIZE];

    sprintf(version_arr, "%d%d%d", VERSION, REVISION, RELEASE);
 8014a72:	4638      	mov	r0, r7
 8014a74:	2307      	movs	r3, #7
 8014a76:	9300      	str	r3, [sp, #0]
 8014a78:	2302      	movs	r3, #2
 8014a7a:	2201      	movs	r2, #1
 8014a7c:	4906      	ldr	r1, [pc, #24]	; (8014a98 <fm_version_get+0x30>)
 8014a7e:	f000 f9bb 	bl	8014df8 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    version = atoi(version_arr);
 8014a82:	463b      	mov	r3, r7
 8014a84:	4618      	mov	r0, r3
 8014a86:	f000 f94d 	bl	8014d24 <atoi>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	617b      	str	r3, [r7, #20]

    return (version);
 8014a8e:	697b      	ldr	r3, [r7, #20]
}
 8014a90:	4618      	mov	r0, r3
 8014a92:	3718      	adds	r7, #24
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}
 8014a98:	08015a88 	.word	0x08015a88

08014a9c <fmc_get_acm>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen acumulado como estructura.
 */
fmc_totalizer_t fmc_get_acm()
{
 8014a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a9e:	b093      	sub	sp, #76	; 0x4c
 8014aa0:	af06      	add	r7, sp, #24
 8014aa2:	62f8      	str	r0, [r7, #44]	; 0x2c
    acm = fm_factory_get_acm();
 8014aa4:	4c1c      	ldr	r4, [pc, #112]	; (8014b18 <fmc_get_acm+0x7c>)
 8014aa6:	f107 0308 	add.w	r3, r7, #8
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f7fa f922 	bl	800ecf4 <fm_factory_get_acm>
 8014ab0:	4625      	mov	r5, r4
 8014ab2:	f107 0408 	add.w	r4, r7, #8
 8014ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014aba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014abe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    acm = fmc_totalizer_init(acm);
 8014ac2:	4b15      	ldr	r3, [pc, #84]	; (8014b18 <fmc_get_acm+0x7c>)
 8014ac4:	607b      	str	r3, [r7, #4]
 8014ac6:	f107 0c08 	add.w	ip, r7, #8
 8014aca:	4e13      	ldr	r6, [pc, #76]	; (8014b18 <fmc_get_acm+0x7c>)
 8014acc:	466d      	mov	r5, sp
 8014ace:	f106 0408 	add.w	r4, r6, #8
 8014ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014ad6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014ada:	e885 0003 	stmia.w	r5, {r0, r1}
 8014ade:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014ae2:	4660      	mov	r0, ip
 8014ae4:	f000 f8c0 	bl	8014c68 <fmc_totalizer_init>
 8014ae8:	687d      	ldr	r5, [r7, #4]
 8014aea:	f107 0408 	add.w	r4, r7, #8
 8014aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014af2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014af6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (acm);
 8014afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014afc:	4a06      	ldr	r2, [pc, #24]	; (8014b18 <fmc_get_acm+0x7c>)
 8014afe:	461c      	mov	r4, r3
 8014b00:	4615      	mov	r5, r2
 8014b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014b0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014b0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b10:	3734      	adds	r7, #52	; 0x34
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b16:	bf00      	nop
 8014b18:	20001e38 	.word	0x20001e38

08014b1c <fmc_get_rate>:
 * devuelve como parámetro de retorno.
 * @param  None
 * @retval Caudal instantaneo como estructura.
 */
fmc_totalizer_t fmc_get_rate()
{
 8014b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b1e:	b093      	sub	sp, #76	; 0x4c
 8014b20:	af06      	add	r7, sp, #24
 8014b22:	62f8      	str	r0, [r7, #44]	; 0x2c
    rate = fm_factory_get_rate();
 8014b24:	4c1c      	ldr	r4, [pc, #112]	; (8014b98 <fmc_get_rate+0x7c>)
 8014b26:	f107 0308 	add.w	r3, r7, #8
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f7fa fa02 	bl	800ef34 <fm_factory_get_rate>
 8014b30:	4625      	mov	r5, r4
 8014b32:	f107 0408 	add.w	r4, r7, #8
 8014b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014b3e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    rate = fmc_totalizer_init(rate);
 8014b42:	4b15      	ldr	r3, [pc, #84]	; (8014b98 <fmc_get_rate+0x7c>)
 8014b44:	607b      	str	r3, [r7, #4]
 8014b46:	f107 0c08 	add.w	ip, r7, #8
 8014b4a:	4e13      	ldr	r6, [pc, #76]	; (8014b98 <fmc_get_rate+0x7c>)
 8014b4c:	466d      	mov	r5, sp
 8014b4e:	f106 0408 	add.w	r4, r6, #8
 8014b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014b5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8014b5e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014b62:	4660      	mov	r0, ip
 8014b64:	f000 f880 	bl	8014c68 <fmc_totalizer_init>
 8014b68:	687d      	ldr	r5, [r7, #4]
 8014b6a:	f107 0408 	add.w	r4, r7, #8
 8014b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014b76:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (rate);
 8014b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b7c:	4a06      	ldr	r2, [pc, #24]	; (8014b98 <fmc_get_rate+0x7c>)
 8014b7e:	461c      	mov	r4, r3
 8014b80:	4615      	mov	r5, r2
 8014b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014b8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b90:	3734      	adds	r7, #52	; 0x34
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b96:	bf00      	nop
 8014b98:	20001e58 	.word	0x20001e58

08014b9c <fmc_get_stm32_temp>:
 * @param  None
 * @retval Temperatura interna del microcontrolador como una estructura que
 * contiene su valor, resolución y unidad.
 */
fmc_temp_t fmc_get_stm32_temp()
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b088      	sub	sp, #32
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
    int_temperature.temperature.num = fm_temp_stm32_format();
 8014ba4:	f7ff ff10 	bl	80149c8 <fm_temp_stm32_format>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	461a      	mov	r2, r3
 8014bac:	4b0d      	ldr	r3, [pc, #52]	; (8014be4 <fmc_get_stm32_temp+0x48>)
 8014bae:	601a      	str	r2, [r3, #0]
    int_temperature.temperature.res = fm_factory_get_temp().temperature.res;
 8014bb0:	f107 0308 	add.w	r3, r7, #8
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7fa f9d3 	bl	800ef60 <fm_factory_get_temp>
 8014bba:	7b3a      	ldrb	r2, [r7, #12]
 8014bbc:	4b09      	ldr	r3, [pc, #36]	; (8014be4 <fmc_get_stm32_temp+0x48>)
 8014bbe:	711a      	strb	r2, [r3, #4]
    int_temperature.unit_volume_temp = fm_factory_get_temp().unit_volume_temp;
 8014bc0:	f107 0314 	add.w	r3, r7, #20
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7fa f9cb 	bl	800ef60 <fm_factory_get_temp>
 8014bca:	7f3a      	ldrb	r2, [r7, #28]
 8014bcc:	4b05      	ldr	r3, [pc, #20]	; (8014be4 <fmc_get_stm32_temp+0x48>)
 8014bce:	721a      	strb	r2, [r3, #8]

    return (int_temperature);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	4a04      	ldr	r2, [pc, #16]	; (8014be4 <fmc_get_stm32_temp+0x48>)
 8014bd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8014bd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	3720      	adds	r7, #32
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bd80      	pop	{r7, pc}
 8014be2:	bf00      	nop
 8014be4:	20001e98 	.word	0x20001e98

08014be8 <fmc_get_ttl>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen histórico como estructura.
 */
fmc_totalizer_t fmc_get_ttl()
{
 8014be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bea:	b093      	sub	sp, #76	; 0x4c
 8014bec:	af06      	add	r7, sp, #24
 8014bee:	62f8      	str	r0, [r7, #44]	; 0x2c
    ttl = fm_factory_get_ttl();
 8014bf0:	4c1c      	ldr	r4, [pc, #112]	; (8014c64 <fmc_get_ttl+0x7c>)
 8014bf2:	f107 0308 	add.w	r3, r7, #8
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f7fa f9c4 	bl	800ef84 <fm_factory_get_ttl>
 8014bfc:	4625      	mov	r5, r4
 8014bfe:	f107 0408 	add.w	r4, r7, #8
 8014c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c0a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    ttl = fmc_totalizer_init(ttl);
 8014c0e:	4b15      	ldr	r3, [pc, #84]	; (8014c64 <fmc_get_ttl+0x7c>)
 8014c10:	607b      	str	r3, [r7, #4]
 8014c12:	f107 0c08 	add.w	ip, r7, #8
 8014c16:	4e13      	ldr	r6, [pc, #76]	; (8014c64 <fmc_get_ttl+0x7c>)
 8014c18:	466d      	mov	r5, sp
 8014c1a:	f106 0408 	add.w	r4, r6, #8
 8014c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014c26:	e885 0003 	stmia.w	r5, {r0, r1}
 8014c2a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014c2e:	4660      	mov	r0, ip
 8014c30:	f000 f81a 	bl	8014c68 <fmc_totalizer_init>
 8014c34:	687d      	ldr	r5, [r7, #4]
 8014c36:	f107 0408 	add.w	r4, r7, #8
 8014c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (ttl);
 8014c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c48:	4a06      	ldr	r2, [pc, #24]	; (8014c64 <fmc_get_ttl+0x7c>)
 8014c4a:	461c      	mov	r4, r3
 8014c4c:	4615      	mov	r5, r2
 8014c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c52:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014c56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014c5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c5c:	3734      	adds	r7, #52	; 0x34
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c62:	bf00      	nop
 8014c64:	20001e78 	.word	0x20001e78

08014c68 <fmc_totalizer_init>:
 * @brief
 * @param
 * @retval None
 */
fmc_totalizer_t fmc_totalizer_init(fmc_totalizer_t totalizer)
{
 8014c68:	b082      	sub	sp, #8
 8014c6a:	b5b0      	push	{r4, r5, r7, lr}
 8014c6c:	b082      	sub	sp, #8
 8014c6e:	af00      	add	r7, sp, #0
 8014c70:	6078      	str	r0, [r7, #4]
 8014c72:	f107 0118 	add.w	r1, r7, #24
 8014c76:	e881 000c 	stmia.w	r1, {r2, r3}
    fmc_totalizer_refresh(&totalizer);
 8014c7a:	f107 0018 	add.w	r0, r7, #24
 8014c7e:	f000 f811 	bl	8014ca4 <fmc_totalizer_refresh>

    return (totalizer);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	461d      	mov	r5, r3
 8014c86:	f107 0418 	add.w	r4, r7, #24
 8014c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c92:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	3708      	adds	r7, #8
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8014ca0:	b002      	add	sp, #8
 8014ca2:	4770      	bx	lr

08014ca4 <fmc_totalizer_refresh>:
 * @param Puntero a estructura que contiene datos como la cantidad de pulsos
 * leidos, valor y resolución del caudal/volumen, entre otros.
 * @retval None
 */
void fmc_totalizer_refresh(fmc_totalizer_t *p_totalizer)
{
 8014ca4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014ca8:	b084      	sub	sp, #16
 8014caa:	af00      	add	r7, sp, #0
 8014cac:	6078      	str	r0, [r7, #4]
    uint64_t result;

    /*
     * result es la cantidad de pulsos almacenados en la estructura p_totalizer.
     */
    result = (uint64_t) p_totalizer->pulse;
 8014cae:	6879      	ldr	r1, [r7, #4]
 8014cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014cb4:	e9c7 0102 	strd	r0, r1, [r7, #8]

    /*
     * Pulsos escalados en el factor y en la resolucion a mostrar.
     */
    result *= g_scalar[p_totalizer->factor.res + p_totalizer->volume.res];
 8014cb8:	6879      	ldr	r1, [r7, #4]
 8014cba:	7d09      	ldrb	r1, [r1, #20]
 8014cbc:	4608      	mov	r0, r1
 8014cbe:	6879      	ldr	r1, [r7, #4]
 8014cc0:	7b09      	ldrb	r1, [r1, #12]
 8014cc2:	4401      	add	r1, r0
 8014cc4:	4816      	ldr	r0, [pc, #88]	; (8014d20 <fmc_totalizer_refresh+0x7c>)
 8014cc6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8014cca:	2000      	movs	r0, #0
 8014ccc:	460c      	mov	r4, r1
 8014cce:	4605      	mov	r5, r0
 8014cd0:	68f9      	ldr	r1, [r7, #12]
 8014cd2:	fb04 f001 	mul.w	r0, r4, r1
 8014cd6:	68b9      	ldr	r1, [r7, #8]
 8014cd8:	fb05 f101 	mul.w	r1, r5, r1
 8014cdc:	4401      	add	r1, r0
 8014cde:	68b8      	ldr	r0, [r7, #8]
 8014ce0:	fba0 2304 	umull	r2, r3, r0, r4
 8014ce4:	4419      	add	r1, r3
 8014ce6:	460b      	mov	r3, r1
 8014ce8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8014cec:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /*
     * Obtengo el valor numérico del volumen dividiendo los pulsos escalados
     * por el factor.
     */
    result /= p_totalizer->factor.num;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	691b      	ldr	r3, [r3, #16]
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	4698      	mov	r8, r3
 8014cf8:	4691      	mov	r9, r2
 8014cfa:	4642      	mov	r2, r8
 8014cfc:	464b      	mov	r3, r9
 8014cfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014d02:	f7eb fbe7 	bl	80004d4 <__aeabi_uldivmod>
 8014d06:	4602      	mov	r2, r0
 8014d08:	460b      	mov	r3, r1
 8014d0a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    p_totalizer->volume.num = (uint32_t) result;
 8014d0e:	68ba      	ldr	r2, [r7, #8]
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	609a      	str	r2, [r3, #8]

}
 8014d14:	bf00      	nop
 8014d16:	3710      	adds	r7, #16
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014d1e:	bf00      	nop
 8014d20:	08015ba8 	.word	0x08015ba8

08014d24 <atoi>:
 8014d24:	220a      	movs	r2, #10
 8014d26:	2100      	movs	r1, #0
 8014d28:	f000 b908 	b.w	8014f3c <strtol>

08014d2c <__errno>:
 8014d2c:	4b01      	ldr	r3, [pc, #4]	; (8014d34 <__errno+0x8>)
 8014d2e:	6818      	ldr	r0, [r3, #0]
 8014d30:	4770      	bx	lr
 8014d32:	bf00      	nop
 8014d34:	20000154 	.word	0x20000154

08014d38 <__libc_init_array>:
 8014d38:	b570      	push	{r4, r5, r6, lr}
 8014d3a:	4d0d      	ldr	r5, [pc, #52]	; (8014d70 <__libc_init_array+0x38>)
 8014d3c:	2600      	movs	r6, #0
 8014d3e:	4c0d      	ldr	r4, [pc, #52]	; (8014d74 <__libc_init_array+0x3c>)
 8014d40:	1b64      	subs	r4, r4, r5
 8014d42:	10a4      	asrs	r4, r4, #2
 8014d44:	42a6      	cmp	r6, r4
 8014d46:	d109      	bne.n	8014d5c <__libc_init_array+0x24>
 8014d48:	4d0b      	ldr	r5, [pc, #44]	; (8014d78 <__libc_init_array+0x40>)
 8014d4a:	2600      	movs	r6, #0
 8014d4c:	4c0b      	ldr	r4, [pc, #44]	; (8014d7c <__libc_init_array+0x44>)
 8014d4e:	f000 fd5d 	bl	801580c <_init>
 8014d52:	1b64      	subs	r4, r4, r5
 8014d54:	10a4      	asrs	r4, r4, #2
 8014d56:	42a6      	cmp	r6, r4
 8014d58:	d105      	bne.n	8014d66 <__libc_init_array+0x2e>
 8014d5a:	bd70      	pop	{r4, r5, r6, pc}
 8014d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d60:	3601      	adds	r6, #1
 8014d62:	4798      	blx	r3
 8014d64:	e7ee      	b.n	8014d44 <__libc_init_array+0xc>
 8014d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d6a:	3601      	adds	r6, #1
 8014d6c:	4798      	blx	r3
 8014d6e:	e7f2      	b.n	8014d56 <__libc_init_array+0x1e>
 8014d70:	08015d00 	.word	0x08015d00
 8014d74:	08015d00 	.word	0x08015d00
 8014d78:	08015d00 	.word	0x08015d00
 8014d7c:	08015d04 	.word	0x08015d04

08014d80 <memset>:
 8014d80:	4402      	add	r2, r0
 8014d82:	4603      	mov	r3, r0
 8014d84:	4293      	cmp	r3, r2
 8014d86:	d100      	bne.n	8014d8a <memset+0xa>
 8014d88:	4770      	bx	lr
 8014d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8014d8e:	e7f9      	b.n	8014d84 <memset+0x4>

08014d90 <sniprintf>:
 8014d90:	b40c      	push	{r2, r3}
 8014d92:	4b18      	ldr	r3, [pc, #96]	; (8014df4 <sniprintf+0x64>)
 8014d94:	b530      	push	{r4, r5, lr}
 8014d96:	1e0c      	subs	r4, r1, #0
 8014d98:	b09d      	sub	sp, #116	; 0x74
 8014d9a:	681d      	ldr	r5, [r3, #0]
 8014d9c:	da08      	bge.n	8014db0 <sniprintf+0x20>
 8014d9e:	238b      	movs	r3, #139	; 0x8b
 8014da0:	f04f 30ff 	mov.w	r0, #4294967295
 8014da4:	602b      	str	r3, [r5, #0]
 8014da6:	b01d      	add	sp, #116	; 0x74
 8014da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014dac:	b002      	add	sp, #8
 8014dae:	4770      	bx	lr
 8014db0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014db4:	9002      	str	r0, [sp, #8]
 8014db6:	9006      	str	r0, [sp, #24]
 8014db8:	a902      	add	r1, sp, #8
 8014dba:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014dbe:	bf14      	ite	ne
 8014dc0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014dc4:	4623      	moveq	r3, r4
 8014dc6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014dc8:	4628      	mov	r0, r5
 8014dca:	9304      	str	r3, [sp, #16]
 8014dcc:	9307      	str	r3, [sp, #28]
 8014dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014dd2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014dd6:	ab21      	add	r3, sp, #132	; 0x84
 8014dd8:	9301      	str	r3, [sp, #4]
 8014dda:	f000 f915 	bl	8015008 <_svfiprintf_r>
 8014dde:	1c43      	adds	r3, r0, #1
 8014de0:	bfbc      	itt	lt
 8014de2:	238b      	movlt	r3, #139	; 0x8b
 8014de4:	602b      	strlt	r3, [r5, #0]
 8014de6:	2c00      	cmp	r4, #0
 8014de8:	d0dd      	beq.n	8014da6 <sniprintf+0x16>
 8014dea:	9b02      	ldr	r3, [sp, #8]
 8014dec:	2200      	movs	r2, #0
 8014dee:	701a      	strb	r2, [r3, #0]
 8014df0:	e7d9      	b.n	8014da6 <sniprintf+0x16>
 8014df2:	bf00      	nop
 8014df4:	20000154 	.word	0x20000154

08014df8 <siprintf>:
 8014df8:	b40e      	push	{r1, r2, r3}
 8014dfa:	b500      	push	{lr}
 8014dfc:	b09c      	sub	sp, #112	; 0x70
 8014dfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014e02:	ab1d      	add	r3, sp, #116	; 0x74
 8014e04:	9002      	str	r0, [sp, #8]
 8014e06:	9006      	str	r0, [sp, #24]
 8014e08:	9107      	str	r1, [sp, #28]
 8014e0a:	9104      	str	r1, [sp, #16]
 8014e0c:	4808      	ldr	r0, [pc, #32]	; (8014e30 <siprintf+0x38>)
 8014e0e:	4909      	ldr	r1, [pc, #36]	; (8014e34 <siprintf+0x3c>)
 8014e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e14:	9105      	str	r1, [sp, #20]
 8014e16:	a902      	add	r1, sp, #8
 8014e18:	6800      	ldr	r0, [r0, #0]
 8014e1a:	9301      	str	r3, [sp, #4]
 8014e1c:	f000 f8f4 	bl	8015008 <_svfiprintf_r>
 8014e20:	9b02      	ldr	r3, [sp, #8]
 8014e22:	2200      	movs	r2, #0
 8014e24:	701a      	strb	r2, [r3, #0]
 8014e26:	b01c      	add	sp, #112	; 0x70
 8014e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e2c:	b003      	add	sp, #12
 8014e2e:	4770      	bx	lr
 8014e30:	20000154 	.word	0x20000154
 8014e34:	ffff0208 	.word	0xffff0208

08014e38 <_strtol_l.constprop.0>:
 8014e38:	2b01      	cmp	r3, #1
 8014e3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e3e:	d001      	beq.n	8014e44 <_strtol_l.constprop.0+0xc>
 8014e40:	2b24      	cmp	r3, #36	; 0x24
 8014e42:	d906      	bls.n	8014e52 <_strtol_l.constprop.0+0x1a>
 8014e44:	f7ff ff72 	bl	8014d2c <__errno>
 8014e48:	2316      	movs	r3, #22
 8014e4a:	6003      	str	r3, [r0, #0]
 8014e4c:	2000      	movs	r0, #0
 8014e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e52:	460d      	mov	r5, r1
 8014e54:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8014f38 <_strtol_l.constprop.0+0x100>
 8014e58:	462e      	mov	r6, r5
 8014e5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014e62:	f017 0708 	ands.w	r7, r7, #8
 8014e66:	d1f7      	bne.n	8014e58 <_strtol_l.constprop.0+0x20>
 8014e68:	2c2d      	cmp	r4, #45	; 0x2d
 8014e6a:	d132      	bne.n	8014ed2 <_strtol_l.constprop.0+0x9a>
 8014e6c:	782c      	ldrb	r4, [r5, #0]
 8014e6e:	2701      	movs	r7, #1
 8014e70:	1cb5      	adds	r5, r6, #2
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d05b      	beq.n	8014f2e <_strtol_l.constprop.0+0xf6>
 8014e76:	2b10      	cmp	r3, #16
 8014e78:	d109      	bne.n	8014e8e <_strtol_l.constprop.0+0x56>
 8014e7a:	2c30      	cmp	r4, #48	; 0x30
 8014e7c:	d107      	bne.n	8014e8e <_strtol_l.constprop.0+0x56>
 8014e7e:	782c      	ldrb	r4, [r5, #0]
 8014e80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014e84:	2c58      	cmp	r4, #88	; 0x58
 8014e86:	d14d      	bne.n	8014f24 <_strtol_l.constprop.0+0xec>
 8014e88:	786c      	ldrb	r4, [r5, #1]
 8014e8a:	2310      	movs	r3, #16
 8014e8c:	3502      	adds	r5, #2
 8014e8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014e92:	f04f 0c00 	mov.w	ip, #0
 8014e96:	f108 38ff 	add.w	r8, r8, #4294967295
 8014e9a:	4666      	mov	r6, ip
 8014e9c:	fbb8 f9f3 	udiv	r9, r8, r3
 8014ea0:	fb03 8a19 	mls	sl, r3, r9, r8
 8014ea4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014ea8:	f1be 0f09 	cmp.w	lr, #9
 8014eac:	d816      	bhi.n	8014edc <_strtol_l.constprop.0+0xa4>
 8014eae:	4674      	mov	r4, lr
 8014eb0:	42a3      	cmp	r3, r4
 8014eb2:	dd24      	ble.n	8014efe <_strtol_l.constprop.0+0xc6>
 8014eb4:	f1bc 0f00 	cmp.w	ip, #0
 8014eb8:	db1e      	blt.n	8014ef8 <_strtol_l.constprop.0+0xc0>
 8014eba:	45b1      	cmp	r9, r6
 8014ebc:	d31c      	bcc.n	8014ef8 <_strtol_l.constprop.0+0xc0>
 8014ebe:	d101      	bne.n	8014ec4 <_strtol_l.constprop.0+0x8c>
 8014ec0:	45a2      	cmp	sl, r4
 8014ec2:	db19      	blt.n	8014ef8 <_strtol_l.constprop.0+0xc0>
 8014ec4:	fb06 4603 	mla	r6, r6, r3, r4
 8014ec8:	f04f 0c01 	mov.w	ip, #1
 8014ecc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014ed0:	e7e8      	b.n	8014ea4 <_strtol_l.constprop.0+0x6c>
 8014ed2:	2c2b      	cmp	r4, #43	; 0x2b
 8014ed4:	bf04      	itt	eq
 8014ed6:	782c      	ldrbeq	r4, [r5, #0]
 8014ed8:	1cb5      	addeq	r5, r6, #2
 8014eda:	e7ca      	b.n	8014e72 <_strtol_l.constprop.0+0x3a>
 8014edc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014ee0:	f1be 0f19 	cmp.w	lr, #25
 8014ee4:	d801      	bhi.n	8014eea <_strtol_l.constprop.0+0xb2>
 8014ee6:	3c37      	subs	r4, #55	; 0x37
 8014ee8:	e7e2      	b.n	8014eb0 <_strtol_l.constprop.0+0x78>
 8014eea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014eee:	f1be 0f19 	cmp.w	lr, #25
 8014ef2:	d804      	bhi.n	8014efe <_strtol_l.constprop.0+0xc6>
 8014ef4:	3c57      	subs	r4, #87	; 0x57
 8014ef6:	e7db      	b.n	8014eb0 <_strtol_l.constprop.0+0x78>
 8014ef8:	f04f 3cff 	mov.w	ip, #4294967295
 8014efc:	e7e6      	b.n	8014ecc <_strtol_l.constprop.0+0x94>
 8014efe:	f1bc 0f00 	cmp.w	ip, #0
 8014f02:	da05      	bge.n	8014f10 <_strtol_l.constprop.0+0xd8>
 8014f04:	2322      	movs	r3, #34	; 0x22
 8014f06:	4646      	mov	r6, r8
 8014f08:	6003      	str	r3, [r0, #0]
 8014f0a:	b942      	cbnz	r2, 8014f1e <_strtol_l.constprop.0+0xe6>
 8014f0c:	4630      	mov	r0, r6
 8014f0e:	e79e      	b.n	8014e4e <_strtol_l.constprop.0+0x16>
 8014f10:	b107      	cbz	r7, 8014f14 <_strtol_l.constprop.0+0xdc>
 8014f12:	4276      	negs	r6, r6
 8014f14:	2a00      	cmp	r2, #0
 8014f16:	d0f9      	beq.n	8014f0c <_strtol_l.constprop.0+0xd4>
 8014f18:	f1bc 0f00 	cmp.w	ip, #0
 8014f1c:	d000      	beq.n	8014f20 <_strtol_l.constprop.0+0xe8>
 8014f1e:	1e69      	subs	r1, r5, #1
 8014f20:	6011      	str	r1, [r2, #0]
 8014f22:	e7f3      	b.n	8014f0c <_strtol_l.constprop.0+0xd4>
 8014f24:	2430      	movs	r4, #48	; 0x30
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d1b1      	bne.n	8014e8e <_strtol_l.constprop.0+0x56>
 8014f2a:	2308      	movs	r3, #8
 8014f2c:	e7af      	b.n	8014e8e <_strtol_l.constprop.0+0x56>
 8014f2e:	2c30      	cmp	r4, #48	; 0x30
 8014f30:	d0a5      	beq.n	8014e7e <_strtol_l.constprop.0+0x46>
 8014f32:	230a      	movs	r3, #10
 8014f34:	e7ab      	b.n	8014e8e <_strtol_l.constprop.0+0x56>
 8014f36:	bf00      	nop
 8014f38:	08015bc5 	.word	0x08015bc5

08014f3c <strtol>:
 8014f3c:	4613      	mov	r3, r2
 8014f3e:	460a      	mov	r2, r1
 8014f40:	4601      	mov	r1, r0
 8014f42:	4802      	ldr	r0, [pc, #8]	; (8014f4c <strtol+0x10>)
 8014f44:	6800      	ldr	r0, [r0, #0]
 8014f46:	f7ff bf77 	b.w	8014e38 <_strtol_l.constprop.0>
 8014f4a:	bf00      	nop
 8014f4c:	20000154 	.word	0x20000154

08014f50 <__ssputs_r>:
 8014f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f54:	688e      	ldr	r6, [r1, #8]
 8014f56:	4682      	mov	sl, r0
 8014f58:	460c      	mov	r4, r1
 8014f5a:	4690      	mov	r8, r2
 8014f5c:	429e      	cmp	r6, r3
 8014f5e:	461f      	mov	r7, r3
 8014f60:	d838      	bhi.n	8014fd4 <__ssputs_r+0x84>
 8014f62:	898a      	ldrh	r2, [r1, #12]
 8014f64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014f68:	d032      	beq.n	8014fd0 <__ssputs_r+0x80>
 8014f6a:	6825      	ldr	r5, [r4, #0]
 8014f6c:	3301      	adds	r3, #1
 8014f6e:	6909      	ldr	r1, [r1, #16]
 8014f70:	eba5 0901 	sub.w	r9, r5, r1
 8014f74:	6965      	ldr	r5, [r4, #20]
 8014f76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014f7a:	444b      	add	r3, r9
 8014f7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014f80:	106d      	asrs	r5, r5, #1
 8014f82:	429d      	cmp	r5, r3
 8014f84:	bf38      	it	cc
 8014f86:	461d      	movcc	r5, r3
 8014f88:	0553      	lsls	r3, r2, #21
 8014f8a:	d531      	bpl.n	8014ff0 <__ssputs_r+0xa0>
 8014f8c:	4629      	mov	r1, r5
 8014f8e:	f000 fb73 	bl	8015678 <_malloc_r>
 8014f92:	4606      	mov	r6, r0
 8014f94:	b950      	cbnz	r0, 8014fac <__ssputs_r+0x5c>
 8014f96:	230c      	movs	r3, #12
 8014f98:	f04f 30ff 	mov.w	r0, #4294967295
 8014f9c:	f8ca 3000 	str.w	r3, [sl]
 8014fa0:	89a3      	ldrh	r3, [r4, #12]
 8014fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fa6:	81a3      	strh	r3, [r4, #12]
 8014fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fac:	464a      	mov	r2, r9
 8014fae:	6921      	ldr	r1, [r4, #16]
 8014fb0:	f000 face 	bl	8015550 <memcpy>
 8014fb4:	89a3      	ldrh	r3, [r4, #12]
 8014fb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fbe:	81a3      	strh	r3, [r4, #12]
 8014fc0:	6126      	str	r6, [r4, #16]
 8014fc2:	444e      	add	r6, r9
 8014fc4:	6165      	str	r5, [r4, #20]
 8014fc6:	eba5 0509 	sub.w	r5, r5, r9
 8014fca:	6026      	str	r6, [r4, #0]
 8014fcc:	463e      	mov	r6, r7
 8014fce:	60a5      	str	r5, [r4, #8]
 8014fd0:	42be      	cmp	r6, r7
 8014fd2:	d900      	bls.n	8014fd6 <__ssputs_r+0x86>
 8014fd4:	463e      	mov	r6, r7
 8014fd6:	4632      	mov	r2, r6
 8014fd8:	4641      	mov	r1, r8
 8014fda:	6820      	ldr	r0, [r4, #0]
 8014fdc:	f000 fac5 	bl	801556a <memmove>
 8014fe0:	68a3      	ldr	r3, [r4, #8]
 8014fe2:	2000      	movs	r0, #0
 8014fe4:	1b9b      	subs	r3, r3, r6
 8014fe6:	60a3      	str	r3, [r4, #8]
 8014fe8:	6823      	ldr	r3, [r4, #0]
 8014fea:	4433      	add	r3, r6
 8014fec:	6023      	str	r3, [r4, #0]
 8014fee:	e7db      	b.n	8014fa8 <__ssputs_r+0x58>
 8014ff0:	462a      	mov	r2, r5
 8014ff2:	f000 fbb5 	bl	8015760 <_realloc_r>
 8014ff6:	4606      	mov	r6, r0
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	d1e1      	bne.n	8014fc0 <__ssputs_r+0x70>
 8014ffc:	6921      	ldr	r1, [r4, #16]
 8014ffe:	4650      	mov	r0, sl
 8015000:	f000 face 	bl	80155a0 <_free_r>
 8015004:	e7c7      	b.n	8014f96 <__ssputs_r+0x46>
	...

08015008 <_svfiprintf_r>:
 8015008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801500c:	4698      	mov	r8, r3
 801500e:	898b      	ldrh	r3, [r1, #12]
 8015010:	b09d      	sub	sp, #116	; 0x74
 8015012:	4607      	mov	r7, r0
 8015014:	061b      	lsls	r3, r3, #24
 8015016:	460d      	mov	r5, r1
 8015018:	4614      	mov	r4, r2
 801501a:	d50e      	bpl.n	801503a <_svfiprintf_r+0x32>
 801501c:	690b      	ldr	r3, [r1, #16]
 801501e:	b963      	cbnz	r3, 801503a <_svfiprintf_r+0x32>
 8015020:	2140      	movs	r1, #64	; 0x40
 8015022:	f000 fb29 	bl	8015678 <_malloc_r>
 8015026:	6028      	str	r0, [r5, #0]
 8015028:	6128      	str	r0, [r5, #16]
 801502a:	b920      	cbnz	r0, 8015036 <_svfiprintf_r+0x2e>
 801502c:	230c      	movs	r3, #12
 801502e:	603b      	str	r3, [r7, #0]
 8015030:	f04f 30ff 	mov.w	r0, #4294967295
 8015034:	e0d1      	b.n	80151da <_svfiprintf_r+0x1d2>
 8015036:	2340      	movs	r3, #64	; 0x40
 8015038:	616b      	str	r3, [r5, #20]
 801503a:	2300      	movs	r3, #0
 801503c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015040:	f04f 0901 	mov.w	r9, #1
 8015044:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80151f4 <_svfiprintf_r+0x1ec>
 8015048:	9309      	str	r3, [sp, #36]	; 0x24
 801504a:	2320      	movs	r3, #32
 801504c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015050:	2330      	movs	r3, #48	; 0x30
 8015052:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015056:	4623      	mov	r3, r4
 8015058:	469a      	mov	sl, r3
 801505a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801505e:	b10a      	cbz	r2, 8015064 <_svfiprintf_r+0x5c>
 8015060:	2a25      	cmp	r2, #37	; 0x25
 8015062:	d1f9      	bne.n	8015058 <_svfiprintf_r+0x50>
 8015064:	ebba 0b04 	subs.w	fp, sl, r4
 8015068:	d00b      	beq.n	8015082 <_svfiprintf_r+0x7a>
 801506a:	465b      	mov	r3, fp
 801506c:	4622      	mov	r2, r4
 801506e:	4629      	mov	r1, r5
 8015070:	4638      	mov	r0, r7
 8015072:	f7ff ff6d 	bl	8014f50 <__ssputs_r>
 8015076:	3001      	adds	r0, #1
 8015078:	f000 80aa 	beq.w	80151d0 <_svfiprintf_r+0x1c8>
 801507c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801507e:	445a      	add	r2, fp
 8015080:	9209      	str	r2, [sp, #36]	; 0x24
 8015082:	f89a 3000 	ldrb.w	r3, [sl]
 8015086:	2b00      	cmp	r3, #0
 8015088:	f000 80a2 	beq.w	80151d0 <_svfiprintf_r+0x1c8>
 801508c:	2300      	movs	r3, #0
 801508e:	f04f 32ff 	mov.w	r2, #4294967295
 8015092:	f10a 0a01 	add.w	sl, sl, #1
 8015096:	9304      	str	r3, [sp, #16]
 8015098:	9307      	str	r3, [sp, #28]
 801509a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801509e:	931a      	str	r3, [sp, #104]	; 0x68
 80150a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150a4:	4654      	mov	r4, sl
 80150a6:	2205      	movs	r2, #5
 80150a8:	4852      	ldr	r0, [pc, #328]	; (80151f4 <_svfiprintf_r+0x1ec>)
 80150aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150ae:	f000 fa41 	bl	8015534 <memchr>
 80150b2:	9a04      	ldr	r2, [sp, #16]
 80150b4:	b9d8      	cbnz	r0, 80150ee <_svfiprintf_r+0xe6>
 80150b6:	06d0      	lsls	r0, r2, #27
 80150b8:	bf44      	itt	mi
 80150ba:	2320      	movmi	r3, #32
 80150bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80150c0:	0711      	lsls	r1, r2, #28
 80150c2:	bf44      	itt	mi
 80150c4:	232b      	movmi	r3, #43	; 0x2b
 80150c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80150ca:	f89a 3000 	ldrb.w	r3, [sl]
 80150ce:	2b2a      	cmp	r3, #42	; 0x2a
 80150d0:	d015      	beq.n	80150fe <_svfiprintf_r+0xf6>
 80150d2:	9a07      	ldr	r2, [sp, #28]
 80150d4:	4654      	mov	r4, sl
 80150d6:	2000      	movs	r0, #0
 80150d8:	f04f 0c0a 	mov.w	ip, #10
 80150dc:	4621      	mov	r1, r4
 80150de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80150e2:	3b30      	subs	r3, #48	; 0x30
 80150e4:	2b09      	cmp	r3, #9
 80150e6:	d94e      	bls.n	8015186 <_svfiprintf_r+0x17e>
 80150e8:	b1b0      	cbz	r0, 8015118 <_svfiprintf_r+0x110>
 80150ea:	9207      	str	r2, [sp, #28]
 80150ec:	e014      	b.n	8015118 <_svfiprintf_r+0x110>
 80150ee:	eba0 0308 	sub.w	r3, r0, r8
 80150f2:	46a2      	mov	sl, r4
 80150f4:	fa09 f303 	lsl.w	r3, r9, r3
 80150f8:	4313      	orrs	r3, r2
 80150fa:	9304      	str	r3, [sp, #16]
 80150fc:	e7d2      	b.n	80150a4 <_svfiprintf_r+0x9c>
 80150fe:	9b03      	ldr	r3, [sp, #12]
 8015100:	1d19      	adds	r1, r3, #4
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	2b00      	cmp	r3, #0
 8015106:	9103      	str	r1, [sp, #12]
 8015108:	bfbb      	ittet	lt
 801510a:	425b      	neglt	r3, r3
 801510c:	f042 0202 	orrlt.w	r2, r2, #2
 8015110:	9307      	strge	r3, [sp, #28]
 8015112:	9307      	strlt	r3, [sp, #28]
 8015114:	bfb8      	it	lt
 8015116:	9204      	strlt	r2, [sp, #16]
 8015118:	7823      	ldrb	r3, [r4, #0]
 801511a:	2b2e      	cmp	r3, #46	; 0x2e
 801511c:	d10c      	bne.n	8015138 <_svfiprintf_r+0x130>
 801511e:	7863      	ldrb	r3, [r4, #1]
 8015120:	2b2a      	cmp	r3, #42	; 0x2a
 8015122:	d135      	bne.n	8015190 <_svfiprintf_r+0x188>
 8015124:	9b03      	ldr	r3, [sp, #12]
 8015126:	3402      	adds	r4, #2
 8015128:	1d1a      	adds	r2, r3, #4
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	2b00      	cmp	r3, #0
 801512e:	9203      	str	r2, [sp, #12]
 8015130:	bfb8      	it	lt
 8015132:	f04f 33ff 	movlt.w	r3, #4294967295
 8015136:	9305      	str	r3, [sp, #20]
 8015138:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015204 <_svfiprintf_r+0x1fc>
 801513c:	2203      	movs	r2, #3
 801513e:	7821      	ldrb	r1, [r4, #0]
 8015140:	4650      	mov	r0, sl
 8015142:	f000 f9f7 	bl	8015534 <memchr>
 8015146:	b140      	cbz	r0, 801515a <_svfiprintf_r+0x152>
 8015148:	2340      	movs	r3, #64	; 0x40
 801514a:	eba0 000a 	sub.w	r0, r0, sl
 801514e:	3401      	adds	r4, #1
 8015150:	fa03 f000 	lsl.w	r0, r3, r0
 8015154:	9b04      	ldr	r3, [sp, #16]
 8015156:	4303      	orrs	r3, r0
 8015158:	9304      	str	r3, [sp, #16]
 801515a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801515e:	2206      	movs	r2, #6
 8015160:	4825      	ldr	r0, [pc, #148]	; (80151f8 <_svfiprintf_r+0x1f0>)
 8015162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015166:	f000 f9e5 	bl	8015534 <memchr>
 801516a:	2800      	cmp	r0, #0
 801516c:	d038      	beq.n	80151e0 <_svfiprintf_r+0x1d8>
 801516e:	4b23      	ldr	r3, [pc, #140]	; (80151fc <_svfiprintf_r+0x1f4>)
 8015170:	bb1b      	cbnz	r3, 80151ba <_svfiprintf_r+0x1b2>
 8015172:	9b03      	ldr	r3, [sp, #12]
 8015174:	3307      	adds	r3, #7
 8015176:	f023 0307 	bic.w	r3, r3, #7
 801517a:	3308      	adds	r3, #8
 801517c:	9303      	str	r3, [sp, #12]
 801517e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015180:	4433      	add	r3, r6
 8015182:	9309      	str	r3, [sp, #36]	; 0x24
 8015184:	e767      	b.n	8015056 <_svfiprintf_r+0x4e>
 8015186:	fb0c 3202 	mla	r2, ip, r2, r3
 801518a:	460c      	mov	r4, r1
 801518c:	2001      	movs	r0, #1
 801518e:	e7a5      	b.n	80150dc <_svfiprintf_r+0xd4>
 8015190:	2300      	movs	r3, #0
 8015192:	3401      	adds	r4, #1
 8015194:	f04f 0c0a 	mov.w	ip, #10
 8015198:	4619      	mov	r1, r3
 801519a:	9305      	str	r3, [sp, #20]
 801519c:	4620      	mov	r0, r4
 801519e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80151a2:	3a30      	subs	r2, #48	; 0x30
 80151a4:	2a09      	cmp	r2, #9
 80151a6:	d903      	bls.n	80151b0 <_svfiprintf_r+0x1a8>
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d0c5      	beq.n	8015138 <_svfiprintf_r+0x130>
 80151ac:	9105      	str	r1, [sp, #20]
 80151ae:	e7c3      	b.n	8015138 <_svfiprintf_r+0x130>
 80151b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80151b4:	4604      	mov	r4, r0
 80151b6:	2301      	movs	r3, #1
 80151b8:	e7f0      	b.n	801519c <_svfiprintf_r+0x194>
 80151ba:	ab03      	add	r3, sp, #12
 80151bc:	462a      	mov	r2, r5
 80151be:	a904      	add	r1, sp, #16
 80151c0:	4638      	mov	r0, r7
 80151c2:	9300      	str	r3, [sp, #0]
 80151c4:	4b0e      	ldr	r3, [pc, #56]	; (8015200 <_svfiprintf_r+0x1f8>)
 80151c6:	e000      	b.n	80151ca <_svfiprintf_r+0x1c2>
 80151c8:	bf00      	nop
 80151ca:	1c42      	adds	r2, r0, #1
 80151cc:	4606      	mov	r6, r0
 80151ce:	d1d6      	bne.n	801517e <_svfiprintf_r+0x176>
 80151d0:	89ab      	ldrh	r3, [r5, #12]
 80151d2:	065b      	lsls	r3, r3, #25
 80151d4:	f53f af2c 	bmi.w	8015030 <_svfiprintf_r+0x28>
 80151d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80151da:	b01d      	add	sp, #116	; 0x74
 80151dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151e0:	ab03      	add	r3, sp, #12
 80151e2:	462a      	mov	r2, r5
 80151e4:	a904      	add	r1, sp, #16
 80151e6:	4638      	mov	r0, r7
 80151e8:	9300      	str	r3, [sp, #0]
 80151ea:	4b05      	ldr	r3, [pc, #20]	; (8015200 <_svfiprintf_r+0x1f8>)
 80151ec:	f000 f87c 	bl	80152e8 <_printf_i>
 80151f0:	e7eb      	b.n	80151ca <_svfiprintf_r+0x1c2>
 80151f2:	bf00      	nop
 80151f4:	08015cc5 	.word	0x08015cc5
 80151f8:	08015ccf 	.word	0x08015ccf
 80151fc:	00000000 	.word	0x00000000
 8015200:	08014f51 	.word	0x08014f51
 8015204:	08015ccb 	.word	0x08015ccb

08015208 <_printf_common>:
 8015208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801520c:	4616      	mov	r6, r2
 801520e:	4699      	mov	r9, r3
 8015210:	688a      	ldr	r2, [r1, #8]
 8015212:	4607      	mov	r7, r0
 8015214:	690b      	ldr	r3, [r1, #16]
 8015216:	460c      	mov	r4, r1
 8015218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801521c:	4293      	cmp	r3, r2
 801521e:	bfb8      	it	lt
 8015220:	4613      	movlt	r3, r2
 8015222:	6033      	str	r3, [r6, #0]
 8015224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015228:	b10a      	cbz	r2, 801522e <_printf_common+0x26>
 801522a:	3301      	adds	r3, #1
 801522c:	6033      	str	r3, [r6, #0]
 801522e:	6823      	ldr	r3, [r4, #0]
 8015230:	0699      	lsls	r1, r3, #26
 8015232:	bf42      	ittt	mi
 8015234:	6833      	ldrmi	r3, [r6, #0]
 8015236:	3302      	addmi	r3, #2
 8015238:	6033      	strmi	r3, [r6, #0]
 801523a:	6825      	ldr	r5, [r4, #0]
 801523c:	f015 0506 	ands.w	r5, r5, #6
 8015240:	d106      	bne.n	8015250 <_printf_common+0x48>
 8015242:	f104 0a19 	add.w	sl, r4, #25
 8015246:	68e3      	ldr	r3, [r4, #12]
 8015248:	6832      	ldr	r2, [r6, #0]
 801524a:	1a9b      	subs	r3, r3, r2
 801524c:	42ab      	cmp	r3, r5
 801524e:	dc29      	bgt.n	80152a4 <_printf_common+0x9c>
 8015250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015254:	1e13      	subs	r3, r2, #0
 8015256:	6822      	ldr	r2, [r4, #0]
 8015258:	bf18      	it	ne
 801525a:	2301      	movne	r3, #1
 801525c:	0692      	lsls	r2, r2, #26
 801525e:	d42e      	bmi.n	80152be <_printf_common+0xb6>
 8015260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015264:	4649      	mov	r1, r9
 8015266:	4638      	mov	r0, r7
 8015268:	47c0      	blx	r8
 801526a:	3001      	adds	r0, #1
 801526c:	d021      	beq.n	80152b2 <_printf_common+0xaa>
 801526e:	6823      	ldr	r3, [r4, #0]
 8015270:	341a      	adds	r4, #26
 8015272:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8015276:	f003 0306 	and.w	r3, r3, #6
 801527a:	6832      	ldr	r2, [r6, #0]
 801527c:	2600      	movs	r6, #0
 801527e:	2b04      	cmp	r3, #4
 8015280:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8015284:	bf08      	it	eq
 8015286:	1aad      	subeq	r5, r5, r2
 8015288:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801528c:	bf14      	ite	ne
 801528e:	2500      	movne	r5, #0
 8015290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015294:	4293      	cmp	r3, r2
 8015296:	bfc4      	itt	gt
 8015298:	1a9b      	subgt	r3, r3, r2
 801529a:	18ed      	addgt	r5, r5, r3
 801529c:	42b5      	cmp	r5, r6
 801529e:	d11a      	bne.n	80152d6 <_printf_common+0xce>
 80152a0:	2000      	movs	r0, #0
 80152a2:	e008      	b.n	80152b6 <_printf_common+0xae>
 80152a4:	2301      	movs	r3, #1
 80152a6:	4652      	mov	r2, sl
 80152a8:	4649      	mov	r1, r9
 80152aa:	4638      	mov	r0, r7
 80152ac:	47c0      	blx	r8
 80152ae:	3001      	adds	r0, #1
 80152b0:	d103      	bne.n	80152ba <_printf_common+0xb2>
 80152b2:	f04f 30ff 	mov.w	r0, #4294967295
 80152b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152ba:	3501      	adds	r5, #1
 80152bc:	e7c3      	b.n	8015246 <_printf_common+0x3e>
 80152be:	18e1      	adds	r1, r4, r3
 80152c0:	1c5a      	adds	r2, r3, #1
 80152c2:	2030      	movs	r0, #48	; 0x30
 80152c4:	3302      	adds	r3, #2
 80152c6:	4422      	add	r2, r4
 80152c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80152cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80152d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80152d4:	e7c4      	b.n	8015260 <_printf_common+0x58>
 80152d6:	2301      	movs	r3, #1
 80152d8:	4622      	mov	r2, r4
 80152da:	4649      	mov	r1, r9
 80152dc:	4638      	mov	r0, r7
 80152de:	47c0      	blx	r8
 80152e0:	3001      	adds	r0, #1
 80152e2:	d0e6      	beq.n	80152b2 <_printf_common+0xaa>
 80152e4:	3601      	adds	r6, #1
 80152e6:	e7d9      	b.n	801529c <_printf_common+0x94>

080152e8 <_printf_i>:
 80152e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80152ec:	7e0f      	ldrb	r7, [r1, #24]
 80152ee:	4691      	mov	r9, r2
 80152f0:	4680      	mov	r8, r0
 80152f2:	460c      	mov	r4, r1
 80152f4:	2f78      	cmp	r7, #120	; 0x78
 80152f6:	469a      	mov	sl, r3
 80152f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80152fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80152fe:	d807      	bhi.n	8015310 <_printf_i+0x28>
 8015300:	2f62      	cmp	r7, #98	; 0x62
 8015302:	d80a      	bhi.n	801531a <_printf_i+0x32>
 8015304:	2f00      	cmp	r7, #0
 8015306:	f000 80d8 	beq.w	80154ba <_printf_i+0x1d2>
 801530a:	2f58      	cmp	r7, #88	; 0x58
 801530c:	f000 80a3 	beq.w	8015456 <_printf_i+0x16e>
 8015310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015318:	e03a      	b.n	8015390 <_printf_i+0xa8>
 801531a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801531e:	2b15      	cmp	r3, #21
 8015320:	d8f6      	bhi.n	8015310 <_printf_i+0x28>
 8015322:	a101      	add	r1, pc, #4	; (adr r1, 8015328 <_printf_i+0x40>)
 8015324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015328:	08015381 	.word	0x08015381
 801532c:	08015395 	.word	0x08015395
 8015330:	08015311 	.word	0x08015311
 8015334:	08015311 	.word	0x08015311
 8015338:	08015311 	.word	0x08015311
 801533c:	08015311 	.word	0x08015311
 8015340:	08015395 	.word	0x08015395
 8015344:	08015311 	.word	0x08015311
 8015348:	08015311 	.word	0x08015311
 801534c:	08015311 	.word	0x08015311
 8015350:	08015311 	.word	0x08015311
 8015354:	080154a1 	.word	0x080154a1
 8015358:	080153c5 	.word	0x080153c5
 801535c:	08015483 	.word	0x08015483
 8015360:	08015311 	.word	0x08015311
 8015364:	08015311 	.word	0x08015311
 8015368:	080154c3 	.word	0x080154c3
 801536c:	08015311 	.word	0x08015311
 8015370:	080153c5 	.word	0x080153c5
 8015374:	08015311 	.word	0x08015311
 8015378:	08015311 	.word	0x08015311
 801537c:	0801548b 	.word	0x0801548b
 8015380:	682b      	ldr	r3, [r5, #0]
 8015382:	1d1a      	adds	r2, r3, #4
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	602a      	str	r2, [r5, #0]
 8015388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801538c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015390:	2301      	movs	r3, #1
 8015392:	e0a3      	b.n	80154dc <_printf_i+0x1f4>
 8015394:	6820      	ldr	r0, [r4, #0]
 8015396:	6829      	ldr	r1, [r5, #0]
 8015398:	0606      	lsls	r6, r0, #24
 801539a:	f101 0304 	add.w	r3, r1, #4
 801539e:	d50a      	bpl.n	80153b6 <_printf_i+0xce>
 80153a0:	680e      	ldr	r6, [r1, #0]
 80153a2:	602b      	str	r3, [r5, #0]
 80153a4:	2e00      	cmp	r6, #0
 80153a6:	da03      	bge.n	80153b0 <_printf_i+0xc8>
 80153a8:	232d      	movs	r3, #45	; 0x2d
 80153aa:	4276      	negs	r6, r6
 80153ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80153b0:	485e      	ldr	r0, [pc, #376]	; (801552c <_printf_i+0x244>)
 80153b2:	230a      	movs	r3, #10
 80153b4:	e019      	b.n	80153ea <_printf_i+0x102>
 80153b6:	680e      	ldr	r6, [r1, #0]
 80153b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80153bc:	602b      	str	r3, [r5, #0]
 80153be:	bf18      	it	ne
 80153c0:	b236      	sxthne	r6, r6
 80153c2:	e7ef      	b.n	80153a4 <_printf_i+0xbc>
 80153c4:	682b      	ldr	r3, [r5, #0]
 80153c6:	6820      	ldr	r0, [r4, #0]
 80153c8:	1d19      	adds	r1, r3, #4
 80153ca:	6029      	str	r1, [r5, #0]
 80153cc:	0601      	lsls	r1, r0, #24
 80153ce:	d501      	bpl.n	80153d4 <_printf_i+0xec>
 80153d0:	681e      	ldr	r6, [r3, #0]
 80153d2:	e002      	b.n	80153da <_printf_i+0xf2>
 80153d4:	0646      	lsls	r6, r0, #25
 80153d6:	d5fb      	bpl.n	80153d0 <_printf_i+0xe8>
 80153d8:	881e      	ldrh	r6, [r3, #0]
 80153da:	2f6f      	cmp	r7, #111	; 0x6f
 80153dc:	4853      	ldr	r0, [pc, #332]	; (801552c <_printf_i+0x244>)
 80153de:	bf0c      	ite	eq
 80153e0:	2308      	moveq	r3, #8
 80153e2:	230a      	movne	r3, #10
 80153e4:	2100      	movs	r1, #0
 80153e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80153ea:	6865      	ldr	r5, [r4, #4]
 80153ec:	2d00      	cmp	r5, #0
 80153ee:	60a5      	str	r5, [r4, #8]
 80153f0:	bfa2      	ittt	ge
 80153f2:	6821      	ldrge	r1, [r4, #0]
 80153f4:	f021 0104 	bicge.w	r1, r1, #4
 80153f8:	6021      	strge	r1, [r4, #0]
 80153fa:	b90e      	cbnz	r6, 8015400 <_printf_i+0x118>
 80153fc:	2d00      	cmp	r5, #0
 80153fe:	d04d      	beq.n	801549c <_printf_i+0x1b4>
 8015400:	4615      	mov	r5, r2
 8015402:	fbb6 f1f3 	udiv	r1, r6, r3
 8015406:	fb03 6711 	mls	r7, r3, r1, r6
 801540a:	5dc7      	ldrb	r7, [r0, r7]
 801540c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015410:	4637      	mov	r7, r6
 8015412:	460e      	mov	r6, r1
 8015414:	42bb      	cmp	r3, r7
 8015416:	d9f4      	bls.n	8015402 <_printf_i+0x11a>
 8015418:	2b08      	cmp	r3, #8
 801541a:	d10b      	bne.n	8015434 <_printf_i+0x14c>
 801541c:	6823      	ldr	r3, [r4, #0]
 801541e:	07de      	lsls	r6, r3, #31
 8015420:	d508      	bpl.n	8015434 <_printf_i+0x14c>
 8015422:	6923      	ldr	r3, [r4, #16]
 8015424:	6861      	ldr	r1, [r4, #4]
 8015426:	4299      	cmp	r1, r3
 8015428:	bfde      	ittt	le
 801542a:	2330      	movle	r3, #48	; 0x30
 801542c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015430:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015434:	1b52      	subs	r2, r2, r5
 8015436:	6122      	str	r2, [r4, #16]
 8015438:	464b      	mov	r3, r9
 801543a:	aa03      	add	r2, sp, #12
 801543c:	4621      	mov	r1, r4
 801543e:	4640      	mov	r0, r8
 8015440:	f8cd a000 	str.w	sl, [sp]
 8015444:	f7ff fee0 	bl	8015208 <_printf_common>
 8015448:	3001      	adds	r0, #1
 801544a:	d14c      	bne.n	80154e6 <_printf_i+0x1fe>
 801544c:	f04f 30ff 	mov.w	r0, #4294967295
 8015450:	b004      	add	sp, #16
 8015452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015456:	4835      	ldr	r0, [pc, #212]	; (801552c <_printf_i+0x244>)
 8015458:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801545c:	6829      	ldr	r1, [r5, #0]
 801545e:	6823      	ldr	r3, [r4, #0]
 8015460:	f851 6b04 	ldr.w	r6, [r1], #4
 8015464:	6029      	str	r1, [r5, #0]
 8015466:	061d      	lsls	r5, r3, #24
 8015468:	d514      	bpl.n	8015494 <_printf_i+0x1ac>
 801546a:	07df      	lsls	r7, r3, #31
 801546c:	bf44      	itt	mi
 801546e:	f043 0320 	orrmi.w	r3, r3, #32
 8015472:	6023      	strmi	r3, [r4, #0]
 8015474:	b91e      	cbnz	r6, 801547e <_printf_i+0x196>
 8015476:	6823      	ldr	r3, [r4, #0]
 8015478:	f023 0320 	bic.w	r3, r3, #32
 801547c:	6023      	str	r3, [r4, #0]
 801547e:	2310      	movs	r3, #16
 8015480:	e7b0      	b.n	80153e4 <_printf_i+0xfc>
 8015482:	6823      	ldr	r3, [r4, #0]
 8015484:	f043 0320 	orr.w	r3, r3, #32
 8015488:	6023      	str	r3, [r4, #0]
 801548a:	2378      	movs	r3, #120	; 0x78
 801548c:	4828      	ldr	r0, [pc, #160]	; (8015530 <_printf_i+0x248>)
 801548e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015492:	e7e3      	b.n	801545c <_printf_i+0x174>
 8015494:	0659      	lsls	r1, r3, #25
 8015496:	bf48      	it	mi
 8015498:	b2b6      	uxthmi	r6, r6
 801549a:	e7e6      	b.n	801546a <_printf_i+0x182>
 801549c:	4615      	mov	r5, r2
 801549e:	e7bb      	b.n	8015418 <_printf_i+0x130>
 80154a0:	682b      	ldr	r3, [r5, #0]
 80154a2:	6826      	ldr	r6, [r4, #0]
 80154a4:	1d18      	adds	r0, r3, #4
 80154a6:	6961      	ldr	r1, [r4, #20]
 80154a8:	6028      	str	r0, [r5, #0]
 80154aa:	0635      	lsls	r5, r6, #24
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	d501      	bpl.n	80154b4 <_printf_i+0x1cc>
 80154b0:	6019      	str	r1, [r3, #0]
 80154b2:	e002      	b.n	80154ba <_printf_i+0x1d2>
 80154b4:	0670      	lsls	r0, r6, #25
 80154b6:	d5fb      	bpl.n	80154b0 <_printf_i+0x1c8>
 80154b8:	8019      	strh	r1, [r3, #0]
 80154ba:	2300      	movs	r3, #0
 80154bc:	4615      	mov	r5, r2
 80154be:	6123      	str	r3, [r4, #16]
 80154c0:	e7ba      	b.n	8015438 <_printf_i+0x150>
 80154c2:	682b      	ldr	r3, [r5, #0]
 80154c4:	2100      	movs	r1, #0
 80154c6:	1d1a      	adds	r2, r3, #4
 80154c8:	602a      	str	r2, [r5, #0]
 80154ca:	681d      	ldr	r5, [r3, #0]
 80154cc:	6862      	ldr	r2, [r4, #4]
 80154ce:	4628      	mov	r0, r5
 80154d0:	f000 f830 	bl	8015534 <memchr>
 80154d4:	b108      	cbz	r0, 80154da <_printf_i+0x1f2>
 80154d6:	1b40      	subs	r0, r0, r5
 80154d8:	6060      	str	r0, [r4, #4]
 80154da:	6863      	ldr	r3, [r4, #4]
 80154dc:	6123      	str	r3, [r4, #16]
 80154de:	2300      	movs	r3, #0
 80154e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154e4:	e7a8      	b.n	8015438 <_printf_i+0x150>
 80154e6:	6923      	ldr	r3, [r4, #16]
 80154e8:	462a      	mov	r2, r5
 80154ea:	4649      	mov	r1, r9
 80154ec:	4640      	mov	r0, r8
 80154ee:	47d0      	blx	sl
 80154f0:	3001      	adds	r0, #1
 80154f2:	d0ab      	beq.n	801544c <_printf_i+0x164>
 80154f4:	6823      	ldr	r3, [r4, #0]
 80154f6:	079b      	lsls	r3, r3, #30
 80154f8:	d413      	bmi.n	8015522 <_printf_i+0x23a>
 80154fa:	68e0      	ldr	r0, [r4, #12]
 80154fc:	9b03      	ldr	r3, [sp, #12]
 80154fe:	4298      	cmp	r0, r3
 8015500:	bfb8      	it	lt
 8015502:	4618      	movlt	r0, r3
 8015504:	e7a4      	b.n	8015450 <_printf_i+0x168>
 8015506:	2301      	movs	r3, #1
 8015508:	4632      	mov	r2, r6
 801550a:	4649      	mov	r1, r9
 801550c:	4640      	mov	r0, r8
 801550e:	47d0      	blx	sl
 8015510:	3001      	adds	r0, #1
 8015512:	d09b      	beq.n	801544c <_printf_i+0x164>
 8015514:	3501      	adds	r5, #1
 8015516:	68e3      	ldr	r3, [r4, #12]
 8015518:	9903      	ldr	r1, [sp, #12]
 801551a:	1a5b      	subs	r3, r3, r1
 801551c:	42ab      	cmp	r3, r5
 801551e:	dcf2      	bgt.n	8015506 <_printf_i+0x21e>
 8015520:	e7eb      	b.n	80154fa <_printf_i+0x212>
 8015522:	2500      	movs	r5, #0
 8015524:	f104 0619 	add.w	r6, r4, #25
 8015528:	e7f5      	b.n	8015516 <_printf_i+0x22e>
 801552a:	bf00      	nop
 801552c:	08015cd6 	.word	0x08015cd6
 8015530:	08015ce7 	.word	0x08015ce7

08015534 <memchr>:
 8015534:	b2c9      	uxtb	r1, r1
 8015536:	4402      	add	r2, r0
 8015538:	b510      	push	{r4, lr}
 801553a:	4290      	cmp	r0, r2
 801553c:	4603      	mov	r3, r0
 801553e:	d101      	bne.n	8015544 <memchr+0x10>
 8015540:	2300      	movs	r3, #0
 8015542:	e003      	b.n	801554c <memchr+0x18>
 8015544:	781c      	ldrb	r4, [r3, #0]
 8015546:	3001      	adds	r0, #1
 8015548:	428c      	cmp	r4, r1
 801554a:	d1f6      	bne.n	801553a <memchr+0x6>
 801554c:	4618      	mov	r0, r3
 801554e:	bd10      	pop	{r4, pc}

08015550 <memcpy>:
 8015550:	440a      	add	r2, r1
 8015552:	1e43      	subs	r3, r0, #1
 8015554:	4291      	cmp	r1, r2
 8015556:	d100      	bne.n	801555a <memcpy+0xa>
 8015558:	4770      	bx	lr
 801555a:	b510      	push	{r4, lr}
 801555c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015560:	4291      	cmp	r1, r2
 8015562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015566:	d1f9      	bne.n	801555c <memcpy+0xc>
 8015568:	bd10      	pop	{r4, pc}

0801556a <memmove>:
 801556a:	4288      	cmp	r0, r1
 801556c:	b510      	push	{r4, lr}
 801556e:	eb01 0402 	add.w	r4, r1, r2
 8015572:	d902      	bls.n	801557a <memmove+0x10>
 8015574:	4284      	cmp	r4, r0
 8015576:	4623      	mov	r3, r4
 8015578:	d807      	bhi.n	801558a <memmove+0x20>
 801557a:	1e43      	subs	r3, r0, #1
 801557c:	42a1      	cmp	r1, r4
 801557e:	d008      	beq.n	8015592 <memmove+0x28>
 8015580:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015584:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015588:	e7f8      	b.n	801557c <memmove+0x12>
 801558a:	4402      	add	r2, r0
 801558c:	4601      	mov	r1, r0
 801558e:	428a      	cmp	r2, r1
 8015590:	d100      	bne.n	8015594 <memmove+0x2a>
 8015592:	bd10      	pop	{r4, pc}
 8015594:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015598:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801559c:	e7f7      	b.n	801558e <memmove+0x24>
	...

080155a0 <_free_r>:
 80155a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155a2:	2900      	cmp	r1, #0
 80155a4:	d043      	beq.n	801562e <_free_r+0x8e>
 80155a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80155aa:	1f0c      	subs	r4, r1, #4
 80155ac:	9001      	str	r0, [sp, #4]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	bfb8      	it	lt
 80155b2:	18e4      	addlt	r4, r4, r3
 80155b4:	f000 f914 	bl	80157e0 <__malloc_lock>
 80155b8:	4a1e      	ldr	r2, [pc, #120]	; (8015634 <_free_r+0x94>)
 80155ba:	9801      	ldr	r0, [sp, #4]
 80155bc:	6813      	ldr	r3, [r2, #0]
 80155be:	b933      	cbnz	r3, 80155ce <_free_r+0x2e>
 80155c0:	6063      	str	r3, [r4, #4]
 80155c2:	6014      	str	r4, [r2, #0]
 80155c4:	b003      	add	sp, #12
 80155c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80155ca:	f000 b90f 	b.w	80157ec <__malloc_unlock>
 80155ce:	42a3      	cmp	r3, r4
 80155d0:	d908      	bls.n	80155e4 <_free_r+0x44>
 80155d2:	6825      	ldr	r5, [r4, #0]
 80155d4:	1961      	adds	r1, r4, r5
 80155d6:	428b      	cmp	r3, r1
 80155d8:	bf01      	itttt	eq
 80155da:	6819      	ldreq	r1, [r3, #0]
 80155dc:	685b      	ldreq	r3, [r3, #4]
 80155de:	1949      	addeq	r1, r1, r5
 80155e0:	6021      	streq	r1, [r4, #0]
 80155e2:	e7ed      	b.n	80155c0 <_free_r+0x20>
 80155e4:	461a      	mov	r2, r3
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	b10b      	cbz	r3, 80155ee <_free_r+0x4e>
 80155ea:	42a3      	cmp	r3, r4
 80155ec:	d9fa      	bls.n	80155e4 <_free_r+0x44>
 80155ee:	6811      	ldr	r1, [r2, #0]
 80155f0:	1855      	adds	r5, r2, r1
 80155f2:	42a5      	cmp	r5, r4
 80155f4:	d10b      	bne.n	801560e <_free_r+0x6e>
 80155f6:	6824      	ldr	r4, [r4, #0]
 80155f8:	4421      	add	r1, r4
 80155fa:	1854      	adds	r4, r2, r1
 80155fc:	6011      	str	r1, [r2, #0]
 80155fe:	42a3      	cmp	r3, r4
 8015600:	d1e0      	bne.n	80155c4 <_free_r+0x24>
 8015602:	681c      	ldr	r4, [r3, #0]
 8015604:	685b      	ldr	r3, [r3, #4]
 8015606:	4421      	add	r1, r4
 8015608:	6053      	str	r3, [r2, #4]
 801560a:	6011      	str	r1, [r2, #0]
 801560c:	e7da      	b.n	80155c4 <_free_r+0x24>
 801560e:	d902      	bls.n	8015616 <_free_r+0x76>
 8015610:	230c      	movs	r3, #12
 8015612:	6003      	str	r3, [r0, #0]
 8015614:	e7d6      	b.n	80155c4 <_free_r+0x24>
 8015616:	6825      	ldr	r5, [r4, #0]
 8015618:	1961      	adds	r1, r4, r5
 801561a:	428b      	cmp	r3, r1
 801561c:	bf02      	ittt	eq
 801561e:	6819      	ldreq	r1, [r3, #0]
 8015620:	685b      	ldreq	r3, [r3, #4]
 8015622:	1949      	addeq	r1, r1, r5
 8015624:	6063      	str	r3, [r4, #4]
 8015626:	bf08      	it	eq
 8015628:	6021      	streq	r1, [r4, #0]
 801562a:	6054      	str	r4, [r2, #4]
 801562c:	e7ca      	b.n	80155c4 <_free_r+0x24>
 801562e:	b003      	add	sp, #12
 8015630:	bd30      	pop	{r4, r5, pc}
 8015632:	bf00      	nop
 8015634:	20001ea4 	.word	0x20001ea4

08015638 <sbrk_aligned>:
 8015638:	b570      	push	{r4, r5, r6, lr}
 801563a:	4e0e      	ldr	r6, [pc, #56]	; (8015674 <sbrk_aligned+0x3c>)
 801563c:	460c      	mov	r4, r1
 801563e:	4605      	mov	r5, r0
 8015640:	6831      	ldr	r1, [r6, #0]
 8015642:	b911      	cbnz	r1, 801564a <sbrk_aligned+0x12>
 8015644:	f000 f8bc 	bl	80157c0 <_sbrk_r>
 8015648:	6030      	str	r0, [r6, #0]
 801564a:	4621      	mov	r1, r4
 801564c:	4628      	mov	r0, r5
 801564e:	f000 f8b7 	bl	80157c0 <_sbrk_r>
 8015652:	1c43      	adds	r3, r0, #1
 8015654:	d00a      	beq.n	801566c <sbrk_aligned+0x34>
 8015656:	1cc4      	adds	r4, r0, #3
 8015658:	f024 0403 	bic.w	r4, r4, #3
 801565c:	42a0      	cmp	r0, r4
 801565e:	d007      	beq.n	8015670 <sbrk_aligned+0x38>
 8015660:	1a21      	subs	r1, r4, r0
 8015662:	4628      	mov	r0, r5
 8015664:	f000 f8ac 	bl	80157c0 <_sbrk_r>
 8015668:	3001      	adds	r0, #1
 801566a:	d101      	bne.n	8015670 <sbrk_aligned+0x38>
 801566c:	f04f 34ff 	mov.w	r4, #4294967295
 8015670:	4620      	mov	r0, r4
 8015672:	bd70      	pop	{r4, r5, r6, pc}
 8015674:	20001ea8 	.word	0x20001ea8

08015678 <_malloc_r>:
 8015678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801567c:	1ccd      	adds	r5, r1, #3
 801567e:	4607      	mov	r7, r0
 8015680:	f025 0503 	bic.w	r5, r5, #3
 8015684:	3508      	adds	r5, #8
 8015686:	2d0c      	cmp	r5, #12
 8015688:	bf38      	it	cc
 801568a:	250c      	movcc	r5, #12
 801568c:	2d00      	cmp	r5, #0
 801568e:	db01      	blt.n	8015694 <_malloc_r+0x1c>
 8015690:	42a9      	cmp	r1, r5
 8015692:	d905      	bls.n	80156a0 <_malloc_r+0x28>
 8015694:	230c      	movs	r3, #12
 8015696:	2600      	movs	r6, #0
 8015698:	603b      	str	r3, [r7, #0]
 801569a:	4630      	mov	r0, r6
 801569c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156a0:	4e2e      	ldr	r6, [pc, #184]	; (801575c <_malloc_r+0xe4>)
 80156a2:	f000 f89d 	bl	80157e0 <__malloc_lock>
 80156a6:	6833      	ldr	r3, [r6, #0]
 80156a8:	461c      	mov	r4, r3
 80156aa:	bb34      	cbnz	r4, 80156fa <_malloc_r+0x82>
 80156ac:	4629      	mov	r1, r5
 80156ae:	4638      	mov	r0, r7
 80156b0:	f7ff ffc2 	bl	8015638 <sbrk_aligned>
 80156b4:	1c43      	adds	r3, r0, #1
 80156b6:	4604      	mov	r4, r0
 80156b8:	d14d      	bne.n	8015756 <_malloc_r+0xde>
 80156ba:	6834      	ldr	r4, [r6, #0]
 80156bc:	4626      	mov	r6, r4
 80156be:	2e00      	cmp	r6, #0
 80156c0:	d140      	bne.n	8015744 <_malloc_r+0xcc>
 80156c2:	6823      	ldr	r3, [r4, #0]
 80156c4:	4631      	mov	r1, r6
 80156c6:	4638      	mov	r0, r7
 80156c8:	eb04 0803 	add.w	r8, r4, r3
 80156cc:	f000 f878 	bl	80157c0 <_sbrk_r>
 80156d0:	4580      	cmp	r8, r0
 80156d2:	d13a      	bne.n	801574a <_malloc_r+0xd2>
 80156d4:	6821      	ldr	r1, [r4, #0]
 80156d6:	3503      	adds	r5, #3
 80156d8:	4638      	mov	r0, r7
 80156da:	1a6d      	subs	r5, r5, r1
 80156dc:	f025 0503 	bic.w	r5, r5, #3
 80156e0:	3508      	adds	r5, #8
 80156e2:	2d0c      	cmp	r5, #12
 80156e4:	bf38      	it	cc
 80156e6:	250c      	movcc	r5, #12
 80156e8:	4629      	mov	r1, r5
 80156ea:	f7ff ffa5 	bl	8015638 <sbrk_aligned>
 80156ee:	3001      	adds	r0, #1
 80156f0:	d02b      	beq.n	801574a <_malloc_r+0xd2>
 80156f2:	6823      	ldr	r3, [r4, #0]
 80156f4:	442b      	add	r3, r5
 80156f6:	6023      	str	r3, [r4, #0]
 80156f8:	e00e      	b.n	8015718 <_malloc_r+0xa0>
 80156fa:	6822      	ldr	r2, [r4, #0]
 80156fc:	1b52      	subs	r2, r2, r5
 80156fe:	d41e      	bmi.n	801573e <_malloc_r+0xc6>
 8015700:	2a0b      	cmp	r2, #11
 8015702:	d916      	bls.n	8015732 <_malloc_r+0xba>
 8015704:	1961      	adds	r1, r4, r5
 8015706:	42a3      	cmp	r3, r4
 8015708:	6025      	str	r5, [r4, #0]
 801570a:	bf18      	it	ne
 801570c:	6059      	strne	r1, [r3, #4]
 801570e:	6863      	ldr	r3, [r4, #4]
 8015710:	bf08      	it	eq
 8015712:	6031      	streq	r1, [r6, #0]
 8015714:	5162      	str	r2, [r4, r5]
 8015716:	604b      	str	r3, [r1, #4]
 8015718:	f104 060b 	add.w	r6, r4, #11
 801571c:	4638      	mov	r0, r7
 801571e:	f000 f865 	bl	80157ec <__malloc_unlock>
 8015722:	1d23      	adds	r3, r4, #4
 8015724:	f026 0607 	bic.w	r6, r6, #7
 8015728:	1af2      	subs	r2, r6, r3
 801572a:	d0b6      	beq.n	801569a <_malloc_r+0x22>
 801572c:	1b9b      	subs	r3, r3, r6
 801572e:	50a3      	str	r3, [r4, r2]
 8015730:	e7b3      	b.n	801569a <_malloc_r+0x22>
 8015732:	6862      	ldr	r2, [r4, #4]
 8015734:	42a3      	cmp	r3, r4
 8015736:	bf0c      	ite	eq
 8015738:	6032      	streq	r2, [r6, #0]
 801573a:	605a      	strne	r2, [r3, #4]
 801573c:	e7ec      	b.n	8015718 <_malloc_r+0xa0>
 801573e:	4623      	mov	r3, r4
 8015740:	6864      	ldr	r4, [r4, #4]
 8015742:	e7b2      	b.n	80156aa <_malloc_r+0x32>
 8015744:	4634      	mov	r4, r6
 8015746:	6876      	ldr	r6, [r6, #4]
 8015748:	e7b9      	b.n	80156be <_malloc_r+0x46>
 801574a:	230c      	movs	r3, #12
 801574c:	4638      	mov	r0, r7
 801574e:	603b      	str	r3, [r7, #0]
 8015750:	f000 f84c 	bl	80157ec <__malloc_unlock>
 8015754:	e7a1      	b.n	801569a <_malloc_r+0x22>
 8015756:	6025      	str	r5, [r4, #0]
 8015758:	e7de      	b.n	8015718 <_malloc_r+0xa0>
 801575a:	bf00      	nop
 801575c:	20001ea4 	.word	0x20001ea4

08015760 <_realloc_r>:
 8015760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015764:	4680      	mov	r8, r0
 8015766:	4614      	mov	r4, r2
 8015768:	460e      	mov	r6, r1
 801576a:	b921      	cbnz	r1, 8015776 <_realloc_r+0x16>
 801576c:	4611      	mov	r1, r2
 801576e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015772:	f7ff bf81 	b.w	8015678 <_malloc_r>
 8015776:	b92a      	cbnz	r2, 8015784 <_realloc_r+0x24>
 8015778:	4625      	mov	r5, r4
 801577a:	f7ff ff11 	bl	80155a0 <_free_r>
 801577e:	4628      	mov	r0, r5
 8015780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015784:	f000 f838 	bl	80157f8 <_malloc_usable_size_r>
 8015788:	4284      	cmp	r4, r0
 801578a:	4607      	mov	r7, r0
 801578c:	d802      	bhi.n	8015794 <_realloc_r+0x34>
 801578e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015792:	d812      	bhi.n	80157ba <_realloc_r+0x5a>
 8015794:	4621      	mov	r1, r4
 8015796:	4640      	mov	r0, r8
 8015798:	f7ff ff6e 	bl	8015678 <_malloc_r>
 801579c:	4605      	mov	r5, r0
 801579e:	2800      	cmp	r0, #0
 80157a0:	d0ed      	beq.n	801577e <_realloc_r+0x1e>
 80157a2:	42bc      	cmp	r4, r7
 80157a4:	4622      	mov	r2, r4
 80157a6:	4631      	mov	r1, r6
 80157a8:	bf28      	it	cs
 80157aa:	463a      	movcs	r2, r7
 80157ac:	f7ff fed0 	bl	8015550 <memcpy>
 80157b0:	4631      	mov	r1, r6
 80157b2:	4640      	mov	r0, r8
 80157b4:	f7ff fef4 	bl	80155a0 <_free_r>
 80157b8:	e7e1      	b.n	801577e <_realloc_r+0x1e>
 80157ba:	4635      	mov	r5, r6
 80157bc:	e7df      	b.n	801577e <_realloc_r+0x1e>
	...

080157c0 <_sbrk_r>:
 80157c0:	b538      	push	{r3, r4, r5, lr}
 80157c2:	2300      	movs	r3, #0
 80157c4:	4d05      	ldr	r5, [pc, #20]	; (80157dc <_sbrk_r+0x1c>)
 80157c6:	4604      	mov	r4, r0
 80157c8:	4608      	mov	r0, r1
 80157ca:	602b      	str	r3, [r5, #0]
 80157cc:	f7ec f896 	bl	80018fc <_sbrk>
 80157d0:	1c43      	adds	r3, r0, #1
 80157d2:	d102      	bne.n	80157da <_sbrk_r+0x1a>
 80157d4:	682b      	ldr	r3, [r5, #0]
 80157d6:	b103      	cbz	r3, 80157da <_sbrk_r+0x1a>
 80157d8:	6023      	str	r3, [r4, #0]
 80157da:	bd38      	pop	{r3, r4, r5, pc}
 80157dc:	20001eac 	.word	0x20001eac

080157e0 <__malloc_lock>:
 80157e0:	4801      	ldr	r0, [pc, #4]	; (80157e8 <__malloc_lock+0x8>)
 80157e2:	f000 b811 	b.w	8015808 <__retarget_lock_acquire_recursive>
 80157e6:	bf00      	nop
 80157e8:	20001eb0 	.word	0x20001eb0

080157ec <__malloc_unlock>:
 80157ec:	4801      	ldr	r0, [pc, #4]	; (80157f4 <__malloc_unlock+0x8>)
 80157ee:	f000 b80c 	b.w	801580a <__retarget_lock_release_recursive>
 80157f2:	bf00      	nop
 80157f4:	20001eb0 	.word	0x20001eb0

080157f8 <_malloc_usable_size_r>:
 80157f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80157fc:	1f18      	subs	r0, r3, #4
 80157fe:	2b00      	cmp	r3, #0
 8015800:	bfbc      	itt	lt
 8015802:	580b      	ldrlt	r3, [r1, r0]
 8015804:	18c0      	addlt	r0, r0, r3
 8015806:	4770      	bx	lr

08015808 <__retarget_lock_acquire_recursive>:
 8015808:	4770      	bx	lr

0801580a <__retarget_lock_release_recursive>:
 801580a:	4770      	bx	lr

0801580c <_init>:
 801580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801580e:	bf00      	nop
 8015810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015812:	bc08      	pop	{r3}
 8015814:	469e      	mov	lr, r3
 8015816:	4770      	bx	lr

08015818 <_fini>:
 8015818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801581a:	bf00      	nop
 801581c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801581e:	bc08      	pop	{r3}
 8015820:	469e      	mov	lr, r3
 8015822:	4770      	bx	lr
