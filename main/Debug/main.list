
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f48  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08015180  08015180  00025180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801563c  0801563c  0002563c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015644  08015644  00025644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015648  08015648  00025648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001b8  20000000  0801564c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ca1  200001b8  08015804  000301b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000607  20001e59  08015804  00031e59  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041bff  00000000  00000000  000301ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009138  00000000  00000000  00071ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002980  00000000  00000000  0007af28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002488  00000000  00000000  0007d8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040b1a  00000000  00000000  0007fd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003f951  00000000  00000000  000c084a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178478  00000000  00000000  0010019b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00278613  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a840  00000000  00000000  00278664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001b8 	.word	0x200001b8
 8000254:	00000000 	.word	0x00000000
 8000258:	08015168 	.word	0x08015168

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001bc 	.word	0x200001bc
 8000274:	08015168 	.word	0x08015168

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f89f 	bl	800040c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	2000167c 	.word	0x2000167c
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a31      	ldr	r2, [pc, #196]	; (80003bc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c22      	ldr	r4, [pc, #136]	; (80003c8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c1b      	ldr	r4, [pc, #108]	; (80003c8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b949      	cbnz	r1, 80003a6 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000392:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000394:	f00e f9a0 	bl	800e6d8 <tx_low_power_enter>
    POP     {r0-r3}
 8000398:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800039a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 800039c:	f00e f9cc 	bl	800e738 <tx_low_power_exit>
    POP     {r0-r3}
 80003a0:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a4:	e7f1      	b.n	800038a <__tx_ts_wait>

080003a6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003aa:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003ae:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b4:	e7d0      	b.n	8000358 <__tx_ts_restore>
 80003b6:	bf00      	nop

080003b8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b8:	4770      	bx	lr
 80003ba:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003bc:	20001718 	.word	0x20001718
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c0:	20001680 	.word	0x20001680
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c4:	20001684 	.word	0x20001684
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c8:	20001c84 	.word	0x20001c84

080003cc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003cc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ce:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003da:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003dc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ea:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003ec:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ee:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fe:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000400:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000406:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000408:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr

0800040c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	4922      	ldr	r1, [pc, #136]	; (8000498 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000410:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000414:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000418:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041a:	b13a      	cbz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800041c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000420:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000422:	b91a      	cbnz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000426:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042a:	6018      	str	r0, [r3, #0]

0800042c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800042c:	491d      	ldr	r1, [pc, #116]	; (80004a4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000430:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000432:	b122      	cbz	r2, 800043e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000436:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800043c:	e008      	b.n	8000450 <__tx_timer_done>

0800043e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000444:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000446:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000448:	d101      	bne.n	800044e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800044c:	6818      	ldr	r0, [r3, #0]

0800044e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044e:	6008      	str	r0, [r1, #0]

08000450 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000452:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000454:	b912      	cbnz	r2, 800045c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000456:	4914      	ldr	r1, [pc, #80]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000458:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045a:	b1c8      	cbz	r0, 8000490 <__tx_timer_nothing_expired>

0800045c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800045c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045e:	4912      	ldr	r1, [pc, #72]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000462:	b108      	cbz	r0, 8000468 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000464:	f00d f9fa 	bl	800d85c <_tx_timer_expiration_process>

08000468 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800046c:	b172      	cbz	r2, 800048c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046e:	f00d f8d9 	bl	800d624 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000472:	4810      	ldr	r0, [pc, #64]	; (80004b4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000474:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000476:	b949      	cbnz	r1, 800048c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000486:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000488:	d000      	beq.n	800048c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048a:	6002      	str	r2, [r0, #0]

0800048c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800048c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000490 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000490:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000494:	4770      	bx	lr
 8000496:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000498:	20001724 	.word	0x20001724
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049c:	20001c84 	.word	0x20001c84
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a0:	20001728 	.word	0x20001728
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a4:	200017b4 	.word	0x200017b4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a8:	200017b8 	.word	0x200017b8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004ac:	200017b0 	.word	0x200017b0
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b0:	200017ac 	.word	0x200017ac
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b4:	20001718 	.word	0x20001718
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b8:	20001680 	.word	0x20001680
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004bc:	20001684 	.word	0x20001684
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c0:	e000ed04 	.word	0xe000ed04

080004c4 <strlen>:
 80004c4:	4603      	mov	r3, r0
 80004c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d1fb      	bne.n	80004c6 <strlen+0x2>
 80004ce:	1a18      	subs	r0, r3, r0
 80004d0:	3801      	subs	r0, #1
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_uldivmod>:
 80004d4:	b953      	cbnz	r3, 80004ec <__aeabi_uldivmod+0x18>
 80004d6:	b94a      	cbnz	r2, 80004ec <__aeabi_uldivmod+0x18>
 80004d8:	2900      	cmp	r1, #0
 80004da:	bf08      	it	eq
 80004dc:	2800      	cmpeq	r0, #0
 80004de:	bf1c      	itt	ne
 80004e0:	f04f 31ff 	movne.w	r1, #4294967295
 80004e4:	f04f 30ff 	movne.w	r0, #4294967295
 80004e8:	f000 b982 	b.w	80007f0 <__aeabi_idiv0>
 80004ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80004f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004f4:	f000 f806 	bl	8000504 <__udivmoddi4>
 80004f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000500:	b004      	add	sp, #16
 8000502:	4770      	bx	lr

08000504 <__udivmoddi4>:
 8000504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000508:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800050a:	4604      	mov	r4, r0
 800050c:	460f      	mov	r7, r1
 800050e:	2b00      	cmp	r3, #0
 8000510:	d148      	bne.n	80005a4 <__udivmoddi4+0xa0>
 8000512:	428a      	cmp	r2, r1
 8000514:	4694      	mov	ip, r2
 8000516:	d961      	bls.n	80005dc <__udivmoddi4+0xd8>
 8000518:	fab2 f382 	clz	r3, r2
 800051c:	b143      	cbz	r3, 8000530 <__udivmoddi4+0x2c>
 800051e:	f1c3 0120 	rsb	r1, r3, #32
 8000522:	409f      	lsls	r7, r3
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	409c      	lsls	r4, r3
 800052a:	fa20 f101 	lsr.w	r1, r0, r1
 800052e:	430f      	orrs	r7, r1
 8000530:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	0c22      	lsrs	r2, r4, #16
 800053a:	fbb7 f6f1 	udiv	r6, r7, r1
 800053e:	fb01 7716 	mls	r7, r1, r6, r7
 8000542:	fb06 f00e 	mul.w	r0, r6, lr
 8000546:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800054a:	4290      	cmp	r0, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x5c>
 800054e:	eb1c 0202 	adds.w	r2, ip, r2
 8000552:	f106 37ff 	add.w	r7, r6, #4294967295
 8000556:	d202      	bcs.n	800055e <__udivmoddi4+0x5a>
 8000558:	4290      	cmp	r0, r2
 800055a:	f200 8137 	bhi.w	80007cc <__udivmoddi4+0x2c8>
 800055e:	463e      	mov	r6, r7
 8000560:	1a12      	subs	r2, r2, r0
 8000562:	b2a4      	uxth	r4, r4
 8000564:	fbb2 f0f1 	udiv	r0, r2, r1
 8000568:	fb01 2210 	mls	r2, r1, r0, r2
 800056c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000570:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x86>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000580:	d202      	bcs.n	8000588 <__udivmoddi4+0x84>
 8000582:	45a6      	cmp	lr, r4
 8000584:	f200 811c 	bhi.w	80007c0 <__udivmoddi4+0x2bc>
 8000588:	4610      	mov	r0, r2
 800058a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800058e:	eba4 040e 	sub.w	r4, r4, lr
 8000592:	2600      	movs	r6, #0
 8000594:	b11d      	cbz	r5, 800059e <__udivmoddi4+0x9a>
 8000596:	40dc      	lsrs	r4, r3
 8000598:	2300      	movs	r3, #0
 800059a:	e9c5 4300 	strd	r4, r3, [r5]
 800059e:	4631      	mov	r1, r6
 80005a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d909      	bls.n	80005bc <__udivmoddi4+0xb8>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	f000 80fd 	beq.w	80007a8 <__udivmoddi4+0x2a4>
 80005ae:	2600      	movs	r6, #0
 80005b0:	e9c5 0100 	strd	r0, r1, [r5]
 80005b4:	4630      	mov	r0, r6
 80005b6:	4631      	mov	r1, r6
 80005b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005bc:	fab3 f683 	clz	r6, r3
 80005c0:	2e00      	cmp	r6, #0
 80005c2:	d14b      	bne.n	800065c <__udivmoddi4+0x158>
 80005c4:	428b      	cmp	r3, r1
 80005c6:	f0c0 80f2 	bcc.w	80007ae <__udivmoddi4+0x2aa>
 80005ca:	4282      	cmp	r2, r0
 80005cc:	f240 80ef 	bls.w	80007ae <__udivmoddi4+0x2aa>
 80005d0:	4630      	mov	r0, r6
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d0e3      	beq.n	800059e <__udivmoddi4+0x9a>
 80005d6:	e9c5 4700 	strd	r4, r7, [r5]
 80005da:	e7e0      	b.n	800059e <__udivmoddi4+0x9a>
 80005dc:	b902      	cbnz	r2, 80005e0 <__udivmoddi4+0xdc>
 80005de:	deff      	udf	#255	; 0xff
 80005e0:	fab2 f382 	clz	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f040 809d 	bne.w	8000724 <__udivmoddi4+0x220>
 80005ea:	1a89      	subs	r1, r1, r2
 80005ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005f0:	b297      	uxth	r7, r2
 80005f2:	2601      	movs	r6, #1
 80005f4:	0c20      	lsrs	r0, r4, #16
 80005f6:	fbb1 f2fe 	udiv	r2, r1, lr
 80005fa:	fb0e 1112 	mls	r1, lr, r2, r1
 80005fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000602:	fb07 f002 	mul.w	r0, r7, r2
 8000606:	4288      	cmp	r0, r1
 8000608:	d90f      	bls.n	800062a <__udivmoddi4+0x126>
 800060a:	eb1c 0101 	adds.w	r1, ip, r1
 800060e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000612:	bf2c      	ite	cs
 8000614:	f04f 0901 	movcs.w	r9, #1
 8000618:	f04f 0900 	movcc.w	r9, #0
 800061c:	4288      	cmp	r0, r1
 800061e:	d903      	bls.n	8000628 <__udivmoddi4+0x124>
 8000620:	f1b9 0f00 	cmp.w	r9, #0
 8000624:	f000 80cf 	beq.w	80007c6 <__udivmoddi4+0x2c2>
 8000628:	4642      	mov	r2, r8
 800062a:	1a09      	subs	r1, r1, r0
 800062c:	b2a4      	uxth	r4, r4
 800062e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000632:	fb0e 1110 	mls	r1, lr, r0, r1
 8000636:	fb00 f707 	mul.w	r7, r0, r7
 800063a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800063e:	42a7      	cmp	r7, r4
 8000640:	d908      	bls.n	8000654 <__udivmoddi4+0x150>
 8000642:	eb1c 0404 	adds.w	r4, ip, r4
 8000646:	f100 31ff 	add.w	r1, r0, #4294967295
 800064a:	d202      	bcs.n	8000652 <__udivmoddi4+0x14e>
 800064c:	42a7      	cmp	r7, r4
 800064e:	f200 80b4 	bhi.w	80007ba <__udivmoddi4+0x2b6>
 8000652:	4608      	mov	r0, r1
 8000654:	1be4      	subs	r4, r4, r7
 8000656:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800065a:	e79b      	b.n	8000594 <__udivmoddi4+0x90>
 800065c:	f1c6 0720 	rsb	r7, r6, #32
 8000660:	40b3      	lsls	r3, r6
 8000662:	fa01 f406 	lsl.w	r4, r1, r6
 8000666:	fa22 fc07 	lsr.w	ip, r2, r7
 800066a:	40f9      	lsrs	r1, r7
 800066c:	40b2      	lsls	r2, r6
 800066e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000672:	fa20 f307 	lsr.w	r3, r0, r7
 8000676:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800067a:	431c      	orrs	r4, r3
 800067c:	fa1f fe8c 	uxth.w	lr, ip
 8000680:	fa00 f306 	lsl.w	r3, r0, r6
 8000684:	0c20      	lsrs	r0, r4, #16
 8000686:	fbb1 f8f9 	udiv	r8, r1, r9
 800068a:	fb09 1118 	mls	r1, r9, r8, r1
 800068e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000692:	fb08 f00e 	mul.w	r0, r8, lr
 8000696:	4288      	cmp	r0, r1
 8000698:	d90f      	bls.n	80006ba <__udivmoddi4+0x1b6>
 800069a:	eb1c 0101 	adds.w	r1, ip, r1
 800069e:	f108 3aff 	add.w	sl, r8, #4294967295
 80006a2:	bf2c      	ite	cs
 80006a4:	f04f 0b01 	movcs.w	fp, #1
 80006a8:	f04f 0b00 	movcc.w	fp, #0
 80006ac:	4288      	cmp	r0, r1
 80006ae:	d903      	bls.n	80006b8 <__udivmoddi4+0x1b4>
 80006b0:	f1bb 0f00 	cmp.w	fp, #0
 80006b4:	f000 808d 	beq.w	80007d2 <__udivmoddi4+0x2ce>
 80006b8:	46d0      	mov	r8, sl
 80006ba:	1a09      	subs	r1, r1, r0
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	fbb1 f0f9 	udiv	r0, r1, r9
 80006c2:	fb09 1110 	mls	r1, r9, r0, r1
 80006c6:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ca:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006ce:	458e      	cmp	lr, r1
 80006d0:	d907      	bls.n	80006e2 <__udivmoddi4+0x1de>
 80006d2:	eb1c 0101 	adds.w	r1, ip, r1
 80006d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80006da:	d201      	bcs.n	80006e0 <__udivmoddi4+0x1dc>
 80006dc:	458e      	cmp	lr, r1
 80006de:	d87f      	bhi.n	80007e0 <__udivmoddi4+0x2dc>
 80006e0:	4620      	mov	r0, r4
 80006e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006e6:	eba1 010e 	sub.w	r1, r1, lr
 80006ea:	fba0 9802 	umull	r9, r8, r0, r2
 80006ee:	4541      	cmp	r1, r8
 80006f0:	464c      	mov	r4, r9
 80006f2:	46c6      	mov	lr, r8
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0x1f8>
 80006f6:	d106      	bne.n	8000706 <__udivmoddi4+0x202>
 80006f8:	454b      	cmp	r3, r9
 80006fa:	d204      	bcs.n	8000706 <__udivmoddi4+0x202>
 80006fc:	3801      	subs	r0, #1
 80006fe:	ebb9 0402 	subs.w	r4, r9, r2
 8000702:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000706:	2d00      	cmp	r5, #0
 8000708:	d070      	beq.n	80007ec <__udivmoddi4+0x2e8>
 800070a:	1b1a      	subs	r2, r3, r4
 800070c:	eb61 010e 	sbc.w	r1, r1, lr
 8000710:	fa22 f306 	lsr.w	r3, r2, r6
 8000714:	fa01 f707 	lsl.w	r7, r1, r7
 8000718:	40f1      	lsrs	r1, r6
 800071a:	2600      	movs	r6, #0
 800071c:	431f      	orrs	r7, r3
 800071e:	e9c5 7100 	strd	r7, r1, [r5]
 8000722:	e73c      	b.n	800059e <__udivmoddi4+0x9a>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0020 	rsb	r0, r3, #32
 800072c:	fa01 f203 	lsl.w	r2, r1, r3
 8000730:	fa21 f600 	lsr.w	r6, r1, r0
 8000734:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000738:	fa24 f100 	lsr.w	r1, r4, r0
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	409c      	lsls	r4, r3
 8000742:	4311      	orrs	r1, r2
 8000744:	fbb6 f0fe 	udiv	r0, r6, lr
 8000748:	0c0a      	lsrs	r2, r1, #16
 800074a:	fb0e 6610 	mls	r6, lr, r0, r6
 800074e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000752:	fb00 f607 	mul.w	r6, r0, r7
 8000756:	4296      	cmp	r6, r2
 8000758:	d90e      	bls.n	8000778 <__udivmoddi4+0x274>
 800075a:	eb1c 0202 	adds.w	r2, ip, r2
 800075e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000762:	bf2c      	ite	cs
 8000764:	f04f 0901 	movcs.w	r9, #1
 8000768:	f04f 0900 	movcc.w	r9, #0
 800076c:	4296      	cmp	r6, r2
 800076e:	d902      	bls.n	8000776 <__udivmoddi4+0x272>
 8000770:	f1b9 0f00 	cmp.w	r9, #0
 8000774:	d031      	beq.n	80007da <__udivmoddi4+0x2d6>
 8000776:	4640      	mov	r0, r8
 8000778:	1b92      	subs	r2, r2, r6
 800077a:	b289      	uxth	r1, r1
 800077c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000780:	fb0e 2216 	mls	r2, lr, r6, r2
 8000784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000788:	fb06 f207 	mul.w	r2, r6, r7
 800078c:	428a      	cmp	r2, r1
 800078e:	d907      	bls.n	80007a0 <__udivmoddi4+0x29c>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f106 38ff 	add.w	r8, r6, #4294967295
 8000798:	d201      	bcs.n	800079e <__udivmoddi4+0x29a>
 800079a:	428a      	cmp	r2, r1
 800079c:	d823      	bhi.n	80007e6 <__udivmoddi4+0x2e2>
 800079e:	4646      	mov	r6, r8
 80007a0:	1a89      	subs	r1, r1, r2
 80007a2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007a6:	e725      	b.n	80005f4 <__udivmoddi4+0xf0>
 80007a8:	462e      	mov	r6, r5
 80007aa:	4628      	mov	r0, r5
 80007ac:	e6f7      	b.n	800059e <__udivmoddi4+0x9a>
 80007ae:	1a84      	subs	r4, r0, r2
 80007b0:	eb61 0303 	sbc.w	r3, r1, r3
 80007b4:	2001      	movs	r0, #1
 80007b6:	461f      	mov	r7, r3
 80007b8:	e70b      	b.n	80005d2 <__udivmoddi4+0xce>
 80007ba:	4464      	add	r4, ip
 80007bc:	3802      	subs	r0, #2
 80007be:	e749      	b.n	8000654 <__udivmoddi4+0x150>
 80007c0:	4464      	add	r4, ip
 80007c2:	3802      	subs	r0, #2
 80007c4:	e6e1      	b.n	800058a <__udivmoddi4+0x86>
 80007c6:	3a02      	subs	r2, #2
 80007c8:	4461      	add	r1, ip
 80007ca:	e72e      	b.n	800062a <__udivmoddi4+0x126>
 80007cc:	3e02      	subs	r6, #2
 80007ce:	4462      	add	r2, ip
 80007d0:	e6c6      	b.n	8000560 <__udivmoddi4+0x5c>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4461      	add	r1, ip
 80007d8:	e76f      	b.n	80006ba <__udivmoddi4+0x1b6>
 80007da:	3802      	subs	r0, #2
 80007dc:	4462      	add	r2, ip
 80007de:	e7cb      	b.n	8000778 <__udivmoddi4+0x274>
 80007e0:	3802      	subs	r0, #2
 80007e2:	4461      	add	r1, ip
 80007e4:	e77d      	b.n	80006e2 <__udivmoddi4+0x1de>
 80007e6:	3e02      	subs	r6, #2
 80007e8:	4461      	add	r1, ip
 80007ea:	e7d9      	b.n	80007a0 <__udivmoddi4+0x29c>
 80007ec:	462e      	mov	r6, r5
 80007ee:	e6d6      	b.n	800059e <__udivmoddi4+0x9a>

080007f0 <__aeabi_idiv0>:
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000800:	2334      	movs	r3, #52	; 0x34
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <tx_application_define+0x40>)
 800080a:	490b      	ldr	r1, [pc, #44]	; (8000838 <tx_application_define+0x44>)
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <tx_application_define+0x48>)
 800080e:	f00d fb71 	bl	800def4 <_txe_byte_pool_create>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d109      	bne.n	800082c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <tx_application_define+0x48>)
 800081a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800081c:	68b8      	ldr	r0, [r7, #8]
 800081e:	f000 f80f 	bl	8000840 <App_ThreadX_Init>
 8000822:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800082a:	e7fe      	b.n	800082a <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200001d4 	.word	0x200001d4
 8000838:	08015180 	.word	0x08015180
 800083c:	200005d4 	.word	0x200005d4

08000840 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af08      	add	r7, sp, #32
 8000846:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&menu_task_ptr, "menu_task", menu_task_entry, 0x1234,
 800084c:	23b0      	movs	r3, #176	; 0xb0
 800084e:	9306      	str	r3, [sp, #24]
 8000850:	2301      	movs	r3, #1
 8000852:	9305      	str	r3, [sp, #20]
 8000854:	2301      	movs	r3, #1
 8000856:	9304      	str	r3, [sp, #16]
 8000858:	230f      	movs	r3, #15
 800085a:	9303      	str	r3, [sp, #12]
 800085c:	230f      	movs	r3, #15
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <App_ThreadX_Init+0x90>)
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	f241 2334 	movw	r3, #4660	; 0x1234
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <App_ThreadX_Init+0x94>)
 8000870:	4919      	ldr	r1, [pc, #100]	; (80008d8 <App_ThreadX_Init+0x98>)
 8000872:	481a      	ldr	r0, [pc, #104]	; (80008dc <App_ThreadX_Init+0x9c>)
 8000874:	f00d fe3e 	bl	800e4f4 <_txe_thread_create>
                  menu_task_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);

  tx_thread_create(&debounce_task_ptr, "debounce_task", debounce_task_entry,
 8000878:	23b0      	movs	r3, #176	; 0xb0
 800087a:	9306      	str	r3, [sp, #24]
 800087c:	2301      	movs	r3, #1
 800087e:	9305      	str	r3, [sp, #20]
 8000880:	2301      	movs	r3, #1
 8000882:	9304      	str	r3, [sp, #16]
 8000884:	230e      	movs	r3, #14
 8000886:	9303      	str	r3, [sp, #12]
 8000888:	230e      	movs	r3, #14
 800088a:	9302      	str	r3, [sp, #8]
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <App_ThreadX_Init+0xa0>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	f241 2334 	movw	r3, #4660	; 0x1234
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <App_ThreadX_Init+0xa4>)
 800089c:	4912      	ldr	r1, [pc, #72]	; (80008e8 <App_ThreadX_Init+0xa8>)
 800089e:	4813      	ldr	r0, [pc, #76]	; (80008ec <App_ThreadX_Init+0xac>)
 80008a0:	f00d fe28 	bl	800e4f4 <_txe_thread_create>
                  0x1234, debounce_task_stack, THREAD_STACK_SIZE, 14, 14, 1,
                  TX_AUTO_START);

  tx_semaphore_create(&debounce_semaphore_ptr, "debounce_semaphore", 0);
 80008a4:	231c      	movs	r3, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <App_ThreadX_Init+0xb0>)
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <App_ThreadX_Init+0xb4>)
 80008ac:	f00d fd4a 	bl	800e344 <_txe_semaphore_create>

  tx_queue_create(&event_queue_ptr, "event_queue", sizeof(fm_event_t),
 80008b0:	2338      	movs	r3, #56	; 0x38
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <App_ThreadX_Init+0xb8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	490f      	ldr	r1, [pc, #60]	; (80008fc <App_ThreadX_Init+0xbc>)
 80008c0:	480f      	ldr	r0, [pc, #60]	; (8000900 <App_ThreadX_Init+0xc0>)
 80008c2:	f00d fbb7 	bl	800e034 <_txe_queue_create>
  #ifndef FM_THREADX_LOW_POWER
//      tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE, 30);
  #endif
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000060c 	.word	0x2000060c
 80008d4:	08000a05 	.word	0x08000a05
 80008d8:	08015194 	.word	0x08015194
 80008dc:	2000120c 	.word	0x2000120c
 80008e0:	20000a0c 	.word	0x20000a0c
 80008e4:	08000a49 	.word	0x08000a49
 80008e8:	080151a0 	.word	0x080151a0
 80008ec:	200012bc 	.word	0x200012bc
 80008f0:	080151b0 	.word	0x080151b0
 80008f4:	2000136c 	.word	0x2000136c
 80008f8:	20000e0c 	.word	0x20000e0c
 80008fc:	080151c4 	.word	0x080151c4
 8000900:	20001388 	.word	0x20001388

08000904 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000908:	f00a fd76 	bl	800b3f8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */
#ifdef FM_THREADX_LOW_POWER
  uint32_t ticks_to_sleep;

  g_lptim1_start = LPTIM1->CNT;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <App_ThreadX_LowPower_Timer_Setup+0x44>)
 800091a:	69db      	ldr	r3, [r3, #28]
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <App_ThreadX_LowPower_Timer_Setup+0x48>)
 8000920:	801a      	strh	r2, [r3, #0]
  /*
   * clock_freq/RTC_WAKEUPCLOCK_RTCCLK_DIV16
   */
  ticks_to_sleep = (32768 / 16) * count;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	02db      	lsls	r3, r3, #11
 8000926:	60fb      	str	r3, [r7, #12]
  ticks_to_sleep /= TX_TIMER_TICKS_PER_SECOND;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <App_ThreadX_LowPower_Timer_Setup+0x4c>)
 800092c:	fba2 2303 	umull	r2, r3, r2, r3
 8000930:	095b      	lsrs	r3, r3, #5
 8000932:	60fb      	str	r3, [r7, #12]

#ifdef FM_DEBUG_UART_TX_TIME_ON_IDLE
  fm_debug_uint32_uart(count);
#endif

  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks_to_sleep,
 8000934:	2300      	movs	r3, #0
 8000936:	2200      	movs	r2, #0
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	4809      	ldr	r0, [pc, #36]	; (8000960 <App_ThreadX_LowPower_Timer_Setup+0x50>)
 800093c:	f008 fce6 	bl	800930c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <App_ThreadX_LowPower_Timer_Setup+0x3a>
      RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
  {
    Error_Handler();
 8000946:	f000 fc5f 	bl	8001208 <Error_Handler>
  }

#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	46004400 	.word	0x46004400
 8000958:	20000608 	.word	0x20000608
 800095c:	51eb851f 	.word	0x51eb851f
 8000960:	200014a0 	.word	0x200014a0

08000964 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2180      	movs	r1, #128	; 0x80
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <App_ThreadX_LowPower_Enter+0x18>)
 800096e:	f003 fc93 	bl	8004298 <HAL_GPIO_WritePin>


  #ifdef FM_THREADX_LOW_POWER
  HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 8000972:	2001      	movs	r0, #1
 8000974:	f004 f92e 	bl	8004bd4 <HAL_PWREx_EnterSTOP1Mode>
  #endif

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	42020400 	.word	0x42020400

08000980 <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /*
     * If CPU wakes up other reason but timer flag we must wait until
     * expected time was elapsed. Debugger issues makes wake up CPU earlier
     */
  #ifdef FM_THREADX_LOW_POWER
    SystemClock_Config();
 8000984:	f000 f8d2 	bl	8000b2c <SystemClock_Config>
  #endif

  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <App_ThreadX_LowPower_Exit+0x18>)
 800098e:	f003 fc83 	bl	8004298 <HAL_GPIO_WritePin>

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	42020400 	.word	0x42020400

0800099c <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Adjust */
#ifdef FM_THREADX_LOW_POWER
  static uint16_t cnt_drift = 0;
  ULONG cnt_ret;
  g_lptim1_end = LPTIM1->CNT;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <App_ThreadX_LowPower_Timer_Adjust+0x58>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 80009aa:	801a      	strh	r2, [r3, #0]
  cnt_ret = (g_lptim1_end - g_lptim1_start);
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <App_ThreadX_LowPower_Timer_Adjust+0x60>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	607b      	str	r3, [r7, #4]
  cnt_ret *= TX_TIMER_TICKS_PER_SECOND;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2264      	movs	r2, #100	; 0x64
 80009be:	fb02 f303 	mul.w	r3, r2, r3
 80009c2:	607b      	str	r3, [r7, #4]
  cnt_ret += cnt_drift;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	607b      	str	r3, [r7, #4]
  cnt_drift = cnt_ret % 2048; // 2048 = lptim_clok_frq /  clock_prescaler
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 80009dc:	801a      	strh	r2, [r3, #0]
  cnt_ret /= 2048;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	0adb      	lsrs	r3, r3, #11
 80009e2:	607b      	str	r3, [r7, #4]
  return (cnt_ret);
 80009e4:	687b      	ldr	r3, [r7, #4]
#else
  return (0);
#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	46004400 	.word	0x46004400
 80009f8:	2000060a 	.word	0x2000060a
 80009fc:	20000608 	.word	0x20000608
 8000a00:	200013c0 	.word	0x200013c0

08000a04 <menu_task_entry>:

/* USER CODE BEGIN 1 */
VOID menu_task_entry(ULONG initial_input)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    ptr_fun_menu_t ptr_menu = fm_menu_show_init;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <menu_task_entry+0x3c>)
 8000a0e:	617b      	str	r3, [r7, #20]
    fm_event_t event_next = EVENT_LCD_REFRESH;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73fb      	strb	r3, [r7, #15]
    UINT ret_status;
    while(1)
    {
        ret_status = tx_queue_receive(&event_queue_ptr,&event_next,100);
 8000a14:	f107 030f 	add.w	r3, r7, #15
 8000a18:	2264      	movs	r2, #100	; 0x64
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <menu_task_entry+0x40>)
 8000a1e:	f00d fbd7 	bl	800e1d0 <_txe_queue_receive>
 8000a22:	6138      	str	r0, [r7, #16]
        if(ret_status == TX_SUCCESS)
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d105      	bne.n	8000a36 <menu_task_entry+0x32>
        {
            ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(event_next);
 8000a2a:	7bfa      	ldrb	r2, [r7, #15]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4798      	blx	r3
 8000a32:	6178      	str	r0, [r7, #20]
 8000a34:	e7ee      	b.n	8000a14 <menu_task_entry+0x10>
        }
        else
        {
            ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(EVENT_LCD_REFRESH);
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	2001      	movs	r0, #1
 8000a3a:	4798      	blx	r3
 8000a3c:	6178      	str	r0, [r7, #20]
        ret_status = tx_queue_receive(&event_queue_ptr,&event_next,100);
 8000a3e:	e7e9      	b.n	8000a14 <menu_task_entry+0x10>
 8000a40:	08013ff9 	.word	0x08013ff9
 8000a44:	20001388 	.word	0x20001388

08000a48 <debounce_task_entry>:
        }
    }
}

VOID debounce_task_entry(ULONG initial_input)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
    /*
     * debounce_time*10ms se espera para evitar rebotes.
     */
    const int debounce_time = 14;
 8000a50:	230e      	movs	r3, #14
 8000a52:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);
 8000a54:	f04f 31ff 	mov.w	r1, #4294967295
 8000a58:	4819      	ldr	r0, [pc, #100]	; (8000ac0 <debounce_task_entry+0x78>)
 8000a5a:	f00d fd09 	bl	800e470 <_txe_semaphore_get>

        tx_thread_sleep(debounce_time);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f00c f8f9 	bl	800cc58 <_tx_thread_sleep>

        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a74:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a84:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000a90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a94:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000a98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000aa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa4:	611a      	str	r2, [r3, #16]

        HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000aa6:	2015      	movs	r0, #21
 8000aa8:	f003 fa02 	bl	8003eb0 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000aac:	2016      	movs	r0, #22
 8000aae:	f003 f9ff 	bl	8003eb0 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8000ab2:	2017      	movs	r0, #23
 8000ab4:	f003 f9fc 	bl	8003eb0 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000ab8:	2018      	movs	r0, #24
 8000aba:	f003 f9f9 	bl	8003eb0 <HAL_NVIC_EnableIRQ>
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);
 8000abe:	e7c9      	b.n	8000a54 <debounce_task_entry+0xc>
 8000ac0:	2000136c 	.word	0x2000136c
 8000ac4:	46022000 	.word	0x46022000

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000acc:	f000 febe 	bl	800184c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad0:	f000 f82c 	bl	8000b2c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000ad4:	f000 f886 	bl	8000be4 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad8:	f000 faae 	bl	8001038 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000adc:	f000 f902 	bl	8000ce4 <MX_ICACHE_Init>
  MX_LPTIM1_Init();
 8000ae0:	f000 f914 	bl	8000d0c <MX_LPTIM1_Init>
  MX_RTC_Init();
 8000ae4:	f000 f95e 	bl	8000da4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000ae8:	f000 f9ea 	bl	8000ec0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000aec:	f000 fa58 	bl	8000fa0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000af0:	f000 f88a 	bl	8000c08 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  fm_lcd_clear();
 8000af4:	f00e fe7d 	bl	800f7f2 <fm_lcd_clear>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afc:	2100      	movs	r1, #0
 8000afe:	4808      	ldr	r0, [pc, #32]	; (8000b20 <main+0x58>)
 8000b00:	f002 ff90 	bl	8003a24 <HAL_ADCEx_Calibration_Start>
  __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <main+0x5c>)
 8000b06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b0a:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <main+0x5c>)
 8000b0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
   HAL_LPTIM_Counter_Start(&hlptim1);
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <main+0x60>)
 8000b16:	f003 fd39 	bl	800458c <HAL_LPTIM_Counter_Start>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000b1a:	f7ff fef3 	bl	8000904 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <main+0x56>
 8000b20:	200013c4 	.word	0x200013c4
 8000b24:	46020c00 	.word	0x46020c00
 8000b28:	20001450 	.word	0x20001450

08000b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b09e      	sub	sp, #120	; 0x78
 8000b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 0318 	add.w	r3, r7, #24
 8000b36:	2260      	movs	r2, #96	; 0x60
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f013 fdce 	bl	80146dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	463b      	mov	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
 8000b4e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8000b50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b54:	f003 ff62 	bl	8004a1c <HAL_PWREx_ControlVoltageScaling>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000b5e:	f000 fb53 	bl	8001208 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b62:	f003 ff4b 	bl	80049fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <SystemClock_Config+0xb4>)
 8000b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b6c:	4a1c      	ldr	r2, [pc, #112]	; (8000be0 <SystemClock_Config+0xb4>)
 8000b6e:	f023 0318 	bic.w	r3, r3, #24
 8000b72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000b76:	2316      	movs	r3, #22
 8000b78:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b7a:	2381      	movs	r3, #129	; 0x81
 8000b7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b84:	2310      	movs	r3, #16
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b98:	f107 0318 	add.w	r3, r7, #24
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f004 f875 	bl	8004c8c <HAL_RCC_OscConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ba8:	f000 fb2e 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bac:	231f      	movs	r3, #31
 8000bae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 ff3b 	bl	8005a44 <HAL_RCC_ClockConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000bd4:	f000 fb18 	bl	8001208 <Error_Handler>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	3778      	adds	r7, #120	; 0x78
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	46020c00 	.word	0x46020c00

08000be4 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000be8:	f004 f820 	bl	8004c2c <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bec:	f004 f83e 	bl	8004c6c <HAL_PWREx_DisableUCPDDeadBattery>
/* USER CODE BEGIN PWR */
  HAL_PWREx_EnableVddIO2();
 8000bf0:	f004 f81c 	bl	8004c2c <HAL_PWREx_EnableVddIO2>

  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f003 ff9d 	bl	8004b34 <HAL_PWREx_ConfigSupply>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemPower_Config+0x20>
  {
      Error_Handler();
 8000c00:	f000 fb02 	bl	8001208 <Error_Handler>
  }
/* USER CODE END PWR */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c0e:	463b      	mov	r3, r7
 8000c10:	2220      	movs	r2, #32
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f013 fd61 	bl	80146dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c1a:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c1c:	4a2f      	ldr	r2, [pc, #188]	; (8000cdc <MX_ADC1_Init+0xd4>)
 8000c1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c20:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c22:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c3a:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c40:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000c4e:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c90:	4811      	ldr	r0, [pc, #68]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c92:	f001 f9bf 	bl	8002014 <HAL_ADC_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000c9c:	f000 fab4 	bl	8001208 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_ADC1_Init+0xd8>)
 8000ca2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca4:	2306      	movs	r3, #6
 8000ca6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_391CYCLES_5;
 8000ca8:	2306      	movs	r3, #6
 8000caa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cba:	463b      	mov	r3, r7
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000cc0:	f001 fe0e 	bl	80028e0 <HAL_ADC_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000cca:	f000 fa9d 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	3720      	adds	r7, #32
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200013c4 	.word	0x200013c4
 8000cdc:	42028000 	.word	0x42028000
 8000ce0:	ce080000 	.word	0xce080000

08000ce4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f003 fb1f 	bl	800432c <HAL_ICACHE_ConfigAssociativityMode>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000cf4:	f000 fa88 	bl	8001208 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000cf8:	f003 fb38 	bl	800436c <HAL_ICACHE_Enable>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000d02:	f000 fa81 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000d10:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d12:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <MX_LPTIM1_Init+0x90>)
 8000d14:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d22:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 65535;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d32:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000d52:	4811      	ldr	r0, [pc, #68]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d54:	f003 fb1a 	bl	800438c <HAL_LPTIM_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_LPTIM1_Init+0x56>
  {
    Error_Handler();
 8000d5e:	f000 fa53 	bl	8001208 <Error_Handler>
  /*
   * To run in stop mode the LPBAM low-power backgroung autonomous mode must be
   * configured
   *
   */
  __HAL_RCC_LPTIM1_CLKAM_ENABLE();
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_LPTIM1_Init+0x94>)
 8000d64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d68:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <MX_LPTIM1_Init+0x94>)
 8000d6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d6e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  __HAL_RCC_LPDMA1_CLKAM_ENABLE();
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_LPTIM1_Init+0x94>)
 8000d74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d78:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <MX_LPTIM1_Init+0x94>)
 8000d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  __HAL_RCC_SRAM4_CLKAM_ENABLE();
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MX_LPTIM1_Init+0x94>)
 8000d84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d88:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <MX_LPTIM1_Init+0x94>)
 8000d8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

  /* USER CODE END LPTIM1_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20001450 	.word	0x20001450
 8000d9c:	46004400 	.word	0x46004400
 8000da0:	46020c00 	.word	0x46020c00

08000da4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000dd2:	4b39      	ldr	r3, [pc, #228]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000dd4:	4a39      	ldr	r2, [pc, #228]	; (8000ebc <MX_RTC_Init+0x118>)
 8000dd6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dd8:	4b37      	ldr	r3, [pc, #220]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000dde:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000de0:	227f      	movs	r2, #127	; 0x7f
 8000de2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000de4:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000de6:	22ff      	movs	r2, #255	; 0xff
 8000de8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dea:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000df0:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000df6:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e02:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e10:	4829      	ldr	r0, [pc, #164]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000e12:	f007 ff2f 	bl	8008c74 <HAL_RTC_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000e1c:	f000 f9f4 	bl	8001208 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4820      	ldr	r0, [pc, #128]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000e38:	f008 fb52 	bl	80094e0 <HAL_RTCEx_PrivilegeModeSet>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000e42:	f000 f9e1 	bl	8001208 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 8000e46:	2311      	movs	r3, #17
 8000e48:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000e64:	f007 ff88 	bl	8008d78 <HAL_RTC_SetTime>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000e6e:	f000 f9cb 	bl	8001208 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e72:	2301      	movs	r3, #1
 8000e74:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_MAY;
 8000e76:	2305      	movs	r3, #5
 8000e78:	717b      	strb	r3, [r7, #5]
  sDate.Date = 8;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 23;
 8000e7e:	2317      	movs	r3, #23
 8000e80:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000e8a:	f008 f883 	bl	8008f94 <HAL_RTC_SetDate>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000e94:	f000 f9b8 	bl	8001208 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4096, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000ea2:	f008 fa33 	bl	800930c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8000eac:	f000 f9ac 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3738      	adds	r7, #56	; 0x38
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200014a0 	.word	0x200014a0
 8000ebc:	46007800 	.word	0x46007800

08000ec0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ed0:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000ed2:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <MX_SPI1_Init+0xdc>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed6:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000ed8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000edc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000ede:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000ee0:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000ee4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eec:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000efa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000efe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f1c:	2207      	movs	r2, #7
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f5c:	480e      	ldr	r0, [pc, #56]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f5e:	f008 faed 	bl	800953c <HAL_SPI_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8000f68:	f000 f94e 	bl	8001208 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f74:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f80:	f008 fef9 	bl	8009d76 <HAL_SPIEx_SetConfigAutonomousMode>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8000f8a:	f000 f93d 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200014d0 	.word	0x200014d0
 8000f9c:	40013000 	.word	0x40013000

08000fa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fa6:	4a23      	ldr	r2, [pc, #140]	; (8001034 <MX_USART2_UART_Init+0x94>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe8:	4811      	ldr	r0, [pc, #68]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fea:	f009 faef 	bl	800a5cc <HAL_UART_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ff4:	f000 f908 	bl	8001208 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000ffc:	f009 ffc8 	bl	800af90 <HAL_UARTEx_SetTxFifoThreshold>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001006:	f000 f8ff 	bl	8001208 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100a:	2100      	movs	r1, #0
 800100c:	4808      	ldr	r0, [pc, #32]	; (8001030 <MX_USART2_UART_Init+0x90>)
 800100e:	f009 fffd 	bl	800b00c <HAL_UARTEx_SetRxFifoThreshold>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001018:	f000 f8f6 	bl	8001208 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_USART2_UART_Init+0x90>)
 800101e:	f009 ff7e 	bl	800af1e <HAL_UARTEx_DisableFifoMode>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001028:	f000 f8ee 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20001560 	.word	0x20001560
 8001034:	40004400 	.word	0x40004400

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001054:	4a57      	ldr	r2, [pc, #348]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800105e:	4b55      	ldr	r3, [pc, #340]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800106e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001072:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800107c:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800107e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800108c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001090:	4a48      	ldr	r2, [pc, #288]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800109a:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800109c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a8:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010ae:	4a41      	ldr	r2, [pc, #260]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010b8:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PCF8553_CE_Pin|PCF8553_RESET_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2150      	movs	r1, #80	; 0x50
 80010ca:	483b      	ldr	r0, [pc, #236]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010cc:	f003 f8e4 	bl	8004298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2104      	movs	r1, #4
 80010d4:	4839      	ldr	r0, [pc, #228]	; (80011bc <MX_GPIO_Init+0x184>)
 80010d6:	f003 f8df 	bl	8004298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	4838      	ldr	r0, [pc, #224]	; (80011c0 <MX_GPIO_Init+0x188>)
 80010e0:	f003 f8da 	bl	8004298 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCF8553_CE_Pin PCF8553_RESET_Pin */
  GPIO_InitStruct.Pin = PCF8553_CE_Pin|PCF8553_RESET_Pin;
 80010e4:	2350      	movs	r3, #80	; 0x50
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	482f      	ldr	r0, [pc, #188]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010fc:	f002 fef4 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001106:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <MX_GPIO_Init+0x18c>)
 8001108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	482a      	ldr	r0, [pc, #168]	; (80011c0 <MX_GPIO_Init+0x188>)
 8001116:	f002 fee7 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_red_Pin */
  GPIO_InitStruct.Pin = led_red_Pin;
 800111a:	2304      	movs	r3, #4
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_red_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4822      	ldr	r0, [pc, #136]	; (80011bc <MX_GPIO_Init+0x184>)
 8001132:	f002 fed9 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001136:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <MX_GPIO_Init+0x18c>)
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	481f      	ldr	r0, [pc, #124]	; (80011c8 <MX_GPIO_Init+0x190>)
 800114c:	f002 fecc 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_blue_Pin */
  GPIO_InitStruct.Pin = led_blue_Pin;
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_blue_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4816      	ldr	r0, [pc, #88]	; (80011c0 <MX_GPIO_Init+0x188>)
 8001168:	f002 febe 	bl	8003ee8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI10_IRQn, 5, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2105      	movs	r1, #5
 8001170:	2015      	movs	r0, #21
 8001172:	f002 fe83 	bl	8003e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8001176:	2015      	movs	r0, #21
 8001178:	f002 fe9a 	bl	8003eb0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 5, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2105      	movs	r1, #5
 8001180:	2016      	movs	r0, #22
 8001182:	f002 fe7b 	bl	8003e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8001186:	2016      	movs	r0, #22
 8001188:	f002 fe92 	bl	8003eb0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI12_IRQn, 5, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2105      	movs	r1, #5
 8001190:	2017      	movs	r0, #23
 8001192:	f002 fe73 	bl	8003e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8001196:	2017      	movs	r0, #23
 8001198:	f002 fe8a 	bl	8003eb0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2105      	movs	r1, #5
 80011a0:	2018      	movs	r0, #24
 80011a2:	f002 fe6b 	bl	8003e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80011a6:	2018      	movs	r0, #24
 80011a8:	f002 fe82 	bl	8003eb0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	46020c00 	.word	0x46020c00
 80011b8:	42020000 	.word	0x42020000
 80011bc:	42021800 	.word	0x42021800
 80011c0:	42020400 	.word	0x42020400
 80011c4:	10110000 	.word	0x10110000
 80011c8:	42020800 	.word	0x42020800

080011cc <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */

__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f008 f911 	bl	80093fc <HAL_RTCEx_DeactivateWakeUpTimer>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d101      	bne.n	80011fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011f6:	f000 fb57 	bl	80018a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40001000 	.word	0x40001000

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	2104      	movs	r1, #4
 8001214:	4801      	ldr	r0, [pc, #4]	; (800121c <Error_Handler+0x14>)
 8001216:	f003 f83f 	bl	8004298 <HAL_GPIO_WritePin>
  while (1)
 800121a:	e7fe      	b.n	800121a <Error_Handler+0x12>
 800121c:	42021800 	.word	0x42021800

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_MspInit+0x34>)
 8001228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800122c:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_MspInit+0x34>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_MspInit+0x34>)
 8001238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_PWREx_EnableVddA();
 8001244:	f003 fd02 	bl	8004c4c <HAL_PWREx_EnableVddA>
  HAL_PWREx_EnableVddIO2();
 8001248:	f003 fcf0 	bl	8004c2c <HAL_PWREx_EnableVddIO2>
  /* USER CODE END MspInit 1 */
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	46020c00 	.word	0x46020c00

08001258 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0b6      	sub	sp, #216	; 0xd8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	22c8      	movs	r2, #200	; 0xc8
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f013 fa37 	bl	80146dc <memset>
  if(hadc->Instance==ADC1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <HAL_ADC_MspInit+0x70>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d122      	bne.n	80012be <HAL_ADC_MspInit+0x66>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001278:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001284:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001288:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4618      	mov	r0, r3
 8001292:	f004 ffe5 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 800129c:	f7ff ffb4 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_ADC_MspInit+0x74>)
 80012a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <HAL_ADC_MspInit+0x74>)
 80012a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_ADC_MspInit+0x74>)
 80012b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012be:	bf00      	nop
 80012c0:	37d8      	adds	r7, #216	; 0xd8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	42028000 	.word	0x42028000
 80012cc:	46020c00 	.word	0x46020c00

080012d0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0b6      	sub	sp, #216	; 0xd8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	22c8      	movs	r2, #200	; 0xc8
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f013 f9fb 	bl	80146dc <memset>
  if(hlptim->Instance==LPTIM1)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a19      	ldr	r2, [pc, #100]	; (8001350 <HAL_LPTIM_MspInit+0x80>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d12a      	bne.n	8001346 <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80012f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80012fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4618      	mov	r0, r3
 800130a:	f004 ffa9 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8001314:	f7ff ff78 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_LPTIM_MspInit+0x84>)
 800131a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800131e:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <HAL_LPTIM_MspInit+0x84>)
 8001320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001324:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_LPTIM_MspInit+0x84>)
 800132a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800132e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2043      	movs	r0, #67	; 0x43
 800133c:	f002 fd9e 	bl	8003e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001340:	2043      	movs	r0, #67	; 0x43
 8001342:	f002 fdb5 	bl	8003eb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	37d8      	adds	r7, #216	; 0xd8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	46004400 	.word	0x46004400
 8001354:	46020c00 	.word	0x46020c00

08001358 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0b6      	sub	sp, #216	; 0xd8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	22c8      	movs	r2, #200	; 0xc8
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f013 f9b7 	bl	80146dc <memset>
  if(hrtc->Instance==RTC)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <HAL_RTC_MspInit+0x90>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d132      	bne.n	80013de <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001378:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4618      	mov	r0, r3
 8001392:	f004 ff65 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800139c:	f7ff ff34 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_RTC_MspInit+0x94>)
 80013a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013a6:	4a11      	ldr	r2, [pc, #68]	; (80013ec <HAL_RTC_MspInit+0x94>)
 80013a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_RTC_MspInit+0x94>)
 80013b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80013b6:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <HAL_RTC_MspInit+0x94>)
 80013b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013bc:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_RTC_MspInit+0x94>)
 80013c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80013c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2002      	movs	r0, #2
 80013d4:	f002 fd52 	bl	8003e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80013d8:	2002      	movs	r0, #2
 80013da:	f002 fd69 	bl	8003eb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	37d8      	adds	r7, #216	; 0xd8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	46007800 	.word	0x46007800
 80013ec:	46020c00 	.word	0x46020c00

080013f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0bc      	sub	sp, #240	; 0xf0
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	22c8      	movs	r2, #200	; 0xc8
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f013 f963 	bl	80146dc <memset>
  if(hspi->Instance==SPI1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <HAL_SPI_MspInit+0xc8>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d146      	bne.n	80014ae <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001420:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 800142c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001430:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4618      	mov	r0, r3
 800143a:	f004 ff11 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001444:	f7ff fee0 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <HAL_SPI_MspInit+0xcc>)
 800144a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800144e:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <HAL_SPI_MspInit+0xcc>)
 8001450:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001454:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <HAL_SPI_MspInit+0xcc>)
 800145a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800145e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_SPI_MspInit+0xcc>)
 8001468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800146c:	4a13      	ldr	r2, [pc, #76]	; (80014bc <HAL_SPI_MspInit+0xcc>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_SPI_MspInit+0xcc>)
 8001478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PCF8553_SCL_Pin|PCF8553_SDIO_Pin;
 8001484:	2382      	movs	r3, #130	; 0x82
 8001486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800149c:	2305      	movs	r3, #5
 800149e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_SPI_MspInit+0xd0>)
 80014aa:	f002 fd1d 	bl	8003ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	37f0      	adds	r7, #240	; 0xf0
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40013000 	.word	0x40013000
 80014bc:	46020c00 	.word	0x46020c00
 80014c0:	42020000 	.word	0x42020000

080014c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b0bc      	sub	sp, #240	; 0xf0
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	22c8      	movs	r2, #200	; 0xc8
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f013 f8f9 	bl	80146dc <memset>
  if(huart->Instance==USART2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a26      	ldr	r2, [pc, #152]	; (8001588 <HAL_UART_MspInit+0xc4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d144      	bne.n	800157e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014f4:	f04f 0202 	mov.w	r2, #2
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001500:	2300      	movs	r3, #0
 8001502:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4618      	mov	r0, r3
 800150a:	f004 fea9 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001514:	f7ff fe78 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_UART_MspInit+0xc8>)
 800151a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800151e:	4a1b      	ldr	r2, [pc, #108]	; (800158c <HAL_UART_MspInit+0xc8>)
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_UART_MspInit+0xc8>)
 800152a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_UART_MspInit+0xc8>)
 8001538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800153c:	4a13      	ldr	r2, [pc, #76]	; (800158c <HAL_UART_MspInit+0xc8>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_UART_MspInit+0xc8>)
 8001548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001554:	230c      	movs	r3, #12
 8001556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800156c:	2307      	movs	r3, #7
 800156e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <HAL_UART_MspInit+0xcc>)
 800157a:	f002 fcb5 	bl	8003ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	37f0      	adds	r7, #240	; 0xf0
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40004400 	.word	0x40004400
 800158c:	46020c00 	.word	0x46020c00
 8001590:	42020000 	.word	0x42020000

08001594 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08e      	sub	sp, #56	; 0x38
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015a4:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <HAL_InitTick+0xcc>)
 80015a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015aa:	4a2d      	ldr	r2, [pc, #180]	; (8001660 <HAL_InitTick+0xcc>)
 80015ac:	f043 0310 	orr.w	r3, r3, #16
 80015b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80015b4:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <HAL_InitTick+0xcc>)
 80015b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015c2:	f107 0210 	add.w	r2, r7, #16
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f004 fd89 	bl	80060e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015d2:	f004 fd4b 	bl	800606c <HAL_RCC_GetPCLK1Freq>
 80015d6:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015da:	4a22      	ldr	r2, [pc, #136]	; (8001664 <HAL_InitTick+0xd0>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	0c9b      	lsrs	r3, r3, #18
 80015e2:	3b01      	subs	r3, #1
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <HAL_InitTick+0xd4>)
 80015e8:	4a20      	ldr	r2, [pc, #128]	; (800166c <HAL_InitTick+0xd8>)
 80015ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <HAL_InitTick+0xd4>)
 80015ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015f4:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <HAL_InitTick+0xd4>)
 80015f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_InitTick+0xd4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_InitTick+0xd4>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001606:	4818      	ldr	r0, [pc, #96]	; (8001668 <HAL_InitTick+0xd4>)
 8001608:	f008 fbf6 	bl	8009df8 <HAL_TIM_Base_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8001612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001616:	2b00      	cmp	r3, #0
 8001618:	d118      	bne.n	800164c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800161a:	4813      	ldr	r0, [pc, #76]	; (8001668 <HAL_InitTick+0xd4>)
 800161c:	f008 fc4e 	bl	8009ebc <HAL_TIM_Base_Start_IT>
 8001620:	4603      	mov	r3, r0
 8001622:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001626:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10e      	bne.n	800164c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d808      	bhi.n	8001646 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	2031      	movs	r0, #49	; 0x31
 800163a:	f002 fc1f 	bl	8003e7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800163e:	4a0c      	ldr	r2, [pc, #48]	; (8001670 <HAL_InitTick+0xdc>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	e002      	b.n	800164c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800164c:	2031      	movs	r0, #49	; 0x31
 800164e:	f002 fc2f 	bl	8003eb0 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001652:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001656:	4618      	mov	r0, r3
 8001658:	3738      	adds	r7, #56	; 0x38
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	46020c00 	.word	0x46020c00
 8001664:	431bde83 	.word	0x431bde83
 8001668:	200015f4 	.word	0x200015f4
 800166c:	40001000 	.word	0x40001000
 8001670:	20000004 	.word	0x20000004

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <NMI_Handler+0x4>

0800167a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <RTC_IRQHandler+0x10>)
 80016a6:	f007 ff01 	bl	80094ac <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200014a0 	.word	0x200014a0

080016b4 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80016b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016bc:	f002 fe04 	bl	80042c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80016c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016cc:	f002 fdfc 	bl	80042c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <EXTI12_IRQHandler>:

/**
  * @brief This function handles EXTI Line12 interrupt.
  */
void EXTI12_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI12_IRQn 0 */

  /* USER CODE END EXTI12_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80016d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016dc:	f002 fdf4 	bl	80042c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI12_IRQn 1 */

  /* USER CODE END EXTI12_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016ec:	f002 fdec 	bl	80042c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <TIM6_IRQHandler+0x10>)
 80016fa:	f008 fc7f 	bl	8009ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200015f4 	.word	0x200015f4

08001708 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <LPTIM1_IRQHandler+0x10>)
 800170e:	f002 ff71 	bl	80045f4 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20001450 	.word	0x20001450

0800171c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001724:	4a14      	ldr	r2, [pc, #80]	; (8001778 <_sbrk+0x5c>)
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <_sbrk+0x60>)
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <_sbrk+0x64>)
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <_sbrk+0x68>)
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d207      	bcs.n	800175c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800174c:	f012 ff9c 	bl	8014688 <__errno>
 8001750:	4603      	mov	r3, r0
 8001752:	220c      	movs	r2, #12
 8001754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	e009      	b.n	8001770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <_sbrk+0x64>)
 800176c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200c0000 	.word	0x200c0000
 800177c:	00000400 	.word	0x00000400
 8001780:	20001640 	.word	0x20001640
 8001784:	20001e60 	.word	0x20001e60

08001788 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800178c:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <SystemInit+0x68>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001792:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <SystemInit+0x68>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <SystemInit+0x6c>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <SystemInit+0x6c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <SystemInit+0x6c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <SystemInit+0x6c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <SystemInit+0x6c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <SystemInit+0x6c>)
 80017ba:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80017be:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80017c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <SystemInit+0x6c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <SystemInit+0x6c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <SystemInit+0x6c>)
 80017d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <SystemInit+0x6c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <SystemInit+0x68>)
 80017de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017e2:	609a      	str	r2, [r3, #8]
  #endif
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00
 80017f4:	46020c00 	.word	0x46020c00

080017f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001830 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017fc:	f7ff ffc4 	bl	8001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001800:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001802:	e003      	b.n	800180c <LoopCopyDataInit>

08001804 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001806:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001808:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800180a:	3104      	adds	r1, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800180c:	480a      	ldr	r0, [pc, #40]	; (8001838 <LoopForever+0xa>)
	ldr	r3, =_edata
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001810:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001812:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001814:	d3f6      	bcc.n	8001804 <CopyDataInit>
	ldr	r2, =_sbss
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001818:	e002      	b.n	8001820 <LoopFillZerobss>

0800181a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800181a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800181c:	f842 3b04 	str.w	r3, [r2], #4

08001820 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <LoopForever+0x16>)
	cmp	r2, r3
 8001822:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001824:	d3f9      	bcc.n	800181a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001826:	f012 ff35 	bl	8014694 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800182a:	f7ff f94d 	bl	8000ac8 <main>

0800182e <LoopForever>:

LoopForever:
    b LoopForever
 800182e:	e7fe      	b.n	800182e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001830:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001834:	0801564c 	.word	0x0801564c
	ldr	r0, =_sdata
 8001838:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800183c:	200001b8 	.word	0x200001b8
	ldr	r2, =_sbss
 8001840:	200001b8 	.word	0x200001b8
	ldr	r3, = _ebss
 8001844:	20001e59 	.word	0x20001e59

08001848 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC1_IRQHandler>
	...

0800184c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_Init+0x4c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a10      	ldr	r2, [pc, #64]	; (8001898 <HAL_Init+0x4c>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f002 fb02 	bl	8003e66 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001862:	f004 fae1 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8001866:	4602      	mov	r2, r0
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_Init+0x50>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f003 030f 	and.w	r3, r3, #15
 8001870:	490b      	ldr	r1, [pc, #44]	; (80018a0 <HAL_Init+0x54>)
 8001872:	5ccb      	ldrb	r3, [r1, r3]
 8001874:	fa22 f303 	lsr.w	r3, r2, r3
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_Init+0x58>)
 800187a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800187c:	200f      	movs	r0, #15
 800187e:	f7ff fe89 	bl	8001594 <HAL_InitTick>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e002      	b.n	8001892 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800188c:	f7ff fcc8 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000
 800189c:	46020c00 	.word	0x46020c00
 80018a0:	080153ec 	.word	0x080153ec
 80018a4:	20000000 	.word	0x20000000

080018a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20001644 	.word	0x20001644

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20001644 	.word	0x20001644

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff ffee 	bl	80018d0 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffde 	bl	80018d0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008

08001930 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <HAL_GetREVID+0x18>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0c1b      	lsrs	r3, r3, #16
 800193a:	b29b      	uxth	r3, r3
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e0044000 	.word	0xe0044000

0800194c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	601a      	str	r2, [r3, #0]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <LL_ADC_SetResolution+0x3c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d104      	bne.n	80019d4 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f023 020c 	bic.w	r2, r3, #12
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	60da      	str	r2, [r3, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	46021000 	.word	0x46021000

080019f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3360      	adds	r3, #96	; 0x60
 8001a06:	461a      	mov	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	430b      	orrs	r3, r1
 8001a24:	431a      	orrs	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001a2a:	bf00      	nop
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3360      	adds	r3, #96	; 0x60
 8001a44:	461a      	mov	r2, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b087      	sub	sp, #28
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	3360      	adds	r3, #96	; 0x60
 8001a72:	461a      	mov	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	601a      	str	r2, [r3, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	371c      	adds	r7, #28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3360      	adds	r3, #96	; 0x60
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	601a      	str	r2, [r3, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b087      	sub	sp, #28
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3360      	adds	r3, #96	; 0x60
 8001ade:	461a      	mov	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	601a      	str	r2, [r3, #0]
}
 8001af8:	bf00      	nop
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b12:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	2a00      	cmp	r2, #0
 8001b2e:	d002      	beq.n	8001b36 <LL_ADC_SetGainCompensation+0x32>
 8001b30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b34:	e000      	b.n	8001b38 <LL_ADC_SetGainCompensation+0x34>
 8001b36:	2200      	movs	r2, #0
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b085      	sub	sp, #20
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2107      	movs	r1, #7
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	431a      	orrs	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a2b      	ldr	r2, [pc, #172]	; (8001c6c <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d020      	beq.n	8001c06 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3330      	adds	r3, #48	; 0x30
 8001bc8:	461a      	mov	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	4413      	add	r3, r2
 8001bd6:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	211f      	movs	r1, #31
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	401a      	ands	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	0e9b      	lsrs	r3, r3, #26
 8001bf0:	f003 011f 	and.w	r1, r3, #31
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001c04:	e02b      	b.n	8001c5e <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	210f      	movs	r1, #15
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	401a      	ands	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d104      	bne.n	8001c2e <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	0e9b      	lsrs	r3, r3, #26
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	e010      	b.n	8001c50 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 8001c44:	2320      	movs	r3, #32
 8001c46:	e003      	b.n	8001c50 <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	f001 011f 	and.w	r1, r1, #31
 8001c56:	408b      	lsls	r3, r1
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c5e:	bf00      	nop
 8001c60:	3724      	adds	r7, #36	; 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	46021000 	.word	0x46021000

08001c70 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d107      	bne.n	8001c94 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	0e9b      	lsrs	r3, r3, #26
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	e015      	b.n	8001cc0 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	60fb      	str	r3, [r7, #12]
  return result;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001caa:	2320      	movs	r3, #32
 8001cac:	e003      	b.n	8001cb6 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	2201      	movs	r2, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	0e9b      	lsrs	r3, r3, #26
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	2101      	movs	r1, #1
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b08b      	sub	sp, #44	; 0x2c
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4a2d      	ldr	r2, [pc, #180]	; (8001dcc <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d042      	beq.n	8001da2 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d104      	bne.n	8001d30 <LL_ADC_SetChannelSamplingTime+0x28>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	0e9b      	lsrs	r3, r3, #26
 8001d2a:	f003 021f 	and.w	r2, r3, #31
 8001d2e:	e011      	b.n	8001d54 <LL_ADC_SetChannelSamplingTime+0x4c>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	617b      	str	r3, [r7, #20]
  return result;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001d46:	2320      	movs	r3, #32
 8001d48:	e003      	b.n	8001d52 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	0e5b      	lsrs	r3, r3, #25
 8001d58:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	1ad2      	subs	r2, r2, r3
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3314      	adds	r3, #20
 8001d72:	461a      	mov	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	0e5b      	lsrs	r3, r3, #25
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	4413      	add	r3, r2
 8001d80:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2107      	movs	r1, #7
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	401a      	ands	r2, r3
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001da0:	e00e      	b.n	8001dc0 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	0219      	lsls	r1, r3, #8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	400b      	ands	r3, r1
 8001db6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	615a      	str	r2, [r3, #20]
}
 8001dc0:	bf00      	nop
 8001dc2:	372c      	adds	r7, #44	; 0x2c
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	46021000 	.word	0x46021000

08001dd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0318 	and.w	r3, r3, #24
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001df4:	40d9      	lsrs	r1, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	400b      	ands	r3, r1
 8001dfa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	000fffff 	.word	0x000fffff

08001e18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6093      	str	r3, [r2, #8]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e50:	d101      	bne.n	8001e56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ea0:	d101      	bne.n	8001ea6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ec4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ef0:	f043 0202 	orr.w	r2, r3, #2
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <LL_ADC_IsEnabled+0x18>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <LL_ADC_IsEnabled+0x1a>
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d101      	bne.n	8001f42 <LL_ADC_IsDisableOngoing+0x18>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_ADC_IsDisableOngoing+0x1a>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f64:	f043 0204 	orr.w	r2, r3, #4
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f8c:	f043 0210 	orr.w	r2, r3, #16
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d101      	bne.n	8001fb8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fda:	f043 0220 	orr.w	r2, r3, #32
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d101      	bne.n	8002006 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e2b3      	b.n	800259c <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a8b      	ldr	r2, [pc, #556]	; (8002270 <HAL_ADC_Init+0x25c>)
 8002042:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002048:	2b00      	cmp	r3, #0
 800204a:	d109      	bne.n	8002060 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff f903 	bl	8001258 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fee9 	bl	8001e3c <LL_ADC_IsDeepPowerDownEnabled>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d004      	beq.n	800207a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fecf 	bl	8001e18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff04 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d115      	bne.n	80020b6 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fee8 	bl	8001e64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002094:	4b77      	ldr	r3, [pc, #476]	; (8002274 <HAL_ADC_Init+0x260>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	099b      	lsrs	r3, r3, #6
 800209a:	4a77      	ldr	r2, [pc, #476]	; (8002278 <HAL_ADC_Init+0x264>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	099b      	lsrs	r3, r3, #6
 80020a2:	3301      	adds	r3, #1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020a8:	e002      	b.n	80020b0 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fee6 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10e      	bne.n	80020e4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020ca:	f043 0210 	orr.w	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020d6:	f043 0201 	orr.w	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff59 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 80020ee:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f040 8244 	bne.w	8002586 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	f040 8240 	bne.w	8002586 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800210a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800210e:	f043 0202 	orr.w	r2, r3, #2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fef2 	bl	8001f04 <LL_ADC_IsEnabled>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d140      	bne.n	80021a8 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a51      	ldr	r2, [pc, #324]	; (8002270 <HAL_ADC_Init+0x25c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d028      	beq.n	8002182 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a51      	ldr	r2, [pc, #324]	; (800227c <HAL_ADC_Init+0x268>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d109      	bne.n	800214e <HAL_ADC_Init+0x13a>
 800213a:	4850      	ldr	r0, [pc, #320]	; (800227c <HAL_ADC_Init+0x268>)
 800213c:	f7ff fee2 	bl	8001f04 <LL_ADC_IsEnabled>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	bf0c      	ite	eq
 8002146:	2301      	moveq	r3, #1
 8002148:	2300      	movne	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	e008      	b.n	8002160 <HAL_ADC_Init+0x14c>
 800214e:	4848      	ldr	r0, [pc, #288]	; (8002270 <HAL_ADC_Init+0x25c>)
 8002150:	f7ff fed8 	bl	8001f04 <LL_ADC_IsEnabled>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d021      	beq.n	80021a8 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a44      	ldr	r2, [pc, #272]	; (800227c <HAL_ADC_Init+0x268>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_ADC_Init+0x15e>
 800216e:	4a44      	ldr	r2, [pc, #272]	; (8002280 <HAL_ADC_Init+0x26c>)
 8002170:	e000      	b.n	8002174 <HAL_ADC_Init+0x160>
 8002172:	4a44      	ldr	r2, [pc, #272]	; (8002284 <HAL_ADC_Init+0x270>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4619      	mov	r1, r3
 800217a:	4610      	mov	r0, r2
 800217c:	f7ff fbe6 	bl	800194c <LL_ADC_SetCommonClock>
 8002180:	e012      	b.n	80021a8 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4619      	mov	r1, r3
 800218c:	4610      	mov	r0, r2
 800218e:	f7ff fc11 	bl	80019b4 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002192:	4b3c      	ldr	r3, [pc, #240]	; (8002284 <HAL_ADC_Init+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021a2:	4938      	ldr	r1, [pc, #224]	; (8002284 <HAL_ADC_Init+0x270>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a30      	ldr	r2, [pc, #192]	; (8002270 <HAL_ADC_Init+0x25c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d010      	beq.n	80021d4 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b8:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80021be:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80021c4:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80021cc:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80021ce:	4313      	orrs	r3, r2
 80021d0:	623b      	str	r3, [r7, #32]
 80021d2:	e030      	b.n	8002236 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7f1b      	ldrb	r3, [r3, #28]
 80021d8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021e0:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021e2:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_ADC_Init+0x1de>
 80021ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021f0:	e000      	b.n	80021f4 <HAL_ADC_Init+0x1e0>
 80021f2:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021f4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80021fa:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	da04      	bge.n	800220e <HAL_ADC_Init+0x1fa>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800220c:	e001      	b.n	8002212 <HAL_ADC_Init+0x1fe>
 800220e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8002212:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4918      	ldr	r1, [pc, #96]	; (800227c <HAL_ADC_Init+0x268>)
 800221a:	428b      	cmp	r3, r1
 800221c:	d103      	bne.n	8002226 <HAL_ADC_Init+0x212>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002224:	e003      	b.n	800222e <HAL_ADC_Init+0x21a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800222c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800222e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002230:	6a3a      	ldr	r2, [r7, #32]
 8002232:	4313      	orrs	r3, r2
 8002234:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800223c:	2b01      	cmp	r3, #1
 800223e:	d12f      	bne.n	80022a0 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <HAL_ADC_Init+0x25c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d007      	beq.n	800225a <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	3b01      	subs	r3, #1
 8002250:	045b      	lsls	r3, r3, #17
 8002252:	6a3a      	ldr	r2, [r7, #32]
 8002254:	4313      	orrs	r3, r2
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	e022      	b.n	80022a0 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002260:	2b00      	cmp	r3, #0
 8002262:	d111      	bne.n	8002288 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226a:	623b      	str	r3, [r7, #32]
 800226c:	e018      	b.n	80022a0 <HAL_ADC_Init+0x28c>
 800226e:	bf00      	nop
 8002270:	46021000 	.word	0x46021000
 8002274:	20000000 	.word	0x20000000
 8002278:	053e2d63 	.word	0x053e2d63
 800227c:	42028000 	.word	0x42028000
 8002280:	42028308 	.word	0x42028308
 8002284:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800228c:	f043 0220 	orr.w	r2, r3, #32
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a92      	ldr	r2, [pc, #584]	; (80024f0 <HAL_ADC_Init+0x4dc>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d018      	beq.n	80022dc <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	4313      	orrs	r3, r2
 80022c0:	6a3a      	ldr	r2, [r7, #32]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	4b89      	ldr	r3, [pc, #548]	; (80024f4 <HAL_ADC_Init+0x4e0>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	6a39      	ldr	r1, [r7, #32]
 80022d6:	430b      	orrs	r3, r1
 80022d8:	60d3      	str	r3, [r2, #12]
 80022da:	e031      	b.n	8002340 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d009      	beq.n	80022f8 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e8:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	4313      	orrs	r3, r2
 80022f2:	6a3a      	ldr	r2, [r7, #32]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	4b7e      	ldr	r3, [pc, #504]	; (80024f8 <HAL_ADC_Init+0x4e4>)
 8002300:	4013      	ands	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	6a39      	ldr	r1, [r7, #32]
 8002308:	430b      	orrs	r3, r1
 800230a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1a      	ldr	r2, [r3, #32]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6a      	ldr	r2, [pc, #424]	; (80024f0 <HAL_ADC_Init+0x4dc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	f000 8093 	beq.w	8002472 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fe25 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 8002356:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fe46 	bl	8001fee <LL_ADC_INJ_IsConversionOngoing>
 8002362:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d161      	bne.n	800242e <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d15e      	bne.n	800242e <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	7f1b      	ldrb	r3, [r3, #28]
 8002374:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4960      	ldr	r1, [pc, #384]	; (80024fc <HAL_ADC_Init+0x4e8>)
 800237c:	428b      	cmp	r3, r1
 800237e:	d102      	bne.n	8002386 <HAL_ADC_Init+0x372>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002384:	e002      	b.n	800238c <HAL_ADC_Init+0x378>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800238c:	4313      	orrs	r3, r2
 800238e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800239a:	f023 0303 	bic.w	r3, r3, #3
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	6a39      	ldr	r1, [r7, #32]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4619      	mov	r1, r3
 80023ba:	4610      	mov	r0, r2
 80023bc:	f7ff fba2 	bl	8001b04 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d11e      	bne.n	8002408 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ce:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <HAL_ADC_Init+0x4ec>)
 80023d8:	4013      	ands	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80023de:	0411      	lsls	r1, r2, #16
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023e4:	4311      	orrs	r1, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80023ea:	4311      	orrs	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80023f0:	4311      	orrs	r1, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023f6:	0892      	lsrs	r2, r2, #2
 80023f8:	430a      	orrs	r2, r1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	611a      	str	r2, [r3, #16]
 8002406:	e007      	b.n	8002418 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d10c      	bne.n	8002450 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	f023 010f 	bic.w	r1, r3, #15
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	1e5a      	subs	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
 800244e:	e007      	b.n	8002460 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 020f 	bic.w	r2, r2, #15
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002464:	f023 0303 	bic.w	r3, r3, #3
 8002468:	f043 0201 	orr.w	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002470:	e092      	b.n	8002598 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002478:	2b01      	cmp	r3, #1
 800247a:	d111      	bne.n	80024a0 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002484:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 800248a:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002490:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	4313      	orrs	r3, r2
 8002496:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	4b17      	ldr	r3, [pc, #92]	; (8002504 <HAL_ADC_Init+0x4f0>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	69f9      	ldr	r1, [r7, #28]
 80024b0:	430b      	orrs	r3, r1
 80024b2:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024bc:	461a      	mov	r2, r3
 80024be:	2100      	movs	r1, #0
 80024c0:	f7ff fb43 	bl	8001b4a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024cc:	461a      	mov	r2, r3
 80024ce:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 80024d2:	f7ff fb3a 	bl	8001b4a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d114      	bne.n	8002508 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f062 020f 	orn	r2, r2, #15
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28
 80024ee:	e024      	b.n	800253a <HAL_ADC_Init+0x526>
 80024f0:	46021000 	.word	0x46021000
 80024f4:	fff0c013 	.word	0xfff0c013
 80024f8:	ffde800d 	.word	0xffde800d
 80024fc:	42028000 	.word	0x42028000
 8002500:	fc00f81e 	.word	0xfc00f81e
 8002504:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002510:	d113      	bne.n	800253a <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	3b01      	subs	r3, #1
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	f003 031c 	and.w	r3, r3, #28
 8002524:	f06f 020f 	mvn.w	r2, #15
 8002528:	fa02 f103 	lsl.w	r1, r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <HAL_ADC_Init+0x590>)
 8002542:	4013      	ands	r3, r2
 8002544:	6a3a      	ldr	r2, [r7, #32]
 8002546:	429a      	cmp	r2, r3
 8002548:	d10b      	bne.n	8002562 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002554:	f023 0303 	bic.w	r3, r3, #3
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002560:	e01a      	b.n	8002598 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002566:	f023 0312 	bic.w	r3, r3, #18
 800256a:	f043 0210 	orr.w	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002584:	e008      	b.n	8002598 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800258a:	f043 0210 	orr.w	r2, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800259c:	4618      	mov	r0, r3
 800259e:	3728      	adds	r7, #40	; 0x28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	833ffff3 	.word	0x833ffff3

080025a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fcf3 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d15d      	bne.n	800267c <HAL_ADC_Start+0xd4>
  {
    __HAL_LOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_Start+0x26>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e059      	b.n	8002682 <HAL_ADC_Start+0xda>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f001 f916 	bl	8003808 <ADC_Enable>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d145      	bne.n	8002672 <HAL_ADC_Start+0xca>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025ee:	f023 0301 	bic.w	r3, r3, #1
 80025f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a23      	ldr	r2, [pc, #140]	; (800268c <HAL_ADC_Start+0xe4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d011      	beq.n	8002628 <HAL_ADC_Start+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800260c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002610:	d106      	bne.n	8002620 <HAL_ADC_Start+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002616:	f023 0206 	bic.w	r2, r3, #6
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	67da      	str	r2, [r3, #124]	; 0x7c
 800261e:	e006      	b.n	800262e <HAL_ADC_Start+0x86>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	67da      	str	r2, [r3, #124]	; 0x7c
 8002626:	e002      	b.n	800262e <HAL_ADC_Start+0x86>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	221c      	movs	r2, #28
 8002634:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <HAL_ADC_Start+0xe4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00e      	beq.n	8002666 <HAL_ADC_Start+0xbe>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }

        }
#else
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <HAL_ADC_Start+0xbe>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800265a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800265e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fc70 	bl	8001f50 <LL_ADC_REG_StartConversion>
 8002670:	e006      	b.n	8002680 <HAL_ADC_Start+0xd8>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800267a:	e001      	b.n	8002680 <HAL_ADC_Start+0xd8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800267c:	2302      	movs	r3, #2
 800267e:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	46021000 	.word	0x46021000

08002690 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_Stop+0x16>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e023      	b.n	80026ee <HAL_ADC_Stop+0x5e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80026ae:	2103      	movs	r1, #3
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 ffed 	bl	8003690 <ADC_ConversionStop>
 80026b6:	4603      	mov	r3, r0
 80026b8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d111      	bne.n	80026e4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f001 f911 	bl	80038e8 <ADC_Disable>
 80026c6:	4603      	mov	r3, r0
 80026c8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	f043 0201 	orr.w	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b08      	cmp	r3, #8
 8002708:	d102      	bne.n	8002710 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800270a:	2308      	movs	r3, #8
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	e027      	b.n	8002760 <HAL_ADC_PollForConversion+0x68>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a6a      	ldr	r2, [pc, #424]	; (80028c0 <HAL_ADC_PollForConversion+0x1c8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d011      	beq.n	800273e <HAL_ADC_PollForConversion+0x46>
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <HAL_ADC_PollForConversion+0x40>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800272c:	f043 0220 	orr.w	r2, r3, #32
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0be      	b.n	80028b6 <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8002738:	2304      	movs	r3, #4
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	e010      	b.n	8002760 <HAL_ADC_PollForConversion+0x68>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <HAL_ADC_PollForConversion+0x64>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002750:	f043 0220 	orr.w	r2, r3, #32
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0ac      	b.n	80028b6 <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 800275c:	2304      	movs	r3, #4
 800275e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002760:	f7ff f8b6 	bl	80018d0 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002766:	e021      	b.n	80027ac <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d01d      	beq.n	80027ac <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002770:	f7ff f8ae 	bl	80018d0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d302      	bcc.n	8002786 <HAL_ADC_PollForConversion+0x8e>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d112      	bne.n	80027ac <HAL_ADC_PollForConversion+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10b      	bne.n	80027ac <HAL_ADC_PollForConversion+0xb4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002798:	f043 0204 	orr.w	r2, r3, #4
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e084      	b.n	80028b6 <HAL_ADC_PollForConversion+0x1be>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0d6      	beq.n	8002768 <HAL_ADC_PollForConversion+0x70>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff f9dc 	bl	8001b88 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d06e      	beq.n	80028b4 <HAL_ADC_PollForConversion+0x1bc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d169      	bne.n	80028b4 <HAL_ADC_PollForConversion+0x1bc>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a36      	ldr	r2, [pc, #216]	; (80028c0 <HAL_ADC_PollForConversion+0x1c8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d02e      	beq.n	8002848 <HAL_ADC_PollForConversion+0x150>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d111      	bne.n	800281c <HAL_ADC_PollForConversion+0x124>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d105      	bne.n	800281c <HAL_ADC_PollForConversion+0x124>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002814:	f043 0201 	orr.w	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	679a      	str	r2, [r3, #120]	; 0x78
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b08      	cmp	r3, #8
 8002828:	d104      	bne.n	8002834 <HAL_ADC_PollForConversion+0x13c>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2208      	movs	r2, #8
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e03f      	b.n	80028b4 <HAL_ADC_PollForConversion+0x1bc>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d13a      	bne.n	80028b4 <HAL_ADC_PollForConversion+0x1bc>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	220c      	movs	r2, #12
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	e035      	b.n	80028b4 <HAL_ADC_PollForConversion+0x1bc>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b08      	cmp	r3, #8
 8002854:	d126      	bne.n	80028a4 <HAL_ADC_PollForConversion+0x1ac>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fba0 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d112      	bne.n	800288c <HAL_ADC_PollForConversion+0x194>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 020c 	bic.w	r2, r2, #12
 8002874:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800287e:	f023 0301 	bic.w	r3, r3, #1
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	679a      	str	r2, [r3, #120]	; 0x78
 800288a:	e00b      	b.n	80028a4 <HAL_ADC_PollForConversion+0x1ac>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	7f1b      	ldrb	r3, [r3, #28]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d103      	bne.n	80028b4 <HAL_ADC_PollForConversion+0x1bc>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	220c      	movs	r2, #12
 80028b2:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	46021000 	.word	0x46021000

080028c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b0bc      	sub	sp, #240	; 0xf0
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4aa8      	ldr	r2, [pc, #672]	; (8002b9c <HAL_ADC_ConfigChannel+0x2bc>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d103      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800290c:	2b01      	cmp	r3, #1
 800290e:	d102      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x36>
 8002910:	2302      	movs	r3, #2
 8002912:	f000 beb5 	b.w	8003680 <HAL_ADC_ConfigChannel+0xda0>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fb3c 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 8695 	bne.w	800365a <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a99      	ldr	r2, [pc, #612]	; (8002b9c <HAL_ADC_ConfigChannel+0x2bc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	f000 83ea 	beq.w	8003110 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d108      	bne.n	800295a <HAL_ADC_ConfigChannel+0x7a>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0e9b      	lsrs	r3, r3, #26
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	2201      	movs	r2, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	e01d      	b.n	8002996 <HAL_ADC_ConfigChannel+0xb6>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return result;
 800296e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (value == 0U)
 8002976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800297e:	2320      	movs	r3, #32
 8002980:	e004      	b.n	800298c <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2201      	movs	r2, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	69d1      	ldr	r1, [r2, #28]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f7ff f8fd 	bl	8001bb0 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff faf0 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 80029c0:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fb10 	bl	8001fee <LL_ADC_INJ_IsConversionOngoing>
 80029ce:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 81ed 	bne.w	8002db6 <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f040 81e8 	bne.w	8002db6 <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f7ff f988 	bl	8001d08 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d046      	beq.n	8002aa8 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6919      	ldr	r1, [r3, #16]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a2a:	f7fe ffe3 	bl	80019f4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6919      	ldr	r1, [r3, #16]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f7ff f811 	bl	8001a62 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	7e9b      	ldrb	r3, [r3, #26]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d11e      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x17e>
 8002a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a5c:	e000      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x180>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	461a      	mov	r2, r3
 8002a62:	f7ff f834 	bl	8001ace <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d102      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x19c>
 8002a76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a7a:	e000      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x19e>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f7ff f80a 	bl	8001a98 <LL_ADC_SetOffsetSignedSaturation>
 8002a84:	e197      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	4619      	mov	r1, r3
 8002a92:	f7ff f81c 	bl	8001ace <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f7fe fff9 	bl	8001a98 <LL_ADC_SetOffsetSignedSaturation>
 8002aa6:	e186      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2100      	movs	r1, #0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe ffc1 	bl	8001a36 <LL_ADC_GetOffsetChannel>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10a      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x1f4>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe ffb6 	bl	8001a36 <LL_ADC_GetOffsetChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	0e9b      	lsrs	r3, r3, #26
 8002ace:	f003 021f 	and.w	r2, r3, #31
 8002ad2:	e01e      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x232>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe ffab 	bl	8001a36 <LL_ADC_GetOffsetChannel>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return result;
 8002af2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002af6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (value == 0U)
 8002afa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002b02:	2320      	movs	r3, #32
 8002b04:	e004      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002b06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d105      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x24a>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	0e9b      	lsrs	r3, r3, #26
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	e018      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x27c>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002b3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002b46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002b4e:	2320      	movs	r3, #32
 8002b50:	e004      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002b52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d107      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	f7fe ff42 	bl	80019f4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2101      	movs	r1, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe ff5d 	bl	8001a36 <LL_ADC_GetOffsetChannel>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10c      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x2c0>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe ff52 	bl	8001a36 <LL_ADC_GetOffsetChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	0e9b      	lsrs	r3, r3, #26
 8002b96:	f003 021f 	and.w	r2, r3, #31
 8002b9a:	e020      	b.n	8002bde <HAL_ADC_ConfigChannel+0x2fe>
 8002b9c:	46021000 	.word	0x46021000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe ff45 	bl	8001a36 <LL_ADC_GetOffsetChannel>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002bbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002bc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002bce:	2320      	movs	r3, #32
 8002bd0:	e004      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002bd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x316>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	0e9b      	lsrs	r3, r3, #26
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	e018      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x348>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002c0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002c12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8002c1a:	2320      	movs	r3, #32
 8002c1c:	e004      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002c1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d107      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2300      	movs	r3, #0
 8002c36:	2101      	movs	r1, #1
 8002c38:	f7fe fedc 	bl	80019f4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2102      	movs	r1, #2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe fef7 	bl	8001a36 <LL_ADC_GetOffsetChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10a      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x388>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2102      	movs	r1, #2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe feec 	bl	8001a36 <LL_ADC_GetOffsetChannel>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	0e9b      	lsrs	r3, r3, #26
 8002c62:	f003 021f 	and.w	r2, r3, #31
 8002c66:	e01e      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x3c6>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe fee1 	bl	8001a36 <LL_ADC_GetOffsetChannel>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002c86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002c8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002c96:	2320      	movs	r3, #32
 8002c98:	e004      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002c9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x3de>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	0e9b      	lsrs	r3, r3, #26
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	e018      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x410>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002cd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	e004      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8002ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d107      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2102      	movs	r1, #2
 8002d00:	f7fe fe78 	bl	80019f4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2103      	movs	r1, #3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fe93 	bl	8001a36 <LL_ADC_GetOffsetChannel>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10a      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x450>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2103      	movs	r1, #3
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe fe88 	bl	8001a36 <LL_ADC_GetOffsetChannel>
 8002d26:	4603      	mov	r3, r0
 8002d28:	0e9b      	lsrs	r3, r3, #26
 8002d2a:	f003 021f 	and.w	r2, r3, #31
 8002d2e:	e01a      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x486>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2103      	movs	r1, #3
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe fe7d 	bl	8001a36 <LL_ADC_GetOffsetChannel>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8002d56:	2320      	movs	r3, #32
 8002d58:	e004      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8002d5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d105      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x49e>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	0e9b      	lsrs	r3, r3, #26
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	e011      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x4c2>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 8002d96:	2320      	movs	r3, #32
 8002d98:	e003      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8002d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d107      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	2300      	movs	r3, #0
 8002db0:	2103      	movs	r1, #3
 8002db2:	f7fe fe1f 	bl	80019f4 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff f8a2 	bl	8001f04 <LL_ADC_IsEnabled>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 8456 	bne.w	8003674 <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f7fe fffb 	bl	8001dd0 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002de2:	f040 80d6 	bne.w	8002f92 <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10b      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x52a>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	0e9b      	lsrs	r3, r3, #26
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	2b09      	cmp	r3, #9
 8002e00:	bf94      	ite	ls
 8002e02:	2301      	movls	r3, #1
 8002e04:	2300      	movhi	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	e019      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x55e>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e1a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8002e22:	2320      	movs	r3, #32
 8002e24:	e003      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8002e26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	2b09      	cmp	r3, #9
 8002e36:	bf94      	ite	ls
 8002e38:	2301      	movls	r3, #1
 8002e3a:	2300      	movhi	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d04d      	beq.n	8002ede <HAL_ADC_ConfigChannel+0x5fe>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d107      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x57e>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	0e9b      	lsrs	r3, r3, #26
 8002e54:	3301      	adds	r3, #1
 8002e56:	069b      	lsls	r3, r3, #26
 8002e58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e5c:	e015      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x5aa>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 8002e76:	2320      	movs	r3, #32
 8002e78:	e003      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 8002e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	069b      	lsls	r3, r3, #26
 8002e86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x5ca>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	e017      	b.n	8002eda <HAL_ADC_ConfigChannel+0x5fa>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eba:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	e003      	b.n	8002ece <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 8002ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	4313      	orrs	r3, r2
 8002edc:	e04e      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x69c>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x61a>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	0e9b      	lsrs	r3, r3, #26
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	069b      	lsls	r3, r3, #26
 8002ef4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ef8:	e015      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x646>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 8002f12:	2320      	movs	r3, #32
 8002f14:	e003      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 8002f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	069b      	lsls	r3, r3, #26
 8002f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x666>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	0e9b      	lsrs	r3, r3, #26
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2101      	movs	r1, #1
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	e017      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x696>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 8002f5e:	2320      	movs	r3, #32
 8002f60:	e003      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 8002f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002f8e:	f7fe febb 	bl	8001d08 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f280 836c 	bge.w	8003674 <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a97      	ldr	r2, [pc, #604]	; (8003200 <HAL_ADC_ConfigChannel+0x920>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x6ca>
 8002fa6:	4b97      	ldr	r3, [pc, #604]	; (8003204 <HAL_ADC_ConfigChannel+0x924>)
 8002fa8:	e000      	b.n	8002fac <HAL_ADC_ConfigChannel+0x6cc>
 8002faa:	4b97      	ldr	r3, [pc, #604]	; (8003208 <HAL_ADC_ConfigChannel+0x928>)
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fe fcf3 	bl	8001998 <LL_ADC_GetCommonPathInternalCh>
 8002fb2:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a91      	ldr	r2, [pc, #580]	; (8003200 <HAL_ADC_ConfigChannel+0x920>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d109      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x6f4>
 8002fc0:	488f      	ldr	r0, [pc, #572]	; (8003200 <HAL_ADC_ConfigChannel+0x920>)
 8002fc2:	f7fe ff9f 	bl	8001f04 <LL_ADC_IsEnabled>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e008      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x706>
 8002fd4:	488d      	ldr	r0, [pc, #564]	; (800320c <HAL_ADC_ConfigChannel+0x92c>)
 8002fd6:	f7fe ff95 	bl	8001f04 <LL_ADC_IsEnabled>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8088 	beq.w	80030fc <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a87      	ldr	r2, [pc, #540]	; (8003210 <HAL_ADC_ConfigChannel+0x930>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d132      	bne.n	800305c <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d12c      	bne.n	800305c <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a7e      	ldr	r2, [pc, #504]	; (8003200 <HAL_ADC_ConfigChannel+0x920>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d005      	beq.n	8003018 <HAL_ADC_ConfigChannel+0x738>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a7e      	ldr	r2, [pc, #504]	; (800320c <HAL_ADC_ConfigChannel+0x92c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	f040 832b 	bne.w	800366e <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a78      	ldr	r2, [pc, #480]	; (8003200 <HAL_ADC_ConfigChannel+0x920>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d101      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x746>
 8003022:	4a78      	ldr	r2, [pc, #480]	; (8003204 <HAL_ADC_ConfigChannel+0x924>)
 8003024:	e000      	b.n	8003028 <HAL_ADC_ConfigChannel+0x748>
 8003026:	4a78      	ldr	r2, [pc, #480]	; (8003208 <HAL_ADC_ConfigChannel+0x928>)
 8003028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f7fe fc9d 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003038:	4b76      	ldr	r3, [pc, #472]	; (8003214 <HAL_ADC_ConfigChannel+0x934>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	4a76      	ldr	r2, [pc, #472]	; (8003218 <HAL_ADC_ConfigChannel+0x938>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	3301      	adds	r3, #1
 8003048:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 800304a:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800304c:	e002      	b.n	8003054 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	3b01      	subs	r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f9      	bne.n	800304e <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800305a:	e308      	b.n	800366e <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6e      	ldr	r2, [pc, #440]	; (800321c <HAL_ADC_ConfigChannel+0x93c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d121      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11b      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a62      	ldr	r2, [pc, #392]	; (8003200 <HAL_ADC_ConfigChannel+0x920>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d005      	beq.n	8003088 <HAL_ADC_ConfigChannel+0x7a8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a62      	ldr	r2, [pc, #392]	; (800320c <HAL_ADC_ConfigChannel+0x92c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	f040 82f5 	bne.w	8003672 <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a5c      	ldr	r2, [pc, #368]	; (8003200 <HAL_ADC_ConfigChannel+0x920>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d101      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x7b6>
 8003092:	4a5c      	ldr	r2, [pc, #368]	; (8003204 <HAL_ADC_ConfigChannel+0x924>)
 8003094:	e000      	b.n	8003098 <HAL_ADC_ConfigChannel+0x7b8>
 8003096:	4a5c      	ldr	r2, [pc, #368]	; (8003208 <HAL_ADC_ConfigChannel+0x928>)
 8003098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f7fe fc65 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030a8:	e2e3      	b.n	8003672 <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a5c      	ldr	r2, [pc, #368]	; (8003220 <HAL_ADC_ConfigChannel+0x940>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	f040 82df 	bne.w	8003674 <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f040 82d8 	bne.w	8003674 <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a4d      	ldr	r2, [pc, #308]	; (8003200 <HAL_ADC_ConfigChannel+0x920>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d005      	beq.n	80030da <HAL_ADC_ConfigChannel+0x7fa>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a4e      	ldr	r2, [pc, #312]	; (800320c <HAL_ADC_ConfigChannel+0x92c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	f040 82cd 	bne.w	8003674 <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a48      	ldr	r2, [pc, #288]	; (8003200 <HAL_ADC_ConfigChannel+0x920>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x808>
 80030e4:	4a47      	ldr	r2, [pc, #284]	; (8003204 <HAL_ADC_ConfigChannel+0x924>)
 80030e6:	e000      	b.n	80030ea <HAL_ADC_ConfigChannel+0x80a>
 80030e8:	4a47      	ldr	r2, [pc, #284]	; (8003208 <HAL_ADC_ConfigChannel+0x928>)
 80030ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030f2:	4619      	mov	r1, r3
 80030f4:	4610      	mov	r0, r2
 80030f6:	f7fe fc3c 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
 80030fa:	e2bb      	b.n	8003674 <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800310e:	e2b1      	b.n	8003674 <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 8003118:	f7fe fc0a 	bl	8001930 <HAL_GetREVID>
 800311c:	4603      	mov	r3, r0
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	d130      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a3e      	ldr	r2, [pc, #248]	; (8003224 <HAL_ADC_ConfigChannel+0x944>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d103      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 800312e:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <HAL_ADC_ConfigChannel+0x948>)
 8003130:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003134:	e027      	b.n	8003186 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a3c      	ldr	r2, [pc, #240]	; (800322c <HAL_ADC_ConfigChannel+0x94c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d103      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003140:	4b3b      	ldr	r3, [pc, #236]	; (8003230 <HAL_ADC_ConfigChannel+0x950>)
 8003142:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003146:	e01e      	b.n	8003186 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a39      	ldr	r2, [pc, #228]	; (8003234 <HAL_ADC_ConfigChannel+0x954>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d103      	bne.n	800315a <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 8003152:	4b39      	ldr	r3, [pc, #228]	; (8003238 <HAL_ADC_ConfigChannel+0x958>)
 8003154:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003158:	e015      	b.n	8003186 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a37      	ldr	r2, [pc, #220]	; (800323c <HAL_ADC_ConfigChannel+0x95c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d103      	bne.n	800316c <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003164:	4b36      	ldr	r3, [pc, #216]	; (8003240 <HAL_ADC_ConfigChannel+0x960>)
 8003166:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800316a:	e00c      	b.n	8003186 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a34      	ldr	r2, [pc, #208]	; (8003244 <HAL_ADC_ConfigChannel+0x964>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d103      	bne.n	800317e <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003176:	4b31      	ldr	r3, [pc, #196]	; (800323c <HAL_ADC_ConfigChannel+0x95c>)
 8003178:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800317c:	e003      	b.n	8003186 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b02      	cmp	r3, #2
 800318c:	f000 81a2 	beq.w	80034d4 <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003198:	d004      	beq.n	80031a4 <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800319e:	4a2a      	ldr	r2, [pc, #168]	; (8003248 <HAL_ADC_ConfigChannel+0x968>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d107      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fe fd5f 	bl	8001c70 <LL_ADC_REG_SetSequencerChAdd>
 80031b2:	e0c1      	b.n	8003338 <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 031f 	and.w	r3, r3, #31
 80031c2:	210f      	movs	r1, #15
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	401a      	ands	r2, r3
 80031cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x904>
 80031d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031dc:	0e9b      	lsrs	r3, r3, #26
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	e037      	b.n	8003254 <HAL_ADC_ConfigChannel+0x974>
 80031e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80031f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d127      	bne.n	800324c <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 80031fc:	2320      	movs	r3, #32
 80031fe:	e029      	b.n	8003254 <HAL_ADC_ConfigChannel+0x974>
 8003200:	42028000 	.word	0x42028000
 8003204:	42028308 	.word	0x42028308
 8003208:	46021308 	.word	0x46021308
 800320c:	46021000 	.word	0x46021000
 8003210:	ce080000 	.word	0xce080000
 8003214:	20000000 	.word	0x20000000
 8003218:	053e2d63 	.word	0x053e2d63
 800321c:	ca040000 	.word	0xca040000
 8003220:	80000001 	.word	0x80000001
 8003224:	b6002000 	.word	0xb6002000
 8003228:	da400000 	.word	0xda400000
 800322c:	ba004000 	.word	0xba004000
 8003230:	de800000 	.word	0xde800000
 8003234:	b2001000 	.word	0xb2001000
 8003238:	81000001 	.word	0x81000001
 800323c:	d6200000 	.word	0xd6200000
 8003240:	d2100000 	.word	0xd2100000
 8003244:	d7200000 	.word	0xd7200000
 8003248:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	6839      	ldr	r1, [r7, #0]
 8003256:	6849      	ldr	r1, [r1, #4]
 8003258:	f001 011f 	and.w	r1, r1, #31
 800325c:	408b      	lsls	r3, r1
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	429a      	cmp	r2, r3
 8003274:	d860      	bhi.n	8003338 <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003276:	f7fe fb5b 	bl	8001930 <HAL_GetREVID>
 800327a:	4603      	mov	r3, r0
 800327c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003280:	d851      	bhi.n	8003326 <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8003282:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003286:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x9c4>
 800328e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003292:	0e9b      	lsrs	r3, r3, #26
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2b13      	cmp	r3, #19
 800329a:	bf8c      	ite	hi
 800329c:	2301      	movhi	r3, #1
 800329e:	2300      	movls	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e016      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x9f2>
 80032a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	fa93 f3a3 	rbit	r3, r3
 80032b0:	61bb      	str	r3, [r7, #24]
  return result;
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 80032bc:	2320      	movs	r3, #32
 80032be:	e003      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b13      	cmp	r3, #19
 80032ca:	bf8c      	ite	hi
 80032cc:	2301      	movhi	r3, #1
 80032ce:	2300      	movls	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d027      	beq.n	8003326 <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 80032d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0xa16>
 80032e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032e6:	0e9b      	lsrs	r3, r3, #26
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	3b09      	subs	r3, #9
 80032ee:	2201      	movs	r2, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	e015      	b.n	8003322 <HAL_ADC_ConfigChannel+0xa42>
 80032f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	60fb      	str	r3, [r7, #12]
  return result;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 800330e:	2320      	movs	r3, #32
 8003310:	e003      	b.n	800331a <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	3b09      	subs	r3, #9
 800331c:	2201      	movs	r2, #1
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003332:	4619      	mov	r1, r3
 8003334:	f7fe fc3c 	bl	8001bb0 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	461a      	mov	r2, r3
 8003342:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003346:	f7fe fcdf 	bl	8001d08 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f280 8190 	bge.w	8003674 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a97      	ldr	r2, [pc, #604]	; (80035b8 <HAL_ADC_ConfigChannel+0xcd8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d101      	bne.n	8003362 <HAL_ADC_ConfigChannel+0xa82>
 800335e:	4b97      	ldr	r3, [pc, #604]	; (80035bc <HAL_ADC_ConfigChannel+0xcdc>)
 8003360:	e000      	b.n	8003364 <HAL_ADC_ConfigChannel+0xa84>
 8003362:	4b97      	ldr	r3, [pc, #604]	; (80035c0 <HAL_ADC_ConfigChannel+0xce0>)
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe fb17 	bl	8001998 <LL_ADC_GetCommonPathInternalCh>
 800336a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a94      	ldr	r2, [pc, #592]	; (80035c4 <HAL_ADC_ConfigChannel+0xce4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d126      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d120      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a8b      	ldr	r2, [pc, #556]	; (80035b8 <HAL_ADC_ConfigChannel+0xcd8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <HAL_ADC_ConfigChannel+0xab2>
 800338e:	4a8b      	ldr	r2, [pc, #556]	; (80035bc <HAL_ADC_ConfigChannel+0xcdc>)
 8003390:	e000      	b.n	8003394 <HAL_ADC_ConfigChannel+0xab4>
 8003392:	4a8b      	ldr	r2, [pc, #556]	; (80035c0 <HAL_ADC_ConfigChannel+0xce0>)
 8003394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003398:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800339c:	4619      	mov	r1, r3
 800339e:	4610      	mov	r0, r2
 80033a0:	f7fe fae7 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80033a4:	4b88      	ldr	r3, [pc, #544]	; (80035c8 <HAL_ADC_ConfigChannel+0xce8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	4a88      	ldr	r2, [pc, #544]	; (80035cc <HAL_ADC_ConfigChannel+0xcec>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80033b6:	e002      	b.n	80033be <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f9      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80033c4:	e067      	b.n	8003496 <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a81      	ldr	r2, [pc, #516]	; (80035d0 <HAL_ADC_ConfigChannel+0xcf0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d116      	bne.n	80033fe <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d110      	bne.n	80033fe <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a75      	ldr	r2, [pc, #468]	; (80035b8 <HAL_ADC_ConfigChannel+0xcd8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <HAL_ADC_ConfigChannel+0xb0a>
 80033e6:	4a75      	ldr	r2, [pc, #468]	; (80035bc <HAL_ADC_ConfigChannel+0xcdc>)
 80033e8:	e000      	b.n	80033ec <HAL_ADC_ConfigChannel+0xb0c>
 80033ea:	4a75      	ldr	r2, [pc, #468]	; (80035c0 <HAL_ADC_ConfigChannel+0xce0>)
 80033ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f7fe fabb 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
 80033fc:	e04b      	b.n	8003496 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a74      	ldr	r2, [pc, #464]	; (80035d4 <HAL_ADC_ConfigChannel+0xcf4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d116      	bne.n	8003436 <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800340c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d110      	bne.n	8003436 <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a67      	ldr	r2, [pc, #412]	; (80035b8 <HAL_ADC_ConfigChannel+0xcd8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d101      	bne.n	8003422 <HAL_ADC_ConfigChannel+0xb42>
 800341e:	4a67      	ldr	r2, [pc, #412]	; (80035bc <HAL_ADC_ConfigChannel+0xcdc>)
 8003420:	e000      	b.n	8003424 <HAL_ADC_ConfigChannel+0xb44>
 8003422:	4a67      	ldr	r2, [pc, #412]	; (80035c0 <HAL_ADC_ConfigChannel+0xce0>)
 8003424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003428:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f7fe fa9f 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
 8003434:	e02f      	b.n	8003496 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a67      	ldr	r2, [pc, #412]	; (80035d8 <HAL_ADC_ConfigChannel+0xcf8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d12a      	bne.n	8003496 <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d124      	bne.n	8003496 <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a62      	ldr	r2, [pc, #392]	; (80035dc <HAL_ADC_ConfigChannel+0xcfc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d11f      	bne.n	8003496 <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a57      	ldr	r2, [pc, #348]	; (80035b8 <HAL_ADC_ConfigChannel+0xcd8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d101      	bne.n	8003464 <HAL_ADC_ConfigChannel+0xb84>
 8003460:	4a56      	ldr	r2, [pc, #344]	; (80035bc <HAL_ADC_ConfigChannel+0xcdc>)
 8003462:	e000      	b.n	8003466 <HAL_ADC_ConfigChannel+0xb86>
 8003464:	4a56      	ldr	r2, [pc, #344]	; (80035c0 <HAL_ADC_ConfigChannel+0xce0>)
 8003466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800346e:	4619      	mov	r1, r3
 8003470:	4610      	mov	r0, r2
 8003472:	f7fe fa7e 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003476:	f7fe fa5b 	bl	8001930 <HAL_GetREVID>
 800347a:	4603      	mov	r3, r0
 800347c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003480:	d809      	bhi.n	8003496 <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8003496:	f7fe fa4b 	bl	8001930 <HAL_GetREVID>
 800349a:	4603      	mov	r3, r0
 800349c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a0:	f040 80e8 	bne.w	8003674 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a4d      	ldr	r2, [pc, #308]	; (80035e0 <HAL_ADC_ConfigChannel+0xd00>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	f040 80e2 	bne.w	8003674 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f040 80db 	bne.w	8003674 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80034d2:	e0cf      	b.n	8003674 <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034dc:	d004      	beq.n	80034e8 <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80034e2:	4a40      	ldr	r2, [pc, #256]	; (80035e4 <HAL_ADC_ConfigChannel+0xd04>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d106      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fe fbf0 	bl	8001cd6 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f280 80ba 	bge.w	8003674 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a2c      	ldr	r2, [pc, #176]	; (80035b8 <HAL_ADC_ConfigChannel+0xcd8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <HAL_ADC_ConfigChannel+0xc2e>
 800350a:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <HAL_ADC_ConfigChannel+0xcdc>)
 800350c:	e000      	b.n	8003510 <HAL_ADC_ConfigChannel+0xc30>
 800350e:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <HAL_ADC_ConfigChannel+0xce0>)
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe fa41 	bl	8001998 <LL_ADC_GetCommonPathInternalCh>
 8003516:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a32      	ldr	r2, [pc, #200]	; (80035e8 <HAL_ADC_ConfigChannel+0xd08>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d110      	bne.n	8003546 <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a23      	ldr	r2, [pc, #140]	; (80035b8 <HAL_ADC_ConfigChannel+0xcd8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d101      	bne.n	8003532 <HAL_ADC_ConfigChannel+0xc52>
 800352e:	4a23      	ldr	r2, [pc, #140]	; (80035bc <HAL_ADC_ConfigChannel+0xcdc>)
 8003530:	e000      	b.n	8003534 <HAL_ADC_ConfigChannel+0xc54>
 8003532:	4a23      	ldr	r2, [pc, #140]	; (80035c0 <HAL_ADC_ConfigChannel+0xce0>)
 8003534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003538:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f7fe fa17 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
 8003544:	e06d      	b.n	8003622 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a28      	ldr	r2, [pc, #160]	; (80035ec <HAL_ADC_ConfigChannel+0xd0c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d110      	bne.n	8003572 <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <HAL_ADC_ConfigChannel+0xcd8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d101      	bne.n	800355e <HAL_ADC_ConfigChannel+0xc7e>
 800355a:	4a18      	ldr	r2, [pc, #96]	; (80035bc <HAL_ADC_ConfigChannel+0xcdc>)
 800355c:	e000      	b.n	8003560 <HAL_ADC_ConfigChannel+0xc80>
 800355e:	4a18      	ldr	r2, [pc, #96]	; (80035c0 <HAL_ADC_ConfigChannel+0xce0>)
 8003560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003564:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f7fe fa01 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
 8003570:	e057      	b.n	8003622 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <HAL_ADC_ConfigChannel+0xcf4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d110      	bne.n	800359e <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0d      	ldr	r2, [pc, #52]	; (80035b8 <HAL_ADC_ConfigChannel+0xcd8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <HAL_ADC_ConfigChannel+0xcaa>
 8003586:	4a0d      	ldr	r2, [pc, #52]	; (80035bc <HAL_ADC_ConfigChannel+0xcdc>)
 8003588:	e000      	b.n	800358c <HAL_ADC_ConfigChannel+0xcac>
 800358a:	4a0d      	ldr	r2, [pc, #52]	; (80035c0 <HAL_ADC_ConfigChannel+0xce0>)
 800358c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003590:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f7fe f9eb 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
 800359c:	e041      	b.n	8003622 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a0d      	ldr	r2, [pc, #52]	; (80035d8 <HAL_ADC_ConfigChannel+0xcf8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d13c      	bne.n	8003622 <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a02      	ldr	r2, [pc, #8]	; (80035b8 <HAL_ADC_ConfigChannel+0xcd8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d11e      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0xd10>
 80035b2:	4a02      	ldr	r2, [pc, #8]	; (80035bc <HAL_ADC_ConfigChannel+0xcdc>)
 80035b4:	e01d      	b.n	80035f2 <HAL_ADC_ConfigChannel+0xd12>
 80035b6:	bf00      	nop
 80035b8:	42028000 	.word	0x42028000
 80035bc:	42028308 	.word	0x42028308
 80035c0:	46021308 	.word	0x46021308
 80035c4:	b6002000 	.word	0xb6002000
 80035c8:	20000000 	.word	0x20000000
 80035cc:	053e2d63 	.word	0x053e2d63
 80035d0:	ba004000 	.word	0xba004000
 80035d4:	80000001 	.word	0x80000001
 80035d8:	b2001000 	.word	0xb2001000
 80035dc:	46021000 	.word	0x46021000
 80035e0:	d7200000 	.word	0xd7200000
 80035e4:	80000010 	.word	0x80000010
 80035e8:	ce080000 	.word	0xce080000
 80035ec:	ca040000 	.word	0xca040000
 80035f0:	4a25      	ldr	r2, [pc, #148]	; (8003688 <HAL_ADC_ConfigChannel+0xda8>)
 80035f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80035fa:	4619      	mov	r1, r3
 80035fc:	4610      	mov	r0, r2
 80035fe:	f7fe f9b8 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003602:	f7fe f995 	bl	8001930 <HAL_GetREVID>
 8003606:	4603      	mov	r3, r0
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360c:	d809      	bhi.n	8003622 <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8003622:	f7fe f985 	bl	8001930 <HAL_GetREVID>
 8003626:	4603      	mov	r3, r0
 8003628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800362c:	d122      	bne.n	8003674 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a16      	ldr	r2, [pc, #88]	; (800368c <HAL_ADC_ConfigChannel+0xdac>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d11d      	bne.n	8003674 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800363c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d117      	bne.n	8003674 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8003658:	e00c      	b.n	8003674 <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800366c:	e002      	b.n	8003674 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003672:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 800367c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8003680:	4618      	mov	r0, r3
 8003682:	37f0      	adds	r7, #240	; 0xf0
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	46021308 	.word	0x46021308
 800368c:	d7200000 	.word	0xd7200000

08003690 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe fc7a 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 80036ac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe fc9b 	bl	8001fee <LL_ADC_INJ_IsConversionOngoing>
 80036b8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d103      	bne.n	80036c8 <ADC_ConversionStop+0x38>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8099 	beq.w	80037fa <ADC_ConversionStop+0x16a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d02b      	beq.n	800372e <ADC_ConversionStop+0x9e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d126      	bne.n	800372e <ADC_ConversionStop+0x9e>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	7f1b      	ldrb	r3, [r3, #28]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d122      	bne.n	800372e <ADC_ConversionStop+0x9e>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80036e8:	2301      	movs	r3, #1
 80036ea:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80036ec:	e014      	b.n	8003718 <ADC_ConversionStop+0x88>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4a44      	ldr	r2, [pc, #272]	; (8003804 <ADC_ConversionStop+0x174>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d90d      	bls.n	8003712 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036fa:	f043 0210 	orr.w	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e074      	b.n	80037fc <ADC_ConversionStop+0x16c>
        }
        conversion_timeout_cpu_cycles++;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3301      	adds	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d1e3      	bne.n	80036ee <ADC_ConversionStop+0x5e>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2240      	movs	r2, #64	; 0x40
 800372c:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d014      	beq.n	800375e <ADC_ConversionStop+0xce>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f7fe fc31 	bl	8001fa0 <LL_ADC_REG_IsConversionOngoing>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00c      	beq.n	800375e <ADC_ConversionStop+0xce>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe fbee 	bl	8001f2a <LL_ADC_IsDisableOngoing>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d104      	bne.n	800375e <ADC_ConversionStop+0xce>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fc0d 	bl	8001f78 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d014      	beq.n	800378e <ADC_ConversionStop+0xfe>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7fe fc40 	bl	8001fee <LL_ADC_INJ_IsConversionOngoing>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00c      	beq.n	800378e <ADC_ConversionStop+0xfe>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe fbd6 	bl	8001f2a <LL_ADC_IsDisableOngoing>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d104      	bne.n	800378e <ADC_ConversionStop+0xfe>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe fc1c 	bl	8001fc6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d005      	beq.n	80037a0 <ADC_ConversionStop+0x110>
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d105      	bne.n	80037a6 <ADC_ConversionStop+0x116>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800379a:	230c      	movs	r3, #12
 800379c:	617b      	str	r3, [r7, #20]
        break;
 800379e:	e005      	b.n	80037ac <ADC_ConversionStop+0x11c>
      case ADC_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 80037a0:	2308      	movs	r3, #8
 80037a2:	617b      	str	r3, [r7, #20]
        break;
 80037a4:	e002      	b.n	80037ac <ADC_ConversionStop+0x11c>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 80037a6:	2304      	movs	r3, #4
 80037a8:	617b      	str	r3, [r7, #20]
        break;
 80037aa:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80037ac:	f7fe f890 	bl	80018d0 <HAL_GetTick>
 80037b0:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80037b2:	e01b      	b.n	80037ec <ADC_ConversionStop+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80037b4:	f7fe f88c 	bl	80018d0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d914      	bls.n	80037ec <ADC_ConversionStop+0x15c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00d      	beq.n	80037ec <ADC_ConversionStop+0x15c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d4:	f043 0210 	orr.w	r2, r3, #16
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e0:	f043 0201 	orr.w	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e007      	b.n	80037fc <ADC_ConversionStop+0x16c>
    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1dc      	bne.n	80037b4 <ADC_ConversionStop+0x124>
        }
      }
    }
  }

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3720      	adds	r7, #32
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	000cdbff 	.word	0x000cdbff

08003808 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe fb75 	bl	8001f04 <LL_ADC_IsEnabled>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d15a      	bne.n	80038d6 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	4b2e      	ldr	r3, [pc, #184]	; (80038e0 <ADC_Enable+0xd8>)
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003832:	f043 0210 	orr.w	r2, r3, #16
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e046      	b.n	80038d8 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe fb2c 	bl	8001eb4 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <ADC_Enable+0x66>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <ADC_Enable+0xdc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d033      	beq.n	80038d6 <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800386e:	f7fe f82f 	bl	80018d0 <HAL_GetTick>
 8003872:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003874:	e028      	b.n	80038c8 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe fb42 	bl	8001f04 <LL_ADC_IsEnabled>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d104      	bne.n	8003890 <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe fb12 	bl	8001eb4 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003890:	f7fe f81e 	bl	80018d0 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d914      	bls.n	80038c8 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d00d      	beq.n	80038c8 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b0:	f043 0210 	orr.w	r2, r3, #16
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038bc:	f043 0201 	orr.w	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e007      	b.n	80038d8 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d1cf      	bne.n	8003876 <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	8000003f 	.word	0x8000003f
 80038e4:	46021000 	.word	0x46021000

080038e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fe fb18 	bl	8001f2a <LL_ADC_IsDisableOngoing>
 80038fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f7fe faff 	bl	8001f04 <LL_ADC_IsEnabled>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d047      	beq.n	800399c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d144      	bne.n	800399c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 030d 	and.w	r3, r3, #13
 800391c:	2b01      	cmp	r3, #1
 800391e:	d10c      	bne.n	800393a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fad9 	bl	8001edc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2203      	movs	r2, #3
 8003930:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003932:	f7fd ffcd 	bl	80018d0 <HAL_GetTick>
 8003936:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003938:	e029      	b.n	800398e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800393e:	f043 0210 	orr.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	679a      	str	r2, [r3, #120]	; 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	67da      	str	r2, [r3, #124]	; 0x7c
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e023      	b.n	800399e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003956:	f7fd ffbb 	bl	80018d0 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d914      	bls.n	800398e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00d      	beq.n	800398e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003976:	f043 0210 	orr.w	r2, r3, #16
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003982:	f043 0201 	orr.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e007      	b.n	800399e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1dc      	bne.n	8003956 <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <LL_ADC_StartCalibration>:
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a0f      	ldr	r2, [pc, #60]	; (80039f4 <LL_ADC_StartCalibration+0x4c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00c      	beq.n	80039d4 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <LL_ADC_StartCalibration+0x50>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]
}
 80039d2:	e009      	b.n	80039e8 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	609a      	str	r2, [r3, #8]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	46021000 	.word	0x46021000
 80039f8:	7ffeffc0 	.word	0x7ffeffc0

080039fc <LL_ADC_IsCalibrationOnGoing>:
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a10:	d101      	bne.n	8003a16 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	; 0x28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_ADCEx_Calibration_Start+0x1e>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e133      	b.n	8003caa <HAL_ADCEx_Calibration_Start+0x286>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f7ff ff4c 	bl	80038e8 <ADC_Disable>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003a56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f040 8119 	bne.w	8003c92 <HAL_ADCEx_Calibration_Start+0x26e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a68:	f023 0302 	bic.w	r3, r3, #2
 8003a6c:	f043 0202 	orr.w	r2, r3, #2
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	679a      	str	r2, [r3, #120]	; 0x78

    if (hadc->Instance == ADC4)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a8e      	ldr	r2, [pc, #568]	; (8003cb4 <HAL_ADCEx_Calibration_Start+0x290>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d150      	bne.n	8003b20 <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0203 	bic.w	r2, r2, #3
 8003aa4:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ff73 	bl	80039a8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ac2:	e014      	b.n	8003aee <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4a7a      	ldr	r2, [pc, #488]	; (8003cb8 <HAL_ADCEx_Calibration_Start+0x294>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d90d      	bls.n	8003aee <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad6:	f023 0312 	bic.w	r3, r3, #18
 8003ada:	f043 0210 	orr.w	r2, r3, #16
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	679a      	str	r2, [r3, #120]	; 0x78

          __HAL_UNLOCK(hadc);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0dd      	b.n	8003caa <HAL_ADCEx_Calibration_Start+0x286>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ff82 	bl	80039fc <LL_ADC_IsCalibrationOnGoing>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e2      	bne.n	8003ac4 <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68d9      	ldr	r1, [r3, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
 8003b1e:	e0af      	b.n	8003c80 <HAL_ADCEx_Calibration_Start+0x25c>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8003b20:	4b66      	ldr	r3, [pc, #408]	; (8003cbc <HAL_ADCEx_Calibration_Start+0x298>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b28:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8003b2a:	4b64      	ldr	r3, [pc, #400]	; (8003cbc <HAL_ADCEx_Calibration_Start+0x298>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	0c1b      	lsrs	r3, r3, #16
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	f240 4255 	movw	r2, #1109	; 0x455
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d012      	beq.n	8003b64 <HAL_ADCEx_Calibration_Start+0x140>
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	f240 4276 	movw	r2, #1142	; 0x476
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00d      	beq.n	8003b64 <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	f240 4281 	movw	r2, #1153	; 0x481
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_ADCEx_Calibration_Start+0x138>
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	f240 4282 	movw	r2, #1154	; 0x482
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d16d      	bne.n	8003c38 <HAL_ADCEx_Calibration_Start+0x214>
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b62:	d369      	bcc.n	8003c38 <HAL_ADCEx_Calibration_Start+0x214>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f7ff fe4f 	bl	8003808 <ADC_Enable>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (tmp_hal_status == HAL_OK)
 8003b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f040 8083 	bne.w	8003c80 <HAL_ADCEx_Calibration_Start+0x25c>
        {
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 6210 	orr.w	r2, r2, #150994944	; 0x9000000
 8003b8c:	609a      	str	r2, [r3, #8]
          MODIFY_REG(hadc->Instance->CALFACT2, 0x00FF0000UL, 0x00020000UL);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003b96:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003ba2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003bb6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f7ff fe94 	bl	80038e8 <ADC_Disable>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003bcc:	d109      	bne.n	8003be2 <HAL_ADCEx_Calibration_Start+0x1be>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <HAL_ADCEx_Calibration_Start+0x29c>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be0:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bf8:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bfa:	e014      	b.n	8003c26 <HAL_ADCEx_Calibration_Start+0x202>
          {
            wait_loop_index++;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4a2c      	ldr	r2, [pc, #176]	; (8003cb8 <HAL_ADCEx_Calibration_Start+0x294>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d90d      	bls.n	8003c26 <HAL_ADCEx_Calibration_Start+0x202>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0e:	f023 0312 	bic.w	r3, r3, #18
 8003c12:	f043 0210 	orr.w	r2, r3, #16
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	679a      	str	r2, [r3, #120]	; 0x78

              __HAL_UNLOCK(hadc);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

              return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e041      	b.n	8003caa <HAL_ADCEx_Calibration_Start+0x286>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fee6 	bl	80039fc <LL_ADC_IsCalibrationOnGoing>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e2      	bne.n	8003bfc <HAL_ADCEx_Calibration_Start+0x1d8>
        if (tmp_hal_status == HAL_OK)
 8003c36:	e023      	b.n	8003c80 <HAL_ADCEx_Calibration_Start+0x25c>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff feb2 	bl	80039a8 <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c44:	e014      	b.n	8003c70 <HAL_ADCEx_Calibration_Start+0x24c>
        {
          wait_loop_index++;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4a1a      	ldr	r2, [pc, #104]	; (8003cb8 <HAL_ADCEx_Calibration_Start+0x294>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d90d      	bls.n	8003c70 <HAL_ADCEx_Calibration_Start+0x24c>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c58:	f023 0312 	bic.w	r3, r3, #18
 8003c5c:	f043 0210 	orr.w	r2, r3, #16
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	679a      	str	r2, [r3, #120]	; 0x78

            __HAL_UNLOCK(hadc);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

            return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e01c      	b.n	8003caa <HAL_ADCEx_Calibration_Start+0x286>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fec1 	bl	80039fc <LL_ADC_IsCalibrationOnGoing>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e2      	bne.n	8003c46 <HAL_ADCEx_Calibration_Start+0x222>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c84:	f023 0303 	bic.w	r3, r3, #3
 8003c88:	f043 0201 	orr.w	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	679a      	str	r2, [r3, #120]	; 0x78
 8003c90:	e005      	b.n	8003c9e <HAL_ADCEx_Calibration_Start+0x27a>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c96:	f043 0210 	orr.w	r2, r3, #16
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3728      	adds	r7, #40	; 0x28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	46021000 	.word	0x46021000
 8003cb8:	01ba813f 	.word	0x01ba813f
 8003cbc:	e0044000 	.word	0xe0044000
 8003cc0:	7ffeffc0 	.word	0x7ffeffc0

08003cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cf6:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	60d3      	str	r3, [r2, #12]
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	e000ed00 	.word	0xe000ed00

08003d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <__NVIC_GetPriorityGrouping+0x18>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	0a1b      	lsrs	r3, r3, #8
 8003d16:	f003 0307 	and.w	r3, r3, #7
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	db0b      	blt.n	8003d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	f003 021f 	and.w	r2, r3, #31
 8003d40:	4907      	ldr	r1, [pc, #28]	; (8003d60 <__NVIC_EnableIRQ+0x38>)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	2001      	movs	r0, #1
 8003d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	e000e100 	.word	0xe000e100

08003d64 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	db12      	blt.n	8003d9c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	f003 021f 	and.w	r2, r3, #31
 8003d7c:	490a      	ldr	r1, [pc, #40]	; (8003da8 <__NVIC_DisableIRQ+0x44>)
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	2001      	movs	r0, #1
 8003d86:	fa00 f202 	lsl.w	r2, r0, r2
 8003d8a:	3320      	adds	r3, #32
 8003d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d90:	f3bf 8f4f 	dsb	sy
}
 8003d94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d96:	f3bf 8f6f 	isb	sy
}
 8003d9a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	e000e100 	.word	0xe000e100

08003dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	6039      	str	r1, [r7, #0]
 8003db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	db0a      	blt.n	8003dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	490c      	ldr	r1, [pc, #48]	; (8003df8 <__NVIC_SetPriority+0x4c>)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	0112      	lsls	r2, r2, #4
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	440b      	add	r3, r1
 8003dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dd4:	e00a      	b.n	8003dec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	4908      	ldr	r1, [pc, #32]	; (8003dfc <__NVIC_SetPriority+0x50>)
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	3b04      	subs	r3, #4
 8003de4:	0112      	lsls	r2, r2, #4
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	440b      	add	r3, r1
 8003dea:	761a      	strb	r2, [r3, #24]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	e000e100 	.word	0xe000e100
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b089      	sub	sp, #36	; 0x24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f1c3 0307 	rsb	r3, r3, #7
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	bf28      	it	cs
 8003e1e:	2304      	movcs	r3, #4
 8003e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	3304      	adds	r3, #4
 8003e26:	2b06      	cmp	r3, #6
 8003e28:	d902      	bls.n	8003e30 <NVIC_EncodePriority+0x30>
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3b03      	subs	r3, #3
 8003e2e:	e000      	b.n	8003e32 <NVIC_EncodePriority+0x32>
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e34:	f04f 32ff 	mov.w	r2, #4294967295
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	401a      	ands	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e48:	f04f 31ff 	mov.w	r1, #4294967295
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e52:	43d9      	mvns	r1, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e58:	4313      	orrs	r3, r2
         );
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3724      	adds	r7, #36	; 0x24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ff28 	bl	8003cc4 <__NVIC_SetPriorityGrouping>
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e8a:	f7ff ff3f 	bl	8003d0c <__NVIC_GetPriorityGrouping>
 8003e8e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	6978      	ldr	r0, [r7, #20]
 8003e96:	f7ff ffb3 	bl	8003e00 <NVIC_EncodePriority>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff ff82 	bl	8003dac <__NVIC_SetPriority>
}
 8003ea8:	bf00      	nop
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff ff32 	bl	8003d28 <__NVIC_EnableIRQ>
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff ff42 	bl	8003d64 <__NVIC_DisableIRQ>
}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b089      	sub	sp, #36	; 0x24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003efa:	e1ba      	b.n	8004272 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	2101      	movs	r1, #1
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 81aa 	beq.w	800426c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a55      	ldr	r2, [pc, #340]	; (8004070 <HAL_GPIO_Init+0x188>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d15d      	bne.n	8003fdc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003f26:	2201      	movs	r2, #1
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	4013      	ands	r3, r2
 8003f34:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0201 	and.w	r2, r3, #1
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003f50:	4a48      	ldr	r2, [pc, #288]	; (8004074 <HAL_GPIO_Init+0x18c>)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f58:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003f5a:	4a46      	ldr	r2, [pc, #280]	; (8004074 <HAL_GPIO_Init+0x18c>)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	08da      	lsrs	r2, r3, #3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	3208      	adds	r2, #8
 8003f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f72:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	220f      	movs	r2, #15
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43db      	mvns	r3, r3
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	4013      	ands	r3, r2
 8003f88:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	220b      	movs	r2, #11
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	08da      	lsrs	r2, r3, #3
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	3208      	adds	r2, #8
 8003fa6:	69f9      	ldr	r1, [r7, #28]
 8003fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	2202      	movs	r2, #2
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	e067      	b.n	80040ac <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d003      	beq.n	8003fec <HAL_GPIO_Init+0x104>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b12      	cmp	r3, #18
 8003fea:	d145      	bne.n	8004078 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	08da      	lsrs	r2, r3, #3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3208      	adds	r2, #8
 8003ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	220f      	movs	r2, #15
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	4013      	ands	r3, r2
 800400e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f003 020f 	and.w	r2, r3, #15
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	4313      	orrs	r3, r2
 8004028:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	08da      	lsrs	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3208      	adds	r2, #8
 8004032:	69f9      	ldr	r1, [r7, #28]
 8004034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	2203      	movs	r2, #3
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	4013      	ands	r3, r2
 800404e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0203 	and.w	r2, r3, #3
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	4313      	orrs	r3, r2
 8004064:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e01e      	b.n	80040ac <HAL_GPIO_Init+0x1c4>
 800406e:	bf00      	nop
 8004070:	46020000 	.word	0x46020000
 8004074:	08015444 	.word	0x08015444
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	2203      	movs	r2, #3
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	4013      	ands	r3, r2
 800408e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 0203 	and.w	r2, r3, #3
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d00b      	beq.n	80040cc <HAL_GPIO_Init+0x1e4>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d007      	beq.n	80040cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040c0:	2b11      	cmp	r3, #17
 80040c2:	d003      	beq.n	80040cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b12      	cmp	r3, #18
 80040ca:	d130      	bne.n	800412e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	2203      	movs	r2, #3
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004102:	2201      	movs	r2, #1
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	4013      	ands	r3, r2
 8004110:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f003 0201 	and.w	r2, r3, #1
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	4313      	orrs	r3, r2
 8004126:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b03      	cmp	r3, #3
 8004134:	d017      	beq.n	8004166 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	2203      	movs	r2, #3
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43db      	mvns	r3, r3
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	4013      	ands	r3, r2
 800414c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	4313      	orrs	r3, r2
 800415e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d07c      	beq.n	800426c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004172:	4a47      	ldr	r2, [pc, #284]	; (8004290 <HAL_GPIO_Init+0x3a8>)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	3318      	adds	r3, #24
 800417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	220f      	movs	r2, #15
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	4013      	ands	r3, r2
 8004194:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	0a9a      	lsrs	r2, r3, #10
 800419a:	4b3e      	ldr	r3, [pc, #248]	; (8004294 <HAL_GPIO_Init+0x3ac>)
 800419c:	4013      	ands	r3, r2
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	f002 0203 	and.w	r2, r2, #3
 80041a4:	00d2      	lsls	r2, r2, #3
 80041a6:	4093      	lsls	r3, r2
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80041ae:	4938      	ldr	r1, [pc, #224]	; (8004290 <HAL_GPIO_Init+0x3a8>)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	3318      	adds	r3, #24
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80041bc:	4b34      	ldr	r3, [pc, #208]	; (8004290 <HAL_GPIO_Init+0x3a8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	4013      	ands	r3, r2
 80041ca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80041e0:	4a2b      	ldr	r2, [pc, #172]	; (8004290 <HAL_GPIO_Init+0x3a8>)
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80041e6:	4b2a      	ldr	r3, [pc, #168]	; (8004290 <HAL_GPIO_Init+0x3a8>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800420a:	4a21      	ldr	r2, [pc, #132]	; (8004290 <HAL_GPIO_Init+0x3a8>)
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004210:	4b1f      	ldr	r3, [pc, #124]	; (8004290 <HAL_GPIO_Init+0x3a8>)
 8004212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004216:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	43db      	mvns	r3, r3
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	4013      	ands	r3, r2
 8004220:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004236:	4a16      	ldr	r2, [pc, #88]	; (8004290 <HAL_GPIO_Init+0x3a8>)
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800423e:	4b14      	ldr	r3, [pc, #80]	; (8004290 <HAL_GPIO_Init+0x3a8>)
 8004240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004244:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	43db      	mvns	r3, r3
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	4013      	ands	r3, r2
 800424e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004264:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <HAL_GPIO_Init+0x3a8>)
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	3301      	adds	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	f47f ae3d 	bne.w	8003efc <HAL_GPIO_Init+0x14>
  }
}
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	3724      	adds	r7, #36	; 0x24
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	46022000 	.word	0x46022000
 8004294:	002f7f7f 	.word	0x002f7f7f

08004298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	807b      	strh	r3, [r7, #2]
 80042a4:	4613      	mov	r3, r2
 80042a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042a8:	787b      	ldrb	r3, [r7, #1]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042ae:	887a      	ldrh	r2, [r7, #2]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80042b4:	e002      	b.n	80042bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80042b6:	887a      	ldrh	r2, [r7, #2]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80042d2:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	4013      	ands	r3, r2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d006      	beq.n	80042ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80042de:	4a0c      	ldr	r2, [pc, #48]	; (8004310 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80042e0:	88fb      	ldrh	r3, [r7, #6]
 80042e2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f00b f97a 	bl	800f5e0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80042ec:	4b08      	ldr	r3, [pc, #32]	; (8004310 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d006      	beq.n	8004306 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80042f8:	4a05      	ldr	r2, [pc, #20]	; (8004310 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 f807 	bl	8004314 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	46022000 	.word	0x46022000

08004314 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
 8004348:	e007      	b.n	800435a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f023 0204 	bic.w	r2, r3, #4
 8004352:	4905      	ldr	r1, [pc, #20]	; (8004368 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4313      	orrs	r3, r2
 8004358:	600b      	str	r3, [r1, #0]
  }

  return status;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	40030400 	.word	0x40030400

0800436c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_ICACHE_Enable+0x1c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a04      	ldr	r2, [pc, #16]	; (8004388 <HAL_ICACHE_Enable+0x1c>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	40030400 	.word	0x40030400

0800438c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e0e7      	b.n	800456e <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d106      	bne.n	80043be <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7fc ff89 	bl	80012d0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0201 	orr.w	r2, r2, #1
 80043d4:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043de:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80043ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fad4 	bl	800499c <LPTIM_WaitForFlag>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d101      	bne.n	80043fe <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e0b7      	b.n	800456e <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2210      	movs	r2, #16
 8004404:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6a12      	ldr	r2, [r2, #32]
 800440e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004410:	2110      	movs	r1, #16
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fac2 	bl	800499c <LPTIM_WaitForFlag>
 8004418:	4603      	mov	r3, r0
 800441a:	2b03      	cmp	r3, #3
 800441c:	d101      	bne.n	8004422 <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e0a5      	b.n	800456e <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10e      	bne.n	800444e <HAL_LPTIM_Init+0xc2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d107      	bne.n	800444e <HAL_LPTIM_Init+0xc2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d004      	beq.n	8004468 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004466:	d103      	bne.n	8004470 <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 031e 	bic.w	r3, r3, #30
 800446e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004478:	4293      	cmp	r3, r2
 800447a:	d005      	beq.n	8004488 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004482:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004486:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4b3b      	ldr	r3, [pc, #236]	; (8004578 <HAL_LPTIM_Init+0x1ec>)
 800448c:	4013      	ands	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004498:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 800449e:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80044a4:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d107      	bne.n	80044c4 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80044bc:	4313      	orrs	r3, r2
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d004      	beq.n	80044d6 <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044d4:	d107      	bne.n	80044e6 <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80044de:	4313      	orrs	r3, r2
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00a      	beq.n	8004508 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80044fa:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004500:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a19      	ldr	r2, [pc, #100]	; (800457c <HAL_LPTIM_Init+0x1f0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_LPTIM_Init+0x198>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a18      	ldr	r2, [pc, #96]	; (8004580 <HAL_LPTIM_Init+0x1f4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d108      	bne.n	8004536 <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	625a      	str	r2, [r3, #36]	; 0x24
 8004534:	e00e      	b.n	8004554 <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a12      	ldr	r2, [pc, #72]	; (8004584 <HAL_LPTIM_Init+0x1f8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_LPTIM_Init+0x1be>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a10      	ldr	r2, [pc, #64]	; (8004588 <HAL_LPTIM_Init+0x1fc>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d104      	bne.n	8004554 <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004552:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	ff39f1fe 	.word	0xff39f1fe
 800457c:	46004400 	.word	0x46004400
 8004580:	40009400 	.word	0x40009400
 8004584:	46004800 	.word	0x46004800
 8004588:	46004c00 	.word	0x46004c00

0800458c <HAL_LPTIM_Counter_Start>:
  * @brief  Start the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d00c      	beq.n	80045be <HAL_LPTIM_Counter_Start+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045ac:	d107      	bne.n	80045be <HAL_LPTIM_Counter_Start+0x32>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80045bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0201 	orr.w	r2, r2, #1
 80045cc:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0204 	orr.w	r2, r2, #4
 80045dc:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b01      	cmp	r3, #1
 8004608:	d120      	bne.n	800464c <HAL_LPTIM_IRQHandler+0x58>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b01      	cmp	r3, #1
 8004616:	d119      	bne.n	800464c <HAL_LPTIM_IRQHandler+0x58>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2201      	movs	r2, #1
 800461e:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f99c 	bl	8004974 <HAL_LPTIM_IC_CaptureCallback>
 800463c:	e002      	b.n	8004644 <HAL_LPTIM_IRQHandler+0x50>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f93e 	bl	80048c0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800465a:	d122      	bne.n	80046a2 <HAL_LPTIM_IRQHandler+0xae>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800466a:	d11a      	bne.n	80046a2 <HAL_LPTIM_IRQHandler+0xae>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004674:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2202      	movs	r2, #2
 800467a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_LPTIM_IRQHandler+0xa0>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f971 	bl	8004974 <HAL_LPTIM_IC_CaptureCallback>
 8004692:	e002      	b.n	800469a <HAL_LPTIM_IRQHandler+0xa6>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f913 	bl	80048c0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b0:	d117      	bne.n	80046e2 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c0:	d10f      	bne.n	80046e2 <HAL_LPTIM_IRQHandler+0xee>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046ca:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f957 	bl	8004988 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f0:	d117      	bne.n	8004722 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004700:	d10f      	bne.n	8004722 <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800470a:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f937 	bl	8004988 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b02      	cmp	r3, #2
 800472e:	d10d      	bne.n	800474c <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b02      	cmp	r3, #2
 800473c:	d106      	bne.n	800474c <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2202      	movs	r2, #2
 8004744:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f8c4 	bl	80048d4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b04      	cmp	r3, #4
 8004758:	d10d      	bne.n	8004776 <HAL_LPTIM_IRQHandler+0x182>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b04      	cmp	r3, #4
 8004766:	d106      	bne.n	8004776 <HAL_LPTIM_IRQHandler+0x182>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2204      	movs	r2, #4
 800476e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f8b9 	bl	80048e8 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b08      	cmp	r3, #8
 8004782:	d111      	bne.n	80047a8 <HAL_LPTIM_IRQHandler+0x1b4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b08      	cmp	r3, #8
 8004790:	d10a      	bne.n	80047a8 <HAL_LPTIM_IRQHandler+0x1b4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2208      	movs	r2, #8
 8004798:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f8aa 	bl	80048fc <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047b6:	d113      	bne.n	80047e0 <HAL_LPTIM_IRQHandler+0x1ec>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047c6:	d10b      	bne.n	80047e0 <HAL_LPTIM_IRQHandler+0x1ec>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80047d0:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2202      	movs	r2, #2
 80047d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f88e 	bl	80048fc <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b10      	cmp	r3, #16
 80047ec:	d10d      	bne.n	800480a <HAL_LPTIM_IRQHandler+0x216>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	d106      	bne.n	800480a <HAL_LPTIM_IRQHandler+0x216>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2210      	movs	r2, #16
 8004802:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f883 	bl	8004910 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b20      	cmp	r3, #32
 8004816:	d10d      	bne.n	8004834 <HAL_LPTIM_IRQHandler+0x240>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b20      	cmp	r3, #32
 8004824:	d106      	bne.n	8004834 <HAL_LPTIM_IRQHandler+0x240>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2220      	movs	r2, #32
 800482c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f878 	bl	8004924 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	d10d      	bne.n	800485e <HAL_LPTIM_IRQHandler+0x26a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d106      	bne.n	800485e <HAL_LPTIM_IRQHandler+0x26a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2240      	movs	r2, #64	; 0x40
 8004856:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f86d 	bl	8004938 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004868:	2b80      	cmp	r3, #128	; 0x80
 800486a:	d10d      	bne.n	8004888 <HAL_LPTIM_IRQHandler+0x294>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b80      	cmp	r3, #128	; 0x80
 8004878:	d106      	bne.n	8004888 <HAL_LPTIM_IRQHandler+0x294>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2280      	movs	r2, #128	; 0x80
 8004880:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f862 	bl	800494c <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004896:	d10f      	bne.n	80048b8 <HAL_LPTIM_IRQHandler+0x2c4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a6:	d107      	bne.n	80048b8 <HAL_LPTIM_IRQHandler+0x2c4>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048b0:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f854 	bl	8004960 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80049aa:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <LPTIM_WaitForFlag+0x58>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a12      	ldr	r2, [pc, #72]	; (80049f8 <LPTIM_WaitForFlag+0x5c>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	0b9b      	lsrs	r3, r3, #14
 80049b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049ba:	fb02 f303 	mul.w	r3, r2, r3
 80049be:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	4013      	ands	r3, r2
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d002      	beq.n	80049e6 <LPTIM_WaitForFlag+0x4a>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1ec      	bne.n	80049c0 <LPTIM_WaitForFlag+0x24>

  return result;
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	20000000 	.word	0x20000000
 80049f8:	d1b71759 	.word	0xd1b71759

080049fc <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	4a04      	ldr	r2, [pc, #16]	; (8004a18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004a0c:	bf00      	nop
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	46020800 	.word	0x46020800

08004a1c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004a24:	4b39      	ldr	r3, [pc, #228]	; (8004b0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a2c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d10b      	bne.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3c:	d905      	bls.n	8004a4a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004a3e:	4b33      	ldr	r3, [pc, #204]	; (8004b0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	4a32      	ldr	r2, [pc, #200]	; (8004b0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a48:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e057      	b.n	8004afe <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a54:	d90a      	bls.n	8004a6c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004a56:	4b2d      	ldr	r3, [pc, #180]	; (8004b0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	4a2a      	ldr	r2, [pc, #168]	; (8004b0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a68:	60d3      	str	r3, [r2, #12]
 8004a6a:	e007      	b.n	8004a7c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004a6c:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a74:	4925      	ldr	r1, [pc, #148]	; (8004b0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004a7c:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	2232      	movs	r2, #50	; 0x32
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	4a21      	ldr	r2, [pc, #132]	; (8004b14 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004a90:	fba2 2303 	umull	r2, r3, r2, r3
 8004a94:	099b      	lsrs	r3, r3, #6
 8004a96:	3301      	adds	r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004a9a:	e002      	b.n	8004aa2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004aa2:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f3      	bne.n	8004a9c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01b      	beq.n	8004af2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004aba:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	099b      	lsrs	r3, r3, #6
 8004ac6:	2232      	movs	r2, #50	; 0x32
 8004ac8:	fb02 f303 	mul.w	r3, r2, r3
 8004acc:	4a11      	ldr	r2, [pc, #68]	; (8004b14 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004ace:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad2:	099b      	lsrs	r3, r3, #6
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004ad8:	e002      	b.n	8004ae0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f3      	bne.n	8004ada <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e000      	b.n	8004afe <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	46020800 	.word	0x46020800
 8004b10:	20000000 	.word	0x20000000
 8004b14:	10624dd3 	.word	0x10624dd3

08004b18 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004b1c:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	46020800 	.word	0x46020800

08004b34 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004b3c:	4b22      	ldr	r3, [pc, #136]	; (8004bc8 <HAL_PWREx_ConfigSupply+0x94>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a22      	ldr	r2, [pc, #136]	; (8004bcc <HAL_PWREx_ConfigSupply+0x98>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	099b      	lsrs	r3, r3, #6
 8004b48:	2232      	movs	r2, #50	; 0x32
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <HAL_PWREx_ConfigSupply+0x98>)
 8004b50:	fba2 2303 	umull	r2, r3, r2, r3
 8004b54:	099b      	lsrs	r3, r3, #6
 8004b56:	3301      	adds	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d113      	bne.n	8004b88 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004b60:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a1a      	ldr	r2, [pc, #104]	; (8004bd0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004b66:	f023 0302 	bic.w	r3, r3, #2
 8004b6a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004b6c:	e002      	b.n	8004b74 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004b74:	4b16      	ldr	r3, [pc, #88]	; (8004bd0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d116      	bne.n	8004bae <HAL_PWREx_ConfigSupply+0x7a>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f3      	bne.n	8004b6e <HAL_PWREx_ConfigSupply+0x3a>
 8004b86:	e012      	b.n	8004bae <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004b88:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4a10      	ldr	r2, [pc, #64]	; (8004bd0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004b8e:	f043 0302 	orr.w	r3, r3, #2
 8004b92:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004b94:	e002      	b.n	8004b9c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <HAL_PWREx_ConfigSupply+0x7a>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f3      	bne.n	8004b96 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e000      	b.n	8004bba <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	10624dd3 	.word	0x10624dd3
 8004bd0:	46020800 	.word	0x46020800

08004bd4 <HAL_PWREx_EnterSTOP1Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_0);
 8004bde:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 0307 	bic.w	r3, r3, #7
 8004be6:	4a0f      	ldr	r2, [pc, #60]	; (8004c24 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004bee:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	4a0d      	ldr	r2, [pc, #52]	; (8004c28 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004bf4:	f043 0304 	orr.w	r3, r3, #4
 8004bf8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004c00:	bf30      	wfi
 8004c02:	e002      	b.n	8004c0a <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004c04:	bf40      	sev
    __WFE();
 8004c06:	bf20      	wfe
    __WFE();
 8004c08:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004c0a:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	4a06      	ldr	r2, [pc, #24]	; (8004c28 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004c10:	f023 0304 	bic.w	r3, r3, #4
 8004c14:	6113      	str	r3, [r2, #16]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	46020800 	.word	0x46020800
 8004c28:	e000ed00 	.word	0xe000ed00

08004c2c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	4a04      	ldr	r2, [pc, #16]	; (8004c48 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004c36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c3a:	6113      	str	r3, [r2, #16]
}
 8004c3c:	bf00      	nop
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	46020800 	.word	0x46020800

08004c4c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004c50:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <HAL_PWREx_EnableVddA+0x1c>)
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	4a04      	ldr	r2, [pc, #16]	; (8004c68 <HAL_PWREx_EnableVddA+0x1c>)
 8004c56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c5a:	6113      	str	r3, [r2, #16]
}
 8004c5c:	bf00      	nop
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	46020800 	.word	0x46020800

08004c6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004c70:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	46020800 	.word	0x46020800

08004c8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08e      	sub	sp, #56	; 0x38
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004c94:	2300      	movs	r3, #0
 8004c96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f000 bec8 	b.w	8005a36 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ca6:	4b99      	ldr	r3, [pc, #612]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cb0:	4b96      	ldr	r3, [pc, #600]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 816c 	beq.w	8004fa0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <HAL_RCC_OscConfig+0x52>
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	2b0c      	cmp	r3, #12
 8004cd2:	f040 80de 	bne.w	8004e92 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	f040 80da 	bne.w	8004e92 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f000 bea5 	b.w	8005a36 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cf0:	4b86      	ldr	r3, [pc, #536]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <HAL_RCC_OscConfig+0x7a>
 8004cfc:	4b83      	ldr	r3, [pc, #524]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d04:	e005      	b.n	8004d12 <HAL_RCC_OscConfig+0x86>
 8004d06:	4b81      	ldr	r3, [pc, #516]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d255      	bcs.n	8004dc2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 fa17 	bl	8006154 <RCC_SetFlashLatencyFromMSIRange>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f000 be82 	b.w	8005a36 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004d32:	4b76      	ldr	r3, [pc, #472]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4a75      	ldr	r2, [pc, #468]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d3c:	6093      	str	r3, [r2, #8]
 8004d3e:	4b73      	ldr	r3, [pc, #460]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	4970      	ldr	r1, [pc, #448]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004d58:	d309      	bcc.n	8004d6e <HAL_RCC_OscConfig+0xe2>
 8004d5a:	4b6c      	ldr	r3, [pc, #432]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f023 021f 	bic.w	r2, r3, #31
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	4969      	ldr	r1, [pc, #420]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60cb      	str	r3, [r1, #12]
 8004d6c:	e07e      	b.n	8004e6c <HAL_RCC_OscConfig+0x1e0>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	da0a      	bge.n	8004d8c <HAL_RCC_OscConfig+0x100>
 8004d76:	4b65      	ldr	r3, [pc, #404]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	015b      	lsls	r3, r3, #5
 8004d84:	4961      	ldr	r1, [pc, #388]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60cb      	str	r3, [r1, #12]
 8004d8a:	e06f      	b.n	8004e6c <HAL_RCC_OscConfig+0x1e0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d94:	d30a      	bcc.n	8004dac <HAL_RCC_OscConfig+0x120>
 8004d96:	4b5d      	ldr	r3, [pc, #372]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	029b      	lsls	r3, r3, #10
 8004da4:	4959      	ldr	r1, [pc, #356]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60cb      	str	r3, [r1, #12]
 8004daa:	e05f      	b.n	8004e6c <HAL_RCC_OscConfig+0x1e0>
 8004dac:	4b57      	ldr	r3, [pc, #348]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	03db      	lsls	r3, r3, #15
 8004dba:	4954      	ldr	r1, [pc, #336]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60cb      	str	r3, [r1, #12]
 8004dc0:	e054      	b.n	8004e6c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004dc2:	4b52      	ldr	r3, [pc, #328]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	4a51      	ldr	r2, [pc, #324]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004dc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dcc:	6093      	str	r3, [r2, #8]
 8004dce:	4b4f      	ldr	r3, [pc, #316]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	494c      	ldr	r1, [pc, #304]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004de8:	d309      	bcc.n	8004dfe <HAL_RCC_OscConfig+0x172>
 8004dea:	4b48      	ldr	r3, [pc, #288]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f023 021f 	bic.w	r2, r3, #31
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	4945      	ldr	r1, [pc, #276]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60cb      	str	r3, [r1, #12]
 8004dfc:	e028      	b.n	8004e50 <HAL_RCC_OscConfig+0x1c4>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	da0a      	bge.n	8004e1c <HAL_RCC_OscConfig+0x190>
 8004e06:	4b41      	ldr	r3, [pc, #260]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	015b      	lsls	r3, r3, #5
 8004e14:	493d      	ldr	r1, [pc, #244]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60cb      	str	r3, [r1, #12]
 8004e1a:	e019      	b.n	8004e50 <HAL_RCC_OscConfig+0x1c4>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e24:	d30a      	bcc.n	8004e3c <HAL_RCC_OscConfig+0x1b0>
 8004e26:	4b39      	ldr	r3, [pc, #228]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	029b      	lsls	r3, r3, #10
 8004e34:	4935      	ldr	r1, [pc, #212]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60cb      	str	r3, [r1, #12]
 8004e3a:	e009      	b.n	8004e50 <HAL_RCC_OscConfig+0x1c4>
 8004e3c:	4b33      	ldr	r3, [pc, #204]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	03db      	lsls	r3, r3, #15
 8004e4a:	4930      	ldr	r1, [pc, #192]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10a      	bne.n	8004e6c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f001 f97a 	bl	8006154 <RCC_SetFlashLatencyFromMSIRange>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f000 bde5 	b.w	8005a36 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004e6c:	f001 f8e4 	bl	8006038 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e70:	4b27      	ldr	r3, [pc, #156]	; (8004f10 <HAL_RCC_OscConfig+0x284>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fc fb8d 	bl	8001594 <HAL_InitTick>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 808a 	beq.w	8004f9e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e8e:	f000 bdd2 	b.w	8005a36 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d066      	beq.n	8004f68 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004e9a:	4b1c      	ldr	r3, [pc, #112]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004ea6:	f7fc fd13 	bl	80018d0 <HAL_GetTick>
 8004eaa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004eac:	e009      	b.n	8004ec2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004eae:	f7fc fd0f 	bl	80018d0 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d902      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	f000 bdba 	b.w	8005a36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004ec2:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0ef      	beq.n	8004eae <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004ece:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	4a0e      	ldr	r2, [pc, #56]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004ed4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ed8:	6093      	str	r3, [r2, #8]
 8004eda:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	4909      	ldr	r1, [pc, #36]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004ef4:	d30e      	bcc.n	8004f14 <HAL_RCC_OscConfig+0x288>
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f023 021f 	bic.w	r2, r3, #31
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	4902      	ldr	r1, [pc, #8]	; (8004f0c <HAL_RCC_OscConfig+0x280>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60cb      	str	r3, [r1, #12]
 8004f08:	e04a      	b.n	8004fa0 <HAL_RCC_OscConfig+0x314>
 8004f0a:	bf00      	nop
 8004f0c:	46020c00 	.word	0x46020c00
 8004f10:	20000004 	.word	0x20000004
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	da0a      	bge.n	8004f32 <HAL_RCC_OscConfig+0x2a6>
 8004f1c:	4b98      	ldr	r3, [pc, #608]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	015b      	lsls	r3, r3, #5
 8004f2a:	4995      	ldr	r1, [pc, #596]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60cb      	str	r3, [r1, #12]
 8004f30:	e036      	b.n	8004fa0 <HAL_RCC_OscConfig+0x314>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3a:	d30a      	bcc.n	8004f52 <HAL_RCC_OscConfig+0x2c6>
 8004f3c:	4b90      	ldr	r3, [pc, #576]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	029b      	lsls	r3, r3, #10
 8004f4a:	498d      	ldr	r1, [pc, #564]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60cb      	str	r3, [r1, #12]
 8004f50:	e026      	b.n	8004fa0 <HAL_RCC_OscConfig+0x314>
 8004f52:	4b8b      	ldr	r3, [pc, #556]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	03db      	lsls	r3, r3, #15
 8004f60:	4987      	ldr	r1, [pc, #540]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60cb      	str	r3, [r1, #12]
 8004f66:	e01b      	b.n	8004fa0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004f68:	4b85      	ldr	r3, [pc, #532]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a84      	ldr	r2, [pc, #528]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004f74:	f7fc fcac 	bl	80018d0 <HAL_GetTick>
 8004f78:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004f7a:	e009      	b.n	8004f90 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f7c:	f7fc fca8 	bl	80018d0 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d902      	bls.n	8004f90 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	f000 bd53 	b.w	8005a36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004f90:	4b7b      	ldr	r3, [pc, #492]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1ef      	bne.n	8004f7c <HAL_RCC_OscConfig+0x2f0>
 8004f9c:	e000      	b.n	8004fa0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 808b 	beq.w	80050c4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d005      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x334>
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	2b0c      	cmp	r3, #12
 8004fb8:	d109      	bne.n	8004fce <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d106      	bne.n	8004fce <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d17d      	bne.n	80050c4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f000 bd34 	b.w	8005a36 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd6:	d106      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x35a>
 8004fd8:	4b69      	ldr	r3, [pc, #420]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a68      	ldr	r2, [pc, #416]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8004fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	e041      	b.n	800506a <HAL_RCC_OscConfig+0x3de>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fee:	d112      	bne.n	8005016 <HAL_RCC_OscConfig+0x38a>
 8004ff0:	4b63      	ldr	r3, [pc, #396]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a62      	ldr	r2, [pc, #392]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8004ff6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	4b60      	ldr	r3, [pc, #384]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a5f      	ldr	r2, [pc, #380]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005002:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	4b5d      	ldr	r3, [pc, #372]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a5c      	ldr	r2, [pc, #368]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 800500e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	e029      	b.n	800506a <HAL_RCC_OscConfig+0x3de>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800501e:	d112      	bne.n	8005046 <HAL_RCC_OscConfig+0x3ba>
 8005020:	4b57      	ldr	r3, [pc, #348]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a56      	ldr	r2, [pc, #344]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005026:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	4b54      	ldr	r3, [pc, #336]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a53      	ldr	r2, [pc, #332]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	4b51      	ldr	r3, [pc, #324]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a50      	ldr	r2, [pc, #320]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 800503e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	e011      	b.n	800506a <HAL_RCC_OscConfig+0x3de>
 8005046:	4b4e      	ldr	r3, [pc, #312]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a4d      	ldr	r2, [pc, #308]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 800504c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	4b4b      	ldr	r3, [pc, #300]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a4a      	ldr	r2, [pc, #296]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005058:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	4b48      	ldr	r3, [pc, #288]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a47      	ldr	r2, [pc, #284]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005064:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005068:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d014      	beq.n	800509c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005072:	f7fc fc2d 	bl	80018d0 <HAL_GetTick>
 8005076:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005078:	e009      	b.n	800508e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800507a:	f7fc fc29 	bl	80018d0 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b64      	cmp	r3, #100	; 0x64
 8005086:	d902      	bls.n	800508e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	f000 bcd4 	b.w	8005a36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800508e:	4b3c      	ldr	r3, [pc, #240]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0ef      	beq.n	800507a <HAL_RCC_OscConfig+0x3ee>
 800509a:	e013      	b.n	80050c4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800509c:	f7fc fc18 	bl	80018d0 <HAL_GetTick>
 80050a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050a2:	e009      	b.n	80050b8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a4:	f7fc fc14 	bl	80018d0 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b64      	cmp	r3, #100	; 0x64
 80050b0:	d902      	bls.n	80050b8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	f000 bcbf 	b.w	8005a36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050b8:	4b31      	ldr	r3, [pc, #196]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1ef      	bne.n	80050a4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d05f      	beq.n	8005190 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d005      	beq.n	80050e2 <HAL_RCC_OscConfig+0x456>
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	2b0c      	cmp	r3, #12
 80050da:	d114      	bne.n	8005106 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d111      	bne.n	8005106 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f000 bca3 	b.w	8005a36 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80050f0:	4b23      	ldr	r3, [pc, #140]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	041b      	lsls	r3, r3, #16
 80050fe:	4920      	ldr	r1, [pc, #128]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005100:	4313      	orrs	r3, r2
 8005102:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005104:	e044      	b.n	8005190 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d024      	beq.n	8005158 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800510e:	4b1c      	ldr	r3, [pc, #112]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005118:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800511a:	f7fc fbd9 	bl	80018d0 <HAL_GetTick>
 800511e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005120:	e009      	b.n	8005136 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005122:	f7fc fbd5 	bl	80018d0 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d902      	bls.n	8005136 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	f000 bc80 	b.w	8005a36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005136:	4b12      	ldr	r3, [pc, #72]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ef      	beq.n	8005122 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005142:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	041b      	lsls	r3, r3, #16
 8005150:	490b      	ldr	r1, [pc, #44]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 8005152:	4313      	orrs	r3, r2
 8005154:	610b      	str	r3, [r1, #16]
 8005156:	e01b      	b.n	8005190 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005158:	4b09      	ldr	r3, [pc, #36]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a08      	ldr	r2, [pc, #32]	; (8005180 <HAL_RCC_OscConfig+0x4f4>)
 800515e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005162:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005164:	f7fc fbb4 	bl	80018d0 <HAL_GetTick>
 8005168:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800516a:	e00b      	b.n	8005184 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516c:	f7fc fbb0 	bl	80018d0 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d904      	bls.n	8005184 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	f000 bc5b 	b.w	8005a36 <HAL_RCC_OscConfig+0xdaa>
 8005180:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005184:	4baf      	ldr	r3, [pc, #700]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1ed      	bne.n	800516c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 80c8 	beq.w	800532e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800519e:	2300      	movs	r3, #0
 80051a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051a4:	4ba7      	ldr	r3, [pc, #668]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80051a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d111      	bne.n	80051d6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b2:	4ba4      	ldr	r3, [pc, #656]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80051b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b8:	4aa2      	ldr	r2, [pc, #648]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80051ba:	f043 0304 	orr.w	r3, r3, #4
 80051be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80051c2:	4ba0      	ldr	r3, [pc, #640]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80051c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80051d0:	2301      	movs	r3, #1
 80051d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051d6:	4b9c      	ldr	r3, [pc, #624]	; (8005448 <HAL_RCC_OscConfig+0x7bc>)
 80051d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d119      	bne.n	8005216 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80051e2:	4b99      	ldr	r3, [pc, #612]	; (8005448 <HAL_RCC_OscConfig+0x7bc>)
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	4a98      	ldr	r2, [pc, #608]	; (8005448 <HAL_RCC_OscConfig+0x7bc>)
 80051e8:	f043 0301 	orr.w	r3, r3, #1
 80051ec:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ee:	f7fc fb6f 	bl	80018d0 <HAL_GetTick>
 80051f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051f4:	e009      	b.n	800520a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f6:	f7fc fb6b 	bl	80018d0 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d902      	bls.n	800520a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	f000 bc16 	b.w	8005a36 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800520a:	4b8f      	ldr	r3, [pc, #572]	; (8005448 <HAL_RCC_OscConfig+0x7bc>)
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0ef      	beq.n	80051f6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d05f      	beq.n	80052de <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800521e:	4b89      	ldr	r3, [pc, #548]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005224:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005230:	429a      	cmp	r2, r3
 8005232:	d037      	beq.n	80052a4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d006      	beq.n	800524c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e3f4      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01b      	beq.n	800528e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005256:	4b7b      	ldr	r3, [pc, #492]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800525c:	4a79      	ldr	r2, [pc, #484]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 800525e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005262:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8005266:	f7fc fb33 	bl	80018d0 <HAL_GetTick>
 800526a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800526e:	f7fc fb2f 	bl	80018d0 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b05      	cmp	r3, #5
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e3da      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005280:	4b70      	ldr	r3, [pc, #448]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005286:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1ef      	bne.n	800526e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800528e:	4b6d      	ldr	r3, [pc, #436]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005294:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	4969      	ldr	r1, [pc, #420]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80052a4:	4b67      	ldr	r3, [pc, #412]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80052a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052aa:	4a66      	ldr	r2, [pc, #408]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80052ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80052b4:	f7fc fb0c 	bl	80018d0 <HAL_GetTick>
 80052b8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052bc:	f7fc fb08 	bl	80018d0 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e3b3      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80052ce:	4b5d      	ldr	r3, [pc, #372]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80052d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0ef      	beq.n	80052bc <HAL_RCC_OscConfig+0x630>
 80052dc:	e01b      	b.n	8005316 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80052de:	4b59      	ldr	r3, [pc, #356]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80052e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052e4:	4a57      	ldr	r2, [pc, #348]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80052e6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80052ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80052ee:	f7fc faef 	bl	80018d0 <HAL_GetTick>
 80052f2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f6:	f7fc faeb 	bl	80018d0 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b05      	cmp	r3, #5
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e396      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005308:	4b4e      	ldr	r3, [pc, #312]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 800530a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800530e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1ef      	bne.n	80052f6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005316:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800531a:	2b01      	cmp	r3, #1
 800531c:	d107      	bne.n	800532e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800531e:	4b49      	ldr	r3, [pc, #292]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005324:	4a47      	ldr	r2, [pc, #284]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005326:	f023 0304 	bic.w	r3, r3, #4
 800532a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 8111 	beq.w	800555e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800533c:	2300      	movs	r3, #0
 800533e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005342:	4b40      	ldr	r3, [pc, #256]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d111      	bne.n	8005374 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005350:	4b3c      	ldr	r3, [pc, #240]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005356:	4a3b      	ldr	r2, [pc, #236]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005358:	f043 0304 	orr.w	r3, r3, #4
 800535c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005360:	4b38      	ldr	r3, [pc, #224]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005374:	4b34      	ldr	r3, [pc, #208]	; (8005448 <HAL_RCC_OscConfig+0x7bc>)
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d118      	bne.n	80053b2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005380:	4b31      	ldr	r3, [pc, #196]	; (8005448 <HAL_RCC_OscConfig+0x7bc>)
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	4a30      	ldr	r2, [pc, #192]	; (8005448 <HAL_RCC_OscConfig+0x7bc>)
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800538c:	f7fc faa0 	bl	80018d0 <HAL_GetTick>
 8005390:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005394:	f7fc fa9c 	bl	80018d0 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e347      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80053a6:	4b28      	ldr	r3, [pc, #160]	; (8005448 <HAL_RCC_OscConfig+0x7bc>)
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01f      	beq.n	80053fe <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d010      	beq.n	80053ec <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80053ca:	4b1e      	ldr	r3, [pc, #120]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80053cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053d0:	4a1c      	ldr	r2, [pc, #112]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80053d2:	f043 0304 	orr.w	r3, r3, #4
 80053d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80053da:	4b1a      	ldr	r3, [pc, #104]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80053dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053e0:	4a18      	ldr	r2, [pc, #96]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80053ea:	e018      	b.n	800541e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80053ec:	4b15      	ldr	r3, [pc, #84]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80053ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053f2:	4a14      	ldr	r2, [pc, #80]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80053fc:	e00f      	b.n	800541e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80053fe:	4b11      	ldr	r3, [pc, #68]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005404:	4a0f      	ldr	r2, [pc, #60]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800540e:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005414:	4a0b      	ldr	r2, [pc, #44]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005416:	f023 0304 	bic.w	r3, r3, #4
 800541a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d057      	beq.n	80054d6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005426:	f7fc fa53 	bl	80018d0 <HAL_GetTick>
 800542a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800542c:	e00e      	b.n	800544c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800542e:	f7fc fa4f 	bl	80018d0 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	f241 3288 	movw	r2, #5000	; 0x1388
 800543c:	4293      	cmp	r3, r2
 800543e:	d905      	bls.n	800544c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e2f8      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
 8005444:	46020c00 	.word	0x46020c00
 8005448:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800544c:	4b9c      	ldr	r3, [pc, #624]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 800544e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0e9      	beq.n	800542e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01b      	beq.n	800549e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005466:	4b96      	ldr	r3, [pc, #600]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800546c:	4a94      	ldr	r2, [pc, #592]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 800546e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005472:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005476:	e00a      	b.n	800548e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005478:	f7fc fa2a 	bl	80018d0 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	; 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e2d3      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800548e:	4b8c      	ldr	r3, [pc, #560]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0ed      	beq.n	8005478 <HAL_RCC_OscConfig+0x7ec>
 800549c:	e053      	b.n	8005546 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800549e:	4b88      	ldr	r3, [pc, #544]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 80054a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054a4:	4a86      	ldr	r2, [pc, #536]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 80054a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054ae:	e00a      	b.n	80054c6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b0:	f7fc fa0e 	bl	80018d0 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80054be:	4293      	cmp	r3, r2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e2b7      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054c6:	4b7e      	ldr	r3, [pc, #504]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 80054c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1ed      	bne.n	80054b0 <HAL_RCC_OscConfig+0x824>
 80054d4:	e037      	b.n	8005546 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80054d6:	f7fc f9fb 	bl	80018d0 <HAL_GetTick>
 80054da:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054dc:	e00a      	b.n	80054f4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054de:	f7fc f9f7 	bl	80018d0 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e2a0      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054f4:	4b72      	ldr	r3, [pc, #456]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 80054f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1ed      	bne.n	80054de <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005502:	4b6f      	ldr	r3, [pc, #444]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01a      	beq.n	8005546 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005510:	4b6b      	ldr	r3, [pc, #428]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005516:	4a6a      	ldr	r2, [pc, #424]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800551c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005520:	e00a      	b.n	8005538 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005522:	f7fc f9d5 	bl	80018d0 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005530:	4293      	cmp	r3, r2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e27e      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005538:	4b61      	ldr	r3, [pc, #388]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 800553a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800553e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1ed      	bne.n	8005522 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005546:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800554a:	2b01      	cmp	r3, #1
 800554c:	d107      	bne.n	800555e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800554e:	4b5c      	ldr	r3, [pc, #368]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005554:	4a5a      	ldr	r2, [pc, #360]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005556:	f023 0304 	bic.w	r3, r3, #4
 800555a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d036      	beq.n	80055d8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d019      	beq.n	80055a6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005572:	4b53      	ldr	r3, [pc, #332]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a52      	ldr	r2, [pc, #328]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005578:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800557c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800557e:	f7fc f9a7 	bl	80018d0 <HAL_GetTick>
 8005582:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005586:	f7fc f9a3 	bl	80018d0 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e24e      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005598:	4b49      	ldr	r3, [pc, #292]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCC_OscConfig+0x8fa>
 80055a4:	e018      	b.n	80055d8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80055a6:	4b46      	ldr	r3, [pc, #280]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a45      	ldr	r2, [pc, #276]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 80055ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80055b2:	f7fc f98d 	bl	80018d0 <HAL_GetTick>
 80055b6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055ba:	f7fc f989 	bl	80018d0 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e234      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80055cc:	4b3c      	ldr	r3, [pc, #240]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f0      	bne.n	80055ba <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d036      	beq.n	8005652 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d019      	beq.n	8005620 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80055ec:	4b34      	ldr	r3, [pc, #208]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a33      	ldr	r2, [pc, #204]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 80055f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80055f8:	f7fc f96a 	bl	80018d0 <HAL_GetTick>
 80055fc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005600:	f7fc f966 	bl	80018d0 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e211      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005612:	4b2b      	ldr	r3, [pc, #172]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0x974>
 800561e:	e018      	b.n	8005652 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005620:	4b27      	ldr	r3, [pc, #156]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a26      	ldr	r2, [pc, #152]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800562a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800562c:	f7fc f950 	bl	80018d0 <HAL_GetTick>
 8005630:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005634:	f7fc f94c 	bl	80018d0 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e1f7      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005646:	4b1e      	ldr	r3, [pc, #120]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d07f      	beq.n	800575e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005662:	2b00      	cmp	r3, #0
 8005664:	d062      	beq.n	800572c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005666:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 800566c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005670:	6093      	str	r3, [r2, #8]
 8005672:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	4910      	ldr	r1, [pc, #64]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005680:	4313      	orrs	r3, r2
 8005682:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800568c:	d309      	bcc.n	80056a2 <HAL_RCC_OscConfig+0xa16>
 800568e:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f023 021f 	bic.w	r2, r3, #31
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	4909      	ldr	r1, [pc, #36]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 800569c:	4313      	orrs	r3, r2
 800569e:	60cb      	str	r3, [r1, #12]
 80056a0:	e02a      	b.n	80056f8 <HAL_RCC_OscConfig+0xa6c>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	da0c      	bge.n	80056c4 <HAL_RCC_OscConfig+0xa38>
 80056aa:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	015b      	lsls	r3, r3, #5
 80056b8:	4901      	ldr	r1, [pc, #4]	; (80056c0 <HAL_RCC_OscConfig+0xa34>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60cb      	str	r3, [r1, #12]
 80056be:	e01b      	b.n	80056f8 <HAL_RCC_OscConfig+0xa6c>
 80056c0:	46020c00 	.word	0x46020c00
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056cc:	d30a      	bcc.n	80056e4 <HAL_RCC_OscConfig+0xa58>
 80056ce:	4ba1      	ldr	r3, [pc, #644]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	029b      	lsls	r3, r3, #10
 80056dc:	499d      	ldr	r1, [pc, #628]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	60cb      	str	r3, [r1, #12]
 80056e2:	e009      	b.n	80056f8 <HAL_RCC_OscConfig+0xa6c>
 80056e4:	4b9b      	ldr	r3, [pc, #620]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	03db      	lsls	r3, r3, #15
 80056f2:	4998      	ldr	r1, [pc, #608]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80056f8:	4b96      	ldr	r3, [pc, #600]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a95      	ldr	r2, [pc, #596]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80056fe:	f043 0310 	orr.w	r3, r3, #16
 8005702:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005704:	f7fc f8e4 	bl	80018d0 <HAL_GetTick>
 8005708:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800570c:	f7fc f8e0 	bl	80018d0 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e18b      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800571e:	4b8d      	ldr	r3, [pc, #564]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0xa80>
 800572a:	e018      	b.n	800575e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800572c:	4b89      	ldr	r3, [pc, #548]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a88      	ldr	r2, [pc, #544]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005732:	f023 0310 	bic.w	r3, r3, #16
 8005736:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005738:	f7fc f8ca 	bl	80018d0 <HAL_GetTick>
 800573c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005740:	f7fc f8c6 	bl	80018d0 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e171      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005752:	4b80      	ldr	r3, [pc, #512]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 8166 	beq.w	8005a34 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005768:	2300      	movs	r3, #0
 800576a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800576e:	4b79      	ldr	r3, [pc, #484]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f003 030c 	and.w	r3, r3, #12
 8005776:	2b0c      	cmp	r3, #12
 8005778:	f000 80f2 	beq.w	8005960 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	2b02      	cmp	r3, #2
 8005782:	f040 80c5 	bne.w	8005910 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005786:	4b73      	ldr	r3, [pc, #460]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a72      	ldr	r2, [pc, #456]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 800578c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005790:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005792:	f7fc f89d 	bl	80018d0 <HAL_GetTick>
 8005796:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005798:	e008      	b.n	80057ac <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800579a:	f7fc f899 	bl	80018d0 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e144      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80057ac:	4b69      	ldr	r3, [pc, #420]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1f0      	bne.n	800579a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057b8:	4b66      	ldr	r3, [pc, #408]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80057ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d111      	bne.n	80057ea <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80057c6:	4b63      	ldr	r3, [pc, #396]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80057c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057cc:	4a61      	ldr	r2, [pc, #388]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80057ce:	f043 0304 	orr.w	r3, r3, #4
 80057d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80057d6:	4b5f      	ldr	r3, [pc, #380]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80057d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80057e4:	2301      	movs	r3, #1
 80057e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80057ea:	4b5b      	ldr	r3, [pc, #364]	; (8005958 <HAL_RCC_OscConfig+0xccc>)
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057f6:	d102      	bne.n	80057fe <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80057f8:	2301      	movs	r3, #1
 80057fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80057fe:	4b56      	ldr	r3, [pc, #344]	; (8005958 <HAL_RCC_OscConfig+0xccc>)
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	4a55      	ldr	r2, [pc, #340]	; (8005958 <HAL_RCC_OscConfig+0xccc>)
 8005804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005808:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800580a:	4b52      	ldr	r3, [pc, #328]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005812:	f023 0303 	bic.w	r3, r3, #3
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800581e:	3a01      	subs	r2, #1
 8005820:	0212      	lsls	r2, r2, #8
 8005822:	4311      	orrs	r1, r2
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005828:	430a      	orrs	r2, r1
 800582a:	494a      	ldr	r1, [pc, #296]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 800582c:	4313      	orrs	r3, r2
 800582e:	628b      	str	r3, [r1, #40]	; 0x28
 8005830:	4b48      	ldr	r3, [pc, #288]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005834:	4b49      	ldr	r3, [pc, #292]	; (800595c <HAL_RCC_OscConfig+0xcd0>)
 8005836:	4013      	ands	r3, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800583c:	3a01      	subs	r2, #1
 800583e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005846:	3a01      	subs	r2, #1
 8005848:	0252      	lsls	r2, r2, #9
 800584a:	b292      	uxth	r2, r2
 800584c:	4311      	orrs	r1, r2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005852:	3a01      	subs	r2, #1
 8005854:	0412      	lsls	r2, r2, #16
 8005856:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800585a:	4311      	orrs	r1, r2
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005860:	3a01      	subs	r2, #1
 8005862:	0612      	lsls	r2, r2, #24
 8005864:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005868:	430a      	orrs	r2, r1
 800586a:	493a      	ldr	r1, [pc, #232]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 800586c:	4313      	orrs	r3, r2
 800586e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005870:	4b38      	ldr	r3, [pc, #224]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	4a37      	ldr	r2, [pc, #220]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005876:	f023 0310 	bic.w	r3, r3, #16
 800587a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005880:	4a34      	ldr	r2, [pc, #208]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005886:	4b33      	ldr	r3, [pc, #204]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588a:	4a32      	ldr	r2, [pc, #200]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 800588c:	f043 0310 	orr.w	r3, r3, #16
 8005890:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005892:	4b30      	ldr	r3, [pc, #192]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005896:	f023 020c 	bic.w	r2, r3, #12
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589e:	492d      	ldr	r1, [pc, #180]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80058a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d105      	bne.n	80058b8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80058ac:	4b2a      	ldr	r3, [pc, #168]	; (8005958 <HAL_RCC_OscConfig+0xccc>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a29      	ldr	r2, [pc, #164]	; (8005958 <HAL_RCC_OscConfig+0xccc>)
 80058b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058b6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80058b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d107      	bne.n	80058d0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80058c0:	4b24      	ldr	r3, [pc, #144]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80058c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c6:	4a23      	ldr	r2, [pc, #140]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80058c8:	f023 0304 	bic.w	r3, r3, #4
 80058cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058d0:	4b20      	ldr	r3, [pc, #128]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80058d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d4:	4a1f      	ldr	r2, [pc, #124]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80058d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058da:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80058dc:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 80058e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058e6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80058e8:	f7fb fff2 	bl	80018d0 <HAL_GetTick>
 80058ec:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f0:	f7fb ffee 	bl	80018d0 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e099      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005902:	4b14      	ldr	r3, [pc, #80]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCC_OscConfig+0xc64>
 800590e:	e091      	b.n	8005a34 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005910:	4b10      	ldr	r3, [pc, #64]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a0f      	ldr	r2, [pc, #60]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800591a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800591c:	f7fb ffd8 	bl	80018d0 <HAL_GetTick>
 8005920:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005924:	f7fb ffd4 	bl	80018d0 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e07f      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005936:	4b07      	ldr	r3, [pc, #28]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005942:	4b04      	ldr	r3, [pc, #16]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005946:	4a03      	ldr	r2, [pc, #12]	; (8005954 <HAL_RCC_OscConfig+0xcc8>)
 8005948:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800594c:	f023 0303 	bic.w	r3, r3, #3
 8005950:	6293      	str	r3, [r2, #40]	; 0x28
 8005952:	e06f      	b.n	8005a34 <HAL_RCC_OscConfig+0xda8>
 8005954:	46020c00 	.word	0x46020c00
 8005958:	46020800 	.word	0x46020800
 800595c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005960:	4b37      	ldr	r3, [pc, #220]	; (8005a40 <HAL_RCC_OscConfig+0xdb4>)
 8005962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005964:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005966:	4b36      	ldr	r3, [pc, #216]	; (8005a40 <HAL_RCC_OscConfig+0xdb4>)
 8005968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	2b01      	cmp	r3, #1
 8005972:	d039      	beq.n	80059e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f003 0203 	and.w	r2, r3, #3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800597e:	429a      	cmp	r2, r3
 8005980:	d132      	bne.n	80059e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005990:	429a      	cmp	r2, r3
 8005992:	d129      	bne.n	80059e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800599e:	429a      	cmp	r2, r3
 80059a0:	d122      	bne.n	80059e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ac:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d11a      	bne.n	80059e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	0a5b      	lsrs	r3, r3, #9
 80059b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d111      	bne.n	80059e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	0c1b      	lsrs	r3, r3, #16
 80059c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d108      	bne.n	80059e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	0e1b      	lsrs	r3, r3, #24
 80059da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d001      	beq.n	80059ec <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e024      	b.n	8005a36 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80059ec:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <HAL_RCC_OscConfig+0xdb4>)
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	08db      	lsrs	r3, r3, #3
 80059f2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d01a      	beq.n	8005a34 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80059fe:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <HAL_RCC_OscConfig+0xdb4>)
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	4a0f      	ldr	r2, [pc, #60]	; (8005a40 <HAL_RCC_OscConfig+0xdb4>)
 8005a04:	f023 0310 	bic.w	r3, r3, #16
 8005a08:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0a:	f7fb ff61 	bl	80018d0 <HAL_GetTick>
 8005a0e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005a10:	bf00      	nop
 8005a12:	f7fb ff5d 	bl	80018d0 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d0f9      	beq.n	8005a12 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a22:	4a07      	ldr	r2, [pc, #28]	; (8005a40 <HAL_RCC_OscConfig+0xdb4>)
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005a28:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <HAL_RCC_OscConfig+0xdb4>)
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	4a04      	ldr	r2, [pc, #16]	; (8005a40 <HAL_RCC_OscConfig+0xdb4>)
 8005a2e:	f043 0310 	orr.w	r3, r3, #16
 8005a32:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3738      	adds	r7, #56	; 0x38
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	46020c00 	.word	0x46020c00

08005a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e1d9      	b.n	8005e0c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a58:	4b9b      	ldr	r3, [pc, #620]	; (8005cc8 <HAL_RCC_ClockConfig+0x284>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d910      	bls.n	8005a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a66:	4b98      	ldr	r3, [pc, #608]	; (8005cc8 <HAL_RCC_ClockConfig+0x284>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 020f 	bic.w	r2, r3, #15
 8005a6e:	4996      	ldr	r1, [pc, #600]	; (8005cc8 <HAL_RCC_ClockConfig+0x284>)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a76:	4b94      	ldr	r3, [pc, #592]	; (8005cc8 <HAL_RCC_ClockConfig+0x284>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e1c1      	b.n	8005e0c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d010      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	695a      	ldr	r2, [r3, #20]
 8005a98:	4b8c      	ldr	r3, [pc, #560]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d908      	bls.n	8005ab6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005aa4:	4b89      	ldr	r3, [pc, #548]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	4986      	ldr	r1, [pc, #536]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0308 	and.w	r3, r3, #8
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d012      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	4b81      	ldr	r3, [pc, #516]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	091b      	lsrs	r3, r3, #4
 8005acc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d909      	bls.n	8005ae8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005ad4:	4b7d      	ldr	r3, [pc, #500]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	497a      	ldr	r1, [pc, #488]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d010      	beq.n	8005b16 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	4b74      	ldr	r3, [pc, #464]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d908      	bls.n	8005b16 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005b04:	4b71      	ldr	r3, [pc, #452]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	496e      	ldr	r1, [pc, #440]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d010      	beq.n	8005b44 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	4b69      	ldr	r3, [pc, #420]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d908      	bls.n	8005b44 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005b32:	4b66      	ldr	r3, [pc, #408]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f023 020f 	bic.w	r2, r3, #15
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	4963      	ldr	r1, [pc, #396]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 80d2 	beq.w	8005cf6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005b52:	2300      	movs	r3, #0
 8005b54:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d143      	bne.n	8005be6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b5e:	4b5b      	ldr	r3, [pc, #364]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d110      	bne.n	8005b8e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005b6c:	4b57      	ldr	r3, [pc, #348]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b72:	4a56      	ldr	r2, [pc, #344]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005b74:	f043 0304 	orr.w	r3, r3, #4
 8005b78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005b7c:	4b53      	ldr	r3, [pc, #332]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	60bb      	str	r3, [r7, #8]
 8005b88:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005b8e:	f7fb fe9f 	bl	80018d0 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005b94:	4b4e      	ldr	r3, [pc, #312]	; (8005cd0 <HAL_RCC_ClockConfig+0x28c>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00f      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005ba2:	f7fb fe95 	bl	80018d0 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e12b      	b.n	8005e0c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005bb4:	4b46      	ldr	r3, [pc, #280]	; (8005cd0 <HAL_RCC_ClockConfig+0x28c>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0f0      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d107      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005bc6:	4b41      	ldr	r3, [pc, #260]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bcc:	4a3f      	ldr	r2, [pc, #252]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005bce:	f023 0304 	bic.w	r3, r3, #4
 8005bd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005bd6:	4b3d      	ldr	r3, [pc, #244]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d121      	bne.n	8005c26 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e112      	b.n	8005e0c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d107      	bne.n	8005bfe <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bee:	4b37      	ldr	r3, [pc, #220]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d115      	bne.n	8005c26 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e106      	b.n	8005e0c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d107      	bne.n	8005c16 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005c06:	4b31      	ldr	r3, [pc, #196]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e0fa      	b.n	8005e0c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c16:	4b2d      	ldr	r3, [pc, #180]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e0f2      	b.n	8005e0c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005c26:	4b29      	ldr	r3, [pc, #164]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f023 0203 	bic.w	r2, r3, #3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	4926      	ldr	r1, [pc, #152]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005c38:	f7fb fe4a 	bl	80018d0 <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d112      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c46:	e00a      	b.n	8005c5e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c48:	f7fb fe42 	bl	80018d0 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e0d6      	b.n	8005e0c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c5e:	4b1b      	ldr	r3, [pc, #108]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f003 030c 	and.w	r3, r3, #12
 8005c66:	2b0c      	cmp	r3, #12
 8005c68:	d1ee      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x204>
 8005c6a:	e044      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d112      	bne.n	8005c9a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c74:	e00a      	b.n	8005c8c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c76:	f7fb fe2b 	bl	80018d0 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e0bf      	b.n	8005e0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	f003 030c 	and.w	r3, r3, #12
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d1ee      	bne.n	8005c76 <HAL_RCC_ClockConfig+0x232>
 8005c98:	e02d      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d123      	bne.n	8005cea <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ca2:	e00a      	b.n	8005cba <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca4:	f7fb fe14 	bl	80018d0 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e0a8      	b.n	8005e0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cba:	4b04      	ldr	r3, [pc, #16]	; (8005ccc <HAL_RCC_ClockConfig+0x288>)
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f003 030c 	and.w	r3, r3, #12
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1ee      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0x260>
 8005cc6:	e016      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x2b2>
 8005cc8:	40022000 	.word	0x40022000
 8005ccc:	46020c00 	.word	0x46020c00
 8005cd0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd4:	f7fb fdfc 	bl	80018d0 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e090      	b.n	8005e0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cea:	4b4a      	ldr	r3, [pc, #296]	; (8005e14 <HAL_RCC_ClockConfig+0x3d0>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f003 030c 	and.w	r3, r3, #12
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d1ee      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d010      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	4b43      	ldr	r3, [pc, #268]	; (8005e14 <HAL_RCC_ClockConfig+0x3d0>)
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d208      	bcs.n	8005d24 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005d12:	4b40      	ldr	r3, [pc, #256]	; (8005e14 <HAL_RCC_ClockConfig+0x3d0>)
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f023 020f 	bic.w	r2, r3, #15
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	493d      	ldr	r1, [pc, #244]	; (8005e14 <HAL_RCC_ClockConfig+0x3d0>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d24:	4b3c      	ldr	r3, [pc, #240]	; (8005e18 <HAL_RCC_ClockConfig+0x3d4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d210      	bcs.n	8005d54 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d32:	4b39      	ldr	r3, [pc, #228]	; (8005e18 <HAL_RCC_ClockConfig+0x3d4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 020f 	bic.w	r2, r3, #15
 8005d3a:	4937      	ldr	r1, [pc, #220]	; (8005e18 <HAL_RCC_ClockConfig+0x3d4>)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d42:	4b35      	ldr	r3, [pc, #212]	; (8005e18 <HAL_RCC_ClockConfig+0x3d4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e05b      	b.n	8005e0c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d010      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	4b2b      	ldr	r3, [pc, #172]	; (8005e14 <HAL_RCC_ClockConfig+0x3d0>)
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d208      	bcs.n	8005d82 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005d70:	4b28      	ldr	r3, [pc, #160]	; (8005e14 <HAL_RCC_ClockConfig+0x3d0>)
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	4925      	ldr	r1, [pc, #148]	; (8005e14 <HAL_RCC_ClockConfig+0x3d0>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d012      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	4b20      	ldr	r3, [pc, #128]	; (8005e14 <HAL_RCC_ClockConfig+0x3d0>)
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	091b      	lsrs	r3, r3, #4
 8005d98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d209      	bcs.n	8005db4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005da0:	4b1c      	ldr	r3, [pc, #112]	; (8005e14 <HAL_RCC_ClockConfig+0x3d0>)
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	4919      	ldr	r1, [pc, #100]	; (8005e14 <HAL_RCC_ClockConfig+0x3d0>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d010      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	695a      	ldr	r2, [r3, #20]
 8005dc4:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <HAL_RCC_ClockConfig+0x3d0>)
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d208      	bcs.n	8005de2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005dd0:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <HAL_RCC_ClockConfig+0x3d0>)
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	490d      	ldr	r1, [pc, #52]	; (8005e14 <HAL_RCC_ClockConfig+0x3d0>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005de2:	f000 f821 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8005de6:	4602      	mov	r2, r0
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <HAL_RCC_ClockConfig+0x3d0>)
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	490a      	ldr	r1, [pc, #40]	; (8005e1c <HAL_RCC_ClockConfig+0x3d8>)
 8005df2:	5ccb      	ldrb	r3, [r1, r3]
 8005df4:	fa22 f303 	lsr.w	r3, r2, r3
 8005df8:	4a09      	ldr	r2, [pc, #36]	; (8005e20 <HAL_RCC_ClockConfig+0x3dc>)
 8005dfa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005dfc:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <HAL_RCC_ClockConfig+0x3e0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fb fbc7 	bl	8001594 <HAL_InitTick>
 8005e06:	4603      	mov	r3, r0
 8005e08:	73fb      	strb	r3, [r7, #15]

  return status;
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	46020c00 	.word	0x46020c00
 8005e18:	40022000 	.word	0x40022000
 8005e1c:	080153ec 	.word	0x080153ec
 8005e20:	20000000 	.word	0x20000000
 8005e24:	20000004 	.word	0x20000004

08005e28 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b08b      	sub	sp, #44	; 0x2c
 8005e2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e36:	4b7b      	ldr	r3, [pc, #492]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
 8005e3e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e40:	4b78      	ldr	r3, [pc, #480]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	f003 0303 	and.w	r3, r3, #3
 8005e48:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <HAL_RCC_GetSysClockFreq+0x34>
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2b0c      	cmp	r3, #12
 8005e54:	d121      	bne.n	8005e9a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d11e      	bne.n	8005e9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005e5c:	4b71      	ldr	r3, [pc, #452]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d107      	bne.n	8005e78 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005e68:	4b6e      	ldr	r3, [pc, #440]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e6e:	0b1b      	lsrs	r3, r3, #12
 8005e70:	f003 030f 	and.w	r3, r3, #15
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
 8005e76:	e005      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005e78:	4b6a      	ldr	r3, [pc, #424]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	0f1b      	lsrs	r3, r3, #28
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e84:	4a68      	ldr	r2, [pc, #416]	; (8006028 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d110      	bne.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e98:	e00d      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e9a:	4b62      	ldr	r3, [pc, #392]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	f003 030c 	and.w	r3, r3, #12
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d102      	bne.n	8005eac <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ea6:	4b61      	ldr	r3, [pc, #388]	; (800602c <HAL_RCC_GetSysClockFreq+0x204>)
 8005ea8:	623b      	str	r3, [r7, #32]
 8005eaa:	e004      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d101      	bne.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005eb2:	4b5e      	ldr	r3, [pc, #376]	; (800602c <HAL_RCC_GetSysClockFreq+0x204>)
 8005eb4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	2b0c      	cmp	r3, #12
 8005eba:	f040 80ac 	bne.w	8006016 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005ebe:	4b59      	ldr	r3, [pc, #356]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005ec8:	4b56      	ldr	r3, [pc, #344]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	0a1b      	lsrs	r3, r3, #8
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005ed6:	4b53      	ldr	r3, [pc, #332]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	091b      	lsrs	r3, r3, #4
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ee2:	4b50      	ldr	r3, [pc, #320]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	08db      	lsrs	r3, r3, #3
 8005ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8086 	beq.w	8006012 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d003      	beq.n	8005f14 <HAL_RCC_GetSysClockFreq+0xec>
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d022      	beq.n	8005f58 <HAL_RCC_GetSysClockFreq+0x130>
 8005f12:	e043      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8006030 <HAL_RCC_GetSysClockFreq+0x208>
 8005f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f26:	4b3f      	ldr	r3, [pc, #252]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f36:	ed97 6a01 	vldr	s12, [r7, #4]
 8005f3a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006034 <HAL_RCC_GetSysClockFreq+0x20c>
 8005f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f52:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005f56:	e046      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	eddf 6a33 	vldr	s13, [pc, #204]	; 8006030 <HAL_RCC_GetSysClockFreq+0x208>
 8005f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6a:	4b2e      	ldr	r3, [pc, #184]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f7a:	ed97 6a01 	vldr	s12, [r7, #4]
 8005f7e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006034 <HAL_RCC_GetSysClockFreq+0x20c>
 8005f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f96:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005f9a:	e024      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	ee07 3a90 	vmov	s15, r3
 8005fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005fc4:	ed97 6a01 	vldr	s12, [r7, #4]
 8005fc8:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8006034 <HAL_RCC_GetSysClockFreq+0x20c>
 8005fcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005fd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe0:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005fe4:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005fe6:	4b0f      	ldr	r3, [pc, #60]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fea:	0e1b      	lsrs	r3, r3, #24
 8005fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ffe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800600a:	ee17 3a90 	vmov	r3, s15
 800600e:	623b      	str	r3, [r7, #32]
 8006010:	e001      	b.n	8006016 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8006016:	6a3b      	ldr	r3, [r7, #32]
}
 8006018:	4618      	mov	r0, r3
 800601a:	372c      	adds	r7, #44	; 0x2c
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	46020c00 	.word	0x46020c00
 8006028:	08015404 	.word	0x08015404
 800602c:	00f42400 	.word	0x00f42400
 8006030:	4b742400 	.word	0x4b742400
 8006034:	46000000 	.word	0x46000000

08006038 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800603c:	f7ff fef4 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8006040:	4602      	mov	r2, r0
 8006042:	4b07      	ldr	r3, [pc, #28]	; (8006060 <HAL_RCC_GetHCLKFreq+0x28>)
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	4906      	ldr	r1, [pc, #24]	; (8006064 <HAL_RCC_GetHCLKFreq+0x2c>)
 800604c:	5ccb      	ldrb	r3, [r1, r3]
 800604e:	fa22 f303 	lsr.w	r3, r2, r3
 8006052:	4a05      	ldr	r2, [pc, #20]	; (8006068 <HAL_RCC_GetHCLKFreq+0x30>)
 8006054:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006056:	4b04      	ldr	r3, [pc, #16]	; (8006068 <HAL_RCC_GetHCLKFreq+0x30>)
 8006058:	681b      	ldr	r3, [r3, #0]
}
 800605a:	4618      	mov	r0, r3
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	46020c00 	.word	0x46020c00
 8006064:	080153ec 	.word	0x080153ec
 8006068:	20000000 	.word	0x20000000

0800606c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006070:	f7ff ffe2 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 8006074:	4602      	mov	r2, r0
 8006076:	4b05      	ldr	r3, [pc, #20]	; (800608c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	091b      	lsrs	r3, r3, #4
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	4903      	ldr	r1, [pc, #12]	; (8006090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006082:	5ccb      	ldrb	r3, [r1, r3]
 8006084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006088:	4618      	mov	r0, r3
 800608a:	bd80      	pop	{r7, pc}
 800608c:	46020c00 	.word	0x46020c00
 8006090:	080153fc 	.word	0x080153fc

08006094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006098:	f7ff ffce 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 800609c:	4602      	mov	r2, r0
 800609e:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	0a1b      	lsrs	r3, r3, #8
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	4903      	ldr	r1, [pc, #12]	; (80060b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060aa:	5ccb      	ldrb	r3, [r1, r3]
 80060ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	46020c00 	.word	0x46020c00
 80060b8:	080153fc 	.word	0x080153fc

080060bc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80060c0:	f7ff ffba 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 80060c4:	4602      	mov	r2, r0
 80060c6:	4b05      	ldr	r3, [pc, #20]	; (80060dc <HAL_RCC_GetPCLK3Freq+0x20>)
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	091b      	lsrs	r3, r3, #4
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	4903      	ldr	r1, [pc, #12]	; (80060e0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80060d2:	5ccb      	ldrb	r3, [r1, r3]
 80060d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060d8:	4618      	mov	r0, r3
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	46020c00 	.word	0x46020c00
 80060e0:	080153fc 	.word	0x080153fc

080060e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	221f      	movs	r2, #31
 80060f2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80060f4:	4b15      	ldr	r3, [pc, #84]	; (800614c <HAL_RCC_GetClockConfig+0x68>)
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f003 0203 	and.w	r2, r3, #3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006100:	4b12      	ldr	r3, [pc, #72]	; (800614c <HAL_RCC_GetClockConfig+0x68>)
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f003 020f 	and.w	r2, r3, #15
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800610c:	4b0f      	ldr	r3, [pc, #60]	; (800614c <HAL_RCC_GetClockConfig+0x68>)
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8006118:	4b0c      	ldr	r3, [pc, #48]	; (800614c <HAL_RCC_GetClockConfig+0x68>)
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	091b      	lsrs	r3, r3, #4
 800611e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8006126:	4b09      	ldr	r3, [pc, #36]	; (800614c <HAL_RCC_GetClockConfig+0x68>)
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006132:	4b07      	ldr	r3, [pc, #28]	; (8006150 <HAL_RCC_GetClockConfig+0x6c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 020f 	and.w	r2, r3, #15
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	601a      	str	r2, [r3, #0]
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	46020c00 	.word	0x46020c00
 8006150:	40022000 	.word	0x40022000

08006154 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800615c:	4b3e      	ldr	r3, [pc, #248]	; (8006258 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800615e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800616a:	f7fe fcd5 	bl	8004b18 <HAL_PWREx_GetVoltageRange>
 800616e:	6178      	str	r0, [r7, #20]
 8006170:	e019      	b.n	80061a6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006172:	4b39      	ldr	r3, [pc, #228]	; (8006258 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006178:	4a37      	ldr	r2, [pc, #220]	; (8006258 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800617a:	f043 0304 	orr.w	r3, r3, #4
 800617e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006182:	4b35      	ldr	r3, [pc, #212]	; (8006258 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006190:	f7fe fcc2 	bl	8004b18 <HAL_PWREx_GetVoltageRange>
 8006194:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006196:	4b30      	ldr	r3, [pc, #192]	; (8006258 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800619c:	4a2e      	ldr	r2, [pc, #184]	; (8006258 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800619e:	f023 0304 	bic.w	r3, r3, #4
 80061a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80061ac:	d003      	beq.n	80061b6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061b4:	d109      	bne.n	80061ca <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061bc:	d202      	bcs.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80061be:	2301      	movs	r3, #1
 80061c0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80061c2:	e033      	b.n	800622c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80061c4:	2300      	movs	r3, #0
 80061c6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80061c8:	e030      	b.n	800622c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061d0:	d208      	bcs.n	80061e4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d8:	d102      	bne.n	80061e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80061da:	2303      	movs	r3, #3
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	e025      	b.n	800622c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e035      	b.n	8006250 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ea:	d90f      	bls.n	800620c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061f8:	d902      	bls.n	8006200 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80061fa:	2300      	movs	r3, #0
 80061fc:	613b      	str	r3, [r7, #16]
 80061fe:	e015      	b.n	800622c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006200:	2301      	movs	r3, #1
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	e012      	b.n	800622c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006206:	2300      	movs	r3, #0
 8006208:	613b      	str	r3, [r7, #16]
 800620a:	e00f      	b.n	800622c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006212:	d109      	bne.n	8006228 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800621a:	d102      	bne.n	8006222 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800621c:	2301      	movs	r3, #1
 800621e:	613b      	str	r3, [r7, #16]
 8006220:	e004      	b.n	800622c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006222:	2302      	movs	r3, #2
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	e001      	b.n	800622c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006228:	2301      	movs	r3, #1
 800622a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f023 020f 	bic.w	r2, r3, #15
 8006234:	4909      	ldr	r1, [pc, #36]	; (800625c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800623c:	4b07      	ldr	r3, [pc, #28]	; (800625c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	429a      	cmp	r2, r3
 8006248:	d001      	beq.n	800624e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	46020c00 	.word	0x46020c00
 800625c:	40022000 	.word	0x40022000

08006260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006264:	b0ba      	sub	sp, #232	; 0xe8
 8006266:	af00      	add	r7, sp, #0
 8006268:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800626c:	2300      	movs	r3, #0
 800626e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006272:	2300      	movs	r3, #0
 8006274:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f002 0401 	and.w	r4, r2, #1
 8006284:	2500      	movs	r5, #0
 8006286:	ea54 0305 	orrs.w	r3, r4, r5
 800628a:	d00b      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800628c:	4bcb      	ldr	r3, [pc, #812]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800628e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006292:	f023 0103 	bic.w	r1, r3, #3
 8006296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800629a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800629c:	4ac7      	ldr	r2, [pc, #796]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800629e:	430b      	orrs	r3, r1
 80062a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	f002 0802 	and.w	r8, r2, #2
 80062b0:	f04f 0900 	mov.w	r9, #0
 80062b4:	ea58 0309 	orrs.w	r3, r8, r9
 80062b8:	d00b      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80062ba:	4bc0      	ldr	r3, [pc, #768]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062c0:	f023 010c 	bic.w	r1, r3, #12
 80062c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ca:	4abc      	ldr	r2, [pc, #752]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062cc:	430b      	orrs	r3, r1
 80062ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	f002 0a04 	and.w	sl, r2, #4
 80062de:	f04f 0b00 	mov.w	fp, #0
 80062e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80062e6:	d00b      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80062e8:	4bb4      	ldr	r3, [pc, #720]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062ee:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80062f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f8:	4ab0      	ldr	r2, [pc, #704]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062fa:	430b      	orrs	r3, r1
 80062fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006300:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f002 0308 	and.w	r3, r2, #8
 800630c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006310:	2300      	movs	r3, #0
 8006312:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006316:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800631a:	460b      	mov	r3, r1
 800631c:	4313      	orrs	r3, r2
 800631e:	d00b      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006320:	4ba6      	ldr	r3, [pc, #664]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006326:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800632a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800632e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006330:	4aa2      	ldr	r2, [pc, #648]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006332:	430b      	orrs	r3, r1
 8006334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006338:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	f002 0310 	and.w	r3, r2, #16
 8006344:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006348:	2300      	movs	r3, #0
 800634a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800634e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006352:	460b      	mov	r3, r1
 8006354:	4313      	orrs	r3, r2
 8006356:	d00b      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006358:	4b98      	ldr	r3, [pc, #608]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800635a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800635e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006368:	4a94      	ldr	r2, [pc, #592]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800636a:	430b      	orrs	r3, r1
 800636c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f002 0320 	and.w	r3, r2, #32
 800637c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006380:	2300      	movs	r3, #0
 8006382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006386:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800638a:	460b      	mov	r3, r1
 800638c:	4313      	orrs	r3, r2
 800638e:	d00b      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006390:	4b8a      	ldr	r3, [pc, #552]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006392:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006396:	f023 0107 	bic.w	r1, r3, #7
 800639a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800639e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a0:	4a86      	ldr	r2, [pc, #536]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063a2:	430b      	orrs	r3, r1
 80063a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80063b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063b8:	2300      	movs	r3, #0
 80063ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4313      	orrs	r3, r2
 80063c6:	d00b      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80063c8:	4b7c      	ldr	r3, [pc, #496]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063ce:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80063d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063d8:	4a78      	ldr	r2, [pc, #480]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063da:	430b      	orrs	r3, r1
 80063dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80063ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063f0:	2300      	movs	r3, #0
 80063f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80063fa:	460b      	mov	r3, r1
 80063fc:	4313      	orrs	r3, r2
 80063fe:	d00b      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006400:	4b6e      	ldr	r3, [pc, #440]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006406:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800640a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800640e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006410:	4a6a      	ldr	r2, [pc, #424]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006412:	430b      	orrs	r3, r1
 8006414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006418:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8006424:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006428:	2300      	movs	r3, #0
 800642a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800642e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006432:	460b      	mov	r3, r1
 8006434:	4313      	orrs	r3, r2
 8006436:	d00b      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006438:	4b60      	ldr	r3, [pc, #384]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800643a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800643e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006448:	4a5c      	ldr	r2, [pc, #368]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800644a:	430b      	orrs	r3, r1
 800644c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006450:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800645c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006460:	2300      	movs	r3, #0
 8006462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006466:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800646a:	460b      	mov	r3, r1
 800646c:	4313      	orrs	r3, r2
 800646e:	d00b      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006470:	4b52      	ldr	r3, [pc, #328]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006476:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800647a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800647e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006480:	4a4e      	ldr	r2, [pc, #312]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006482:	430b      	orrs	r3, r1
 8006484:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006488:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8006494:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006498:	2300      	movs	r3, #0
 800649a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800649e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80064a2:	460b      	mov	r3, r1
 80064a4:	4313      	orrs	r3, r2
 80064a6:	d00b      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80064a8:	4b44      	ldr	r3, [pc, #272]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064ae:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80064b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064b8:	4a40      	ldr	r2, [pc, #256]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064ba:	430b      	orrs	r3, r1
 80064bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80064cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064d0:	2300      	movs	r3, #0
 80064d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80064d6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80064da:	460b      	mov	r3, r1
 80064dc:	4313      	orrs	r3, r2
 80064de:	d00b      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80064e0:	4b36      	ldr	r3, [pc, #216]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064e6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80064ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064f0:	4a32      	ldr	r2, [pc, #200]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064f2:	430b      	orrs	r3, r1
 80064f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80064f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006504:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006508:	2300      	movs	r3, #0
 800650a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800650e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006512:	460b      	mov	r3, r1
 8006514:	4313      	orrs	r3, r2
 8006516:	d00c      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006518:	4b28      	ldr	r3, [pc, #160]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800651a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800651e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800652a:	4a24      	ldr	r2, [pc, #144]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800652c:	430b      	orrs	r3, r1
 800652e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800653e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006540:	2300      	movs	r3, #0
 8006542:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006544:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006548:	460b      	mov	r3, r1
 800654a:	4313      	orrs	r3, r2
 800654c:	d04f      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800654e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006556:	2b80      	cmp	r3, #128	; 0x80
 8006558:	d02d      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800655a:	2b80      	cmp	r3, #128	; 0x80
 800655c:	d827      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800655e:	2b60      	cmp	r3, #96	; 0x60
 8006560:	d02e      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006562:	2b60      	cmp	r3, #96	; 0x60
 8006564:	d823      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006566:	2b40      	cmp	r3, #64	; 0x40
 8006568:	d006      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800656a:	2b40      	cmp	r3, #64	; 0x40
 800656c:	d81f      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800656e:	2b00      	cmp	r3, #0
 8006570:	d009      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8006572:	2b20      	cmp	r3, #32
 8006574:	d011      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006576:	e01a      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006578:	4b10      	ldr	r3, [pc, #64]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	4a0f      	ldr	r2, [pc, #60]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800657e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006582:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006584:	e01d      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800658a:	3308      	adds	r3, #8
 800658c:	4618      	mov	r0, r3
 800658e:	f002 fa41 	bl	8008a14 <RCCEx_PLL2_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006598:	e013      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800659a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800659e:	332c      	adds	r3, #44	; 0x2c
 80065a0:	4618      	mov	r0, r3
 80065a2:	f002 facf 	bl	8008b44 <RCCEx_PLL3_Config>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80065ac:	e009      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80065b4:	e005      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80065b6:	bf00      	nop
 80065b8:	e003      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80065ba:	bf00      	nop
 80065bc:	46020c00 	.word	0x46020c00
        break;
 80065c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10d      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80065ca:	4bb6      	ldr	r3, [pc, #728]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80065cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80065d0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80065d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065dc:	4ab1      	ldr	r2, [pc, #708]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80065de:	430b      	orrs	r3, r1
 80065e0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80065e4:	e003      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065ea:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80065ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80065fa:	673b      	str	r3, [r7, #112]	; 0x70
 80065fc:	2300      	movs	r3, #0
 80065fe:	677b      	str	r3, [r7, #116]	; 0x74
 8006600:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006604:	460b      	mov	r3, r1
 8006606:	4313      	orrs	r3, r2
 8006608:	d053      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800660a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800660e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006616:	d033      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661c:	d82c      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800661e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006622:	d02f      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006628:	d826      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800662a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800662e:	d008      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006634:	d820      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800663a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663e:	d011      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006640:	e01a      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006642:	4b98      	ldr	r3, [pc, #608]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006646:	4a97      	ldr	r2, [pc, #604]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800664c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800664e:	e01a      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006650:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006654:	3308      	adds	r3, #8
 8006656:	4618      	mov	r0, r3
 8006658:	f002 f9dc 	bl	8008a14 <RCCEx_PLL2_Config>
 800665c:	4603      	mov	r3, r0
 800665e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006662:	e010      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006668:	332c      	adds	r3, #44	; 0x2c
 800666a:	4618      	mov	r0, r3
 800666c:	f002 fa6a 	bl	8008b44 <RCCEx_PLL3_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006676:	e006      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800667e:	e002      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006680:	bf00      	nop
 8006682:	e000      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006686:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10d      	bne.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800668e:	4b85      	ldr	r3, [pc, #532]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006690:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006694:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006698:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800669c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066a0:	4a80      	ldr	r2, [pc, #512]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80066a2:	430b      	orrs	r3, r1
 80066a4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80066a8:	e003      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80066ae:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80066b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80066be:	66bb      	str	r3, [r7, #104]	; 0x68
 80066c0:	2300      	movs	r3, #0
 80066c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066c4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80066c8:	460b      	mov	r3, r1
 80066ca:	4313      	orrs	r3, r2
 80066cc:	d046      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80066ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066d6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80066da:	d028      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80066dc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80066e0:	d821      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80066e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066e6:	d022      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80066e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066ec:	d81b      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80066ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066f2:	d01c      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80066f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066f8:	d815      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80066fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066fe:	d008      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006704:	d80f      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d011      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800670a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670e:	d00e      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006710:	e009      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006716:	3308      	adds	r3, #8
 8006718:	4618      	mov	r0, r3
 800671a:	f002 f97b 	bl	8008a14 <RCCEx_PLL2_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006724:	e004      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800672c:	e000      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800672e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006730:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10d      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006738:	4b5a      	ldr	r3, [pc, #360]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800673a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800673e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006746:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800674a:	4a56      	ldr	r2, [pc, #344]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800674c:	430b      	orrs	r3, r1
 800674e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006752:	e003      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006758:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800675c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006768:	663b      	str	r3, [r7, #96]	; 0x60
 800676a:	2300      	movs	r3, #0
 800676c:	667b      	str	r3, [r7, #100]	; 0x64
 800676e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006772:	460b      	mov	r3, r1
 8006774:	4313      	orrs	r3, r2
 8006776:	d03f      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006778:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800677c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006780:	2b04      	cmp	r3, #4
 8006782:	d81e      	bhi.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006784:	a201      	add	r2, pc, #4	; (adr r2, 800678c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678a:	bf00      	nop
 800678c:	080067cb 	.word	0x080067cb
 8006790:	080067a1 	.word	0x080067a1
 8006794:	080067af 	.word	0x080067af
 8006798:	080067cb 	.word	0x080067cb
 800679c:	080067cb 	.word	0x080067cb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067a0:	4b40      	ldr	r3, [pc, #256]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a4:	4a3f      	ldr	r2, [pc, #252]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067aa:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80067ac:	e00e      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067b2:	332c      	adds	r3, #44	; 0x2c
 80067b4:	4618      	mov	r0, r3
 80067b6:	f002 f9c5 	bl	8008b44 <RCCEx_PLL3_Config>
 80067ba:	4603      	mov	r3, r0
 80067bc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067c0:	e004      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067c8:	e000      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80067ca:	bf00      	nop
    }
    if (ret == HAL_OK)
 80067cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10d      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80067d4:	4b33      	ldr	r3, [pc, #204]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067da:	f023 0107 	bic.w	r1, r3, #7
 80067de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e6:	4a2f      	ldr	r2, [pc, #188]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067e8:	430b      	orrs	r3, r1
 80067ea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80067ee:	e003      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067f4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80067f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006800:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006804:	65bb      	str	r3, [r7, #88]	; 0x58
 8006806:	2300      	movs	r3, #0
 8006808:	65fb      	str	r3, [r7, #92]	; 0x5c
 800680a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800680e:	460b      	mov	r3, r1
 8006810:	4313      	orrs	r3, r2
 8006812:	d04d      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800681c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006820:	d028      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006822:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006826:	d821      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006828:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800682c:	d024      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800682e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006832:	d81b      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006838:	d00e      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800683a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800683e:	d815      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d01b      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8006844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006848:	d110      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800684a:	4b16      	ldr	r3, [pc, #88]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800684c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684e:	4a15      	ldr	r2, [pc, #84]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006854:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006856:	e012      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006858:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800685c:	332c      	adds	r3, #44	; 0x2c
 800685e:	4618      	mov	r0, r3
 8006860:	f002 f970 	bl	8008b44 <RCCEx_PLL3_Config>
 8006864:	4603      	mov	r3, r0
 8006866:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800686a:	e008      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006872:	e004      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006874:	bf00      	nop
 8006876:	e002      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006878:	bf00      	nop
 800687a:	e000      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800687c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800687e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d110      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006886:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006888:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800688c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006898:	4a02      	ldr	r2, [pc, #8]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800689a:	430b      	orrs	r3, r1
 800689c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80068a0:	e006      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80068a2:	bf00      	nop
 80068a4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068ac:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80068bc:	653b      	str	r3, [r7, #80]	; 0x50
 80068be:	2300      	movs	r3, #0
 80068c0:	657b      	str	r3, [r7, #84]	; 0x54
 80068c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80068c6:	460b      	mov	r3, r1
 80068c8:	4313      	orrs	r3, r2
 80068ca:	f000 80b5 	beq.w	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ce:	2300      	movs	r3, #0
 80068d0:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d4:	4b9d      	ldr	r3, [pc, #628]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d113      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068e2:	4b9a      	ldr	r3, [pc, #616]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068e8:	4a98      	ldr	r2, [pc, #608]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068ea:	f043 0304 	orr.w	r3, r3, #4
 80068ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80068f2:	4b96      	ldr	r3, [pc, #600]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006904:	2301      	movs	r3, #1
 8006906:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800690a:	4b91      	ldr	r3, [pc, #580]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690e:	4a90      	ldr	r2, [pc, #576]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006910:	f043 0301 	orr.w	r3, r3, #1
 8006914:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006916:	f7fa ffdb 	bl	80018d0 <HAL_GetTick>
 800691a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800691e:	e00b      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006920:	f7fa ffd6 	bl	80018d0 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d903      	bls.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006936:	e005      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006938:	4b85      	ldr	r3, [pc, #532]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0ed      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8006944:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d165      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800694c:	4b7f      	ldr	r3, [pc, #508]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800694e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800695a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695e:	2b00      	cmp	r3, #0
 8006960:	d023      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8006962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006966:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696e:	4293      	cmp	r3, r2
 8006970:	d01b      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006972:	4b76      	ldr	r3, [pc, #472]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800697c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006980:	4b72      	ldr	r3, [pc, #456]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006986:	4a71      	ldr	r2, [pc, #452]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800698c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006990:	4b6e      	ldr	r3, [pc, #440]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006996:	4a6d      	ldr	r2, [pc, #436]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800699c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069a0:	4a6a      	ldr	r2, [pc, #424]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d019      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b6:	f7fa ff8b 	bl	80018d0 <HAL_GetTick>
 80069ba:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069be:	e00d      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069c0:	f7fa ff86 	bl	80018d0 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ca:	1ad2      	subs	r2, r2, r3
 80069cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d903      	bls.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80069da:	e006      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069dc:	4b5b      	ldr	r3, [pc, #364]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0ea      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80069ea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10d      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80069f2:	4b56      	ldr	r3, [pc, #344]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006a04:	4a51      	ldr	r2, [pc, #324]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a06:	430b      	orrs	r3, r1
 8006a08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006a0c:	e008      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a12:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006a16:	e003      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a18:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a1c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a20:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d107      	bne.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a28:	4b48      	ldr	r3, [pc, #288]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a2e:	4a47      	ldr	r2, [pc, #284]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a30:	f023 0304 	bic.w	r3, r3, #4
 8006a34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006a38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006a44:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a46:	2300      	movs	r3, #0
 8006a48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a4a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4313      	orrs	r3, r2
 8006a52:	d042      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006a54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a5c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a60:	d022      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006a62:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a66:	d81b      	bhi.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006a68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a6c:	d011      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a72:	d815      	bhi.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d019      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a7c:	d110      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a82:	3308      	adds	r3, #8
 8006a84:	4618      	mov	r0, r3
 8006a86:	f001 ffc5 	bl	8008a14 <RCCEx_PLL2_Config>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a90:	e00d      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a92:	4b2e      	ldr	r3, [pc, #184]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	4a2d      	ldr	r2, [pc, #180]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a9c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006a9e:	e006      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006aa6:	e002      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006aa8:	bf00      	nop
 8006aaa:	e000      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006aac:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006aae:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10d      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006ab6:	4b25      	ldr	r3, [pc, #148]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006abc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006ac0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ac4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ac8:	4a20      	ldr	r2, [pc, #128]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006aca:	430b      	orrs	r3, r1
 8006acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ad0:	e003      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ad6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006ae6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ae8:	2300      	movs	r3, #0
 8006aea:	647b      	str	r3, [r7, #68]	; 0x44
 8006aec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006af0:	460b      	mov	r3, r1
 8006af2:	4313      	orrs	r3, r2
 8006af4:	d032      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b02:	d00b      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b08:	d804      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d008      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b12:	d007      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006b1a:	e004      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006b1c:	bf00      	nop
 8006b1e:	e002      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006b20:	bf00      	nop
 8006b22:	e000      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006b24:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006b26:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d112      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006b2e:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b40:	4a02      	ldr	r2, [pc, #8]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b42:	430b      	orrs	r3, r1
 8006b44:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006b48:	e008      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006b4a:	bf00      	nop
 8006b4c:	46020c00 	.word	0x46020c00
 8006b50:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b54:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b58:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006b5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006b68:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006b72:	460b      	mov	r3, r1
 8006b74:	4313      	orrs	r3, r2
 8006b76:	d00c      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006b78:	4b98      	ldr	r3, [pc, #608]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b7e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b8a:	4a94      	ldr	r2, [pc, #592]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4313      	orrs	r3, r2
 8006bac:	d019      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006bb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bba:	d105      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006bbc:	4b87      	ldr	r3, [pc, #540]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc0:	4a86      	ldr	r2, [pc, #536]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc6:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006bc8:	4b84      	ldr	r3, [pc, #528]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bce:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006bda:	4a80      	ldr	r2, [pc, #512]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	d00c      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006bfe:	4b77      	ldr	r3, [pc, #476]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c10:	4972      	ldr	r1, [pc, #456]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006c18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006c24:	623b      	str	r3, [r7, #32]
 8006c26:	2300      	movs	r3, #0
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4313      	orrs	r3, r2
 8006c32:	d00c      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006c34:	4b69      	ldr	r3, [pc, #420]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006c46:	4965      	ldr	r1, [pc, #404]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006c5a:	61bb      	str	r3, [r7, #24]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61fb      	str	r3, [r7, #28]
 8006c60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c64:	460b      	mov	r3, r1
 8006c66:	4313      	orrs	r3, r2
 8006c68:	d00c      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006c6a:	4b5c      	ldr	r3, [pc, #368]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c70:	f023 0218 	bic.w	r2, r3, #24
 8006c74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006c7c:	4957      	ldr	r1, [pc, #348]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	2300      	movs	r3, #0
 8006c94:	617b      	str	r3, [r7, #20]
 8006c96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	d032      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006ca0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cac:	d105      	bne.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cae:	4b4b      	ldr	r3, [pc, #300]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb2:	4a4a      	ldr	r2, [pc, #296]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cb8:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cc6:	d108      	bne.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ccc:	3308      	adds	r3, #8
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f001 fea0 	bl	8008a14 <RCCEx_PLL2_Config>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006cda:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10d      	bne.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006ce2:	4b3e      	ldr	r3, [pc, #248]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ce4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ce8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cf4:	4939      	ldr	r1, [pc, #228]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006cfc:	e003      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d02:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006d06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006d12:	60bb      	str	r3, [r7, #8]
 8006d14:	2300      	movs	r3, #0
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	d03a      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d2e:	d00e      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006d30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d34:	d815      	bhi.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d017      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006d3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d3e:	d110      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d40:	4b26      	ldr	r3, [pc, #152]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	4a25      	ldr	r2, [pc, #148]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d4a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006d4c:	e00e      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d52:	3308      	adds	r3, #8
 8006d54:	4618      	mov	r0, r3
 8006d56:	f001 fe5d 	bl	8008a14 <RCCEx_PLL2_Config>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006d60:	e004      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006d68:	e000      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006d6a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d6c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10d      	bne.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006d74:	4b19      	ldr	r3, [pc, #100]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d86:	4915      	ldr	r1, [pc, #84]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006d8e:	e003      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d90:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d94:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006d98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006da4:	603b      	str	r3, [r7, #0]
 8006da6:	2300      	movs	r3, #0
 8006da8:	607b      	str	r3, [r7, #4]
 8006daa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006dae:	460b      	mov	r3, r1
 8006db0:	4313      	orrs	r3, r2
 8006db2:	d00c      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006db4:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006dc6:	4905      	ldr	r1, [pc, #20]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006dce:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	37e8      	adds	r7, #232	; 0xe8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ddc:	46020c00 	.word	0x46020c00

08006de0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b089      	sub	sp, #36	; 0x24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006de8:	4bad      	ldr	r3, [pc, #692]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006df2:	4bab      	ldr	r3, [pc, #684]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006dfc:	4ba8      	ldr	r3, [pc, #672]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e00:	0a1b      	lsrs	r3, r3, #8
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	3301      	adds	r3, #1
 8006e08:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006e0a:	4ba5      	ldr	r3, [pc, #660]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	091b      	lsrs	r3, r3, #4
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006e16:	4ba2      	ldr	r3, [pc, #648]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1a:	08db      	lsrs	r3, r3, #3
 8006e1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	fb02 f303 	mul.w	r3, r2, r3
 8006e26:	ee07 3a90 	vmov	s15, r3
 8006e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8123 	beq.w	8007080 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d062      	beq.n	8006f06 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	f200 8081 	bhi.w	8006f4a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d024      	beq.n	8006e98 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d17a      	bne.n	8006f4a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	eddf 6a91 	vldr	s13, [pc, #580]	; 80070a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e66:	4b8e      	ldr	r3, [pc, #568]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e7a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80070a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e96:	e08f      	b.n	8006fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006e98:	4b81      	ldr	r3, [pc, #516]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8006ea4:	4b7e      	ldr	r3, [pc, #504]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	0f1b      	lsrs	r3, r3, #28
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	e006      	b.n	8006ebe <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8006eb0:	4b7b      	ldr	r3, [pc, #492]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006eb6:	041b      	lsls	r3, r3, #16
 8006eb8:	0f1b      	lsrs	r3, r3, #28
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	4a7b      	ldr	r2, [pc, #492]	; (80070ac <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8006ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	ee07 3a90 	vmov	s15, r3
 8006ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ee8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80070a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f04:	e058      	b.n	8006fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	ee07 3a90 	vmov	s15, r3
 8006f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f10:	eddf 6a64 	vldr	s13, [pc, #400]	; 80070a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006f14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f18:	4b61      	ldr	r3, [pc, #388]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f20:	ee07 3a90 	vmov	s15, r3
 8006f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f28:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f2c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80070a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006f30:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f34:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f48:	e036      	b.n	8006fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006f4a:	4b55      	ldr	r3, [pc, #340]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d005      	beq.n	8006f62 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8006f56:	4b52      	ldr	r3, [pc, #328]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	0f1b      	lsrs	r3, r3, #28
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	e006      	b.n	8006f70 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8006f62:	4b4f      	ldr	r3, [pc, #316]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f68:	041b      	lsls	r3, r3, #16
 8006f6a:	0f1b      	lsrs	r3, r3, #28
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	4a4e      	ldr	r2, [pc, #312]	; (80070ac <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8006f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	ee07 3a90 	vmov	s15, r3
 8006f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f9a:	eddf 5a43 	vldr	s11, [pc, #268]	; 80070a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fb6:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006fb8:	4b39      	ldr	r3, [pc, #228]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d017      	beq.n	8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006fc4:	4b36      	ldr	r3, [pc, #216]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc8:	0a5b      	lsrs	r3, r3, #9
 8006fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006fd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fda:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006fde:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fea:	ee17 2a90 	vmov	r2, s15
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	e002      	b.n	8006ffa <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006ffa:	4b29      	ldr	r3, [pc, #164]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d017      	beq.n	8007036 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007006:	4b26      	ldr	r3, [pc, #152]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700a:	0c1b      	lsrs	r3, r3, #16
 800700c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800701c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007020:	edd7 6a07 	vldr	s13, [r7, #28]
 8007024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800702c:	ee17 2a90 	vmov	r2, s15
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	605a      	str	r2, [r3, #4]
 8007034:	e002      	b.n	800703c <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800703c:	4b18      	ldr	r3, [pc, #96]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d017      	beq.n	8007078 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007048:	4b15      	ldr	r3, [pc, #84]	; (80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800704a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704c:	0e1b      	lsrs	r3, r3, #24
 800704e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800705a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800705e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007062:	edd7 6a07 	vldr	s13, [r7, #28]
 8007066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800706a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800706e:	ee17 2a90 	vmov	r2, s15
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007076:	e00c      	b.n	8007092 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	609a      	str	r2, [r3, #8]
}
 800707e:	e008      	b.n	8007092 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	609a      	str	r2, [r3, #8]
}
 8007092:	bf00      	nop
 8007094:	3724      	adds	r7, #36	; 0x24
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	46020c00 	.word	0x46020c00
 80070a4:	4b742400 	.word	0x4b742400
 80070a8:	46000000 	.word	0x46000000
 80070ac:	08015404 	.word	0x08015404

080070b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b089      	sub	sp, #36	; 0x24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80070b8:	4bad      	ldr	r3, [pc, #692]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80070ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80070c2:	4bab      	ldr	r3, [pc, #684]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80070cc:	4ba8      	ldr	r3, [pc, #672]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	0a1b      	lsrs	r3, r3, #8
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	3301      	adds	r3, #1
 80070d8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80070da:	4ba5      	ldr	r3, [pc, #660]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	091b      	lsrs	r3, r3, #4
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80070e6:	4ba2      	ldr	r3, [pc, #648]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	08db      	lsrs	r3, r3, #3
 80070ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	fb02 f303 	mul.w	r3, r2, r3
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 8123 	beq.w	8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b03      	cmp	r3, #3
 800710e:	d062      	beq.n	80071d6 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b03      	cmp	r3, #3
 8007114:	f200 8081 	bhi.w	800721a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d024      	beq.n	8007168 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b02      	cmp	r3, #2
 8007122:	d17a      	bne.n	800721a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8007132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007136:	4b8e      	ldr	r3, [pc, #568]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007146:	ed97 6a02 	vldr	s12, [r7, #8]
 800714a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800714e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007152:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800715a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800715e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007166:	e08f      	b.n	8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007168:	4b81      	ldr	r3, [pc, #516]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8007174:	4b7e      	ldr	r3, [pc, #504]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	0f1b      	lsrs	r3, r3, #28
 800717a:	f003 030f 	and.w	r3, r3, #15
 800717e:	e006      	b.n	800718e <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8007180:	4b7b      	ldr	r3, [pc, #492]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007182:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007186:	041b      	lsls	r3, r3, #16
 8007188:	0f1b      	lsrs	r3, r3, #28
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	4a7b      	ldr	r2, [pc, #492]	; (800737c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8007190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007194:	ee07 3a90 	vmov	s15, r3
 8007198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	ee07 3a90 	vmov	s15, r3
 80071b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80071b8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80071bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80071cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071d4:	e058      	b.n	8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	ee07 3a90 	vmov	s15, r3
 80071dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80071e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e8:	4b61      	ldr	r3, [pc, #388]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80071ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f0:	ee07 3a90 	vmov	s15, r3
 80071f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80071f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80071fc:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007200:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007204:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007214:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007218:	e036      	b.n	8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800721a:	4b55      	ldr	r3, [pc, #340]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8007226:	4b52      	ldr	r3, [pc, #328]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	0f1b      	lsrs	r3, r3, #28
 800722c:	f003 030f 	and.w	r3, r3, #15
 8007230:	e006      	b.n	8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8007232:	4b4f      	ldr	r3, [pc, #316]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007238:	041b      	lsls	r3, r3, #16
 800723a:	0f1b      	lsrs	r3, r3, #28
 800723c:	f003 030f 	and.w	r3, r3, #15
 8007240:	4a4e      	ldr	r2, [pc, #312]	; (800737c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8007242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	ee07 3a90 	vmov	s15, r3
 8007254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007266:	ed97 6a02 	vldr	s12, [r7, #8]
 800726a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800726e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800727a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800727e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007286:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007288:	4b39      	ldr	r3, [pc, #228]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d017      	beq.n	80072c4 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007294:	4b36      	ldr	r3, [pc, #216]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007298:	0a5b      	lsrs	r3, r3, #9
 800729a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80072a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072aa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80072ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80072b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ba:	ee17 2a90 	vmov	r2, s15
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	e002      	b.n	80072ca <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80072ca:	4b29      	ldr	r3, [pc, #164]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d017      	beq.n	8007306 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80072d6:	4b26      	ldr	r3, [pc, #152]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072da:	0c1b      	lsrs	r3, r3, #16
 80072dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e0:	ee07 3a90 	vmov	s15, r3
 80072e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80072e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ec:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80072f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fc:	ee17 2a90 	vmov	r2, s15
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	605a      	str	r2, [r3, #4]
 8007304:	e002      	b.n	800730c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800730c:	4b18      	ldr	r3, [pc, #96]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d017      	beq.n	8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007318:	4b15      	ldr	r3, [pc, #84]	; (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800731a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731c:	0e1b      	lsrs	r3, r3, #24
 800731e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800732a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800732e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007332:	edd7 6a07 	vldr	s13, [r7, #28]
 8007336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800733a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733e:	ee17 2a90 	vmov	r2, s15
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007346:	e00c      	b.n	8007362 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	609a      	str	r2, [r3, #8]
}
 800734e:	e008      	b.n	8007362 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	609a      	str	r2, [r3, #8]
}
 8007362:	bf00      	nop
 8007364:	3724      	adds	r7, #36	; 0x24
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	46020c00 	.word	0x46020c00
 8007374:	4b742400 	.word	0x4b742400
 8007378:	46000000 	.word	0x46000000
 800737c:	08015404 	.word	0x08015404

08007380 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007380:	b480      	push	{r7}
 8007382:	b089      	sub	sp, #36	; 0x24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007388:	4bad      	ldr	r3, [pc, #692]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800738a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007390:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007392:	4bab      	ldr	r3, [pc, #684]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800739c:	4ba8      	ldr	r3, [pc, #672]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800739e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a0:	0a1b      	lsrs	r3, r3, #8
 80073a2:	f003 030f 	and.w	r3, r3, #15
 80073a6:	3301      	adds	r3, #1
 80073a8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80073aa:	4ba5      	ldr	r3, [pc, #660]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	091b      	lsrs	r3, r3, #4
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80073b6:	4ba2      	ldr	r3, [pc, #648]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80073b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ba:	08db      	lsrs	r3, r3, #3
 80073bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	fb02 f303 	mul.w	r3, r2, r3
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ce:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 8123 	beq.w	8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d062      	beq.n	80074a6 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	f200 8081 	bhi.w	80074ea <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d024      	beq.n	8007438 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d17a      	bne.n	80074ea <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fe:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007406:	4b8e      	ldr	r3, [pc, #568]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007416:	ed97 6a02 	vldr	s12, [r7, #8]
 800741a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800741e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007422:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800742a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800742e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007432:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8007436:	e08f      	b.n	8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007438:	4b81      	ldr	r3, [pc, #516]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d005      	beq.n	8007450 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8007444:	4b7e      	ldr	r3, [pc, #504]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	0f1b      	lsrs	r3, r3, #28
 800744a:	f003 030f 	and.w	r3, r3, #15
 800744e:	e006      	b.n	800745e <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8007450:	4b7b      	ldr	r3, [pc, #492]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007452:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007456:	041b      	lsls	r3, r3, #16
 8007458:	0f1b      	lsrs	r3, r3, #28
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	4a7b      	ldr	r2, [pc, #492]	; (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8007460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007464:	ee07 3a90 	vmov	s15, r3
 8007468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	ee07 3a90 	vmov	s15, r3
 8007480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007484:	ed97 6a02 	vldr	s12, [r7, #8]
 8007488:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800748c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007494:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007498:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800749c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074a4:	e058      	b.n	8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	ee07 3a90 	vmov	s15, r3
 80074ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80074b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b8:	4b61      	ldr	r3, [pc, #388]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80074ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c0:	ee07 3a90 	vmov	s15, r3
 80074c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80074c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80074cc:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80074d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80074d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80074d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80074e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074e8:	e036      	b.n	8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80074ea:	4b55      	ldr	r3, [pc, #340]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d005      	beq.n	8007502 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 80074f6:	4b52      	ldr	r3, [pc, #328]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	0f1b      	lsrs	r3, r3, #28
 80074fc:	f003 030f 	and.w	r3, r3, #15
 8007500:	e006      	b.n	8007510 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8007502:	4b4f      	ldr	r3, [pc, #316]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007508:	041b      	lsls	r3, r3, #16
 800750a:	0f1b      	lsrs	r3, r3, #28
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	4a4e      	ldr	r2, [pc, #312]	; (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8007512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	ee07 3a90 	vmov	s15, r3
 8007524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007536:	ed97 6a02 	vldr	s12, [r7, #8]
 800753a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800753e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800754a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800754e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007556:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007558:	4b39      	ldr	r3, [pc, #228]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800755a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d017      	beq.n	8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007564:	4b36      	ldr	r3, [pc, #216]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007568:	0a5b      	lsrs	r3, r3, #9
 800756a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800757a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800757e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800758a:	ee17 2a90 	vmov	r2, s15
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	e002      	b.n	800759a <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800759a:	4b29      	ldr	r3, [pc, #164]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800759c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d017      	beq.n	80075d6 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80075a6:	4b26      	ldr	r3, [pc, #152]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075aa:	0c1b      	lsrs	r3, r3, #16
 80075ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b0:	ee07 3a90 	vmov	s15, r3
 80075b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80075b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075bc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80075c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80075c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075cc:	ee17 2a90 	vmov	r2, s15
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	605a      	str	r2, [r3, #4]
 80075d4:	e002      	b.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80075dc:	4b18      	ldr	r3, [pc, #96]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d017      	beq.n	8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80075e8:	4b15      	ldr	r3, [pc, #84]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ec:	0e1b      	lsrs	r3, r3, #24
 80075ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80075fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075fe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007602:	edd7 6a07 	vldr	s13, [r7, #28]
 8007606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800760a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800760e:	ee17 2a90 	vmov	r2, s15
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007616:	e00c      	b.n	8007632 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	609a      	str	r2, [r3, #8]
}
 800761e:	e008      	b.n	8007632 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	609a      	str	r2, [r3, #8]
}
 8007632:	bf00      	nop
 8007634:	3724      	adds	r7, #36	; 0x24
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	46020c00 	.word	0x46020c00
 8007644:	4b742400 	.word	0x4b742400
 8007648:	46000000 	.word	0x46000000
 800764c:	08015404 	.word	0x08015404

08007650 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08e      	sub	sp, #56	; 0x38
 8007654:	af00      	add	r7, sp, #0
 8007656:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800765a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800765e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8007662:	430b      	orrs	r3, r1
 8007664:	d145      	bne.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007666:	4ba7      	ldr	r3, [pc, #668]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800766c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007670:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007672:	4ba4      	ldr	r3, [pc, #656]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b02      	cmp	r3, #2
 800767e:	d108      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007686:	d104      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
 800768e:	f001 b9b3 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007692:	4b9c      	ldr	r3, [pc, #624]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800769c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076a0:	d114      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076a8:	d110      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076aa:	4b96      	ldr	r3, [pc, #600]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076b8:	d103      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80076ba:	23fa      	movs	r3, #250	; 0xfa
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076be:	f001 b99b 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80076c2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80076c6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076c8:	f001 b996 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80076cc:	4b8d      	ldr	r3, [pc, #564]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076d8:	d107      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076e0:	d103      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80076e2:	4b89      	ldr	r3, [pc, #548]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80076e4:	637b      	str	r3, [r7, #52]	; 0x34
 80076e6:	f001 b987 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	637b      	str	r3, [r7, #52]	; 0x34
 80076ee:	f001 b983 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80076f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80076fa:	430b      	orrs	r3, r1
 80076fc:	d151      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80076fe:	4b81      	ldr	r3, [pc, #516]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007700:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007704:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007708:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	2b80      	cmp	r3, #128	; 0x80
 800770e:	d035      	beq.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	2b80      	cmp	r3, #128	; 0x80
 8007714:	d841      	bhi.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	2b60      	cmp	r3, #96	; 0x60
 800771a:	d02a      	beq.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	2b60      	cmp	r3, #96	; 0x60
 8007720:	d83b      	bhi.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	2b40      	cmp	r3, #64	; 0x40
 8007726:	d009      	beq.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	2b40      	cmp	r3, #64	; 0x40
 800772c:	d835      	bhi.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00c      	beq.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	2b20      	cmp	r3, #32
 8007738:	d012      	beq.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800773a:	e02e      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800773c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff fb4d 	bl	8006de0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007748:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800774a:	f001 b955 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800774e:	f107 0318 	add.w	r3, r7, #24
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff fcac 	bl	80070b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800775c:	f001 b94c 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007760:	f107 030c 	add.w	r3, r7, #12
 8007764:	4618      	mov	r0, r3
 8007766:	f7ff fe0b 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800776e:	f001 b943 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007772:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007776:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007778:	f001 b93e 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800777c:	4b61      	ldr	r3, [pc, #388]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007788:	d103      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800778a:	4b60      	ldr	r3, [pc, #384]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800778c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800778e:	f001 b933 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007796:	f001 b92f 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800779e:	f001 b92b 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80077a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077a6:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80077aa:	430b      	orrs	r3, r1
 80077ac:	d158      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80077ae:	4b55      	ldr	r3, [pc, #340]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80077b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80077b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c0:	d03b      	beq.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c8:	d846      	bhi.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077d0:	d02e      	beq.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077d8:	d83e      	bhi.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80077da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077e0:	d00b      	beq.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077e8:	d836      	bhi.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00d      	beq.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80077f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f6:	d012      	beq.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80077f8:	e02e      	b.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff faee 	bl	8006de0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007808:	f001 b8f6 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800780c:	f107 0318 	add.w	r3, r7, #24
 8007810:	4618      	mov	r0, r3
 8007812:	f7ff fc4d 	bl	80070b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800781a:	f001 b8ed 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800781e:	f107 030c 	add.w	r3, r7, #12
 8007822:	4618      	mov	r0, r3
 8007824:	f7ff fdac 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800782c:	f001 b8e4 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007830:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007834:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007836:	f001 b8df 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800783a:	4b32      	ldr	r3, [pc, #200]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007846:	d103      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007848:	4b30      	ldr	r3, [pc, #192]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800784a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800784c:	f001 b8d4 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007854:	f001 b8d0 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800785c:	f001 b8cc 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007864:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007868:	430b      	orrs	r3, r1
 800786a:	d126      	bne.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800786c:	4b25      	ldr	r3, [pc, #148]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800786e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007876:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007878:	4b22      	ldr	r3, [pc, #136]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007884:	d106      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007888:	2b00      	cmp	r3, #0
 800788a:	d103      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800788c:	4b1f      	ldr	r3, [pc, #124]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800788e:	637b      	str	r3, [r7, #52]	; 0x34
 8007890:	f001 b8b2 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007894:	4b1b      	ldr	r3, [pc, #108]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800789c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a0:	d107      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a8:	d103      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80078aa:	4b19      	ldr	r3, [pc, #100]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80078ac:	637b      	str	r3, [r7, #52]	; 0x34
 80078ae:	f001 b8a3 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	637b      	str	r3, [r7, #52]	; 0x34
 80078b6:	f001 b89f 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80078ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078be:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80078c2:	430b      	orrs	r3, r1
 80078c4:	d16e      	bne.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80078c6:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078cc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80078d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80078d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80078d8:	d03d      	beq.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80078e0:	d85c      	bhi.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078e8:	d014      	beq.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078f0:	d854      	bhi.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d01f      	beq.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078fe:	d012      	beq.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007900:	e04c      	b.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007902:	bf00      	nop
 8007904:	46020c00 	.word	0x46020c00
 8007908:	0007a120 	.word	0x0007a120
 800790c:	00f42400 	.word	0x00f42400
 8007910:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff fa61 	bl	8006de0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007922:	f001 b869 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007926:	f107 0318 	add.w	r3, r7, #24
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff fbc0 	bl	80070b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007934:	f001 b860 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007938:	4ba7      	ldr	r3, [pc, #668]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007944:	d103      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8007946:	4ba5      	ldr	r3, [pc, #660]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007948:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800794a:	f001 b855 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007952:	f001 b851 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007956:	4ba0      	ldr	r3, [pc, #640]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b20      	cmp	r3, #32
 8007960:	d118      	bne.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007962:	4b9d      	ldr	r3, [pc, #628]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d005      	beq.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800796e:	4b9a      	ldr	r3, [pc, #616]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	0e1b      	lsrs	r3, r3, #24
 8007974:	f003 030f 	and.w	r3, r3, #15
 8007978:	e006      	b.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800797a:	4b97      	ldr	r3, [pc, #604]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800797c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007980:	041b      	lsls	r3, r3, #16
 8007982:	0e1b      	lsrs	r3, r3, #24
 8007984:	f003 030f 	and.w	r3, r3, #15
 8007988:	4a95      	ldr	r2, [pc, #596]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800798a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800798e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007990:	f001 b832 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007994:	2300      	movs	r3, #0
 8007996:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007998:	f001 b82e 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079a0:	f001 b82a 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80079a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079a8:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80079ac:	430b      	orrs	r3, r1
 80079ae:	d17f      	bne.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80079b0:	4b89      	ldr	r3, [pc, #548]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80079b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80079b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ba:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80079bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d165      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80079c2:	4b85      	ldr	r3, [pc, #532]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80079c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079c8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80079cc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80079d4:	d034      	beq.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80079dc:	d853      	bhi.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079e4:	d00b      	beq.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079ec:	d84b      	bhi.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d016      	beq.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079fa:	d009      	beq.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80079fc:	e043      	b.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff f9ec 	bl	8006de0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a0c:	f000 bff4 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a10:	f107 0318 	add.w	r3, r7, #24
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff fb4b 	bl	80070b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a1e:	f000 bfeb 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007a22:	4b6d      	ldr	r3, [pc, #436]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a2e:	d103      	bne.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8007a30:	4b6a      	ldr	r3, [pc, #424]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a32:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007a34:	f000 bfe0 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a3c:	f000 bfdc 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a40:	4b65      	ldr	r3, [pc, #404]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d118      	bne.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a4c:	4b62      	ldr	r3, [pc, #392]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007a58:	4b5f      	ldr	r3, [pc, #380]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	0e1b      	lsrs	r3, r3, #24
 8007a5e:	f003 030f 	and.w	r3, r3, #15
 8007a62:	e006      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007a64:	4b5c      	ldr	r3, [pc, #368]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a6a:	041b      	lsls	r3, r3, #16
 8007a6c:	0e1b      	lsrs	r3, r3, #24
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	4a5b      	ldr	r2, [pc, #364]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007a7a:	f000 bfbd 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a82:	f000 bfb9 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a8a:	f000 bfb5 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a94:	d108      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7ff f9a0 	bl	8006de0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa4:	f000 bfa8 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8007aac:	f000 bfa4 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab4:	1e51      	subs	r1, r2, #1
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	d136      	bne.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007aba:	4b47      	ldr	r3, [pc, #284]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ac0:	f003 0303 	and.w	r3, r3, #3
 8007ac4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d104      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007acc:	f7fe fae2 	bl	8006094 <HAL_RCC_GetPCLK2Freq>
 8007ad0:	6378      	str	r0, [r7, #52]	; 0x34
 8007ad2:	f000 bf91 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d104      	bne.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007adc:	f7fe f9a4 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8007ae0:	6378      	str	r0, [r7, #52]	; 0x34
 8007ae2:	f000 bf89 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007ae6:	4b3c      	ldr	r3, [pc, #240]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af2:	d106      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d103      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8007afa:	4b3a      	ldr	r3, [pc, #232]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007afc:	637b      	str	r3, [r7, #52]	; 0x34
 8007afe:	f000 bf7b 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007b02:	4b35      	ldr	r3, [pc, #212]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b08:	f003 0302 	and.w	r3, r3, #2
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d107      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d104      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8007b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1c:	f000 bf6c 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	637b      	str	r3, [r7, #52]	; 0x34
 8007b24:	f000 bf68 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b2c:	1e91      	subs	r1, r2, #2
 8007b2e:	430b      	orrs	r3, r1
 8007b30:	d136      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007b32:	4b29      	ldr	r3, [pc, #164]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b38:	f003 030c 	and.w	r3, r3, #12
 8007b3c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d104      	bne.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007b44:	f7fe fa92 	bl	800606c <HAL_RCC_GetPCLK1Freq>
 8007b48:	6378      	str	r0, [r7, #52]	; 0x34
 8007b4a:	f000 bf55 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d104      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b54:	f7fe f968 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8007b58:	6378      	str	r0, [r7, #52]	; 0x34
 8007b5a:	f000 bf4d 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007b5e:	4b1e      	ldr	r3, [pc, #120]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b6a:	d106      	bne.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	2b08      	cmp	r3, #8
 8007b70:	d103      	bne.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8007b72:	4b1c      	ldr	r3, [pc, #112]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007b74:	637b      	str	r3, [r7, #52]	; 0x34
 8007b76:	f000 bf3f 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007b7a:	4b17      	ldr	r3, [pc, #92]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d107      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	2b0c      	cmp	r3, #12
 8007b8c:	d104      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8007b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b92:	637b      	str	r3, [r7, #52]	; 0x34
 8007b94:	f000 bf30 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b9c:	f000 bf2c 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ba4:	1f11      	subs	r1, r2, #4
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	d13f      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007baa:	4b0b      	ldr	r3, [pc, #44]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bb4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d104      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007bbc:	f7fe fa56 	bl	800606c <HAL_RCC_GetPCLK1Freq>
 8007bc0:	6378      	str	r0, [r7, #52]	; 0x34
 8007bc2:	f000 bf19 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	2b10      	cmp	r3, #16
 8007bca:	d10d      	bne.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bcc:	f7fe f92c 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8007bd0:	6378      	str	r0, [r7, #52]	; 0x34
 8007bd2:	f000 bf11 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007bd6:	bf00      	nop
 8007bd8:	46020c00 	.word	0x46020c00
 8007bdc:	02dc6c00 	.word	0x02dc6c00
 8007be0:	08015404 	.word	0x08015404
 8007be4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007be8:	4ba6      	ldr	r3, [pc, #664]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bf4:	d106      	bne.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	2b20      	cmp	r3, #32
 8007bfa:	d103      	bne.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007bfc:	4ba2      	ldr	r3, [pc, #648]	; (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8007c00:	f000 befa 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007c04:	4b9f      	ldr	r3, [pc, #636]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007c06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d107      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	2b30      	cmp	r3, #48	; 0x30
 8007c16:	d104      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8007c18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c1e:	f000 beeb 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
 8007c26:	f000 bee7 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c2e:	f1a2 0108 	sub.w	r1, r2, #8
 8007c32:	430b      	orrs	r3, r1
 8007c34:	d136      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007c36:	4b93      	ldr	r3, [pc, #588]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c40:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d104      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c48:	f7fe fa10 	bl	800606c <HAL_RCC_GetPCLK1Freq>
 8007c4c:	6378      	str	r0, [r7, #52]	; 0x34
 8007c4e:	f000 bed3 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	2b40      	cmp	r3, #64	; 0x40
 8007c56:	d104      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c58:	f7fe f8e6 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8007c5c:	6378      	str	r0, [r7, #52]	; 0x34
 8007c5e:	f000 becb 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007c62:	4b88      	ldr	r3, [pc, #544]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c6e:	d106      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8007c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c72:	2b80      	cmp	r3, #128	; 0x80
 8007c74:	d103      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8007c76:	4b84      	ldr	r3, [pc, #528]	; (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7a:	f000 bebd 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007c7e:	4b81      	ldr	r3, [pc, #516]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d107      	bne.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c90:	d104      	bne.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8007c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c96:	637b      	str	r3, [r7, #52]	; 0x34
 8007c98:	f000 beae 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca0:	f000 beaa 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca8:	f1a2 0110 	sub.w	r1, r2, #16
 8007cac:	430b      	orrs	r3, r1
 8007cae:	d139      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007cb0:	4b74      	ldr	r3, [pc, #464]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cba:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d104      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007cc2:	f7fe f9d3 	bl	800606c <HAL_RCC_GetPCLK1Freq>
 8007cc6:	6378      	str	r0, [r7, #52]	; 0x34
 8007cc8:	f000 be96 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd2:	d104      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007cd4:	f7fe f8a8 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8007cd8:	6378      	str	r0, [r7, #52]	; 0x34
 8007cda:	f000 be8d 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007cde:	4b69      	ldr	r3, [pc, #420]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cea:	d107      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf2:	d103      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007cf4:	4b64      	ldr	r3, [pc, #400]	; (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf8:	f000 be7e 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007cfc:	4b61      	ldr	r3, [pc, #388]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d108      	bne.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d10:	d104      	bne.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d16:	637b      	str	r3, [r7, #52]	; 0x34
 8007d18:	f000 be6e 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d20:	f000 be6a 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d28:	f1a2 0120 	sub.w	r1, r2, #32
 8007d2c:	430b      	orrs	r3, r1
 8007d2e:	d158      	bne.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007d30:	4b54      	ldr	r3, [pc, #336]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007d32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d104      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007d42:	f7fe f9bb 	bl	80060bc <HAL_RCC_GetPCLK3Freq>
 8007d46:	6378      	str	r0, [r7, #52]	; 0x34
 8007d48:	f000 be56 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d104      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d52:	f7fe f869 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8007d56:	6378      	str	r0, [r7, #52]	; 0x34
 8007d58:	f000 be4e 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007d5c:	4b49      	ldr	r3, [pc, #292]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d68:	d106      	bne.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d103      	bne.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8007d70:	4b45      	ldr	r3, [pc, #276]	; (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007d72:	637b      	str	r3, [r7, #52]	; 0x34
 8007d74:	f000 be40 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007d78:	4b42      	ldr	r3, [pc, #264]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d107      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d104      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8007d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d90:	637b      	str	r3, [r7, #52]	; 0x34
 8007d92:	f000 be31 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007d96:	4b3b      	ldr	r3, [pc, #236]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0320 	and.w	r3, r3, #32
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d11b      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d118      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007da8:	4b36      	ldr	r3, [pc, #216]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007db4:	4b33      	ldr	r3, [pc, #204]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	0e1b      	lsrs	r3, r3, #24
 8007dba:	f003 030f 	and.w	r3, r3, #15
 8007dbe:	e006      	b.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8007dc0:	4b30      	ldr	r3, [pc, #192]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dc6:	041b      	lsls	r3, r3, #16
 8007dc8:	0e1b      	lsrs	r3, r3, #24
 8007dca:	f003 030f 	and.w	r3, r3, #15
 8007dce:	4a2f      	ldr	r2, [pc, #188]	; (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd6:	f000 be0f 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8007dde:	f000 be0b 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de6:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007dea:	430b      	orrs	r3, r1
 8007dec:	d172      	bne.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007dee:	4b25      	ldr	r3, [pc, #148]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007df4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007df8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e00:	d104      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e02:	f7fe f811 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8007e06:	6378      	str	r0, [r7, #52]	; 0x34
 8007e08:	f000 bdf6 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e12:	d108      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e14:	f107 0318 	add.w	r3, r7, #24
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff f949 	bl	80070b0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	637b      	str	r3, [r7, #52]	; 0x34
 8007e22:	f000 bde9 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d104      	bne.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007e2c:	f7fe f904 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 8007e30:	6378      	str	r0, [r7, #52]	; 0x34
 8007e32:	f000 bde1 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007e3c:	d128      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e3e:	4b11      	ldr	r3, [pc, #68]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b20      	cmp	r3, #32
 8007e48:	d118      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e4a:	4b0e      	ldr	r3, [pc, #56]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d005      	beq.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8007e56:	4b0b      	ldr	r3, [pc, #44]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	0e1b      	lsrs	r3, r3, #24
 8007e5c:	f003 030f 	and.w	r3, r3, #15
 8007e60:	e006      	b.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007e62:	4b08      	ldr	r3, [pc, #32]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e68:	041b      	lsls	r3, r3, #16
 8007e6a:	0e1b      	lsrs	r3, r3, #24
 8007e6c:	f003 030f 	and.w	r3, r3, #15
 8007e70:	4a06      	ldr	r2, [pc, #24]	; (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e76:	637b      	str	r3, [r7, #52]	; 0x34
 8007e78:	f000 bdbe 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e80:	f000 bdba 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007e84:	46020c00 	.word	0x46020c00
 8007e88:	00f42400 	.word	0x00f42400
 8007e8c:	08015404 	.word	0x08015404
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007e90:	4baf      	ldr	r3, [pc, #700]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e9c:	d107      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ea4:	d103      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8007ea6:	4bab      	ldr	r3, [pc, #684]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eaa:	f000 bda5 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007eae:	4ba8      	ldr	r3, [pc, #672]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eba:	d107      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ec2:	d103      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8007ec4:	4ba3      	ldr	r3, [pc, #652]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ec8:	f000 bd96 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed0:	f000 bd92 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007edc:	430b      	orrs	r3, r1
 8007ede:	d158      	bne.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007ee0:	4b9b      	ldr	r3, [pc, #620]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007ee2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ee6:	f003 0307 	and.w	r3, r3, #7
 8007eea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d84b      	bhi.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8007ef2:	a201      	add	r2, pc, #4	; (adr r2, 8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f31 	.word	0x08007f31
 8007efc:	08007f0d 	.word	0x08007f0d
 8007f00:	08007f1f 	.word	0x08007f1f
 8007f04:	08007f3b 	.word	0x08007f3b
 8007f08:	08007f45 	.word	0x08007f45
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fe ff65 	bl	8006de0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f1a:	f000 bd6d 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f1e:	f107 030c 	add.w	r3, r7, #12
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff fa2c 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f2c:	f000 bd64 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007f30:	f7fe f882 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 8007f34:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007f36:	f000 bd5f 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007f3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007f3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f40:	f000 bd5a 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007f44:	4b82      	ldr	r3, [pc, #520]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0320 	and.w	r3, r3, #32
 8007f4c:	2b20      	cmp	r3, #32
 8007f4e:	d118      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f50:	4b7f      	ldr	r3, [pc, #508]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8007f5c:	4b7c      	ldr	r3, [pc, #496]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	0e1b      	lsrs	r3, r3, #24
 8007f62:	f003 030f 	and.w	r3, r3, #15
 8007f66:	e006      	b.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8007f68:	4b79      	ldr	r3, [pc, #484]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f6e:	041b      	lsls	r3, r3, #16
 8007f70:	0e1b      	lsrs	r3, r3, #24
 8007f72:	f003 030f 	and.w	r3, r3, #15
 8007f76:	4a78      	ldr	r2, [pc, #480]	; (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8007f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f7c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f7e:	f000 bd3b 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f86:	f000 bd37 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f8e:	f000 bd33 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f96:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007f9a:	430b      	orrs	r3, r1
 8007f9c:	d167      	bne.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007f9e:	4b6c      	ldr	r3, [pc, #432]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fa4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007fa8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fb0:	d036      	beq.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fb8:	d855      	bhi.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fc0:	d029      	beq.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fc8:	d84d      	bhi.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fd0:	d013      	beq.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fd8:	d845      	bhi.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d015      	beq.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fe6:	d13e      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe fef7 	bl	8006de0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ff6:	f000 bcff 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ffa:	f107 030c 	add.w	r3, r7, #12
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff f9be 	bl	8007380 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008008:	f000 bcf6 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800800c:	f7fe f814 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 8008010:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008012:	f000 bcf1 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008016:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800801a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800801c:	f000 bcec 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008020:	4b4b      	ldr	r3, [pc, #300]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b20      	cmp	r3, #32
 800802a:	d118      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800802c:	4b48      	ldr	r3, [pc, #288]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d005      	beq.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8008038:	4b45      	ldr	r3, [pc, #276]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	0e1b      	lsrs	r3, r3, #24
 800803e:	f003 030f 	and.w	r3, r3, #15
 8008042:	e006      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008044:	4b42      	ldr	r3, [pc, #264]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008046:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800804a:	041b      	lsls	r3, r3, #16
 800804c:	0e1b      	lsrs	r3, r3, #24
 800804e:	f003 030f 	and.w	r3, r3, #15
 8008052:	4a41      	ldr	r2, [pc, #260]	; (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008058:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800805a:	f000 bccd 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800805e:	2300      	movs	r3, #0
 8008060:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008062:	f000 bcc9 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800806a:	f000 bcc5 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800806e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008072:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8008076:	430b      	orrs	r3, r1
 8008078:	d14c      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800807a:	4b35      	ldr	r3, [pc, #212]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800807c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008080:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008084:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	2b00      	cmp	r3, #0
 800808a:	d104      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800808c:	f7fd ffee 	bl	800606c <HAL_RCC_GetPCLK1Freq>
 8008090:	6378      	str	r0, [r7, #52]	; 0x34
 8008092:	f000 bcb1 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800809c:	d104      	bne.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800809e:	f7fd fec3 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 80080a2:	6378      	str	r0, [r7, #52]	; 0x34
 80080a4:	f000 bca8 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80080a8:	4b29      	ldr	r3, [pc, #164]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b4:	d107      	bne.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080bc:	d103      	bne.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 80080be:	4b25      	ldr	r3, [pc, #148]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80080c0:	637b      	str	r3, [r7, #52]	; 0x34
 80080c2:	f000 bc99 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80080c6:	4b22      	ldr	r3, [pc, #136]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0320 	and.w	r3, r3, #32
 80080ce:	2b20      	cmp	r3, #32
 80080d0:	d11c      	bne.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080d8:	d118      	bne.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080da:	4b1d      	ldr	r3, [pc, #116]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d005      	beq.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80080e6:	4b1a      	ldr	r3, [pc, #104]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	0e1b      	lsrs	r3, r3, #24
 80080ec:	f003 030f 	and.w	r3, r3, #15
 80080f0:	e006      	b.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80080f2:	4b17      	ldr	r3, [pc, #92]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080f8:	041b      	lsls	r3, r3, #16
 80080fa:	0e1b      	lsrs	r3, r3, #24
 80080fc:	f003 030f 	and.w	r3, r3, #15
 8008100:	4a15      	ldr	r2, [pc, #84]	; (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008106:	637b      	str	r3, [r7, #52]	; 0x34
 8008108:	f000 bc76 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	637b      	str	r3, [r7, #52]	; 0x34
 8008110:	f000 bc72 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008118:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800811c:	430b      	orrs	r3, r1
 800811e:	d153      	bne.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008120:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008126:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800812a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	2b00      	cmp	r3, #0
 8008130:	d104      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008132:	f7fd ff9b 	bl	800606c <HAL_RCC_GetPCLK1Freq>
 8008136:	6378      	str	r0, [r7, #52]	; 0x34
 8008138:	f000 bc5e 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008142:	d10b      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008144:	f7fd fe70 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8008148:	6378      	str	r0, [r7, #52]	; 0x34
 800814a:	f000 bc55 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800814e:	bf00      	nop
 8008150:	46020c00 	.word	0x46020c00
 8008154:	00f42400 	.word	0x00f42400
 8008158:	08015404 	.word	0x08015404
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800815c:	4ba1      	ldr	r3, [pc, #644]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008168:	d107      	bne.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008170:	d103      	bne.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8008172:	4b9d      	ldr	r3, [pc, #628]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
 8008176:	f000 bc3f 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800817a:	4b9a      	ldr	r3, [pc, #616]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0320 	and.w	r3, r3, #32
 8008182:	2b20      	cmp	r3, #32
 8008184:	d11c      	bne.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800818c:	d118      	bne.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800818e:	4b95      	ldr	r3, [pc, #596]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d005      	beq.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800819a:	4b92      	ldr	r3, [pc, #584]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	0e1b      	lsrs	r3, r3, #24
 80081a0:	f003 030f 	and.w	r3, r3, #15
 80081a4:	e006      	b.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80081a6:	4b8f      	ldr	r3, [pc, #572]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80081a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081ac:	041b      	lsls	r3, r3, #16
 80081ae:	0e1b      	lsrs	r3, r3, #24
 80081b0:	f003 030f 	and.w	r3, r3, #15
 80081b4:	4a8d      	ldr	r2, [pc, #564]	; (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80081b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ba:	637b      	str	r3, [r7, #52]	; 0x34
 80081bc:	f000 bc1c 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	637b      	str	r3, [r7, #52]	; 0x34
 80081c4:	f000 bc18 	b.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80081c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081cc:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80081d0:	430b      	orrs	r3, r1
 80081d2:	d151      	bne.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80081d4:	4b83      	ldr	r3, [pc, #524]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80081d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081de:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	2bc0      	cmp	r3, #192	; 0xc0
 80081e4:	d024      	beq.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	2bc0      	cmp	r3, #192	; 0xc0
 80081ea:	d842      	bhi.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80081ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ee:	2b80      	cmp	r3, #128	; 0x80
 80081f0:	d00d      	beq.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	2b80      	cmp	r3, #128	; 0x80
 80081f6:	d83c      	bhi.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80081f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	2b40      	cmp	r3, #64	; 0x40
 8008202:	d011      	beq.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8008204:	e035      	b.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8008206:	f7fd ff59 	bl	80060bc <HAL_RCC_GetPCLK3Freq>
 800820a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800820c:	e3f4      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800820e:	4b75      	ldr	r3, [pc, #468]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800821a:	d102      	bne.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800821c:	4b72      	ldr	r3, [pc, #456]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800821e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008220:	e3ea      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008226:	e3e7      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008228:	f7fd fdfe 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 800822c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800822e:	e3e3      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008230:	4b6c      	ldr	r3, [pc, #432]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0320 	and.w	r3, r3, #32
 8008238:	2b20      	cmp	r3, #32
 800823a:	d117      	bne.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800823c:	4b69      	ldr	r3, [pc, #420]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d005      	beq.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8008248:	4b66      	ldr	r3, [pc, #408]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	0e1b      	lsrs	r3, r3, #24
 800824e:	f003 030f 	and.w	r3, r3, #15
 8008252:	e006      	b.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8008254:	4b63      	ldr	r3, [pc, #396]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800825a:	041b      	lsls	r3, r3, #16
 800825c:	0e1b      	lsrs	r3, r3, #24
 800825e:	f003 030f 	and.w	r3, r3, #15
 8008262:	4a62      	ldr	r2, [pc, #392]	; (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008268:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800826a:	e3c5      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008270:	e3c2      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008276:	e3bf      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800827c:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8008280:	430b      	orrs	r3, r1
 8008282:	d147      	bne.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008284:	4b57      	ldr	r3, [pc, #348]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800828a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800828e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8008290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008292:	2b00      	cmp	r3, #0
 8008294:	d103      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008296:	f7fd fee9 	bl	800606c <HAL_RCC_GetPCLK1Freq>
 800829a:	6378      	str	r0, [r7, #52]	; 0x34
 800829c:	e3ac      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082a4:	d103      	bne.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80082a6:	f7fd fdbf 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 80082aa:	6378      	str	r0, [r7, #52]	; 0x34
 80082ac:	e3a4      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80082ae:	4b4d      	ldr	r3, [pc, #308]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ba:	d106      	bne.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082c2:	d102      	bne.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 80082c4:	4b48      	ldr	r3, [pc, #288]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80082c6:	637b      	str	r3, [r7, #52]	; 0x34
 80082c8:	e396      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80082ca:	4b46      	ldr	r3, [pc, #280]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	d11b      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082dc:	d117      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082de:	4b41      	ldr	r3, [pc, #260]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d005      	beq.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80082ea:	4b3e      	ldr	r3, [pc, #248]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	0e1b      	lsrs	r3, r3, #24
 80082f0:	f003 030f 	and.w	r3, r3, #15
 80082f4:	e006      	b.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 80082f6:	4b3b      	ldr	r3, [pc, #236]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082fc:	041b      	lsls	r3, r3, #16
 80082fe:	0e1b      	lsrs	r3, r3, #24
 8008300:	f003 030f 	and.w	r3, r3, #15
 8008304:	4a39      	ldr	r2, [pc, #228]	; (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800830a:	637b      	str	r3, [r7, #52]	; 0x34
 800830c:	e374      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	637b      	str	r3, [r7, #52]	; 0x34
 8008312:	e371      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8008314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008318:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800831c:	430b      	orrs	r3, r1
 800831e:	d16a      	bne.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008320:	4b30      	ldr	r3, [pc, #192]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800832a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	2b00      	cmp	r3, #0
 8008330:	d120      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008332:	4b2c      	ldr	r3, [pc, #176]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b20      	cmp	r3, #32
 800833c:	d117      	bne.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800833e:	4b29      	ldr	r3, [pc, #164]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d005      	beq.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800834a:	4b26      	ldr	r3, [pc, #152]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	0e1b      	lsrs	r3, r3, #24
 8008350:	f003 030f 	and.w	r3, r3, #15
 8008354:	e006      	b.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008356:	4b23      	ldr	r3, [pc, #140]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800835c:	041b      	lsls	r3, r3, #16
 800835e:	0e1b      	lsrs	r3, r3, #24
 8008360:	f003 030f 	and.w	r3, r3, #15
 8008364:	4a21      	ldr	r2, [pc, #132]	; (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800836a:	637b      	str	r3, [r7, #52]	; 0x34
 800836c:	e344      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800836e:	2300      	movs	r3, #0
 8008370:	637b      	str	r3, [r7, #52]	; 0x34
 8008372:	e341      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008374:	4b1b      	ldr	r3, [pc, #108]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800837a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800837e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008382:	d112      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800838a:	d10e      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800838c:	4b15      	ldr	r3, [pc, #84]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800838e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800839a:	d102      	bne.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 800839c:	23fa      	movs	r3, #250	; 0xfa
 800839e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083a0:	e32a      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80083a2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80083a6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083a8:	e326      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80083aa:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083b6:	d106      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 80083b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083be:	d102      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 80083c0:	4b09      	ldr	r3, [pc, #36]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80083c2:	637b      	str	r3, [r7, #52]	; 0x34
 80083c4:	e318      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80083c6:	4b07      	ldr	r3, [pc, #28]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083cc:	f003 0302 	and.w	r3, r3, #2
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d10d      	bne.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 80083d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083da:	d109      	bne.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 80083dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083e0:	637b      	str	r3, [r7, #52]	; 0x34
 80083e2:	e309      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80083e4:	46020c00 	.word	0x46020c00
 80083e8:	00f42400 	.word	0x00f42400
 80083ec:	08015404 	.word	0x08015404
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80083f0:	2300      	movs	r3, #0
 80083f2:	637b      	str	r3, [r7, #52]	; 0x34
 80083f4:	e300      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80083f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083fa:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80083fe:	430b      	orrs	r3, r1
 8008400:	d164      	bne.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008402:	4ba2      	ldr	r3, [pc, #648]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008408:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800840c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	2b00      	cmp	r3, #0
 8008412:	d120      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008414:	4b9d      	ldr	r3, [pc, #628]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0320 	and.w	r3, r3, #32
 800841c:	2b20      	cmp	r3, #32
 800841e:	d117      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008420:	4b9a      	ldr	r3, [pc, #616]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800842c:	4b97      	ldr	r3, [pc, #604]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	0e1b      	lsrs	r3, r3, #24
 8008432:	f003 030f 	and.w	r3, r3, #15
 8008436:	e006      	b.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8008438:	4b94      	ldr	r3, [pc, #592]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800843a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800843e:	041b      	lsls	r3, r3, #16
 8008440:	0e1b      	lsrs	r3, r3, #24
 8008442:	f003 030f 	and.w	r3, r3, #15
 8008446:	4a92      	ldr	r2, [pc, #584]	; (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800844c:	637b      	str	r3, [r7, #52]	; 0x34
 800844e:	e2d3      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	637b      	str	r3, [r7, #52]	; 0x34
 8008454:	e2d0      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008456:	4b8d      	ldr	r3, [pc, #564]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800845c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008464:	d112      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800846c:	d10e      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800846e:	4b87      	ldr	r3, [pc, #540]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800847c:	d102      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800847e:	23fa      	movs	r3, #250	; 0xfa
 8008480:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008482:	e2b9      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008484:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008488:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800848a:	e2b5      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800848c:	4b7f      	ldr	r3, [pc, #508]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008498:	d106      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084a0:	d102      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 80084a2:	4b7c      	ldr	r3, [pc, #496]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80084a4:	637b      	str	r3, [r7, #52]	; 0x34
 80084a6:	e2a7      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80084a8:	4b78      	ldr	r3, [pc, #480]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80084aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d107      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084bc:	d103      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 80084be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084c2:	637b      	str	r3, [r7, #52]	; 0x34
 80084c4:	e298      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	637b      	str	r3, [r7, #52]	; 0x34
 80084ca:	e295      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80084cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084d0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80084d4:	430b      	orrs	r3, r1
 80084d6:	d147      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80084d8:	4b6c      	ldr	r3, [pc, #432]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80084da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80084e2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d103      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80084ea:	f7fd fdbf 	bl	800606c <HAL_RCC_GetPCLK1Freq>
 80084ee:	6378      	str	r0, [r7, #52]	; 0x34
 80084f0:	e282      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80084f2:	4b66      	ldr	r3, [pc, #408]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80084f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008500:	d112      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008508:	d10e      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800850a:	4b60      	ldr	r3, [pc, #384]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800850c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008518:	d102      	bne.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800851a:	23fa      	movs	r3, #250	; 0xfa
 800851c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800851e:	e26b      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008520:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008524:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008526:	e267      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008528:	4b58      	ldr	r3, [pc, #352]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008534:	d106      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800853c:	d102      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800853e:	4b55      	ldr	r3, [pc, #340]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008540:	637b      	str	r3, [r7, #52]	; 0x34
 8008542:	e259      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008544:	4b51      	ldr	r3, [pc, #324]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b02      	cmp	r3, #2
 8008550:	d107      	bne.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008558:	d103      	bne.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800855a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800855e:	637b      	str	r3, [r7, #52]	; 0x34
 8008560:	e24a      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	637b      	str	r3, [r7, #52]	; 0x34
 8008566:	e247      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800856c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8008570:	430b      	orrs	r3, r1
 8008572:	d12d      	bne.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008574:	4b45      	ldr	r3, [pc, #276]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800857a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800857e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008580:	4b42      	ldr	r3, [pc, #264]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800858c:	d105      	bne.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	2b00      	cmp	r3, #0
 8008592:	d102      	bne.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8008594:	4b3f      	ldr	r3, [pc, #252]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008596:	637b      	str	r3, [r7, #52]	; 0x34
 8008598:	e22e      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085a0:	d107      	bne.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fe fc1a 	bl	8006de0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	637b      	str	r3, [r7, #52]	; 0x34
 80085b0:	e222      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085b8:	d107      	bne.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ba:	f107 0318 	add.w	r3, r7, #24
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fe fd76 	bl	80070b0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	637b      	str	r3, [r7, #52]	; 0x34
 80085c8:	e216      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	637b      	str	r3, [r7, #52]	; 0x34
 80085ce:	e213      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80085d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80085d8:	430b      	orrs	r3, r1
 80085da:	d15d      	bne.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80085dc:	4b2b      	ldr	r3, [pc, #172]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80085de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80085e6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80085e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085ee:	d028      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085f6:	d845      	bhi.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085fe:	d013      	beq.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008606:	d83d      	bhi.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	2b00      	cmp	r3, #0
 800860c:	d004      	beq.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008614:	d004      	beq.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8008616:	e035      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008618:	f7fd fd3c 	bl	8006094 <HAL_RCC_GetPCLK2Freq>
 800861c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800861e:	e1eb      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008620:	f7fd fc02 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8008624:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008626:	e1e7      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008628:	4b18      	ldr	r3, [pc, #96]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008634:	d102      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8008636:	4b17      	ldr	r3, [pc, #92]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008638:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800863a:	e1dd      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008640:	e1da      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008642:	4b12      	ldr	r3, [pc, #72]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0320 	and.w	r3, r3, #32
 800864a:	2b20      	cmp	r3, #32
 800864c:	d117      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800864e:	4b0f      	ldr	r3, [pc, #60]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d005      	beq.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800865a:	4b0c      	ldr	r3, [pc, #48]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	0e1b      	lsrs	r3, r3, #24
 8008660:	f003 030f 	and.w	r3, r3, #15
 8008664:	e006      	b.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8008666:	4b09      	ldr	r3, [pc, #36]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800866c:	041b      	lsls	r3, r3, #16
 800866e:	0e1b      	lsrs	r3, r3, #24
 8008670:	f003 030f 	and.w	r3, r3, #15
 8008674:	4a06      	ldr	r2, [pc, #24]	; (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800867a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800867c:	e1bc      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008682:	e1b9      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008688:	e1b6      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800868a:	bf00      	nop
 800868c:	46020c00 	.word	0x46020c00
 8008690:	08015404 	.word	0x08015404
 8008694:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800869c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80086a0:	430b      	orrs	r3, r1
 80086a2:	d156      	bne.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80086a4:	4ba5      	ldr	r3, [pc, #660]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80086a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80086ae:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086b6:	d028      	beq.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 80086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086be:	d845      	bhi.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086c6:	d013      	beq.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 80086c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086ce:	d83d      	bhi.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80086d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d004      	beq.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086dc:	d004      	beq.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 80086de:	e035      	b.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80086e0:	f7fd fcc4 	bl	800606c <HAL_RCC_GetPCLK1Freq>
 80086e4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80086e6:	e187      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80086e8:	f7fd fb9e 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 80086ec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80086ee:	e183      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086f0:	4b92      	ldr	r3, [pc, #584]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086fc:	d102      	bne.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 80086fe:	4b90      	ldr	r3, [pc, #576]	; (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8008700:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008702:	e179      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008708:	e176      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800870a:	4b8c      	ldr	r3, [pc, #560]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0320 	and.w	r3, r3, #32
 8008712:	2b20      	cmp	r3, #32
 8008714:	d117      	bne.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008716:	4b89      	ldr	r3, [pc, #548]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d005      	beq.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8008722:	4b86      	ldr	r3, [pc, #536]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	0e1b      	lsrs	r3, r3, #24
 8008728:	f003 030f 	and.w	r3, r3, #15
 800872c:	e006      	b.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800872e:	4b83      	ldr	r3, [pc, #524]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008730:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008734:	041b      	lsls	r3, r3, #16
 8008736:	0e1b      	lsrs	r3, r3, #24
 8008738:	f003 030f 	and.w	r3, r3, #15
 800873c:	4a81      	ldr	r2, [pc, #516]	; (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800873e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008742:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008744:	e158      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800874a:	e155      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008750:	e152      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008756:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800875a:	430b      	orrs	r3, r1
 800875c:	d177      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800875e:	4b77      	ldr	r3, [pc, #476]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008764:	f003 0318 	and.w	r3, r3, #24
 8008768:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	2b18      	cmp	r3, #24
 800876e:	d86b      	bhi.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8008770:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	080087dd 	.word	0x080087dd
 800877c:	08008849 	.word	0x08008849
 8008780:	08008849 	.word	0x08008849
 8008784:	08008849 	.word	0x08008849
 8008788:	08008849 	.word	0x08008849
 800878c:	08008849 	.word	0x08008849
 8008790:	08008849 	.word	0x08008849
 8008794:	08008849 	.word	0x08008849
 8008798:	080087e5 	.word	0x080087e5
 800879c:	08008849 	.word	0x08008849
 80087a0:	08008849 	.word	0x08008849
 80087a4:	08008849 	.word	0x08008849
 80087a8:	08008849 	.word	0x08008849
 80087ac:	08008849 	.word	0x08008849
 80087b0:	08008849 	.word	0x08008849
 80087b4:	08008849 	.word	0x08008849
 80087b8:	080087ed 	.word	0x080087ed
 80087bc:	08008849 	.word	0x08008849
 80087c0:	08008849 	.word	0x08008849
 80087c4:	08008849 	.word	0x08008849
 80087c8:	08008849 	.word	0x08008849
 80087cc:	08008849 	.word	0x08008849
 80087d0:	08008849 	.word	0x08008849
 80087d4:	08008849 	.word	0x08008849
 80087d8:	08008807 	.word	0x08008807
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80087dc:	f7fd fc6e 	bl	80060bc <HAL_RCC_GetPCLK3Freq>
 80087e0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80087e2:	e109      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80087e4:	f7fd fb20 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 80087e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80087ea:	e105      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087ec:	4b53      	ldr	r3, [pc, #332]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087f8:	d102      	bne.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 80087fa:	4b51      	ldr	r3, [pc, #324]	; (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80087fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087fe:	e0fb      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008804:	e0f8      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008806:	4b4d      	ldr	r3, [pc, #308]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b20      	cmp	r3, #32
 8008810:	d117      	bne.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008812:	4b4a      	ldr	r3, [pc, #296]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d005      	beq.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800881e:	4b47      	ldr	r3, [pc, #284]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	0e1b      	lsrs	r3, r3, #24
 8008824:	f003 030f 	and.w	r3, r3, #15
 8008828:	e006      	b.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800882a:	4b44      	ldr	r3, [pc, #272]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800882c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008830:	041b      	lsls	r3, r3, #16
 8008832:	0e1b      	lsrs	r3, r3, #24
 8008834:	f003 030f 	and.w	r3, r3, #15
 8008838:	4a42      	ldr	r2, [pc, #264]	; (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800883a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800883e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008840:	e0da      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008846:	e0d7      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800884c:	e0d4      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800884e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008852:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8008856:	430b      	orrs	r3, r1
 8008858:	d155      	bne.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800885a:	4b38      	ldr	r3, [pc, #224]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800885c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008860:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008864:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800886c:	d013      	beq.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800886e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008870:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008874:	d844      	bhi.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800887c:	d013      	beq.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008884:	d83c      	bhi.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008888:	2b00      	cmp	r3, #0
 800888a:	d014      	beq.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008892:	d014      	beq.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8008894:	e034      	b.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008896:	f107 0318 	add.w	r3, r7, #24
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fc08 	bl	80070b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088a4:	e0a8      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe fa98 	bl	8006de0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088b4:	e0a0      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80088b6:	f7fd fab7 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 80088ba:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80088bc:	e09c      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80088be:	4b1f      	ldr	r3, [pc, #124]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0320 	and.w	r3, r3, #32
 80088c6:	2b20      	cmp	r3, #32
 80088c8:	d117      	bne.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80088ca:	4b1c      	ldr	r3, [pc, #112]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d005      	beq.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 80088d6:	4b19      	ldr	r3, [pc, #100]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	0e1b      	lsrs	r3, r3, #24
 80088dc:	f003 030f 	and.w	r3, r3, #15
 80088e0:	e006      	b.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80088e2:	4b16      	ldr	r3, [pc, #88]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088e8:	041b      	lsls	r3, r3, #16
 80088ea:	0e1b      	lsrs	r3, r3, #24
 80088ec:	f003 030f 	and.w	r3, r3, #15
 80088f0:	4a14      	ldr	r2, [pc, #80]	; (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80088f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088f6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088f8:	e07e      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088fe:	e07b      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008904:	e078      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800890a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800890e:	430b      	orrs	r3, r1
 8008910:	d138      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008912:	4b0a      	ldr	r3, [pc, #40]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800891c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800891e:	4b07      	ldr	r3, [pc, #28]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b02      	cmp	r3, #2
 800892a:	d10d      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800892c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8008932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008936:	637b      	str	r3, [r7, #52]	; 0x34
 8008938:	e05e      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800893a:	bf00      	nop
 800893c:	46020c00 	.word	0x46020c00
 8008940:	00f42400 	.word	0x00f42400
 8008944:	08015404 	.word	0x08015404
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008948:	4b2e      	ldr	r3, [pc, #184]	; (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800894a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800894e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008956:	d112      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8008958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800895e:	d10e      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008960:	4b28      	ldr	r3, [pc, #160]	; (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800896a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800896e:	d102      	bne.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8008970:	23fa      	movs	r3, #250	; 0xfa
 8008972:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008974:	e040      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008976:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800897a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800897c:	e03c      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	637b      	str	r3, [r7, #52]	; 0x34
 8008982:	e039      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008988:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800898c:	430b      	orrs	r3, r1
 800898e:	d131      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008990:	4b1c      	ldr	r3, [pc, #112]	; (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008992:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008996:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800899a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800899c:	4b19      	ldr	r3, [pc, #100]	; (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089a8:	d105      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d102      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 80089b0:	4b15      	ldr	r3, [pc, #84]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 80089b2:	637b      	str	r3, [r7, #52]	; 0x34
 80089b4:	e020      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80089b6:	4b13      	ldr	r3, [pc, #76]	; (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089c2:	d106      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ca:	d102      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 80089cc:	4b0f      	ldr	r3, [pc, #60]	; (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 80089ce:	637b      	str	r3, [r7, #52]	; 0x34
 80089d0:	e012      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80089d2:	4b0c      	ldr	r3, [pc, #48]	; (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089de:	d106      	bne.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089e6:	d102      	bne.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 80089e8:	4b09      	ldr	r3, [pc, #36]	; (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 80089ea:	637b      	str	r3, [r7, #52]	; 0x34
 80089ec:	e004      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	637b      	str	r3, [r7, #52]	; 0x34
 80089f2:	e001      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80089f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3738      	adds	r7, #56	; 0x38
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	46020c00 	.word	0x46020c00
 8008a08:	02dc6c00 	.word	0x02dc6c00
 8008a0c:	016e3600 	.word	0x016e3600
 8008a10:	00f42400 	.word	0x00f42400

08008a14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008a1c:	4b47      	ldr	r3, [pc, #284]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a46      	ldr	r2, [pc, #280]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008a22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a28:	f7f8 ff52 	bl	80018d0 <HAL_GetTick>
 8008a2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a2e:	e008      	b.n	8008a42 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a30:	f7f8 ff4e 	bl	80018d0 <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d901      	bls.n	8008a42 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e077      	b.n	8008b32 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a42:	4b3e      	ldr	r3, [pc, #248]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1f0      	bne.n	8008a30 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008a4e:	4b3b      	ldr	r3, [pc, #236]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a56:	f023 0303 	bic.w	r3, r3, #3
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	6811      	ldr	r1, [r2, #0]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	6852      	ldr	r2, [r2, #4]
 8008a62:	3a01      	subs	r2, #1
 8008a64:	0212      	lsls	r2, r2, #8
 8008a66:	430a      	orrs	r2, r1
 8008a68:	4934      	ldr	r1, [pc, #208]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008a6e:	4b33      	ldr	r3, [pc, #204]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a72:	4b33      	ldr	r3, [pc, #204]	; (8008b40 <RCCEx_PLL2_Config+0x12c>)
 8008a74:	4013      	ands	r3, r2
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	6892      	ldr	r2, [r2, #8]
 8008a7a:	3a01      	subs	r2, #1
 8008a7c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	68d2      	ldr	r2, [r2, #12]
 8008a84:	3a01      	subs	r2, #1
 8008a86:	0252      	lsls	r2, r2, #9
 8008a88:	b292      	uxth	r2, r2
 8008a8a:	4311      	orrs	r1, r2
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	6912      	ldr	r2, [r2, #16]
 8008a90:	3a01      	subs	r2, #1
 8008a92:	0412      	lsls	r2, r2, #16
 8008a94:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008a98:	4311      	orrs	r1, r2
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6952      	ldr	r2, [r2, #20]
 8008a9e:	3a01      	subs	r2, #1
 8008aa0:	0612      	lsls	r2, r2, #24
 8008aa2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	4924      	ldr	r1, [pc, #144]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008aae:	4b23      	ldr	r3, [pc, #140]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab2:	f023 020c 	bic.w	r2, r3, #12
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	4920      	ldr	r1, [pc, #128]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008abc:	4313      	orrs	r3, r2
 8008abe:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008ac0:	4b1e      	ldr	r3, [pc, #120]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	491c      	ldr	r1, [pc, #112]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008ace:	4b1b      	ldr	r3, [pc, #108]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad2:	4a1a      	ldr	r2, [pc, #104]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008ad4:	f023 0310 	bic.w	r3, r3, #16
 8008ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008ada:	4b18      	ldr	r3, [pc, #96]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ae2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	69d2      	ldr	r2, [r2, #28]
 8008aea:	00d2      	lsls	r2, r2, #3
 8008aec:	4913      	ldr	r1, [pc, #76]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008af2:	4b12      	ldr	r3, [pc, #72]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af6:	4a11      	ldr	r2, [pc, #68]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008af8:	f043 0310 	orr.w	r3, r3, #16
 8008afc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008afe:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a0e      	ldr	r2, [pc, #56]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008b04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b08:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b0a:	f7f8 fee1 	bl	80018d0 <HAL_GetTick>
 8008b0e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b10:	e008      	b.n	8008b24 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b12:	f7f8 fedd 	bl	80018d0 <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d901      	bls.n	8008b24 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e006      	b.n	8008b32 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b24:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <RCCEx_PLL2_Config+0x128>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0f0      	beq.n	8008b12 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008b30:	2300      	movs	r3, #0

}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	46020c00 	.word	0x46020c00
 8008b40:	80800000 	.word	0x80800000

08008b44 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008b4c:	4b47      	ldr	r3, [pc, #284]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a46      	ldr	r2, [pc, #280]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b56:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b58:	f7f8 feba 	bl	80018d0 <HAL_GetTick>
 8008b5c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b5e:	e008      	b.n	8008b72 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b60:	f7f8 feb6 	bl	80018d0 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d901      	bls.n	8008b72 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e077      	b.n	8008c62 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b72:	4b3e      	ldr	r3, [pc, #248]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1f0      	bne.n	8008b60 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008b7e:	4b3b      	ldr	r3, [pc, #236]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008b86:	f023 0303 	bic.w	r3, r3, #3
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	6811      	ldr	r1, [r2, #0]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	6852      	ldr	r2, [r2, #4]
 8008b92:	3a01      	subs	r2, #1
 8008b94:	0212      	lsls	r2, r2, #8
 8008b96:	430a      	orrs	r2, r1
 8008b98:	4934      	ldr	r1, [pc, #208]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	630b      	str	r3, [r1, #48]	; 0x30
 8008b9e:	4b33      	ldr	r3, [pc, #204]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ba2:	4b33      	ldr	r3, [pc, #204]	; (8008c70 <RCCEx_PLL3_Config+0x12c>)
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	6892      	ldr	r2, [r2, #8]
 8008baa:	3a01      	subs	r2, #1
 8008bac:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	68d2      	ldr	r2, [r2, #12]
 8008bb4:	3a01      	subs	r2, #1
 8008bb6:	0252      	lsls	r2, r2, #9
 8008bb8:	b292      	uxth	r2, r2
 8008bba:	4311      	orrs	r1, r2
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6912      	ldr	r2, [r2, #16]
 8008bc0:	3a01      	subs	r2, #1
 8008bc2:	0412      	lsls	r2, r2, #16
 8008bc4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008bc8:	4311      	orrs	r1, r2
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	6952      	ldr	r2, [r2, #20]
 8008bce:	3a01      	subs	r2, #1
 8008bd0:	0612      	lsls	r2, r2, #24
 8008bd2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	4924      	ldr	r1, [pc, #144]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008bde:	4b23      	ldr	r3, [pc, #140]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be2:	f023 020c 	bic.w	r2, r3, #12
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	4920      	ldr	r1, [pc, #128]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008bf0:	4b1e      	ldr	r3, [pc, #120]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	491c      	ldr	r1, [pc, #112]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008bfe:	4b1b      	ldr	r3, [pc, #108]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c02:	4a1a      	ldr	r2, [pc, #104]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008c04:	f023 0310 	bic.w	r3, r3, #16
 8008c08:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c0a:	4b18      	ldr	r3, [pc, #96]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	69d2      	ldr	r2, [r2, #28]
 8008c1a:	00d2      	lsls	r2, r2, #3
 8008c1c:	4913      	ldr	r1, [pc, #76]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008c22:	4b12      	ldr	r3, [pc, #72]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c26:	4a11      	ldr	r2, [pc, #68]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008c28:	f043 0310 	orr.w	r3, r3, #16
 8008c2c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008c2e:	4b0f      	ldr	r3, [pc, #60]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a0e      	ldr	r2, [pc, #56]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c38:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c3a:	f7f8 fe49 	bl	80018d0 <HAL_GetTick>
 8008c3e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c40:	e008      	b.n	8008c54 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c42:	f7f8 fe45 	bl	80018d0 <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d901      	bls.n	8008c54 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e006      	b.n	8008c62 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c54:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <RCCEx_PLL3_Config+0x128>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d0f0      	beq.n	8008c42 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	46020c00 	.word	0x46020c00
 8008c70:	80800000 	.word	0x80800000

08008c74 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d071      	beq.n	8008d6a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d106      	bne.n	8008ca0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7f8 fb5c 	bl	8001358 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008ca8:	4b32      	ldr	r3, [pc, #200]	; (8008d74 <HAL_RTC_Init+0x100>)
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f003 0310 	and.w	r3, r3, #16
 8008cb0:	2b10      	cmp	r3, #16
 8008cb2:	d051      	beq.n	8008d58 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008cb4:	4b2f      	ldr	r3, [pc, #188]	; (8008d74 <HAL_RTC_Init+0x100>)
 8008cb6:	22ca      	movs	r2, #202	; 0xca
 8008cb8:	625a      	str	r2, [r3, #36]	; 0x24
 8008cba:	4b2e      	ldr	r3, [pc, #184]	; (8008d74 <HAL_RTC_Init+0x100>)
 8008cbc:	2253      	movs	r2, #83	; 0x53
 8008cbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fa6d 	bl	80091a0 <RTC_EnterInitMode>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d13f      	bne.n	8008d50 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008cd0:	4b28      	ldr	r3, [pc, #160]	; (8008d74 <HAL_RTC_Init+0x100>)
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	4a27      	ldr	r2, [pc, #156]	; (8008d74 <HAL_RTC_Init+0x100>)
 8008cd6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cde:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008ce0:	4b24      	ldr	r3, [pc, #144]	; (8008d74 <HAL_RTC_Init+0x100>)
 8008ce2:	699a      	ldr	r2, [r3, #24]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6859      	ldr	r1, [r3, #4]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	4319      	orrs	r1, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	430b      	orrs	r3, r1
 8008cf4:	491f      	ldr	r1, [pc, #124]	; (8008d74 <HAL_RTC_Init+0x100>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	041b      	lsls	r3, r3, #16
 8008d04:	491b      	ldr	r1, [pc, #108]	; (8008d74 <HAL_RTC_Init+0x100>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008d0a:	4b1a      	ldr	r3, [pc, #104]	; (8008d74 <HAL_RTC_Init+0x100>)
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1a:	430b      	orrs	r3, r1
 8008d1c:	4915      	ldr	r1, [pc, #84]	; (8008d74 <HAL_RTC_Init+0x100>)
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fa78 	bl	8009218 <RTC_ExitInitMode>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10e      	bne.n	8008d50 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008d32:	4b10      	ldr	r3, [pc, #64]	; (8008d74 <HAL_RTC_Init+0x100>)
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a19      	ldr	r1, [r3, #32]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	4319      	orrs	r1, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	430b      	orrs	r3, r1
 8008d4a:	490a      	ldr	r1, [pc, #40]	; (8008d74 <HAL_RTC_Init+0x100>)
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d50:	4b08      	ldr	r3, [pc, #32]	; (8008d74 <HAL_RTC_Init+0x100>)
 8008d52:	22ff      	movs	r2, #255	; 0xff
 8008d54:	625a      	str	r2, [r3, #36]	; 0x24
 8008d56:	e001      	b.n	8008d5c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d103      	bne.n	8008d6a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	46007800 	.word	0x46007800

08008d78 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d78:	b590      	push	{r4, r7, lr}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d101      	bne.n	8008d92 <HAL_RTC_SetTime+0x1a>
 8008d8e:	2302      	movs	r3, #2
 8008d90:	e088      	b.n	8008ea4 <HAL_RTC_SetTime+0x12c>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2202      	movs	r2, #2
 8008d9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008da2:	4b42      	ldr	r3, [pc, #264]	; (8008eac <HAL_RTC_SetTime+0x134>)
 8008da4:	22ca      	movs	r2, #202	; 0xca
 8008da6:	625a      	str	r2, [r3, #36]	; 0x24
 8008da8:	4b40      	ldr	r3, [pc, #256]	; (8008eac <HAL_RTC_SetTime+0x134>)
 8008daa:	2253      	movs	r2, #83	; 0x53
 8008dac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 f9f6 	bl	80091a0 <RTC_EnterInitMode>
 8008db4:	4603      	mov	r3, r0
 8008db6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008db8:	7cfb      	ldrb	r3, [r7, #19]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d163      	bne.n	8008e86 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008dbe:	4b3b      	ldr	r3, [pc, #236]	; (8008eac <HAL_RTC_SetTime+0x134>)
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dca:	d057      	beq.n	8008e7c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d125      	bne.n	8008e1e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008dd2:	4b36      	ldr	r3, [pc, #216]	; (8008eac <HAL_RTC_SetTime+0x134>)
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d102      	bne.n	8008de4 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2200      	movs	r2, #0
 8008de2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 fa53 	bl	8009294 <RTC_ByteToBcd2>
 8008dee:	4603      	mov	r3, r0
 8008df0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	785b      	ldrb	r3, [r3, #1]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 fa4c 	bl	8009294 <RTC_ByteToBcd2>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e00:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	789b      	ldrb	r3, [r3, #2]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 fa44 	bl	8009294 <RTC_ByteToBcd2>
 8008e0c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e0e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	78db      	ldrb	r3, [r3, #3]
 8008e16:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	617b      	str	r3, [r7, #20]
 8008e1c:	e017      	b.n	8008e4e <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008e1e:	4b23      	ldr	r3, [pc, #140]	; (8008eac <HAL_RTC_SetTime+0x134>)
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d102      	bne.n	8008e30 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	785b      	ldrb	r3, [r3, #1]
 8008e3a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e3c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e42:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	78db      	ldrb	r3, [r3, #3]
 8008e48:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8008e4e:	4a17      	ldr	r2, [pc, #92]	; (8008eac <HAL_RTC_SetTime+0x134>)
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008e56:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008e5a:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8008e5c:	4b13      	ldr	r3, [pc, #76]	; (8008eac <HAL_RTC_SetTime+0x134>)
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	4a12      	ldr	r2, [pc, #72]	; (8008eac <HAL_RTC_SetTime+0x134>)
 8008e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e66:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8008e68:	4b10      	ldr	r3, [pc, #64]	; (8008eac <HAL_RTC_SetTime+0x134>)
 8008e6a:	699a      	ldr	r2, [r3, #24]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	68d9      	ldr	r1, [r3, #12]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	430b      	orrs	r3, r1
 8008e76:	490d      	ldr	r1, [pc, #52]	; (8008eac <HAL_RTC_SetTime+0x134>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 f9cb 	bl	8009218 <RTC_ExitInitMode>
 8008e82:	4603      	mov	r3, r0
 8008e84:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e86:	4b09      	ldr	r3, [pc, #36]	; (8008eac <HAL_RTC_SetTime+0x134>)
 8008e88:	22ff      	movs	r2, #255	; 0xff
 8008e8a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008e8c:	7cfb      	ldrb	r3, [r7, #19]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d103      	bne.n	8008e9a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8008ea2:	7cfb      	ldrb	r3, [r7, #19]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	371c      	adds	r7, #28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd90      	pop	{r4, r7, pc}
 8008eac:	46007800 	.word	0x46007800

08008eb0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8008ebc:	4b34      	ldr	r3, [pc, #208]	; (8008f90 <HAL_RTC_GetTime+0xe0>)
 8008ebe:	689a      	ldr	r2, [r3, #8]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008ec4:	4b32      	ldr	r3, [pc, #200]	; (8008f90 <HAL_RTC_GetTime+0xe0>)
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ed0:	d04a      	beq.n	8008f68 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8008ed2:	4b2f      	ldr	r3, [pc, #188]	; (8008f90 <HAL_RTC_GetTime+0xe0>)
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8008ede:	4b2c      	ldr	r3, [pc, #176]	; (8008f90 <HAL_RTC_GetTime+0xe0>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008ee6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008eea:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	0c1b      	lsrs	r3, r3, #16
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	0a1b      	lsrs	r3, r3, #8
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	0d9b      	lsrs	r3, r3, #22
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d12a      	bne.n	8008f86 <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 f9cd 	bl	80092d4 <RTC_Bcd2ToByte>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	785b      	ldrb	r3, [r3, #1]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 f9c4 	bl	80092d4 <RTC_Bcd2ToByte>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	461a      	mov	r2, r3
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	789b      	ldrb	r3, [r3, #2]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 f9bb 	bl	80092d4 <RTC_Bcd2ToByte>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	461a      	mov	r2, r3
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	709a      	strb	r2, [r3, #2]
 8008f66:	e00e      	b.n	8008f86 <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2200      	movs	r2, #0
 8008f72:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	2200      	movs	r2, #0
 8008f78:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2200      	movs	r2, #0
 8008f84:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	46007800 	.word	0x46007800

08008f94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f94:	b590      	push	{r4, r7, lr}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d101      	bne.n	8008fae <HAL_RTC_SetDate+0x1a>
 8008faa:	2302      	movs	r3, #2
 8008fac:	e071      	b.n	8009092 <HAL_RTC_SetDate+0xfe>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10e      	bne.n	8008fe2 <HAL_RTC_SetDate+0x4e>
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	785b      	ldrb	r3, [r3, #1]
 8008fc8:	f003 0310 	and.w	r3, r3, #16
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d008      	beq.n	8008fe2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	785b      	ldrb	r3, [r3, #1]
 8008fd4:	f023 0310 	bic.w	r3, r3, #16
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	330a      	adds	r3, #10
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d11c      	bne.n	8009022 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	78db      	ldrb	r3, [r3, #3]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 f951 	bl	8009294 <RTC_ByteToBcd2>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	785b      	ldrb	r3, [r3, #1]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 f94a 	bl	8009294 <RTC_ByteToBcd2>
 8009000:	4603      	mov	r3, r0
 8009002:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009004:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	789b      	ldrb	r3, [r3, #2]
 800900a:	4618      	mov	r0, r3
 800900c:	f000 f942 	bl	8009294 <RTC_ByteToBcd2>
 8009010:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009012:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800901c:	4313      	orrs	r3, r2
 800901e:	617b      	str	r3, [r7, #20]
 8009020:	e00e      	b.n	8009040 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	78db      	ldrb	r3, [r3, #3]
 8009026:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	785b      	ldrb	r3, [r3, #1]
 800902c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800902e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009034:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800903c:	4313      	orrs	r3, r2
 800903e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009040:	4b16      	ldr	r3, [pc, #88]	; (800909c <HAL_RTC_SetDate+0x108>)
 8009042:	22ca      	movs	r2, #202	; 0xca
 8009044:	625a      	str	r2, [r3, #36]	; 0x24
 8009046:	4b15      	ldr	r3, [pc, #84]	; (800909c <HAL_RTC_SetDate+0x108>)
 8009048:	2253      	movs	r2, #83	; 0x53
 800904a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f000 f8a7 	bl	80091a0 <RTC_EnterInitMode>
 8009052:	4603      	mov	r3, r0
 8009054:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009056:	7cfb      	ldrb	r3, [r7, #19]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10b      	bne.n	8009074 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800905c:	4a0f      	ldr	r2, [pc, #60]	; (800909c <HAL_RTC_SetDate+0x108>)
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009064:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009068:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 f8d4 	bl	8009218 <RTC_ExitInitMode>
 8009070:	4603      	mov	r3, r0
 8009072:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009074:	4b09      	ldr	r3, [pc, #36]	; (800909c <HAL_RTC_SetDate+0x108>)
 8009076:	22ff      	movs	r2, #255	; 0xff
 8009078:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800907a:	7cfb      	ldrb	r3, [r7, #19]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d103      	bne.n	8009088 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8009090:	7cfb      	ldrb	r3, [r7, #19]
}
 8009092:	4618      	mov	r0, r3
 8009094:	371c      	adds	r7, #28
 8009096:	46bd      	mov	sp, r7
 8009098:	bd90      	pop	{r4, r7, pc}
 800909a:	bf00      	nop
 800909c:	46007800 	.word	0x46007800

080090a0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80090ac:	4b22      	ldr	r3, [pc, #136]	; (8009138 <HAL_RTC_GetDate+0x98>)
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80090b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80090b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	0c1b      	lsrs	r3, r3, #16
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	0a1b      	lsrs	r3, r3, #8
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	f003 031f 	and.w	r3, r3, #31
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	0b5b      	lsrs	r3, r3, #13
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	f003 0307 	and.w	r3, r3, #7
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d11a      	bne.n	800912e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	78db      	ldrb	r3, [r3, #3]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 f8e9 	bl	80092d4 <RTC_Bcd2ToByte>
 8009102:	4603      	mov	r3, r0
 8009104:	461a      	mov	r2, r3
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	785b      	ldrb	r3, [r3, #1]
 800910e:	4618      	mov	r0, r3
 8009110:	f000 f8e0 	bl	80092d4 <RTC_Bcd2ToByte>
 8009114:	4603      	mov	r3, r0
 8009116:	461a      	mov	r2, r3
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	789b      	ldrb	r3, [r3, #2]
 8009120:	4618      	mov	r0, r3
 8009122:	f000 f8d7 	bl	80092d4 <RTC_Bcd2ToByte>
 8009126:	4603      	mov	r3, r0
 8009128:	461a      	mov	r2, r3
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	46007800 	.word	0x46007800

0800913c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009144:	4b15      	ldr	r3, [pc, #84]	; (800919c <HAL_RTC_WaitForSynchro+0x60>)
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	4a14      	ldr	r2, [pc, #80]	; (800919c <HAL_RTC_WaitForSynchro+0x60>)
 800914a:	f023 0320 	bic.w	r3, r3, #32
 800914e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009150:	f7f8 fbbe 	bl	80018d0 <HAL_GetTick>
 8009154:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009156:	e013      	b.n	8009180 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009158:	f7f8 fbba 	bl	80018d0 <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009166:	d90b      	bls.n	8009180 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009168:	4b0c      	ldr	r3, [pc, #48]	; (800919c <HAL_RTC_WaitForSynchro+0x60>)
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f003 0320 	and.w	r3, r3, #32
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10c      	bne.n	800918e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2203      	movs	r2, #3
 8009178:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e008      	b.n	8009192 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009180:	4b06      	ldr	r3, [pc, #24]	; (800919c <HAL_RTC_WaitForSynchro+0x60>)
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	f003 0320 	and.w	r3, r3, #32
 8009188:	2b00      	cmp	r3, #0
 800918a:	d0e5      	beq.n	8009158 <HAL_RTC_WaitForSynchro+0x1c>
 800918c:	e000      	b.n	8009190 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800918e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	46007800 	.word	0x46007800

080091a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80091ac:	4b19      	ldr	r3, [pc, #100]	; (8009214 <RTC_EnterInitMode+0x74>)
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d128      	bne.n	800920a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80091b8:	4b16      	ldr	r3, [pc, #88]	; (8009214 <RTC_EnterInitMode+0x74>)
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	4a15      	ldr	r2, [pc, #84]	; (8009214 <RTC_EnterInitMode+0x74>)
 80091be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80091c4:	f7f8 fb84 	bl	80018d0 <HAL_GetTick>
 80091c8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80091ca:	e013      	b.n	80091f4 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80091cc:	f7f8 fb80 	bl	80018d0 <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091da:	d90b      	bls.n	80091f4 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80091dc:	4b0d      	ldr	r3, [pc, #52]	; (8009214 <RTC_EnterInitMode+0x74>)
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10f      	bne.n	8009208 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2203      	movs	r2, #3
 80091f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80091f4:	4b07      	ldr	r3, [pc, #28]	; (8009214 <RTC_EnterInitMode+0x74>)
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d104      	bne.n	800920a <RTC_EnterInitMode+0x6a>
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	2b03      	cmp	r3, #3
 8009204:	d1e2      	bne.n	80091cc <RTC_EnterInitMode+0x2c>
 8009206:	e000      	b.n	800920a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8009208:	bf00      	nop
        }
      }
    }
  }

  return status;
 800920a:	7bfb      	ldrb	r3, [r7, #15]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	46007800 	.word	0x46007800

08009218 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009224:	4b1a      	ldr	r3, [pc, #104]	; (8009290 <RTC_ExitInitMode+0x78>)
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	4a19      	ldr	r2, [pc, #100]	; (8009290 <RTC_ExitInitMode+0x78>)
 800922a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800922e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009230:	4b17      	ldr	r3, [pc, #92]	; (8009290 <RTC_ExitInitMode+0x78>)
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	f003 0320 	and.w	r3, r3, #32
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10c      	bne.n	8009256 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7ff ff7d 	bl	800913c <HAL_RTC_WaitForSynchro>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d01e      	beq.n	8009286 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2203      	movs	r2, #3
 800924c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009250:	2303      	movs	r3, #3
 8009252:	73fb      	strb	r3, [r7, #15]
 8009254:	e017      	b.n	8009286 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009256:	4b0e      	ldr	r3, [pc, #56]	; (8009290 <RTC_ExitInitMode+0x78>)
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	4a0d      	ldr	r2, [pc, #52]	; (8009290 <RTC_ExitInitMode+0x78>)
 800925c:	f023 0320 	bic.w	r3, r3, #32
 8009260:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff ff6a 	bl	800913c <HAL_RTC_WaitForSynchro>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d005      	beq.n	800927a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2203      	movs	r2, #3
 8009272:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800927a:	4b05      	ldr	r3, [pc, #20]	; (8009290 <RTC_ExitInitMode+0x78>)
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	4a04      	ldr	r2, [pc, #16]	; (8009290 <RTC_ExitInitMode+0x78>)
 8009280:	f043 0320 	orr.w	r3, r3, #32
 8009284:	6193      	str	r3, [r2, #24]
  }
  return status;
 8009286:	7bfb      	ldrb	r3, [r7, #15]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	46007800 	.word	0x46007800

08009294 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80092a2:	79fb      	ldrb	r3, [r7, #7]
 80092a4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80092a6:	e005      	b.n	80092b4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	3301      	adds	r3, #1
 80092ac:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80092ae:	7afb      	ldrb	r3, [r7, #11]
 80092b0:	3b0a      	subs	r3, #10
 80092b2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80092b4:	7afb      	ldrb	r3, [r7, #11]
 80092b6:	2b09      	cmp	r3, #9
 80092b8:	d8f6      	bhi.n	80092a8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	011b      	lsls	r3, r3, #4
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	7afb      	ldrb	r3, [r7, #11]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	b2db      	uxtb	r3, r3
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	4603      	mov	r3, r0
 80092dc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	091b      	lsrs	r3, r3, #4
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	461a      	mov	r2, r3
 80092e6:	4613      	mov	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4413      	add	r3, r2
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	f003 030f 	and.w	r3, r3, #15
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	4413      	add	r3, r2
 80092fe:	b2db      	uxtb	r3, r3
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009320:	2b01      	cmp	r3, #1
 8009322:	d101      	bne.n	8009328 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8009324:	2302      	movs	r3, #2
 8009326:	e063      	b.n	80093f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2202      	movs	r2, #2
 8009334:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009338:	4b2f      	ldr	r3, [pc, #188]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800933a:	22ca      	movs	r2, #202	; 0xca
 800933c:	625a      	str	r2, [r3, #36]	; 0x24
 800933e:	4b2e      	ldr	r3, [pc, #184]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009340:	2253      	movs	r2, #83	; 0x53
 8009342:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8009344:	4b2c      	ldr	r3, [pc, #176]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	4a2b      	ldr	r2, [pc, #172]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800934a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800934e:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8009350:	4b29      	ldr	r3, [pc, #164]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009352:	2204      	movs	r2, #4
 8009354:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009356:	4b28      	ldr	r3, [pc, #160]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935e:	2b00      	cmp	r3, #0
 8009360:	d126      	bne.n	80093b0 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
  {
    tickstart = HAL_GetTick();
 8009362:	f7f8 fab5 	bl	80018d0 <HAL_GetTick>
 8009366:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009368:	e01a      	b.n	80093a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800936a:	f7f8 fab1 	bl	80018d0 <HAL_GetTick>
 800936e:	4602      	mov	r2, r0
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009378:	d912      	bls.n	80093a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800937a:	4b1f      	ldr	r3, [pc, #124]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f003 0304 	and.w	r3, r3, #4
 8009382:	2b00      	cmp	r3, #0
 8009384:	d113      	bne.n	80093ae <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009386:	4b1c      	ldr	r3, [pc, #112]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009388:	22ff      	movs	r2, #255	; 0xff
 800938a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2203      	movs	r2, #3
 8009390:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          return HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	e027      	b.n	80093f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80093a0:	4b15      	ldr	r3, [pc, #84]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f003 0304 	and.w	r3, r3, #4
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0de      	beq.n	800936a <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
 80093ac:	e000      	b.n	80093b0 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
        }
        else
        {
          break;
 80093ae:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	041a      	lsls	r2, r3, #16
 80093b4:	4910      	ldr	r1, [pc, #64]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80093bc:	4b0e      	ldr	r3, [pc, #56]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	f023 0207 	bic.w	r2, r3, #7
 80093c4:	490c      	ldr	r1, [pc, #48]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 80093cc:	4b0a      	ldr	r3, [pc, #40]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	4a09      	ldr	r2, [pc, #36]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093d2:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 80093d6:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093d8:	4b07      	ldr	r3, [pc, #28]	; (80093f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093da:	22ff      	movs	r2, #255	; 0xff
 80093dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	46007800 	.word	0x46007800

080093fc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800940a:	2b01      	cmp	r3, #1
 800940c:	d101      	bne.n	8009412 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800940e:	2302      	movs	r3, #2
 8009410:	e046      	b.n	80094a0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2202      	movs	r2, #2
 800941e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009422:	4b21      	ldr	r3, [pc, #132]	; (80094a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009424:	22ca      	movs	r2, #202	; 0xca
 8009426:	625a      	str	r2, [r3, #36]	; 0x24
 8009428:	4b1f      	ldr	r3, [pc, #124]	; (80094a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800942a:	2253      	movs	r2, #83	; 0x53
 800942c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 800942e:	4b1e      	ldr	r3, [pc, #120]	; (80094a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	4a1d      	ldr	r2, [pc, #116]	; (80094a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009434:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8009438:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 800943a:	f7f8 fa49 	bl	80018d0 <HAL_GetTick>
 800943e:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009440:	e01a      	b.n	8009478 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009442:	f7f8 fa45 	bl	80018d0 <HAL_GetTick>
 8009446:	4602      	mov	r2, r0
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009450:	d912      	bls.n	8009478 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009452:	4b15      	ldr	r3, [pc, #84]	; (80094a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	f003 0304 	and.w	r3, r3, #4
 800945a:	2b00      	cmp	r3, #0
 800945c:	d113      	bne.n	8009486 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800945e:	4b12      	ldr	r3, [pc, #72]	; (80094a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009460:	22ff      	movs	r2, #255	; 0xff
 8009462:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2203      	movs	r2, #3
 8009468:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        return HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	e013      	b.n	80094a0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009478:	4b0b      	ldr	r3, [pc, #44]	; (80094a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	f003 0304 	and.w	r3, r3, #4
 8009480:	2b00      	cmp	r3, #0
 8009482:	d0de      	beq.n	8009442 <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
 8009484:	e000      	b.n	8009488 <HAL_RTCEx_DeactivateWakeUpTimer+0x8c>
      }
      else
      {
        break;
 8009486:	bf00      	nop
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009488:	4b07      	ldr	r3, [pc, #28]	; (80094a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800948a:	22ff      	movs	r2, #255	; 0xff
 800948c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	46007800 	.word	0x46007800

080094ac <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80094b4:	4b09      	ldr	r3, [pc, #36]	; (80094dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80094b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b8:	f003 0304 	and.w	r3, r3, #4
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80094c0:	4b06      	ldr	r3, [pc, #24]	; (80094dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80094c2:	2204      	movs	r2, #4
 80094c4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7f7 fe80 	bl	80011cc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	46007800 	.word	0x46007800

080094e0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	4910      	ldr	r1, [pc, #64]	; (8009534 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80094f4:	4313      	orrs	r3, r2
 80094f6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	689a      	ldr	r2, [r3, #8]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	431a      	orrs	r2, r3
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	490c      	ldr	r1, [pc, #48]	; (8009538 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009508:	4313      	orrs	r3, r2
 800950a:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800950c:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800950e:	6a1b      	ldr	r3, [r3, #32]
 8009510:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	6919      	ldr	r1, [r3, #16]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	695b      	ldr	r3, [r3, #20]
 800951c:	041b      	lsls	r3, r3, #16
 800951e:	430b      	orrs	r3, r1
 8009520:	4905      	ldr	r1, [pc, #20]	; (8009538 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009522:	4313      	orrs	r3, r2
 8009524:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	46007800 	.word	0x46007800
 8009538:	46007c00 	.word	0x46007c00

0800953c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e0fb      	b.n	8009746 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a7f      	ldr	r2, [pc, #508]	; (8009750 <HAL_SPI_Init+0x214>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d004      	beq.n	8009562 <HAL_SPI_Init+0x26>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a7d      	ldr	r2, [pc, #500]	; (8009754 <HAL_SPI_Init+0x218>)
 800955e:	4293      	cmp	r3, r2
 8009560:	e000      	b.n	8009564 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009562:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a78      	ldr	r2, [pc, #480]	; (8009750 <HAL_SPI_Init+0x214>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d004      	beq.n	800957e <HAL_SPI_Init+0x42>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a76      	ldr	r2, [pc, #472]	; (8009754 <HAL_SPI_Init+0x218>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d105      	bne.n	800958a <HAL_SPI_Init+0x4e>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	2b0f      	cmp	r3, #15
 8009584:	d901      	bls.n	800958a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e0dd      	b.n	8009746 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fbd8 	bl	8009d40 <SPI_GetPacketSize>
 8009590:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a6e      	ldr	r2, [pc, #440]	; (8009750 <HAL_SPI_Init+0x214>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d004      	beq.n	80095a6 <HAL_SPI_Init+0x6a>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a6c      	ldr	r2, [pc, #432]	; (8009754 <HAL_SPI_Init+0x218>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d102      	bne.n	80095ac <HAL_SPI_Init+0x70>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2b08      	cmp	r3, #8
 80095aa:	d816      	bhi.n	80095da <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80095b0:	4a69      	ldr	r2, [pc, #420]	; (8009758 <HAL_SPI_Init+0x21c>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d00e      	beq.n	80095d4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a68      	ldr	r2, [pc, #416]	; (800975c <HAL_SPI_Init+0x220>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d009      	beq.n	80095d4 <HAL_SPI_Init+0x98>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a66      	ldr	r2, [pc, #408]	; (8009760 <HAL_SPI_Init+0x224>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d004      	beq.n	80095d4 <HAL_SPI_Init+0x98>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a65      	ldr	r2, [pc, #404]	; (8009764 <HAL_SPI_Init+0x228>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d104      	bne.n	80095de <HAL_SPI_Init+0xa2>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2b10      	cmp	r3, #16
 80095d8:	d901      	bls.n	80095de <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e0b3      	b.n	8009746 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d106      	bne.n	80095f8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7f7 fefc 	bl	80013f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2202      	movs	r2, #2
 80095fc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f022 0201 	bic.w	r2, r2, #1
 800960e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800961a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009624:	d119      	bne.n	800965a <HAL_SPI_Init+0x11e>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800962e:	d103      	bne.n	8009638 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009634:	2b00      	cmp	r3, #0
 8009636:	d008      	beq.n	800964a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10c      	bne.n	800965a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009644:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009648:	d107      	bne.n	800965a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009658:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00f      	beq.n	8009686 <HAL_SPI_Init+0x14a>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	2b06      	cmp	r3, #6
 800966c:	d90b      	bls.n	8009686 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	430a      	orrs	r2, r1
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	e007      	b.n	8009696 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009694:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	69da      	ldr	r2, [r3, #28]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969e:	431a      	orrs	r2, r3
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	431a      	orrs	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a8:	ea42 0103 	orr.w	r1, r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68da      	ldr	r2, [r3, #12]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	431a      	orrs	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c6:	431a      	orrs	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	431a      	orrs	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	431a      	orrs	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	431a      	orrs	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	431a      	orrs	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	431a      	orrs	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ea:	431a      	orrs	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	431a      	orrs	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096f6:	431a      	orrs	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096fc:	431a      	orrs	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009702:	ea42 0103 	orr.w	r1, r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	430a      	orrs	r2, r1
 8009710:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00a      	beq.n	8009734 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	430a      	orrs	r2, r1
 8009732:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	46002000 	.word	0x46002000
 8009754:	56002000 	.word	0x56002000
 8009758:	40013000 	.word	0x40013000
 800975c:	50013000 	.word	0x50013000
 8009760:	40003800 	.word	0x40003800
 8009764:	50003800 	.word	0x50003800

08009768 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b08a      	sub	sp, #40	; 0x28
 800976c:	af02      	add	r7, sp, #8
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	603b      	str	r3, [r7, #0]
 8009774:	4613      	mov	r3, r2
 8009776:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3320      	adds	r3, #32
 800977e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800978a:	2b01      	cmp	r3, #1
 800978c:	d101      	bne.n	8009792 <HAL_SPI_Transmit+0x2a>
 800978e:	2302      	movs	r3, #2
 8009790:	e203      	b.n	8009b9a <HAL_SPI_Transmit+0x432>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800979a:	f7f8 f899 	bl	80018d0 <HAL_GetTick>
 800979e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d007      	beq.n	80097bc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80097ac:	2302      	movs	r3, #2
 80097ae:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80097b8:	7efb      	ldrb	r3, [r7, #27]
 80097ba:	e1ee      	b.n	8009b9a <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <HAL_SPI_Transmit+0x60>
 80097c2:	88fb      	ldrh	r3, [r7, #6]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d107      	bne.n	80097d8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80097d4:	7efb      	ldrb	r3, [r7, #27]
 80097d6:	e1e0      	b.n	8009b9a <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2203      	movs	r2, #3
 80097dc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	88fa      	ldrh	r2, [r7, #6]
 80097f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	88fa      	ldrh	r2, [r7, #6]
 80097fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009828:	d108      	bne.n	800983c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	e009      	b.n	8009850 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800984e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	0c1b      	lsrs	r3, r3, #16
 8009858:	041b      	lsls	r3, r3, #16
 800985a:	88f9      	ldrh	r1, [r7, #6]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	6812      	ldr	r2, [r2, #0]
 8009860:	430b      	orrs	r3, r1
 8009862:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0201 	orr.w	r2, r2, #1
 8009872:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10c      	bne.n	800989c <HAL_SPI_Transmit+0x134>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800988a:	d107      	bne.n	800989c <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800989a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	2b0f      	cmp	r3, #15
 80098a2:	d95b      	bls.n	800995c <HAL_SPI_Transmit+0x1f4>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a8f      	ldr	r2, [pc, #572]	; (8009ae8 <HAL_SPI_Transmit+0x380>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d04f      	beq.n	800994e <HAL_SPI_Transmit+0x1e6>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a8e      	ldr	r2, [pc, #568]	; (8009aec <HAL_SPI_Transmit+0x384>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d04a      	beq.n	800994e <HAL_SPI_Transmit+0x1e6>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a8c      	ldr	r2, [pc, #560]	; (8009af0 <HAL_SPI_Transmit+0x388>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d045      	beq.n	800994e <HAL_SPI_Transmit+0x1e6>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a8b      	ldr	r2, [pc, #556]	; (8009af4 <HAL_SPI_Transmit+0x38c>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d147      	bne.n	800995c <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80098cc:	e03f      	b.n	800994e <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	f003 0302 	and.w	r3, r3, #2
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d114      	bne.n	8009906 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6812      	ldr	r2, [r2, #0]
 80098e6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098ec:	1d1a      	adds	r2, r3, #4
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	3b01      	subs	r3, #1
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009904:	e023      	b.n	800994e <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009906:	f7f7 ffe3 	bl	80018d0 <HAL_GetTick>
 800990a:	4602      	mov	r2, r0
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	1ad3      	subs	r3, r2, r3
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	429a      	cmp	r2, r3
 8009914:	d803      	bhi.n	800991e <HAL_SPI_Transmit+0x1b6>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991c:	d102      	bne.n	8009924 <HAL_SPI_Transmit+0x1bc>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d114      	bne.n	800994e <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 f93d 	bl	8009ba4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009938:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e125      	b.n	8009b9a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009954:	b29b      	uxth	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1b9      	bne.n	80098ce <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800995a:	e0f8      	b.n	8009b4e <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	2b07      	cmp	r3, #7
 8009962:	f240 80ed 	bls.w	8009b40 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009966:	e05d      	b.n	8009a24 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	f003 0302 	and.w	r3, r3, #2
 8009972:	2b02      	cmp	r3, #2
 8009974:	d132      	bne.n	80099dc <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800997c:	b29b      	uxth	r3, r3
 800997e:	2b01      	cmp	r3, #1
 8009980:	d918      	bls.n	80099b4 <HAL_SPI_Transmit+0x24c>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009986:	2b00      	cmp	r3, #0
 8009988:	d014      	beq.n	80099b4 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6812      	ldr	r2, [r2, #0]
 8009994:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800999a:	1d1a      	adds	r2, r3, #4
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	3b02      	subs	r3, #2
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80099b2:	e037      	b.n	8009a24 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099b8:	881a      	ldrh	r2, [r3, #0]
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099c2:	1c9a      	adds	r2, r3, #2
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	3b01      	subs	r3, #1
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80099da:	e023      	b.n	8009a24 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099dc:	f7f7 ff78 	bl	80018d0 <HAL_GetTick>
 80099e0:	4602      	mov	r2, r0
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d803      	bhi.n	80099f4 <HAL_SPI_Transmit+0x28c>
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f2:	d102      	bne.n	80099fa <HAL_SPI_Transmit+0x292>
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d114      	bne.n	8009a24 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f000 f8d2 	bl	8009ba4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e0ba      	b.n	8009b9a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d19b      	bne.n	8009968 <HAL_SPI_Transmit+0x200>
 8009a30:	e08d      	b.n	8009b4e <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	f003 0302 	and.w	r3, r3, #2
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d15b      	bne.n	8009af8 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d918      	bls.n	8009a7e <HAL_SPI_Transmit+0x316>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a50:	2b40      	cmp	r3, #64	; 0x40
 8009a52:	d914      	bls.n	8009a7e <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6812      	ldr	r2, [r2, #0]
 8009a5e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a64:	1d1a      	adds	r2, r3, #4
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	3b04      	subs	r3, #4
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009a7c:	e060      	b.n	8009b40 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d917      	bls.n	8009aba <HAL_SPI_Transmit+0x352>
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d013      	beq.n	8009aba <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a96:	881a      	ldrh	r2, [r3, #0]
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009aa0:	1c9a      	adds	r2, r3, #2
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	3b02      	subs	r3, #2
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009ab8:	e042      	b.n	8009b40 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	3320      	adds	r3, #32
 8009ac4:	7812      	ldrb	r2, [r2, #0]
 8009ac6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009acc:	1c5a      	adds	r2, r3, #1
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	3b01      	subs	r3, #1
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009ae4:	e02c      	b.n	8009b40 <HAL_SPI_Transmit+0x3d8>
 8009ae6:	bf00      	nop
 8009ae8:	40013000 	.word	0x40013000
 8009aec:	50013000 	.word	0x50013000
 8009af0:	40003800 	.word	0x40003800
 8009af4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009af8:	f7f7 feea 	bl	80018d0 <HAL_GetTick>
 8009afc:	4602      	mov	r2, r0
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d803      	bhi.n	8009b10 <HAL_SPI_Transmit+0x3a8>
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0e:	d102      	bne.n	8009b16 <HAL_SPI_Transmit+0x3ae>
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d114      	bne.n	8009b40 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f000 f844 	bl	8009ba4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e02c      	b.n	8009b9a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f47f af72 	bne.w	8009a32 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2200      	movs	r2, #0
 8009b56:	2108      	movs	r1, #8
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 f8c3 	bl	8009ce4 <SPI_WaitOnFlagUntilTimeout>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d007      	beq.n	8009b74 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b6a:	f043 0220 	orr.w	r2, r3, #32
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f000 f815 	bl	8009ba4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e000      	b.n	8009b9a <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8009b98:	7efb      	ldrb	r3, [r7, #27]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3720      	adds	r7, #32
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop

08009ba4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	699a      	ldr	r2, [r3, #24]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f042 0208 	orr.w	r2, r2, #8
 8009bc2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	699a      	ldr	r2, [r3, #24]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f042 0210 	orr.w	r2, r2, #16
 8009bd2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f022 0201 	bic.w	r2, r2, #1
 8009be2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	6812      	ldr	r2, [r2, #0]
 8009bee:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8009bf2:	f023 0303 	bic.w	r3, r3, #3
 8009bf6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689a      	ldr	r2, [r3, #8]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009c06:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b04      	cmp	r3, #4
 8009c12:	d014      	beq.n	8009c3e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f003 0320 	and.w	r3, r3, #32
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00f      	beq.n	8009c3e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	699a      	ldr	r2, [r3, #24]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f042 0220 	orr.w	r2, r2, #32
 8009c3c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b03      	cmp	r3, #3
 8009c48:	d014      	beq.n	8009c74 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00f      	beq.n	8009c74 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c5a:	f043 0204 	orr.w	r2, r3, #4
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	699a      	ldr	r2, [r3, #24]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c72:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00f      	beq.n	8009c9e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c84:	f043 0201 	orr.w	r2, r3, #1
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	699a      	ldr	r2, [r3, #24]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c9c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00f      	beq.n	8009cc8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cae:	f043 0208 	orr.w	r2, r3, #8
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	699a      	ldr	r2, [r3, #24]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cc6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8009cd8:	bf00      	nop
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	603b      	str	r3, [r7, #0]
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009cf4:	e010      	b.n	8009d18 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cf6:	f7f7 fdeb 	bl	80018d0 <HAL_GetTick>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	683a      	ldr	r2, [r7, #0]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d803      	bhi.n	8009d0e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0c:	d102      	bne.n	8009d14 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e00f      	b.n	8009d38 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	695a      	ldr	r2, [r3, #20]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	4013      	ands	r3, r2
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	bf0c      	ite	eq
 8009d28:	2301      	moveq	r3, #1
 8009d2a:	2300      	movne	r3, #0
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	461a      	mov	r2, r3
 8009d30:	79fb      	ldrb	r3, [r7, #7]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d0df      	beq.n	8009cf6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d4c:	095b      	lsrs	r3, r3, #5
 8009d4e:	3301      	adds	r3, #1
 8009d50:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	3301      	adds	r3, #1
 8009d58:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	3307      	adds	r3, #7
 8009d5e:	08db      	lsrs	r3, r3, #3
 8009d60:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	fb02 f303 	mul.w	r3, r2, r3
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b083      	sub	sp, #12
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d12e      	bne.n	8009dea <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d101      	bne.n	8009d9a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8009d96:	2302      	movs	r3, #2
 8009d98:	e028      	b.n	8009dec <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2202      	movs	r2, #2
 8009da6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f022 0201 	bic.w	r2, r2, #1
 8009db8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8009dc6:	ea42 0103 	orr.w	r1, r2, r3
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	689a      	ldr	r2, [r3, #8]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	e000      	b.n	8009dec <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
  }
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e049      	b.n	8009e9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d106      	bne.n	8009e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f841 	bl	8009ea6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	3304      	adds	r3, #4
 8009e34:	4619      	mov	r1, r3
 8009e36:	4610      	mov	r0, r2
 8009e38:	f000 fa88 	bl	800a34c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b083      	sub	sp, #12
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009eae:	bf00      	nop
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
	...

08009ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d001      	beq.n	8009ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e072      	b.n	8009fba <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68da      	ldr	r2, [r3, #12]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f042 0201 	orr.w	r2, r2, #1
 8009eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a35      	ldr	r2, [pc, #212]	; (8009fc8 <HAL_TIM_Base_Start_IT+0x10c>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d040      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0xbc>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a34      	ldr	r2, [pc, #208]	; (8009fcc <HAL_TIM_Base_Start_IT+0x110>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d03b      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0xbc>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f08:	d036      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0xbc>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f12:	d031      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0xbc>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a2d      	ldr	r2, [pc, #180]	; (8009fd0 <HAL_TIM_Base_Start_IT+0x114>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d02c      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0xbc>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a2c      	ldr	r2, [pc, #176]	; (8009fd4 <HAL_TIM_Base_Start_IT+0x118>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d027      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0xbc>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a2a      	ldr	r2, [pc, #168]	; (8009fd8 <HAL_TIM_Base_Start_IT+0x11c>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d022      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0xbc>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a29      	ldr	r2, [pc, #164]	; (8009fdc <HAL_TIM_Base_Start_IT+0x120>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d01d      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0xbc>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a27      	ldr	r2, [pc, #156]	; (8009fe0 <HAL_TIM_Base_Start_IT+0x124>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d018      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0xbc>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a26      	ldr	r2, [pc, #152]	; (8009fe4 <HAL_TIM_Base_Start_IT+0x128>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d013      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0xbc>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a24      	ldr	r2, [pc, #144]	; (8009fe8 <HAL_TIM_Base_Start_IT+0x12c>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d00e      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0xbc>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a23      	ldr	r2, [pc, #140]	; (8009fec <HAL_TIM_Base_Start_IT+0x130>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d009      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0xbc>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a21      	ldr	r2, [pc, #132]	; (8009ff0 <HAL_TIM_Base_Start_IT+0x134>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d004      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0xbc>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a20      	ldr	r2, [pc, #128]	; (8009ff4 <HAL_TIM_Base_Start_IT+0x138>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d115      	bne.n	8009fa4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689a      	ldr	r2, [r3, #8]
 8009f7e:	4b1e      	ldr	r3, [pc, #120]	; (8009ff8 <HAL_TIM_Base_Start_IT+0x13c>)
 8009f80:	4013      	ands	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2b06      	cmp	r3, #6
 8009f88:	d015      	beq.n	8009fb6 <HAL_TIM_Base_Start_IT+0xfa>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f90:	d011      	beq.n	8009fb6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f042 0201 	orr.w	r2, r2, #1
 8009fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fa2:	e008      	b.n	8009fb6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f042 0201 	orr.w	r2, r2, #1
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	e000      	b.n	8009fb8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	40012c00 	.word	0x40012c00
 8009fcc:	50012c00 	.word	0x50012c00
 8009fd0:	40000400 	.word	0x40000400
 8009fd4:	50000400 	.word	0x50000400
 8009fd8:	40000800 	.word	0x40000800
 8009fdc:	50000800 	.word	0x50000800
 8009fe0:	40000c00 	.word	0x40000c00
 8009fe4:	50000c00 	.word	0x50000c00
 8009fe8:	40013400 	.word	0x40013400
 8009fec:	50013400 	.word	0x50013400
 8009ff0:	40014000 	.word	0x40014000
 8009ff4:	50014000 	.word	0x50014000
 8009ff8:	00010007 	.word	0x00010007

08009ffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	f003 0302 	and.w	r3, r3, #2
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d122      	bne.n	800a058 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	f003 0302 	and.w	r3, r3, #2
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d11b      	bne.n	800a058 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f06f 0202 	mvn.w	r2, #2
 800a028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	f003 0303 	and.w	r3, r3, #3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d003      	beq.n	800a046 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f965 	bl	800a30e <HAL_TIM_IC_CaptureCallback>
 800a044:	e005      	b.n	800a052 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f957 	bl	800a2fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f968 	bl	800a322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	f003 0304 	and.w	r3, r3, #4
 800a062:	2b04      	cmp	r3, #4
 800a064:	d122      	bne.n	800a0ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	f003 0304 	and.w	r3, r3, #4
 800a070:	2b04      	cmp	r3, #4
 800a072:	d11b      	bne.n	800a0ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f06f 0204 	mvn.w	r2, #4
 800a07c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2202      	movs	r2, #2
 800a082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f93b 	bl	800a30e <HAL_TIM_IC_CaptureCallback>
 800a098:	e005      	b.n	800a0a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f92d 	bl	800a2fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f93e 	bl	800a322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	f003 0308 	and.w	r3, r3, #8
 800a0b6:	2b08      	cmp	r3, #8
 800a0b8:	d122      	bne.n	800a100 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f003 0308 	and.w	r3, r3, #8
 800a0c4:	2b08      	cmp	r3, #8
 800a0c6:	d11b      	bne.n	800a100 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f06f 0208 	mvn.w	r2, #8
 800a0d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2204      	movs	r2, #4
 800a0d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	f003 0303 	and.w	r3, r3, #3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f911 	bl	800a30e <HAL_TIM_IC_CaptureCallback>
 800a0ec:	e005      	b.n	800a0fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f903 	bl	800a2fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f914 	bl	800a322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	f003 0310 	and.w	r3, r3, #16
 800a10a:	2b10      	cmp	r3, #16
 800a10c:	d122      	bne.n	800a154 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	f003 0310 	and.w	r3, r3, #16
 800a118:	2b10      	cmp	r3, #16
 800a11a:	d11b      	bne.n	800a154 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f06f 0210 	mvn.w	r2, #16
 800a124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2208      	movs	r2, #8
 800a12a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	69db      	ldr	r3, [r3, #28]
 800a132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f8e7 	bl	800a30e <HAL_TIM_IC_CaptureCallback>
 800a140:	e005      	b.n	800a14e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f8d9 	bl	800a2fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f8ea 	bl	800a322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	f003 0301 	and.w	r3, r3, #1
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d10e      	bne.n	800a180 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f003 0301 	and.w	r3, r3, #1
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d107      	bne.n	800a180 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f06f 0201 	mvn.w	r2, #1
 800a178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7f7 f832 	bl	80011e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a18a:	2b80      	cmp	r3, #128	; 0x80
 800a18c:	d10e      	bne.n	800a1ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a198:	2b80      	cmp	r3, #128	; 0x80
 800a19a:	d107      	bne.n	800a1ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f9d4 	bl	800a554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ba:	d10e      	bne.n	800a1da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1c6:	2b80      	cmp	r3, #128	; 0x80
 800a1c8:	d107      	bne.n	800a1da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a1d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f9c7 	bl	800a568 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1e4:	2b40      	cmp	r3, #64	; 0x40
 800a1e6:	d10e      	bne.n	800a206 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f2:	2b40      	cmp	r3, #64	; 0x40
 800a1f4:	d107      	bne.n	800a206 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f898 	bl	800a336 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	f003 0320 	and.w	r3, r3, #32
 800a210:	2b20      	cmp	r3, #32
 800a212:	d10e      	bne.n	800a232 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	f003 0320 	and.w	r3, r3, #32
 800a21e:	2b20      	cmp	r3, #32
 800a220:	d107      	bne.n	800a232 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f06f 0220 	mvn.w	r2, #32
 800a22a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f987 	bl	800a540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a23c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a240:	d10f      	bne.n	800a262 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a24c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a250:	d107      	bne.n	800a262 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a25a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f98d 	bl	800a57c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a26c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a270:	d10f      	bne.n	800a292 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a27c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a280:	d107      	bne.n	800a292 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a28a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f97f 	bl	800a590 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a29c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2a0:	d10f      	bne.n	800a2c2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2b0:	d107      	bne.n	800a2c2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a2ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f971 	bl	800a5a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2d0:	d10f      	bne.n	800a2f2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2e0:	d107      	bne.n	800a2f2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a2ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f963 	bl	800a5b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2f2:	bf00      	nop
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a302:	bf00      	nop
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a316:	bf00      	nop
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a32a:	bf00      	nop
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a336:	b480      	push	{r7}
 800a338:	b083      	sub	sp, #12
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a33e:	bf00      	nop
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
	...

0800a34c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a68      	ldr	r2, [pc, #416]	; (800a500 <TIM_Base_SetConfig+0x1b4>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d02b      	beq.n	800a3bc <TIM_Base_SetConfig+0x70>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a67      	ldr	r2, [pc, #412]	; (800a504 <TIM_Base_SetConfig+0x1b8>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d027      	beq.n	800a3bc <TIM_Base_SetConfig+0x70>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a372:	d023      	beq.n	800a3bc <TIM_Base_SetConfig+0x70>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a37a:	d01f      	beq.n	800a3bc <TIM_Base_SetConfig+0x70>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a62      	ldr	r2, [pc, #392]	; (800a508 <TIM_Base_SetConfig+0x1bc>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d01b      	beq.n	800a3bc <TIM_Base_SetConfig+0x70>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a61      	ldr	r2, [pc, #388]	; (800a50c <TIM_Base_SetConfig+0x1c0>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d017      	beq.n	800a3bc <TIM_Base_SetConfig+0x70>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4a60      	ldr	r2, [pc, #384]	; (800a510 <TIM_Base_SetConfig+0x1c4>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d013      	beq.n	800a3bc <TIM_Base_SetConfig+0x70>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a5f      	ldr	r2, [pc, #380]	; (800a514 <TIM_Base_SetConfig+0x1c8>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d00f      	beq.n	800a3bc <TIM_Base_SetConfig+0x70>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a5e      	ldr	r2, [pc, #376]	; (800a518 <TIM_Base_SetConfig+0x1cc>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d00b      	beq.n	800a3bc <TIM_Base_SetConfig+0x70>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a5d      	ldr	r2, [pc, #372]	; (800a51c <TIM_Base_SetConfig+0x1d0>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d007      	beq.n	800a3bc <TIM_Base_SetConfig+0x70>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a5c      	ldr	r2, [pc, #368]	; (800a520 <TIM_Base_SetConfig+0x1d4>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d003      	beq.n	800a3bc <TIM_Base_SetConfig+0x70>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a5b      	ldr	r2, [pc, #364]	; (800a524 <TIM_Base_SetConfig+0x1d8>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d108      	bne.n	800a3ce <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a4b      	ldr	r2, [pc, #300]	; (800a500 <TIM_Base_SetConfig+0x1b4>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d043      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a4a      	ldr	r2, [pc, #296]	; (800a504 <TIM_Base_SetConfig+0x1b8>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d03f      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3e4:	d03b      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3ec:	d037      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a45      	ldr	r2, [pc, #276]	; (800a508 <TIM_Base_SetConfig+0x1bc>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d033      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a44      	ldr	r2, [pc, #272]	; (800a50c <TIM_Base_SetConfig+0x1c0>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d02f      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a43      	ldr	r2, [pc, #268]	; (800a510 <TIM_Base_SetConfig+0x1c4>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d02b      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a42      	ldr	r2, [pc, #264]	; (800a514 <TIM_Base_SetConfig+0x1c8>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d027      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a41      	ldr	r2, [pc, #260]	; (800a518 <TIM_Base_SetConfig+0x1cc>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d023      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a40      	ldr	r2, [pc, #256]	; (800a51c <TIM_Base_SetConfig+0x1d0>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d01f      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a3f      	ldr	r2, [pc, #252]	; (800a520 <TIM_Base_SetConfig+0x1d4>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d01b      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a3e      	ldr	r2, [pc, #248]	; (800a524 <TIM_Base_SetConfig+0x1d8>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d017      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a3d      	ldr	r2, [pc, #244]	; (800a528 <TIM_Base_SetConfig+0x1dc>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d013      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a3c      	ldr	r2, [pc, #240]	; (800a52c <TIM_Base_SetConfig+0x1e0>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d00f      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a3b      	ldr	r2, [pc, #236]	; (800a530 <TIM_Base_SetConfig+0x1e4>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d00b      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a3a      	ldr	r2, [pc, #232]	; (800a534 <TIM_Base_SetConfig+0x1e8>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d007      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a39      	ldr	r2, [pc, #228]	; (800a538 <TIM_Base_SetConfig+0x1ec>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d003      	beq.n	800a45e <TIM_Base_SetConfig+0x112>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a38      	ldr	r2, [pc, #224]	; (800a53c <TIM_Base_SetConfig+0x1f0>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d108      	bne.n	800a470 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	689a      	ldr	r2, [r3, #8]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a1a      	ldr	r2, [pc, #104]	; (800a500 <TIM_Base_SetConfig+0x1b4>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d023      	beq.n	800a4e4 <TIM_Base_SetConfig+0x198>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a19      	ldr	r2, [pc, #100]	; (800a504 <TIM_Base_SetConfig+0x1b8>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d01f      	beq.n	800a4e4 <TIM_Base_SetConfig+0x198>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a1e      	ldr	r2, [pc, #120]	; (800a520 <TIM_Base_SetConfig+0x1d4>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d01b      	beq.n	800a4e4 <TIM_Base_SetConfig+0x198>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a1d      	ldr	r2, [pc, #116]	; (800a524 <TIM_Base_SetConfig+0x1d8>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d017      	beq.n	800a4e4 <TIM_Base_SetConfig+0x198>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a1c      	ldr	r2, [pc, #112]	; (800a528 <TIM_Base_SetConfig+0x1dc>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d013      	beq.n	800a4e4 <TIM_Base_SetConfig+0x198>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a1b      	ldr	r2, [pc, #108]	; (800a52c <TIM_Base_SetConfig+0x1e0>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d00f      	beq.n	800a4e4 <TIM_Base_SetConfig+0x198>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a1a      	ldr	r2, [pc, #104]	; (800a530 <TIM_Base_SetConfig+0x1e4>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d00b      	beq.n	800a4e4 <TIM_Base_SetConfig+0x198>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4a19      	ldr	r2, [pc, #100]	; (800a534 <TIM_Base_SetConfig+0x1e8>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d007      	beq.n	800a4e4 <TIM_Base_SetConfig+0x198>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4a18      	ldr	r2, [pc, #96]	; (800a538 <TIM_Base_SetConfig+0x1ec>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d003      	beq.n	800a4e4 <TIM_Base_SetConfig+0x198>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a17      	ldr	r2, [pc, #92]	; (800a53c <TIM_Base_SetConfig+0x1f0>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d103      	bne.n	800a4ec <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	691a      	ldr	r2, [r3, #16]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	615a      	str	r2, [r3, #20]
}
 800a4f2:	bf00      	nop
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	40012c00 	.word	0x40012c00
 800a504:	50012c00 	.word	0x50012c00
 800a508:	40000400 	.word	0x40000400
 800a50c:	50000400 	.word	0x50000400
 800a510:	40000800 	.word	0x40000800
 800a514:	50000800 	.word	0x50000800
 800a518:	40000c00 	.word	0x40000c00
 800a51c:	50000c00 	.word	0x50000c00
 800a520:	40013400 	.word	0x40013400
 800a524:	50013400 	.word	0x50013400
 800a528:	40014000 	.word	0x40014000
 800a52c:	50014000 	.word	0x50014000
 800a530:	40014400 	.word	0x40014400
 800a534:	50014400 	.word	0x50014400
 800a538:	40014800 	.word	0x40014800
 800a53c:	50014800 	.word	0x50014800

0800a540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a570:	bf00      	nop
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d101      	bne.n	800a5de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e042      	b.n	800a664 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d106      	bne.n	800a5f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7f6 ff67 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2224      	movs	r2, #36	; 0x24
 800a5fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f022 0201 	bic.w	r2, r2, #1
 800a60c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f8ca 	bl	800a7a8 <UART_SetConfig>
 800a614:	4603      	mov	r3, r0
 800a616:	2b01      	cmp	r3, #1
 800a618:	d101      	bne.n	800a61e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e022      	b.n	800a664 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a622:	2b00      	cmp	r3, #0
 800a624:	d002      	beq.n	800a62c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fa60 	bl	800aaec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a63a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	689a      	ldr	r2, [r3, #8]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a64a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f042 0201 	orr.w	r2, r2, #1
 800a65a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fae7 	bl	800ac30 <UART_CheckIdleState>
 800a662:	4603      	mov	r3, r0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b08a      	sub	sp, #40	; 0x28
 800a670:	af02      	add	r7, sp, #8
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	603b      	str	r3, [r7, #0]
 800a678:	4613      	mov	r3, r2
 800a67a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a682:	2b20      	cmp	r3, #32
 800a684:	f040 808b 	bne.w	800a79e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d002      	beq.n	800a694 <HAL_UART_Transmit+0x28>
 800a68e:	88fb      	ldrh	r3, [r7, #6]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	e083      	b.n	800a7a0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6a2:	2b80      	cmp	r3, #128	; 0x80
 800a6a4:	d107      	bne.n	800a6b6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	689a      	ldr	r2, [r3, #8]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6b4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2221      	movs	r2, #33	; 0x21
 800a6c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a6c6:	f7f7 f903 	bl	80018d0 <HAL_GetTick>
 800a6ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	88fa      	ldrh	r2, [r7, #6]
 800a6d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	88fa      	ldrh	r2, [r7, #6]
 800a6d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6e4:	d108      	bne.n	800a6f8 <HAL_UART_Transmit+0x8c>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d104      	bne.n	800a6f8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	61bb      	str	r3, [r7, #24]
 800a6f6:	e003      	b.n	800a700 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a700:	e030      	b.n	800a764 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	2200      	movs	r2, #0
 800a70a:	2180      	movs	r1, #128	; 0x80
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 fb39 	bl	800ad84 <UART_WaitOnFlagUntilTimeout>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d005      	beq.n	800a724 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2220      	movs	r2, #32
 800a71c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a720:	2303      	movs	r3, #3
 800a722:	e03d      	b.n	800a7a0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10b      	bne.n	800a742 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a738:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	3302      	adds	r3, #2
 800a73e:	61bb      	str	r3, [r7, #24]
 800a740:	e007      	b.n	800a752 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	781a      	ldrb	r2, [r3, #0]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	3301      	adds	r3, #1
 800a750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a758:	b29b      	uxth	r3, r3
 800a75a:	3b01      	subs	r3, #1
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1c8      	bne.n	800a702 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	2200      	movs	r2, #0
 800a778:	2140      	movs	r1, #64	; 0x40
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f000 fb02 	bl	800ad84 <UART_WaitOnFlagUntilTimeout>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d005      	beq.n	800a792 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2220      	movs	r2, #32
 800a78a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e006      	b.n	800a7a0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2220      	movs	r2, #32
 800a796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	e000      	b.n	800a7a0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a79e:	2302      	movs	r3, #2
  }
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3720      	adds	r7, #32
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7ac:	b094      	sub	sp, #80	; 0x50
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	4b7e      	ldr	r3, [pc, #504]	; (800a9b8 <UART_SetConfig+0x210>)
 800a7be:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c2:	689a      	ldr	r2, [r3, #8]
 800a7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	431a      	orrs	r2, r3
 800a7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	431a      	orrs	r2, r3
 800a7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d2:	69db      	ldr	r3, [r3, #28]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4977      	ldr	r1, [pc, #476]	; (800a9bc <UART_SetConfig+0x214>)
 800a7e0:	4019      	ands	r1, r3
 800a7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7e8:	430b      	orrs	r3, r1
 800a7ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	68d9      	ldr	r1, [r3, #12]
 800a7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	ea40 0301 	orr.w	r3, r0, r1
 800a802:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	4b6a      	ldr	r3, [pc, #424]	; (800a9b8 <UART_SetConfig+0x210>)
 800a810:	429a      	cmp	r2, r3
 800a812:	d009      	beq.n	800a828 <UART_SetConfig+0x80>
 800a814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	4b69      	ldr	r3, [pc, #420]	; (800a9c0 <UART_SetConfig+0x218>)
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d004      	beq.n	800a828 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a820:	6a1a      	ldr	r2, [r3, #32]
 800a822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a824:	4313      	orrs	r3, r2
 800a826:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a832:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a83c:	430b      	orrs	r3, r1
 800a83e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a846:	f023 000f 	bic.w	r0, r3, #15
 800a84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	ea40 0301 	orr.w	r3, r0, r1
 800a856:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	4b59      	ldr	r3, [pc, #356]	; (800a9c4 <UART_SetConfig+0x21c>)
 800a85e:	429a      	cmp	r2, r3
 800a860:	d102      	bne.n	800a868 <UART_SetConfig+0xc0>
 800a862:	2301      	movs	r3, #1
 800a864:	64bb      	str	r3, [r7, #72]	; 0x48
 800a866:	e029      	b.n	800a8bc <UART_SetConfig+0x114>
 800a868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	4b56      	ldr	r3, [pc, #344]	; (800a9c8 <UART_SetConfig+0x220>)
 800a86e:	429a      	cmp	r2, r3
 800a870:	d102      	bne.n	800a878 <UART_SetConfig+0xd0>
 800a872:	2302      	movs	r3, #2
 800a874:	64bb      	str	r3, [r7, #72]	; 0x48
 800a876:	e021      	b.n	800a8bc <UART_SetConfig+0x114>
 800a878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	4b53      	ldr	r3, [pc, #332]	; (800a9cc <UART_SetConfig+0x224>)
 800a87e:	429a      	cmp	r2, r3
 800a880:	d102      	bne.n	800a888 <UART_SetConfig+0xe0>
 800a882:	2304      	movs	r3, #4
 800a884:	64bb      	str	r3, [r7, #72]	; 0x48
 800a886:	e019      	b.n	800a8bc <UART_SetConfig+0x114>
 800a888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	4b50      	ldr	r3, [pc, #320]	; (800a9d0 <UART_SetConfig+0x228>)
 800a88e:	429a      	cmp	r2, r3
 800a890:	d102      	bne.n	800a898 <UART_SetConfig+0xf0>
 800a892:	2308      	movs	r3, #8
 800a894:	64bb      	str	r3, [r7, #72]	; 0x48
 800a896:	e011      	b.n	800a8bc <UART_SetConfig+0x114>
 800a898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	4b4d      	ldr	r3, [pc, #308]	; (800a9d4 <UART_SetConfig+0x22c>)
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d102      	bne.n	800a8a8 <UART_SetConfig+0x100>
 800a8a2:	2310      	movs	r3, #16
 800a8a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8a6:	e009      	b.n	800a8bc <UART_SetConfig+0x114>
 800a8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	4b42      	ldr	r3, [pc, #264]	; (800a9b8 <UART_SetConfig+0x210>)
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d102      	bne.n	800a8b8 <UART_SetConfig+0x110>
 800a8b2:	2320      	movs	r3, #32
 800a8b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8b6:	e001      	b.n	800a8bc <UART_SetConfig+0x114>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	4b3d      	ldr	r3, [pc, #244]	; (800a9b8 <UART_SetConfig+0x210>)
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d005      	beq.n	800a8d2 <UART_SetConfig+0x12a>
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	4b3d      	ldr	r3, [pc, #244]	; (800a9c0 <UART_SetConfig+0x218>)
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	f040 8085 	bne.w	800a9dc <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a8d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	623b      	str	r3, [r7, #32]
 800a8d8:	627a      	str	r2, [r7, #36]	; 0x24
 800a8da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a8de:	f7fc feb7 	bl	8007650 <HAL_RCCEx_GetPeriphCLKFreq>
 800a8e2:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 80e8 	beq.w	800aabc <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f0:	4a39      	ldr	r2, [pc, #228]	; (800a9d8 <UART_SetConfig+0x230>)
 800a8f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8fe:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a902:	685a      	ldr	r2, [r3, #4]
 800a904:	4613      	mov	r3, r2
 800a906:	005b      	lsls	r3, r3, #1
 800a908:	4413      	add	r3, r2
 800a90a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d305      	bcc.n	800a91c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a918:	429a      	cmp	r2, r3
 800a91a:	d903      	bls.n	800a924 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a922:	e048      	b.n	800a9b6 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a926:	2200      	movs	r2, #0
 800a928:	61bb      	str	r3, [r7, #24]
 800a92a:	61fa      	str	r2, [r7, #28]
 800a92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a930:	4a29      	ldr	r2, [pc, #164]	; (800a9d8 <UART_SetConfig+0x230>)
 800a932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a936:	b29b      	uxth	r3, r3
 800a938:	2200      	movs	r2, #0
 800a93a:	613b      	str	r3, [r7, #16]
 800a93c:	617a      	str	r2, [r7, #20]
 800a93e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a942:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a946:	f7f5 fdc5 	bl	80004d4 <__aeabi_uldivmod>
 800a94a:	4602      	mov	r2, r0
 800a94c:	460b      	mov	r3, r1
 800a94e:	4610      	mov	r0, r2
 800a950:	4619      	mov	r1, r3
 800a952:	f04f 0200 	mov.w	r2, #0
 800a956:	f04f 0300 	mov.w	r3, #0
 800a95a:	020b      	lsls	r3, r1, #8
 800a95c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a960:	0202      	lsls	r2, r0, #8
 800a962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a964:	6849      	ldr	r1, [r1, #4]
 800a966:	0849      	lsrs	r1, r1, #1
 800a968:	2000      	movs	r0, #0
 800a96a:	460c      	mov	r4, r1
 800a96c:	4605      	mov	r5, r0
 800a96e:	eb12 0804 	adds.w	r8, r2, r4
 800a972:	eb43 0905 	adc.w	r9, r3, r5
 800a976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	60bb      	str	r3, [r7, #8]
 800a97e:	60fa      	str	r2, [r7, #12]
 800a980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a984:	4640      	mov	r0, r8
 800a986:	4649      	mov	r1, r9
 800a988:	f7f5 fda4 	bl	80004d4 <__aeabi_uldivmod>
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	4613      	mov	r3, r2
 800a992:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a99a:	d308      	bcc.n	800a9ae <UART_SetConfig+0x206>
 800a99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a99e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9a2:	d204      	bcs.n	800a9ae <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9aa:	60da      	str	r2, [r3, #12]
 800a9ac:	e003      	b.n	800a9b6 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800a9b4:	e082      	b.n	800aabc <UART_SetConfig+0x314>
 800a9b6:	e081      	b.n	800aabc <UART_SetConfig+0x314>
 800a9b8:	46002400 	.word	0x46002400
 800a9bc:	cfff69f3 	.word	0xcfff69f3
 800a9c0:	56002400 	.word	0x56002400
 800a9c4:	40013800 	.word	0x40013800
 800a9c8:	40004400 	.word	0x40004400
 800a9cc:	40004800 	.word	0x40004800
 800a9d0:	40004c00 	.word	0x40004c00
 800a9d4:	40005000 	.word	0x40005000
 800a9d8:	080154c4 	.word	0x080154c4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9e4:	d13c      	bne.n	800aa60 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a9e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	603b      	str	r3, [r7, #0]
 800a9ec:	607a      	str	r2, [r7, #4]
 800a9ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9f2:	f7fc fe2d 	bl	8007650 <HAL_RCCEx_GetPeriphCLKFreq>
 800a9f6:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d05e      	beq.n	800aabc <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa02:	4a39      	ldr	r2, [pc, #228]	; (800aae8 <UART_SetConfig+0x340>)
 800aa04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa08:	461a      	mov	r2, r3
 800aa0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa10:	005a      	lsls	r2, r3, #1
 800aa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	085b      	lsrs	r3, r3, #1
 800aa18:	441a      	add	r2, r3
 800aa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa22:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa26:	2b0f      	cmp	r3, #15
 800aa28:	d916      	bls.n	800aa58 <UART_SetConfig+0x2b0>
 800aa2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa30:	d212      	bcs.n	800aa58 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	f023 030f 	bic.w	r3, r3, #15
 800aa3a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa3e:	085b      	lsrs	r3, r3, #1
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	f003 0307 	and.w	r3, r3, #7
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800aa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800aa54:	60da      	str	r2, [r3, #12]
 800aa56:	e031      	b.n	800aabc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800aa5e:	e02d      	b.n	800aabc <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aa60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa62:	2200      	movs	r2, #0
 800aa64:	469a      	mov	sl, r3
 800aa66:	4693      	mov	fp, r2
 800aa68:	4650      	mov	r0, sl
 800aa6a:	4659      	mov	r1, fp
 800aa6c:	f7fc fdf0 	bl	8007650 <HAL_RCCEx_GetPeriphCLKFreq>
 800aa70:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800aa72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d021      	beq.n	800aabc <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7c:	4a1a      	ldr	r2, [pc, #104]	; (800aae8 <UART_SetConfig+0x340>)
 800aa7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa82:	461a      	mov	r2, r3
 800aa84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa86:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	085b      	lsrs	r3, r3, #1
 800aa90:	441a      	add	r2, r3
 800aa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa9e:	2b0f      	cmp	r3, #15
 800aaa0:	d909      	bls.n	800aab6 <UART_SetConfig+0x30e>
 800aaa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaa8:	d205      	bcs.n	800aab6 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aaaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaac:	b29a      	uxth	r2, r3
 800aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	60da      	str	r2, [r3, #12]
 800aab4:	e002      	b.n	800aabc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabe:	2201      	movs	r2, #1
 800aac0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac6:	2201      	movs	r2, #1
 800aac8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aace:	2200      	movs	r2, #0
 800aad0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800aad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad4:	2200      	movs	r2, #0
 800aad6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800aad8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3750      	adds	r7, #80	; 0x50
 800aae0:	46bd      	mov	sp, r7
 800aae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aae6:	bf00      	nop
 800aae8:	080154c4 	.word	0x080154c4

0800aaec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00a      	beq.n	800ab16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1a:	f003 0302 	and.w	r3, r3, #2
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00a      	beq.n	800ab38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	430a      	orrs	r2, r1
 800ab36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00a      	beq.n	800ab5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	430a      	orrs	r2, r1
 800ab58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5e:	f003 0308 	and.w	r3, r3, #8
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00a      	beq.n	800ab7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	430a      	orrs	r2, r1
 800ab7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab80:	f003 0310 	and.w	r3, r3, #16
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00a      	beq.n	800ab9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba2:	f003 0320 	and.w	r3, r3, #32
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00a      	beq.n	800abc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	430a      	orrs	r2, r1
 800abbe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01a      	beq.n	800ac02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	430a      	orrs	r2, r1
 800abe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abea:	d10a      	bne.n	800ac02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00a      	beq.n	800ac24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	430a      	orrs	r2, r1
 800ac22:	605a      	str	r2, [r3, #4]
  }
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b098      	sub	sp, #96	; 0x60
 800ac34:	af02      	add	r7, sp, #8
 800ac36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac40:	f7f6 fe46 	bl	80018d0 <HAL_GetTick>
 800ac44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0308 	and.w	r3, r3, #8
 800ac50:	2b08      	cmp	r3, #8
 800ac52:	d12f      	bne.n	800acb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f88e 	bl	800ad84 <UART_WaitOnFlagUntilTimeout>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d022      	beq.n	800acb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac76:	e853 3f00 	ldrex	r3, [r3]
 800ac7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac82:	653b      	str	r3, [r7, #80]	; 0x50
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac8c:	647b      	str	r3, [r7, #68]	; 0x44
 800ac8e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac94:	e841 2300 	strex	r3, r2, [r1]
 800ac98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1e6      	bne.n	800ac6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2220      	movs	r2, #32
 800aca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acb0:	2303      	movs	r3, #3
 800acb2:	e063      	b.n	800ad7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 0304 	and.w	r3, r3, #4
 800acbe:	2b04      	cmp	r3, #4
 800acc0:	d149      	bne.n	800ad56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acca:	2200      	movs	r2, #0
 800accc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f857 	bl	800ad84 <UART_WaitOnFlagUntilTimeout>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d03c      	beq.n	800ad56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace4:	e853 3f00 	ldrex	r3, [r3]
 800ace8:	623b      	str	r3, [r7, #32]
   return(result);
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acfa:	633b      	str	r3, [r7, #48]	; 0x30
 800acfc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad02:	e841 2300 	strex	r3, r2, [r1]
 800ad06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1e6      	bne.n	800acdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	3308      	adds	r3, #8
 800ad14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	e853 3f00 	ldrex	r3, [r3]
 800ad1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f023 0301 	bic.w	r3, r3, #1
 800ad24:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad2e:	61fa      	str	r2, [r7, #28]
 800ad30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad32:	69b9      	ldr	r1, [r7, #24]
 800ad34:	69fa      	ldr	r2, [r7, #28]
 800ad36:	e841 2300 	strex	r3, r2, [r1]
 800ad3a:	617b      	str	r3, [r7, #20]
   return(result);
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1e5      	bne.n	800ad0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2220      	movs	r2, #32
 800ad46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e012      	b.n	800ad7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2220      	movs	r2, #32
 800ad5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2220      	movs	r2, #32
 800ad62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3758      	adds	r7, #88	; 0x58
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	603b      	str	r3, [r7, #0]
 800ad90:	4613      	mov	r3, r2
 800ad92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad94:	e049      	b.n	800ae2a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9c:	d045      	beq.n	800ae2a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad9e:	f7f6 fd97 	bl	80018d0 <HAL_GetTick>
 800ada2:	4602      	mov	r2, r0
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	69ba      	ldr	r2, [r7, #24]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d302      	bcc.n	800adb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800adb4:	2303      	movs	r3, #3
 800adb6:	e048      	b.n	800ae4a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f003 0304 	and.w	r3, r3, #4
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d031      	beq.n	800ae2a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	69db      	ldr	r3, [r3, #28]
 800adcc:	f003 0308 	and.w	r3, r3, #8
 800add0:	2b08      	cmp	r3, #8
 800add2:	d110      	bne.n	800adf6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2208      	movs	r2, #8
 800adda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f000 f838 	bl	800ae52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2208      	movs	r2, #8
 800ade6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e029      	b.n	800ae4a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae04:	d111      	bne.n	800ae2a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f000 f81e 	bl	800ae52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2220      	movs	r2, #32
 800ae1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e00f      	b.n	800ae4a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	69da      	ldr	r2, [r3, #28]
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	4013      	ands	r3, r2
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	bf0c      	ite	eq
 800ae3a:	2301      	moveq	r3, #1
 800ae3c:	2300      	movne	r3, #0
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	461a      	mov	r2, r3
 800ae42:	79fb      	ldrb	r3, [r7, #7]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d0a6      	beq.n	800ad96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b095      	sub	sp, #84	; 0x54
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae62:	e853 3f00 	ldrex	r3, [r3]
 800ae66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	461a      	mov	r2, r3
 800ae76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae78:	643b      	str	r3, [r7, #64]	; 0x40
 800ae7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae80:	e841 2300 	strex	r3, r2, [r1]
 800ae84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e6      	bne.n	800ae5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3308      	adds	r3, #8
 800ae92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae94:	6a3b      	ldr	r3, [r7, #32]
 800ae96:	e853 3f00 	ldrex	r3, [r3]
 800ae9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aea2:	f023 0301 	bic.w	r3, r3, #1
 800aea6:	64bb      	str	r3, [r7, #72]	; 0x48
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	3308      	adds	r3, #8
 800aeae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aeb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aeb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aeb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeb8:	e841 2300 	strex	r3, r2, [r1]
 800aebc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1e3      	bne.n	800ae8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d118      	bne.n	800aefe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	e853 3f00 	ldrex	r3, [r3]
 800aed8:	60bb      	str	r3, [r7, #8]
   return(result);
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	f023 0310 	bic.w	r3, r3, #16
 800aee0:	647b      	str	r3, [r7, #68]	; 0x44
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	461a      	mov	r2, r3
 800aee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeea:	61bb      	str	r3, [r7, #24]
 800aeec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeee:	6979      	ldr	r1, [r7, #20]
 800aef0:	69ba      	ldr	r2, [r7, #24]
 800aef2:	e841 2300 	strex	r3, r2, [r1]
 800aef6:	613b      	str	r3, [r7, #16]
   return(result);
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1e6      	bne.n	800aecc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2220      	movs	r2, #32
 800af02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	675a      	str	r2, [r3, #116]	; 0x74
}
 800af12:	bf00      	nop
 800af14:	3754      	adds	r7, #84	; 0x54
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr

0800af1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af1e:	b480      	push	{r7}
 800af20:	b085      	sub	sp, #20
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d101      	bne.n	800af34 <HAL_UARTEx_DisableFifoMode+0x16>
 800af30:	2302      	movs	r3, #2
 800af32:	e027      	b.n	800af84 <HAL_UARTEx_DisableFifoMode+0x66>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2224      	movs	r2, #36	; 0x24
 800af40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f022 0201 	bic.w	r2, r2, #1
 800af5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800af62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2220      	movs	r2, #32
 800af76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	3714      	adds	r7, #20
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d101      	bne.n	800afa8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800afa4:	2302      	movs	r3, #2
 800afa6:	e02d      	b.n	800b004 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2224      	movs	r2, #36	; 0x24
 800afb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f022 0201 	bic.w	r2, r2, #1
 800afce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	430a      	orrs	r2, r1
 800afe2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f84f 	bl	800b088 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68fa      	ldr	r2, [r7, #12]
 800aff0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2220      	movs	r2, #32
 800aff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d101      	bne.n	800b024 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b020:	2302      	movs	r3, #2
 800b022:	e02d      	b.n	800b080 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2224      	movs	r2, #36	; 0x24
 800b030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f022 0201 	bic.w	r2, r2, #1
 800b04a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	430a      	orrs	r2, r1
 800b05e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f811 	bl	800b088 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2220      	movs	r2, #32
 800b072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b094:	2b00      	cmp	r3, #0
 800b096:	d108      	bne.n	800b0aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b0a8:	e031      	b.n	800b10e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b0aa:	2308      	movs	r3, #8
 800b0ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b0ae:	2308      	movs	r3, #8
 800b0b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	0e5b      	lsrs	r3, r3, #25
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	f003 0307 	and.w	r3, r3, #7
 800b0c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	0f5b      	lsrs	r3, r3, #29
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	f003 0307 	and.w	r3, r3, #7
 800b0d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0d2:	7bbb      	ldrb	r3, [r7, #14]
 800b0d4:	7b3a      	ldrb	r2, [r7, #12]
 800b0d6:	4911      	ldr	r1, [pc, #68]	; (800b11c <UARTEx_SetNbDataToProcess+0x94>)
 800b0d8:	5c8a      	ldrb	r2, [r1, r2]
 800b0da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0de:	7b3a      	ldrb	r2, [r7, #12]
 800b0e0:	490f      	ldr	r1, [pc, #60]	; (800b120 <UARTEx_SetNbDataToProcess+0x98>)
 800b0e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0e8:	b29a      	uxth	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
 800b0f2:	7b7a      	ldrb	r2, [r7, #13]
 800b0f4:	4909      	ldr	r1, [pc, #36]	; (800b11c <UARTEx_SetNbDataToProcess+0x94>)
 800b0f6:	5c8a      	ldrb	r2, [r1, r2]
 800b0f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0fc:	7b7a      	ldrb	r2, [r7, #13]
 800b0fe:	4908      	ldr	r1, [pc, #32]	; (800b120 <UARTEx_SetNbDataToProcess+0x98>)
 800b100:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b102:	fb93 f3f2 	sdiv	r3, r3, r2
 800b106:	b29a      	uxth	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b10e:	bf00      	nop
 800b110:	3714      	adds	r7, #20
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop
 800b11c:	080154dc 	.word	0x080154dc
 800b120:	080154e4 	.word	0x080154e4

0800b124 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b096      	sub	sp, #88	; 0x58
 800b128:	af02      	add	r7, sp, #8
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
 800b130:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b132:	2234      	movs	r2, #52	; 0x34
 800b134:	2100      	movs	r1, #0
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f009 fad0 	bl	80146dc <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	f023 0303 	bic.w	r3, r3, #3
 800b142:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	f1a3 0208 	sub.w	r2, r3, #8
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2202      	movs	r2, #2
 800b170:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b176:	697a      	ldr	r2, [r7, #20]
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	4413      	add	r3, r2
 800b17c:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	3b04      	subs	r3, #4
 800b182:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 800b18c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b18e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b190:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	3b04      	subs	r3, #4
 800b196:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b19c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b1a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a8:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ae:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c0:	4a5d      	ldr	r2, [pc, #372]	; (800b338 <_tx_byte_pool_create+0x214>)
 800b1c2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b1ce:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800b1d2:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b1d4:	b672      	cpsid	i
#endif
    return(int_posture);
 800b1d6:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b1d8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	4a57      	ldr	r2, [pc, #348]	; (800b33c <_tx_byte_pool_create+0x218>)
 800b1de:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b1e0:	4b57      	ldr	r3, [pc, #348]	; (800b340 <_tx_byte_pool_create+0x21c>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d109      	bne.n	800b1fc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b1e8:	4a56      	ldr	r2, [pc, #344]	; (800b344 <_tx_byte_pool_create+0x220>)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	631a      	str	r2, [r3, #48]	; 0x30
 800b1fa:	e011      	b.n	800b220 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b1fc:	4b51      	ldr	r3, [pc, #324]	; (800b344 <_tx_byte_pool_create+0x220>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b206:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b210:	68fa      	ldr	r2, [r7, #12]
 800b212:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b218:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b21e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b220:	4b47      	ldr	r3, [pc, #284]	; (800b340 <_tx_byte_pool_create+0x21c>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	3301      	adds	r3, #1
 800b226:	4a46      	ldr	r2, [pc, #280]	; (800b340 <_tx_byte_pool_create+0x21c>)
 800b228:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 800b22a:	2300      	movs	r3, #0
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	68f9      	ldr	r1, [r7, #12]
 800b234:	2008      	movs	r0, #8
 800b236:	f002 fd6d 	bl	800dd14 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 800b23a:	4b43      	ldr	r3, [pc, #268]	; (800b348 <_tx_byte_pool_create+0x224>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b242:	2b00      	cmp	r3, #0
 800b244:	d06c      	beq.n	800b320 <_tx_byte_pool_create+0x1fc>
 800b246:	4b41      	ldr	r3, [pc, #260]	; (800b34c <_tx_byte_pool_create+0x228>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f003 0304 	and.w	r3, r3, #4
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d066      	beq.n	800b320 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b252:	f3ef 8305 	mrs	r3, IPSR
 800b256:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b258:	69fa      	ldr	r2, [r7, #28]
 800b25a:	4b3d      	ldr	r3, [pc, #244]	; (800b350 <_tx_byte_pool_create+0x22c>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4313      	orrs	r3, r2
 800b260:	62bb      	str	r3, [r7, #40]	; 0x28
 800b262:	4b3c      	ldr	r3, [pc, #240]	; (800b354 <_tx_byte_pool_create+0x230>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	64bb      	str	r3, [r7, #72]	; 0x48
 800b268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10b      	bne.n	800b286 <_tx_byte_pool_create+0x162>
 800b26e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b272:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b278:	041a      	lsls	r2, r3, #16
 800b27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27c:	4313      	orrs	r3, r2
 800b27e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b282:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b284:	e00e      	b.n	800b2a4 <_tx_byte_pool_create+0x180>
 800b286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b288:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b28c:	d205      	bcs.n	800b29a <_tx_byte_pool_create+0x176>
 800b28e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b290:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b292:	f04f 33ff 	mov.w	r3, #4294967295
 800b296:	64bb      	str	r3, [r7, #72]	; 0x48
 800b298:	e004      	b.n	800b2a4 <_tx_byte_pool_create+0x180>
 800b29a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b29e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2ae:	605a      	str	r2, [r3, #4]
 800b2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b2:	2215      	movs	r2, #21
 800b2b4:	609a      	str	r2, [r3, #8]
 800b2b6:	4b28      	ldr	r3, [pc, #160]	; (800b358 <_tx_byte_pool_create+0x234>)
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2bc:	60da      	str	r2, [r3, #12]
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c2:	611a      	str	r2, [r3, #16]
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c8:	615a      	str	r2, [r3, #20]
 800b2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2cc:	683a      	ldr	r2, [r7, #0]
 800b2ce:	619a      	str	r2, [r3, #24]
 800b2d0:	f107 0214 	add.w	r2, r7, #20
 800b2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d6:	61da      	str	r2, [r3, #28]
 800b2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2da:	3320      	adds	r3, #32
 800b2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2de:	4b1f      	ldr	r3, [pc, #124]	; (800b35c <_tx_byte_pool_create+0x238>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d314      	bcc.n	800b312 <_tx_byte_pool_create+0x1ee>
 800b2e8:	4b1d      	ldr	r3, [pc, #116]	; (800b360 <_tx_byte_pool_create+0x23c>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2ee:	4a16      	ldr	r2, [pc, #88]	; (800b348 <_tx_byte_pool_create+0x224>)
 800b2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f2:	6013      	str	r3, [r2, #0]
 800b2f4:	4b1b      	ldr	r3, [pc, #108]	; (800b364 <_tx_byte_pool_create+0x240>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2fa:	621a      	str	r2, [r3, #32]
 800b2fc:	4b1a      	ldr	r3, [pc, #104]	; (800b368 <_tx_byte_pool_create+0x244>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00d      	beq.n	800b320 <_tx_byte_pool_create+0x1fc>
 800b304:	4b18      	ldr	r3, [pc, #96]	; (800b368 <_tx_byte_pool_create+0x244>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a16      	ldr	r2, [pc, #88]	; (800b364 <_tx_byte_pool_create+0x240>)
 800b30a:	6812      	ldr	r2, [r2, #0]
 800b30c:	4610      	mov	r0, r2
 800b30e:	4798      	blx	r3
 800b310:	e006      	b.n	800b320 <_tx_byte_pool_create+0x1fc>
 800b312:	4a0d      	ldr	r2, [pc, #52]	; (800b348 <_tx_byte_pool_create+0x224>)
 800b314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	4b12      	ldr	r3, [pc, #72]	; (800b364 <_tx_byte_pool_create+0x240>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b31e:	621a      	str	r2, [r3, #32]
 800b320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b322:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	f383 8810 	msr	PRIMASK, r3
}
 800b32a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3750      	adds	r7, #80	; 0x50
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	ffffeeee 	.word	0xffffeeee
 800b33c:	42595445 	.word	0x42595445
 800b340:	20001674 	.word	0x20001674
 800b344:	20001670 	.word	0x20001670
 800b348:	20001c9c 	.word	0x20001c9c
 800b34c:	20001ca0 	.word	0x20001ca0
 800b350:	2000000c 	.word	0x2000000c
 800b354:	20001680 	.word	0x20001680
 800b358:	e0001004 	.word	0xe0001004
 800b35c:	20001c98 	.word	0x20001c98
 800b360:	20001c94 	.word	0x20001c94
 800b364:	20001c88 	.word	0x20001c88
 800b368:	20001ca4 	.word	0x20001ca4

0800b36c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 800b370:	f002 fcaa 	bl	800dcc8 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b374:	f001 fbe6 	bl	800cb44 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b378:	f002 fa92 	bl	800d8a0 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b37c:	4b12      	ldr	r3, [pc, #72]	; (800b3c8 <_tx_initialize_high_level+0x5c>)
 800b37e:	2200      	movs	r2, #0
 800b380:	601a      	str	r2, [r3, #0]
 800b382:	4b12      	ldr	r3, [pc, #72]	; (800b3cc <_tx_initialize_high_level+0x60>)
 800b384:	2200      	movs	r2, #0
 800b386:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b388:	4b11      	ldr	r3, [pc, #68]	; (800b3d0 <_tx_initialize_high_level+0x64>)
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	4b11      	ldr	r3, [pc, #68]	; (800b3d4 <_tx_initialize_high_level+0x68>)
 800b390:	2200      	movs	r2, #0
 800b392:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b394:	4b10      	ldr	r3, [pc, #64]	; (800b3d8 <_tx_initialize_high_level+0x6c>)
 800b396:	2200      	movs	r2, #0
 800b398:	601a      	str	r2, [r3, #0]
 800b39a:	4b10      	ldr	r3, [pc, #64]	; (800b3dc <_tx_initialize_high_level+0x70>)
 800b39c:	2200      	movs	r2, #0
 800b39e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b3a0:	4b0f      	ldr	r3, [pc, #60]	; (800b3e0 <_tx_initialize_high_level+0x74>)
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	4b0f      	ldr	r3, [pc, #60]	; (800b3e4 <_tx_initialize_high_level+0x78>)
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b3ac:	4b0e      	ldr	r3, [pc, #56]	; (800b3e8 <_tx_initialize_high_level+0x7c>)
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	601a      	str	r2, [r3, #0]
 800b3b2:	4b0e      	ldr	r3, [pc, #56]	; (800b3ec <_tx_initialize_high_level+0x80>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b3b8:	4b0d      	ldr	r3, [pc, #52]	; (800b3f0 <_tx_initialize_high_level+0x84>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	601a      	str	r2, [r3, #0]
 800b3be:	4b0d      	ldr	r3, [pc, #52]	; (800b3f4 <_tx_initialize_high_level+0x88>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	601a      	str	r2, [r3, #0]
#endif
}
 800b3c4:	bf00      	nop
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	20001648 	.word	0x20001648
 800b3cc:	2000164c 	.word	0x2000164c
 800b3d0:	20001650 	.word	0x20001650
 800b3d4:	20001654 	.word	0x20001654
 800b3d8:	20001658 	.word	0x20001658
 800b3dc:	2000165c 	.word	0x2000165c
 800b3e0:	20001668 	.word	0x20001668
 800b3e4:	2000166c 	.word	0x2000166c
 800b3e8:	20001670 	.word	0x20001670
 800b3ec:	20001674 	.word	0x20001674
 800b3f0:	20001660 	.word	0x20001660
 800b3f4:	20001664 	.word	0x20001664

0800b3f8 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b3fc:	4b10      	ldr	r3, [pc, #64]	; (800b440 <_tx_initialize_kernel_enter+0x48>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800b404:	d00c      	beq.n	800b420 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b406:	4b0e      	ldr	r3, [pc, #56]	; (800b440 <_tx_initialize_kernel_enter+0x48>)
 800b408:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b40c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b40e:	f7f4 ff33 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b412:	f7ff ffab 	bl	800b36c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b416:	4b0b      	ldr	r3, [pc, #44]	; (800b444 <_tx_initialize_kernel_enter+0x4c>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3301      	adds	r3, #1
 800b41c:	4a09      	ldr	r2, [pc, #36]	; (800b444 <_tx_initialize_kernel_enter+0x4c>)
 800b41e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b420:	4b07      	ldr	r3, [pc, #28]	; (800b440 <_tx_initialize_kernel_enter+0x48>)
 800b422:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b426:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b428:	4b07      	ldr	r3, [pc, #28]	; (800b448 <_tx_initialize_kernel_enter+0x50>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7f5 f9e1 	bl	80007f4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b432:	4b03      	ldr	r3, [pc, #12]	; (800b440 <_tx_initialize_kernel_enter+0x48>)
 800b434:	2200      	movs	r2, #0
 800b436:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b438:	f7f4 ff5a 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b43c:	bf00      	nop
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	2000000c 	.word	0x2000000c
 800b444:	20001718 	.word	0x20001718
 800b448:	20001678 	.word	0x20001678

0800b44c <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b08e      	sub	sp, #56	; 0x38
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b456:	f3ef 8310 	mrs	r3, PRIMASK
 800b45a:	623b      	str	r3, [r7, #32]
    return(posture);
 800b45c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b45e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b460:	b672      	cpsid	i
    return(int_posture);
 800b462:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800b464:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b46a:	4a37      	ldr	r2, [pc, #220]	; (800b548 <_tx_queue_cleanup+0xfc>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d161      	bne.n	800b534 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d15b      	bne.n	800b534 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b480:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	2b00      	cmp	r3, #0
 800b486:	d055      	beq.n	800b534 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800b488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a2f      	ldr	r2, [pc, #188]	; (800b54c <_tx_queue_cleanup+0x100>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d150      	bne.n	800b534 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b496:	2b00      	cmp	r3, #0
 800b498:	d04c      	beq.n	800b534 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a4:	1e5a      	subs	r2, r3, #1
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a8:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ae:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d103      	bne.n	800b4be <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	629a      	str	r2, [r3, #40]	; 0x28
 800b4bc:	e013      	b.n	800b4e6 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4c2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4c8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ce:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4d4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d102      	bne.n	800b4e6 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4e4:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ea:	2b05      	cmp	r3, #5
 800b4ec:	d122      	bne.n	800b534 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d004      	beq.n	800b500 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	220b      	movs	r2, #11
 800b4fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b4fe:	e003      	b.n	800b508 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	220a      	movs	r2, #10
 800b504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b508:	4b11      	ldr	r3, [pc, #68]	; (800b550 <_tx_queue_cleanup+0x104>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3301      	adds	r3, #1
 800b50e:	4a10      	ldr	r2, [pc, #64]	; (800b550 <_tx_queue_cleanup+0x104>)
 800b510:	6013      	str	r3, [r2, #0]
 800b512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b514:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	f383 8810 	msr	PRIMASK, r3
}
 800b51c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f001 fcd6 	bl	800ced0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b524:	f3ef 8310 	mrs	r3, PRIMASK
 800b528:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b52a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b52c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b52e:	b672      	cpsid	i
    return(int_posture);
 800b530:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b532:	637b      	str	r3, [r7, #52]	; 0x34
 800b534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b536:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f383 8810 	msr	PRIMASK, r3
}
 800b53e:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b540:	bf00      	nop
 800b542:	3738      	adds	r7, #56	; 0x38
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	0800b44d 	.word	0x0800b44d
 800b54c:	51554555 	.word	0x51554555
 800b550:	20001718 	.word	0x20001718

0800b554 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b094      	sub	sp, #80	; 0x50
 800b558:	af02      	add	r7, sp, #8
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
 800b560:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800b562:	2238      	movs	r2, #56	; 0x38
 800b564:	2100      	movs	r1, #0
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f009 f8b8 	bl	80146dc <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b57e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b582:	63fb      	str	r3, [r7, #60]	; 0x3c
    used_words =  capacity * message_size;
 800b584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	fb02 f303 	mul.w	r3, r2, r3
 800b58c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	683a      	ldr	r2, [r7, #0]
 800b592:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	699a      	ldr	r2, [r3, #24]
 800b598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	441a      	add	r2, r3
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	683a      	ldr	r2, [r7, #0]
 800b5a6:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5b2:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5b8:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5ba:	f3ef 8310 	mrs	r3, PRIMASK
 800b5be:	623b      	str	r3, [r7, #32]
    return(posture);
 800b5c0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b5c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5c4:	b672      	cpsid	i
    return(int_posture);
 800b5c6:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800b5c8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	4a55      	ldr	r2, [pc, #340]	; (800b724 <_tx_queue_create+0x1d0>)
 800b5ce:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800b5d0:	4b55      	ldr	r3, [pc, #340]	; (800b728 <_tx_queue_create+0x1d4>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d109      	bne.n	800b5ec <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800b5d8:	4a54      	ldr	r2, [pc, #336]	; (800b72c <_tx_queue_create+0x1d8>)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	635a      	str	r2, [r3, #52]	; 0x34
 800b5ea:	e011      	b.n	800b610 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800b5ec:	4b4f      	ldr	r3, [pc, #316]	; (800b72c <_tx_queue_create+0x1d8>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	633b      	str	r3, [r7, #48]	; 0x30
        previous_queue =  next_queue -> tx_queue_created_previous;
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f6:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800b5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800b5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b608:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b60e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800b610:	4b45      	ldr	r3, [pc, #276]	; (800b728 <_tx_queue_create+0x1d4>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	3301      	adds	r3, #1
 800b616:	4a44      	ldr	r2, [pc, #272]	; (800b728 <_tx_queue_create+0x1d4>)
 800b618:	6013      	str	r3, [r2, #0]

    /* Optional queue create extended processing.  */
    TX_QUEUE_CREATE_EXTENSION(queue_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, name_ptr, queue_size, message_size)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	68f9      	ldr	r1, [r7, #12]
 800b624:	2003      	movs	r0, #3
 800b626:	f002 fb75 	bl	800dd14 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_CREATE, queue_ptr, message_size, TX_POINTER_TO_ULONG_CONVERT(queue_start), queue_size, TX_TRACE_QUEUE_EVENTS)
 800b62a:	4b41      	ldr	r3, [pc, #260]	; (800b730 <_tx_queue_create+0x1dc>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b632:	2b00      	cmp	r3, #0
 800b634:	d06b      	beq.n	800b70e <_tx_queue_create+0x1ba>
 800b636:	4b3f      	ldr	r3, [pc, #252]	; (800b734 <_tx_queue_create+0x1e0>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d065      	beq.n	800b70e <_tx_queue_create+0x1ba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b642:	f3ef 8305 	mrs	r3, IPSR
 800b646:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b648:	69ba      	ldr	r2, [r7, #24]
 800b64a:	4b3b      	ldr	r3, [pc, #236]	; (800b738 <_tx_queue_create+0x1e4>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4313      	orrs	r3, r2
 800b650:	627b      	str	r3, [r7, #36]	; 0x24
 800b652:	4b3a      	ldr	r3, [pc, #232]	; (800b73c <_tx_queue_create+0x1e8>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	643b      	str	r3, [r7, #64]	; 0x40
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10b      	bne.n	800b676 <_tx_queue_create+0x122>
 800b65e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b662:	647b      	str	r3, [r7, #68]	; 0x44
 800b664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b668:	041a      	lsls	r2, r3, #16
 800b66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b66c:	4313      	orrs	r3, r2
 800b66e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b672:	647b      	str	r3, [r7, #68]	; 0x44
 800b674:	e00e      	b.n	800b694 <_tx_queue_create+0x140>
 800b676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b678:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b67c:	d205      	bcs.n	800b68a <_tx_queue_create+0x136>
 800b67e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b680:	647b      	str	r3, [r7, #68]	; 0x44
 800b682:	f04f 33ff 	mov.w	r3, #4294967295
 800b686:	643b      	str	r3, [r7, #64]	; 0x40
 800b688:	e004      	b.n	800b694 <_tx_queue_create+0x140>
 800b68a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b68e:	643b      	str	r3, [r7, #64]	; 0x40
 800b690:	2300      	movs	r3, #0
 800b692:	647b      	str	r3, [r7, #68]	; 0x44
 800b694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	601a      	str	r2, [r3, #0]
 800b69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b69e:	605a      	str	r2, [r3, #4]
 800b6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a2:	223c      	movs	r2, #60	; 0x3c
 800b6a4:	609a      	str	r2, [r3, #8]
 800b6a6:	4b26      	ldr	r3, [pc, #152]	; (800b740 <_tx_queue_create+0x1ec>)
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ac:	60da      	str	r2, [r3, #12]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b2:	611a      	str	r2, [r3, #16]
 800b6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	615a      	str	r2, [r3, #20]
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6be:	619a      	str	r2, [r3, #24]
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b6c4:	61da      	str	r2, [r3, #28]
 800b6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c8:	3320      	adds	r3, #32
 800b6ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6cc:	4b1d      	ldr	r3, [pc, #116]	; (800b744 <_tx_queue_create+0x1f0>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d314      	bcc.n	800b700 <_tx_queue_create+0x1ac>
 800b6d6:	4b1c      	ldr	r3, [pc, #112]	; (800b748 <_tx_queue_create+0x1f4>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6dc:	4a14      	ldr	r2, [pc, #80]	; (800b730 <_tx_queue_create+0x1dc>)
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	6013      	str	r3, [r2, #0]
 800b6e2:	4b1a      	ldr	r3, [pc, #104]	; (800b74c <_tx_queue_create+0x1f8>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6e8:	621a      	str	r2, [r3, #32]
 800b6ea:	4b19      	ldr	r3, [pc, #100]	; (800b750 <_tx_queue_create+0x1fc>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00d      	beq.n	800b70e <_tx_queue_create+0x1ba>
 800b6f2:	4b17      	ldr	r3, [pc, #92]	; (800b750 <_tx_queue_create+0x1fc>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a15      	ldr	r2, [pc, #84]	; (800b74c <_tx_queue_create+0x1f8>)
 800b6f8:	6812      	ldr	r2, [r2, #0]
 800b6fa:	4610      	mov	r0, r2
 800b6fc:	4798      	blx	r3
 800b6fe:	e006      	b.n	800b70e <_tx_queue_create+0x1ba>
 800b700:	4a0b      	ldr	r2, [pc, #44]	; (800b730 <_tx_queue_create+0x1dc>)
 800b702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b704:	6013      	str	r3, [r2, #0]
 800b706:	4b11      	ldr	r3, [pc, #68]	; (800b74c <_tx_queue_create+0x1f8>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b70c:	621a      	str	r2, [r3, #32]
 800b70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b710:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f383 8810 	msr	PRIMASK, r3
}
 800b718:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3748      	adds	r7, #72	; 0x48
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	51554555 	.word	0x51554555
 800b728:	20001654 	.word	0x20001654
 800b72c:	20001650 	.word	0x20001650
 800b730:	20001c9c 	.word	0x20001c9c
 800b734:	20001ca0 	.word	0x20001ca0
 800b738:	2000000c 	.word	0x2000000c
 800b73c:	20001680 	.word	0x20001680
 800b740:	e0001004 	.word	0xe0001004
 800b744:	20001c98 	.word	0x20001c98
 800b748:	20001c94 	.word	0x20001c94
 800b74c:	20001c88 	.word	0x20001c88
 800b750:	20001ca4 	.word	0x20001ca4

0800b754 <_tx_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_flush(TX_QUEUE *queue_ptr)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b094      	sub	sp, #80	; 0x50
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
UINT            suspended_count;
TX_THREAD       *thread_ptr;


    /* Initialize the suspended count and list.  */
    suspended_count =  TX_NO_SUSPENSIONS;
 800b75c:	2300      	movs	r3, #0
 800b75e:	64bb      	str	r3, [r7, #72]	; 0x48
    suspension_list =  TX_NULL;
 800b760:	2300      	movs	r3, #0
 800b762:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b764:	f3ef 8310 	mrs	r3, PRIMASK
 800b768:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b76c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b76e:	b672      	cpsid	i
    return(int_posture);
 800b770:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to reset various queue parameters.  */
    TX_DISABLE
 800b772:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_FLUSH, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), 0, 0, TX_TRACE_QUEUE_EVENTS)
 800b774:	4b76      	ldr	r3, [pc, #472]	; (800b950 <_tx_queue_flush+0x1fc>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	63bb      	str	r3, [r7, #56]	; 0x38
 800b77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d06c      	beq.n	800b85a <_tx_queue_flush+0x106>
 800b780:	4b74      	ldr	r3, [pc, #464]	; (800b954 <_tx_queue_flush+0x200>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d066      	beq.n	800b85a <_tx_queue_flush+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b78c:	f3ef 8305 	mrs	r3, IPSR
 800b790:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800b792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b794:	4b70      	ldr	r3, [pc, #448]	; (800b958 <_tx_queue_flush+0x204>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4313      	orrs	r3, r2
 800b79a:	637b      	str	r3, [r7, #52]	; 0x34
 800b79c:	4b6f      	ldr	r3, [pc, #444]	; (800b95c <_tx_queue_flush+0x208>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	643b      	str	r3, [r7, #64]	; 0x40
 800b7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10b      	bne.n	800b7c0 <_tx_queue_flush+0x6c>
 800b7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ac:	647b      	str	r3, [r7, #68]	; 0x44
 800b7ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7b2:	041a      	lsls	r2, r3, #16
 800b7b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b7bc:	647b      	str	r3, [r7, #68]	; 0x44
 800b7be:	e00e      	b.n	800b7de <_tx_queue_flush+0x8a>
 800b7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b7c6:	d205      	bcs.n	800b7d4 <_tx_queue_flush+0x80>
 800b7c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ca:	647b      	str	r3, [r7, #68]	; 0x44
 800b7cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b7d0:	643b      	str	r3, [r7, #64]	; 0x40
 800b7d2:	e004      	b.n	800b7de <_tx_queue_flush+0x8a>
 800b7d4:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b7d8:	643b      	str	r3, [r7, #64]	; 0x40
 800b7da:	2300      	movs	r3, #0
 800b7dc:	647b      	str	r3, [r7, #68]	; 0x44
 800b7de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e2:	601a      	str	r2, [r3, #0]
 800b7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7e8:	605a      	str	r2, [r3, #4]
 800b7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ec:	223e      	movs	r2, #62	; 0x3e
 800b7ee:	609a      	str	r2, [r3, #8]
 800b7f0:	4b5b      	ldr	r3, [pc, #364]	; (800b960 <_tx_queue_flush+0x20c>)
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f6:	60da      	str	r2, [r3, #12]
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fc:	611a      	str	r2, [r3, #16]
 800b7fe:	f107 0208 	add.w	r2, r7, #8
 800b802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b804:	615a      	str	r2, [r3, #20]
 800b806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b808:	2200      	movs	r2, #0
 800b80a:	619a      	str	r2, [r3, #24]
 800b80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80e:	2200      	movs	r2, #0
 800b810:	61da      	str	r2, [r3, #28]
 800b812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b814:	3320      	adds	r3, #32
 800b816:	63bb      	str	r3, [r7, #56]	; 0x38
 800b818:	4b52      	ldr	r3, [pc, #328]	; (800b964 <_tx_queue_flush+0x210>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b81e:	429a      	cmp	r2, r3
 800b820:	d314      	bcc.n	800b84c <_tx_queue_flush+0xf8>
 800b822:	4b51      	ldr	r3, [pc, #324]	; (800b968 <_tx_queue_flush+0x214>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	63bb      	str	r3, [r7, #56]	; 0x38
 800b828:	4a49      	ldr	r2, [pc, #292]	; (800b950 <_tx_queue_flush+0x1fc>)
 800b82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82c:	6013      	str	r3, [r2, #0]
 800b82e:	4b4f      	ldr	r3, [pc, #316]	; (800b96c <_tx_queue_flush+0x218>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b834:	621a      	str	r2, [r3, #32]
 800b836:	4b4e      	ldr	r3, [pc, #312]	; (800b970 <_tx_queue_flush+0x21c>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00d      	beq.n	800b85a <_tx_queue_flush+0x106>
 800b83e:	4b4c      	ldr	r3, [pc, #304]	; (800b970 <_tx_queue_flush+0x21c>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a4a      	ldr	r2, [pc, #296]	; (800b96c <_tx_queue_flush+0x218>)
 800b844:	6812      	ldr	r2, [r2, #0]
 800b846:	4610      	mov	r0, r2
 800b848:	4798      	blx	r3
 800b84a:	e006      	b.n	800b85a <_tx_queue_flush+0x106>
 800b84c:	4a40      	ldr	r2, [pc, #256]	; (800b950 <_tx_queue_flush+0x1fc>)
 800b84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b850:	6013      	str	r3, [r2, #0]
 800b852:	4b46      	ldr	r3, [pc, #280]	; (800b96c <_tx_queue_flush+0x218>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b858:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_FLUSH_INSERT

    /* Determine if there is something on the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d023      	beq.n	800b8aa <_tx_queue_flush+0x156>
    {

        /* Yes, there is something in the queue.  */

        /* Reset the queue parameters to erase all of the queued messages.  */
        queue_ptr -> tx_queue_enqueued =           TX_NO_MESSAGES;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	611a      	str	r2, [r3, #16]
        queue_ptr -> tx_queue_available_storage =  queue_ptr -> tx_queue_capacity;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68da      	ldr	r2, [r3, #12]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	615a      	str	r2, [r3, #20]
        queue_ptr -> tx_queue_read =               queue_ptr -> tx_queue_start;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	699a      	ldr	r2, [r3, #24]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	621a      	str	r2, [r3, #32]
        queue_ptr -> tx_queue_write =              queue_ptr -> tx_queue_start;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	699a      	ldr	r2, [r3, #24]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Now determine if there are any threads suspended on a full queue.  */
        if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b884:	2b00      	cmp	r3, #0
 800b886:	d010      	beq.n	800b8aa <_tx_queue_flush+0x156>

            /* Yes, there are threads suspended on this queue, they must be
               resumed!  */

            /* Copy the information into temporary variables.  */
            suspension_list =  queue_ptr -> tx_queue_suspension_list;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b88c:	64fb      	str	r3, [r7, #76]	; 0x4c
            suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b892:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the queue variables.  */
            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	629a      	str	r2, [r3, #40]	; 0x28
            queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b8a0:	4b34      	ldr	r3, [pc, #208]	; (800b974 <_tx_queue_flush+0x220>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	4a33      	ldr	r2, [pc, #204]	; (800b974 <_tx_queue_flush+0x220>)
 800b8a8:	6013      	str	r3, [r2, #0]
 800b8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ac:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b0:	f383 8810 	msr	PRIMASK, r3
}
 800b8b4:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    if (suspended_count != TX_NO_SUSPENSIONS)
 800b8b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d044      	beq.n	800b946 <_tx_queue_flush+0x1f2>
    {

        /* Pickup the thread to resume.  */
        thread_ptr =  suspension_list;
 800b8bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8be:	60bb      	str	r3, [r7, #8]
        while (suspended_count != ((ULONG) 0))
 800b8c0:	e027      	b.n	800b912 <_tx_queue_flush+0x1be>
        {

            /* Decrement the suspension count.  */
            suspended_count--;
 800b8c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Check for a NULL thread pointer.  */
            if (thread_ptr == TX_NULL)
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d025      	beq.n	800b91a <_tx_queue_flush+0x1c6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b8ce:	f3ef 8310 	mrs	r3, PRIMASK
 800b8d2:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b8d4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b8d6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b8d8:	b672      	cpsid	i
    return(int_posture);
 800b8da:	69bb      	ldr	r3, [r7, #24]
            }

            /* Resume the next suspended thread.  */

            /* Lockout interrupts.  */
            TX_DISABLE
 800b8dc:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set the return status in the thread to TX_SUCCESS.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8f0:	60bb      	str	r3, [r7, #8]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800b8f2:	4b20      	ldr	r3, [pc, #128]	; (800b974 <_tx_queue_flush+0x220>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	4a1e      	ldr	r2, [pc, #120]	; (800b974 <_tx_queue_flush+0x220>)
 800b8fa:	6013      	str	r3, [r2, #0]
 800b8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8fe:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	f383 8810 	msr	PRIMASK, r3
}
 800b906:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b90c:	4618      	mov	r0, r3
 800b90e:	f001 fadf 	bl	800ced0 <_tx_thread_system_resume>
        while (suspended_count != ((ULONG) 0))
 800b912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1d4      	bne.n	800b8c2 <_tx_queue_flush+0x16e>
 800b918:	e000      	b.n	800b91c <_tx_queue_flush+0x1c8>
                break;
 800b91a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b91c:	f3ef 8310 	mrs	r3, PRIMASK
 800b920:	613b      	str	r3, [r7, #16]
    return(posture);
 800b922:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800b924:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b926:	b672      	cpsid	i
    return(int_posture);
 800b928:	68fb      	ldr	r3, [r7, #12]
#endif
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800b92a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Restore previous preempt posture.  */
        _tx_thread_preempt_disable--;
 800b92c:	4b11      	ldr	r3, [pc, #68]	; (800b974 <_tx_queue_flush+0x220>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	3b01      	subs	r3, #1
 800b932:	4a10      	ldr	r2, [pc, #64]	; (800b974 <_tx_queue_flush+0x220>)
 800b934:	6013      	str	r3, [r2, #0]
 800b936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b938:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f383 8810 	msr	PRIMASK, r3
}
 800b940:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b942:	f001 fa8b 	bl	800ce5c <_tx_thread_system_preempt_check>
    }

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3750      	adds	r7, #80	; 0x50
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	20001c9c 	.word	0x20001c9c
 800b954:	20001ca0 	.word	0x20001ca0
 800b958:	2000000c 	.word	0x2000000c
 800b95c:	20001680 	.word	0x20001680
 800b960:	e0001004 	.word	0xe0001004
 800b964:	20001c98 	.word	0x20001c98
 800b968:	20001c94 	.word	0x20001c94
 800b96c:	20001c88 	.word	0x20001c88
 800b970:	20001ca4 	.word	0x20001ca4
 800b974:	20001718 	.word	0x20001718

0800b978 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b09a      	sub	sp, #104	; 0x68
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800b984:	2300      	movs	r3, #0
 800b986:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b988:	f3ef 8310 	mrs	r3, PRIMASK
 800b98c:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b990:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b992:	b672      	cpsid	i
    return(int_posture);
 800b994:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800b996:	64fb      	str	r3, [r7, #76]	; 0x4c
    queue_ptr -> tx_queue_performance_messages_received_count++;

#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_RECEIVE, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(destination_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800b998:	4b77      	ldr	r3, [pc, #476]	; (800bb78 <_tx_queue_receive+0x200>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b99e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d06c      	beq.n	800ba7e <_tx_queue_receive+0x106>
 800b9a4:	4b75      	ldr	r3, [pc, #468]	; (800bb7c <_tx_queue_receive+0x204>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d066      	beq.n	800ba7e <_tx_queue_receive+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b9b0:	f3ef 8305 	mrs	r3, IPSR
 800b9b4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800b9b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9b8:	4b71      	ldr	r3, [pc, #452]	; (800bb80 <_tx_queue_receive+0x208>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	647b      	str	r3, [r7, #68]	; 0x44
 800b9c0:	4b70      	ldr	r3, [pc, #448]	; (800bb84 <_tx_queue_receive+0x20c>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	653b      	str	r3, [r7, #80]	; 0x50
 800b9c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10b      	bne.n	800b9e4 <_tx_queue_receive+0x6c>
 800b9cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d0:	657b      	str	r3, [r7, #84]	; 0x54
 800b9d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9d6:	041a      	lsls	r2, r3, #16
 800b9d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b9e0:	657b      	str	r3, [r7, #84]	; 0x54
 800b9e2:	e00e      	b.n	800ba02 <_tx_queue_receive+0x8a>
 800b9e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9e6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b9ea:	d205      	bcs.n	800b9f8 <_tx_queue_receive+0x80>
 800b9ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ee:	657b      	str	r3, [r7, #84]	; 0x54
 800b9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f4:	653b      	str	r3, [r7, #80]	; 0x50
 800b9f6:	e004      	b.n	800ba02 <_tx_queue_receive+0x8a>
 800b9f8:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b9fc:	653b      	str	r3, [r7, #80]	; 0x50
 800b9fe:	2300      	movs	r3, #0
 800ba00:	657b      	str	r3, [r7, #84]	; 0x54
 800ba02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba0c:	605a      	str	r2, [r3, #4]
 800ba0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba10:	2244      	movs	r2, #68	; 0x44
 800ba12:	609a      	str	r2, [r3, #8]
 800ba14:	4b5c      	ldr	r3, [pc, #368]	; (800bb88 <_tx_queue_receive+0x210>)
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba1a:	60da      	str	r2, [r3, #12]
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba20:	611a      	str	r2, [r3, #16]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba26:	615a      	str	r2, [r3, #20]
 800ba28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	619a      	str	r2, [r3, #24]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	691a      	ldr	r2, [r3, #16]
 800ba32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba34:	61da      	str	r2, [r3, #28]
 800ba36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba38:	3320      	adds	r3, #32
 800ba3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba3c:	4b53      	ldr	r3, [pc, #332]	; (800bb8c <_tx_queue_receive+0x214>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d314      	bcc.n	800ba70 <_tx_queue_receive+0xf8>
 800ba46:	4b52      	ldr	r3, [pc, #328]	; (800bb90 <_tx_queue_receive+0x218>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba4c:	4a4a      	ldr	r2, [pc, #296]	; (800bb78 <_tx_queue_receive+0x200>)
 800ba4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba50:	6013      	str	r3, [r2, #0]
 800ba52:	4b50      	ldr	r3, [pc, #320]	; (800bb94 <_tx_queue_receive+0x21c>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba58:	621a      	str	r2, [r3, #32]
 800ba5a:	4b4f      	ldr	r3, [pc, #316]	; (800bb98 <_tx_queue_receive+0x220>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00d      	beq.n	800ba7e <_tx_queue_receive+0x106>
 800ba62:	4b4d      	ldr	r3, [pc, #308]	; (800bb98 <_tx_queue_receive+0x220>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a4b      	ldr	r2, [pc, #300]	; (800bb94 <_tx_queue_receive+0x21c>)
 800ba68:	6812      	ldr	r2, [r2, #0]
 800ba6a:	4610      	mov	r0, r2
 800ba6c:	4798      	blx	r3
 800ba6e:	e006      	b.n	800ba7e <_tx_queue_receive+0x106>
 800ba70:	4a41      	ldr	r2, [pc, #260]	; (800bb78 <_tx_queue_receive+0x200>)
 800ba72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba74:	6013      	str	r3, [r2, #0]
 800ba76:	4b47      	ldr	r3, [pc, #284]	; (800bb94 <_tx_queue_receive+0x21c>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba7c:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba82:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f000 8149 	beq.w	800bd20 <_tx_queue_receive+0x3a8>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800ba8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d13c      	bne.n	800bb0e <_tx_queue_receive+0x196>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6a1b      	ldr	r3, [r3, #32]
 800ba98:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800baa4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800baa6:	1d13      	adds	r3, r2, #4
 800baa8:	667b      	str	r3, [r7, #100]	; 0x64
 800baaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800baac:	1d19      	adds	r1, r3, #4
 800baae:	6639      	str	r1, [r7, #96]	; 0x60
 800bab0:	6812      	ldr	r2, [r2, #0]
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d90e      	bls.n	800bad8 <_tx_queue_receive+0x160>
 800baba:	e007      	b.n	800bacc <_tx_queue_receive+0x154>
 800babc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800babe:	1d13      	adds	r3, r2, #4
 800bac0:	667b      	str	r3, [r7, #100]	; 0x64
 800bac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bac4:	1d19      	adds	r1, r3, #4
 800bac6:	6639      	str	r1, [r7, #96]	; 0x60
 800bac8:	6812      	ldr	r2, [r2, #0]
 800baca:	601a      	str	r2, [r3, #0]
 800bacc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bace:	3b01      	subs	r3, #1
 800bad0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1f1      	bne.n	800babc <_tx_queue_receive+0x144>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	69db      	ldr	r3, [r3, #28]
 800badc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bade:	429a      	cmp	r2, r3
 800bae0:	d102      	bne.n	800bae8 <_tx_queue_receive+0x170>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	667b      	str	r3, [r7, #100]	; 0x64
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800baec:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	695b      	ldr	r3, [r3, #20]
 800baf2:	1c5a      	adds	r2, r3, #1
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	1e5a      	subs	r2, r3, #1
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	611a      	str	r2, [r3, #16]
 800bb02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb04:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb08:	f383 8810 	msr	PRIMASK, r3
}
 800bb0c:	e176      	b.n	800bdfc <_tx_queue_receive+0x484>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb12:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800bb14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d166      	bne.n	800bbec <_tx_queue_receive+0x274>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bb1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb22:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bb2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb30:	1d13      	adds	r3, r2, #4
 800bb32:	667b      	str	r3, [r7, #100]	; 0x64
 800bb34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb36:	1d19      	adds	r1, r3, #4
 800bb38:	6639      	str	r1, [r7, #96]	; 0x60
 800bb3a:	6812      	ldr	r2, [r2, #0]
 800bb3c:	601a      	str	r2, [r3, #0]
 800bb3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d90e      	bls.n	800bb62 <_tx_queue_receive+0x1ea>
 800bb44:	e007      	b.n	800bb56 <_tx_queue_receive+0x1de>
 800bb46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb48:	1d13      	adds	r3, r2, #4
 800bb4a:	667b      	str	r3, [r7, #100]	; 0x64
 800bb4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb4e:	1d19      	adds	r1, r3, #4
 800bb50:	6639      	str	r1, [r7, #96]	; 0x60
 800bb52:	6812      	ldr	r2, [r2, #0]
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d1f1      	bne.n	800bb46 <_tx_queue_receive+0x1ce>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800bb62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb64:	3b01      	subs	r3, #1
 800bb66:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bb68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d116      	bne.n	800bb9c <_tx_queue_receive+0x224>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	629a      	str	r2, [r3, #40]	; 0x28
 800bb74:	e021      	b.n	800bbba <_tx_queue_receive+0x242>
 800bb76:	bf00      	nop
 800bb78:	20001c9c 	.word	0x20001c9c
 800bb7c:	20001ca0 	.word	0x20001ca0
 800bb80:	2000000c 	.word	0x2000000c
 800bb84:	20001680 	.word	0x20001680
 800bb88:	e0001004 	.word	0xe0001004
 800bb8c:	20001c98 	.word	0x20001c98
 800bb90:	20001c94 	.word	0x20001c94
 800bb94:	20001c88 	.word	0x20001c88
 800bb98:	20001ca4 	.word	0x20001ca4
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba0:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bba6:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800bba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbac:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800bbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbb2:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800bbb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbb8:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbbe:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bbc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bbc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bbce:	4b8e      	ldr	r3, [pc, #568]	; (800be08 <_tx_queue_receive+0x490>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	4a8c      	ldr	r2, [pc, #560]	; (800be08 <_tx_queue_receive+0x490>)
 800bbd6:	6013      	str	r3, [r2, #0]
 800bbd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbda:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbdc:	6a3b      	ldr	r3, [r7, #32]
 800bbde:	f383 8810 	msr	PRIMASK, r3
}
 800bbe2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800bbe4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bbe6:	f001 f973 	bl	800ced0 <_tx_thread_system_resume>
 800bbea:	e107      	b.n	800bdfc <_tx_queue_receive+0x484>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6a1b      	ldr	r3, [r3, #32]
 800bbf0:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bbfc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bbfe:	1d13      	adds	r3, r2, #4
 800bc00:	667b      	str	r3, [r7, #100]	; 0x64
 800bc02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc04:	1d19      	adds	r1, r3, #4
 800bc06:	6639      	str	r1, [r7, #96]	; 0x60
 800bc08:	6812      	ldr	r2, [r2, #0]
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d90e      	bls.n	800bc30 <_tx_queue_receive+0x2b8>
 800bc12:	e007      	b.n	800bc24 <_tx_queue_receive+0x2ac>
 800bc14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc16:	1d13      	adds	r3, r2, #4
 800bc18:	667b      	str	r3, [r7, #100]	; 0x64
 800bc1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc1c:	1d19      	adds	r1, r3, #4
 800bc1e:	6639      	str	r1, [r7, #96]	; 0x60
 800bc20:	6812      	ldr	r2, [r2, #0]
 800bc22:	601a      	str	r2, [r3, #0]
 800bc24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc26:	3b01      	subs	r3, #1
 800bc28:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d1f1      	bne.n	800bc14 <_tx_queue_receive+0x29c>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	69db      	ldr	r3, [r3, #28]
 800bc34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d102      	bne.n	800bc40 <_tx_queue_receive+0x2c8>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	699b      	ldr	r3, [r3, #24]
 800bc3e:	667b      	str	r3, [r7, #100]	; 0x64
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc44:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800bc46:	4b70      	ldr	r3, [pc, #448]	; (800be08 <_tx_queue_receive+0x490>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	4a6e      	ldr	r2, [pc, #440]	; (800be08 <_tx_queue_receive+0x490>)
 800bc4e:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800bc50:	4b6d      	ldr	r3, [pc, #436]	; (800be08 <_tx_queue_receive+0x490>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	3b01      	subs	r3, #1
 800bc56:	4a6c      	ldr	r2, [pc, #432]	; (800be08 <_tx_queue_receive+0x490>)
 800bc58:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bc5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc5e:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  queue_ptr -> tx_queue_write;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc64:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bc6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc6e:	1d13      	adds	r3, r2, #4
 800bc70:	667b      	str	r3, [r7, #100]	; 0x64
 800bc72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc74:	1d19      	adds	r1, r3, #4
 800bc76:	6639      	str	r1, [r7, #96]	; 0x60
 800bc78:	6812      	ldr	r2, [r2, #0]
 800bc7a:	601a      	str	r2, [r3, #0]
 800bc7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d90e      	bls.n	800bca0 <_tx_queue_receive+0x328>
 800bc82:	e007      	b.n	800bc94 <_tx_queue_receive+0x31c>
 800bc84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc86:	1d13      	adds	r3, r2, #4
 800bc88:	667b      	str	r3, [r7, #100]	; 0x64
 800bc8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc8c:	1d19      	adds	r1, r3, #4
 800bc8e:	6639      	str	r1, [r7, #96]	; 0x60
 800bc90:	6812      	ldr	r2, [r2, #0]
 800bc92:	601a      	str	r2, [r3, #0]
 800bc94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc96:	3b01      	subs	r3, #1
 800bc98:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1f1      	bne.n	800bc84 <_tx_queue_receive+0x30c>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	69db      	ldr	r3, [r3, #28]
 800bca4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d102      	bne.n	800bcb0 <_tx_queue_receive+0x338>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	699b      	ldr	r3, [r3, #24]
 800bcae:	663b      	str	r3, [r7, #96]	; 0x60
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcb4:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcba:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800bcbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bcc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d103      	bne.n	800bcd0 <_tx_queue_receive+0x358>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2200      	movs	r2, #0
 800bccc:	629a      	str	r2, [r3, #40]	; 0x28
 800bcce:	e00e      	b.n	800bcee <_tx_queue_receive+0x376>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bcd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd4:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcda:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bcdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bce0:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bce6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800bce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcec:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcf2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bcf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bcfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bd02:	4b41      	ldr	r3, [pc, #260]	; (800be08 <_tx_queue_receive+0x490>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	3301      	adds	r3, #1
 800bd08:	4a3f      	ldr	r2, [pc, #252]	; (800be08 <_tx_queue_receive+0x490>)
 800bd0a:	6013      	str	r3, [r2, #0]
 800bd0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd0e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	f383 8810 	msr	PRIMASK, r3
}
 800bd16:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800bd18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bd1a:	f001 f8d9 	bl	800ced0 <_tx_thread_system_resume>
 800bd1e:	e06d      	b.n	800bdfc <_tx_queue_receive+0x484>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d062      	beq.n	800bdec <_tx_queue_receive+0x474>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800bd26:	4b38      	ldr	r3, [pc, #224]	; (800be08 <_tx_queue_receive+0x490>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d008      	beq.n	800bd40 <_tx_queue_receive+0x3c8>
 800bd2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd30:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	f383 8810 	msr	PRIMASK, r3
}
 800bd38:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800bd3a:	230a      	movs	r3, #10
 800bd3c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd3e:	e05d      	b.n	800bdfc <_tx_queue_receive+0x484>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bd40:	4b32      	ldr	r3, [pc, #200]	; (800be0c <_tx_queue_receive+0x494>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800bd46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd48:	4a31      	ldr	r2, [pc, #196]	; (800be10 <_tx_queue_receive+0x498>)
 800bd4a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800bd4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800bd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd54:	68ba      	ldr	r2, [r7, #8]
 800bd56:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800bd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800bd60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bd66:	1c5a      	adds	r2, r3, #1
 800bd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd6a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800bd6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d109      	bne.n	800bd88 <_tx_queue_receive+0x410>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd78:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800bd7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd7e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800bd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd84:	675a      	str	r2, [r3, #116]	; 0x74
 800bd86:	e011      	b.n	800bdac <_tx_queue_receive+0x434>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd8c:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800bd8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd92:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800bd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd98:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800bd9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd9e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800bda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bda4:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800bda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bdaa:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800bdac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800bdb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb6:	2205      	movs	r2, #5
 800bdb8:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bdba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800bdc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bdc6:	4b10      	ldr	r3, [pc, #64]	; (800be08 <_tx_queue_receive+0x490>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	4a0e      	ldr	r2, [pc, #56]	; (800be08 <_tx_queue_receive+0x490>)
 800bdce:	6013      	str	r3, [r2, #0]
 800bdd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdd2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	f383 8810 	msr	PRIMASK, r3
}
 800bdda:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800bddc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bdde:	f001 fa31 	bl	800d244 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800bde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bde8:	65bb      	str	r3, [r7, #88]	; 0x58
 800bdea:	e007      	b.n	800bdfc <_tx_queue_receive+0x484>
 800bdec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	f383 8810 	msr	PRIMASK, r3
}
 800bdf6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800bdf8:	230a      	movs	r3, #10
 800bdfa:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800bdfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3768      	adds	r7, #104	; 0x68
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	20001718 	.word	0x20001718
 800be0c:	20001680 	.word	0x20001680
 800be10:	0800b44d 	.word	0x0800b44d

0800be14 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b09a      	sub	sp, #104	; 0x68
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800be20:	2300      	movs	r3, #0
 800be22:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be24:	f3ef 8310 	mrs	r3, PRIMASK
 800be28:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800be2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800be2e:	b672      	cpsid	i
    return(int_posture);
 800be30:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800be32:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Increment the number of messages sent to this queue.  */
    queue_ptr -> tx_queue_performance_messages_sent_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_SEND, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(source_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800be34:	4b7a      	ldr	r3, [pc, #488]	; (800c020 <_tx_queue_send+0x20c>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	64bb      	str	r3, [r7, #72]	; 0x48
 800be3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d06c      	beq.n	800bf1a <_tx_queue_send+0x106>
 800be40:	4b78      	ldr	r3, [pc, #480]	; (800c024 <_tx_queue_send+0x210>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d066      	beq.n	800bf1a <_tx_queue_send+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be4c:	f3ef 8305 	mrs	r3, IPSR
 800be50:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800be52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be54:	4b74      	ldr	r3, [pc, #464]	; (800c028 <_tx_queue_send+0x214>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4313      	orrs	r3, r2
 800be5a:	647b      	str	r3, [r7, #68]	; 0x44
 800be5c:	4b73      	ldr	r3, [pc, #460]	; (800c02c <_tx_queue_send+0x218>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	653b      	str	r3, [r7, #80]	; 0x50
 800be62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be64:	2b00      	cmp	r3, #0
 800be66:	d10b      	bne.n	800be80 <_tx_queue_send+0x6c>
 800be68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6c:	657b      	str	r3, [r7, #84]	; 0x54
 800be6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be72:	041a      	lsls	r2, r3, #16
 800be74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be76:	4313      	orrs	r3, r2
 800be78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be7c:	657b      	str	r3, [r7, #84]	; 0x54
 800be7e:	e00e      	b.n	800be9e <_tx_queue_send+0x8a>
 800be80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be82:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800be86:	d205      	bcs.n	800be94 <_tx_queue_send+0x80>
 800be88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be8a:	657b      	str	r3, [r7, #84]	; 0x54
 800be8c:	f04f 33ff 	mov.w	r3, #4294967295
 800be90:	653b      	str	r3, [r7, #80]	; 0x50
 800be92:	e004      	b.n	800be9e <_tx_queue_send+0x8a>
 800be94:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800be98:	653b      	str	r3, [r7, #80]	; 0x50
 800be9a:	2300      	movs	r3, #0
 800be9c:	657b      	str	r3, [r7, #84]	; 0x54
 800be9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bea6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bea8:	605a      	str	r2, [r3, #4]
 800beaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beac:	2245      	movs	r2, #69	; 0x45
 800beae:	609a      	str	r2, [r3, #8]
 800beb0:	4b5f      	ldr	r3, [pc, #380]	; (800c030 <_tx_queue_send+0x21c>)
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beb6:	60da      	str	r2, [r3, #12]
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bebc:	611a      	str	r2, [r3, #16]
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bec2:	615a      	str	r2, [r3, #20]
 800bec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	619a      	str	r2, [r3, #24]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	691a      	ldr	r2, [r3, #16]
 800bece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bed0:	61da      	str	r2, [r3, #28]
 800bed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bed4:	3320      	adds	r3, #32
 800bed6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bed8:	4b56      	ldr	r3, [pc, #344]	; (800c034 <_tx_queue_send+0x220>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bede:	429a      	cmp	r2, r3
 800bee0:	d314      	bcc.n	800bf0c <_tx_queue_send+0xf8>
 800bee2:	4b55      	ldr	r3, [pc, #340]	; (800c038 <_tx_queue_send+0x224>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bee8:	4a4d      	ldr	r2, [pc, #308]	; (800c020 <_tx_queue_send+0x20c>)
 800beea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beec:	6013      	str	r3, [r2, #0]
 800beee:	4b53      	ldr	r3, [pc, #332]	; (800c03c <_tx_queue_send+0x228>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bef4:	621a      	str	r2, [r3, #32]
 800bef6:	4b52      	ldr	r3, [pc, #328]	; (800c040 <_tx_queue_send+0x22c>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00d      	beq.n	800bf1a <_tx_queue_send+0x106>
 800befe:	4b50      	ldr	r3, [pc, #320]	; (800c040 <_tx_queue_send+0x22c>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a4e      	ldr	r2, [pc, #312]	; (800c03c <_tx_queue_send+0x228>)
 800bf04:	6812      	ldr	r2, [r2, #0]
 800bf06:	4610      	mov	r0, r2
 800bf08:	4798      	blx	r3
 800bf0a:	e006      	b.n	800bf1a <_tx_queue_send+0x106>
 800bf0c:	4a44      	ldr	r2, [pc, #272]	; (800c020 <_tx_queue_send+0x20c>)
 800bf0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf10:	6013      	str	r3, [r2, #0]
 800bf12:	4b4a      	ldr	r3, [pc, #296]	; (800c03c <_tx_queue_send+0x228>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf18:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	695b      	ldr	r3, [r3, #20]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 80ae 	beq.w	800c086 <_tx_queue_send+0x272>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800bf2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d13c      	bne.n	800bfaa <_tx_queue_send+0x196>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	695b      	ldr	r3, [r3, #20]
 800bf34:	1e5a      	subs	r2, r3, #1
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	1c5a      	adds	r2, r3, #1
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  queue_ptr -> tx_queue_write;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4c:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bf54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf56:	1d13      	adds	r3, r2, #4
 800bf58:	667b      	str	r3, [r7, #100]	; 0x64
 800bf5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf5c:	1d19      	adds	r1, r3, #4
 800bf5e:	6639      	str	r1, [r7, #96]	; 0x60
 800bf60:	6812      	ldr	r2, [r2, #0]
 800bf62:	601a      	str	r2, [r3, #0]
 800bf64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d90e      	bls.n	800bf88 <_tx_queue_send+0x174>
 800bf6a:	e007      	b.n	800bf7c <_tx_queue_send+0x168>
 800bf6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf6e:	1d13      	adds	r3, r2, #4
 800bf70:	667b      	str	r3, [r7, #100]	; 0x64
 800bf72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf74:	1d19      	adds	r1, r3, #4
 800bf76:	6639      	str	r1, [r7, #96]	; 0x60
 800bf78:	6812      	ldr	r2, [r2, #0]
 800bf7a:	601a      	str	r2, [r3, #0]
 800bf7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf7e:	3b01      	subs	r3, #1
 800bf80:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1f1      	bne.n	800bf6c <_tx_queue_send+0x158>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	69db      	ldr	r3, [r3, #28]
 800bf8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d102      	bne.n	800bf98 <_tx_queue_send+0x184>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	663b      	str	r3, [r7, #96]	; 0x60
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf9c:	625a      	str	r2, [r3, #36]	; 0x24
 800bf9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa4:	f383 8810 	msr	PRIMASK, r3
}
 800bfa8:	e0db      	b.n	800c162 <_tx_queue_send+0x34e>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfae:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800bfb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfb2:	3b01      	subs	r3, #1
 800bfb4:	643b      	str	r3, [r7, #64]	; 0x40
            if (suspended_count == TX_NO_SUSPENSIONS)
 800bfb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d103      	bne.n	800bfc4 <_tx_queue_send+0x1b0>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	629a      	str	r2, [r3, #40]	; 0x28
 800bfc2:	e012      	b.n	800bfea <_tx_queue_send+0x1d6>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800bfc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bfcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfd0:	63bb      	str	r3, [r7, #56]	; 0x38
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfd6:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bfd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfdc:	637b      	str	r3, [r7, #52]	; 0x34
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfe2:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800bfe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfe8:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfee:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bff2:	2200      	movs	r2, #0
 800bff4:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bffe:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c006:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c008:	1d13      	adds	r3, r2, #4
 800c00a:	667b      	str	r3, [r7, #100]	; 0x64
 800c00c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c00e:	1d19      	adds	r1, r3, #4
 800c010:	6639      	str	r1, [r7, #96]	; 0x60
 800c012:	6812      	ldr	r2, [r2, #0]
 800c014:	601a      	str	r2, [r3, #0]
 800c016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d921      	bls.n	800c060 <_tx_queue_send+0x24c>
 800c01c:	e01a      	b.n	800c054 <_tx_queue_send+0x240>
 800c01e:	bf00      	nop
 800c020:	20001c9c 	.word	0x20001c9c
 800c024:	20001ca0 	.word	0x20001ca0
 800c028:	2000000c 	.word	0x2000000c
 800c02c:	20001680 	.word	0x20001680
 800c030:	e0001004 	.word	0xe0001004
 800c034:	20001c98 	.word	0x20001c98
 800c038:	20001c94 	.word	0x20001c94
 800c03c:	20001c88 	.word	0x20001c88
 800c040:	20001ca4 	.word	0x20001ca4
 800c044:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c046:	1d13      	adds	r3, r2, #4
 800c048:	667b      	str	r3, [r7, #100]	; 0x64
 800c04a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c04c:	1d19      	adds	r1, r3, #4
 800c04e:	6639      	str	r1, [r7, #96]	; 0x60
 800c050:	6812      	ldr	r2, [r2, #0]
 800c052:	601a      	str	r2, [r3, #0]
 800c054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c056:	3b01      	subs	r3, #1
 800c058:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c05a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1f1      	bne.n	800c044 <_tx_queue_send+0x230>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c062:	2200      	movs	r2, #0
 800c064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c068:	4b40      	ldr	r3, [pc, #256]	; (800c16c <_tx_queue_send+0x358>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	3301      	adds	r3, #1
 800c06e:	4a3f      	ldr	r2, [pc, #252]	; (800c16c <_tx_queue_send+0x358>)
 800c070:	6013      	str	r3, [r2, #0]
 800c072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c074:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c076:	6a3b      	ldr	r3, [r7, #32]
 800c078:	f383 8810 	msr	PRIMASK, r3
}
 800c07c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800c07e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c080:	f000 ff26 	bl	800ced0 <_tx_thread_system_resume>
 800c084:	e06d      	b.n	800c162 <_tx_queue_send+0x34e>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d062      	beq.n	800c152 <_tx_queue_send+0x33e>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c08c:	4b37      	ldr	r3, [pc, #220]	; (800c16c <_tx_queue_send+0x358>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d008      	beq.n	800c0a6 <_tx_queue_send+0x292>
 800c094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c096:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	f383 8810 	msr	PRIMASK, r3
}
 800c09e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800c0a0:	230b      	movs	r3, #11
 800c0a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0a4:	e05d      	b.n	800c162 <_tx_queue_send+0x34e>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c0a6:	4b32      	ldr	r3, [pc, #200]	; (800c170 <_tx_queue_send+0x35c>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800c0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ae:	4a31      	ldr	r2, [pc, #196]	; (800c174 <_tx_queue_send+0x360>)
 800c0b0:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800c0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800c0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800c0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c0cc:	1c5a      	adds	r2, r3, #1
 800c0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c0d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d109      	bne.n	800c0ee <_tx_queue_send+0x2da>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0de:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0e4:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0ea:	675a      	str	r2, [r3, #116]	; 0x74
 800c0ec:	e011      	b.n	800c112 <_tx_queue_send+0x2fe>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f2:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0f8:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0fe:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c104:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c108:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c10a:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c110:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800c112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c114:	1c5a      	adds	r2, r3, #1
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800c11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11c:	2205      	movs	r2, #5
 800c11e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c122:	2201      	movs	r2, #1
 800c124:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c12c:	4b0f      	ldr	r3, [pc, #60]	; (800c16c <_tx_queue_send+0x358>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	3301      	adds	r3, #1
 800c132:	4a0e      	ldr	r2, [pc, #56]	; (800c16c <_tx_queue_send+0x358>)
 800c134:	6013      	str	r3, [r2, #0]
 800c136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c138:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	f383 8810 	msr	PRIMASK, r3
}
 800c140:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c142:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c144:	f001 f87e 	bl	800d244 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c14a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c14e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c150:	e007      	b.n	800c162 <_tx_queue_send+0x34e>
 800c152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c154:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	f383 8810 	msr	PRIMASK, r3
}
 800c15c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800c15e:	230b      	movs	r3, #11
 800c160:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800c162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800c164:	4618      	mov	r0, r3
 800c166:	3768      	adds	r7, #104	; 0x68
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	20001718 	.word	0x20001718
 800c170:	20001680 	.word	0x20001680
 800c174:	0800b44d 	.word	0x0800b44d

0800c178 <_tx_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b092      	sub	sp, #72	; 0x48
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c182:	2300      	movs	r3, #0
 800c184:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c186:	f3ef 8310 	mrs	r3, PRIMASK
 800c18a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c18c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c18e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c190:	b672      	cpsid	i
    return(int_posture);
 800c192:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800c194:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of puts on this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_put_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CEILING_PUT, semaphore_ptr, semaphore_ptr -> tx_semaphore_count, semaphore_ptr -> tx_semaphore_suspended_count, ceiling, TX_TRACE_SEMAPHORE_EVENTS)
 800c196:	4b67      	ldr	r3, [pc, #412]	; (800c334 <_tx_semaphore_ceiling_put+0x1bc>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	637b      	str	r3, [r7, #52]	; 0x34
 800c19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d06d      	beq.n	800c27e <_tx_semaphore_ceiling_put+0x106>
 800c1a2:	4b65      	ldr	r3, [pc, #404]	; (800c338 <_tx_semaphore_ceiling_put+0x1c0>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d067      	beq.n	800c27e <_tx_semaphore_ceiling_put+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1ae:	f3ef 8305 	mrs	r3, IPSR
 800c1b2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c1b4:	697a      	ldr	r2, [r7, #20]
 800c1b6:	4b61      	ldr	r3, [pc, #388]	; (800c33c <_tx_semaphore_ceiling_put+0x1c4>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	633b      	str	r3, [r7, #48]	; 0x30
 800c1be:	4b60      	ldr	r3, [pc, #384]	; (800c340 <_tx_semaphore_ceiling_put+0x1c8>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10b      	bne.n	800c1e2 <_tx_semaphore_ceiling_put+0x6a>
 800c1ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ce:	643b      	str	r3, [r7, #64]	; 0x40
 800c1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1d4:	041a      	lsls	r2, r3, #16
 800c1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1de:	643b      	str	r3, [r7, #64]	; 0x40
 800c1e0:	e00e      	b.n	800c200 <_tx_semaphore_ceiling_put+0x88>
 800c1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c1e8:	d205      	bcs.n	800c1f6 <_tx_semaphore_ceiling_put+0x7e>
 800c1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ec:	643b      	str	r3, [r7, #64]	; 0x40
 800c1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1f4:	e004      	b.n	800c200 <_tx_semaphore_ceiling_put+0x88>
 800c1f6:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	643b      	str	r3, [r7, #64]	; 0x40
 800c200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c204:	601a      	str	r2, [r3, #0]
 800c206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c208:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c20a:	605a      	str	r2, [r3, #4]
 800c20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c20e:	2250      	movs	r2, #80	; 0x50
 800c210:	609a      	str	r2, [r3, #8]
 800c212:	4b4c      	ldr	r3, [pc, #304]	; (800c344 <_tx_semaphore_ceiling_put+0x1cc>)
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c218:	60da      	str	r2, [r3, #12]
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c21e:	611a      	str	r2, [r3, #16]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	689a      	ldr	r2, [r3, #8]
 800c224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c226:	615a      	str	r2, [r3, #20]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	691a      	ldr	r2, [r3, #16]
 800c22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22e:	619a      	str	r2, [r3, #24]
 800c230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c232:	683a      	ldr	r2, [r7, #0]
 800c234:	61da      	str	r2, [r3, #28]
 800c236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c238:	3320      	adds	r3, #32
 800c23a:	637b      	str	r3, [r7, #52]	; 0x34
 800c23c:	4b42      	ldr	r3, [pc, #264]	; (800c348 <_tx_semaphore_ceiling_put+0x1d0>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c242:	429a      	cmp	r2, r3
 800c244:	d314      	bcc.n	800c270 <_tx_semaphore_ceiling_put+0xf8>
 800c246:	4b41      	ldr	r3, [pc, #260]	; (800c34c <_tx_semaphore_ceiling_put+0x1d4>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	637b      	str	r3, [r7, #52]	; 0x34
 800c24c:	4a39      	ldr	r2, [pc, #228]	; (800c334 <_tx_semaphore_ceiling_put+0x1bc>)
 800c24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c250:	6013      	str	r3, [r2, #0]
 800c252:	4b3f      	ldr	r3, [pc, #252]	; (800c350 <_tx_semaphore_ceiling_put+0x1d8>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c258:	621a      	str	r2, [r3, #32]
 800c25a:	4b3e      	ldr	r3, [pc, #248]	; (800c354 <_tx_semaphore_ceiling_put+0x1dc>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00d      	beq.n	800c27e <_tx_semaphore_ceiling_put+0x106>
 800c262:	4b3c      	ldr	r3, [pc, #240]	; (800c354 <_tx_semaphore_ceiling_put+0x1dc>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4a3a      	ldr	r2, [pc, #232]	; (800c350 <_tx_semaphore_ceiling_put+0x1d8>)
 800c268:	6812      	ldr	r2, [r2, #0]
 800c26a:	4610      	mov	r0, r2
 800c26c:	4798      	blx	r3
 800c26e:	e006      	b.n	800c27e <_tx_semaphore_ceiling_put+0x106>
 800c270:	4a30      	ldr	r2, [pc, #192]	; (800c334 <_tx_semaphore_ceiling_put+0x1bc>)
 800c272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c274:	6013      	str	r3, [r2, #0]
 800c276:	4b36      	ldr	r3, [pc, #216]	; (800c350 <_tx_semaphore_ceiling_put+0x1d8>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c27c:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_CEILING_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	691b      	ldr	r3, [r3, #16]
 800c282:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800c284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c286:	2b00      	cmp	r3, #0
 800c288:	d11b      	bne.n	800c2c2 <_tx_semaphore_ceiling_put+0x14a>
    {

        /* Determine if the ceiling has been exceeded.  */
        if (semaphore_ptr -> tx_semaphore_count >= ceiling)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	683a      	ldr	r2, [r7, #0]
 800c290:	429a      	cmp	r2, r3
 800c292:	d808      	bhi.n	800c2a6 <_tx_semaphore_ceiling_put+0x12e>
 800c294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c296:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	f383 8810 	msr	PRIMASK, r3
}
 800c29e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Return an error.  */
            status =  TX_CEILING_EXCEEDED;
 800c2a0:	2321      	movs	r3, #33	; 0x21
 800c2a2:	647b      	str	r3, [r7, #68]	; 0x44
 800c2a4:	e041      	b.n	800c32a <_tx_semaphore_ceiling_put+0x1b2>
        }
        else
        {

            /* Increment the semaphore count.  */
            semaphore_ptr -> tx_semaphore_count++;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	689b      	ldr	r3, [r3, #8]
 800c2aa:	1c5a      	adds	r2, r3, #1
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	609a      	str	r2, [r3, #8]
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f383 8810 	msr	PRIMASK, r3
}
 800c2ba:	bf00      	nop
                (semaphore_put_notify)(semaphore_ptr);
            }
#endif

            /* Return successful completion status.  */
            status =  TX_SUCCESS;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	647b      	str	r3, [r7, #68]	; 0x44
 800c2c0:	e033      	b.n	800c32a <_tx_semaphore_ceiling_put+0x1b2>
    {

        /* Remove the suspended thread from the list.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	62bb      	str	r3, [r7, #40]	; 0x28

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800c2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d103      	bne.n	800c2dc <_tx_semaphore_ceiling_put+0x164>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	60da      	str	r2, [r3, #12]
 800c2da:	e00e      	b.n	800c2fa <_tx_semaphore_ceiling_put+0x182>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2e0:	627b      	str	r3, [r7, #36]	; 0x24
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2e6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2ec:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f0:	6a3a      	ldr	r2, [r7, #32]
 800c2f2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c2f4:	6a3b      	ldr	r3, [r7, #32]
 800c2f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2fe:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c302:	2200      	movs	r2, #0
 800c304:	669a      	str	r2, [r3, #104]	; 0x68

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c308:	2200      	movs	r2, #0
 800c30a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800c30e:	4b12      	ldr	r3, [pc, #72]	; (800c358 <_tx_semaphore_ceiling_put+0x1e0>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3301      	adds	r3, #1
 800c314:	4a10      	ldr	r2, [pc, #64]	; (800c358 <_tx_semaphore_ceiling_put+0x1e0>)
 800c316:	6013      	str	r3, [r2, #0]
 800c318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	f383 8810 	msr	PRIMASK, r3
}
 800c322:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c326:	f000 fdd3 	bl	800ced0 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(status);
 800c32a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3748      	adds	r7, #72	; 0x48
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	20001c9c 	.word	0x20001c9c
 800c338:	20001ca0 	.word	0x20001ca0
 800c33c:	2000000c 	.word	0x2000000c
 800c340:	20001680 	.word	0x20001680
 800c344:	e0001004 	.word	0xe0001004
 800c348:	20001c98 	.word	0x20001c98
 800c34c:	20001c94 	.word	0x20001c94
 800c350:	20001c88 	.word	0x20001c88
 800c354:	20001ca4 	.word	0x20001ca4
 800c358:	20001718 	.word	0x20001718

0800c35c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b08e      	sub	sp, #56	; 0x38
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c366:	f3ef 8310 	mrs	r3, PRIMASK
 800c36a:	623b      	str	r3, [r7, #32]
    return(posture);
 800c36c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c36e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c370:	b672      	cpsid	i
    return(int_posture);
 800c372:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800c374:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c37a:	4a33      	ldr	r2, [pc, #204]	; (800c448 <_tx_semaphore_cleanup+0xec>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d158      	bne.n	800c432 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c386:	683a      	ldr	r2, [r7, #0]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d152      	bne.n	800c432 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c390:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	2b00      	cmp	r3, #0
 800c396:	d04c      	beq.n	800c432 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800c398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4a2b      	ldr	r2, [pc, #172]	; (800c44c <_tx_semaphore_cleanup+0xf0>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d147      	bne.n	800c432 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d043      	beq.n	800c432 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800c3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b2:	691b      	ldr	r3, [r3, #16]
 800c3b4:	1e5a      	subs	r2, r3, #1
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b8:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	691b      	ldr	r3, [r3, #16]
 800c3be:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d103      	bne.n	800c3ce <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	60da      	str	r2, [r3, #12]
 800c3cc:	e013      	b.n	800c3f6 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3d2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3d8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3de:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3e4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d102      	bne.n	800c3f6 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3f4:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3fa:	2b06      	cmp	r3, #6
 800c3fc:	d119      	bne.n	800c432 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	220d      	movs	r2, #13
 800c402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c406:	4b12      	ldr	r3, [pc, #72]	; (800c450 <_tx_semaphore_cleanup+0xf4>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3301      	adds	r3, #1
 800c40c:	4a10      	ldr	r2, [pc, #64]	; (800c450 <_tx_semaphore_cleanup+0xf4>)
 800c40e:	6013      	str	r3, [r2, #0]
 800c410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c412:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	f383 8810 	msr	PRIMASK, r3
}
 800c41a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 fd57 	bl	800ced0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c422:	f3ef 8310 	mrs	r3, PRIMASK
 800c426:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c428:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c42a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c42c:	b672      	cpsid	i
    return(int_posture);
 800c42e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c430:	637b      	str	r3, [r7, #52]	; 0x34
 800c432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c434:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f383 8810 	msr	PRIMASK, r3
}
 800c43c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c43e:	bf00      	nop
 800c440:	3738      	adds	r7, #56	; 0x38
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	0800c35d 	.word	0x0800c35d
 800c44c:	53454d41 	.word	0x53454d41
 800c450:	20001718 	.word	0x20001718

0800c454 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b092      	sub	sp, #72	; 0x48
 800c458:	af02      	add	r7, sp, #8
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800c460:	221c      	movs	r2, #28
 800c462:	2100      	movs	r1, #0
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f008 f939 	bl	80146dc <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c476:	f3ef 8310 	mrs	r3, PRIMASK
 800c47a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c47e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c480:	b672      	cpsid	i
    return(int_posture);
 800c482:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800c484:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	4a56      	ldr	r2, [pc, #344]	; (800c5e4 <_tx_semaphore_create+0x190>)
 800c48a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800c48c:	4b56      	ldr	r3, [pc, #344]	; (800c5e8 <_tx_semaphore_create+0x194>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d109      	bne.n	800c4a8 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800c494:	4a55      	ldr	r2, [pc, #340]	; (800c5ec <_tx_semaphore_create+0x198>)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	619a      	str	r2, [r3, #24]
 800c4a6:	e011      	b.n	800c4cc <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800c4a8:	4b50      	ldr	r3, [pc, #320]	; (800c5ec <_tx_semaphore_create+0x198>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	617b      	str	r3, [r7, #20]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	699b      	ldr	r3, [r3, #24]
 800c4b2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4c4:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800c4cc:	4b46      	ldr	r3, [pc, #280]	; (800c5e8 <_tx_semaphore_create+0x194>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	4a45      	ldr	r2, [pc, #276]	; (800c5e8 <_tx_semaphore_create+0x194>)
 800c4d4:	6013      	str	r3, [r2, #0]

    /* Optional semaphore create extended processing.  */
    TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, name_ptr, initial_count, 0)
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	68ba      	ldr	r2, [r7, #8]
 800c4de:	68f9      	ldr	r1, [r7, #12]
 800c4e0:	2004      	movs	r0, #4
 800c4e2:	f001 fc17 	bl	800dd14 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CREATE, semaphore_ptr, initial_count, TX_POINTER_TO_ULONG_CONVERT(&next_semaphore), 0, TX_TRACE_SEMAPHORE_EVENTS)
 800c4e6:	4b42      	ldr	r3, [pc, #264]	; (800c5f0 <_tx_semaphore_create+0x19c>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d06c      	beq.n	800c5cc <_tx_semaphore_create+0x178>
 800c4f2:	4b40      	ldr	r3, [pc, #256]	; (800c5f4 <_tx_semaphore_create+0x1a0>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d066      	beq.n	800c5cc <_tx_semaphore_create+0x178>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c4fe:	f3ef 8305 	mrs	r3, IPSR
 800c502:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c504:	69fa      	ldr	r2, [r7, #28]
 800c506:	4b3c      	ldr	r3, [pc, #240]	; (800c5f8 <_tx_semaphore_create+0x1a4>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4313      	orrs	r3, r2
 800c50c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c50e:	4b3b      	ldr	r3, [pc, #236]	; (800c5fc <_tx_semaphore_create+0x1a8>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	63bb      	str	r3, [r7, #56]	; 0x38
 800c514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10b      	bne.n	800c532 <_tx_semaphore_create+0xde>
 800c51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c524:	041a      	lsls	r2, r3, #16
 800c526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c528:	4313      	orrs	r3, r2
 800c52a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c52e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c530:	e00e      	b.n	800c550 <_tx_semaphore_create+0xfc>
 800c532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c534:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c538:	d205      	bcs.n	800c546 <_tx_semaphore_create+0xf2>
 800c53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c53e:	f04f 33ff 	mov.w	r3, #4294967295
 800c542:	63bb      	str	r3, [r7, #56]	; 0x38
 800c544:	e004      	b.n	800c550 <_tx_semaphore_create+0xfc>
 800c546:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c54a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c54c:	2300      	movs	r3, #0
 800c54e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c554:	601a      	str	r2, [r3, #0]
 800c556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c558:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c55a:	605a      	str	r2, [r3, #4]
 800c55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55e:	2251      	movs	r2, #81	; 0x51
 800c560:	609a      	str	r2, [r3, #8]
 800c562:	4b27      	ldr	r3, [pc, #156]	; (800c600 <_tx_semaphore_create+0x1ac>)
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c568:	60da      	str	r2, [r3, #12]
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56e:	611a      	str	r2, [r3, #16]
 800c570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	615a      	str	r2, [r3, #20]
 800c576:	f107 0214 	add.w	r2, r7, #20
 800c57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57c:	619a      	str	r2, [r3, #24]
 800c57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c580:	2200      	movs	r2, #0
 800c582:	61da      	str	r2, [r3, #28]
 800c584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c586:	3320      	adds	r3, #32
 800c588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c58a:	4b1e      	ldr	r3, [pc, #120]	; (800c604 <_tx_semaphore_create+0x1b0>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c590:	429a      	cmp	r2, r3
 800c592:	d314      	bcc.n	800c5be <_tx_semaphore_create+0x16a>
 800c594:	4b1c      	ldr	r3, [pc, #112]	; (800c608 <_tx_semaphore_create+0x1b4>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c59a:	4a15      	ldr	r2, [pc, #84]	; (800c5f0 <_tx_semaphore_create+0x19c>)
 800c59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59e:	6013      	str	r3, [r2, #0]
 800c5a0:	4b1a      	ldr	r3, [pc, #104]	; (800c60c <_tx_semaphore_create+0x1b8>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5a6:	621a      	str	r2, [r3, #32]
 800c5a8:	4b19      	ldr	r3, [pc, #100]	; (800c610 <_tx_semaphore_create+0x1bc>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d00d      	beq.n	800c5cc <_tx_semaphore_create+0x178>
 800c5b0:	4b17      	ldr	r3, [pc, #92]	; (800c610 <_tx_semaphore_create+0x1bc>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a15      	ldr	r2, [pc, #84]	; (800c60c <_tx_semaphore_create+0x1b8>)
 800c5b6:	6812      	ldr	r2, [r2, #0]
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	4798      	blx	r3
 800c5bc:	e006      	b.n	800c5cc <_tx_semaphore_create+0x178>
 800c5be:	4a0c      	ldr	r2, [pc, #48]	; (800c5f0 <_tx_semaphore_create+0x19c>)
 800c5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	4b11      	ldr	r3, [pc, #68]	; (800c60c <_tx_semaphore_create+0x1b8>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5ca:	621a      	str	r2, [r3, #32]
 800c5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ce:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	f383 8810 	msr	PRIMASK, r3
}
 800c5d6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3740      	adds	r7, #64	; 0x40
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	53454d41 	.word	0x53454d41
 800c5e8:	2000164c 	.word	0x2000164c
 800c5ec:	20001648 	.word	0x20001648
 800c5f0:	20001c9c 	.word	0x20001c9c
 800c5f4:	20001ca0 	.word	0x20001ca0
 800c5f8:	2000000c 	.word	0x2000000c
 800c5fc:	20001680 	.word	0x20001680
 800c600:	e0001004 	.word	0xe0001004
 800c604:	20001c98 	.word	0x20001c98
 800c608:	20001c94 	.word	0x20001c94
 800c60c:	20001c88 	.word	0x20001c88
 800c610:	20001ca4 	.word	0x20001ca4

0800c614 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b092      	sub	sp, #72	; 0x48
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c61e:	2300      	movs	r3, #0
 800c620:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c622:	f3ef 8310 	mrs	r3, PRIMASK
 800c626:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c62a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c62c:	b672      	cpsid	i
    return(int_posture);
 800c62e:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800c630:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of attempts to get this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_get_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_GET, semaphore_ptr, wait_option, semaphore_ptr -> tx_semaphore_count, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_SEMAPHORE_EVENTS)
 800c632:	4b78      	ldr	r3, [pc, #480]	; (800c814 <_tx_semaphore_get+0x200>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	637b      	str	r3, [r7, #52]	; 0x34
 800c638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d06d      	beq.n	800c71a <_tx_semaphore_get+0x106>
 800c63e:	4b76      	ldr	r3, [pc, #472]	; (800c818 <_tx_semaphore_get+0x204>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c646:	2b00      	cmp	r3, #0
 800c648:	d067      	beq.n	800c71a <_tx_semaphore_get+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c64a:	f3ef 8305 	mrs	r3, IPSR
 800c64e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c650:	69fa      	ldr	r2, [r7, #28]
 800c652:	4b72      	ldr	r3, [pc, #456]	; (800c81c <_tx_semaphore_get+0x208>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4313      	orrs	r3, r2
 800c658:	633b      	str	r3, [r7, #48]	; 0x30
 800c65a:	4b71      	ldr	r3, [pc, #452]	; (800c820 <_tx_semaphore_get+0x20c>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	2b00      	cmp	r3, #0
 800c664:	d10b      	bne.n	800c67e <_tx_semaphore_get+0x6a>
 800c666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66a:	643b      	str	r3, [r7, #64]	; 0x40
 800c66c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c66e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c670:	041a      	lsls	r2, r3, #16
 800c672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c674:	4313      	orrs	r3, r2
 800c676:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c67a:	643b      	str	r3, [r7, #64]	; 0x40
 800c67c:	e00e      	b.n	800c69c <_tx_semaphore_get+0x88>
 800c67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c680:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c684:	d205      	bcs.n	800c692 <_tx_semaphore_get+0x7e>
 800c686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c688:	643b      	str	r3, [r7, #64]	; 0x40
 800c68a:	f04f 33ff 	mov.w	r3, #4294967295
 800c68e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c690:	e004      	b.n	800c69c <_tx_semaphore_get+0x88>
 800c692:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c696:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c698:	2300      	movs	r3, #0
 800c69a:	643b      	str	r3, [r7, #64]	; 0x40
 800c69c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a0:	601a      	str	r2, [r3, #0]
 800c6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6a6:	605a      	str	r2, [r3, #4]
 800c6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6aa:	2253      	movs	r2, #83	; 0x53
 800c6ac:	609a      	str	r2, [r3, #8]
 800c6ae:	4b5d      	ldr	r3, [pc, #372]	; (800c824 <_tx_semaphore_get+0x210>)
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b4:	60da      	str	r2, [r3, #12]
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ba:	611a      	str	r2, [r3, #16]
 800c6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6be:	683a      	ldr	r2, [r7, #0]
 800c6c0:	615a      	str	r2, [r3, #20]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	689a      	ldr	r2, [r3, #8]
 800c6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c8:	619a      	str	r2, [r3, #24]
 800c6ca:	f107 0208 	add.w	r2, r7, #8
 800c6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d0:	61da      	str	r2, [r3, #28]
 800c6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d4:	3320      	adds	r3, #32
 800c6d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c6d8:	4b53      	ldr	r3, [pc, #332]	; (800c828 <_tx_semaphore_get+0x214>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d314      	bcc.n	800c70c <_tx_semaphore_get+0xf8>
 800c6e2:	4b52      	ldr	r3, [pc, #328]	; (800c82c <_tx_semaphore_get+0x218>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	637b      	str	r3, [r7, #52]	; 0x34
 800c6e8:	4a4a      	ldr	r2, [pc, #296]	; (800c814 <_tx_semaphore_get+0x200>)
 800c6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ec:	6013      	str	r3, [r2, #0]
 800c6ee:	4b50      	ldr	r3, [pc, #320]	; (800c830 <_tx_semaphore_get+0x21c>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6f4:	621a      	str	r2, [r3, #32]
 800c6f6:	4b4f      	ldr	r3, [pc, #316]	; (800c834 <_tx_semaphore_get+0x220>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00d      	beq.n	800c71a <_tx_semaphore_get+0x106>
 800c6fe:	4b4d      	ldr	r3, [pc, #308]	; (800c834 <_tx_semaphore_get+0x220>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a4b      	ldr	r2, [pc, #300]	; (800c830 <_tx_semaphore_get+0x21c>)
 800c704:	6812      	ldr	r2, [r2, #0]
 800c706:	4610      	mov	r0, r2
 800c708:	4798      	blx	r3
 800c70a:	e006      	b.n	800c71a <_tx_semaphore_get+0x106>
 800c70c:	4a41      	ldr	r2, [pc, #260]	; (800c814 <_tx_semaphore_get+0x200>)
 800c70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c710:	6013      	str	r3, [r2, #0]
 800c712:	4b47      	ldr	r3, [pc, #284]	; (800c830 <_tx_semaphore_get+0x21c>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c718:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00a      	beq.n	800c738 <_tx_semaphore_get+0x124>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	689b      	ldr	r3, [r3, #8]
 800c726:	1e5a      	subs	r2, r3, #1
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	609a      	str	r2, [r3, #8]
 800c72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	f383 8810 	msr	PRIMASK, r3
}
 800c736:	e068      	b.n	800c80a <_tx_semaphore_get+0x1f6>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d05d      	beq.n	800c7fa <_tx_semaphore_get+0x1e6>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c73e:	4b3e      	ldr	r3, [pc, #248]	; (800c838 <_tx_semaphore_get+0x224>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d008      	beq.n	800c758 <_tx_semaphore_get+0x144>
 800c746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c748:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	f383 8810 	msr	PRIMASK, r3
}
 800c750:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800c752:	230d      	movs	r3, #13
 800c754:	647b      	str	r3, [r7, #68]	; 0x44
 800c756:	e058      	b.n	800c80a <_tx_semaphore_get+0x1f6>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c758:	4b31      	ldr	r3, [pc, #196]	; (800c820 <_tx_semaphore_get+0x20c>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	60bb      	str	r3, [r7, #8]

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	4a36      	ldr	r2, [pc, #216]	; (800c83c <_tx_semaphore_get+0x228>)
 800c762:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c770:	3201      	adds	r2, #1
 800c772:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d109      	bne.n	800c792 <_tx_semaphore_get+0x17e>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800c77e:	68ba      	ldr	r2, [r7, #8]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	68ba      	ldr	r2, [r7, #8]
 800c78e:	675a      	str	r2, [r3, #116]	; 0x74
 800c790:	e011      	b.n	800c7b6 <_tx_semaphore_get+0x1a2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	68db      	ldr	r3, [r3, #12]
 800c796:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c79c:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7a2:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7a8:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ae:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b4:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	2206      	movs	r2, #6
 800c7c4:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	683a      	ldr	r2, [r7, #0]
 800c7d0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c7d2:	4b19      	ldr	r3, [pc, #100]	; (800c838 <_tx_semaphore_get+0x224>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	4a17      	ldr	r2, [pc, #92]	; (800c838 <_tx_semaphore_get+0x224>)
 800c7da:	6013      	str	r3, [r2, #0]
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7de:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	f383 8810 	msr	PRIMASK, r3
}
 800c7e6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f000 fd2a 	bl	800d244 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7f6:	647b      	str	r3, [r7, #68]	; 0x44
 800c7f8:	e007      	b.n	800c80a <_tx_semaphore_get+0x1f6>
 800c7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f383 8810 	msr	PRIMASK, r3
}
 800c804:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800c806:	230d      	movs	r3, #13
 800c808:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800c80a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3748      	adds	r7, #72	; 0x48
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	20001c9c 	.word	0x20001c9c
 800c818:	20001ca0 	.word	0x20001ca0
 800c81c:	2000000c 	.word	0x2000000c
 800c820:	20001680 	.word	0x20001680
 800c824:	e0001004 	.word	0xe0001004
 800c828:	20001c98 	.word	0x20001c98
 800c82c:	20001c94 	.word	0x20001c94
 800c830:	20001c88 	.word	0x20001c88
 800c834:	20001ca4 	.word	0x20001ca4
 800c838:	20001718 	.word	0x20001718
 800c83c:	0800c35d 	.word	0x0800c35d

0800c840 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b09a      	sub	sp, #104	; 0x68
 800c844:	af02      	add	r7, sp, #8
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
 800c84c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800c84e:	2300      	movs	r3, #0
 800c850:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800c852:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c854:	21ef      	movs	r1, #239	; 0xef
 800c856:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c858:	f007 ff40 	bl	80146dc <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800c85c:	22b0      	movs	r2, #176	; 0xb0
 800c85e:	2100      	movs	r1, #0
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f007 ff3b 	bl	80146dc <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	683a      	ldr	r2, [r7, #0]
 800c876:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c87c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c882:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c888:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c88e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c896:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c89c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2220      	movs	r2, #32
 800c8a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800c8a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800c8aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8b0:	4413      	add	r3, r2
 800c8b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8b8:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800c8ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c8bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d007      	beq.n	800c8d2 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800c8d0:	e006      	b.n	800c8e0 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c8d6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c8dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2203      	movs	r2, #3
 800c8e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	4a86      	ldr	r2, [pc, #536]	; (800cb04 <_tx_thread_create+0x2c4>)
 800c8ea:	655a      	str	r2, [r3, #84]	; 0x54
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800c8f2:	4985      	ldr	r1, [pc, #532]	; (800cb08 <_tx_thread_create+0x2c8>)
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	f7f3 fd69 	bl	80003cc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8fa:	f3ef 8310 	mrs	r3, PRIMASK
 800c8fe:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800c900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800c902:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800c904:	b672      	cpsid	i
    return(int_posture);
 800c906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800c908:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	4a7f      	ldr	r2, [pc, #508]	; (800cb0c <_tx_thread_create+0x2cc>)
 800c90e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800c910:	4b7f      	ldr	r3, [pc, #508]	; (800cb10 <_tx_thread_create+0x2d0>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d10b      	bne.n	800c930 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800c918:	4a7e      	ldr	r2, [pc, #504]	; (800cb14 <_tx_thread_create+0x2d4>)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800c92e:	e016      	b.n	800c95e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800c930:	4b78      	ldr	r3, [pc, #480]	; (800cb14 <_tx_thread_create+0x2d4>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 800c936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c93c:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800c93e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800c946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c95a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800c95e:	4b6c      	ldr	r3, [pc, #432]	; (800cb10 <_tx_thread_create+0x2d0>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	3301      	adds	r3, #1
 800c964:	4a6a      	ldr	r2, [pc, #424]	; (800cb10 <_tx_thread_create+0x2d0>)
 800c966:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 800c968:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c96a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c96c:	9300      	str	r3, [sp, #0]
 800c96e:	4613      	mov	r3, r2
 800c970:	68ba      	ldr	r2, [r7, #8]
 800c972:	68f9      	ldr	r1, [r7, #12]
 800c974:	2001      	movs	r0, #1
 800c976:	f001 f9cd 	bl	800dd14 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 800c97a:	4b67      	ldr	r3, [pc, #412]	; (800cb18 <_tx_thread_create+0x2d8>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c982:	2b00      	cmp	r3, #0
 800c984:	d06b      	beq.n	800ca5e <_tx_thread_create+0x21e>
 800c986:	4b65      	ldr	r3, [pc, #404]	; (800cb1c <_tx_thread_create+0x2dc>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d065      	beq.n	800ca5e <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c992:	f3ef 8305 	mrs	r3, IPSR
 800c996:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800c998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c99a:	4b61      	ldr	r3, [pc, #388]	; (800cb20 <_tx_thread_create+0x2e0>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9a2:	4b60      	ldr	r3, [pc, #384]	; (800cb24 <_tx_thread_create+0x2e4>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	653b      	str	r3, [r7, #80]	; 0x50
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10b      	bne.n	800c9c6 <_tx_thread_create+0x186>
 800c9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b2:	657b      	str	r3, [r7, #84]	; 0x54
 800c9b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9b8:	041a      	lsls	r2, r3, #16
 800c9ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c9c2:	657b      	str	r3, [r7, #84]	; 0x54
 800c9c4:	e00e      	b.n	800c9e4 <_tx_thread_create+0x1a4>
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c9cc:	d205      	bcs.n	800c9da <_tx_thread_create+0x19a>
 800c9ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9d0:	657b      	str	r3, [r7, #84]	; 0x54
 800c9d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d6:	653b      	str	r3, [r7, #80]	; 0x50
 800c9d8:	e004      	b.n	800c9e4 <_tx_thread_create+0x1a4>
 800c9da:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c9de:	653b      	str	r3, [r7, #80]	; 0x50
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	657b      	str	r3, [r7, #84]	; 0x54
 800c9e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e8:	601a      	str	r2, [r3, #0]
 800c9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c9ee:	605a      	str	r2, [r3, #4]
 800c9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f2:	2264      	movs	r2, #100	; 0x64
 800c9f4:	609a      	str	r2, [r3, #8]
 800c9f6:	4b4c      	ldr	r3, [pc, #304]	; (800cb28 <_tx_thread_create+0x2e8>)
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9fc:	60da      	str	r2, [r3, #12]
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca02:	611a      	str	r2, [r3, #16]
 800ca04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca06:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ca08:	615a      	str	r2, [r3, #20]
 800ca0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca0e:	619a      	str	r2, [r3, #24]
 800ca10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca14:	61da      	str	r2, [r3, #28]
 800ca16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca18:	3320      	adds	r3, #32
 800ca1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca1c:	4b43      	ldr	r3, [pc, #268]	; (800cb2c <_tx_thread_create+0x2ec>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d314      	bcc.n	800ca50 <_tx_thread_create+0x210>
 800ca26:	4b42      	ldr	r3, [pc, #264]	; (800cb30 <_tx_thread_create+0x2f0>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca2c:	4a3a      	ldr	r2, [pc, #232]	; (800cb18 <_tx_thread_create+0x2d8>)
 800ca2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca30:	6013      	str	r3, [r2, #0]
 800ca32:	4b40      	ldr	r3, [pc, #256]	; (800cb34 <_tx_thread_create+0x2f4>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca38:	621a      	str	r2, [r3, #32]
 800ca3a:	4b3f      	ldr	r3, [pc, #252]	; (800cb38 <_tx_thread_create+0x2f8>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00d      	beq.n	800ca5e <_tx_thread_create+0x21e>
 800ca42:	4b3d      	ldr	r3, [pc, #244]	; (800cb38 <_tx_thread_create+0x2f8>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a3b      	ldr	r2, [pc, #236]	; (800cb34 <_tx_thread_create+0x2f4>)
 800ca48:	6812      	ldr	r2, [r2, #0]
 800ca4a:	4610      	mov	r0, r2
 800ca4c:	4798      	blx	r3
 800ca4e:	e006      	b.n	800ca5e <_tx_thread_create+0x21e>
 800ca50:	4a31      	ldr	r2, [pc, #196]	; (800cb18 <_tx_thread_create+0x2d8>)
 800ca52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca54:	6013      	str	r3, [r2, #0]
 800ca56:	4b37      	ldr	r3, [pc, #220]	; (800cb34 <_tx_thread_create+0x2f4>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca5c:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ca5e:	4b37      	ldr	r3, [pc, #220]	; (800cb3c <_tx_thread_create+0x2fc>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	3301      	adds	r3, #1
 800ca64:	4a35      	ldr	r2, [pc, #212]	; (800cb3c <_tx_thread_create+0x2fc>)
 800ca66:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800ca68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d129      	bne.n	800cac2 <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ca6e:	f3ef 8305 	mrs	r3, IPSR
 800ca72:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800ca74:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800ca76:	4b2a      	ldr	r3, [pc, #168]	; (800cb20 <_tx_thread_create+0x2e0>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ca80:	d30d      	bcc.n	800ca9e <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800ca82:	4b2f      	ldr	r3, [pc, #188]	; (800cb40 <_tx_thread_create+0x300>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800ca88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d009      	beq.n	800caa2 <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800ca8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca92:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800ca94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca9a:	63da      	str	r2, [r3, #60]	; 0x3c
 800ca9c:	e001      	b.n	800caa2 <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800caa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caa4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800caa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa8:	f383 8810 	msr	PRIMASK, r3
}
 800caac:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	f000 fa0e 	bl	800ced0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800cab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d01e      	beq.n	800caf8 <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800caba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cabc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cabe:	63da      	str	r2, [r3, #60]	; 0x3c
 800cac0:	e01a      	b.n	800caf8 <_tx_thread_create+0x2b8>
 800cac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cac4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	f383 8810 	msr	PRIMASK, r3
}
 800cacc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cace:	f3ef 8310 	mrs	r3, PRIMASK
 800cad2:	61fb      	str	r3, [r7, #28]
    return(posture);
 800cad4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800cad6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cad8:	b672      	cpsid	i
    return(int_posture);
 800cada:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800cadc:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800cade:	4b17      	ldr	r3, [pc, #92]	; (800cb3c <_tx_thread_create+0x2fc>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	3b01      	subs	r3, #1
 800cae4:	4a15      	ldr	r2, [pc, #84]	; (800cb3c <_tx_thread_create+0x2fc>)
 800cae6:	6013      	str	r3, [r2, #0]
 800cae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800caec:	6a3b      	ldr	r3, [r7, #32]
 800caee:	f383 8810 	msr	PRIMASK, r3
}
 800caf2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800caf4:	f000 f9b2 	bl	800ce5c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3760      	adds	r7, #96	; 0x60
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	0800d7e5 	.word	0x0800d7e5
 800cb08:	0800cbc1 	.word	0x0800cbc1
 800cb0c:	54485244 	.word	0x54485244
 800cb10:	2000168c 	.word	0x2000168c
 800cb14:	20001688 	.word	0x20001688
 800cb18:	20001c9c 	.word	0x20001c9c
 800cb1c:	20001ca0 	.word	0x20001ca0
 800cb20:	2000000c 	.word	0x2000000c
 800cb24:	20001680 	.word	0x20001680
 800cb28:	e0001004 	.word	0xe0001004
 800cb2c:	20001c98 	.word	0x20001c98
 800cb30:	20001c94 	.word	0x20001c94
 800cb34:	20001c88 	.word	0x20001c88
 800cb38:	20001ca4 	.word	0x20001ca4
 800cb3c:	20001718 	.word	0x20001718
 800cb40:	20001684 	.word	0x20001684

0800cb44 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800cb48:	4b13      	ldr	r3, [pc, #76]	; (800cb98 <_tx_thread_initialize+0x54>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800cb4e:	4b13      	ldr	r3, [pc, #76]	; (800cb9c <_tx_thread_initialize+0x58>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	601a      	str	r2, [r3, #0]
 800cb54:	4b12      	ldr	r3, [pc, #72]	; (800cba0 <_tx_thread_initialize+0x5c>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cb5a:	4b12      	ldr	r3, [pc, #72]	; (800cba4 <_tx_thread_initialize+0x60>)
 800cb5c:	2220      	movs	r2, #32
 800cb5e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800cb60:	2280      	movs	r2, #128	; 0x80
 800cb62:	2100      	movs	r1, #0
 800cb64:	4810      	ldr	r0, [pc, #64]	; (800cba8 <_tx_thread_initialize+0x64>)
 800cb66:	f007 fdb9 	bl	80146dc <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800cb6a:	4b10      	ldr	r3, [pc, #64]	; (800cbac <_tx_thread_initialize+0x68>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800cb70:	4b0f      	ldr	r3, [pc, #60]	; (800cbb0 <_tx_thread_initialize+0x6c>)
 800cb72:	2200      	movs	r2, #0
 800cb74:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800cb76:	4b0f      	ldr	r3, [pc, #60]	; (800cbb4 <_tx_thread_initialize+0x70>)
 800cb78:	2200      	movs	r2, #0
 800cb7a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800cb7c:	4b0e      	ldr	r3, [pc, #56]	; (800cbb8 <_tx_thread_initialize+0x74>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 800cb82:	4b0e      	ldr	r3, [pc, #56]	; (800cbbc <_tx_thread_initialize+0x78>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 800cb8a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 800cb8e:	4a0b      	ldr	r2, [pc, #44]	; (800cbbc <_tx_thread_initialize+0x78>)
 800cb90:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800cb92:	bf00      	nop
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	20001680 	.word	0x20001680
 800cb9c:	20001684 	.word	0x20001684
 800cba0:	20001690 	.word	0x20001690
 800cba4:	20001694 	.word	0x20001694
 800cba8:	20001698 	.word	0x20001698
 800cbac:	20001688 	.word	0x20001688
 800cbb0:	2000168c 	.word	0x2000168c
 800cbb4:	20001718 	.word	0x20001718
 800cbb8:	2000171c 	.word	0x2000171c
 800cbbc:	20001720 	.word	0x20001720

0800cbc0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b088      	sub	sp, #32
 800cbc4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cbc6:	4b21      	ldr	r3, [pc, #132]	; (800cc4c <_tx_thread_shell_entry+0x8c>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbd0:	69fa      	ldr	r2, [r7, #28]
 800cbd2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cbd4:	4610      	mov	r0, r2
 800cbd6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800cbd8:	4b1d      	ldr	r3, [pc, #116]	; (800cc50 <_tx_thread_shell_entry+0x90>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d003      	beq.n	800cbe8 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800cbe0:	4b1b      	ldr	r3, [pc, #108]	; (800cc50 <_tx_thread_shell_entry+0x90>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	69f8      	ldr	r0, [r7, #28]
 800cbe6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cbe8:	f3ef 8310 	mrs	r3, PRIMASK
 800cbec:	607b      	str	r3, [r7, #4]
    return(posture);
 800cbee:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800cbf0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cbf2:	b672      	cpsid	i
    return(int_posture);
 800cbf4:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800cbf6:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	2201      	movs	r2, #1
 800cc02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	2200      	movs	r2, #0
 800cc08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cc0a:	4b12      	ldr	r3, [pc, #72]	; (800cc54 <_tx_thread_shell_entry+0x94>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	4a10      	ldr	r2, [pc, #64]	; (800cc54 <_tx_thread_shell_entry+0x94>)
 800cc12:	6013      	str	r3, [r2, #0]
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	f383 8810 	msr	PRIMASK, r3
}
 800cc1e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800cc20:	f3ef 8314 	mrs	r3, CONTROL
 800cc24:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800cc26:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800cc28:	617b      	str	r3, [r7, #20]
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	f023 0304 	bic.w	r3, r3, #4
 800cc30:	617b      	str	r3, [r7, #20]
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	f383 8814 	msr	CONTROL, r3
}
 800cc3c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800cc3e:	69f8      	ldr	r0, [r7, #28]
 800cc40:	f000 fb00 	bl	800d244 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800cc44:	bf00      	nop
 800cc46:	3720      	adds	r7, #32
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	20001680 	.word	0x20001680
 800cc50:	2000171c 	.word	0x2000171c
 800cc54:	20001718 	.word	0x20001718

0800cc58 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b094      	sub	sp, #80	; 0x50
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc60:	f3ef 8310 	mrs	r3, PRIMASK
 800cc64:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800cc66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800cc68:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc6a:	b672      	cpsid	i
    return(int_posture);
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800cc6e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cc70:	4b6f      	ldr	r3, [pc, #444]	; (800ce30 <_tx_thread_sleep+0x1d8>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800cc76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d108      	bne.n	800cc8e <_tx_thread_sleep+0x36>
 800cc7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc82:	f383 8810 	msr	PRIMASK, r3
}
 800cc86:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cc88:	2313      	movs	r3, #19
 800cc8a:	60fb      	str	r3, [r7, #12]
 800cc8c:	e0ca      	b.n	800ce24 <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cc8e:	f3ef 8305 	mrs	r3, IPSR
 800cc92:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800cc94:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cc96:	4b67      	ldr	r3, [pc, #412]	; (800ce34 <_tx_thread_sleep+0x1dc>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d008      	beq.n	800ccb2 <_tx_thread_sleep+0x5a>
 800cca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cca2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca6:	f383 8810 	msr	PRIMASK, r3
}
 800ccaa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800ccac:	2313      	movs	r3, #19
 800ccae:	60fb      	str	r3, [r7, #12]
 800ccb0:	e0b8      	b.n	800ce24 <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800ccb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccb4:	4a60      	ldr	r2, [pc, #384]	; (800ce38 <_tx_thread_sleep+0x1e0>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d108      	bne.n	800cccc <_tx_thread_sleep+0x74>
 800ccba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccbc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccbe:	6a3b      	ldr	r3, [r7, #32]
 800ccc0:	f383 8810 	msr	PRIMASK, r3
}
 800ccc4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800ccc6:	2313      	movs	r3, #19
 800ccc8:	60fb      	str	r3, [r7, #12]
 800ccca:	e0ab      	b.n	800ce24 <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d108      	bne.n	800cce4 <_tx_thread_sleep+0x8c>
 800ccd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccd4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccd6:	69fb      	ldr	r3, [r7, #28]
 800ccd8:	f383 8810 	msr	PRIMASK, r3
}
 800ccdc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800ccde:	2300      	movs	r3, #0
 800cce0:	60fb      	str	r3, [r7, #12]
 800cce2:	e09f      	b.n	800ce24 <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800cce4:	4b55      	ldr	r3, [pc, #340]	; (800ce3c <_tx_thread_sleep+0x1e4>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d008      	beq.n	800ccfe <_tx_thread_sleep+0xa6>
 800ccec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccee:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	f383 8810 	msr	PRIMASK, r3
}
 800ccf6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800ccf8:	2313      	movs	r3, #19
 800ccfa:	60fb      	str	r3, [r7, #12]
 800ccfc:	e092      	b.n	800ce24 <_tx_thread_sleep+0x1cc>
        }
        else
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 800ccfe:	4b50      	ldr	r3, [pc, #320]	; (800ce40 <_tx_thread_sleep+0x1e8>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d06d      	beq.n	800cde6 <_tx_thread_sleep+0x18e>
 800cd0a:	4b4e      	ldr	r3, [pc, #312]	; (800ce44 <_tx_thread_sleep+0x1ec>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d067      	beq.n	800cde6 <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cd16:	f3ef 8305 	mrs	r3, IPSR
 800cd1a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cd1c:	697a      	ldr	r2, [r7, #20]
 800cd1e:	4b45      	ldr	r3, [pc, #276]	; (800ce34 <_tx_thread_sleep+0x1dc>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4313      	orrs	r3, r2
 800cd24:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd26:	4b42      	ldr	r3, [pc, #264]	; (800ce30 <_tx_thread_sleep+0x1d8>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d10b      	bne.n	800cd4a <_tx_thread_sleep+0xf2>
 800cd32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3c:	041a      	lsls	r2, r3, #16
 800cd3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd40:	4313      	orrs	r3, r2
 800cd42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd48:	e00e      	b.n	800cd68 <_tx_thread_sleep+0x110>
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cd50:	d205      	bcs.n	800cd5e <_tx_thread_sleep+0x106>
 800cd52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd54:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd56:	f04f 33ff 	mov.w	r3, #4294967295
 800cd5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd5c:	e004      	b.n	800cd68 <_tx_thread_sleep+0x110>
 800cd5e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cd62:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd64:	2300      	movs	r3, #0
 800cd66:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd6c:	601a      	str	r2, [r3, #0]
 800cd6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd72:	605a      	str	r2, [r3, #4]
 800cd74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd76:	2270      	movs	r2, #112	; 0x70
 800cd78:	609a      	str	r2, [r3, #8]
 800cd7a:	4b33      	ldr	r3, [pc, #204]	; (800ce48 <_tx_thread_sleep+0x1f0>)
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd80:	60da      	str	r2, [r3, #12]
 800cd82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	611a      	str	r2, [r3, #16]
 800cd88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd8e:	615a      	str	r2, [r3, #20]
 800cd90:	f107 020c 	add.w	r2, r7, #12
 800cd94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd96:	619a      	str	r2, [r3, #24]
 800cd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	61da      	str	r2, [r3, #28]
 800cd9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cda0:	3320      	adds	r3, #32
 800cda2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cda4:	4b29      	ldr	r3, [pc, #164]	; (800ce4c <_tx_thread_sleep+0x1f4>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d314      	bcc.n	800cdd8 <_tx_thread_sleep+0x180>
 800cdae:	4b28      	ldr	r3, [pc, #160]	; (800ce50 <_tx_thread_sleep+0x1f8>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdb4:	4a22      	ldr	r2, [pc, #136]	; (800ce40 <_tx_thread_sleep+0x1e8>)
 800cdb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdb8:	6013      	str	r3, [r2, #0]
 800cdba:	4b26      	ldr	r3, [pc, #152]	; (800ce54 <_tx_thread_sleep+0x1fc>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdc0:	621a      	str	r2, [r3, #32]
 800cdc2:	4b25      	ldr	r3, [pc, #148]	; (800ce58 <_tx_thread_sleep+0x200>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00d      	beq.n	800cde6 <_tx_thread_sleep+0x18e>
 800cdca:	4b23      	ldr	r3, [pc, #140]	; (800ce58 <_tx_thread_sleep+0x200>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a21      	ldr	r2, [pc, #132]	; (800ce54 <_tx_thread_sleep+0x1fc>)
 800cdd0:	6812      	ldr	r2, [r2, #0]
 800cdd2:	4610      	mov	r0, r2
 800cdd4:	4798      	blx	r3
 800cdd6:	e006      	b.n	800cde6 <_tx_thread_sleep+0x18e>
 800cdd8:	4a19      	ldr	r2, [pc, #100]	; (800ce40 <_tx_thread_sleep+0x1e8>)
 800cdda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cddc:	6013      	str	r3, [r2, #0]
 800cdde:	4b1d      	ldr	r3, [pc, #116]	; (800ce54 <_tx_thread_sleep+0x1fc>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cde4:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800cde6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cde8:	2204      	movs	r2, #4
 800cdea:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cdec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdee:	2201      	movs	r2, #1
 800cdf0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800cdf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800cdfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800ce00:	4b0e      	ldr	r3, [pc, #56]	; (800ce3c <_tx_thread_sleep+0x1e4>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	3301      	adds	r3, #1
 800ce06:	4a0d      	ldr	r2, [pc, #52]	; (800ce3c <_tx_thread_sleep+0x1e4>)
 800ce08:	6013      	str	r3, [r2, #0]
 800ce0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce0c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	f383 8810 	msr	PRIMASK, r3
}
 800ce14:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800ce16:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ce18:	f000 fa14 	bl	800d244 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800ce1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce22:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Return completion status.  */
    return(status);
 800ce24:	68fb      	ldr	r3, [r7, #12]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3750      	adds	r7, #80	; 0x50
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	20001680 	.word	0x20001680
 800ce34:	2000000c 	.word	0x2000000c
 800ce38:	200017c8 	.word	0x200017c8
 800ce3c:	20001718 	.word	0x20001718
 800ce40:	20001c9c 	.word	0x20001c9c
 800ce44:	20001ca0 	.word	0x20001ca0
 800ce48:	e0001004 	.word	0xe0001004
 800ce4c:	20001c98 	.word	0x20001c98
 800ce50:	20001c94 	.word	0x20001c94
 800ce54:	20001c88 	.word	0x20001c88
 800ce58:	20001ca4 	.word	0x20001ca4

0800ce5c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b089      	sub	sp, #36	; 0x24
 800ce60:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800ce62:	4b17      	ldr	r3, [pc, #92]	; (800cec0 <_tx_thread_system_preempt_check+0x64>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d121      	bne.n	800ceb2 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800ce6e:	4b15      	ldr	r3, [pc, #84]	; (800cec4 <_tx_thread_system_preempt_check+0x68>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800ce74:	4b14      	ldr	r3, [pc, #80]	; (800cec8 <_tx_thread_system_preempt_check+0x6c>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800ce7a:	69ba      	ldr	r2, [r7, #24]
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d017      	beq.n	800ceb2 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800ce82:	4b12      	ldr	r3, [pc, #72]	; (800cecc <_tx_thread_system_preempt_check+0x70>)
 800ce84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce88:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce8a:	f3ef 8305 	mrs	r3, IPSR
 800ce8e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ce90:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d10c      	bne.n	800ceb0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce96:	f3ef 8310 	mrs	r3, PRIMASK
 800ce9a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800ce9e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800cea0:	b662      	cpsie	i
}
 800cea2:	bf00      	nop
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f383 8810 	msr	PRIMASK, r3
}
 800ceae:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800ceb0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800ceb2:	bf00      	nop
 800ceb4:	3724      	adds	r7, #36	; 0x24
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	20001718 	.word	0x20001718
 800cec4:	20001680 	.word	0x20001680
 800cec8:	20001684 	.word	0x20001684
 800cecc:	e000ed04 	.word	0xe000ed04

0800ced0 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b09e      	sub	sp, #120	; 0x78
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800ced8:	2300      	movs	r3, #0
 800ceda:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cedc:	f3ef 8310 	mrs	r3, PRIMASK
 800cee0:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800cee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800cee4:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800cee6:	b672      	cpsid	i
    return(int_posture);
 800cee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800ceea:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d005      	beq.n	800cf00 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	334c      	adds	r3, #76	; 0x4c
 800cef8:	4618      	mov	r0, r3
 800cefa:	f000 fdaf 	bl	800da5c <_tx_timer_system_deactivate>
 800cefe:	e002      	b.n	800cf06 <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 800cf06:	4b8b      	ldr	r3, [pc, #556]	; (800d134 <_tx_thread_system_resume+0x264>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800cf0c:	4b89      	ldr	r3, [pc, #548]	; (800d134 <_tx_thread_system_resume+0x264>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	663b      	str	r3, [r7, #96]	; 0x60
 800cf12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d06f      	beq.n	800cff8 <_tx_thread_system_resume+0x128>
 800cf18:	4b87      	ldr	r3, [pc, #540]	; (800d138 <_tx_thread_system_resume+0x268>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d069      	beq.n	800cff8 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf24:	f3ef 8305 	mrs	r3, IPSR
 800cf28:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 800cf2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf2c:	4b83      	ldr	r3, [pc, #524]	; (800d13c <_tx_thread_system_resume+0x26c>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4313      	orrs	r3, r2
 800cf32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf34:	4b82      	ldr	r3, [pc, #520]	; (800d140 <_tx_thread_system_resume+0x270>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d10b      	bne.n	800cf58 <_tx_thread_system_resume+0x88>
 800cf40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf44:	673b      	str	r3, [r7, #112]	; 0x70
 800cf46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf4a:	041a      	lsls	r2, r3, #16
 800cf4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf54:	673b      	str	r3, [r7, #112]	; 0x70
 800cf56:	e00e      	b.n	800cf76 <_tx_thread_system_resume+0xa6>
 800cf58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf5a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cf5e:	d205      	bcs.n	800cf6c <_tx_thread_system_resume+0x9c>
 800cf60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf62:	673b      	str	r3, [r7, #112]	; 0x70
 800cf64:	f04f 33ff 	mov.w	r3, #4294967295
 800cf68:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf6a:	e004      	b.n	800cf76 <_tx_thread_system_resume+0xa6>
 800cf6c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cf70:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf72:	2300      	movs	r3, #0
 800cf74:	673b      	str	r3, [r7, #112]	; 0x70
 800cf76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf7a:	601a      	str	r2, [r3, #0]
 800cf7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cf80:	605a      	str	r2, [r3, #4]
 800cf82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf84:	2201      	movs	r2, #1
 800cf86:	609a      	str	r2, [r3, #8]
 800cf88:	4b6e      	ldr	r3, [pc, #440]	; (800d144 <_tx_thread_system_resume+0x274>)
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf8e:	60da      	str	r2, [r3, #12]
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf94:	611a      	str	r2, [r3, #16]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf9c:	615a      	str	r2, [r3, #20]
 800cf9e:	f107 020c 	add.w	r2, r7, #12
 800cfa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfa4:	619a      	str	r2, [r3, #24]
 800cfa6:	4b68      	ldr	r3, [pc, #416]	; (800d148 <_tx_thread_system_resume+0x278>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfae:	61da      	str	r2, [r3, #28]
 800cfb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfb2:	3320      	adds	r3, #32
 800cfb4:	663b      	str	r3, [r7, #96]	; 0x60
 800cfb6:	4b65      	ldr	r3, [pc, #404]	; (800d14c <_tx_thread_system_resume+0x27c>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d314      	bcc.n	800cfea <_tx_thread_system_resume+0x11a>
 800cfc0:	4b63      	ldr	r3, [pc, #396]	; (800d150 <_tx_thread_system_resume+0x280>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	663b      	str	r3, [r7, #96]	; 0x60
 800cfc6:	4a5b      	ldr	r2, [pc, #364]	; (800d134 <_tx_thread_system_resume+0x264>)
 800cfc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfca:	6013      	str	r3, [r2, #0]
 800cfcc:	4b61      	ldr	r3, [pc, #388]	; (800d154 <_tx_thread_system_resume+0x284>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cfd2:	621a      	str	r2, [r3, #32]
 800cfd4:	4b60      	ldr	r3, [pc, #384]	; (800d158 <_tx_thread_system_resume+0x288>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d00d      	beq.n	800cff8 <_tx_thread_system_resume+0x128>
 800cfdc:	4b5e      	ldr	r3, [pc, #376]	; (800d158 <_tx_thread_system_resume+0x288>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a5c      	ldr	r2, [pc, #368]	; (800d154 <_tx_thread_system_resume+0x284>)
 800cfe2:	6812      	ldr	r2, [r2, #0]
 800cfe4:	4610      	mov	r0, r2
 800cfe6:	4798      	blx	r3
 800cfe8:	e006      	b.n	800cff8 <_tx_thread_system_resume+0x128>
 800cfea:	4a52      	ldr	r2, [pc, #328]	; (800d134 <_tx_thread_system_resume+0x264>)
 800cfec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfee:	6013      	str	r3, [r2, #0]
 800cff0:	4b58      	ldr	r3, [pc, #352]	; (800d154 <_tx_thread_system_resume+0x284>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cff6:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 800cff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d002      	beq.n	800d004 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800cffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d004:	4b55      	ldr	r3, [pc, #340]	; (800d15c <_tx_thread_system_resume+0x28c>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	3b01      	subs	r3, #1
 800d00a:	4a54      	ldr	r2, [pc, #336]	; (800d15c <_tx_thread_system_resume+0x28c>)
 800d00c:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d012:	2b00      	cmp	r3, #0
 800d014:	f040 80b3 	bne.w	800d17e <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f000 80c7 	beq.w	800d1b0 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d026:	2b00      	cmp	r3, #0
 800d028:	f040 80a2 	bne.w	800d170 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d036:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800d038:	4a49      	ldr	r2, [pc, #292]	; (800d160 <_tx_thread_system_resume+0x290>)
 800d03a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d040:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 800d042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d044:	2b00      	cmp	r3, #0
 800d046:	d164      	bne.n	800d112 <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800d048:	4945      	ldr	r1, [pc, #276]	; (800d160 <_tx_thread_system_resume+0x290>)
 800d04a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d05e:	2201      	movs	r2, #1
 800d060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d062:	fa02 f303 	lsl.w	r3, r2, r3
 800d066:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d068:	4b3e      	ldr	r3, [pc, #248]	; (800d164 <_tx_thread_system_resume+0x294>)
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d06e:	4313      	orrs	r3, r2
 800d070:	4a3c      	ldr	r2, [pc, #240]	; (800d164 <_tx_thread_system_resume+0x294>)
 800d072:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d074:	4b3c      	ldr	r3, [pc, #240]	; (800d168 <_tx_thread_system_resume+0x298>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d07a:	429a      	cmp	r2, r3
 800d07c:	f080 8098 	bcs.w	800d1b0 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d080:	4a39      	ldr	r2, [pc, #228]	; (800d168 <_tx_thread_system_resume+0x298>)
 800d082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d084:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d086:	4b30      	ldr	r3, [pc, #192]	; (800d148 <_tx_thread_system_resume+0x278>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d103      	bne.n	800d09a <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d092:	4a2d      	ldr	r2, [pc, #180]	; (800d148 <_tx_thread_system_resume+0x278>)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6013      	str	r3, [r2, #0]
 800d098:	e08a      	b.n	800d1b0 <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d09e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	f080 8085 	bcs.w	800d1b0 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d0a6:	4a28      	ldr	r2, [pc, #160]	; (800d148 <_tx_thread_system_resume+0x278>)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 800d0ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d009      	beq.n	800d0c6 <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d0b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d104      	bne.n	800d0c6 <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d0bc:	4b22      	ldr	r3, [pc, #136]	; (800d148 <_tx_thread_system_resume+0x278>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0c4:	61da      	str	r2, [r3, #28]
 800d0c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0c8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0cc:	f383 8810 	msr	PRIMASK, r3
}
 800d0d0:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d0d2:	4b22      	ldr	r3, [pc, #136]	; (800d15c <_tx_thread_system_resume+0x28c>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 800d0d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f040 80a1 	bne.w	800d222 <_tx_thread_system_resume+0x352>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d0e0:	4b22      	ldr	r3, [pc, #136]	; (800d16c <_tx_thread_system_resume+0x29c>)
 800d0e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d0e8:	f3ef 8305 	mrs	r3, IPSR
 800d0ec:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (_tx_ipsr_get() == 0)
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f040 8098 	bne.w	800d226 <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0f6:	f3ef 8310 	mrs	r3, PRIMASK
 800d0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 800d0fe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d100:	b662      	cpsie	i
}
 800d102:	bf00      	nop
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10a:	f383 8810 	msr	PRIMASK, r3
}
 800d10e:	bf00      	nop
}
 800d110:	e089      	b.n	800d226 <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800d112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d116:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800d118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800d11e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d128:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d12e:	621a      	str	r2, [r3, #32]
 800d130:	e03e      	b.n	800d1b0 <_tx_thread_system_resume+0x2e0>
 800d132:	bf00      	nop
 800d134:	20001c9c 	.word	0x20001c9c
 800d138:	20001ca0 	.word	0x20001ca0
 800d13c:	2000000c 	.word	0x2000000c
 800d140:	20001680 	.word	0x20001680
 800d144:	e0001004 	.word	0xe0001004
 800d148:	20001684 	.word	0x20001684
 800d14c:	20001c98 	.word	0x20001c98
 800d150:	20001c94 	.word	0x20001c94
 800d154:	20001c88 	.word	0x20001c88
 800d158:	20001ca4 	.word	0x20001ca4
 800d15c:	20001718 	.word	0x20001718
 800d160:	20001698 	.word	0x20001698
 800d164:	20001690 	.word	0x20001690
 800d168:	20001694 	.word	0x20001694
 800d16c:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2203      	movs	r2, #3
 800d17a:	631a      	str	r2, [r3, #48]	; 0x30
 800d17c:	e018      	b.n	800d1b0 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d182:	2b01      	cmp	r3, #1
 800d184:	d014      	beq.n	800d1b0 <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d18a:	2b02      	cmp	r3, #2
 800d18c:	d010      	beq.n	800d1b0 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d192:	2b00      	cmp	r3, #0
 800d194:	d106      	bne.n	800d1a4 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2200      	movs	r2, #0
 800d19a:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	631a      	str	r2, [r3, #48]	; 0x30
 800d1a2:	e005      	b.n	800d1b0 <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2203      	movs	r2, #3
 800d1ae:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 800d1b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d009      	beq.n	800d1ca <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d1b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d104      	bne.n	800d1ca <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d1c0:	4b1c      	ldr	r3, [pc, #112]	; (800d234 <_tx_thread_system_resume+0x364>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1c8:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d1ca:	4b1b      	ldr	r3, [pc, #108]	; (800d238 <_tx_thread_system_resume+0x368>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	647b      	str	r3, [r7, #68]	; 0x44
 800d1d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1d2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1d4:	6a3b      	ldr	r3, [r7, #32]
 800d1d6:	f383 8810 	msr	PRIMASK, r3
}
 800d1da:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d1dc:	4b15      	ldr	r3, [pc, #84]	; (800d234 <_tx_thread_system_resume+0x364>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d022      	beq.n	800d22c <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d1e6:	4b15      	ldr	r3, [pc, #84]	; (800d23c <_tx_thread_system_resume+0x36c>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 800d1ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d11c      	bne.n	800d22c <_tx_thread_system_resume+0x35c>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d1f2:	4b13      	ldr	r3, [pc, #76]	; (800d240 <_tx_thread_system_resume+0x370>)
 800d1f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1f8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d1fa:	f3ef 8305 	mrs	r3, IPSR
 800d1fe:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d200:	69fb      	ldr	r3, [r7, #28]
    if (_tx_ipsr_get() == 0)
 800d202:	2b00      	cmp	r3, #0
 800d204:	d111      	bne.n	800d22a <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d206:	f3ef 8310 	mrs	r3, PRIMASK
 800d20a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d20c:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 800d20e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d210:	b662      	cpsie	i
}
 800d212:	bf00      	nop
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	f383 8810 	msr	PRIMASK, r3
}
 800d21e:	bf00      	nop
}
 800d220:	e003      	b.n	800d22a <_tx_thread_system_resume+0x35a>
                                return;
 800d222:	bf00      	nop
 800d224:	e002      	b.n	800d22c <_tx_thread_system_resume+0x35c>
 800d226:	bf00      	nop
 800d228:	e000      	b.n	800d22c <_tx_thread_system_resume+0x35c>
 800d22a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800d22c:	3778      	adds	r7, #120	; 0x78
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	20001684 	.word	0x20001684
 800d238:	20001680 	.word	0x20001680
 800d23c:	20001718 	.word	0x20001718
 800d240:	e000ed04 	.word	0xe000ed04

0800d244 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b0a4      	sub	sp, #144	; 0x90
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d24c:	2300      	movs	r3, #0
 800d24e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d252:	4b98      	ldr	r3, [pc, #608]	; (800d4b4 <_tx_thread_system_suspend+0x270>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d25a:	f3ef 8310 	mrs	r3, PRIMASK
 800d25e:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 800d260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 800d262:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d264:	b672      	cpsid	i
    return(int_posture);
 800d266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d268:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d270:	429a      	cmp	r2, r3
 800d272:	d112      	bne.n	800d29a <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d278:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800d27a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d008      	beq.n	800d292 <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800d280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d286:	d004      	beq.n	800d292 <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	334c      	adds	r3, #76	; 0x4c
 800d28c:	4618      	mov	r0, r3
 800d28e:	f000 fb83 	bl	800d998 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	69db      	ldr	r3, [r3, #28]
 800d296:	4a88      	ldr	r2, [pc, #544]	; (800d4b8 <_tx_thread_system_suspend+0x274>)
 800d298:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d29a:	4b88      	ldr	r3, [pc, #544]	; (800d4bc <_tx_thread_system_suspend+0x278>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	4a86      	ldr	r2, [pc, #536]	; (800d4bc <_tx_thread_system_suspend+0x278>)
 800d2a2:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	f040 817d 	bne.w	800d5a8 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 800d2ae:	4b84      	ldr	r3, [pc, #528]	; (800d4c0 <_tx_thread_system_suspend+0x27c>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d2b4:	4b82      	ldr	r3, [pc, #520]	; (800d4c0 <_tx_thread_system_suspend+0x27c>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	673b      	str	r3, [r7, #112]	; 0x70
 800d2ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d07c      	beq.n	800d3ba <_tx_thread_system_suspend+0x176>
 800d2c0:	4b80      	ldr	r3, [pc, #512]	; (800d4c4 <_tx_thread_system_suspend+0x280>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f003 0301 	and.w	r3, r3, #1
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d076      	beq.n	800d3ba <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2cc:	f3ef 8305 	mrs	r3, IPSR
 800d2d0:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800d2d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2d4:	4b7c      	ldr	r3, [pc, #496]	; (800d4c8 <_tx_thread_system_suspend+0x284>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d2dc:	4b75      	ldr	r3, [pc, #468]	; (800d4b4 <_tx_thread_system_suspend+0x270>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d2e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d110      	bne.n	800d30c <_tx_thread_system_suspend+0xc8>
 800d2ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d2f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2fa:	041a      	lsls	r2, r3, #16
 800d2fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d300:	4313      	orrs	r3, r2
 800d302:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d306:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d30a:	e013      	b.n	800d334 <_tx_thread_system_suspend+0xf0>
 800d30c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d30e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d312:	d208      	bcs.n	800d326 <_tx_thread_system_suspend+0xe2>
 800d314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d31c:	f04f 33ff 	mov.w	r3, #4294967295
 800d320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d324:	e006      	b.n	800d334 <_tx_thread_system_suspend+0xf0>
 800d326:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d32a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d32e:	2300      	movs	r3, #0
 800d330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d334:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d338:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d33a:	601a      	str	r2, [r3, #0]
 800d33c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d33e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d342:	605a      	str	r2, [r3, #4]
 800d344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d346:	2202      	movs	r2, #2
 800d348:	609a      	str	r2, [r3, #8]
 800d34a:	4b60      	ldr	r3, [pc, #384]	; (800d4cc <_tx_thread_system_suspend+0x288>)
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d350:	60da      	str	r2, [r3, #12]
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d356:	611a      	str	r2, [r3, #16]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d35c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d35e:	615a      	str	r2, [r3, #20]
 800d360:	f107 0208 	add.w	r2, r7, #8
 800d364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d366:	619a      	str	r2, [r3, #24]
 800d368:	4b59      	ldr	r3, [pc, #356]	; (800d4d0 <_tx_thread_system_suspend+0x28c>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	461a      	mov	r2, r3
 800d36e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d370:	61da      	str	r2, [r3, #28]
 800d372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d374:	3320      	adds	r3, #32
 800d376:	673b      	str	r3, [r7, #112]	; 0x70
 800d378:	4b56      	ldr	r3, [pc, #344]	; (800d4d4 <_tx_thread_system_suspend+0x290>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d37e:	429a      	cmp	r2, r3
 800d380:	d314      	bcc.n	800d3ac <_tx_thread_system_suspend+0x168>
 800d382:	4b55      	ldr	r3, [pc, #340]	; (800d4d8 <_tx_thread_system_suspend+0x294>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	673b      	str	r3, [r7, #112]	; 0x70
 800d388:	4a4d      	ldr	r2, [pc, #308]	; (800d4c0 <_tx_thread_system_suspend+0x27c>)
 800d38a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d38c:	6013      	str	r3, [r2, #0]
 800d38e:	4b53      	ldr	r3, [pc, #332]	; (800d4dc <_tx_thread_system_suspend+0x298>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d394:	621a      	str	r2, [r3, #32]
 800d396:	4b52      	ldr	r3, [pc, #328]	; (800d4e0 <_tx_thread_system_suspend+0x29c>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00d      	beq.n	800d3ba <_tx_thread_system_suspend+0x176>
 800d39e:	4b50      	ldr	r3, [pc, #320]	; (800d4e0 <_tx_thread_system_suspend+0x29c>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a4e      	ldr	r2, [pc, #312]	; (800d4dc <_tx_thread_system_suspend+0x298>)
 800d3a4:	6812      	ldr	r2, [r2, #0]
 800d3a6:	4610      	mov	r0, r2
 800d3a8:	4798      	blx	r3
 800d3aa:	e006      	b.n	800d3ba <_tx_thread_system_suspend+0x176>
 800d3ac:	4a44      	ldr	r2, [pc, #272]	; (800d4c0 <_tx_thread_system_suspend+0x27c>)
 800d3ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3b0:	6013      	str	r3, [r2, #0]
 800d3b2:	4b4a      	ldr	r3, [pc, #296]	; (800d4dc <_tx_thread_system_suspend+0x298>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d3b8:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 800d3ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d003      	beq.n	800d3c8 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d3c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d2:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6a1b      	ldr	r3, [r3, #32]
 800d3d8:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800d3da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d016      	beq.n	800d410 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e6:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800d3e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d3ec:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800d3ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d3f2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	4a3b      	ldr	r2, [pc, #236]	; (800d4e4 <_tx_thread_system_suspend+0x2a0>)
 800d3f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	f040 8085 	bne.w	800d50e <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	4937      	ldr	r1, [pc, #220]	; (800d4e4 <_tx_thread_system_suspend+0x2a0>)
 800d408:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d40a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d40e:	e07e      	b.n	800d50e <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	4a34      	ldr	r2, [pc, #208]	; (800d4e4 <_tx_thread_system_suspend+0x2a0>)
 800d414:	2100      	movs	r1, #0
 800d416:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	2201      	movs	r2, #1
 800d41e:	fa02 f303 	lsl.w	r3, r2, r3
 800d422:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800d424:	4b30      	ldr	r3, [pc, #192]	; (800d4e8 <_tx_thread_system_suspend+0x2a4>)
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d42a:	43db      	mvns	r3, r3
 800d42c:	4013      	ands	r3, r2
 800d42e:	4a2e      	ldr	r2, [pc, #184]	; (800d4e8 <_tx_thread_system_suspend+0x2a4>)
 800d430:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800d432:	2300      	movs	r3, #0
 800d434:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800d436:	4b2c      	ldr	r3, [pc, #176]	; (800d4e8 <_tx_thread_system_suspend+0x2a4>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800d43c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d158      	bne.n	800d4f4 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d442:	4b2a      	ldr	r3, [pc, #168]	; (800d4ec <_tx_thread_system_suspend+0x2a8>)
 800d444:	2220      	movs	r2, #32
 800d446:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800d448:	4b21      	ldr	r3, [pc, #132]	; (800d4d0 <_tx_thread_system_suspend+0x28c>)
 800d44a:	2200      	movs	r2, #0
 800d44c:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 800d44e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d450:	2b00      	cmp	r3, #0
 800d452:	d008      	beq.n	800d466 <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d102      	bne.n	800d466 <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 800d460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d462:	2200      	movs	r2, #0
 800d464:	61da      	str	r2, [r3, #28]
 800d466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d468:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d46a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d46c:	f383 8810 	msr	PRIMASK, r3
}
 800d470:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d472:	4b12      	ldr	r3, [pc, #72]	; (800d4bc <_tx_thread_system_suspend+0x278>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 800d478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f040 80bf 	bne.w	800d5fe <_tx_thread_system_suspend+0x3ba>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d480:	4b1b      	ldr	r3, [pc, #108]	; (800d4f0 <_tx_thread_system_suspend+0x2ac>)
 800d482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d486:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d488:	f3ef 8305 	mrs	r3, IPSR
 800d48c:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800d48e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800d490:	2b00      	cmp	r3, #0
 800d492:	d10c      	bne.n	800d4ae <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d494:	f3ef 8310 	mrs	r3, PRIMASK
 800d498:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800d49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800d49c:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d49e:	b662      	cpsie	i
}
 800d4a0:	bf00      	nop
 800d4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a8:	f383 8810 	msr	PRIMASK, r3
}
 800d4ac:	bf00      	nop
}
 800d4ae:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800d4b0:	e0a5      	b.n	800d5fe <_tx_thread_system_suspend+0x3ba>
 800d4b2:	bf00      	nop
 800d4b4:	20001680 	.word	0x20001680
 800d4b8:	20001c84 	.word	0x20001c84
 800d4bc:	20001718 	.word	0x20001718
 800d4c0:	20001c9c 	.word	0x20001c9c
 800d4c4:	20001ca0 	.word	0x20001ca0
 800d4c8:	2000000c 	.word	0x2000000c
 800d4cc:	e0001004 	.word	0xe0001004
 800d4d0:	20001684 	.word	0x20001684
 800d4d4:	20001c98 	.word	0x20001c98
 800d4d8:	20001c94 	.word	0x20001c94
 800d4dc:	20001c88 	.word	0x20001c88
 800d4e0:	20001ca4 	.word	0x20001ca4
 800d4e4:	20001698 	.word	0x20001698
 800d4e8:	20001690 	.word	0x20001690
 800d4ec:	20001694 	.word	0x20001694
 800d4f0:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800d4f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4f6:	fa93 f3a3 	rbit	r3, r3
 800d4fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4fe:	fab3 f383 	clz	r3, r3
 800d502:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800d504:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d506:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d508:	4413      	add	r3, r2
 800d50a:	4a41      	ldr	r2, [pc, #260]	; (800d610 <_tx_thread_system_suspend+0x3cc>)
 800d50c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800d50e:	4b41      	ldr	r3, [pc, #260]	; (800d614 <_tx_thread_system_suspend+0x3d0>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	429a      	cmp	r2, r3
 800d516:	d139      	bne.n	800d58c <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d518:	4b3d      	ldr	r3, [pc, #244]	; (800d610 <_tx_thread_system_suspend+0x3cc>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a3e      	ldr	r2, [pc, #248]	; (800d618 <_tx_thread_system_suspend+0x3d4>)
 800d51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d522:	4a3c      	ldr	r2, [pc, #240]	; (800d614 <_tx_thread_system_suspend+0x3d0>)
 800d524:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 800d526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d00a      	beq.n	800d542 <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d52c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d534:	429a      	cmp	r2, r3
 800d536:	d104      	bne.n	800d542 <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d538:	4b36      	ldr	r3, [pc, #216]	; (800d614 <_tx_thread_system_suspend+0x3d0>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	461a      	mov	r2, r3
 800d53e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d540:	61da      	str	r2, [r3, #28]
 800d542:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d544:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d548:	f383 8810 	msr	PRIMASK, r3
}
 800d54c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d54e:	4b33      	ldr	r3, [pc, #204]	; (800d61c <_tx_thread_system_suspend+0x3d8>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 800d554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d556:	2b00      	cmp	r3, #0
 800d558:	d153      	bne.n	800d602 <_tx_thread_system_suspend+0x3be>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d55a:	4b31      	ldr	r3, [pc, #196]	; (800d620 <_tx_thread_system_suspend+0x3dc>)
 800d55c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d560:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d562:	f3ef 8305 	mrs	r3, IPSR
 800d566:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800d568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d10c      	bne.n	800d588 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d56e:	f3ef 8310 	mrs	r3, PRIMASK
 800d572:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d574:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800d576:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d578:	b662      	cpsie	i
}
 800d57a:	bf00      	nop
 800d57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d580:	6a3b      	ldr	r3, [r7, #32]
 800d582:	f383 8810 	msr	PRIMASK, r3
}
 800d586:	bf00      	nop
}
 800d588:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800d58a:	e03a      	b.n	800d602 <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 800d58c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d00a      	beq.n	800d5a8 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d104      	bne.n	800d5a8 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d59e:	4b1d      	ldr	r3, [pc, #116]	; (800d614 <_tx_thread_system_suspend+0x3d0>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5a6:	61da      	str	r2, [r3, #28]
 800d5a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	f383 8810 	msr	PRIMASK, r3
}
 800d5b2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d5b4:	4b17      	ldr	r3, [pc, #92]	; (800d614 <_tx_thread_system_suspend+0x3d0>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d022      	beq.n	800d606 <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d5c0:	4b16      	ldr	r3, [pc, #88]	; (800d61c <_tx_thread_system_suspend+0x3d8>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 800d5c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d11c      	bne.n	800d606 <_tx_thread_system_suspend+0x3c2>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d5cc:	4b14      	ldr	r3, [pc, #80]	; (800d620 <_tx_thread_system_suspend+0x3dc>)
 800d5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5d2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d5d4:	f3ef 8305 	mrs	r3, IPSR
 800d5d8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d5da:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d10c      	bne.n	800d5fa <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d5e0:	f3ef 8310 	mrs	r3, PRIMASK
 800d5e4:	617b      	str	r3, [r7, #20]
    return(posture);
 800d5e6:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800d5e8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d5ea:	b662      	cpsie	i
}
 800d5ec:	bf00      	nop
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f383 8810 	msr	PRIMASK, r3
}
 800d5f8:	bf00      	nop
}
 800d5fa:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800d5fc:	e003      	b.n	800d606 <_tx_thread_system_suspend+0x3c2>
                return;
 800d5fe:	bf00      	nop
 800d600:	e002      	b.n	800d608 <_tx_thread_system_suspend+0x3c4>
            return;
 800d602:	bf00      	nop
 800d604:	e000      	b.n	800d608 <_tx_thread_system_suspend+0x3c4>
    return;
 800d606:	bf00      	nop
}
 800d608:	3790      	adds	r7, #144	; 0x90
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	20001694 	.word	0x20001694
 800d614:	20001684 	.word	0x20001684
 800d618:	20001698 	.word	0x20001698
 800d61c:	20001718 	.word	0x20001718
 800d620:	e000ed04 	.word	0xe000ed04

0800d624 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b08e      	sub	sp, #56	; 0x38
 800d628:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d62a:	4b5f      	ldr	r3, [pc, #380]	; (800d7a8 <_tx_thread_time_slice+0x184>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d630:	f3ef 8310 	mrs	r3, PRIMASK
 800d634:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d636:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d638:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d63a:	b672      	cpsid	i
    return(int_posture);
 800d63c:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800d63e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d640:	4b5a      	ldr	r3, [pc, #360]	; (800d7ac <_tx_thread_time_slice+0x188>)
 800d642:	2200      	movs	r2, #0
 800d644:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d024      	beq.n	800d696 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d650:	2b00      	cmp	r3, #0
 800d652:	d120      	bne.n	800d696 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	69d2      	ldr	r2, [r2, #28]
 800d65a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	699b      	ldr	r3, [r3, #24]
 800d660:	4a53      	ldr	r2, [pc, #332]	; (800d7b0 <_tx_thread_time_slice+0x18c>)
 800d662:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6a1a      	ldr	r2, [r3, #32]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d013      	beq.n	800d696 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d676:	429a      	cmp	r2, r3
 800d678:	d10d      	bne.n	800d696 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d680:	6a12      	ldr	r2, [r2, #32]
 800d682:	494c      	ldr	r1, [pc, #304]	; (800d7b4 <_tx_thread_time_slice+0x190>)
 800d684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d688:	4b4b      	ldr	r3, [pc, #300]	; (800d7b8 <_tx_thread_time_slice+0x194>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a49      	ldr	r2, [pc, #292]	; (800d7b4 <_tx_thread_time_slice+0x190>)
 800d68e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d692:	4a4a      	ldr	r2, [pc, #296]	; (800d7bc <_tx_thread_time_slice+0x198>)
 800d694:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d696:	f3ef 8305 	mrs	r3, IPSR
 800d69a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d69c:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 800d69e:	4b48      	ldr	r3, [pc, #288]	; (800d7c0 <_tx_thread_time_slice+0x19c>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 800d6a6:	4b47      	ldr	r3, [pc, #284]	; (800d7c4 <_tx_thread_time_slice+0x1a0>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d6ac:	4b46      	ldr	r3, [pc, #280]	; (800d7c8 <_tx_thread_time_slice+0x1a4>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	623b      	str	r3, [r7, #32]
 800d6b2:	6a3b      	ldr	r3, [r7, #32]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d06d      	beq.n	800d794 <_tx_thread_time_slice+0x170>
 800d6b8:	4b44      	ldr	r3, [pc, #272]	; (800d7cc <_tx_thread_time_slice+0x1a8>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f003 0301 	and.w	r3, r3, #1
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d067      	beq.n	800d794 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d6c4:	f3ef 8305 	mrs	r3, IPSR
 800d6c8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	4b3c      	ldr	r3, [pc, #240]	; (800d7c0 <_tx_thread_time_slice+0x19c>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	61fb      	str	r3, [r7, #28]
 800d6d4:	4b34      	ldr	r3, [pc, #208]	; (800d7a8 <_tx_thread_time_slice+0x184>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	633b      	str	r3, [r7, #48]	; 0x30
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d10b      	bne.n	800d6f8 <_tx_thread_time_slice+0xd4>
 800d6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e4:	637b      	str	r3, [r7, #52]	; 0x34
 800d6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6ea:	041a      	lsls	r2, r3, #16
 800d6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d6f4:	637b      	str	r3, [r7, #52]	; 0x34
 800d6f6:	e00e      	b.n	800d716 <_tx_thread_time_slice+0xf2>
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d6fe:	d205      	bcs.n	800d70c <_tx_thread_time_slice+0xe8>
 800d700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d702:	637b      	str	r3, [r7, #52]	; 0x34
 800d704:	f04f 33ff 	mov.w	r3, #4294967295
 800d708:	633b      	str	r3, [r7, #48]	; 0x30
 800d70a:	e004      	b.n	800d716 <_tx_thread_time_slice+0xf2>
 800d70c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d710:	633b      	str	r3, [r7, #48]	; 0x30
 800d712:	2300      	movs	r3, #0
 800d714:	637b      	str	r3, [r7, #52]	; 0x34
 800d716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d718:	6a3b      	ldr	r3, [r7, #32]
 800d71a:	601a      	str	r2, [r3, #0]
 800d71c:	6a3b      	ldr	r3, [r7, #32]
 800d71e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d720:	605a      	str	r2, [r3, #4]
 800d722:	6a3b      	ldr	r3, [r7, #32]
 800d724:	2205      	movs	r2, #5
 800d726:	609a      	str	r2, [r3, #8]
 800d728:	4b29      	ldr	r3, [pc, #164]	; (800d7d0 <_tx_thread_time_slice+0x1ac>)
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	6a3b      	ldr	r3, [r7, #32]
 800d72e:	60da      	str	r2, [r3, #12]
 800d730:	4b22      	ldr	r3, [pc, #136]	; (800d7bc <_tx_thread_time_slice+0x198>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	461a      	mov	r2, r3
 800d736:	6a3b      	ldr	r3, [r7, #32]
 800d738:	611a      	str	r2, [r3, #16]
 800d73a:	6a3b      	ldr	r3, [r7, #32]
 800d73c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d73e:	615a      	str	r2, [r3, #20]
 800d740:	6a3b      	ldr	r3, [r7, #32]
 800d742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d744:	619a      	str	r2, [r3, #24]
 800d746:	1d3a      	adds	r2, r7, #4
 800d748:	6a3b      	ldr	r3, [r7, #32]
 800d74a:	61da      	str	r2, [r3, #28]
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	3320      	adds	r3, #32
 800d750:	623b      	str	r3, [r7, #32]
 800d752:	4b20      	ldr	r3, [pc, #128]	; (800d7d4 <_tx_thread_time_slice+0x1b0>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	6a3a      	ldr	r2, [r7, #32]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d314      	bcc.n	800d786 <_tx_thread_time_slice+0x162>
 800d75c:	4b1e      	ldr	r3, [pc, #120]	; (800d7d8 <_tx_thread_time_slice+0x1b4>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	623b      	str	r3, [r7, #32]
 800d762:	4a19      	ldr	r2, [pc, #100]	; (800d7c8 <_tx_thread_time_slice+0x1a4>)
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	6013      	str	r3, [r2, #0]
 800d768:	4b1c      	ldr	r3, [pc, #112]	; (800d7dc <_tx_thread_time_slice+0x1b8>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	6a3a      	ldr	r2, [r7, #32]
 800d76e:	621a      	str	r2, [r3, #32]
 800d770:	4b1b      	ldr	r3, [pc, #108]	; (800d7e0 <_tx_thread_time_slice+0x1bc>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00d      	beq.n	800d794 <_tx_thread_time_slice+0x170>
 800d778:	4b19      	ldr	r3, [pc, #100]	; (800d7e0 <_tx_thread_time_slice+0x1bc>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4a17      	ldr	r2, [pc, #92]	; (800d7dc <_tx_thread_time_slice+0x1b8>)
 800d77e:	6812      	ldr	r2, [r2, #0]
 800d780:	4610      	mov	r0, r2
 800d782:	4798      	blx	r3
 800d784:	e006      	b.n	800d794 <_tx_thread_time_slice+0x170>
 800d786:	4a10      	ldr	r2, [pc, #64]	; (800d7c8 <_tx_thread_time_slice+0x1a4>)
 800d788:	6a3b      	ldr	r3, [r7, #32]
 800d78a:	6013      	str	r3, [r2, #0]
 800d78c:	4b13      	ldr	r3, [pc, #76]	; (800d7dc <_tx_thread_time_slice+0x1b8>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	6a3a      	ldr	r2, [r7, #32]
 800d792:	621a      	str	r2, [r3, #32]
 800d794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d796:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	f383 8810 	msr	PRIMASK, r3
}
 800d79e:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800d7a0:	bf00      	nop
 800d7a2:	3738      	adds	r7, #56	; 0x38
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	20001680 	.word	0x20001680
 800d7ac:	20001728 	.word	0x20001728
 800d7b0:	20001c84 	.word	0x20001c84
 800d7b4:	20001698 	.word	0x20001698
 800d7b8:	20001694 	.word	0x20001694
 800d7bc:	20001684 	.word	0x20001684
 800d7c0:	2000000c 	.word	0x2000000c
 800d7c4:	20001718 	.word	0x20001718
 800d7c8:	20001c9c 	.word	0x20001c9c
 800d7cc:	20001ca0 	.word	0x20001ca0
 800d7d0:	e0001004 	.word	0xe0001004
 800d7d4:	20001c98 	.word	0x20001c98
 800d7d8:	20001c94 	.word	0x20001c94
 800d7dc:	20001c88 	.word	0x20001c88
 800d7e0:	20001ca4 	.word	0x20001ca4

0800d7e4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b08a      	sub	sp, #40	; 0x28
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d7f0:	f3ef 8310 	mrs	r3, PRIMASK
 800d7f4:	617b      	str	r3, [r7, #20]
    return(posture);
 800d7f6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d7f8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d7fa:	b672      	cpsid	i
    return(int_posture);
 800d7fc:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800d7fe:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d804:	2b04      	cmp	r3, #4
 800d806:	d10e      	bne.n	800d826 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800d808:	4b13      	ldr	r3, [pc, #76]	; (800d858 <_tx_thread_timeout+0x74>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	3301      	adds	r3, #1
 800d80e:	4a12      	ldr	r2, [pc, #72]	; (800d858 <_tx_thread_timeout+0x74>)
 800d810:	6013      	str	r3, [r2, #0]
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f383 8810 	msr	PRIMASK, r3
}
 800d81c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d81e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d820:	f7ff fb56 	bl	800ced0 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800d824:	e013      	b.n	800d84e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800d826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d82a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d832:	61bb      	str	r3, [r7, #24]
 800d834:	6a3b      	ldr	r3, [r7, #32]
 800d836:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	f383 8810 	msr	PRIMASK, r3
}
 800d83e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d003      	beq.n	800d84e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	69b9      	ldr	r1, [r7, #24]
 800d84a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d84c:	4798      	blx	r3
}
 800d84e:	bf00      	nop
 800d850:	3728      	adds	r7, #40	; 0x28
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	20001718 	.word	0x20001718

0800d85c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d862:	f3ef 8310 	mrs	r3, PRIMASK
 800d866:	607b      	str	r3, [r7, #4]
    return(posture);
 800d868:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800d86a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d86c:	b672      	cpsid	i
    return(int_posture);
 800d86e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800d870:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800d872:	4b09      	ldr	r3, [pc, #36]	; (800d898 <_tx_timer_expiration_process+0x3c>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	3301      	adds	r3, #1
 800d878:	4a07      	ldr	r2, [pc, #28]	; (800d898 <_tx_timer_expiration_process+0x3c>)
 800d87a:	6013      	str	r3, [r2, #0]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	f383 8810 	msr	PRIMASK, r3
}
 800d886:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800d888:	4804      	ldr	r0, [pc, #16]	; (800d89c <_tx_timer_expiration_process+0x40>)
 800d88a:	f7ff fb21 	bl	800ced0 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800d88e:	bf00      	nop
 800d890:	3710      	adds	r7, #16
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	20001718 	.word	0x20001718
 800d89c:	200017c8 	.word	0x200017c8

0800d8a0 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800d8a0:	b590      	push	{r4, r7, lr}
 800d8a2:	b089      	sub	sp, #36	; 0x24
 800d8a4:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800d8a6:	4b28      	ldr	r3, [pc, #160]	; (800d948 <_tx_timer_initialize+0xa8>)
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800d8ac:	4b27      	ldr	r3, [pc, #156]	; (800d94c <_tx_timer_initialize+0xac>)
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d8b2:	4b27      	ldr	r3, [pc, #156]	; (800d950 <_tx_timer_initialize+0xb0>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800d8b8:	4b26      	ldr	r3, [pc, #152]	; (800d954 <_tx_timer_initialize+0xb4>)
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800d8be:	4b26      	ldr	r3, [pc, #152]	; (800d958 <_tx_timer_initialize+0xb8>)
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800d8c4:	2280      	movs	r2, #128	; 0x80
 800d8c6:	2100      	movs	r1, #0
 800d8c8:	4824      	ldr	r0, [pc, #144]	; (800d95c <_tx_timer_initialize+0xbc>)
 800d8ca:	f006 ff07 	bl	80146dc <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800d8ce:	4b24      	ldr	r3, [pc, #144]	; (800d960 <_tx_timer_initialize+0xc0>)
 800d8d0:	4a22      	ldr	r2, [pc, #136]	; (800d95c <_tx_timer_initialize+0xbc>)
 800d8d2:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800d8d4:	4b23      	ldr	r3, [pc, #140]	; (800d964 <_tx_timer_initialize+0xc4>)
 800d8d6:	4a21      	ldr	r2, [pc, #132]	; (800d95c <_tx_timer_initialize+0xbc>)
 800d8d8:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800d8da:	4b23      	ldr	r3, [pc, #140]	; (800d968 <_tx_timer_initialize+0xc8>)
 800d8dc:	4a23      	ldr	r2, [pc, #140]	; (800d96c <_tx_timer_initialize+0xcc>)
 800d8de:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800d8e0:	4b21      	ldr	r3, [pc, #132]	; (800d968 <_tx_timer_initialize+0xc8>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3304      	adds	r3, #4
 800d8e6:	4a20      	ldr	r2, [pc, #128]	; (800d968 <_tx_timer_initialize+0xc8>)
 800d8e8:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800d8ea:	4b21      	ldr	r3, [pc, #132]	; (800d970 <_tx_timer_initialize+0xd0>)
 800d8ec:	4a21      	ldr	r2, [pc, #132]	; (800d974 <_tx_timer_initialize+0xd4>)
 800d8ee:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800d8f0:	4b21      	ldr	r3, [pc, #132]	; (800d978 <_tx_timer_initialize+0xd8>)
 800d8f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d8f6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800d8f8:	4b20      	ldr	r3, [pc, #128]	; (800d97c <_tx_timer_initialize+0xdc>)
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800d8fe:	4b1c      	ldr	r3, [pc, #112]	; (800d970 <_tx_timer_initialize+0xd0>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	4a1d      	ldr	r2, [pc, #116]	; (800d978 <_tx_timer_initialize+0xd8>)
 800d904:	6812      	ldr	r2, [r2, #0]
 800d906:	491d      	ldr	r1, [pc, #116]	; (800d97c <_tx_timer_initialize+0xdc>)
 800d908:	6809      	ldr	r1, [r1, #0]
 800d90a:	481c      	ldr	r0, [pc, #112]	; (800d97c <_tx_timer_initialize+0xdc>)
 800d90c:	6800      	ldr	r0, [r0, #0]
 800d90e:	2400      	movs	r4, #0
 800d910:	9405      	str	r4, [sp, #20]
 800d912:	2400      	movs	r4, #0
 800d914:	9404      	str	r4, [sp, #16]
 800d916:	9003      	str	r0, [sp, #12]
 800d918:	9102      	str	r1, [sp, #8]
 800d91a:	9201      	str	r2, [sp, #4]
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	4b18      	ldr	r3, [pc, #96]	; (800d980 <_tx_timer_initialize+0xe0>)
 800d920:	4a18      	ldr	r2, [pc, #96]	; (800d984 <_tx_timer_initialize+0xe4>)
 800d922:	4919      	ldr	r1, [pc, #100]	; (800d988 <_tx_timer_initialize+0xe8>)
 800d924:	4819      	ldr	r0, [pc, #100]	; (800d98c <_tx_timer_initialize+0xec>)
 800d926:	f7fe ff8b 	bl	800c840 <_tx_thread_create>
 800d92a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d1e5      	bne.n	800d8fe <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800d932:	4b17      	ldr	r3, [pc, #92]	; (800d990 <_tx_timer_initialize+0xf0>)
 800d934:	2200      	movs	r2, #0
 800d936:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800d938:	4b16      	ldr	r3, [pc, #88]	; (800d994 <_tx_timer_initialize+0xf4>)
 800d93a:	2200      	movs	r2, #0
 800d93c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800d93e:	bf00      	nop
 800d940:	370c      	adds	r7, #12
 800d942:	46bd      	mov	sp, r7
 800d944:	bd90      	pop	{r4, r7, pc}
 800d946:	bf00      	nop
 800d948:	20001724 	.word	0x20001724
 800d94c:	20001c84 	.word	0x20001c84
 800d950:	20001728 	.word	0x20001728
 800d954:	200017b8 	.word	0x200017b8
 800d958:	200017c4 	.word	0x200017c4
 800d95c:	2000172c 	.word	0x2000172c
 800d960:	200017ac 	.word	0x200017ac
 800d964:	200017b4 	.word	0x200017b4
 800d968:	200017b0 	.word	0x200017b0
 800d96c:	200017a8 	.word	0x200017a8
 800d970:	20001878 	.word	0x20001878
 800d974:	20001884 	.word	0x20001884
 800d978:	2000187c 	.word	0x2000187c
 800d97c:	20001880 	.word	0x20001880
 800d980:	4154494d 	.word	0x4154494d
 800d984:	0800dacd 	.word	0x0800dacd
 800d988:	080151d0 	.word	0x080151d0
 800d98c:	200017c8 	.word	0x200017c8
 800d990:	200017bc 	.word	0x200017bc
 800d994:	200017c0 	.word	0x200017c0

0800d998 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800d998:	b480      	push	{r7}
 800d99a:	b089      	sub	sp, #36	; 0x24
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d04a      	beq.n	800da42 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b2:	d046      	beq.n	800da42 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	699b      	ldr	r3, [r3, #24]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d142      	bne.n	800da42 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	2b20      	cmp	r3, #32
 800d9c0:	d902      	bls.n	800d9c8 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800d9c2:	231f      	movs	r3, #31
 800d9c4:	61bb      	str	r3, [r7, #24]
 800d9c6:	e002      	b.n	800d9ce <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800d9ce:	4b20      	ldr	r3, [pc, #128]	; (800da50 <_tx_timer_system_activate+0xb8>)
 800d9d0:	681a      	ldr	r2, [r3, #0]
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	4413      	add	r3, r2
 800d9d8:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800d9da:	4b1e      	ldr	r3, [pc, #120]	; (800da54 <_tx_timer_system_activate+0xbc>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	69fa      	ldr	r2, [r7, #28]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d30b      	bcc.n	800d9fc <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800d9e4:	4b1b      	ldr	r3, [pc, #108]	; (800da54 <_tx_timer_system_activate+0xbc>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	69fa      	ldr	r2, [r7, #28]
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	109b      	asrs	r3, r3, #2
 800d9ee:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800d9f0:	4b19      	ldr	r3, [pc, #100]	; (800da58 <_tx_timer_system_activate+0xc0>)
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d109      	bne.n	800da18 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	601a      	str	r2, [r3, #0]
 800da16:	e011      	b.n	800da3c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	695b      	ldr	r3, [r3, #20]
 800da22:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	68fa      	ldr	r2, [r7, #12]
 800da34:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	68ba      	ldr	r2, [r7, #8]
 800da3a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	69fa      	ldr	r2, [r7, #28]
 800da40:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800da42:	bf00      	nop
 800da44:	3724      	adds	r7, #36	; 0x24
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop
 800da50:	200017b4 	.word	0x200017b4
 800da54:	200017b0 	.word	0x200017b0
 800da58:	200017ac 	.word	0x200017ac

0800da5c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b087      	sub	sp, #28
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	699b      	ldr	r3, [r3, #24]
 800da68:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d026      	beq.n	800dabe <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	691b      	ldr	r3, [r3, #16]
 800da74:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d108      	bne.n	800da90 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	429a      	cmp	r2, r3
 800da86:	d117      	bne.n	800dab8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	2200      	movs	r2, #0
 800da8c:	601a      	str	r2, [r3, #0]
 800da8e:	e013      	b.n	800dab8 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	695b      	ldr	r3, [r3, #20]
 800da94:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	693a      	ldr	r2, [r7, #16]
 800daa0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d105      	bne.n	800dab8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	697a      	ldr	r2, [r7, #20]
 800dab0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	693a      	ldr	r2, [r7, #16]
 800dab6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2200      	movs	r2, #0
 800dabc:	619a      	str	r2, [r3, #24]
    }
}
 800dabe:	bf00      	nop
 800dac0:	371c      	adds	r7, #28
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr
	...

0800dacc <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b098      	sub	sp, #96	; 0x60
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800dad4:	2300      	movs	r3, #0
 800dad6:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	4a73      	ldr	r2, [pc, #460]	; (800dca8 <_tx_timer_thread_entry+0x1dc>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	f040 80de 	bne.w	800dc9e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dae2:	f3ef 8310 	mrs	r3, PRIMASK
 800dae6:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800dae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800daea:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800daec:	b672      	cpsid	i
    return(int_posture);
 800daee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800daf0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800daf2:	4b6e      	ldr	r3, [pc, #440]	; (800dcac <_tx_timer_thread_entry+0x1e0>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d003      	beq.n	800db08 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f107 020c 	add.w	r2, r7, #12
 800db06:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800db08:	4b68      	ldr	r3, [pc, #416]	; (800dcac <_tx_timer_thread_entry+0x1e0>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2200      	movs	r2, #0
 800db0e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800db10:	4b66      	ldr	r3, [pc, #408]	; (800dcac <_tx_timer_thread_entry+0x1e0>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	3304      	adds	r3, #4
 800db16:	4a65      	ldr	r2, [pc, #404]	; (800dcac <_tx_timer_thread_entry+0x1e0>)
 800db18:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800db1a:	4b64      	ldr	r3, [pc, #400]	; (800dcac <_tx_timer_thread_entry+0x1e0>)
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	4b64      	ldr	r3, [pc, #400]	; (800dcb0 <_tx_timer_thread_entry+0x1e4>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	429a      	cmp	r2, r3
 800db24:	d103      	bne.n	800db2e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800db26:	4b63      	ldr	r3, [pc, #396]	; (800dcb4 <_tx_timer_thread_entry+0x1e8>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a60      	ldr	r2, [pc, #384]	; (800dcac <_tx_timer_thread_entry+0x1e0>)
 800db2c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800db2e:	4b62      	ldr	r3, [pc, #392]	; (800dcb8 <_tx_timer_thread_entry+0x1ec>)
 800db30:	2200      	movs	r2, #0
 800db32:	601a      	str	r2, [r3, #0]
 800db34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db36:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3a:	f383 8810 	msr	PRIMASK, r3
}
 800db3e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db40:	f3ef 8310 	mrs	r3, PRIMASK
 800db44:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800db46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800db48:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800db4a:	b672      	cpsid	i
    return(int_posture);
 800db4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800db4e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800db50:	e07f      	b.n	800dc52 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	691b      	ldr	r3, [r3, #16]
 800db5a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800db5c:	2300      	movs	r3, #0
 800db5e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800db60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db64:	429a      	cmp	r2, r3
 800db66:	d102      	bne.n	800db6e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800db68:	2300      	movs	r3, #0
 800db6a:	60fb      	str	r3, [r7, #12]
 800db6c:	e00e      	b.n	800db8c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800db6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db70:	695b      	ldr	r3, [r3, #20]
 800db72:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800db74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db78:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800db7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db7e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800db80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db82:	f107 020c 	add.w	r2, r7, #12
 800db86:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800db88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db8a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800db8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2b20      	cmp	r3, #32
 800db92:	d911      	bls.n	800dbb8 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800db94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800db9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db9e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800dba0:	2300      	movs	r3, #0
 800dba2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800dba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dba6:	f107 0208 	add.w	r2, r7, #8
 800dbaa:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800dbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dbb0:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800dbb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbb4:	60bb      	str	r3, [r7, #8]
 800dbb6:	e01a      	b.n	800dbee <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800dbb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800dbbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbc0:	68db      	ldr	r3, [r3, #12]
 800dbc2:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800dbc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbc6:	685a      	ldr	r2, [r3, #4]
 800dbc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbca:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800dbcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d009      	beq.n	800dbe8 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800dbd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbd6:	f107 0208 	add.w	r2, r7, #8
 800dbda:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800dbdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dbe0:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800dbe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe4:	60bb      	str	r3, [r7, #8]
 800dbe6:	e002      	b.n	800dbee <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800dbe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbea:	2200      	movs	r2, #0
 800dbec:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800dbee:	4a33      	ldr	r2, [pc, #204]	; (800dcbc <_tx_timer_thread_entry+0x1f0>)
 800dbf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbf2:	6013      	str	r3, [r2, #0]
 800dbf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfa:	f383 8810 	msr	PRIMASK, r3
}
 800dbfe:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800dc00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d002      	beq.n	800dc0c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800dc06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc08:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dc0a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dc0c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc10:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800dc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800dc14:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800dc16:	b672      	cpsid	i
    return(int_posture);
 800dc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800dc1a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800dc1c:	4b27      	ldr	r3, [pc, #156]	; (800dcbc <_tx_timer_thread_entry+0x1f0>)
 800dc1e:	2200      	movs	r2, #0
 800dc20:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d105      	bne.n	800dc36 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800dc2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800dc30:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dc32:	f7ff feb1 	bl	800d998 <_tx_timer_system_activate>
 800dc36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc38:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	f383 8810 	msr	PRIMASK, r3
}
 800dc40:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dc42:	f3ef 8310 	mrs	r3, PRIMASK
 800dc46:	623b      	str	r3, [r7, #32]
    return(posture);
 800dc48:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800dc4a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dc4c:	b672      	cpsid	i
    return(int_posture);
 800dc4e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800dc50:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	f47f af7c 	bne.w	800db52 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800dc5a:	4b17      	ldr	r3, [pc, #92]	; (800dcb8 <_tx_timer_thread_entry+0x1ec>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d116      	bne.n	800dc90 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800dc62:	4b17      	ldr	r3, [pc, #92]	; (800dcc0 <_tx_timer_thread_entry+0x1f4>)
 800dc64:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800dc66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc68:	2203      	movs	r2, #3
 800dc6a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800dc6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc6e:	2201      	movs	r2, #1
 800dc70:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800dc72:	4b14      	ldr	r3, [pc, #80]	; (800dcc4 <_tx_timer_thread_entry+0x1f8>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	3301      	adds	r3, #1
 800dc78:	4a12      	ldr	r2, [pc, #72]	; (800dcc4 <_tx_timer_thread_entry+0x1f8>)
 800dc7a:	6013      	str	r3, [r2, #0]
 800dc7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc7e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	f383 8810 	msr	PRIMASK, r3
}
 800dc86:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800dc88:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dc8a:	f7ff fadb 	bl	800d244 <_tx_thread_system_suspend>
 800dc8e:	e728      	b.n	800dae2 <_tx_timer_thread_entry+0x16>
 800dc90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc92:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	f383 8810 	msr	PRIMASK, r3
}
 800dc9a:	bf00      	nop
            TX_DISABLE
 800dc9c:	e721      	b.n	800dae2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800dc9e:	bf00      	nop
 800dca0:	3760      	adds	r7, #96	; 0x60
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	4154494d 	.word	0x4154494d
 800dcac:	200017b4 	.word	0x200017b4
 800dcb0:	200017b0 	.word	0x200017b0
 800dcb4:	200017ac 	.word	0x200017ac
 800dcb8:	200017b8 	.word	0x200017b8
 800dcbc:	200017c4 	.word	0x200017c4
 800dcc0:	200017c8 	.word	0x200017c8
 800dcc4:	20001718 	.word	0x20001718

0800dcc8 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 800dccc:	4b0b      	ldr	r3, [pc, #44]	; (800dcfc <_tx_trace_initialize+0x34>)
 800dcce:	2200      	movs	r2, #0
 800dcd0:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 800dcd2:	4b0b      	ldr	r3, [pc, #44]	; (800dd00 <_tx_trace_initialize+0x38>)
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 800dcd8:	4b0a      	ldr	r3, [pc, #40]	; (800dd04 <_tx_trace_initialize+0x3c>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 800dcde:	4b0a      	ldr	r3, [pc, #40]	; (800dd08 <_tx_trace_initialize+0x40>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 800dce4:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <_tx_trace_initialize+0x44>)
 800dce6:	2200      	movs	r2, #0
 800dce8:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 800dcea:	4b09      	ldr	r3, [pc, #36]	; (800dd10 <_tx_trace_initialize+0x48>)
 800dcec:	2200      	movs	r2, #0
 800dcee:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 800dcf0:	bf00      	nop
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	20001c88 	.word	0x20001c88
 800dd00:	20001c8c 	.word	0x20001c8c
 800dd04:	20001c90 	.word	0x20001c90
 800dd08:	20001c94 	.word	0x20001c94
 800dd0c:	20001c98 	.word	0x20001c98
 800dd10:	20001c9c 	.word	0x20001c9c

0800dd14 <_tx_trace_object_register>:
/*                                            check for null name,        */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b08d      	sub	sp, #52	; 0x34
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60b9      	str	r1, [r7, #8]
 800dd1c:	607a      	str	r2, [r7, #4]
 800dd1e:	603b      	str	r3, [r7, #0]
 800dd20:	4603      	mov	r3, r0
 800dd22:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 800dd24:	4b6f      	ldr	r3, [pc, #444]	; (800dee4 <_tx_trace_object_register+0x1d0>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f000 80d5 	beq.w	800ded8 <_tx_trace_object_register+0x1c4>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 800dd2e:	4b6e      	ldr	r3, [pc, #440]	; (800dee8 <_tx_trace_object_register+0x1d4>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 800dd34:	4b6d      	ldr	r3, [pc, #436]	; (800deec <_tx_trace_object_register+0x1d8>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f000 80cd 	beq.w	800ded8 <_tx_trace_object_register+0x1c4>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 800dd3e:	6a3b      	ldr	r3, [r7, #32]
 800dd40:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 800dd42:	2300      	movs	r3, #0
 800dd44:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 800dd46:	4b6a      	ldr	r3, [pc, #424]	; (800def0 <_tx_trace_object_register+0x1dc>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800dd4c:	4b65      	ldr	r3, [pc, #404]	; (800dee4 <_tx_trace_object_register+0x1d0>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 800dd52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd54:	4613      	mov	r3, r2
 800dd56:	005b      	lsls	r3, r3, #1
 800dd58:	4413      	add	r3, r2
 800dd5a:	011b      	lsls	r3, r3, #4
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	4413      	add	r3, r2
 800dd62:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d103      	bne.n	800dd78 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800dd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd72:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800dd74:	2301      	movs	r3, #1
 800dd76:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	685a      	ldr	r2, [r3, #4]
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	429a      	cmp	r2, r3
 800dd80:	d103      	bne.n	800dd8a <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800dd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd84:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800dd86:	2301      	movs	r3, #1
 800dd88:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 800dd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d02d      	beq.n	800ddec <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 800dd90:	69bb      	ldr	r3, [r7, #24]
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d11a      	bne.n	800ddce <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 800dd98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd9a:	6a3b      	ldr	r3, [r7, #32]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d102      	bne.n	800dda6 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 800dda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dda4:	e013      	b.n	800ddce <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800dda6:	4b4f      	ldr	r3, [pc, #316]	; (800dee4 <_tx_trace_object_register+0x1d0>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800ddac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddae:	4613      	mov	r3, r2
 800ddb0:	005b      	lsls	r3, r3, #1
 800ddb2:	4413      	add	r3, r2
 800ddb4:	011b      	lsls	r3, r3, #4
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	4413      	add	r3, r2
 800ddbc:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 800ddc2:	69bb      	ldr	r3, [r7, #24]
 800ddc4:	785b      	ldrb	r3, [r3, #1]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d001      	beq.n	800ddce <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 800ddca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddcc:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 800ddce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 800ddd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d301      	bcc.n	800dde0 <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 800dddc:	2300      	movs	r3, #0
 800ddde:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 800dde0:	4b43      	ldr	r3, [pc, #268]	; (800def0 <_tx_trace_object_register+0x1dc>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d1b0      	bne.n	800dd4c <_tx_trace_object_register+0x38>
 800ddea:	e000      	b.n	800ddee <_tx_trace_object_register+0xda>
                    break;
 800ddec:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 800ddee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddf0:	6a3b      	ldr	r3, [r7, #32]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d270      	bcs.n	800ded8 <_tx_trace_object_register+0x1c4>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 800ddf6:	4b3d      	ldr	r3, [pc, #244]	; (800deec <_tx_trace_object_register+0x1d8>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	3b01      	subs	r3, #1
 800ddfc:	4a3b      	ldr	r2, [pc, #236]	; (800deec <_tx_trace_object_register+0x1d8>)
 800ddfe:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 800de00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de02:	3301      	adds	r3, #1
 800de04:	6a3a      	ldr	r2, [r7, #32]
 800de06:	429a      	cmp	r2, r3
 800de08:	d904      	bls.n	800de14 <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 800de0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0c:	3301      	adds	r3, #1
 800de0e:	4a38      	ldr	r2, [pc, #224]	; (800def0 <_tx_trace_object_register+0x1dc>)
 800de10:	6013      	str	r3, [r2, #0]
 800de12:	e002      	b.n	800de1a <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 800de14:	4b36      	ldr	r3, [pc, #216]	; (800def0 <_tx_trace_object_register+0x1dc>)
 800de16:	2200      	movs	r2, #0
 800de18:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800de1a:	4b32      	ldr	r3, [pc, #200]	; (800dee4 <_tx_trace_object_register+0x1d0>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800de20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de22:	4613      	mov	r3, r2
 800de24:	005b      	lsls	r3, r3, #1
 800de26:	4413      	add	r3, r2
 800de28:	011b      	lsls	r3, r3, #4
 800de2a:	461a      	mov	r2, r3
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	4413      	add	r3, r2
 800de30:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 800de36:	69bb      	ldr	r3, [r7, #24]
 800de38:	2200      	movs	r2, #0
 800de3a:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	7bfa      	ldrb	r2, [r7, #15]
 800de40:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 800de42:	68ba      	ldr	r2, [r7, #8]
 800de44:	69bb      	ldr	r3, [r7, #24]
 800de46:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 800de48:	69bb      	ldr	r3, [r7, #24]
 800de4a:	683a      	ldr	r2, [r7, #0]
 800de4c:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de52:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800de54:	2300      	movs	r3, #0
 800de56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de58:	e017      	b.n	800de8a <_tx_trace_object_register+0x176>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 800de5e:	69fa      	ldr	r2, [r7, #28]
 800de60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de62:	4413      	add	r3, r2
 800de64:	61fb      	str	r3, [r7, #28]

                    /* Determine if object_name (work_ptr) is null.  */
                    if (work_ptr == TX_NULL)
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d012      	beq.n	800de92 <_tx_trace_object_register+0x17e>
                    {
                        break;
                    }

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	7819      	ldrb	r1, [r3, #0]
 800de70:	69ba      	ldr	r2, [r7, #24]
 800de72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de74:	4413      	add	r3, r2
 800de76:	3310      	adds	r3, #16
 800de78:	460a      	mov	r2, r1
 800de7a:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d008      	beq.n	800de96 <_tx_trace_object_register+0x182>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800de84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de86:	3301      	adds	r3, #1
 800de88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8c:	2b1e      	cmp	r3, #30
 800de8e:	d9e4      	bls.n	800de5a <_tx_trace_object_register+0x146>
 800de90:	e002      	b.n	800de98 <_tx_trace_object_register+0x184>
                        break;
 800de92:	bf00      	nop
 800de94:	e000      	b.n	800de98 <_tx_trace_object_register+0x184>
                    {
                        break;
 800de96:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 800de98:	69ba      	ldr	r2, [r7, #24]
 800de9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9c:	4413      	add	r3, r2
 800de9e:	3310      	adds	r3, #16
 800dea0:	2200      	movs	r2, #0
 800dea2:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 800dea4:	7bfb      	ldrb	r3, [r7, #15]
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d110      	bne.n	800decc <_tx_trace_object_register+0x1b8>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb2:	0a1b      	lsrs	r3, r3, #8
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800deba:	b2da      	uxtb	r2, r3
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 800deca:	e005      	b.n	800ded8 <_tx_trace_object_register+0x1c4>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 800decc:	69bb      	ldr	r3, [r7, #24]
 800dece:	2200      	movs	r2, #0
 800ded0:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	2200      	movs	r2, #0
 800ded6:	70da      	strb	r2, [r3, #3]
}
 800ded8:	bf00      	nop
 800deda:	3734      	adds	r7, #52	; 0x34
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr
 800dee4:	20001c8c 	.word	0x20001c8c
 800dee8:	20001ca8 	.word	0x20001ca8
 800deec:	20001cac 	.word	0x20001cac
 800def0:	20001cb0 	.word	0x20001cb0

0800def4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b092      	sub	sp, #72	; 0x48
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
 800df00:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800df02:	2300      	movs	r3, #0
 800df04:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d102      	bne.n	800df12 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800df0c:	2302      	movs	r3, #2
 800df0e:	647b      	str	r3, [r7, #68]	; 0x44
 800df10:	e075      	b.n	800dffe <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800df12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df14:	2b34      	cmp	r3, #52	; 0x34
 800df16:	d002      	beq.n	800df1e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800df18:	2302      	movs	r3, #2
 800df1a:	647b      	str	r3, [r7, #68]	; 0x44
 800df1c:	e06f      	b.n	800dffe <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800df1e:	f3ef 8310 	mrs	r3, PRIMASK
 800df22:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800df24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800df26:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800df28:	b672      	cpsid	i
    return(int_posture);
 800df2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800df2c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800df2e:	4b3b      	ldr	r3, [pc, #236]	; (800e01c <_txe_byte_pool_create+0x128>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	3301      	adds	r3, #1
 800df34:	4a39      	ldr	r2, [pc, #228]	; (800e01c <_txe_byte_pool_create+0x128>)
 800df36:	6013      	str	r3, [r2, #0]
 800df38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3e:	f383 8810 	msr	PRIMASK, r3
}
 800df42:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800df44:	4b36      	ldr	r3, [pc, #216]	; (800e020 <_txe_byte_pool_create+0x12c>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800df4a:	2300      	movs	r3, #0
 800df4c:	643b      	str	r3, [r7, #64]	; 0x40
 800df4e:	e009      	b.n	800df64 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df54:	429a      	cmp	r2, r3
 800df56:	d00b      	beq.n	800df70 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800df58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800df5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df60:	3301      	adds	r3, #1
 800df62:	643b      	str	r3, [r7, #64]	; 0x40
 800df64:	4b2f      	ldr	r3, [pc, #188]	; (800e024 <_txe_byte_pool_create+0x130>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d3f0      	bcc.n	800df50 <_txe_byte_pool_create+0x5c>
 800df6e:	e000      	b.n	800df72 <_txe_byte_pool_create+0x7e>
                break;
 800df70:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800df72:	f3ef 8310 	mrs	r3, PRIMASK
 800df76:	623b      	str	r3, [r7, #32]
    return(posture);
 800df78:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800df7a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800df7c:	b672      	cpsid	i
    return(int_posture);
 800df7e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800df80:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800df82:	4b26      	ldr	r3, [pc, #152]	; (800e01c <_txe_byte_pool_create+0x128>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	3b01      	subs	r3, #1
 800df88:	4a24      	ldr	r2, [pc, #144]	; (800e01c <_txe_byte_pool_create+0x128>)
 800df8a:	6013      	str	r3, [r2, #0]
 800df8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df92:	f383 8810 	msr	PRIMASK, r3
}
 800df96:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800df98:	f7fe ff60 	bl	800ce5c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d102      	bne.n	800dfaa <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800dfa4:	2302      	movs	r3, #2
 800dfa6:	647b      	str	r3, [r7, #68]	; 0x44
 800dfa8:	e029      	b.n	800dffe <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d102      	bne.n	800dfb6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800dfb0:	2303      	movs	r3, #3
 800dfb2:	647b      	str	r3, [r7, #68]	; 0x44
 800dfb4:	e023      	b.n	800dffe <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	2b63      	cmp	r3, #99	; 0x63
 800dfba:	d802      	bhi.n	800dfc2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800dfbc:	2305      	movs	r3, #5
 800dfbe:	647b      	str	r3, [r7, #68]	; 0x44
 800dfc0:	e01d      	b.n	800dffe <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800dfc2:	4b19      	ldr	r3, [pc, #100]	; (800e028 <_txe_byte_pool_create+0x134>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800dfc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfca:	4a18      	ldr	r2, [pc, #96]	; (800e02c <_txe_byte_pool_create+0x138>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d101      	bne.n	800dfd4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800dfd0:	2313      	movs	r3, #19
 800dfd2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dfd4:	f3ef 8305 	mrs	r3, IPSR
 800dfd8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800dfda:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800dfdc:	4b14      	ldr	r3, [pc, #80]	; (800e030 <_txe_byte_pool_create+0x13c>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d00b      	beq.n	800dffe <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dfe6:	f3ef 8305 	mrs	r3, IPSR
 800dfea:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800dfec:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800dfee:	4b10      	ldr	r3, [pc, #64]	; (800e030 <_txe_byte_pool_create+0x13c>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4313      	orrs	r3, r2
 800dff4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800dff8:	d201      	bcs.n	800dffe <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800dffa:	2313      	movs	r3, #19
 800dffc:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800dffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e000:	2b00      	cmp	r3, #0
 800e002:	d106      	bne.n	800e012 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	687a      	ldr	r2, [r7, #4]
 800e008:	68b9      	ldr	r1, [r7, #8]
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f7fd f88a 	bl	800b124 <_tx_byte_pool_create>
 800e010:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e014:	4618      	mov	r0, r3
 800e016:	3748      	adds	r7, #72	; 0x48
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	20001718 	.word	0x20001718
 800e020:	20001670 	.word	0x20001670
 800e024:	20001674 	.word	0x20001674
 800e028:	20001680 	.word	0x20001680
 800e02c:	200017c8 	.word	0x200017c8
 800e030:	2000000c 	.word	0x2000000c

0800e034 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b094      	sub	sp, #80	; 0x50
 800e038:	af02      	add	r7, sp, #8
 800e03a:	60f8      	str	r0, [r7, #12]
 800e03c:	60b9      	str	r1, [r7, #8]
 800e03e:	607a      	str	r2, [r7, #4]
 800e040:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e042:	2300      	movs	r3, #0
 800e044:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d102      	bne.n	800e052 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e04c:	2309      	movs	r3, #9
 800e04e:	647b      	str	r3, [r7, #68]	; 0x44
 800e050:	e083      	b.n	800e15a <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800e052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e054:	2b38      	cmp	r3, #56	; 0x38
 800e056:	d002      	beq.n	800e05e <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e058:	2309      	movs	r3, #9
 800e05a:	647b      	str	r3, [r7, #68]	; 0x44
 800e05c:	e07d      	b.n	800e15a <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e05e:	f3ef 8310 	mrs	r3, PRIMASK
 800e062:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e066:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e068:	b672      	cpsid	i
    return(int_posture);
 800e06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e06c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e06e:	4b43      	ldr	r3, [pc, #268]	; (800e17c <_txe_queue_create+0x148>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	3301      	adds	r3, #1
 800e074:	4a41      	ldr	r2, [pc, #260]	; (800e17c <_txe_queue_create+0x148>)
 800e076:	6013      	str	r3, [r2, #0]
 800e078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e07a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07e:	f383 8810 	msr	PRIMASK, r3
}
 800e082:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800e084:	4b3e      	ldr	r3, [pc, #248]	; (800e180 <_txe_queue_create+0x14c>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e08a:	2300      	movs	r3, #0
 800e08c:	643b      	str	r3, [r7, #64]	; 0x40
 800e08e:	e009      	b.n	800e0a4 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e094:	429a      	cmp	r2, r3
 800e096:	d00b      	beq.n	800e0b0 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800e098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e09c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e09e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	643b      	str	r3, [r7, #64]	; 0x40
 800e0a4:	4b37      	ldr	r3, [pc, #220]	; (800e184 <_txe_queue_create+0x150>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d3f0      	bcc.n	800e090 <_txe_queue_create+0x5c>
 800e0ae:	e000      	b.n	800e0b2 <_txe_queue_create+0x7e>
                break;
 800e0b0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e0b2:	f3ef 8310 	mrs	r3, PRIMASK
 800e0b6:	623b      	str	r3, [r7, #32]
    return(posture);
 800e0b8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e0ba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e0bc:	b672      	cpsid	i
    return(int_posture);
 800e0be:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e0c0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e0c2:	4b2e      	ldr	r3, [pc, #184]	; (800e17c <_txe_queue_create+0x148>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	4a2c      	ldr	r2, [pc, #176]	; (800e17c <_txe_queue_create+0x148>)
 800e0ca:	6013      	str	r3, [r2, #0]
 800e0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ce:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d2:	f383 8810 	msr	PRIMASK, r3
}
 800e0d6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e0d8:	f7fe fec0 	bl	800ce5c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d102      	bne.n	800e0ea <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800e0e4:	2309      	movs	r3, #9
 800e0e6:	647b      	str	r3, [r7, #68]	; 0x44
 800e0e8:	e037      	b.n	800e15a <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d102      	bne.n	800e0f6 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800e0f0:	2303      	movs	r3, #3
 800e0f2:	647b      	str	r3, [r7, #68]	; 0x44
 800e0f4:	e031      	b.n	800e15a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d102      	bne.n	800e102 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e0fc:	2305      	movs	r3, #5
 800e0fe:	647b      	str	r3, [r7, #68]	; 0x44
 800e100:	e02b      	b.n	800e15a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b10      	cmp	r3, #16
 800e106:	d902      	bls.n	800e10e <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e108:	2305      	movs	r3, #5
 800e10a:	647b      	str	r3, [r7, #68]	; 0x44
 800e10c:	e025      	b.n	800e15a <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800e10e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e110:	089b      	lsrs	r3, r3, #2
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	429a      	cmp	r2, r3
 800e116:	d902      	bls.n	800e11e <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800e118:	2305      	movs	r3, #5
 800e11a:	647b      	str	r3, [r7, #68]	; 0x44
 800e11c:	e01d      	b.n	800e15a <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e11e:	4b1a      	ldr	r3, [pc, #104]	; (800e188 <_txe_queue_create+0x154>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e126:	4a19      	ldr	r2, [pc, #100]	; (800e18c <_txe_queue_create+0x158>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d101      	bne.n	800e130 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e12c:	2313      	movs	r3, #19
 800e12e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e130:	f3ef 8305 	mrs	r3, IPSR
 800e134:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e136:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e138:	4b15      	ldr	r3, [pc, #84]	; (800e190 <_txe_queue_create+0x15c>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4313      	orrs	r3, r2
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d00b      	beq.n	800e15a <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e142:	f3ef 8305 	mrs	r3, IPSR
 800e146:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e148:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e14a:	4b11      	ldr	r3, [pc, #68]	; (800e190 <_txe_queue_create+0x15c>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4313      	orrs	r3, r2
 800e150:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e154:	d201      	bcs.n	800e15a <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e156:	2313      	movs	r3, #19
 800e158:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d108      	bne.n	800e172 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800e160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e162:	9300      	str	r3, [sp, #0]
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	68b9      	ldr	r1, [r7, #8]
 800e16a:	68f8      	ldr	r0, [r7, #12]
 800e16c:	f7fd f9f2 	bl	800b554 <_tx_queue_create>
 800e170:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e174:	4618      	mov	r0, r3
 800e176:	3748      	adds	r7, #72	; 0x48
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}
 800e17c:	20001718 	.word	0x20001718
 800e180:	20001650 	.word	0x20001650
 800e184:	20001654 	.word	0x20001654
 800e188:	20001680 	.word	0x20001680
 800e18c:	200017c8 	.word	0x200017c8
 800e190:	2000000c 	.word	0x2000000c

0800e194 <_txe_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d102      	bne.n	800e1a8 <_txe_queue_flush+0x14>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e1a2:	2309      	movs	r3, #9
 800e1a4:	60fb      	str	r3, [r7, #12]
 800e1a6:	e00b      	b.n	800e1c0 <_txe_queue_flush+0x2c>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4a07      	ldr	r2, [pc, #28]	; (800e1cc <_txe_queue_flush+0x38>)
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d002      	beq.n	800e1b8 <_txe_queue_flush+0x24>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e1b2:	2309      	movs	r3, #9
 800e1b4:	60fb      	str	r3, [r7, #12]
 800e1b6:	e003      	b.n	800e1c0 <_txe_queue_flush+0x2c>
    }
    else
    {

        /* Call actual queue flush function.  */
        status =  _tx_queue_flush(queue_ptr);
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7fd facb 	bl	800b754 <_tx_queue_flush>
 800e1be:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3710      	adds	r7, #16
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	51554555 	.word	0x51554555

0800e1d0 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b088      	sub	sp, #32
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d102      	bne.n	800e1ec <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e1e6:	2309      	movs	r3, #9
 800e1e8:	61fb      	str	r3, [r7, #28]
 800e1ea:	e025      	b.n	800e238 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4a18      	ldr	r2, [pc, #96]	; (800e254 <_txe_queue_receive+0x84>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d002      	beq.n	800e1fc <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e1f6:	2309      	movs	r3, #9
 800e1f8:	61fb      	str	r3, [r7, #28]
 800e1fa:	e01d      	b.n	800e238 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d102      	bne.n	800e208 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e202:	2303      	movs	r3, #3
 800e204:	61fb      	str	r3, [r7, #28]
 800e206:	e017      	b.n	800e238 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d014      	beq.n	800e238 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e20e:	f3ef 8305 	mrs	r3, IPSR
 800e212:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e214:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e216:	4b10      	ldr	r3, [pc, #64]	; (800e258 <_txe_queue_receive+0x88>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4313      	orrs	r3, r2
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d002      	beq.n	800e226 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e220:	2304      	movs	r3, #4
 800e222:	61fb      	str	r3, [r7, #28]
 800e224:	e008      	b.n	800e238 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e226:	4b0d      	ldr	r3, [pc, #52]	; (800e25c <_txe_queue_receive+0x8c>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	4a0c      	ldr	r2, [pc, #48]	; (800e260 <_txe_queue_receive+0x90>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d101      	bne.n	800e238 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e234:	2304      	movs	r3, #4
 800e236:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d105      	bne.n	800e24a <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	68b9      	ldr	r1, [r7, #8]
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	f7fd fb98 	bl	800b978 <_tx_queue_receive>
 800e248:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e24a:	69fb      	ldr	r3, [r7, #28]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3720      	adds	r7, #32
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	51554555 	.word	0x51554555
 800e258:	2000000c 	.word	0x2000000c
 800e25c:	20001680 	.word	0x20001680
 800e260:	200017c8 	.word	0x200017c8

0800e264 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b088      	sub	sp, #32
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e270:	2300      	movs	r3, #0
 800e272:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d102      	bne.n	800e280 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e27a:	2309      	movs	r3, #9
 800e27c:	61fb      	str	r3, [r7, #28]
 800e27e:	e025      	b.n	800e2cc <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4a18      	ldr	r2, [pc, #96]	; (800e2e8 <_txe_queue_send+0x84>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d002      	beq.n	800e290 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e28a:	2309      	movs	r3, #9
 800e28c:	61fb      	str	r3, [r7, #28]
 800e28e:	e01d      	b.n	800e2cc <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d102      	bne.n	800e29c <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e296:	2303      	movs	r3, #3
 800e298:	61fb      	str	r3, [r7, #28]
 800e29a:	e017      	b.n	800e2cc <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d014      	beq.n	800e2cc <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e2a2:	f3ef 8305 	mrs	r3, IPSR
 800e2a6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e2a8:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e2aa:	4b10      	ldr	r3, [pc, #64]	; (800e2ec <_txe_queue_send+0x88>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d002      	beq.n	800e2ba <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e2b4:	2304      	movs	r3, #4
 800e2b6:	61fb      	str	r3, [r7, #28]
 800e2b8:	e008      	b.n	800e2cc <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e2ba:	4b0d      	ldr	r3, [pc, #52]	; (800e2f0 <_txe_queue_send+0x8c>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	4a0c      	ldr	r2, [pc, #48]	; (800e2f4 <_txe_queue_send+0x90>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d101      	bne.n	800e2cc <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e2c8:	2304      	movs	r3, #4
 800e2ca:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d105      	bne.n	800e2de <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	68b9      	ldr	r1, [r7, #8]
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	f7fd fd9c 	bl	800be14 <_tx_queue_send>
 800e2dc:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e2de:	69fb      	ldr	r3, [r7, #28]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3720      	adds	r7, #32
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	51554555 	.word	0x51554555
 800e2ec:	2000000c 	.word	0x2000000c
 800e2f0:	20001680 	.word	0x20001680
 800e2f4:	200017c8 	.word	0x200017c8

0800e2f8 <_txe_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d102      	bne.n	800e30e <_txe_semaphore_ceiling_put+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e308:	230c      	movs	r3, #12
 800e30a:	60fb      	str	r3, [r7, #12]
 800e30c:	e012      	b.n	800e334 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	4a0b      	ldr	r2, [pc, #44]	; (800e340 <_txe_semaphore_ceiling_put+0x48>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d002      	beq.n	800e31e <_txe_semaphore_ceiling_put+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e318:	230c      	movs	r3, #12
 800e31a:	60fb      	str	r3, [r7, #12]
 800e31c:	e00a      	b.n	800e334 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Determine if the ceiling is valid - must be greater than 1.  */
    else if (ceiling == ((ULONG) 0))
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d102      	bne.n	800e32a <_txe_semaphore_ceiling_put+0x32>
    {

        /* Invalid ceiling, return error.  */
        status =  TX_INVALID_CEILING;
 800e324:	2322      	movs	r3, #34	; 0x22
 800e326:	60fb      	str	r3, [r7, #12]
 800e328:	e004      	b.n	800e334 <_txe_semaphore_ceiling_put+0x3c>
    }
    else
    {

        /* Call actual semaphore ceiling put function.  */
        status =  _tx_semaphore_ceiling_put(semaphore_ptr, ceiling);
 800e32a:	6839      	ldr	r1, [r7, #0]
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f7fd ff23 	bl	800c178 <_tx_semaphore_ceiling_put>
 800e332:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e334:	68fb      	ldr	r3, [r7, #12]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	53454d41 	.word	0x53454d41

0800e344 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b092      	sub	sp, #72	; 0x48
 800e348:	af00      	add	r7, sp, #0
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	607a      	str	r2, [r7, #4]
 800e350:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e352:	2300      	movs	r3, #0
 800e354:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d102      	bne.n	800e362 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e35c:	230c      	movs	r3, #12
 800e35e:	647b      	str	r3, [r7, #68]	; 0x44
 800e360:	e054      	b.n	800e40c <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	2b1c      	cmp	r3, #28
 800e366:	d002      	beq.n	800e36e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e368:	230c      	movs	r3, #12
 800e36a:	647b      	str	r3, [r7, #68]	; 0x44
 800e36c:	e04e      	b.n	800e40c <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e36e:	f3ef 8310 	mrs	r3, PRIMASK
 800e372:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e376:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e378:	b672      	cpsid	i
    return(int_posture);
 800e37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e37c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e37e:	4b36      	ldr	r3, [pc, #216]	; (800e458 <_txe_semaphore_create+0x114>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	3301      	adds	r3, #1
 800e384:	4a34      	ldr	r2, [pc, #208]	; (800e458 <_txe_semaphore_create+0x114>)
 800e386:	6013      	str	r3, [r2, #0]
 800e388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38e:	f383 8810 	msr	PRIMASK, r3
}
 800e392:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800e394:	4b31      	ldr	r3, [pc, #196]	; (800e45c <_txe_semaphore_create+0x118>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e39a:	2300      	movs	r3, #0
 800e39c:	643b      	str	r3, [r7, #64]	; 0x40
 800e39e:	e009      	b.n	800e3b4 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d00b      	beq.n	800e3c0 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800e3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3aa:	695b      	ldr	r3, [r3, #20]
 800e3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e3ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	643b      	str	r3, [r7, #64]	; 0x40
 800e3b4:	4b2a      	ldr	r3, [pc, #168]	; (800e460 <_txe_semaphore_create+0x11c>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d3f0      	bcc.n	800e3a0 <_txe_semaphore_create+0x5c>
 800e3be:	e000      	b.n	800e3c2 <_txe_semaphore_create+0x7e>
                break;
 800e3c0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e3c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e3c6:	623b      	str	r3, [r7, #32]
    return(posture);
 800e3c8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e3ca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e3cc:	b672      	cpsid	i
    return(int_posture);
 800e3ce:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e3d0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e3d2:	4b21      	ldr	r3, [pc, #132]	; (800e458 <_txe_semaphore_create+0x114>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	3b01      	subs	r3, #1
 800e3d8:	4a1f      	ldr	r2, [pc, #124]	; (800e458 <_txe_semaphore_create+0x114>)
 800e3da:	6013      	str	r3, [r2, #0]
 800e3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3de:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	f383 8810 	msr	PRIMASK, r3
}
 800e3e6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e3e8:	f7fe fd38 	bl	800ce5c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800e3ec:	68fa      	ldr	r2, [r7, #12]
 800e3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d102      	bne.n	800e3fa <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800e3f4:	230c      	movs	r3, #12
 800e3f6:	647b      	str	r3, [r7, #68]	; 0x44
 800e3f8:	e008      	b.n	800e40c <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e3fa:	4b1a      	ldr	r3, [pc, #104]	; (800e464 <_txe_semaphore_create+0x120>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e402:	4a19      	ldr	r2, [pc, #100]	; (800e468 <_txe_semaphore_create+0x124>)
 800e404:	4293      	cmp	r3, r2
 800e406:	d101      	bne.n	800e40c <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e408:	2313      	movs	r3, #19
 800e40a:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e40c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d114      	bne.n	800e43c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e412:	f3ef 8305 	mrs	r3, IPSR
 800e416:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e418:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e41a:	4b14      	ldr	r3, [pc, #80]	; (800e46c <_txe_semaphore_create+0x128>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	4313      	orrs	r3, r2
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00b      	beq.n	800e43c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e424:	f3ef 8305 	mrs	r3, IPSR
 800e428:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e42a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e42c:	4b0f      	ldr	r3, [pc, #60]	; (800e46c <_txe_semaphore_create+0x128>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4313      	orrs	r3, r2
 800e432:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e436:	d201      	bcs.n	800e43c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e438:	2313      	movs	r3, #19
 800e43a:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d105      	bne.n	800e44e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	68b9      	ldr	r1, [r7, #8]
 800e446:	68f8      	ldr	r0, [r7, #12]
 800e448:	f7fe f804 	bl	800c454 <_tx_semaphore_create>
 800e44c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e44e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e450:	4618      	mov	r0, r3
 800e452:	3748      	adds	r7, #72	; 0x48
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	20001718 	.word	0x20001718
 800e45c:	20001648 	.word	0x20001648
 800e460:	2000164c 	.word	0x2000164c
 800e464:	20001680 	.word	0x20001680
 800e468:	200017c8 	.word	0x200017c8
 800e46c:	2000000c 	.word	0x2000000c

0800e470 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b086      	sub	sp, #24
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e47a:	2300      	movs	r3, #0
 800e47c:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d102      	bne.n	800e48a <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e484:	230c      	movs	r3, #12
 800e486:	617b      	str	r3, [r7, #20]
 800e488:	e01f      	b.n	800e4ca <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	4a15      	ldr	r2, [pc, #84]	; (800e4e4 <_txe_semaphore_get+0x74>)
 800e490:	4293      	cmp	r3, r2
 800e492:	d002      	beq.n	800e49a <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e494:	230c      	movs	r3, #12
 800e496:	617b      	str	r3, [r7, #20]
 800e498:	e017      	b.n	800e4ca <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d014      	beq.n	800e4ca <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e4a0:	f3ef 8305 	mrs	r3, IPSR
 800e4a4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e4a6:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e4a8:	4b0f      	ldr	r3, [pc, #60]	; (800e4e8 <_txe_semaphore_get+0x78>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d002      	beq.n	800e4b8 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e4b2:	2304      	movs	r3, #4
 800e4b4:	617b      	str	r3, [r7, #20]
 800e4b6:	e008      	b.n	800e4ca <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e4b8:	4b0c      	ldr	r3, [pc, #48]	; (800e4ec <_txe_semaphore_get+0x7c>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	4a0b      	ldr	r2, [pc, #44]	; (800e4f0 <_txe_semaphore_get+0x80>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d101      	bne.n	800e4ca <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e4c6:	2304      	movs	r3, #4
 800e4c8:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d104      	bne.n	800e4da <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800e4d0:	6839      	ldr	r1, [r7, #0]
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f7fe f89e 	bl	800c614 <_tx_semaphore_get>
 800e4d8:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800e4da:	697b      	ldr	r3, [r7, #20]
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3718      	adds	r7, #24
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	53454d41 	.word	0x53454d41
 800e4e8:	2000000c 	.word	0x2000000c
 800e4ec:	20001680 	.word	0x20001680
 800e4f0:	200017c8 	.word	0x200017c8

0800e4f4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b09a      	sub	sp, #104	; 0x68
 800e4f8:	af06      	add	r7, sp, #24
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	60b9      	str	r1, [r7, #8]
 800e4fe:	607a      	str	r2, [r7, #4]
 800e500:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e502:	2300      	movs	r3, #0
 800e504:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d102      	bne.n	800e512 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e50c:	230e      	movs	r3, #14
 800e50e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e510:	e0bb      	b.n	800e68a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800e512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e514:	2bb0      	cmp	r3, #176	; 0xb0
 800e516:	d002      	beq.n	800e51e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e518:	230e      	movs	r3, #14
 800e51a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e51c:	e0b5      	b.n	800e68a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e51e:	f3ef 8310 	mrs	r3, PRIMASK
 800e522:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e524:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e526:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e528:	b672      	cpsid	i
    return(int_posture);
 800e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e52c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e52e:	4b64      	ldr	r3, [pc, #400]	; (800e6c0 <_txe_thread_create+0x1cc>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	3301      	adds	r3, #1
 800e534:	4a62      	ldr	r2, [pc, #392]	; (800e6c0 <_txe_thread_create+0x1cc>)
 800e536:	6013      	str	r3, [r2, #0]
 800e538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e53a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53e:	f383 8810 	msr	PRIMASK, r3
}
 800e542:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800e544:	2300      	movs	r3, #0
 800e546:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800e548:	4b5e      	ldr	r3, [pc, #376]	; (800e6c4 <_txe_thread_create+0x1d0>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800e54e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e550:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e554:	3b01      	subs	r3, #1
 800e556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e558:	4413      	add	r3, r2
 800e55a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800e55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e560:	2300      	movs	r3, #0
 800e562:	647b      	str	r3, [r7, #68]	; 0x44
 800e564:	e02b      	b.n	800e5be <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800e566:	68fa      	ldr	r2, [r7, #12]
 800e568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d101      	bne.n	800e572 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800e56e:	2301      	movs	r3, #1
 800e570:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800e572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e574:	2b01      	cmp	r3, #1
 800e576:	d028      	beq.n	800e5ca <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800e578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e57e:	429a      	cmp	r2, r3
 800e580:	d308      	bcc.n	800e594 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800e582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e584:	691b      	ldr	r3, [r3, #16]
 800e586:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e588:	429a      	cmp	r2, r3
 800e58a:	d203      	bcs.n	800e594 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e58c:	2300      	movs	r3, #0
 800e58e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e590:	2301      	movs	r3, #1
 800e592:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d308      	bcc.n	800e5b0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800e59e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5a0:	691b      	ldr	r3, [r3, #16]
 800e5a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d203      	bcs.n	800e5b0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800e5b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5b6:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e5b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	647b      	str	r3, [r7, #68]	; 0x44
 800e5be:	4b42      	ldr	r3, [pc, #264]	; (800e6c8 <_txe_thread_create+0x1d4>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d3ce      	bcc.n	800e566 <_txe_thread_create+0x72>
 800e5c8:	e000      	b.n	800e5cc <_txe_thread_create+0xd8>
                break;
 800e5ca:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e5cc:	f3ef 8310 	mrs	r3, PRIMASK
 800e5d0:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e5d2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e5d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e5d6:	b672      	cpsid	i
    return(int_posture);
 800e5d8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e5da:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e5dc:	4b38      	ldr	r3, [pc, #224]	; (800e6c0 <_txe_thread_create+0x1cc>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	3b01      	subs	r3, #1
 800e5e2:	4a37      	ldr	r2, [pc, #220]	; (800e6c0 <_txe_thread_create+0x1cc>)
 800e5e4:	6013      	str	r3, [r2, #0]
 800e5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5ea:	6a3b      	ldr	r3, [r7, #32]
 800e5ec:	f383 8810 	msr	PRIMASK, r3
}
 800e5f0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e5f2:	f7fe fc33 	bl	800ce5c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800e5f6:	68fa      	ldr	r2, [r7, #12]
 800e5f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d102      	bne.n	800e604 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800e5fe:	230e      	movs	r3, #14
 800e600:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e602:	e042      	b.n	800e68a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800e604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e606:	2b00      	cmp	r3, #0
 800e608:	d102      	bne.n	800e610 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e60a:	2303      	movs	r3, #3
 800e60c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e60e:	e03c      	b.n	800e68a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d102      	bne.n	800e61c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e616:	2303      	movs	r3, #3
 800e618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e61a:	e036      	b.n	800e68a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800e61c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e61e:	2bc7      	cmp	r3, #199	; 0xc7
 800e620:	d802      	bhi.n	800e628 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800e622:	2305      	movs	r3, #5
 800e624:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e626:	e030      	b.n	800e68a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800e628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e62a:	2b1f      	cmp	r3, #31
 800e62c:	d902      	bls.n	800e634 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800e62e:	230f      	movs	r3, #15
 800e630:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e632:	e02a      	b.n	800e68a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800e634:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e638:	429a      	cmp	r2, r3
 800e63a:	d902      	bls.n	800e642 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800e63c:	2318      	movs	r3, #24
 800e63e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e640:	e023      	b.n	800e68a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800e642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e644:	2b01      	cmp	r3, #1
 800e646:	d902      	bls.n	800e64e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800e648:	2310      	movs	r3, #16
 800e64a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e64c:	e01d      	b.n	800e68a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800e64e:	4b1f      	ldr	r3, [pc, #124]	; (800e6cc <_txe_thread_create+0x1d8>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800e654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e656:	4a1e      	ldr	r2, [pc, #120]	; (800e6d0 <_txe_thread_create+0x1dc>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d101      	bne.n	800e660 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e65c:	2313      	movs	r3, #19
 800e65e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e660:	f3ef 8305 	mrs	r3, IPSR
 800e664:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e666:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e668:	4b1a      	ldr	r3, [pc, #104]	; (800e6d4 <_txe_thread_create+0x1e0>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4313      	orrs	r3, r2
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d00b      	beq.n	800e68a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e672:	f3ef 8305 	mrs	r3, IPSR
 800e676:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e678:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e67a:	4b16      	ldr	r3, [pc, #88]	; (800e6d4 <_txe_thread_create+0x1e0>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	4313      	orrs	r3, r2
 800e680:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e684:	d201      	bcs.n	800e68a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e686:	2313      	movs	r3, #19
 800e688:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e68a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d112      	bne.n	800e6b6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e692:	9305      	str	r3, [sp, #20]
 800e694:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e696:	9304      	str	r3, [sp, #16]
 800e698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e69a:	9303      	str	r3, [sp, #12]
 800e69c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e69e:	9302      	str	r3, [sp, #8]
 800e6a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6a2:	9301      	str	r3, [sp, #4]
 800e6a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6a6:	9300      	str	r3, [sp, #0]
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	68b9      	ldr	r1, [r7, #8]
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f7fe f8c6 	bl	800c840 <_tx_thread_create>
 800e6b4:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800e6b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3750      	adds	r7, #80	; 0x50
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	20001718 	.word	0x20001718
 800e6c4:	20001688 	.word	0x20001688
 800e6c8:	2000168c 	.word	0x2000168c
 800e6cc:	20001680 	.word	0x20001680
 800e6d0:	200017c8 	.word	0x200017c8
 800e6d4:	2000000c 	.word	0x2000000c

0800e6d8 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b086      	sub	sp, #24
 800e6dc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e6de:	f3ef 8310 	mrs	r3, PRIMASK
 800e6e2:	60fb      	str	r3, [r7, #12]
    return(posture);
 800e6e4:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800e6e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e6e8:	b672      	cpsid	i
    return(int_posture);
 800e6ea:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 800e6ec:	613b      	str	r3, [r7, #16]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 800e6ee:	463b      	mov	r3, r7
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f000 f83d 	bl	800e770 <tx_timer_get_next>
 800e6f6:	6178      	str	r0, [r7, #20]
            a low power clock needs to be set up.
    */

#ifndef TX_LOW_POWER_TICKLESS
    /* We still want to keep track of time in low power mode. */
    if (timers_active == TX_FALSE)
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d104      	bne.n	800e708 <tx_low_power_enter+0x30>
    {
        /* Set the next expiration to 0xFFFFFFF, an indication that the timer sleeps for
           maximum amount of time the HW supports.*/
        tx_low_power_next_expiration = 0xFFFFFFFF;
 800e6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e702:	603b      	str	r3, [r7, #0]
        timers_active = TX_TRUE;
 800e704:	2301      	movs	r3, #1
 800e706:	617b      	str	r3, [r7, #20]
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	d103      	bne.n	800e716 <tx_low_power_enter+0x3e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	4618      	mov	r0, r3
 800e712:	f7f2 f8fd 	bl	8000910 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 800e716:	4b07      	ldr	r3, [pc, #28]	; (800e734 <tx_low_power_enter+0x5c>)
 800e718:	2201      	movs	r2, #1
 800e71a:	601a      	str	r2, [r3, #0]
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f383 8810 	msr	PRIMASK, r3
}
 800e726:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 800e728:	f7f2 f91c 	bl	8000964 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 800e72c:	bf00      	nop
 800e72e:	3718      	adds	r7, #24
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	20001cb4 	.word	0x20001cb4

0800e738 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 800e73e:	4b0b      	ldr	r3, [pc, #44]	; (800e76c <tx_low_power_exit+0x34>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00d      	beq.n	800e762 <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 800e746:	4b09      	ldr	r3, [pc, #36]	; (800e76c <tx_low_power_exit+0x34>)
 800e748:	2200      	movs	r2, #0
 800e74a:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 800e74c:	f7f2 f918 	bl	8000980 <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 800e750:	f7f2 f924 	bl	800099c <App_ThreadX_LowPower_Timer_Adjust>
 800e754:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d002      	beq.n	800e762 <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f000 f86f 	bl	800e840 <tx_time_increment>
        }
    }
}
 800e762:	bf00      	nop
 800e764:	3708      	adds	r7, #8
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	20001cb4 	.word	0x20001cb4

0800e770 <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 800e770:	b480      	push	{r7}
 800e772:	b08d      	sub	sp, #52	; 0x34
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 800e778:	f04f 33ff 	mov.w	r3, #4294967295
 800e77c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e77e:	f3ef 8310 	mrs	r3, PRIMASK
 800e782:	617b      	str	r3, [r7, #20]
    return(posture);
 800e784:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e786:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e788:	b672      	cpsid	i
    return(int_posture);
 800e78a:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 800e78c:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 800e78e:	4b29      	ldr	r3, [pc, #164]	; (800e834 <tx_timer_get_next+0xc4>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800e794:	2300      	movs	r3, #0
 800e796:	627b      	str	r3, [r7, #36]	; 0x24
 800e798:	e02f      	b.n	800e7fa <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 800e79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d01d      	beq.n	800e7de <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800e7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b20      	cmp	r3, #32
 800e7ae:	d906      	bls.n	800e7be <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 800e7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	4413      	add	r3, r2
 800e7b8:	3b20      	subs	r3, #32
 800e7ba:	623b      	str	r3, [r7, #32]
 800e7bc:	e001      	b.n	800e7c2 <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 800e7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c0:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 800e7c2:	69fa      	ldr	r2, [r7, #28]
 800e7c4:	6a3b      	ldr	r3, [r7, #32]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d901      	bls.n	800e7ce <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 800e7ca:	6a3b      	ldr	r3, [r7, #32]
 800e7cc:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800e7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d0:	691b      	ldr	r3, [r3, #16]
 800e7d2:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 800e7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d1e4      	bne.n	800e7a8 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 800e7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 800e7e4:	4b14      	ldr	r3, [pc, #80]	; (800e838 <tx_timer_get_next+0xc8>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d302      	bcc.n	800e7f4 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800e7ee:	4b13      	ldr	r3, [pc, #76]	; (800e83c <tx_timer_get_next+0xcc>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800e7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	627b      	str	r3, [r7, #36]	; 0x24
 800e7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fc:	2b1f      	cmp	r3, #31
 800e7fe:	d9cc      	bls.n	800e79a <tx_timer_get_next+0x2a>
 800e800:	69bb      	ldr	r3, [r7, #24]
 800e802:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f383 8810 	msr	PRIMASK, r3
}
 800e80a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 800e80c:	69fb      	ldr	r3, [r7, #28]
 800e80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e812:	d004      	beq.n	800e81e <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	69fa      	ldr	r2, [r7, #28]
 800e818:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 800e81a:	2301      	movs	r3, #1
 800e81c:	e003      	b.n	800e826 <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2200      	movs	r2, #0
 800e822:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 800e824:	2300      	movs	r3, #0
    }
}
 800e826:	4618      	mov	r0, r3
 800e828:	3734      	adds	r7, #52	; 0x34
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr
 800e832:	bf00      	nop
 800e834:	200017b4 	.word	0x200017b4
 800e838:	200017b0 	.word	0x200017b0
 800e83c:	200017ac 	.word	0x200017ac

0800e840 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b08a      	sub	sp, #40	; 0x28
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	f000 809b 	beq.w	800e986 <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e850:	f3ef 8310 	mrs	r3, PRIMASK
 800e854:	613b      	str	r3, [r7, #16]
    return(posture);
 800e856:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e858:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e85a:	b672      	cpsid	i
    return(int_posture);
 800e85c:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800e85e:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 800e860:	4b4b      	ldr	r3, [pc, #300]	; (800e990 <tx_time_increment+0x150>)
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4413      	add	r3, r2
 800e868:	4a49      	ldr	r2, [pc, #292]	; (800e990 <tx_time_increment+0x150>)
 800e86a:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 800e86c:	4b49      	ldr	r3, [pc, #292]	; (800e994 <tx_time_increment+0x154>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00e      	beq.n	800e892 <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 800e874:	4b47      	ldr	r3, [pc, #284]	; (800e994 <tx_time_increment+0x154>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	687a      	ldr	r2, [r7, #4]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d206      	bcs.n	800e88c <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800e87e:	4b45      	ldr	r3, [pc, #276]	; (800e994 <tx_time_increment+0x154>)
 800e880:	681a      	ldr	r2, [r3, #0]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	1ad3      	subs	r3, r2, r3
 800e886:	4a43      	ldr	r2, [pc, #268]	; (800e994 <tx_time_increment+0x154>)
 800e888:	6013      	str	r3, [r2, #0]
 800e88a:	e002      	b.n	800e892 <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 800e88c:	4b41      	ldr	r3, [pc, #260]	; (800e994 <tx_time_increment+0x154>)
 800e88e:	2201      	movs	r2, #1
 800e890:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800e892:	4b41      	ldr	r3, [pc, #260]	; (800e998 <tx_time_increment+0x158>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 800e898:	2300      	movs	r3, #0
 800e89a:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800e89c:	2300      	movs	r3, #0
 800e89e:	627b      	str	r3, [r7, #36]	; 0x24
 800e8a0:	e046      	b.n	800e930 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800e8a2:	6a3b      	ldr	r3, [r7, #32]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d034      	beq.n	800e914 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800e8aa:	6a3b      	ldr	r3, [r7, #32]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2b20      	cmp	r3, #32
 800e8b6:	d908      	bls.n	800e8ca <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8be:	4413      	add	r3, r2
 800e8c0:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	601a      	str	r2, [r3, #0]
 800e8c8:	e003      	b.n	800e8d2 <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8cc:	1c5a      	adds	r2, r3, #1
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 800e8d8:	6a3b      	ldr	r3, [r7, #32]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	69fa      	ldr	r2, [r7, #28]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d1e6      	bne.n	800e8b0 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800e8e2:	6a3b      	ldr	r3, [r7, #32]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	695b      	ldr	r3, [r3, #20]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 800e8ec:	69bb      	ldr	r3, [r7, #24]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d103      	bne.n	800e8fa <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 800e8f2:	6a3b      	ldr	r3, [r7, #32]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	61bb      	str	r3, [r7, #24]
 800e8f8:	e009      	b.n	800e90e <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	695b      	ldr	r3, [r3, #20]
 800e8fe:	6a3a      	ldr	r2, [r7, #32]
 800e900:	6812      	ldr	r2, [r2, #0]
 800e902:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 800e904:	6a3b      	ldr	r3, [r7, #32]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	695a      	ldr	r2, [r3, #20]
 800e90a:	69bb      	ldr	r3, [r7, #24]
 800e90c:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 800e90e:	6a3b      	ldr	r3, [r7, #32]
 800e910:	2200      	movs	r2, #0
 800e912:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 800e914:	6a3b      	ldr	r3, [r7, #32]
 800e916:	3304      	adds	r3, #4
 800e918:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 800e91a:	4b20      	ldr	r3, [pc, #128]	; (800e99c <tx_time_increment+0x15c>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	6a3a      	ldr	r2, [r7, #32]
 800e920:	429a      	cmp	r2, r3
 800e922:	d302      	bcc.n	800e92a <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800e924:	4b1e      	ldr	r3, [pc, #120]	; (800e9a0 <tx_time_increment+0x160>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800e92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92c:	3301      	adds	r3, #1
 800e92e:	627b      	str	r3, [r7, #36]	; 0x24
 800e930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e932:	2b1f      	cmp	r3, #31
 800e934:	d9b5      	bls.n	800e8a2 <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 800e936:	4b1a      	ldr	r3, [pc, #104]	; (800e9a0 <tx_time_increment+0x160>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4a17      	ldr	r2, [pc, #92]	; (800e998 <tx_time_increment+0x158>)
 800e93c:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 800e93e:	e019      	b.n	800e974 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 800e940:	69bb      	ldr	r3, [r7, #24]
 800e942:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	691b      	ldr	r3, [r3, #16]
 800e948:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	687a      	ldr	r2, [r7, #4]
 800e950:	429a      	cmp	r2, r3
 800e952:	d206      	bcs.n	800e962 <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	1ad2      	subs	r2, r2, r3
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	601a      	str	r2, [r3, #0]
 800e960:	e002      	b.n	800e968 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 800e962:	69fb      	ldr	r3, [r7, #28]
 800e964:	2201      	movs	r2, #1
 800e966:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 800e968:	69fb      	ldr	r3, [r7, #28]
 800e96a:	2200      	movs	r2, #0
 800e96c:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 800e96e:	69f8      	ldr	r0, [r7, #28]
 800e970:	f7ff f812 	bl	800d998 <_tx_timer_system_activate>
    while (temp_list_head)
 800e974:	69bb      	ldr	r3, [r7, #24]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d1e2      	bne.n	800e940 <tx_time_increment+0x100>
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	f383 8810 	msr	PRIMASK, r3
}
 800e984:	e000      	b.n	800e988 <tx_time_increment+0x148>
        return;
 800e986:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800e988:	3728      	adds	r7, #40	; 0x28
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	20001724 	.word	0x20001724
 800e994:	20001c84 	.word	0x20001c84
 800e998:	200017b4 	.word	0x200017b4
 800e99c:	200017b0 	.word	0x200017b0
 800e9a0:	200017ac 	.word	0x200017ac

0800e9a4 <fm_calendar_get>:
 * usa.
 * @param None
 * @retval None
 */
void fm_calendar_get()
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	af00      	add	r7, sp, #0
     *     __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
     *     HAL_RTC_WaitForSynchro(&hrtc);
     *     __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
     */

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	4905      	ldr	r1, [pc, #20]	; (800e9c0 <fm_calendar_get+0x1c>)
 800e9ac:	4805      	ldr	r0, [pc, #20]	; (800e9c4 <fm_calendar_get+0x20>)
 800e9ae:	f7fa fa7f 	bl	8008eb0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	4904      	ldr	r1, [pc, #16]	; (800e9c8 <fm_calendar_get+0x24>)
 800e9b6:	4803      	ldr	r0, [pc, #12]	; (800e9c4 <fm_calendar_get+0x20>)
 800e9b8:	f7fa fb72 	bl	80090a0 <HAL_RTC_GetDate>
}
 800e9bc:	bf00      	nop
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	20001cb8 	.word	0x20001cb8
 800e9c4:	200014a0 	.word	0x200014a0
 800e9c8:	20001ccc 	.word	0x20001ccc

0800e9cc <fm_calendar_get_hour>:
 * @brief Función que lee la hora desde el RTC y la devuelve como parámetro.
 * @param None
 * @retval Hora leida del calendario.
 */
int fm_calendar_get_hour()
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800e9d0:	f7ff ffe8 	bl	800e9a4 <fm_calendar_get>
    return (sTime.Hours);
 800e9d4:	4b01      	ldr	r3, [pc, #4]	; (800e9dc <fm_calendar_get_hour+0x10>)
 800e9d6:	781b      	ldrb	r3, [r3, #0]
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	20001cb8 	.word	0x20001cb8

0800e9e0 <fm_calendar_get_minute>:
 * parámetro.
 * @param None
 * @retval Minutos leidos del calendario.
 */
int fm_calendar_get_minute()
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800e9e4:	f7ff ffde 	bl	800e9a4 <fm_calendar_get>
    return (sTime.Minutes);
 800e9e8:	4b01      	ldr	r3, [pc, #4]	; (800e9f0 <fm_calendar_get_minute+0x10>)
 800e9ea:	785b      	ldrb	r3, [r3, #1]
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	20001cb8 	.word	0x20001cb8

0800e9f4 <fm_calendar_get_second>:
 * parámetro.
 * @param None
 * @retval Segundos leidos del calendario.
 */
int fm_calendar_get_second()
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800e9f8:	f7ff ffd4 	bl	800e9a4 <fm_calendar_get>
    return (sTime.Seconds);
 800e9fc:	4b01      	ldr	r3, [pc, #4]	; (800ea04 <fm_calendar_get_second+0x10>)
 800e9fe:	789b      	ldrb	r3, [r3, #2]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	20001cb8 	.word	0x20001cb8

0800ea08 <fm_calendar_get_day>:
 * @brief Función que lee el día desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Día leido del calendario.
 */
int fm_calendar_get_day()
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ea0c:	f7ff ffca 	bl	800e9a4 <fm_calendar_get>
    return (sDate.Date);
 800ea10:	4b01      	ldr	r3, [pc, #4]	; (800ea18 <fm_calendar_get_day+0x10>)
 800ea12:	789b      	ldrb	r3, [r3, #2]
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	20001ccc 	.word	0x20001ccc

0800ea1c <fm_calendar_get_month>:
 * @brief Función que lee el mes desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Mes leida del calendario.
 */
int fm_calendar_get_month()
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ea20:	f7ff ffc0 	bl	800e9a4 <fm_calendar_get>
    return (sDate.Month);
 800ea24:	4b01      	ldr	r3, [pc, #4]	; (800ea2c <fm_calendar_get_month+0x10>)
 800ea26:	785b      	ldrb	r3, [r3, #1]
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	20001ccc 	.word	0x20001ccc

0800ea30 <fm_calendar_get_year>:
 * @brief Función que lee el año desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Año leido del calendario.
 */
int fm_calendar_get_year()
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ea34:	f7ff ffb6 	bl	800e9a4 <fm_calendar_get>
    return (sDate.Year);
 800ea38:	4b01      	ldr	r3, [pc, #4]	; (800ea40 <fm_calendar_get_year+0x10>)
 800ea3a:	78db      	ldrb	r3, [r3, #3]
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	bd80      	pop	{r7, pc}
 800ea40:	20001ccc 	.word	0x20001ccc

0800ea44 <fm_calendar_format_time>:
 * fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_time()
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b088      	sub	sp, #32
 800ea48:	af02      	add	r7, sp, #8
    int  time_int = 0;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	617b      	str	r3, [r7, #20]
    char time_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800ea4e:	f7ff ffa9 	bl	800e9a4 <fm_calendar_get>
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800ea52:	4b0d      	ldr	r3, [pc, #52]	; (800ea88 <fm_calendar_format_time+0x44>)
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	461a      	mov	r2, r3
 800ea58:	4b0b      	ldr	r3, [pc, #44]	; (800ea88 <fm_calendar_format_time+0x44>)
 800ea5a:	785b      	ldrb	r3, [r3, #1]
 800ea5c:	4619      	mov	r1, r3
    sTime.Seconds);
 800ea5e:	4b0a      	ldr	r3, [pc, #40]	; (800ea88 <fm_calendar_format_time+0x44>)
 800ea60:	789b      	ldrb	r3, [r3, #2]
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800ea62:	4638      	mov	r0, r7
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	460b      	mov	r3, r1
 800ea68:	4908      	ldr	r1, [pc, #32]	; (800ea8c <fm_calendar_format_time+0x48>)
 800ea6a:	f005 fe73 	bl	8014754 <siprintf>
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */

    time_int = atoi(time_arr);
 800ea6e:	463b      	mov	r3, r7
 800ea70:	4618      	mov	r0, r3
 800ea72:	f005 fe05 	bl	8014680 <atoi>
 800ea76:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_time(time_int);
 800ea78:	6978      	ldr	r0, [r7, #20]
 800ea7a:	f000 f9dd 	bl	800ee38 <fm_factory_modify_fp_time>
}
 800ea7e:	bf00      	nop
 800ea80:	3718      	adds	r7, #24
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}
 800ea86:	bf00      	nop
 800ea88:	20001cb8 	.word	0x20001cb8
 800ea8c:	080151e4 	.word	0x080151e4

0800ea90 <fm_calendar_format_date>:
 * en fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_date()
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b088      	sub	sp, #32
 800ea94:	af02      	add	r7, sp, #8
    int  date_int = 0;
 800ea96:	2300      	movs	r3, #0
 800ea98:	617b      	str	r3, [r7, #20]
    char date_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800ea9a:	f7ff ff83 	bl	800e9a4 <fm_calendar_get>
    sprintf(date_arr, "%02d%02d20%02d", sDate.Date, sDate.Month, sDate.Year);
 800ea9e:	4b0d      	ldr	r3, [pc, #52]	; (800ead4 <fm_calendar_format_date+0x44>)
 800eaa0:	789b      	ldrb	r3, [r3, #2]
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	4b0b      	ldr	r3, [pc, #44]	; (800ead4 <fm_calendar_format_date+0x44>)
 800eaa6:	785b      	ldrb	r3, [r3, #1]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4b0a      	ldr	r3, [pc, #40]	; (800ead4 <fm_calendar_format_date+0x44>)
 800eaac:	78db      	ldrb	r3, [r3, #3]
 800eaae:	4638      	mov	r0, r7
 800eab0:	9300      	str	r3, [sp, #0]
 800eab2:	460b      	mov	r3, r1
 800eab4:	4908      	ldr	r1, [pc, #32]	; (800ead8 <fm_calendar_format_date+0x48>)
 800eab6:	f005 fe4d 	bl	8014754 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    date_int = atoi(date_arr);
 800eaba:	463b      	mov	r3, r7
 800eabc:	4618      	mov	r0, r3
 800eabe:	f005 fddf 	bl	8014680 <atoi>
 800eac2:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_date(date_int);
 800eac4:	6978      	ldr	r0, [r7, #20]
 800eac6:	f000 f9a7 	bl	800ee18 <fm_factory_modify_fp_date>
}
 800eaca:	bf00      	nop
 800eacc:	3718      	adds	r7, #24
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	20001ccc 	.word	0x20001ccc
 800ead8:	080151f4 	.word	0x080151f4

0800eadc <fm_debug_msg_uart>:
 * @param Mensaje a transmitir y su longitud.
 * @retval None
 *
 */
void fm_debug_msg_uart(const uint8_t *p_msg, uint8_t len)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	460b      	mov	r3, r1
 800eae6:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret = HAL_BUSY;
 800eae8:	2302      	movs	r3, #2
 800eaea:	73fb      	strb	r3, [r7, #15]
     * ejecutada en otro hilo. La siguiente implementación no es buena porque
     * bloquea puede bloquear al sistema, una mejor solucion seria bloquear
     * por un corto tiempo, aun mejor seria implementar algo con RTOS.
     *
     */
    while (ret == HAL_BUSY)
 800eaec:	e008      	b.n	800eb00 <fm_debug_msg_uart+0x24>
    {
        ret = HAL_UART_Transmit(&huart2, p_msg, len, DELAY_DEFAULT);
 800eaee:	78fb      	ldrb	r3, [r7, #3]
 800eaf0:	b29a      	uxth	r2, r3
 800eaf2:	230a      	movs	r3, #10
 800eaf4:	6879      	ldr	r1, [r7, #4]
 800eaf6:	4806      	ldr	r0, [pc, #24]	; (800eb10 <fm_debug_msg_uart+0x34>)
 800eaf8:	f7fb fdb8 	bl	800a66c <HAL_UART_Transmit>
 800eafc:	4603      	mov	r3, r0
 800eafe:	73fb      	strb	r3, [r7, #15]
    while (ret == HAL_BUSY)
 800eb00:	7bfb      	ldrb	r3, [r7, #15]
 800eb02:	2b02      	cmp	r3, #2
 800eb04:	d0f3      	beq.n	800eaee <fm_debug_msg_uart+0x12>
    }

}
 800eb06:	bf00      	nop
 800eb08:	bf00      	nop
 800eb0a:	3710      	adds	r7, #16
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	20001560 	.word	0x20001560

0800eb14 <fm_factory_get_acm>:
 * @brief Función que devuelve el parámetro ACM almacenado en fm_factory.
 * @param None
 * @retval Parámetro ACM como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_acm()
{
 800eb14:	b4b0      	push	{r4, r5, r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
    return (acm_config);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	4a07      	ldr	r2, [pc, #28]	; (800eb3c <fm_factory_get_acm+0x28>)
 800eb20:	461c      	mov	r4, r3
 800eb22:	4615      	mov	r5, r2
 800eb24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800eb2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bcb0      	pop	{r4, r5, r7}
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	20000030 	.word	0x20000030

0800eb40 <fm_factory_get_ttl>:
 * @brief Función que devuelve el parámetro TTL almacenado en fm_factory.
 * @param None
 * @retval Parámetro TTL como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_ttl()
{
 800eb40:	b4b0      	push	{r4, r5, r7}
 800eb42:	b083      	sub	sp, #12
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
    return (ttl_config);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	4a07      	ldr	r2, [pc, #28]	; (800eb68 <fm_factory_get_ttl+0x28>)
 800eb4c:	461c      	mov	r4, r3
 800eb4e:	4615      	mov	r5, r2
 800eb50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800eb58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	370c      	adds	r7, #12
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bcb0      	pop	{r4, r5, r7}
 800eb64:	4770      	bx	lr
 800eb66:	bf00      	nop
 800eb68:	20000010 	.word	0x20000010

0800eb6c <fm_factory_get_rate>:
 * @brief Función que devuelve el parámetro RATE almacenado en fm_factory.
 * @param None
 * @retval Parámetro RATE como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_rate()
{
 800eb6c:	b4b0      	push	{r4, r5, r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
    return (rate_config);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	4a07      	ldr	r2, [pc, #28]	; (800eb94 <fm_factory_get_rate+0x28>)
 800eb78:	461c      	mov	r4, r3
 800eb7a:	4615      	mov	r5, r2
 800eb7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800eb84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	370c      	adds	r7, #12
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bcb0      	pop	{r4, r5, r7}
 800eb90:	4770      	bx	lr
 800eb92:	bf00      	nop
 800eb94:	20000050 	.word	0x20000050

0800eb98 <fm_factory_get_temp>:
 * fm_factory.
 * @param None
 * @retval Temperatura interna del micro como estructura de tipo fmc_temp_t.
 */
fmc_temp_t fm_factory_get_temp()
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
    return (temperature_config);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	4a05      	ldr	r2, [pc, #20]	; (800ebb8 <fm_factory_get_temp+0x20>)
 800eba4:	ca07      	ldmia	r2, {r0, r1, r2}
 800eba6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	370c      	adds	r7, #12
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb4:	4770      	bx	lr
 800ebb6:	bf00      	nop
 800ebb8:	20000070 	.word	0x20000070

0800ebbc <fm_factory_get_units_tim>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_tim()
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
    return (units_digits_tim);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	4a05      	ldr	r2, [pc, #20]	; (800ebdc <fm_factory_get_units_tim+0x20>)
 800ebc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ebcc:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	370c      	adds	r7, #12
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr
 800ebdc:	20000094 	.word	0x20000094

0800ebe0 <fm_factory_get_units_vol>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_vol()
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b083      	sub	sp, #12
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
    return (units_digits_vol);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	4a05      	ldr	r2, [pc, #20]	; (800ec00 <fm_factory_get_units_vol+0x20>)
 800ebec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ebf0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	370c      	adds	r7, #12
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr
 800ec00:	2000009c 	.word	0x2000009c

0800ec04 <fm_factory_get_k_factor>:
 * @brief Función que devuelve el factor K almacenado en fm_factory.
 * @param None
 * @retval Factor K.
 */
fmc_fp_t fm_factory_get_k_factor(sel_k k_sel)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t k_selected;
    if(k_sel == K_FACTOR)
 800ec10:	78fb      	ldrb	r3, [r7, #3]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d106      	bne.n	800ec24 <fm_factory_get_k_factor+0x20>
    {
        k_selected = k_factor_config;
 800ec16:	4b22      	ldr	r3, [pc, #136]	; (800eca0 <fm_factory_get_k_factor+0x9c>)
 800ec18:	4a22      	ldr	r2, [pc, #136]	; (800eca4 <fm_factory_get_k_factor+0xa0>)
 800ec1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec1e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec22:	e030      	b.n	800ec86 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_1)
 800ec24:	78fb      	ldrb	r3, [r7, #3]
 800ec26:	2b01      	cmp	r3, #1
 800ec28:	d106      	bne.n	800ec38 <fm_factory_get_k_factor+0x34>
    {
        k_selected = k_lin_1_config;
 800ec2a:	4b1d      	ldr	r3, [pc, #116]	; (800eca0 <fm_factory_get_k_factor+0x9c>)
 800ec2c:	4a1e      	ldr	r2, [pc, #120]	; (800eca8 <fm_factory_get_k_factor+0xa4>)
 800ec2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec32:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec36:	e026      	b.n	800ec86 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_2)
 800ec38:	78fb      	ldrb	r3, [r7, #3]
 800ec3a:	2b02      	cmp	r3, #2
 800ec3c:	d106      	bne.n	800ec4c <fm_factory_get_k_factor+0x48>
    {
        k_selected = k_lin_2_config;
 800ec3e:	4b18      	ldr	r3, [pc, #96]	; (800eca0 <fm_factory_get_k_factor+0x9c>)
 800ec40:	4a1a      	ldr	r2, [pc, #104]	; (800ecac <fm_factory_get_k_factor+0xa8>)
 800ec42:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec46:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec4a:	e01c      	b.n	800ec86 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_3)
 800ec4c:	78fb      	ldrb	r3, [r7, #3]
 800ec4e:	2b03      	cmp	r3, #3
 800ec50:	d106      	bne.n	800ec60 <fm_factory_get_k_factor+0x5c>
    {
        k_selected = k_lin_3_config;
 800ec52:	4b13      	ldr	r3, [pc, #76]	; (800eca0 <fm_factory_get_k_factor+0x9c>)
 800ec54:	4a16      	ldr	r2, [pc, #88]	; (800ecb0 <fm_factory_get_k_factor+0xac>)
 800ec56:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec5a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec5e:	e012      	b.n	800ec86 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_4)
 800ec60:	78fb      	ldrb	r3, [r7, #3]
 800ec62:	2b04      	cmp	r3, #4
 800ec64:	d106      	bne.n	800ec74 <fm_factory_get_k_factor+0x70>
    {
        k_selected = k_lin_4_config;
 800ec66:	4b0e      	ldr	r3, [pc, #56]	; (800eca0 <fm_factory_get_k_factor+0x9c>)
 800ec68:	4a12      	ldr	r2, [pc, #72]	; (800ecb4 <fm_factory_get_k_factor+0xb0>)
 800ec6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec6e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec72:	e008      	b.n	800ec86 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_5)
 800ec74:	78fb      	ldrb	r3, [r7, #3]
 800ec76:	2b05      	cmp	r3, #5
 800ec78:	d105      	bne.n	800ec86 <fm_factory_get_k_factor+0x82>
    {
        k_selected = k_lin_5_config;
 800ec7a:	4b09      	ldr	r3, [pc, #36]	; (800eca0 <fm_factory_get_k_factor+0x9c>)
 800ec7c:	4a0e      	ldr	r2, [pc, #56]	; (800ecb8 <fm_factory_get_k_factor+0xb4>)
 800ec7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec82:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (k_selected);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	4a05      	ldr	r2, [pc, #20]	; (800eca0 <fm_factory_get_k_factor+0x9c>)
 800ec8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec8e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	370c      	adds	r7, #12
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr
 800ec9e:	bf00      	nop
 800eca0:	20001ce8 	.word	0x20001ce8
 800eca4:	200000f4 	.word	0x200000f4
 800eca8:	200000cc 	.word	0x200000cc
 800ecac:	200000d4 	.word	0x200000d4
 800ecb0:	200000dc 	.word	0x200000dc
 800ecb4:	200000e4 	.word	0x200000e4
 800ecb8:	200000ec 	.word	0x200000ec

0800ecbc <fm_factory_get_frec_lin>:

fmc_fp_t fm_factory_get_frec_lin(sel_k k_sel)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t frec_lin_selected;

    if(k_sel == K_LIN_1)
 800ecc8:	78fb      	ldrb	r3, [r7, #3]
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	d106      	bne.n	800ecdc <fm_factory_get_frec_lin+0x20>
    {
        frec_lin_selected = frec_lin_1;
 800ecce:	4b1d      	ldr	r3, [pc, #116]	; (800ed44 <fm_factory_get_frec_lin+0x88>)
 800ecd0:	4a1d      	ldr	r2, [pc, #116]	; (800ed48 <fm_factory_get_frec_lin+0x8c>)
 800ecd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ecd6:	e883 0003 	stmia.w	r3, {r0, r1}
 800ecda:	e026      	b.n	800ed2a <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_2)
 800ecdc:	78fb      	ldrb	r3, [r7, #3]
 800ecde:	2b02      	cmp	r3, #2
 800ece0:	d106      	bne.n	800ecf0 <fm_factory_get_frec_lin+0x34>
    {
        frec_lin_selected = frec_lin_2;
 800ece2:	4b18      	ldr	r3, [pc, #96]	; (800ed44 <fm_factory_get_frec_lin+0x88>)
 800ece4:	4a19      	ldr	r2, [pc, #100]	; (800ed4c <fm_factory_get_frec_lin+0x90>)
 800ece6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ecea:	e883 0003 	stmia.w	r3, {r0, r1}
 800ecee:	e01c      	b.n	800ed2a <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_3)
 800ecf0:	78fb      	ldrb	r3, [r7, #3]
 800ecf2:	2b03      	cmp	r3, #3
 800ecf4:	d106      	bne.n	800ed04 <fm_factory_get_frec_lin+0x48>
    {
        frec_lin_selected = frec_lin_3;
 800ecf6:	4b13      	ldr	r3, [pc, #76]	; (800ed44 <fm_factory_get_frec_lin+0x88>)
 800ecf8:	4a15      	ldr	r2, [pc, #84]	; (800ed50 <fm_factory_get_frec_lin+0x94>)
 800ecfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ecfe:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed02:	e012      	b.n	800ed2a <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_4)
 800ed04:	78fb      	ldrb	r3, [r7, #3]
 800ed06:	2b04      	cmp	r3, #4
 800ed08:	d106      	bne.n	800ed18 <fm_factory_get_frec_lin+0x5c>
    {
        frec_lin_selected = frec_lin_4;
 800ed0a:	4b0e      	ldr	r3, [pc, #56]	; (800ed44 <fm_factory_get_frec_lin+0x88>)
 800ed0c:	4a11      	ldr	r2, [pc, #68]	; (800ed54 <fm_factory_get_frec_lin+0x98>)
 800ed0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed12:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed16:	e008      	b.n	800ed2a <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_5)
 800ed18:	78fb      	ldrb	r3, [r7, #3]
 800ed1a:	2b05      	cmp	r3, #5
 800ed1c:	d105      	bne.n	800ed2a <fm_factory_get_frec_lin+0x6e>
    {
        frec_lin_selected = frec_lin_5;
 800ed1e:	4b09      	ldr	r3, [pc, #36]	; (800ed44 <fm_factory_get_frec_lin+0x88>)
 800ed20:	4a0d      	ldr	r2, [pc, #52]	; (800ed58 <fm_factory_get_frec_lin+0x9c>)
 800ed22:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed26:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (frec_lin_selected);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	4a05      	ldr	r2, [pc, #20]	; (800ed44 <fm_factory_get_frec_lin+0x88>)
 800ed2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed32:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	370c      	adds	r7, #12
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
 800ed44:	20001cf0 	.word	0x20001cf0
 800ed48:	200000a4 	.word	0x200000a4
 800ed4c:	200000ac 	.word	0x200000ac
 800ed50:	200000b4 	.word	0x200000b4
 800ed54:	200000bc 	.word	0x200000bc
 800ed58:	200000c4 	.word	0x200000c4

0800ed5c <fm_factory_get_date_time>:
 * @param None
 * @retval Hora, minutos, segundos, día, mes y año almacenados en
 * date_time_config.
 */
fmc_date_time_t fm_factory_get_date_time()
{
 800ed5c:	b4b0      	push	{r4, r5, r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
    return(date_time_config);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	4a07      	ldr	r2, [pc, #28]	; (800ed84 <fm_factory_get_date_time+0x28>)
 800ed68:	461c      	mov	r4, r3
 800ed6a:	4615      	mov	r5, r2
 800ed6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed70:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ed74:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	370c      	adds	r7, #12
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bcb0      	pop	{r4, r5, r7}
 800ed80:	4770      	bx	lr
 800ed82:	bf00      	nop
 800ed84:	2000007c 	.word	0x2000007c

0800ed88 <fm_factory_get_fp_date>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha.
 */
fmc_fp_t fm_factory_get_fp_date()
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b083      	sub	sp, #12
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
    return(date_user);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4a05      	ldr	r2, [pc, #20]	; (800eda8 <fm_factory_get_fp_date+0x20>)
 800ed94:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed98:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr
 800eda8:	20000104 	.word	0x20000104

0800edac <fm_factory_get_fp_time>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora.
 */
fmc_fp_t fm_factory_get_fp_time()
{
 800edac:	b480      	push	{r7}
 800edae:	b083      	sub	sp, #12
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
    return(time_user);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	4a05      	ldr	r2, [pc, #20]	; (800edcc <fm_factory_get_fp_time+0x20>)
 800edb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800edbc:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	370c      	adds	r7, #12
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr
 800edcc:	200000fc 	.word	0x200000fc

0800edd0 <fm_factory_get_fp_date_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha congelada.
 */
fmc_fp_t fm_factory_get_fp_date_conf()
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
    return(date_config);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	4a05      	ldr	r2, [pc, #20]	; (800edf0 <fm_factory_get_fp_date_conf+0x20>)
 800eddc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ede0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	370c      	adds	r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr
 800edf0:	20000114 	.word	0x20000114

0800edf4 <fm_factory_get_fp_time_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora congelada.
 */
fmc_fp_t fm_factory_get_fp_time_conf()
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
    return(time_config);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	4a05      	ldr	r2, [pc, #20]	; (800ee14 <fm_factory_get_fp_time_conf+0x20>)
 800ee00:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee04:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	370c      	adds	r7, #12
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr
 800ee14:	2000010c 	.word	0x2000010c

0800ee18 <fm_factory_modify_fp_date>:
 * fijo.
 * @param Fecha a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_date(int date)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b083      	sub	sp, #12
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
    date_user.num = date;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	4a04      	ldr	r2, [pc, #16]	; (800ee34 <fm_factory_modify_fp_date+0x1c>)
 800ee24:	6013      	str	r3, [r2, #0]
}
 800ee26:	bf00      	nop
 800ee28:	370c      	adds	r7, #12
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr
 800ee32:	bf00      	nop
 800ee34:	20000104 	.word	0x20000104

0800ee38 <fm_factory_modify_fp_time>:
 * fijo.
 * @param Hora a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_time(int time)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
    time_user.num = time;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	4a04      	ldr	r2, [pc, #16]	; (800ee54 <fm_factory_modify_fp_time+0x1c>)
 800ee44:	6013      	str	r3, [r2, #0]
}
 800ee46:	bf00      	nop
 800ee48:	370c      	adds	r7, #12
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr
 800ee52:	bf00      	nop
 800ee54:	200000fc 	.word	0x200000fc

0800ee58 <fm_factory_modify_date>:
 * fijo.
 * @param día, mes y año leídos del calendario.
 * @retval None
 */
void fm_factory_modify_date(int mod_day, int mod_month, int mod_year)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	607a      	str	r2, [r7, #4]
    date_time_config.day = mod_day;
 800ee64:	4a0f      	ldr	r2, [pc, #60]	; (800eea4 <fm_factory_modify_date+0x4c>)
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6013      	str	r3, [r2, #0]
    date_time_config.month = mod_month;
 800ee6a:	4a0e      	ldr	r2, [pc, #56]	; (800eea4 <fm_factory_modify_date+0x4c>)
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	6053      	str	r3, [r2, #4]
    date_time_config.year = mod_year;
 800ee70:	4a0c      	ldr	r2, [pc, #48]	; (800eea4 <fm_factory_modify_date+0x4c>)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6093      	str	r3, [r2, #8]

    date_config.num = mod_day * 1000000 + mod_month * 10000 + 2000 + mod_year;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	4a0b      	ldr	r2, [pc, #44]	; (800eea8 <fm_factory_modify_date+0x50>)
 800ee7a:	fb03 f202 	mul.w	r2, r3, r2
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	f242 7110 	movw	r1, #10000	; 0x2710
 800ee84:	fb01 f303 	mul.w	r3, r1, r3
 800ee88:	4413      	add	r3, r2
 800ee8a:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	4413      	add	r3, r2
 800ee92:	461a      	mov	r2, r3
 800ee94:	4b05      	ldr	r3, [pc, #20]	; (800eeac <fm_factory_modify_date+0x54>)
 800ee96:	601a      	str	r2, [r3, #0]
}
 800ee98:	bf00      	nop
 800ee9a:	3714      	adds	r7, #20
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea2:	4770      	bx	lr
 800eea4:	2000007c 	.word	0x2000007c
 800eea8:	000f4240 	.word	0x000f4240
 800eeac:	20000114 	.word	0x20000114

0800eeb0 <fm_factory_modify_time>:
 * fijo.
 * @param Hora, minutos y segundos leídos del calendario.
 * @retval None
 */
void fm_factory_modify_time(int mod_hour, int mod_minute, int mod_second)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b085      	sub	sp, #20
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	607a      	str	r2, [r7, #4]
    date_time_config.hour = mod_hour;
 800eebc:	4a0e      	ldr	r2, [pc, #56]	; (800eef8 <fm_factory_modify_time+0x48>)
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	60d3      	str	r3, [r2, #12]
    date_time_config.minute = mod_minute;
 800eec2:	4a0d      	ldr	r2, [pc, #52]	; (800eef8 <fm_factory_modify_time+0x48>)
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	6113      	str	r3, [r2, #16]
    date_time_config.second = mod_second;
 800eec8:	4a0b      	ldr	r2, [pc, #44]	; (800eef8 <fm_factory_modify_time+0x48>)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6153      	str	r3, [r2, #20]

    time_config.num = mod_hour * 10000 + mod_minute * 100 + mod_second;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f242 7210 	movw	r2, #10000	; 0x2710
 800eed4:	fb03 f202 	mul.w	r2, r3, r2
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	2164      	movs	r1, #100	; 0x64
 800eedc:	fb01 f303 	mul.w	r3, r1, r3
 800eee0:	441a      	add	r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	4413      	add	r3, r2
 800eee6:	461a      	mov	r2, r3
 800eee8:	4b04      	ldr	r3, [pc, #16]	; (800eefc <fm_factory_modify_time+0x4c>)
 800eeea:	601a      	str	r2, [r3, #0]
}
 800eeec:	bf00      	nop
 800eeee:	3714      	adds	r7, #20
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr
 800eef8:	2000007c 	.word	0x2000007c
 800eefc:	2000010c 	.word	0x2000010c

0800ef00 <fm_factory_modify_k_factor_add>:
 * @brief Función que suma uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_add(sel_digit_t digit_k)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b084      	sub	sp, #16
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	4603      	mov	r3, r0
 800ef08:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800ef0e:	f000 fab9 	bl	800f484 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] < VAL_9)
 800ef12:	79fb      	ldrb	r3, [r7, #7]
 800ef14:	f1c3 0307 	rsb	r3, r3, #7
 800ef18:	4a17      	ldr	r2, [pc, #92]	; (800ef78 <fm_factory_modify_k_factor_add+0x78>)
 800ef1a:	5cd3      	ldrb	r3, [r2, r3]
 800ef1c:	2b08      	cmp	r3, #8
 800ef1e:	d809      	bhi.n	800ef34 <fm_factory_modify_k_factor_add+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]++;
 800ef20:	79fb      	ldrb	r3, [r7, #7]
 800ef22:	f1c3 0307 	rsb	r3, r3, #7
 800ef26:	4a14      	ldr	r2, [pc, #80]	; (800ef78 <fm_factory_modify_k_factor_add+0x78>)
 800ef28:	5cd2      	ldrb	r2, [r2, r3]
 800ef2a:	3201      	adds	r2, #1
 800ef2c:	b2d1      	uxtb	r1, r2
 800ef2e:	4a12      	ldr	r2, [pc, #72]	; (800ef78 <fm_factory_modify_k_factor_add+0x78>)
 800ef30:	54d1      	strb	r1, [r2, r3]
 800ef32:	e005      	b.n	800ef40 <fm_factory_modify_k_factor_add+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_0;
 800ef34:	79fb      	ldrb	r3, [r7, #7]
 800ef36:	f1c3 0307 	rsb	r3, r3, #7
 800ef3a:	4a0f      	ldr	r2, [pc, #60]	; (800ef78 <fm_factory_modify_k_factor_add+0x78>)
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800ef40:	2300      	movs	r3, #0
 800ef42:	60bb      	str	r3, [r7, #8]
 800ef44:	e00e      	b.n	800ef64 <fm_factory_modify_k_factor_add+0x64>
    {
        k_new_num = (k_new_num * 10) + k_array[i];
 800ef46:	68fa      	ldr	r2, [r7, #12]
 800ef48:	4613      	mov	r3, r2
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	4413      	add	r3, r2
 800ef4e:	005b      	lsls	r3, r3, #1
 800ef50:	4619      	mov	r1, r3
 800ef52:	4a09      	ldr	r2, [pc, #36]	; (800ef78 <fm_factory_modify_k_factor_add+0x78>)
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	4413      	add	r3, r2
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	440b      	add	r3, r1
 800ef5c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	3301      	adds	r3, #1
 800ef62:	60bb      	str	r3, [r7, #8]
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	2b07      	cmp	r3, #7
 800ef68:	dded      	ble.n	800ef46 <fm_factory_modify_k_factor_add+0x46>
    }

    k_factor_config.num = k_new_num;
 800ef6a:	4a04      	ldr	r2, [pc, #16]	; (800ef7c <fm_factory_modify_k_factor_add+0x7c>)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	6013      	str	r3, [r2, #0]
}
 800ef70:	bf00      	nop
 800ef72:	3710      	adds	r7, #16
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	20001cd0 	.word	0x20001cd0
 800ef7c:	200000f4 	.word	0x200000f4

0800ef80 <fm_factory_modify_k_factor_subs>:
 * @brief Función que resta uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_subs(sel_digit_t digit_k)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	4603      	mov	r3, r0
 800ef88:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800ef8e:	f000 fa79 	bl	800f484 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] > VAL_0)
 800ef92:	79fb      	ldrb	r3, [r7, #7]
 800ef94:	f1c3 0307 	rsb	r3, r3, #7
 800ef98:	4a17      	ldr	r2, [pc, #92]	; (800eff8 <fm_factory_modify_k_factor_subs+0x78>)
 800ef9a:	5cd3      	ldrb	r3, [r2, r3]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d009      	beq.n	800efb4 <fm_factory_modify_k_factor_subs+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]--;
 800efa0:	79fb      	ldrb	r3, [r7, #7]
 800efa2:	f1c3 0307 	rsb	r3, r3, #7
 800efa6:	4a14      	ldr	r2, [pc, #80]	; (800eff8 <fm_factory_modify_k_factor_subs+0x78>)
 800efa8:	5cd2      	ldrb	r2, [r2, r3]
 800efaa:	3a01      	subs	r2, #1
 800efac:	b2d1      	uxtb	r1, r2
 800efae:	4a12      	ldr	r2, [pc, #72]	; (800eff8 <fm_factory_modify_k_factor_subs+0x78>)
 800efb0:	54d1      	strb	r1, [r2, r3]
 800efb2:	e005      	b.n	800efc0 <fm_factory_modify_k_factor_subs+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_9;
 800efb4:	79fb      	ldrb	r3, [r7, #7]
 800efb6:	f1c3 0307 	rsb	r3, r3, #7
 800efba:	4a0f      	ldr	r2, [pc, #60]	; (800eff8 <fm_factory_modify_k_factor_subs+0x78>)
 800efbc:	2109      	movs	r1, #9
 800efbe:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800efc0:	2300      	movs	r3, #0
 800efc2:	60bb      	str	r3, [r7, #8]
 800efc4:	e00e      	b.n	800efe4 <fm_factory_modify_k_factor_subs+0x64>
    {
        k_new_num = (k_new_num * 10) + k_array[i];
 800efc6:	68fa      	ldr	r2, [r7, #12]
 800efc8:	4613      	mov	r3, r2
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	4413      	add	r3, r2
 800efce:	005b      	lsls	r3, r3, #1
 800efd0:	4619      	mov	r1, r3
 800efd2:	4a09      	ldr	r2, [pc, #36]	; (800eff8 <fm_factory_modify_k_factor_subs+0x78>)
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	4413      	add	r3, r2
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	440b      	add	r3, r1
 800efdc:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	3301      	adds	r3, #1
 800efe2:	60bb      	str	r3, [r7, #8]
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	2b07      	cmp	r3, #7
 800efe8:	dded      	ble.n	800efc6 <fm_factory_modify_k_factor_subs+0x46>
    }

    k_factor_config.num = k_new_num;
 800efea:	4a04      	ldr	r2, [pc, #16]	; (800effc <fm_factory_modify_k_factor_subs+0x7c>)
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	6013      	str	r3, [r2, #0]
}
 800eff0:	bf00      	nop
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	20001cd0 	.word	0x20001cd0
 800effc:	200000f4 	.word	0x200000f4

0800f000 <fm_factory_modify_k_lin_add>:

void fm_factory_modify_k_lin_add(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b086      	sub	sp, #24
 800f004:	af00      	add	r7, sp, #0
 800f006:	4603      	mov	r3, r0
 800f008:	460a      	mov	r2, r1
 800f00a:	71fb      	strb	r3, [r7, #7]
 800f00c:	4613      	mov	r3, r2
 800f00e:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f010:	2300      	movs	r3, #0
 800f012:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f014:	2300      	movs	r3, #0
 800f016:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f018:	79bb      	ldrb	r3, [r7, #6]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f000 fa6e 	bl	800f4fc <fm_factory_separate_k_lin_and_frec>
    if(digit_k_lin <= DIG_LIN_7)
 800f020:	79fb      	ldrb	r3, [r7, #7]
 800f022:	2b07      	cmp	r3, #7
 800f024:	d84e      	bhi.n	800f0c4 <fm_factory_modify_k_lin_add+0xc4>
    {
        if(k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] < VAL_9)
 800f026:	79fb      	ldrb	r3, [r7, #7]
 800f028:	f1c3 0307 	rsb	r3, r3, #7
 800f02c:	4a5e      	ldr	r2, [pc, #376]	; (800f1a8 <fm_factory_modify_k_lin_add+0x1a8>)
 800f02e:	5cd3      	ldrb	r3, [r2, r3]
 800f030:	2b08      	cmp	r3, #8
 800f032:	d809      	bhi.n	800f048 <fm_factory_modify_k_lin_add+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]++;
 800f034:	79fb      	ldrb	r3, [r7, #7]
 800f036:	f1c3 0307 	rsb	r3, r3, #7
 800f03a:	4a5b      	ldr	r2, [pc, #364]	; (800f1a8 <fm_factory_modify_k_lin_add+0x1a8>)
 800f03c:	5cd2      	ldrb	r2, [r2, r3]
 800f03e:	3201      	adds	r2, #1
 800f040:	b2d1      	uxtb	r1, r2
 800f042:	4a59      	ldr	r2, [pc, #356]	; (800f1a8 <fm_factory_modify_k_lin_add+0x1a8>)
 800f044:	54d1      	strb	r1, [r2, r3]
 800f046:	e005      	b.n	800f054 <fm_factory_modify_k_lin_add+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_0;
 800f048:	79fb      	ldrb	r3, [r7, #7]
 800f04a:	f1c3 0307 	rsb	r3, r3, #7
 800f04e:	4a56      	ldr	r2, [pc, #344]	; (800f1a8 <fm_factory_modify_k_lin_add+0x1a8>)
 800f050:	2100      	movs	r1, #0
 800f052:	54d1      	strb	r1, [r2, r3]
        }

        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f054:	2300      	movs	r3, #0
 800f056:	60fb      	str	r3, [r7, #12]
 800f058:	e00e      	b.n	800f078 <fm_factory_modify_k_lin_add+0x78>
        {
            k_lin_new_num = (k_lin_new_num * 10) + k_lin_array[i];
 800f05a:	697a      	ldr	r2, [r7, #20]
 800f05c:	4613      	mov	r3, r2
 800f05e:	009b      	lsls	r3, r3, #2
 800f060:	4413      	add	r3, r2
 800f062:	005b      	lsls	r3, r3, #1
 800f064:	4619      	mov	r1, r3
 800f066:	4a50      	ldr	r2, [pc, #320]	; (800f1a8 <fm_factory_modify_k_lin_add+0x1a8>)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	4413      	add	r3, r2
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	440b      	add	r3, r1
 800f070:	617b      	str	r3, [r7, #20]
        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	3301      	adds	r3, #1
 800f076:	60fb      	str	r3, [r7, #12]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b07      	cmp	r3, #7
 800f07c:	dded      	ble.n	800f05a <fm_factory_modify_k_lin_add+0x5a>
        }

        if(k_sel == K_LIN_1)
 800f07e:	79bb      	ldrb	r3, [r7, #6]
 800f080:	2b01      	cmp	r3, #1
 800f082:	d103      	bne.n	800f08c <fm_factory_modify_k_lin_add+0x8c>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f084:	4a49      	ldr	r2, [pc, #292]	; (800f1ac <fm_factory_modify_k_lin_add+0x1ac>)
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	6013      	str	r3, [r2, #0]
        else if(k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f08a:	e089      	b.n	800f1a0 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_2)
 800f08c:	79bb      	ldrb	r3, [r7, #6]
 800f08e:	2b02      	cmp	r3, #2
 800f090:	d103      	bne.n	800f09a <fm_factory_modify_k_lin_add+0x9a>
            k_lin_2_config.num = k_lin_new_num;
 800f092:	4a47      	ldr	r2, [pc, #284]	; (800f1b0 <fm_factory_modify_k_lin_add+0x1b0>)
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	6013      	str	r3, [r2, #0]
}
 800f098:	e082      	b.n	800f1a0 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_3)
 800f09a:	79bb      	ldrb	r3, [r7, #6]
 800f09c:	2b03      	cmp	r3, #3
 800f09e:	d103      	bne.n	800f0a8 <fm_factory_modify_k_lin_add+0xa8>
            k_lin_3_config.num = k_lin_new_num;
 800f0a0:	4a44      	ldr	r2, [pc, #272]	; (800f1b4 <fm_factory_modify_k_lin_add+0x1b4>)
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	6013      	str	r3, [r2, #0]
}
 800f0a6:	e07b      	b.n	800f1a0 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_4)
 800f0a8:	79bb      	ldrb	r3, [r7, #6]
 800f0aa:	2b04      	cmp	r3, #4
 800f0ac:	d103      	bne.n	800f0b6 <fm_factory_modify_k_lin_add+0xb6>
            k_lin_4_config.num = k_lin_new_num;
 800f0ae:	4a42      	ldr	r2, [pc, #264]	; (800f1b8 <fm_factory_modify_k_lin_add+0x1b8>)
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	6013      	str	r3, [r2, #0]
}
 800f0b4:	e074      	b.n	800f1a0 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_5)
 800f0b6:	79bb      	ldrb	r3, [r7, #6]
 800f0b8:	2b05      	cmp	r3, #5
 800f0ba:	d171      	bne.n	800f1a0 <fm_factory_modify_k_lin_add+0x1a0>
            k_lin_5_config.num = k_lin_new_num;
 800f0bc:	4a3f      	ldr	r2, [pc, #252]	; (800f1bc <fm_factory_modify_k_lin_add+0x1bc>)
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	6013      	str	r3, [r2, #0]
}
 800f0c2:	e06d      	b.n	800f1a0 <fm_factory_modify_k_lin_add+0x1a0>
    else if(digit_k_lin > DIG_LIN_7)
 800f0c4:	79fb      	ldrb	r3, [r7, #7]
 800f0c6:	2b07      	cmp	r3, #7
 800f0c8:	d96a      	bls.n	800f1a0 <fm_factory_modify_k_lin_add+0x1a0>
        if(LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f0ca:	79fb      	ldrb	r3, [r7, #7]
 800f0cc:	f1c3 030e 	rsb	r3, r3, #14
 800f0d0:	2b03      	cmp	r3, #3
 800f0d2:	d017      	beq.n	800f104 <fm_factory_modify_k_lin_add+0x104>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_9)
 800f0d4:	79fb      	ldrb	r3, [r7, #7]
 800f0d6:	f1c3 030e 	rsb	r3, r3, #14
 800f0da:	4a39      	ldr	r2, [pc, #228]	; (800f1c0 <fm_factory_modify_k_lin_add+0x1c0>)
 800f0dc:	5cd3      	ldrb	r3, [r2, r3]
 800f0de:	2b08      	cmp	r3, #8
 800f0e0:	d809      	bhi.n	800f0f6 <fm_factory_modify_k_lin_add+0xf6>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f0e2:	79fb      	ldrb	r3, [r7, #7]
 800f0e4:	f1c3 030e 	rsb	r3, r3, #14
 800f0e8:	4a35      	ldr	r2, [pc, #212]	; (800f1c0 <fm_factory_modify_k_lin_add+0x1c0>)
 800f0ea:	5cd2      	ldrb	r2, [r2, r3]
 800f0ec:	3201      	adds	r2, #1
 800f0ee:	b2d1      	uxtb	r1, r2
 800f0f0:	4a33      	ldr	r2, [pc, #204]	; (800f1c0 <fm_factory_modify_k_lin_add+0x1c0>)
 800f0f2:	54d1      	strb	r1, [r2, r3]
 800f0f4:	e01d      	b.n	800f132 <fm_factory_modify_k_lin_add+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f0f6:	79fb      	ldrb	r3, [r7, #7]
 800f0f8:	f1c3 030e 	rsb	r3, r3, #14
 800f0fc:	4a30      	ldr	r2, [pc, #192]	; (800f1c0 <fm_factory_modify_k_lin_add+0x1c0>)
 800f0fe:	2100      	movs	r1, #0
 800f100:	54d1      	strb	r1, [r2, r3]
 800f102:	e016      	b.n	800f132 <fm_factory_modify_k_lin_add+0x132>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_1)
 800f104:	79fb      	ldrb	r3, [r7, #7]
 800f106:	f1c3 030e 	rsb	r3, r3, #14
 800f10a:	4a2d      	ldr	r2, [pc, #180]	; (800f1c0 <fm_factory_modify_k_lin_add+0x1c0>)
 800f10c:	5cd3      	ldrb	r3, [r2, r3]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d109      	bne.n	800f126 <fm_factory_modify_k_lin_add+0x126>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f112:	79fb      	ldrb	r3, [r7, #7]
 800f114:	f1c3 030e 	rsb	r3, r3, #14
 800f118:	4a29      	ldr	r2, [pc, #164]	; (800f1c0 <fm_factory_modify_k_lin_add+0x1c0>)
 800f11a:	5cd2      	ldrb	r2, [r2, r3]
 800f11c:	3201      	adds	r2, #1
 800f11e:	b2d1      	uxtb	r1, r2
 800f120:	4a27      	ldr	r2, [pc, #156]	; (800f1c0 <fm_factory_modify_k_lin_add+0x1c0>)
 800f122:	54d1      	strb	r1, [r2, r3]
 800f124:	e005      	b.n	800f132 <fm_factory_modify_k_lin_add+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f126:	79fb      	ldrb	r3, [r7, #7]
 800f128:	f1c3 030e 	rsb	r3, r3, #14
 800f12c:	4a24      	ldr	r2, [pc, #144]	; (800f1c0 <fm_factory_modify_k_lin_add+0x1c0>)
 800f12e:	2100      	movs	r1, #0
 800f130:	54d1      	strb	r1, [r2, r3]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f132:	2300      	movs	r3, #0
 800f134:	60bb      	str	r3, [r7, #8]
 800f136:	e00e      	b.n	800f156 <fm_factory_modify_k_lin_add+0x156>
            frec_lin_new_num = (frec_lin_new_num * 10) + frec_array[j];
 800f138:	693a      	ldr	r2, [r7, #16]
 800f13a:	4613      	mov	r3, r2
 800f13c:	009b      	lsls	r3, r3, #2
 800f13e:	4413      	add	r3, r2
 800f140:	005b      	lsls	r3, r3, #1
 800f142:	4619      	mov	r1, r3
 800f144:	4a1e      	ldr	r2, [pc, #120]	; (800f1c0 <fm_factory_modify_k_lin_add+0x1c0>)
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	4413      	add	r3, r2
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	440b      	add	r3, r1
 800f14e:	613b      	str	r3, [r7, #16]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	3301      	adds	r3, #1
 800f154:	60bb      	str	r3, [r7, #8]
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	2b06      	cmp	r3, #6
 800f15a:	dded      	ble.n	800f138 <fm_factory_modify_k_lin_add+0x138>
        if(k_sel == K_LIN_1)
 800f15c:	79bb      	ldrb	r3, [r7, #6]
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d103      	bne.n	800f16a <fm_factory_modify_k_lin_add+0x16a>
            frec_lin_1.num = frec_lin_new_num;
 800f162:	4a18      	ldr	r2, [pc, #96]	; (800f1c4 <fm_factory_modify_k_lin_add+0x1c4>)
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	6013      	str	r3, [r2, #0]
}
 800f168:	e01a      	b.n	800f1a0 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_2)
 800f16a:	79bb      	ldrb	r3, [r7, #6]
 800f16c:	2b02      	cmp	r3, #2
 800f16e:	d103      	bne.n	800f178 <fm_factory_modify_k_lin_add+0x178>
            frec_lin_2.num = frec_lin_new_num;
 800f170:	4a15      	ldr	r2, [pc, #84]	; (800f1c8 <fm_factory_modify_k_lin_add+0x1c8>)
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	6013      	str	r3, [r2, #0]
}
 800f176:	e013      	b.n	800f1a0 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_3)
 800f178:	79bb      	ldrb	r3, [r7, #6]
 800f17a:	2b03      	cmp	r3, #3
 800f17c:	d103      	bne.n	800f186 <fm_factory_modify_k_lin_add+0x186>
            frec_lin_3.num = frec_lin_new_num;
 800f17e:	4a13      	ldr	r2, [pc, #76]	; (800f1cc <fm_factory_modify_k_lin_add+0x1cc>)
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	6013      	str	r3, [r2, #0]
}
 800f184:	e00c      	b.n	800f1a0 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_4)
 800f186:	79bb      	ldrb	r3, [r7, #6]
 800f188:	2b04      	cmp	r3, #4
 800f18a:	d103      	bne.n	800f194 <fm_factory_modify_k_lin_add+0x194>
            frec_lin_4.num = frec_lin_new_num;
 800f18c:	4a10      	ldr	r2, [pc, #64]	; (800f1d0 <fm_factory_modify_k_lin_add+0x1d0>)
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	6013      	str	r3, [r2, #0]
}
 800f192:	e005      	b.n	800f1a0 <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_5)
 800f194:	79bb      	ldrb	r3, [r7, #6]
 800f196:	2b05      	cmp	r3, #5
 800f198:	d102      	bne.n	800f1a0 <fm_factory_modify_k_lin_add+0x1a0>
            frec_lin_5.num = frec_lin_new_num;
 800f19a:	4a0e      	ldr	r2, [pc, #56]	; (800f1d4 <fm_factory_modify_k_lin_add+0x1d4>)
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	6013      	str	r3, [r2, #0]
}
 800f1a0:	bf00      	nop
 800f1a2:	3718      	adds	r7, #24
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	20001cd8 	.word	0x20001cd8
 800f1ac:	200000cc 	.word	0x200000cc
 800f1b0:	200000d4 	.word	0x200000d4
 800f1b4:	200000dc 	.word	0x200000dc
 800f1b8:	200000e4 	.word	0x200000e4
 800f1bc:	200000ec 	.word	0x200000ec
 800f1c0:	20001ce0 	.word	0x20001ce0
 800f1c4:	200000a4 	.word	0x200000a4
 800f1c8:	200000ac 	.word	0x200000ac
 800f1cc:	200000b4 	.word	0x200000b4
 800f1d0:	200000bc 	.word	0x200000bc
 800f1d4:	200000c4 	.word	0x200000c4

0800f1d8 <fm_factory_modify_k_lin_subs>:

void fm_factory_modify_k_lin_subs(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b086      	sub	sp, #24
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	4603      	mov	r3, r0
 800f1e0:	460a      	mov	r2, r1
 800f1e2:	71fb      	strb	r3, [r7, #7]
 800f1e4:	4613      	mov	r3, r2
 800f1e6:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f1f0:	79bb      	ldrb	r3, [r7, #6]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f000 f982 	bl	800f4fc <fm_factory_separate_k_lin_and_frec>
    if(digit_k_lin <= DIG_LIN_7)
 800f1f8:	79fb      	ldrb	r3, [r7, #7]
 800f1fa:	2b07      	cmp	r3, #7
 800f1fc:	d84e      	bhi.n	800f29c <fm_factory_modify_k_lin_subs+0xc4>
    {
        if(k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] > VAL_0)
 800f1fe:	79fb      	ldrb	r3, [r7, #7]
 800f200:	f1c3 0307 	rsb	r3, r3, #7
 800f204:	4a5e      	ldr	r2, [pc, #376]	; (800f380 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f206:	5cd3      	ldrb	r3, [r2, r3]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d009      	beq.n	800f220 <fm_factory_modify_k_lin_subs+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]--;
 800f20c:	79fb      	ldrb	r3, [r7, #7]
 800f20e:	f1c3 0307 	rsb	r3, r3, #7
 800f212:	4a5b      	ldr	r2, [pc, #364]	; (800f380 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f214:	5cd2      	ldrb	r2, [r2, r3]
 800f216:	3a01      	subs	r2, #1
 800f218:	b2d1      	uxtb	r1, r2
 800f21a:	4a59      	ldr	r2, [pc, #356]	; (800f380 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f21c:	54d1      	strb	r1, [r2, r3]
 800f21e:	e005      	b.n	800f22c <fm_factory_modify_k_lin_subs+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_9;
 800f220:	79fb      	ldrb	r3, [r7, #7]
 800f222:	f1c3 0307 	rsb	r3, r3, #7
 800f226:	4a56      	ldr	r2, [pc, #344]	; (800f380 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f228:	2109      	movs	r1, #9
 800f22a:	54d1      	strb	r1, [r2, r3]
        }

        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f22c:	2300      	movs	r3, #0
 800f22e:	60fb      	str	r3, [r7, #12]
 800f230:	e00e      	b.n	800f250 <fm_factory_modify_k_lin_subs+0x78>
        {
            k_lin_new_num = (k_lin_new_num * 10) + k_lin_array[i];
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	4613      	mov	r3, r2
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	4413      	add	r3, r2
 800f23a:	005b      	lsls	r3, r3, #1
 800f23c:	4619      	mov	r1, r3
 800f23e:	4a50      	ldr	r2, [pc, #320]	; (800f380 <fm_factory_modify_k_lin_subs+0x1a8>)
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	4413      	add	r3, r2
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	440b      	add	r3, r1
 800f248:	617b      	str	r3, [r7, #20]
        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	3301      	adds	r3, #1
 800f24e:	60fb      	str	r3, [r7, #12]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2b07      	cmp	r3, #7
 800f254:	dded      	ble.n	800f232 <fm_factory_modify_k_lin_subs+0x5a>
        }

        if(k_sel == K_LIN_1)
 800f256:	79bb      	ldrb	r3, [r7, #6]
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d103      	bne.n	800f264 <fm_factory_modify_k_lin_subs+0x8c>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f25c:	4a49      	ldr	r2, [pc, #292]	; (800f384 <fm_factory_modify_k_lin_subs+0x1ac>)
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	6013      	str	r3, [r2, #0]
        else if(k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f262:	e089      	b.n	800f378 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_2)
 800f264:	79bb      	ldrb	r3, [r7, #6]
 800f266:	2b02      	cmp	r3, #2
 800f268:	d103      	bne.n	800f272 <fm_factory_modify_k_lin_subs+0x9a>
            k_lin_2_config.num = k_lin_new_num;
 800f26a:	4a47      	ldr	r2, [pc, #284]	; (800f388 <fm_factory_modify_k_lin_subs+0x1b0>)
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	6013      	str	r3, [r2, #0]
}
 800f270:	e082      	b.n	800f378 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_3)
 800f272:	79bb      	ldrb	r3, [r7, #6]
 800f274:	2b03      	cmp	r3, #3
 800f276:	d103      	bne.n	800f280 <fm_factory_modify_k_lin_subs+0xa8>
            k_lin_3_config.num = k_lin_new_num;
 800f278:	4a44      	ldr	r2, [pc, #272]	; (800f38c <fm_factory_modify_k_lin_subs+0x1b4>)
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	6013      	str	r3, [r2, #0]
}
 800f27e:	e07b      	b.n	800f378 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_4)
 800f280:	79bb      	ldrb	r3, [r7, #6]
 800f282:	2b04      	cmp	r3, #4
 800f284:	d103      	bne.n	800f28e <fm_factory_modify_k_lin_subs+0xb6>
            k_lin_4_config.num = k_lin_new_num;
 800f286:	4a42      	ldr	r2, [pc, #264]	; (800f390 <fm_factory_modify_k_lin_subs+0x1b8>)
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	6013      	str	r3, [r2, #0]
}
 800f28c:	e074      	b.n	800f378 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_5)
 800f28e:	79bb      	ldrb	r3, [r7, #6]
 800f290:	2b05      	cmp	r3, #5
 800f292:	d171      	bne.n	800f378 <fm_factory_modify_k_lin_subs+0x1a0>
            k_lin_5_config.num = k_lin_new_num;
 800f294:	4a3f      	ldr	r2, [pc, #252]	; (800f394 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	6013      	str	r3, [r2, #0]
}
 800f29a:	e06d      	b.n	800f378 <fm_factory_modify_k_lin_subs+0x1a0>
    else if(digit_k_lin > DIG_LIN_7)
 800f29c:	79fb      	ldrb	r3, [r7, #7]
 800f29e:	2b07      	cmp	r3, #7
 800f2a0:	d96a      	bls.n	800f378 <fm_factory_modify_k_lin_subs+0x1a0>
        if(LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f2a2:	79fb      	ldrb	r3, [r7, #7]
 800f2a4:	f1c3 030e 	rsb	r3, r3, #14
 800f2a8:	2b03      	cmp	r3, #3
 800f2aa:	d017      	beq.n	800f2dc <fm_factory_modify_k_lin_subs+0x104>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f2ac:	79fb      	ldrb	r3, [r7, #7]
 800f2ae:	f1c3 030e 	rsb	r3, r3, #14
 800f2b2:	4a39      	ldr	r2, [pc, #228]	; (800f398 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f2b4:	5cd3      	ldrb	r3, [r2, r3]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d009      	beq.n	800f2ce <fm_factory_modify_k_lin_subs+0xf6>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f2ba:	79fb      	ldrb	r3, [r7, #7]
 800f2bc:	f1c3 030e 	rsb	r3, r3, #14
 800f2c0:	4a35      	ldr	r2, [pc, #212]	; (800f398 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f2c2:	5cd2      	ldrb	r2, [r2, r3]
 800f2c4:	3a01      	subs	r2, #1
 800f2c6:	b2d1      	uxtb	r1, r2
 800f2c8:	4a33      	ldr	r2, [pc, #204]	; (800f398 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f2ca:	54d1      	strb	r1, [r2, r3]
 800f2cc:	e01d      	b.n	800f30a <fm_factory_modify_k_lin_subs+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_9;
 800f2ce:	79fb      	ldrb	r3, [r7, #7]
 800f2d0:	f1c3 030e 	rsb	r3, r3, #14
 800f2d4:	4a30      	ldr	r2, [pc, #192]	; (800f398 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f2d6:	2109      	movs	r1, #9
 800f2d8:	54d1      	strb	r1, [r2, r3]
 800f2da:	e016      	b.n	800f30a <fm_factory_modify_k_lin_subs+0x132>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f2dc:	79fb      	ldrb	r3, [r7, #7]
 800f2de:	f1c3 030e 	rsb	r3, r3, #14
 800f2e2:	4a2d      	ldr	r2, [pc, #180]	; (800f398 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f2e4:	5cd3      	ldrb	r3, [r2, r3]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d009      	beq.n	800f2fe <fm_factory_modify_k_lin_subs+0x126>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f2ea:	79fb      	ldrb	r3, [r7, #7]
 800f2ec:	f1c3 030e 	rsb	r3, r3, #14
 800f2f0:	4a29      	ldr	r2, [pc, #164]	; (800f398 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f2f2:	5cd2      	ldrb	r2, [r2, r3]
 800f2f4:	3a01      	subs	r2, #1
 800f2f6:	b2d1      	uxtb	r1, r2
 800f2f8:	4a27      	ldr	r2, [pc, #156]	; (800f398 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f2fa:	54d1      	strb	r1, [r2, r3]
 800f2fc:	e005      	b.n	800f30a <fm_factory_modify_k_lin_subs+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_1;
 800f2fe:	79fb      	ldrb	r3, [r7, #7]
 800f300:	f1c3 030e 	rsb	r3, r3, #14
 800f304:	4a24      	ldr	r2, [pc, #144]	; (800f398 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f306:	2101      	movs	r1, #1
 800f308:	54d1      	strb	r1, [r2, r3]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f30a:	2300      	movs	r3, #0
 800f30c:	60bb      	str	r3, [r7, #8]
 800f30e:	e00e      	b.n	800f32e <fm_factory_modify_k_lin_subs+0x156>
            frec_lin_new_num = (frec_lin_new_num * 10) + frec_array[j];
 800f310:	693a      	ldr	r2, [r7, #16]
 800f312:	4613      	mov	r3, r2
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	4413      	add	r3, r2
 800f318:	005b      	lsls	r3, r3, #1
 800f31a:	4619      	mov	r1, r3
 800f31c:	4a1e      	ldr	r2, [pc, #120]	; (800f398 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	4413      	add	r3, r2
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	440b      	add	r3, r1
 800f326:	613b      	str	r3, [r7, #16]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	3301      	adds	r3, #1
 800f32c:	60bb      	str	r3, [r7, #8]
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	2b06      	cmp	r3, #6
 800f332:	dded      	ble.n	800f310 <fm_factory_modify_k_lin_subs+0x138>
        if(k_sel == K_LIN_1)
 800f334:	79bb      	ldrb	r3, [r7, #6]
 800f336:	2b01      	cmp	r3, #1
 800f338:	d103      	bne.n	800f342 <fm_factory_modify_k_lin_subs+0x16a>
            frec_lin_1.num = frec_lin_new_num;
 800f33a:	4a18      	ldr	r2, [pc, #96]	; (800f39c <fm_factory_modify_k_lin_subs+0x1c4>)
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	6013      	str	r3, [r2, #0]
}
 800f340:	e01a      	b.n	800f378 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_2)
 800f342:	79bb      	ldrb	r3, [r7, #6]
 800f344:	2b02      	cmp	r3, #2
 800f346:	d103      	bne.n	800f350 <fm_factory_modify_k_lin_subs+0x178>
            frec_lin_2.num = frec_lin_new_num;
 800f348:	4a15      	ldr	r2, [pc, #84]	; (800f3a0 <fm_factory_modify_k_lin_subs+0x1c8>)
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	6013      	str	r3, [r2, #0]
}
 800f34e:	e013      	b.n	800f378 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_3)
 800f350:	79bb      	ldrb	r3, [r7, #6]
 800f352:	2b03      	cmp	r3, #3
 800f354:	d103      	bne.n	800f35e <fm_factory_modify_k_lin_subs+0x186>
            frec_lin_3.num = frec_lin_new_num;
 800f356:	4a13      	ldr	r2, [pc, #76]	; (800f3a4 <fm_factory_modify_k_lin_subs+0x1cc>)
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	6013      	str	r3, [r2, #0]
}
 800f35c:	e00c      	b.n	800f378 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_4)
 800f35e:	79bb      	ldrb	r3, [r7, #6]
 800f360:	2b04      	cmp	r3, #4
 800f362:	d103      	bne.n	800f36c <fm_factory_modify_k_lin_subs+0x194>
            frec_lin_4.num = frec_lin_new_num;
 800f364:	4a10      	ldr	r2, [pc, #64]	; (800f3a8 <fm_factory_modify_k_lin_subs+0x1d0>)
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	6013      	str	r3, [r2, #0]
}
 800f36a:	e005      	b.n	800f378 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_5)
 800f36c:	79bb      	ldrb	r3, [r7, #6]
 800f36e:	2b05      	cmp	r3, #5
 800f370:	d102      	bne.n	800f378 <fm_factory_modify_k_lin_subs+0x1a0>
            frec_lin_5.num = frec_lin_new_num;
 800f372:	4a0e      	ldr	r2, [pc, #56]	; (800f3ac <fm_factory_modify_k_lin_subs+0x1d4>)
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	6013      	str	r3, [r2, #0]
}
 800f378:	bf00      	nop
 800f37a:	3718      	adds	r7, #24
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	20001cd8 	.word	0x20001cd8
 800f384:	200000cc 	.word	0x200000cc
 800f388:	200000d4 	.word	0x200000d4
 800f38c:	200000dc 	.word	0x200000dc
 800f390:	200000e4 	.word	0x200000e4
 800f394:	200000ec 	.word	0x200000ec
 800f398:	20001ce0 	.word	0x20001ce0
 800f39c:	200000a4 	.word	0x200000a4
 800f3a0:	200000ac 	.word	0x200000ac
 800f3a4:	200000b4 	.word	0x200000b4
 800f3a8:	200000bc 	.word	0x200000bc
 800f3ac:	200000c4 	.word	0x200000c4

0800f3b0 <fm_factory_modify_res_acm_ttl>:
 * @param Resoluciones de fabrica, y de los parámetros ACM y TTL.
 * @retval None
 */
void fm_factory_modify_res_acm_ttl(sel_resolution_t units_res,
sel_resolution_t acm_res, sel_resolution_t ttl_res)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	71fb      	strb	r3, [r7, #7]
 800f3ba:	460b      	mov	r3, r1
 800f3bc:	71bb      	strb	r3, [r7, #6]
 800f3be:	4613      	mov	r3, r2
 800f3c0:	717b      	strb	r3, [r7, #5]
    units_digits_vol.res = units_res;
 800f3c2:	4a07      	ldr	r2, [pc, #28]	; (800f3e0 <fm_factory_modify_res_acm_ttl+0x30>)
 800f3c4:	79fb      	ldrb	r3, [r7, #7]
 800f3c6:	7113      	strb	r3, [r2, #4]
    acm_config.volume.res = acm_res;
 800f3c8:	4a06      	ldr	r2, [pc, #24]	; (800f3e4 <fm_factory_modify_res_acm_ttl+0x34>)
 800f3ca:	79bb      	ldrb	r3, [r7, #6]
 800f3cc:	7313      	strb	r3, [r2, #12]
    ttl_config.volume.res = ttl_res;
 800f3ce:	4a06      	ldr	r2, [pc, #24]	; (800f3e8 <fm_factory_modify_res_acm_ttl+0x38>)
 800f3d0:	797b      	ldrb	r3, [r7, #5]
 800f3d2:	7313      	strb	r3, [r2, #12]
}
 800f3d4:	bf00      	nop
 800f3d6:	370c      	adds	r7, #12
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr
 800f3e0:	2000009c 	.word	0x2000009c
 800f3e4:	20000030 	.word	0x20000030
 800f3e8:	20000010 	.word	0x20000010

0800f3ec <fm_factory_modify_res_rate>:
 * @param Resolución de fabrica, y del parámetro rate.
 * @retval None
 */
void fm_factory_modify_res_rate(sel_resolution_t units_res,
sel_resolution_t rate_res)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b083      	sub	sp, #12
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	460a      	mov	r2, r1
 800f3f6:	71fb      	strb	r3, [r7, #7]
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	71bb      	strb	r3, [r7, #6]
    units_digits_tim.res = units_res;
 800f3fc:	4a05      	ldr	r2, [pc, #20]	; (800f414 <fm_factory_modify_res_rate+0x28>)
 800f3fe:	79fb      	ldrb	r3, [r7, #7]
 800f400:	7113      	strb	r3, [r2, #4]
    rate_config.volume.res = rate_res;
 800f402:	4a05      	ldr	r2, [pc, #20]	; (800f418 <fm_factory_modify_res_rate+0x2c>)
 800f404:	79bb      	ldrb	r3, [r7, #6]
 800f406:	7313      	strb	r3, [r2, #12]
}
 800f408:	bf00      	nop
 800f40a:	370c      	adds	r7, #12
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr
 800f414:	20000094 	.word	0x20000094
 800f418:	20000050 	.word	0x20000050

0800f41c <fm_factory_modify_time_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_time_units(fmc_unit_time_t time_units)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	4603      	mov	r3, r0
 800f424:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_time = time_units;
 800f426:	4a07      	ldr	r2, [pc, #28]	; (800f444 <fm_factory_modify_time_units+0x28>)
 800f428:	79fb      	ldrb	r3, [r7, #7]
 800f42a:	7653      	strb	r3, [r2, #25]
    ttl_config.unit_time = time_units;
 800f42c:	4a06      	ldr	r2, [pc, #24]	; (800f448 <fm_factory_modify_time_units+0x2c>)
 800f42e:	79fb      	ldrb	r3, [r7, #7]
 800f430:	7653      	strb	r3, [r2, #25]
    rate_config.unit_time = time_units;
 800f432:	4a06      	ldr	r2, [pc, #24]	; (800f44c <fm_factory_modify_time_units+0x30>)
 800f434:	79fb      	ldrb	r3, [r7, #7]
 800f436:	7653      	strb	r3, [r2, #25]
}
 800f438:	bf00      	nop
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr
 800f444:	20000030 	.word	0x20000030
 800f448:	20000010 	.word	0x20000010
 800f44c:	20000050 	.word	0x20000050

0800f450 <fm_factory_modify_volume_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_volume_units(fmc_unit_volume_t volume_units)
{
 800f450:	b480      	push	{r7}
 800f452:	b083      	sub	sp, #12
 800f454:	af00      	add	r7, sp, #0
 800f456:	4603      	mov	r3, r0
 800f458:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_volume = volume_units;
 800f45a:	4a07      	ldr	r2, [pc, #28]	; (800f478 <fm_factory_modify_volume_units+0x28>)
 800f45c:	79fb      	ldrb	r3, [r7, #7]
 800f45e:	7613      	strb	r3, [r2, #24]
    ttl_config.unit_volume = volume_units;
 800f460:	4a06      	ldr	r2, [pc, #24]	; (800f47c <fm_factory_modify_volume_units+0x2c>)
 800f462:	79fb      	ldrb	r3, [r7, #7]
 800f464:	7613      	strb	r3, [r2, #24]
    rate_config.unit_volume = volume_units;
 800f466:	4a06      	ldr	r2, [pc, #24]	; (800f480 <fm_factory_modify_volume_units+0x30>)
 800f468:	79fb      	ldrb	r3, [r7, #7]
 800f46a:	7613      	strb	r3, [r2, #24]
}
 800f46c:	bf00      	nop
 800f46e:	370c      	adds	r7, #12
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr
 800f478:	20000030 	.word	0x20000030
 800f47c:	20000010 	.word	0x20000010
 800f480:	20000050 	.word	0x20000050

0800f484 <fm_factory_separate_k_factor>:
 * global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_factor()
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
    uint32_t k_num;
    int i = 7;
 800f48a:	2307      	movs	r3, #7
 800f48c:	60bb      	str	r3, [r7, #8]
    k_num = fm_factory_get_k_factor(K_FACTOR).num;
 800f48e:	463b      	mov	r3, r7
 800f490:	2100      	movs	r1, #0
 800f492:	4618      	mov	r0, r3
 800f494:	f7ff fbb6 	bl	800ec04 <fm_factory_get_k_factor>
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	60fb      	str	r3, [r7, #12]

    while (i >= 0)
 800f49c:	e021      	b.n	800f4e2 <fm_factory_separate_k_factor+0x5e>
    {
        if (k_num > 0)
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d016      	beq.n	800f4d2 <fm_factory_separate_k_factor+0x4e>
        {
            k_array[i] = k_num % 10;
 800f4a4:	68f9      	ldr	r1, [r7, #12]
 800f4a6:	4b13      	ldr	r3, [pc, #76]	; (800f4f4 <fm_factory_separate_k_factor+0x70>)
 800f4a8:	fba3 2301 	umull	r2, r3, r3, r1
 800f4ac:	08da      	lsrs	r2, r3, #3
 800f4ae:	4613      	mov	r3, r2
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	4413      	add	r3, r2
 800f4b4:	005b      	lsls	r3, r3, #1
 800f4b6:	1aca      	subs	r2, r1, r3
 800f4b8:	b2d1      	uxtb	r1, r2
 800f4ba:	4a0f      	ldr	r2, [pc, #60]	; (800f4f8 <fm_factory_separate_k_factor+0x74>)
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	4413      	add	r3, r2
 800f4c0:	460a      	mov	r2, r1
 800f4c2:	701a      	strb	r2, [r3, #0]
            k_num /= 10;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	4a0b      	ldr	r2, [pc, #44]	; (800f4f4 <fm_factory_separate_k_factor+0x70>)
 800f4c8:	fba2 2303 	umull	r2, r3, r2, r3
 800f4cc:	08db      	lsrs	r3, r3, #3
 800f4ce:	60fb      	str	r3, [r7, #12]
 800f4d0:	e004      	b.n	800f4dc <fm_factory_separate_k_factor+0x58>
        }
        else
        {
            k_array[i] = 0;
 800f4d2:	4a09      	ldr	r2, [pc, #36]	; (800f4f8 <fm_factory_separate_k_factor+0x74>)
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	4413      	add	r3, r2
 800f4d8:	2200      	movs	r2, #0
 800f4da:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	3b01      	subs	r3, #1
 800f4e0:	60bb      	str	r3, [r7, #8]
    while (i >= 0)
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	dada      	bge.n	800f49e <fm_factory_separate_k_factor+0x1a>
    }
}
 800f4e8:	bf00      	nop
 800f4ea:	bf00      	nop
 800f4ec:	3710      	adds	r7, #16
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	cccccccd 	.word	0xcccccccd
 800f4f8:	20001cd0 	.word	0x20001cd0

0800f4fc <fm_factory_separate_k_lin_and_frec>:

void fm_factory_separate_k_lin_and_frec(sel_k k_sel)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b08a      	sub	sp, #40	; 0x28
 800f500:	af00      	add	r7, sp, #0
 800f502:	4603      	mov	r3, r0
 800f504:	71fb      	strb	r3, [r7, #7]
    uint32_t k_lin_num;
    uint32_t frec_num;

    int i = 7; //Contador que funciona solo en el while de esta función.
 800f506:	2307      	movs	r3, #7
 800f508:	61fb      	str	r3, [r7, #28]
    int j = 6; //Contador que funciona solo en el while de esta función.
 800f50a:	2306      	movs	r3, #6
 800f50c:	61bb      	str	r3, [r7, #24]
    k_lin_num = fm_factory_get_k_factor(k_sel).num;
 800f50e:	f107 0308 	add.w	r3, r7, #8
 800f512:	79fa      	ldrb	r2, [r7, #7]
 800f514:	4611      	mov	r1, r2
 800f516:	4618      	mov	r0, r3
 800f518:	f7ff fb74 	bl	800ec04 <fm_factory_get_k_factor>
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	627b      	str	r3, [r7, #36]	; 0x24
    frec_num = fm_factory_get_frec_lin(k_sel).num;
 800f520:	f107 0310 	add.w	r3, r7, #16
 800f524:	79fa      	ldrb	r2, [r7, #7]
 800f526:	4611      	mov	r1, r2
 800f528:	4618      	mov	r0, r3
 800f52a:	f7ff fbc7 	bl	800ecbc <fm_factory_get_frec_lin>
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	623b      	str	r3, [r7, #32]

    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800f532:	e021      	b.n	800f578 <fm_factory_separate_k_lin_and_frec+0x7c>
    {
        if (k_lin_num > 0)
 800f534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f536:	2b00      	cmp	r3, #0
 800f538:	d016      	beq.n	800f568 <fm_factory_separate_k_lin_and_frec+0x6c>
        {
            k_lin_array[i] = k_lin_num % 10;
 800f53a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f53c:	4b25      	ldr	r3, [pc, #148]	; (800f5d4 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f53e:	fba3 2301 	umull	r2, r3, r3, r1
 800f542:	08da      	lsrs	r2, r3, #3
 800f544:	4613      	mov	r3, r2
 800f546:	009b      	lsls	r3, r3, #2
 800f548:	4413      	add	r3, r2
 800f54a:	005b      	lsls	r3, r3, #1
 800f54c:	1aca      	subs	r2, r1, r3
 800f54e:	b2d1      	uxtb	r1, r2
 800f550:	4a21      	ldr	r2, [pc, #132]	; (800f5d8 <fm_factory_separate_k_lin_and_frec+0xdc>)
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	4413      	add	r3, r2
 800f556:	460a      	mov	r2, r1
 800f558:	701a      	strb	r2, [r3, #0]
            k_lin_num /= 10;
 800f55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55c:	4a1d      	ldr	r2, [pc, #116]	; (800f5d4 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f55e:	fba2 2303 	umull	r2, r3, r2, r3
 800f562:	08db      	lsrs	r3, r3, #3
 800f564:	627b      	str	r3, [r7, #36]	; 0x24
 800f566:	e004      	b.n	800f572 <fm_factory_separate_k_lin_and_frec+0x76>
        }
        else
        {
            k_lin_array[i] = 0;
 800f568:	4a1b      	ldr	r2, [pc, #108]	; (800f5d8 <fm_factory_separate_k_lin_and_frec+0xdc>)
 800f56a:	69fb      	ldr	r3, [r7, #28]
 800f56c:	4413      	add	r3, r2
 800f56e:	2200      	movs	r2, #0
 800f570:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	3b01      	subs	r3, #1
 800f576:	61fb      	str	r3, [r7, #28]
    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	dada      	bge.n	800f534 <fm_factory_separate_k_lin_and_frec+0x38>
    }

    while(j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800f57e:	e021      	b.n	800f5c4 <fm_factory_separate_k_lin_and_frec+0xc8>
    {
        if(frec_num > 0)
 800f580:	6a3b      	ldr	r3, [r7, #32]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d016      	beq.n	800f5b4 <fm_factory_separate_k_lin_and_frec+0xb8>
        {
            frec_array[j] = frec_num % 10;
 800f586:	6a39      	ldr	r1, [r7, #32]
 800f588:	4b12      	ldr	r3, [pc, #72]	; (800f5d4 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f58a:	fba3 2301 	umull	r2, r3, r3, r1
 800f58e:	08da      	lsrs	r2, r3, #3
 800f590:	4613      	mov	r3, r2
 800f592:	009b      	lsls	r3, r3, #2
 800f594:	4413      	add	r3, r2
 800f596:	005b      	lsls	r3, r3, #1
 800f598:	1aca      	subs	r2, r1, r3
 800f59a:	b2d1      	uxtb	r1, r2
 800f59c:	4a0f      	ldr	r2, [pc, #60]	; (800f5dc <fm_factory_separate_k_lin_and_frec+0xe0>)
 800f59e:	69bb      	ldr	r3, [r7, #24]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	460a      	mov	r2, r1
 800f5a4:	701a      	strb	r2, [r3, #0]
            frec_num /= 10;
 800f5a6:	6a3b      	ldr	r3, [r7, #32]
 800f5a8:	4a0a      	ldr	r2, [pc, #40]	; (800f5d4 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f5aa:	fba2 2303 	umull	r2, r3, r2, r3
 800f5ae:	08db      	lsrs	r3, r3, #3
 800f5b0:	623b      	str	r3, [r7, #32]
 800f5b2:	e004      	b.n	800f5be <fm_factory_separate_k_lin_and_frec+0xc2>
        }
        else
        {
            frec_array[j] = 0;
 800f5b4:	4a09      	ldr	r2, [pc, #36]	; (800f5dc <fm_factory_separate_k_lin_and_frec+0xe0>)
 800f5b6:	69bb      	ldr	r3, [r7, #24]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	701a      	strb	r2, [r3, #0]
        }
        j--;
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	3b01      	subs	r3, #1
 800f5c2:	61bb      	str	r3, [r7, #24]
    while(j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800f5c4:	69bb      	ldr	r3, [r7, #24]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	dada      	bge.n	800f580 <fm_factory_separate_k_lin_and_frec+0x84>
    }
}
 800f5ca:	bf00      	nop
 800f5cc:	bf00      	nop
 800f5ce:	3728      	adds	r7, #40	; 0x28
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	cccccccd 	.word	0xcccccccd
 800f5d8:	20001cd8 	.word	0x20001cd8
 800f5dc:	20001ce0 	.word	0x20001ce0

0800f5e0 <HAL_GPIO_EXTI_Rising_Callback>:
// Private function bodies.

// Interrupts

void HAL_GPIO_EXTI_Rising_Callback(uint16_t gpio_pin) // @suppress("Name convention for function")
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b084      	sub	sp, #16
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	80fb      	strh	r3, [r7, #6]
    /*
     * Deshabilito interrupciones para evitar rebotes de los botones, hasta que
     * la tarea task_debounce termine su ejecución y se bloquee.
     */
    HAL_NVIC_DisableIRQ(EXTI10_IRQn);
 800f5ea:	2015      	movs	r0, #21
 800f5ec:	f7f4 fc6e 	bl	8003ecc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI11_IRQn);
 800f5f0:	2016      	movs	r0, #22
 800f5f2:	f7f4 fc6b 	bl	8003ecc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI12_IRQn);
 800f5f6:	2017      	movs	r0, #23
 800f5f8:	f7f4 fc68 	bl	8003ecc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI13_IRQn);
 800f5fc:	2018      	movs	r0, #24
 800f5fe:	f7f4 fc65 	bl	8003ecc <HAL_NVIC_DisableIRQ>
    fm_event_t event_now;

    /*
     * Compruebo qué botón fue el presionado.
     */
    switch (gpio_pin)
 800f602:	88fb      	ldrh	r3, [r7, #6]
 800f604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f608:	d018      	beq.n	800f63c <HAL_GPIO_EXTI_Rising_Callback+0x5c>
 800f60a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f60e:	dc18      	bgt.n	800f642 <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800f610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f614:	d00f      	beq.n	800f636 <HAL_GPIO_EXTI_Rising_Callback+0x56>
 800f616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f61a:	dc12      	bgt.n	800f642 <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800f61c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f620:	d003      	beq.n	800f62a <HAL_GPIO_EXTI_Rising_Callback+0x4a>
 800f622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f626:	d003      	beq.n	800f630 <HAL_GPIO_EXTI_Rising_Callback+0x50>
        break;
        case KEY_ESC:
            event_now = EVENT_KEY_ESC;
        break;
        default:
        break;
 800f628:	e00b      	b.n	800f642 <HAL_GPIO_EXTI_Rising_Callback+0x62>
            event_now = EVENT_KEY_UP;
 800f62a:	2302      	movs	r3, #2
 800f62c:	73fb      	strb	r3, [r7, #15]
        break;
 800f62e:	e009      	b.n	800f644 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_DOWN;
 800f630:	2303      	movs	r3, #3
 800f632:	73fb      	strb	r3, [r7, #15]
        break;
 800f634:	e006      	b.n	800f644 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ENTER;
 800f636:	2304      	movs	r3, #4
 800f638:	73fb      	strb	r3, [r7, #15]
        break;
 800f63a:	e003      	b.n	800f644 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ESC;
 800f63c:	2305      	movs	r3, #5
 800f63e:	73fb      	strb	r3, [r7, #15]
        break;
 800f640:	e000      	b.n	800f644 <HAL_GPIO_EXTI_Rising_Callback+0x64>
        break;
 800f642:	bf00      	nop
    /*
     * Pongo el nombre del botón presionado en la cola de eventos y libero el
     * semáforo de la tarea task_debounce, para que esta se bloquee durante el
     * tiempo necesario para que no haya rebotes de los botones.
     */
    tx_queue_send(&event_queue_ptr,&event_now,TX_NO_WAIT);
 800f644:	f107 030f 	add.w	r3, r7, #15
 800f648:	2200      	movs	r2, #0
 800f64a:	4619      	mov	r1, r3
 800f64c:	4805      	ldr	r0, [pc, #20]	; (800f664 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 800f64e:	f7fe fe09 	bl	800e264 <_txe_queue_send>
    tx_semaphore_ceiling_put(&debounce_semaphore_ptr, 1);
 800f652:	2101      	movs	r1, #1
 800f654:	4804      	ldr	r0, [pc, #16]	; (800f668 <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 800f656:	f7fe fe4f 	bl	800e2f8 <_txe_semaphore_ceiling_put>
}
 800f65a:	bf00      	nop
 800f65c:	3710      	adds	r7, #16
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	20001388 	.word	0x20001388
 800f668:	2000136c 	.word	0x2000136c

0800f66c <fm_lcd_acm_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_rate()
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b0b8      	sub	sp, #224	; 0xe0
 800f670:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800f672:	f107 0318 	add.w	r3, r7, #24
 800f676:	4618      	mov	r0, r3
 800f678:	f004 febe 	bl	80143f8 <fmc_get_acm>
 800f67c:	2314      	movs	r3, #20
 800f67e:	9301      	str	r3, [sp, #4]
 800f680:	1d3b      	adds	r3, r7, #4
 800f682:	9300      	str	r3, [sp, #0]
 800f684:	2309      	movs	r3, #9
 800f686:	2220      	movs	r2, #32
 800f688:	f107 0120 	add.w	r1, r7, #32
 800f68c:	c903      	ldmia	r1, {r0, r1}
 800f68e:	f000 fa13 	bl	800fab8 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800f692:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f696:	4618      	mov	r0, r3
 800f698:	f004 feae 	bl	80143f8 <fmc_get_acm>
 800f69c:	1d3a      	adds	r2, r7, #4
 800f69e:	2314      	movs	r3, #20
 800f6a0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f6a4:	c903      	ldmia	r1, {r0, r1}
 800f6a6:	f000 f9c3 	bl	800fa30 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f6aa:	1d3b      	adds	r3, r7, #4
 800f6ac:	2100      	movs	r1, #0
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f000 fbf0 	bl	800fe94 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800f6b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f004 ff03 	bl	80144c4 <fmc_get_rate>
 800f6be:	2314      	movs	r3, #20
 800f6c0:	9301      	str	r3, [sp, #4]
 800f6c2:	1d3b      	adds	r3, r7, #4
 800f6c4:	9300      	str	r3, [sp, #0]
 800f6c6:	2308      	movs	r3, #8
 800f6c8:	2220      	movs	r2, #32
 800f6ca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f6ce:	c903      	ldmia	r1, {r0, r1}
 800f6d0:	f000 f9f2 	bl	800fab8 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800f6d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f004 fef3 	bl	80144c4 <fmc_get_rate>
 800f6de:	1d3a      	adds	r2, r7, #4
 800f6e0:	2314      	movs	r3, #20
 800f6e2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800f6e6:	c903      	ldmia	r1, {r0, r1}
 800f6e8:	f000 f9a2 	bl	800fa30 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800f6ec:	1d3b      	adds	r3, r7, #4
 800f6ee:	2101      	movs	r1, #1
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f000 fbcf 	bl	800fe94 <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800f6f6:	2100      	movs	r1, #0
 800f6f8:	2006      	movs	r0, #6
 800f6fa:	f001 fee7 	bl	80114cc <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800f6fe:	2100      	movs	r1, #0
 800f700:	2002      	movs	r0, #2
 800f702:	f001 fee3 	bl	80114cc <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800f706:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f70a:	4618      	mov	r0, r3
 800f70c:	f004 fe74 	bl	80143f8 <fmc_get_acm>
 800f710:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800f714:	2100      	movs	r1, #0
 800f716:	4618      	mov	r0, r3
 800f718:	f002 fa5c 	bl	8011bd4 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800f71c:	2100      	movs	r1, #0
 800f71e:	2007      	movs	r0, #7
 800f720:	f001 fed4 	bl	80114cc <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_acm().unit_time, 0x0);
 800f724:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800f728:	4618      	mov	r0, r3
 800f72a:	f004 fe65 	bl	80143f8 <fmc_get_acm>
 800f72e:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800f732:	2100      	movs	r1, #0
 800f734:	4618      	mov	r0, r3
 800f736:	f002 fa0b 	bl	8011b50 <lcd_set_time_unit>
}
 800f73a:	bf00      	nop
 800f73c:	37d8      	adds	r7, #216	; 0xd8
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}

0800f742 <fm_lcd_acm_temp>:
 * de forma personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_temp()
{
 800f742:	b580      	push	{r7, lr}
 800f744:	b0a2      	sub	sp, #136	; 0x88
 800f746:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800f748:	f107 0318 	add.w	r3, r7, #24
 800f74c:	4618      	mov	r0, r3
 800f74e:	f004 fe53 	bl	80143f8 <fmc_get_acm>
 800f752:	2314      	movs	r3, #20
 800f754:	9301      	str	r3, [sp, #4]
 800f756:	1d3b      	adds	r3, r7, #4
 800f758:	9300      	str	r3, [sp, #0]
 800f75a:	2309      	movs	r3, #9
 800f75c:	2220      	movs	r2, #32
 800f75e:	f107 0120 	add.w	r1, r7, #32
 800f762:	c903      	ldmia	r1, {r0, r1}
 800f764:	f000 f9a8 	bl	800fab8 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800f768:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f76c:	4618      	mov	r0, r3
 800f76e:	f004 fe43 	bl	80143f8 <fmc_get_acm>
 800f772:	1d3a      	adds	r2, r7, #4
 800f774:	2314      	movs	r3, #20
 800f776:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f77a:	c903      	ldmia	r1, {r0, r1}
 800f77c:	f000 f958 	bl	800fa30 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f780:	1d3b      	adds	r3, r7, #4
 800f782:	2100      	movs	r1, #0
 800f784:	4618      	mov	r0, r3
 800f786:	f000 fb85 	bl	800fe94 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_stm32_temp().temperature, ' ', LINE_1_DIGITS,
 800f78a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f78e:	4618      	mov	r0, r3
 800f790:	f004 fe72 	bl	8014478 <fmc_get_stm32_temp>
 800f794:	2314      	movs	r3, #20
 800f796:	9301      	str	r3, [sp, #4]
 800f798:	1d3b      	adds	r3, r7, #4
 800f79a:	9300      	str	r3, [sp, #0]
 800f79c:	2308      	movs	r3, #8
 800f79e:	2220      	movs	r2, #32
 800f7a0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800f7a4:	c903      	ldmia	r1, {r0, r1}
 800f7a6:	f000 f987 	bl	800fab8 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_stm32_temp().temperature, lcd_msg,
 800f7aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f004 fe62 	bl	8014478 <fmc_get_stm32_temp>
 800f7b4:	1d3a      	adds	r2, r7, #4
 800f7b6:	2314      	movs	r3, #20
 800f7b8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800f7bc:	c903      	ldmia	r1, {r0, r1}
 800f7be:	f000 f937 	bl	800fa30 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800f7c2:	1d3b      	adds	r3, r7, #4
 800f7c4:	2101      	movs	r1, #1
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f000 fb64 	bl	800fe94 <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800f7cc:	2100      	movs	r1, #0
 800f7ce:	2006      	movs	r0, #6
 800f7d0:	f001 fe7c 	bl	80114cc <lcd_set_symbol>
    lcd_set_vol_unit(fmc_get_stm32_temp().unit_volume_temp, 0x0);
 800f7d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f004 fe4d 	bl	8014478 <fmc_get_stm32_temp>
 800f7de:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f7e2:	2100      	movs	r1, #0
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f002 f9f5 	bl	8011bd4 <lcd_set_vol_unit>
}
 800f7ea:	bf00      	nop
 800f7ec:	3780      	adds	r7, #128	; 0x80
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}

0800f7f2 <fm_lcd_clear>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void fm_lcd_clear()
{
 800f7f2:	b580      	push	{r7, lr}
 800f7f4:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800f7f6:	f000 fd65 	bl	80102c4 <lcd_clear_all>
}
 800f7fa:	bf00      	nop
 800f7fc:	bd80      	pop	{r7, pc}
	...

0800f800 <fm_lcd_date_hour>:
 * @param Hora y fecha a imprimir.
 * @retval None
 */
void fm_lcd_date_hour(user_or_configuration_t configuration,
fm_event_t event_id, sel_date_time_field_t field)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b090      	sub	sp, #64	; 0x40
 800f804:	af02      	add	r7, sp, #8
 800f806:	4603      	mov	r3, r0
 800f808:	73fb      	strb	r3, [r7, #15]
 800f80a:	460b      	mov	r3, r1
 800f80c:	73bb      	strb	r3, [r7, #14]
 800f80e:	4613      	mov	r3, r2
 800f810:	737b      	strb	r3, [r7, #13]
    char lcd_msg[PCF8553_DATA_SIZE];

    /*
     * Se comprueba si se está en el menú de configuración o de usuario.
     */
    if(configuration)
 800f812:	7bfb      	ldrb	r3, [r7, #15]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00a      	beq.n	800f82e <fm_lcd_date_hour+0x2e>
    {
        date_to_str = fm_factory_get_fp_date_conf();
 800f818:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7ff fad7 	bl	800edd0 <fm_factory_get_fp_date_conf>
        time_to_str = fm_factory_get_fp_time_conf();
 800f822:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f826:	4618      	mov	r0, r3
 800f828:	f7ff fae4 	bl	800edf4 <fm_factory_get_fp_time_conf>
 800f82c:	e019      	b.n	800f862 <fm_lcd_date_hour+0x62>
    }
    else
    {
        fm_calendar_format_date();
 800f82e:	f7ff f92f 	bl	800ea90 <fm_calendar_format_date>
        fm_calendar_format_time();
 800f832:	f7ff f907 	bl	800ea44 <fm_calendar_format_time>

        date_to_str = fm_factory_get_fp_date();
 800f836:	463b      	mov	r3, r7
 800f838:	4618      	mov	r0, r3
 800f83a:	f7ff faa5 	bl	800ed88 <fm_factory_get_fp_date>
 800f83e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f842:	463a      	mov	r2, r7
 800f844:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f848:	e883 0003 	stmia.w	r3, {r0, r1}
        time_to_str = fm_factory_get_fp_time();
 800f84c:	463b      	mov	r3, r7
 800f84e:	4618      	mov	r0, r3
 800f850:	f7ff faac 	bl	800edac <fm_factory_get_fp_time>
 800f854:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f858:	463a      	mov	r2, r7
 800f85a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f85e:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    fm_lcd_fp_to_str(date_to_str, '0', LINE_0_DIGITS, lcd_msg,
 800f862:	2314      	movs	r3, #20
 800f864:	9301      	str	r3, [sp, #4]
 800f866:	f107 0314 	add.w	r3, r7, #20
 800f86a:	9300      	str	r3, [sp, #0]
 800f86c:	2309      	movs	r3, #9
 800f86e:	2230      	movs	r2, #48	; 0x30
 800f870:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f874:	c903      	ldmia	r1, {r0, r1}
 800f876:	f000 f91f 	bl	800fab8 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f87a:	f107 0314 	add.w	r3, r7, #20
 800f87e:	2100      	movs	r1, #0
 800f880:	4618      	mov	r0, r3
 800f882:	f000 fb07 	bl	800fe94 <fm_lcd_puts>
    lcd_set_point(HIGH_ROW, PNT_1);
 800f886:	2101      	movs	r1, #1
 800f888:	2000      	movs	r0, #0
 800f88a:	f001 fd73 	bl	8011374 <lcd_set_point>
    lcd_set_point(HIGH_ROW, PNT_3);
 800f88e:	2103      	movs	r1, #3
 800f890:	2000      	movs	r0, #0
 800f892:	f001 fd6f 	bl	8011374 <lcd_set_point>

    fm_lcd_fp_to_str(time_to_str, '0', LINE_1_DIGITS, lcd_msg,
 800f896:	2314      	movs	r3, #20
 800f898:	9301      	str	r3, [sp, #4]
 800f89a:	f107 0314 	add.w	r3, r7, #20
 800f89e:	9300      	str	r3, [sp, #0]
 800f8a0:	2308      	movs	r3, #8
 800f8a2:	2230      	movs	r2, #48	; 0x30
 800f8a4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f8a8:	c903      	ldmia	r1, {r0, r1}
 800f8aa:	f000 f905 	bl	800fab8 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800f8ae:	f107 0314 	add.w	r3, r7, #20
 800f8b2:	2101      	movs	r1, #1
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f000 faed 	bl	800fe94 <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800f8ba:	2101      	movs	r1, #1
 800f8bc:	2000      	movs	r0, #0
 800f8be:	f000 fd29 	bl	8010314 <lcd_clear_digit>
    lcd_set_point(LOW_ROW, PNT_2);
 800f8c2:	2102      	movs	r1, #2
 800f8c4:	2001      	movs	r0, #1
 800f8c6:	f001 fd55 	bl	8011374 <lcd_set_point>
    lcd_set_point(LOW_ROW, PNT_4);
 800f8ca:	2104      	movs	r1, #4
 800f8cc:	2001      	movs	r0, #1
 800f8ce:	f001 fd51 	bl	8011374 <lcd_set_point>

    if(configuration)
 800f8d2:	7bfb      	ldrb	r3, [r7, #15]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d07e      	beq.n	800f9d6 <fm_lcd_date_hour+0x1d6>
    {
        if(event_id == EVENT_KEY_ENTER ||
 800f8d8:	7bbb      	ldrb	r3, [r7, #14]
 800f8da:	2b04      	cmp	r3, #4
 800f8dc:	d006      	beq.n	800f8ec <fm_lcd_date_hour+0xec>
        (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800f8de:	4b40      	ldr	r3, [pc, #256]	; (800f9e0 <fm_lcd_date_hour+0x1e0>)
 800f8e0:	781b      	ldrb	r3, [r3, #0]
        if(event_id == EVENT_KEY_ENTER ||
 800f8e2:	2b04      	cmp	r3, #4
 800f8e4:	d106      	bne.n	800f8f4 <fm_lcd_date_hour+0xf4>
        (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800f8e6:	7bbb      	ldrb	r3, [r7, #14]
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d103      	bne.n	800f8f4 <fm_lcd_date_hour+0xf4>
        {
            blink = 1;
 800f8ec:	4b3d      	ldr	r3, [pc, #244]	; (800f9e4 <fm_lcd_date_hour+0x1e4>)
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	601a      	str	r2, [r3, #0]
 800f8f2:	e016      	b.n	800f922 <fm_lcd_date_hour+0x122>
        }
        else if(event_id == EVENT_KEY_DOWN ||
 800f8f4:	7bbb      	ldrb	r3, [r7, #14]
 800f8f6:	2b03      	cmp	r3, #3
 800f8f8:	d010      	beq.n	800f91c <fm_lcd_date_hour+0x11c>
        (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800f8fa:	4b39      	ldr	r3, [pc, #228]	; (800f9e0 <fm_lcd_date_hour+0x1e0>)
 800f8fc:	781b      	ldrb	r3, [r3, #0]
        else if(event_id == EVENT_KEY_DOWN ||
 800f8fe:	2b03      	cmp	r3, #3
 800f900:	d102      	bne.n	800f908 <fm_lcd_date_hour+0x108>
        (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800f902:	7bbb      	ldrb	r3, [r7, #14]
 800f904:	2b01      	cmp	r3, #1
 800f906:	d009      	beq.n	800f91c <fm_lcd_date_hour+0x11c>
 800f908:	7bbb      	ldrb	r3, [r7, #14]
 800f90a:	2b02      	cmp	r3, #2
 800f90c:	d006      	beq.n	800f91c <fm_lcd_date_hour+0x11c>
        event_id == EVENT_KEY_UP ||
        (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800f90e:	4b34      	ldr	r3, [pc, #208]	; (800f9e0 <fm_lcd_date_hour+0x1e0>)
 800f910:	781b      	ldrb	r3, [r3, #0]
        event_id == EVENT_KEY_UP ||
 800f912:	2b02      	cmp	r3, #2
 800f914:	d105      	bne.n	800f922 <fm_lcd_date_hour+0x122>
        (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800f916:	7bbb      	ldrb	r3, [r7, #14]
 800f918:	2b01      	cmp	r3, #1
 800f91a:	d102      	bne.n	800f922 <fm_lcd_date_hour+0x122>
        {
            blink = 0;
 800f91c:	4b31      	ldr	r3, [pc, #196]	; (800f9e4 <fm_lcd_date_hour+0x1e4>)
 800f91e:	2200      	movs	r2, #0
 800f920:	601a      	str	r2, [r3, #0]
        }

        if(blink == 1)
 800f922:	4b30      	ldr	r3, [pc, #192]	; (800f9e4 <fm_lcd_date_hour+0x1e4>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	2b01      	cmp	r3, #1
 800f928:	d152      	bne.n	800f9d0 <fm_lcd_date_hour+0x1d0>
        {
            if(field == DAY)
 800f92a:	7b7b      	ldrb	r3, [r7, #13]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d108      	bne.n	800f942 <fm_lcd_date_hour+0x142>
            {
                lcd_clear_digit(DIGIT_1, HIGH_ROW);
 800f930:	2100      	movs	r1, #0
 800f932:	2001      	movs	r0, #1
 800f934:	f000 fcee 	bl	8010314 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_0, HIGH_ROW);
 800f938:	2100      	movs	r1, #0
 800f93a:	2000      	movs	r0, #0
 800f93c:	f000 fcea 	bl	8010314 <lcd_clear_digit>
 800f940:	e042      	b.n	800f9c8 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == MONTH)
 800f942:	7b7b      	ldrb	r3, [r7, #13]
 800f944:	2b01      	cmp	r3, #1
 800f946:	d108      	bne.n	800f95a <fm_lcd_date_hour+0x15a>
            {
                lcd_clear_digit(DIGIT_3, HIGH_ROW);
 800f948:	2100      	movs	r1, #0
 800f94a:	2003      	movs	r0, #3
 800f94c:	f000 fce2 	bl	8010314 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_2, HIGH_ROW);
 800f950:	2100      	movs	r1, #0
 800f952:	2002      	movs	r0, #2
 800f954:	f000 fcde 	bl	8010314 <lcd_clear_digit>
 800f958:	e036      	b.n	800f9c8 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == YEAR)
 800f95a:	7b7b      	ldrb	r3, [r7, #13]
 800f95c:	2b02      	cmp	r3, #2
 800f95e:	d110      	bne.n	800f982 <fm_lcd_date_hour+0x182>
            {
                lcd_clear_digit(DIGIT_7, HIGH_ROW);
 800f960:	2100      	movs	r1, #0
 800f962:	2007      	movs	r0, #7
 800f964:	f000 fcd6 	bl	8010314 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_6, HIGH_ROW);
 800f968:	2100      	movs	r1, #0
 800f96a:	2006      	movs	r0, #6
 800f96c:	f000 fcd2 	bl	8010314 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, HIGH_ROW);
 800f970:	2100      	movs	r1, #0
 800f972:	2005      	movs	r0, #5
 800f974:	f000 fcce 	bl	8010314 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_4, HIGH_ROW);
 800f978:	2100      	movs	r1, #0
 800f97a:	2004      	movs	r0, #4
 800f97c:	f000 fcca 	bl	8010314 <lcd_clear_digit>
 800f980:	e022      	b.n	800f9c8 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == HOUR)
 800f982:	7b7b      	ldrb	r3, [r7, #13]
 800f984:	2b03      	cmp	r3, #3
 800f986:	d108      	bne.n	800f99a <fm_lcd_date_hour+0x19a>
            {
                lcd_clear_digit(DIGIT_2, LOW_ROW);
 800f988:	2101      	movs	r1, #1
 800f98a:	2002      	movs	r0, #2
 800f98c:	f000 fcc2 	bl	8010314 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_1, LOW_ROW);
 800f990:	2101      	movs	r1, #1
 800f992:	2001      	movs	r0, #1
 800f994:	f000 fcbe 	bl	8010314 <lcd_clear_digit>
 800f998:	e016      	b.n	800f9c8 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == MINUTE)
 800f99a:	7b7b      	ldrb	r3, [r7, #13]
 800f99c:	2b04      	cmp	r3, #4
 800f99e:	d108      	bne.n	800f9b2 <fm_lcd_date_hour+0x1b2>
            {
                lcd_clear_digit(DIGIT_4, LOW_ROW);
 800f9a0:	2101      	movs	r1, #1
 800f9a2:	2004      	movs	r0, #4
 800f9a4:	f000 fcb6 	bl	8010314 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_3, LOW_ROW);
 800f9a8:	2101      	movs	r1, #1
 800f9aa:	2003      	movs	r0, #3
 800f9ac:	f000 fcb2 	bl	8010314 <lcd_clear_digit>
 800f9b0:	e00a      	b.n	800f9c8 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == SECOND)
 800f9b2:	7b7b      	ldrb	r3, [r7, #13]
 800f9b4:	2b05      	cmp	r3, #5
 800f9b6:	d107      	bne.n	800f9c8 <fm_lcd_date_hour+0x1c8>
            {
                lcd_clear_digit(DIGIT_6, LOW_ROW);
 800f9b8:	2101      	movs	r1, #1
 800f9ba:	2006      	movs	r0, #6
 800f9bc:	f000 fcaa 	bl	8010314 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, LOW_ROW);
 800f9c0:	2101      	movs	r1, #1
 800f9c2:	2005      	movs	r0, #5
 800f9c4:	f000 fca6 	bl	8010314 <lcd_clear_digit>
            }

            blink = 0;
 800f9c8:	4b06      	ldr	r3, [pc, #24]	; (800f9e4 <fm_lcd_date_hour+0x1e4>)
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	601a      	str	r2, [r3, #0]
        else
        {
            blink = 1;
        }
    }
}
 800f9ce:	e002      	b.n	800f9d6 <fm_lcd_date_hour+0x1d6>
            blink = 1;
 800f9d0:	4b04      	ldr	r3, [pc, #16]	; (800f9e4 <fm_lcd_date_hour+0x1e4>)
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	601a      	str	r2, [r3, #0]
}
 800f9d6:	bf00      	nop
 800f9d8:	3738      	adds	r7, #56	; 0x38
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	20001db7 	.word	0x20001db7
 800f9e4:	2000011c 	.word	0x2000011c

0800f9e8 <fm_lcd_format_number_in_line>:
 * @param Enumeracion rows_t de lcd.h
 * @retval arreglo con la información formateada tipo char.
 */
void fm_lcd_format_number_in_line(rows_t line, uint32_t data, char *p_str,
int length)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b084      	sub	sp, #16
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	60b9      	str	r1, [r7, #8]
 800f9f0:	607a      	str	r2, [r7, #4]
 800f9f2:	603b      	str	r3, [r7, #0]
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	73fb      	strb	r3, [r7, #15]
    if (line == HIGH_ROW)
 800f9f8:	7bfb      	ldrb	r3, [r7, #15]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d106      	bne.n	800fa0c <fm_lcd_format_number_in_line+0x24>
    {
        snprintf(p_str, length, "%8lu", data);
 800f9fe:	6839      	ldr	r1, [r7, #0]
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	4a09      	ldr	r2, [pc, #36]	; (800fa28 <fm_lcd_format_number_in_line+0x40>)
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f004 fe71 	bl	80146ec <sniprintf>
    }
    else if (line == LOW_ROW)
    {
        snprintf(p_str, length, "%7lu", data);
    }
}
 800fa0a:	e008      	b.n	800fa1e <fm_lcd_format_number_in_line+0x36>
    else if (line == LOW_ROW)
 800fa0c:	7bfb      	ldrb	r3, [r7, #15]
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d105      	bne.n	800fa1e <fm_lcd_format_number_in_line+0x36>
        snprintf(p_str, length, "%7lu", data);
 800fa12:	6839      	ldr	r1, [r7, #0]
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	4a05      	ldr	r2, [pc, #20]	; (800fa2c <fm_lcd_format_number_in_line+0x44>)
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f004 fe67 	bl	80146ec <sniprintf>
}
 800fa1e:	bf00      	nop
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	08015204 	.word	0x08015204
 800fa2c:	0801520c 	.word	0x0801520c

0800fa30 <fm_lcd_fp_add_dot>:
 * @param str_size tamaño del string.
 * @retval int.
 *
 */
int fm_lcd_fp_add_dot(fmc_fp_t fp, char *p_str, int str_size)
{
 800fa30:	b590      	push	{r4, r7, lr}
 800fa32:	b087      	sub	sp, #28
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	f107 0408 	add.w	r4, r7, #8
 800fa3a:	e884 0003 	stmia.w	r4, {r0, r1}
 800fa3e:	607a      	str	r2, [r7, #4]
 800fa40:	603b      	str	r3, [r7, #0]
    int idx_now;

    /*
     * Si la resolución asignada por el usuario es 0, no hay nada que hacer.
     */
    if (fp.res == 0)
 800fa42:	7b3b      	ldrb	r3, [r7, #12]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d101      	bne.n	800fa4c <fm_lcd_fp_add_dot+0x1c>
    {
        return (0);
 800fa48:	2300      	movs	r3, #0
 800fa4a:	e031      	b.n	800fab0 <fm_lcd_fp_add_dot+0x80>
    }

    idx_now = strlen(p_str); //Como indice apunta a terminador nulo.
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f7f0 fd39 	bl	80004c4 <strlen>
 800fa52:	4603      	mov	r3, r0
 800fa54:	617b      	str	r3, [r7, #20]

    /*
     * Chequeo de contorno para ver si entra el punto o no.
     */

    if ((idx_now + 1 + 1) >= str_size)
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	3302      	adds	r3, #2
 800fa5a:	683a      	ldr	r2, [r7, #0]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	dc02      	bgt.n	800fa66 <fm_lcd_fp_add_dot+0x36>
    {
        return (-1);
 800fa60:	f04f 33ff 	mov.w	r3, #4294967295
 800fa64:	e024      	b.n	800fab0 <fm_lcd_fp_add_dot+0x80>
    }

    idx_end = idx_now - fp.res; //Como índice apunta a donde debe ir el '.'
 800fa66:	7b3b      	ldrb	r3, [r7, #12]
 800fa68:	461a      	mov	r2, r3
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	1a9b      	subs	r3, r3, r2
 800fa6e:	613b      	str	r3, [r7, #16]

    /*
     * Desplazo posiciones en el arreglo hasta llegar a la posición donde debe
     * ir ubicado el '.'
     */
    while (idx_now != idx_end)
 800fa70:	e00b      	b.n	800fa8a <fm_lcd_fp_add_dot+0x5a>
    {
        p_str[idx_now + 1] = p_str[idx_now];
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	441a      	add	r2, r3
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	6879      	ldr	r1, [r7, #4]
 800fa7e:	440b      	add	r3, r1
 800fa80:	7812      	ldrb	r2, [r2, #0]
 800fa82:	701a      	strb	r2, [r3, #0]
        idx_now--;
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	3b01      	subs	r3, #1
 800fa88:	617b      	str	r3, [r7, #20]
    while (idx_now != idx_end)
 800fa8a:	697a      	ldr	r2, [r7, #20]
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d1ef      	bne.n	800fa72 <fm_lcd_fp_add_dot+0x42>
    }
    p_str[idx_now + 1] = p_str[idx_now];
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	687a      	ldr	r2, [r7, #4]
 800fa96:	441a      	add	r2, r3
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	6879      	ldr	r1, [r7, #4]
 800fa9e:	440b      	add	r3, r1
 800faa0:	7812      	ldrb	r2, [r2, #0]
 800faa2:	701a      	strb	r2, [r3, #0]
    p_str[idx_now] = '.';
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	4413      	add	r3, r2
 800faaa:	222e      	movs	r2, #46	; 0x2e
 800faac:	701a      	strb	r2, [r3, #0]

    return (0);
 800faae:	2300      	movs	r3, #0
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	371c      	adds	r7, #28
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd90      	pop	{r4, r7, pc}

0800fab8 <fm_lcd_fp_to_str>:
 * @param str_size tamaño del string.
 * @retval int.
 */
int fm_lcd_fp_to_str(fmc_fp_t fp, char leading_char, int str_width, char *p_str,
int str_size)
{
 800fab8:	b490      	push	{r4, r7}
 800faba:	b088      	sub	sp, #32
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	f107 0408 	add.w	r4, r7, #8
 800fac2:	e884 0003 	stmia.w	r4, {r0, r1}
 800fac6:	603b      	str	r3, [r7, #0]
 800fac8:	4613      	mov	r3, r2
 800faca:	71fb      	strb	r3, [r7, #7]
    int idx_1 = 0;
 800facc:	2300      	movs	r3, #0
 800face:	61fb      	str	r3, [r7, #28]
    /*
     * Este es el unico chequeo de contorno. Verifica que el tamaño del string
     * no sea menor a PCF8553_DATA_SIZE, calculado como suficiente para operar
     * con las líneas del lcd.
     */
    if (str_size < PCF8553_DATA_SIZE)
 800fad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad2:	2b13      	cmp	r3, #19
 800fad4:	dc02      	bgt.n	800fadc <fm_lcd_fp_to_str+0x24>
    {
        return (-1);
 800fad6:	f04f 33ff 	mov.w	r3, #4294967295
 800fada:	e086      	b.n	800fbea <fm_lcd_fp_to_str+0x132>
    }

    /*
     * Esta linea es necesaria para representa bien a num = 0
     */
    p_str[idx_1] = fp.num % 10 + '0';
 800fadc:	68b9      	ldr	r1, [r7, #8]
 800fade:	4b45      	ldr	r3, [pc, #276]	; (800fbf4 <fm_lcd_fp_to_str+0x13c>)
 800fae0:	fba3 2301 	umull	r2, r3, r3, r1
 800fae4:	08da      	lsrs	r2, r3, #3
 800fae6:	4613      	mov	r3, r2
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	4413      	add	r3, r2
 800faec:	005b      	lsls	r3, r3, #1
 800faee:	1aca      	subs	r2, r1, r3
 800faf0:	b2d2      	uxtb	r2, r2
 800faf2:	69fb      	ldr	r3, [r7, #28]
 800faf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800faf6:	440b      	add	r3, r1
 800faf8:	3230      	adds	r2, #48	; 0x30
 800fafa:	b2d2      	uxtb	r2, r2
 800fafc:	701a      	strb	r2, [r3, #0]

    uint32_t num_aux = fp.num;
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	617b      	str	r3, [r7, #20]

    /*
     * Almaceno el número de atrás para adelante hasta que llegar al primer
     * dígito inclusive
     */
    while (fp.num / 10)
 800fb02:	e019      	b.n	800fb38 <fm_lcd_fp_to_str+0x80>
    {
        idx_1++;
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	3301      	adds	r3, #1
 800fb08:	61fb      	str	r3, [r7, #28]
        fp.num /= 10;
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	4a39      	ldr	r2, [pc, #228]	; (800fbf4 <fm_lcd_fp_to_str+0x13c>)
 800fb0e:	fba2 2303 	umull	r2, r3, r2, r3
 800fb12:	08db      	lsrs	r3, r3, #3
 800fb14:	60bb      	str	r3, [r7, #8]
        p_str[idx_1] = fp.num % 10 + '0';
 800fb16:	68b9      	ldr	r1, [r7, #8]
 800fb18:	4b36      	ldr	r3, [pc, #216]	; (800fbf4 <fm_lcd_fp_to_str+0x13c>)
 800fb1a:	fba3 2301 	umull	r2, r3, r3, r1
 800fb1e:	08da      	lsrs	r2, r3, #3
 800fb20:	4613      	mov	r3, r2
 800fb22:	009b      	lsls	r3, r3, #2
 800fb24:	4413      	add	r3, r2
 800fb26:	005b      	lsls	r3, r3, #1
 800fb28:	1aca      	subs	r2, r1, r3
 800fb2a:	b2d2      	uxtb	r2, r2
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb30:	440b      	add	r3, r1
 800fb32:	3230      	adds	r2, #48	; 0x30
 800fb34:	b2d2      	uxtb	r2, r2
 800fb36:	701a      	strb	r2, [r3, #0]
    while (fp.num / 10)
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	2b09      	cmp	r3, #9
 800fb3c:	d8e2      	bhi.n	800fb04 <fm_lcd_fp_to_str+0x4c>

    /*
     * Si se midió 0 pulsos, se rellena con 0 hasta pasar el punto y asi se
     * mantiene la resolución deseada.
     */
    if (num_aux == 0)
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d119      	bne.n	800fb78 <fm_lcd_fp_to_str+0xc0>
    {
        while (idx_1 < fp.res)
 800fb44:	e013      	b.n	800fb6e <fm_lcd_fp_to_str+0xb6>
        {
            idx_1++;
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	3301      	adds	r3, #1
 800fb4a:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = fp.num % 10 + '0';
 800fb4c:	68b9      	ldr	r1, [r7, #8]
 800fb4e:	4b29      	ldr	r3, [pc, #164]	; (800fbf4 <fm_lcd_fp_to_str+0x13c>)
 800fb50:	fba3 2301 	umull	r2, r3, r3, r1
 800fb54:	08da      	lsrs	r2, r3, #3
 800fb56:	4613      	mov	r3, r2
 800fb58:	009b      	lsls	r3, r3, #2
 800fb5a:	4413      	add	r3, r2
 800fb5c:	005b      	lsls	r3, r3, #1
 800fb5e:	1aca      	subs	r2, r1, r3
 800fb60:	b2d2      	uxtb	r2, r2
 800fb62:	69fb      	ldr	r3, [r7, #28]
 800fb64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb66:	440b      	add	r3, r1
 800fb68:	3230      	adds	r2, #48	; 0x30
 800fb6a:	b2d2      	uxtb	r2, r2
 800fb6c:	701a      	strb	r2, [r3, #0]
        while (idx_1 < fp.res)
 800fb6e:	7b3b      	ldrb	r3, [r7, #12]
 800fb70:	461a      	mov	r2, r3
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	4293      	cmp	r3, r2
 800fb76:	dbe6      	blt.n	800fb46 <fm_lcd_fp_to_str+0x8e>

    /*
     * Si el caracter a completar no es 0, se lo debe agregar al final del
     * arreglo hasta completar el largo de la linea (7 u 8 caracteres + \0).
     */
    if (leading_char)
 800fb78:	79fb      	ldrb	r3, [r7, #7]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d00d      	beq.n	800fb9a <fm_lcd_fp_to_str+0xe2>
    {
        while (idx_1 < str_width - 1)
 800fb7e:	e007      	b.n	800fb90 <fm_lcd_fp_to_str+0xd8>
        {
            idx_1++;
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	3301      	adds	r3, #1
 800fb84:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = leading_char;
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb8a:	4413      	add	r3, r2
 800fb8c:	79fa      	ldrb	r2, [r7, #7]
 800fb8e:	701a      	strb	r2, [r3, #0]
        while (idx_1 < str_width - 1)
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	3b01      	subs	r3, #1
 800fb94:	69fa      	ldr	r2, [r7, #28]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	dbf2      	blt.n	800fb80 <fm_lcd_fp_to_str+0xc8>
        }
    }
    p_str[idx_1] = '\0';
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb9e:	4413      	add	r3, r2
 800fba0:	2200      	movs	r2, #0
 800fba2:	701a      	strb	r2, [r3, #0]
    idx_1--;
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	3b01      	subs	r3, #1
 800fba8:	61fb      	str	r3, [r7, #28]

    /*
     *Esta sección da vuelta el arreglo ya que se completó al revés.
     */
    int idx_2 = 0;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	61bb      	str	r3, [r7, #24]
    char ch_temp;

    while (idx_1 > idx_2)
 800fbae:	e017      	b.n	800fbe0 <fm_lcd_fp_to_str+0x128>
    {
        ch_temp = p_str[idx_1];
 800fbb0:	69fb      	ldr	r3, [r7, #28]
 800fbb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbb4:	4413      	add	r3, r2
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	74fb      	strb	r3, [r7, #19]
        p_str[idx_1] = p_str[idx_2];
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbbe:	441a      	add	r2, r3
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fbc4:	440b      	add	r3, r1
 800fbc6:	7812      	ldrb	r2, [r2, #0]
 800fbc8:	701a      	strb	r2, [r3, #0]
        p_str[idx_2] = ch_temp;
 800fbca:	69bb      	ldr	r3, [r7, #24]
 800fbcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbce:	4413      	add	r3, r2
 800fbd0:	7cfa      	ldrb	r2, [r7, #19]
 800fbd2:	701a      	strb	r2, [r3, #0]
        idx_1--;
 800fbd4:	69fb      	ldr	r3, [r7, #28]
 800fbd6:	3b01      	subs	r3, #1
 800fbd8:	61fb      	str	r3, [r7, #28]
        idx_2++;
 800fbda:	69bb      	ldr	r3, [r7, #24]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	61bb      	str	r3, [r7, #24]
    while (idx_1 > idx_2)
 800fbe0:	69fa      	ldr	r2, [r7, #28]
 800fbe2:	69bb      	ldr	r3, [r7, #24]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	dce3      	bgt.n	800fbb0 <fm_lcd_fp_to_str+0xf8>
    }

    return (0);
 800fbe8:	2300      	movs	r3, #0
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3720      	adds	r7, #32
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bc90      	pop	{r4, r7}
 800fbf2:	4770      	bx	lr
 800fbf4:	cccccccd 	.word	0xcccccccd

0800fbf8 <fm_lcd_init>:
 * @brief Es la primera instrucción a llamar para usar el lcd.
 * @param  None
 * @retval None
 */
void fm_lcd_init()
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800fbfc:	f000 fb62 	bl	80102c4 <lcd_clear_all>
    lcd_init();
 800fc00:	f001 f9ae 	bl	8010f60 <lcd_init>
}
 800fc04:	bf00      	nop
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <fm_lcd_k_factor>:
 * configuración del factor de calibración K.
 * @param  None
 * @retval None
 */
void fm_lcd_k_factor(fm_event_t event_id, sel_digit_t digit_modify)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b08e      	sub	sp, #56	; 0x38
 800fc0c:	af02      	add	r7, sp, #8
 800fc0e:	4603      	mov	r3, r0
 800fc10:	460a      	mov	r2, r1
 800fc12:	71fb      	strb	r3, [r7, #7]
 800fc14:	4613      	mov	r3, r2
 800fc16:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(K_FACTOR), '0',
 800fc18:	f107 0320 	add.w	r3, r7, #32
 800fc1c:	2100      	movs	r1, #0
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fe fff0 	bl	800ec04 <fm_factory_get_k_factor>
 800fc24:	2314      	movs	r3, #20
 800fc26:	9301      	str	r3, [sp, #4]
 800fc28:	f107 030c 	add.w	r3, r7, #12
 800fc2c:	9300      	str	r3, [sp, #0]
 800fc2e:	2309      	movs	r3, #9
 800fc30:	2230      	movs	r2, #48	; 0x30
 800fc32:	f107 0120 	add.w	r1, r7, #32
 800fc36:	c903      	ldmia	r1, {r0, r1}
 800fc38:	f7ff ff3e 	bl	800fab8 <fm_lcd_fp_to_str>
    LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(K_FACTOR), lcd_msg,
 800fc3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc40:	2100      	movs	r1, #0
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fe ffde 	bl	800ec04 <fm_factory_get_k_factor>
 800fc48:	f107 020c 	add.w	r2, r7, #12
 800fc4c:	2314      	movs	r3, #20
 800fc4e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fc52:	c903      	ldmia	r1, {r0, r1}
 800fc54:	f7ff feec 	bl	800fa30 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fc58:	f107 030c 	add.w	r3, r7, #12
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f000 f918 	bl	800fe94 <fm_lcd_puts>

    if(event_id == EVENT_KEY_ENTER ||
 800fc64:	79fb      	ldrb	r3, [r7, #7]
 800fc66:	2b04      	cmp	r3, #4
 800fc68:	d006      	beq.n	800fc78 <fm_lcd_k_factor+0x70>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fc6a:	4b1e      	ldr	r3, [pc, #120]	; (800fce4 <fm_lcd_k_factor+0xdc>)
 800fc6c:	781b      	ldrb	r3, [r3, #0]
    if(event_id == EVENT_KEY_ENTER ||
 800fc6e:	2b04      	cmp	r3, #4
 800fc70:	d106      	bne.n	800fc80 <fm_lcd_k_factor+0x78>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fc72:	79fb      	ldrb	r3, [r7, #7]
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d103      	bne.n	800fc80 <fm_lcd_k_factor+0x78>
    {
        blink = 1;
 800fc78:	4b1b      	ldr	r3, [pc, #108]	; (800fce8 <fm_lcd_k_factor+0xe0>)
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	601a      	str	r2, [r3, #0]
 800fc7e:	e016      	b.n	800fcae <fm_lcd_k_factor+0xa6>
    }
    else if(event_id == EVENT_KEY_DOWN ||
 800fc80:	79fb      	ldrb	r3, [r7, #7]
 800fc82:	2b03      	cmp	r3, #3
 800fc84:	d010      	beq.n	800fca8 <fm_lcd_k_factor+0xa0>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fc86:	4b17      	ldr	r3, [pc, #92]	; (800fce4 <fm_lcd_k_factor+0xdc>)
 800fc88:	781b      	ldrb	r3, [r3, #0]
    else if(event_id == EVENT_KEY_DOWN ||
 800fc8a:	2b03      	cmp	r3, #3
 800fc8c:	d102      	bne.n	800fc94 <fm_lcd_k_factor+0x8c>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fc8e:	79fb      	ldrb	r3, [r7, #7]
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	d009      	beq.n	800fca8 <fm_lcd_k_factor+0xa0>
 800fc94:	79fb      	ldrb	r3, [r7, #7]
 800fc96:	2b02      	cmp	r3, #2
 800fc98:	d006      	beq.n	800fca8 <fm_lcd_k_factor+0xa0>
    event_id == EVENT_KEY_UP ||
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fc9a:	4b12      	ldr	r3, [pc, #72]	; (800fce4 <fm_lcd_k_factor+0xdc>)
 800fc9c:	781b      	ldrb	r3, [r3, #0]
    event_id == EVENT_KEY_UP ||
 800fc9e:	2b02      	cmp	r3, #2
 800fca0:	d105      	bne.n	800fcae <fm_lcd_k_factor+0xa6>
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fca2:	79fb      	ldrb	r3, [r7, #7]
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d102      	bne.n	800fcae <fm_lcd_k_factor+0xa6>
    {
        blink = 0;
 800fca8:	4b0f      	ldr	r3, [pc, #60]	; (800fce8 <fm_lcd_k_factor+0xe0>)
 800fcaa:	2200      	movs	r2, #0
 800fcac:	601a      	str	r2, [r3, #0]
    }

    if(blink == 1)
 800fcae:	4b0e      	ldr	r3, [pc, #56]	; (800fce8 <fm_lcd_k_factor+0xe0>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d10b      	bne.n	800fcce <fm_lcd_k_factor+0xc6>
    {
        lcd_clear_digit(DIG_7 - digit_modify, HIGH_ROW);
 800fcb6:	79bb      	ldrb	r3, [r7, #6]
 800fcb8:	f1c3 0307 	rsb	r3, r3, #7
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	2100      	movs	r1, #0
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f000 fb27 	bl	8010314 <lcd_clear_digit>
        blink = 0;
 800fcc6:	4b08      	ldr	r3, [pc, #32]	; (800fce8 <fm_lcd_k_factor+0xe0>)
 800fcc8:	2200      	movs	r2, #0
 800fcca:	601a      	str	r2, [r3, #0]
 800fccc:	e002      	b.n	800fcd4 <fm_lcd_k_factor+0xcc>
    }
    else
    {
        blink = 1;
 800fcce:	4b06      	ldr	r3, [pc, #24]	; (800fce8 <fm_lcd_k_factor+0xe0>)
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(K, 0x00);
 800fcd4:	2100      	movs	r1, #0
 800fcd6:	200b      	movs	r0, #11
 800fcd8:	f001 fbf8 	bl	80114cc <lcd_set_symbol>
}
 800fcdc:	bf00      	nop
 800fcde:	3730      	adds	r7, #48	; 0x30
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	20001db7 	.word	0x20001db7
 800fce8:	2000011c 	.word	0x2000011c

0800fcec <fm_lcd_k_lin>:

void fm_lcd_k_lin(sel_k k_sel, fm_event_t event_id, sel_digit_k_lin_t digit_lin_modify)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b090      	sub	sp, #64	; 0x40
 800fcf0:	af02      	add	r7, sp, #8
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	71fb      	strb	r3, [r7, #7]
 800fcf6:	460b      	mov	r3, r1
 800fcf8:	71bb      	strb	r3, [r7, #6]
 800fcfa:	4613      	mov	r3, r2
 800fcfc:	717b      	strb	r3, [r7, #5]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(k_sel), '0', LINE_0_DIGITS,
 800fcfe:	f107 0320 	add.w	r3, r7, #32
 800fd02:	79fa      	ldrb	r2, [r7, #7]
 800fd04:	4611      	mov	r1, r2
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fe ff7c 	bl	800ec04 <fm_factory_get_k_factor>
 800fd0c:	2314      	movs	r3, #20
 800fd0e:	9301      	str	r3, [sp, #4]
 800fd10:	f107 030c 	add.w	r3, r7, #12
 800fd14:	9300      	str	r3, [sp, #0]
 800fd16:	2309      	movs	r3, #9
 800fd18:	2230      	movs	r2, #48	; 0x30
 800fd1a:	f107 0120 	add.w	r1, r7, #32
 800fd1e:	c903      	ldmia	r1, {r0, r1}
 800fd20:	f7ff feca 	bl	800fab8 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(k_sel), lcd_msg,
 800fd24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd28:	79fa      	ldrb	r2, [r7, #7]
 800fd2a:	4611      	mov	r1, r2
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7fe ff69 	bl	800ec04 <fm_factory_get_k_factor>
 800fd32:	f107 020c 	add.w	r2, r7, #12
 800fd36:	2314      	movs	r3, #20
 800fd38:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fd3c:	c903      	ldmia	r1, {r0, r1}
 800fd3e:	f7ff fe77 	bl	800fa30 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fd42:	f107 030c 	add.w	r3, r7, #12
 800fd46:	2100      	movs	r1, #0
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f000 f8a3 	bl	800fe94 <fm_lcd_puts>

    fm_lcd_fp_to_str(fm_factory_get_frec_lin(k_sel), '0', LINE_1_DIGITS,
 800fd4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fd52:	79fa      	ldrb	r2, [r7, #7]
 800fd54:	4611      	mov	r1, r2
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fe ffb0 	bl	800ecbc <fm_factory_get_frec_lin>
 800fd5c:	2314      	movs	r3, #20
 800fd5e:	9301      	str	r3, [sp, #4]
 800fd60:	f107 030c 	add.w	r3, r7, #12
 800fd64:	9300      	str	r3, [sp, #0]
 800fd66:	2308      	movs	r3, #8
 800fd68:	2230      	movs	r2, #48	; 0x30
 800fd6a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fd6e:	c903      	ldmia	r1, {r0, r1}
 800fd70:	f7ff fea2 	bl	800fab8 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fd74:	f107 030c 	add.w	r3, r7, #12
 800fd78:	2101      	movs	r1, #1
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f000 f88a 	bl	800fe94 <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800fd80:	2101      	movs	r1, #1
 800fd82:	2000      	movs	r0, #0
 800fd84:	f000 fac6 	bl	8010314 <lcd_clear_digit>
    lcd_clear_digit(DIGIT_1, LOW_ROW);
 800fd88:	2101      	movs	r1, #1
 800fd8a:	2001      	movs	r0, #1
 800fd8c:	f000 fac2 	bl	8010314 <lcd_clear_digit>
    lcd_clear_digit(DIGIT_2, LOW_ROW);
 800fd90:	2101      	movs	r1, #1
 800fd92:	2002      	movs	r0, #2
 800fd94:	f000 fabe 	bl	8010314 <lcd_clear_digit>

    if(event_id == EVENT_KEY_ENTER ||
 800fd98:	79bb      	ldrb	r3, [r7, #6]
 800fd9a:	2b04      	cmp	r3, #4
 800fd9c:	d006      	beq.n	800fdac <fm_lcd_k_lin+0xc0>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fd9e:	4b3b      	ldr	r3, [pc, #236]	; (800fe8c <fm_lcd_k_lin+0x1a0>)
 800fda0:	781b      	ldrb	r3, [r3, #0]
    if(event_id == EVENT_KEY_ENTER ||
 800fda2:	2b04      	cmp	r3, #4
 800fda4:	d106      	bne.n	800fdb4 <fm_lcd_k_lin+0xc8>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fda6:	79bb      	ldrb	r3, [r7, #6]
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	d103      	bne.n	800fdb4 <fm_lcd_k_lin+0xc8>
    {
        blink = 1;
 800fdac:	4b38      	ldr	r3, [pc, #224]	; (800fe90 <fm_lcd_k_lin+0x1a4>)
 800fdae:	2201      	movs	r2, #1
 800fdb0:	601a      	str	r2, [r3, #0]
 800fdb2:	e016      	b.n	800fde2 <fm_lcd_k_lin+0xf6>
    }
    else if(event_id == EVENT_KEY_DOWN ||
 800fdb4:	79bb      	ldrb	r3, [r7, #6]
 800fdb6:	2b03      	cmp	r3, #3
 800fdb8:	d010      	beq.n	800fddc <fm_lcd_k_lin+0xf0>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fdba:	4b34      	ldr	r3, [pc, #208]	; (800fe8c <fm_lcd_k_lin+0x1a0>)
 800fdbc:	781b      	ldrb	r3, [r3, #0]
    else if(event_id == EVENT_KEY_DOWN ||
 800fdbe:	2b03      	cmp	r3, #3
 800fdc0:	d102      	bne.n	800fdc8 <fm_lcd_k_lin+0xdc>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fdc2:	79bb      	ldrb	r3, [r7, #6]
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d009      	beq.n	800fddc <fm_lcd_k_lin+0xf0>
 800fdc8:	79bb      	ldrb	r3, [r7, #6]
 800fdca:	2b02      	cmp	r3, #2
 800fdcc:	d006      	beq.n	800fddc <fm_lcd_k_lin+0xf0>
    event_id == EVENT_KEY_UP ||
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fdce:	4b2f      	ldr	r3, [pc, #188]	; (800fe8c <fm_lcd_k_lin+0x1a0>)
 800fdd0:	781b      	ldrb	r3, [r3, #0]
    event_id == EVENT_KEY_UP ||
 800fdd2:	2b02      	cmp	r3, #2
 800fdd4:	d105      	bne.n	800fde2 <fm_lcd_k_lin+0xf6>
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fdd6:	79bb      	ldrb	r3, [r7, #6]
 800fdd8:	2b01      	cmp	r3, #1
 800fdda:	d102      	bne.n	800fde2 <fm_lcd_k_lin+0xf6>
    {
        blink = 0;
 800fddc:	4b2c      	ldr	r3, [pc, #176]	; (800fe90 <fm_lcd_k_lin+0x1a4>)
 800fdde:	2200      	movs	r2, #0
 800fde0:	601a      	str	r2, [r3, #0]
    }

    if(digit_lin_modify <= DIG_LIN_7)
 800fde2:	797b      	ldrb	r3, [r7, #5]
 800fde4:	2b07      	cmp	r3, #7
 800fde6:	d813      	bhi.n	800fe10 <fm_lcd_k_lin+0x124>
    {
        if(blink == 1)
 800fde8:	4b29      	ldr	r3, [pc, #164]	; (800fe90 <fm_lcd_k_lin+0x1a4>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d10b      	bne.n	800fe08 <fm_lcd_k_lin+0x11c>
        {
            lcd_clear_digit(DIG_LIN_7 - digit_lin_modify, HIGH_ROW);
 800fdf0:	797b      	ldrb	r3, [r7, #5]
 800fdf2:	f1c3 0307 	rsb	r3, r3, #7
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	2100      	movs	r1, #0
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f000 fa8a 	bl	8010314 <lcd_clear_digit>
            blink = 0;
 800fe00:	4b23      	ldr	r3, [pc, #140]	; (800fe90 <fm_lcd_k_lin+0x1a4>)
 800fe02:	2200      	movs	r2, #0
 800fe04:	601a      	str	r2, [r3, #0]
 800fe06:	e016      	b.n	800fe36 <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 800fe08:	4b21      	ldr	r3, [pc, #132]	; (800fe90 <fm_lcd_k_lin+0x1a4>)
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	601a      	str	r2, [r3, #0]
 800fe0e:	e012      	b.n	800fe36 <fm_lcd_k_lin+0x14a>
        }
    }
    else
    {
        if(blink == 1)
 800fe10:	4b1f      	ldr	r3, [pc, #124]	; (800fe90 <fm_lcd_k_lin+0x1a4>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d10b      	bne.n	800fe30 <fm_lcd_k_lin+0x144>
        {
            lcd_clear_digit(DIG_LIN_6 - digit_lin_modify + DIG_LIN_8, LOW_ROW);
 800fe18:	797b      	ldrb	r3, [r7, #5]
 800fe1a:	f1c3 030e 	rsb	r3, r3, #14
 800fe1e:	b2db      	uxtb	r3, r3
 800fe20:	2101      	movs	r1, #1
 800fe22:	4618      	mov	r0, r3
 800fe24:	f000 fa76 	bl	8010314 <lcd_clear_digit>
            blink = 0;
 800fe28:	4b19      	ldr	r3, [pc, #100]	; (800fe90 <fm_lcd_k_lin+0x1a4>)
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	601a      	str	r2, [r3, #0]
 800fe2e:	e002      	b.n	800fe36 <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 800fe30:	4b17      	ldr	r3, [pc, #92]	; (800fe90 <fm_lcd_k_lin+0x1a4>)
 800fe32:	2201      	movs	r2, #1
 800fe34:	601a      	str	r2, [r3, #0]
        }
    }

    lcd_set_symbol(F, 0x00);
 800fe36:	2100      	movs	r1, #0
 800fe38:	2010      	movs	r0, #16
 800fe3a:	f001 fb47 	bl	80114cc <lcd_set_symbol>
    if(k_sel == K_LIN_1)
 800fe3e:	79fb      	ldrb	r3, [r7, #7]
 800fe40:	2b01      	cmp	r3, #1
 800fe42:	d103      	bne.n	800fe4c <fm_lcd_k_lin+0x160>
    {
        lcd_set_symbol(LIN_1, 0x00);
 800fe44:	2100      	movs	r1, #0
 800fe46:	2011      	movs	r0, #17
 800fe48:	f001 fb40 	bl	80114cc <lcd_set_symbol>
    }
    if(k_sel == K_LIN_2)
 800fe4c:	79fb      	ldrb	r3, [r7, #7]
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	d103      	bne.n	800fe5a <fm_lcd_k_lin+0x16e>
    {
        lcd_set_symbol(LIN_2, 0x00);
 800fe52:	2100      	movs	r1, #0
 800fe54:	2012      	movs	r0, #18
 800fe56:	f001 fb39 	bl	80114cc <lcd_set_symbol>
    }
    if(k_sel == K_LIN_3)
 800fe5a:	79fb      	ldrb	r3, [r7, #7]
 800fe5c:	2b03      	cmp	r3, #3
 800fe5e:	d103      	bne.n	800fe68 <fm_lcd_k_lin+0x17c>
    {
        lcd_set_symbol(LIN_3, 0x00);
 800fe60:	2100      	movs	r1, #0
 800fe62:	2013      	movs	r0, #19
 800fe64:	f001 fb32 	bl	80114cc <lcd_set_symbol>
    }
    if(k_sel == K_LIN_4)
 800fe68:	79fb      	ldrb	r3, [r7, #7]
 800fe6a:	2b04      	cmp	r3, #4
 800fe6c:	d103      	bne.n	800fe76 <fm_lcd_k_lin+0x18a>
    {
        lcd_set_symbol(LIN_4, 0x00);
 800fe6e:	2100      	movs	r1, #0
 800fe70:	2014      	movs	r0, #20
 800fe72:	f001 fb2b 	bl	80114cc <lcd_set_symbol>
    }
    if(k_sel == K_LIN_5)
 800fe76:	79fb      	ldrb	r3, [r7, #7]
 800fe78:	2b05      	cmp	r3, #5
 800fe7a:	d103      	bne.n	800fe84 <fm_lcd_k_lin+0x198>
    {
        lcd_set_symbol(LIN_5, 0x00);
 800fe7c:	2100      	movs	r1, #0
 800fe7e:	2015      	movs	r0, #21
 800fe80:	f001 fb24 	bl	80114cc <lcd_set_symbol>
    }
}
 800fe84:	bf00      	nop
 800fe86:	3738      	adds	r7, #56	; 0x38
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	20001db7 	.word	0x20001db7
 800fe90:	2000011c 	.word	0x2000011c

0800fe94 <fm_lcd_puts>:
 * @param Arreglo a imprimir.
 * @param Fila donde se coloca el arreglo a imprimir.
 * @retval None
 */
void fm_lcd_puts(const char *c, const rows_t row)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b084      	sub	sp, #16
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	460b      	mov	r3, r1
 800fe9e:	70fb      	strb	r3, [r7, #3]
    uint8_t col = 0;
 800fea0:	2300      	movs	r3, #0
 800fea2:	73fb      	strb	r3, [r7, #15]
    uint8_t col_limit;

    if (row == 0)
 800fea4:	78fb      	ldrb	r3, [r7, #3]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d102      	bne.n	800feb0 <fm_lcd_puts+0x1c>
    {
        col_limit = LINE_0_DIGITS - 1;
 800feaa:	2308      	movs	r3, #8
 800feac:	73bb      	strb	r3, [r7, #14]
 800feae:	e026      	b.n	800fefe <fm_lcd_puts+0x6a>
    }
    else
    {
        col_limit = LINE_1_DIGITS - 1;
 800feb0:	2307      	movs	r3, #7
 800feb2:	73bb      	strb	r3, [r7, #14]
    }

    while ((*c) && (col < col_limit))
 800feb4:	e023      	b.n	800fefe <fm_lcd_puts+0x6a>
    {
        if (((*c >= '0') && (*c <= '9')) || (*c == ' ') || (*c == '.'))
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	781b      	ldrb	r3, [r3, #0]
 800feba:	2b2f      	cmp	r3, #47	; 0x2f
 800febc:	d903      	bls.n	800fec6 <fm_lcd_puts+0x32>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	2b39      	cmp	r3, #57	; 0x39
 800fec4:	d907      	bls.n	800fed6 <fm_lcd_puts+0x42>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	2b20      	cmp	r3, #32
 800fecc:	d003      	beq.n	800fed6 <fm_lcd_puts+0x42>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	2b2e      	cmp	r3, #46	; 0x2e
 800fed4:	d106      	bne.n	800fee4 <fm_lcd_puts+0x50>
        {
            lcd_put_char(*c, col, row);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	78fa      	ldrb	r2, [r7, #3]
 800fedc:	7bf9      	ldrb	r1, [r7, #15]
 800fede:	4618      	mov	r0, r3
 800fee0:	f001 f844 	bl	8010f6c <lcd_put_char>
        }
        col++;
 800fee4:	7bfb      	ldrb	r3, [r7, #15]
 800fee6:	3301      	adds	r3, #1
 800fee8:	73fb      	strb	r3, [r7, #15]
        c++;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	3301      	adds	r3, #1
 800feee:	607b      	str	r3, [r7, #4]
        if (*c == '.')
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	2b2e      	cmp	r3, #46	; 0x2e
 800fef6:	d102      	bne.n	800fefe <fm_lcd_puts+0x6a>
        {
            col--;
 800fef8:	7bfb      	ldrb	r3, [r7, #15]
 800fefa:	3b01      	subs	r3, #1
 800fefc:	73fb      	strb	r3, [r7, #15]
    while ((*c) && (col < col_limit))
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d003      	beq.n	800ff0e <fm_lcd_puts+0x7a>
 800ff06:	7bfa      	ldrb	r2, [r7, #15]
 800ff08:	7bbb      	ldrb	r3, [r7, #14]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d3d3      	bcc.n	800feb6 <fm_lcd_puts+0x22>
        }
    }
}
 800ff0e:	bf00      	nop
 800ff10:	3710      	adds	r7, #16
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}

0800ff16 <fm_lcd_refresh>:
 * la librería de mas bajo nivel 'lcd.h'.
 * @param  None
 * @retval None
 */
void fm_lcd_refresh()
{
 800ff16:	b580      	push	{r7, lr}
 800ff18:	af00      	add	r7, sp, #0
    lcd_refresh();
 800ff1a:	f001 fa25 	bl	8011368 <lcd_refresh>
}
 800ff1e:	bf00      	nop
 800ff20:	bd80      	pop	{r7, pc}

0800ff22 <fm_lcd_ttl_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_ttl_rate()
{
 800ff22:	b580      	push	{r7, lr}
 800ff24:	b0b8      	sub	sp, #224	; 0xe0
 800ff26:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_ttl().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800ff28:	f107 0318 	add.w	r3, r7, #24
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f004 fb09 	bl	8014544 <fmc_get_ttl>
 800ff32:	2314      	movs	r3, #20
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	1d3b      	adds	r3, r7, #4
 800ff38:	9300      	str	r3, [sp, #0]
 800ff3a:	2309      	movs	r3, #9
 800ff3c:	2220      	movs	r2, #32
 800ff3e:	f107 0120 	add.w	r1, r7, #32
 800ff42:	c903      	ldmia	r1, {r0, r1}
 800ff44:	f7ff fdb8 	bl	800fab8 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_ttl().volume, lcd_msg, sizeof(lcd_msg));
 800ff48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f004 faf9 	bl	8014544 <fmc_get_ttl>
 800ff52:	1d3a      	adds	r2, r7, #4
 800ff54:	2314      	movs	r3, #20
 800ff56:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ff5a:	c903      	ldmia	r1, {r0, r1}
 800ff5c:	f7ff fd68 	bl	800fa30 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800ff60:	1d3b      	adds	r3, r7, #4
 800ff62:	2100      	movs	r1, #0
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7ff ff95 	bl	800fe94 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800ff6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f004 faa8 	bl	80144c4 <fmc_get_rate>
 800ff74:	2314      	movs	r3, #20
 800ff76:	9301      	str	r3, [sp, #4]
 800ff78:	1d3b      	adds	r3, r7, #4
 800ff7a:	9300      	str	r3, [sp, #0]
 800ff7c:	2308      	movs	r3, #8
 800ff7e:	2220      	movs	r2, #32
 800ff80:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800ff84:	c903      	ldmia	r1, {r0, r1}
 800ff86:	f7ff fd97 	bl	800fab8 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800ff8a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f004 fa98 	bl	80144c4 <fmc_get_rate>
 800ff94:	1d3a      	adds	r2, r7, #4
 800ff96:	2314      	movs	r3, #20
 800ff98:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800ff9c:	c903      	ldmia	r1, {r0, r1}
 800ff9e:	f7ff fd47 	bl	800fa30 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800ffa2:	1d3b      	adds	r3, r7, #4
 800ffa4:	2101      	movs	r1, #1
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7ff ff74 	bl	800fe94 <fm_lcd_puts>

    lcd_set_symbol(TTL, 0x0);
 800ffac:	2100      	movs	r1, #0
 800ffae:	2005      	movs	r0, #5
 800ffb0:	f001 fa8c 	bl	80114cc <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800ffb4:	2100      	movs	r1, #0
 800ffb6:	2002      	movs	r0, #2
 800ffb8:	f001 fa88 	bl	80114cc <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_ttl().unit_volume, 0x0);
 800ffbc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f004 fabf 	bl	8014544 <fmc_get_ttl>
 800ffc6:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800ffca:	2100      	movs	r1, #0
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f001 fe01 	bl	8011bd4 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800ffd2:	2100      	movs	r1, #0
 800ffd4:	2007      	movs	r0, #7
 800ffd6:	f001 fa79 	bl	80114cc <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_ttl().unit_time, 0x0);
 800ffda:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f004 fab0 	bl	8014544 <fmc_get_ttl>
 800ffe4:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800ffe8:	2100      	movs	r1, #0
 800ffea:	4618      	mov	r0, r3
 800ffec:	f001 fdb0 	bl	8011b50 <lcd_set_time_unit>
}
 800fff0:	bf00      	nop
 800fff2:	37d8      	adds	r7, #216	; 0xd8
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <fm_lcd_units_tim>:
 * configuración de unidades tiempo y la resolución del factor RATE.
 * @param  None
 * @retval None
 */
void fm_lcd_units_tim(fm_event_t event_id)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b0a6      	sub	sp, #152	; 0x98
 800fffc:	af02      	add	r7, sp, #8
 800fffe:	4603      	mov	r3, r0
 8010000:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_tim(), '0', LINE_1_DIGITS, lcd_msg,
 8010002:	f107 0320 	add.w	r3, r7, #32
 8010006:	4618      	mov	r0, r3
 8010008:	f7fe fdd8 	bl	800ebbc <fm_factory_get_units_tim>
 801000c:	2314      	movs	r3, #20
 801000e:	9301      	str	r3, [sp, #4]
 8010010:	f107 030c 	add.w	r3, r7, #12
 8010014:	9300      	str	r3, [sp, #0]
 8010016:	2308      	movs	r3, #8
 8010018:	2230      	movs	r2, #48	; 0x30
 801001a:	f107 0120 	add.w	r1, r7, #32
 801001e:	c903      	ldmia	r1, {r0, r1}
 8010020:	f7ff fd4a 	bl	800fab8 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_tim(), lcd_msg, sizeof(lcd_msg));
 8010024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010028:	4618      	mov	r0, r3
 801002a:	f7fe fdc7 	bl	800ebbc <fm_factory_get_units_tim>
 801002e:	f107 020c 	add.w	r2, r7, #12
 8010032:	2314      	movs	r3, #20
 8010034:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010038:	c903      	ldmia	r1, {r0, r1}
 801003a:	f7ff fcf9 	bl	800fa30 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 801003e:	f107 030c 	add.w	r3, r7, #12
 8010042:	2101      	movs	r1, #1
 8010044:	4618      	mov	r0, r3
 8010046:	f7ff ff25 	bl	800fe94 <fm_lcd_puts>

    if(event_id != EVENT_LCD_REFRESH ||
 801004a:	79fb      	ldrb	r3, [r7, #7]
 801004c:	2b01      	cmp	r3, #1
 801004e:	d106      	bne.n	801005e <fm_lcd_units_tim+0x66>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 8010050:	4b35      	ldr	r3, [pc, #212]	; (8010128 <fm_lcd_units_tim+0x130>)
 8010052:	781b      	ldrb	r3, [r3, #0]
    if(event_id != EVENT_LCD_REFRESH ||
 8010054:	2b01      	cmp	r3, #1
 8010056:	d005      	beq.n	8010064 <fm_lcd_units_tim+0x6c>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 8010058:	79fb      	ldrb	r3, [r7, #7]
 801005a:	2b01      	cmp	r3, #1
 801005c:	d102      	bne.n	8010064 <fm_lcd_units_tim+0x6c>
    {
        blink = 0;
 801005e:	4b33      	ldr	r3, [pc, #204]	; (801012c <fm_lcd_units_tim+0x134>)
 8010060:	2200      	movs	r2, #0
 8010062:	601a      	str	r2, [r3, #0]
    }

    if(blink == 1)
 8010064:	4b31      	ldr	r3, [pc, #196]	; (801012c <fm_lcd_units_tim+0x134>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	2b01      	cmp	r3, #1
 801006a:	d146      	bne.n	80100fa <fm_lcd_units_tim+0x102>
    {
        if(fm_factory_get_units_tim().res == 1)
 801006c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010070:	4618      	mov	r0, r3
 8010072:	f7fe fda3 	bl	800ebbc <fm_factory_get_units_tim>
 8010076:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801007a:	2b01      	cmp	r3, #1
 801007c:	d109      	bne.n	8010092 <fm_lcd_units_tim+0x9a>
        {
            resolution_modify = PNT_5;
 801007e:	2305      	movs	r3, #5
 8010080:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 8010084:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010088:	4619      	mov	r1, r3
 801008a:	2001      	movs	r0, #1
 801008c:	f000 fc80 	bl	8010990 <lcd_clear_point>
 8010090:	e024      	b.n	80100dc <fm_lcd_units_tim+0xe4>
        }
        else if(fm_factory_get_units_tim().res == 2)
 8010092:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010096:	4618      	mov	r0, r3
 8010098:	f7fe fd90 	bl	800ebbc <fm_factory_get_units_tim>
 801009c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80100a0:	2b02      	cmp	r3, #2
 80100a2:	d109      	bne.n	80100b8 <fm_lcd_units_tim+0xc0>
        {
            resolution_modify = PNT_4;
 80100a4:	2304      	movs	r3, #4
 80100a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 80100aa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80100ae:	4619      	mov	r1, r3
 80100b0:	2001      	movs	r0, #1
 80100b2:	f000 fc6d 	bl	8010990 <lcd_clear_point>
 80100b6:	e011      	b.n	80100dc <fm_lcd_units_tim+0xe4>
        }
        else if(fm_factory_get_units_tim().res == 3)
 80100b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80100bc:	4618      	mov	r0, r3
 80100be:	f7fe fd7d 	bl	800ebbc <fm_factory_get_units_tim>
 80100c2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80100c6:	2b03      	cmp	r3, #3
 80100c8:	d108      	bne.n	80100dc <fm_lcd_units_tim+0xe4>
        {
            resolution_modify = PNT_3;
 80100ca:	2303      	movs	r3, #3
 80100cc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 80100d0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80100d4:	4619      	mov	r1, r3
 80100d6:	2001      	movs	r0, #1
 80100d8:	f000 fc5a 	bl	8010990 <lcd_clear_point>
        }

        lcd_clear_time_unit(fmc_get_rate().unit_time, 0x0);
 80100dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80100e0:	4618      	mov	r0, r3
 80100e2:	f004 f9ef 	bl	80144c4 <fmc_get_rate>
 80100e6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80100ea:	2100      	movs	r1, #0
 80100ec:	4618      	mov	r0, r3
 80100ee:	f000 fcfb 	bl	8010ae8 <lcd_clear_time_unit>

        blink = 0;
 80100f2:	4b0e      	ldr	r3, [pc, #56]	; (801012c <fm_lcd_units_tim+0x134>)
 80100f4:	2200      	movs	r2, #0
 80100f6:	601a      	str	r2, [r3, #0]
 80100f8:	e00d      	b.n	8010116 <fm_lcd_units_tim+0x11e>
    }
    else
    {
        lcd_set_time_unit(fmc_get_rate().unit_time, 0x0);
 80100fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80100fe:	4618      	mov	r0, r3
 8010100:	f004 f9e0 	bl	80144c4 <fmc_get_rate>
 8010104:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010108:	2100      	movs	r1, #0
 801010a:	4618      	mov	r0, r3
 801010c:	f001 fd20 	bl	8011b50 <lcd_set_time_unit>
        blink = 1;
 8010110:	4b06      	ldr	r3, [pc, #24]	; (801012c <fm_lcd_units_tim+0x134>)
 8010112:	2201      	movs	r2, #1
 8010114:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(RATE, 0x00);
 8010116:	2100      	movs	r1, #0
 8010118:	2002      	movs	r0, #2
 801011a:	f001 f9d7 	bl	80114cc <lcd_set_symbol>
}
 801011e:	bf00      	nop
 8010120:	3790      	adds	r7, #144	; 0x90
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}
 8010126:	bf00      	nop
 8010128:	20001db7 	.word	0x20001db7
 801012c:	2000011c 	.word	0x2000011c

08010130 <fm_lcd_units_vol>:
 * TTL.
 * @param  None
 * @retval None
 */
void fm_lcd_units_vol(fm_event_t event_id)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b0a6      	sub	sp, #152	; 0x98
 8010134:	af02      	add	r7, sp, #8
 8010136:	4603      	mov	r3, r0
 8010138:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_vol(), '0', LINE_0_DIGITS,
 801013a:	f107 0320 	add.w	r3, r7, #32
 801013e:	4618      	mov	r0, r3
 8010140:	f7fe fd4e 	bl	800ebe0 <fm_factory_get_units_vol>
 8010144:	2314      	movs	r3, #20
 8010146:	9301      	str	r3, [sp, #4]
 8010148:	f107 030c 	add.w	r3, r7, #12
 801014c:	9300      	str	r3, [sp, #0]
 801014e:	2309      	movs	r3, #9
 8010150:	2230      	movs	r2, #48	; 0x30
 8010152:	f107 0120 	add.w	r1, r7, #32
 8010156:	c903      	ldmia	r1, {r0, r1}
 8010158:	f7ff fcae 	bl	800fab8 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_vol(), lcd_msg, sizeof(lcd_msg));
 801015c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010160:	4618      	mov	r0, r3
 8010162:	f7fe fd3d 	bl	800ebe0 <fm_factory_get_units_vol>
 8010166:	f107 020c 	add.w	r2, r7, #12
 801016a:	2314      	movs	r3, #20
 801016c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010170:	c903      	ldmia	r1, {r0, r1}
 8010172:	f7ff fc5d 	bl	800fa30 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 8010176:	f107 030c 	add.w	r3, r7, #12
 801017a:	2100      	movs	r1, #0
 801017c:	4618      	mov	r0, r3
 801017e:	f7ff fe89 	bl	800fe94 <fm_lcd_puts>

    if(event_id != EVENT_LCD_REFRESH ||
 8010182:	79fb      	ldrb	r3, [r7, #7]
 8010184:	2b01      	cmp	r3, #1
 8010186:	d106      	bne.n	8010196 <fm_lcd_units_vol+0x66>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 8010188:	4b37      	ldr	r3, [pc, #220]	; (8010268 <fm_lcd_units_vol+0x138>)
 801018a:	781b      	ldrb	r3, [r3, #0]
    if(event_id != EVENT_LCD_REFRESH ||
 801018c:	2b01      	cmp	r3, #1
 801018e:	d005      	beq.n	801019c <fm_lcd_units_vol+0x6c>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 8010190:	79fb      	ldrb	r3, [r7, #7]
 8010192:	2b01      	cmp	r3, #1
 8010194:	d102      	bne.n	801019c <fm_lcd_units_vol+0x6c>
    {
        blink = 0;
 8010196:	4b35      	ldr	r3, [pc, #212]	; (801026c <fm_lcd_units_vol+0x13c>)
 8010198:	2200      	movs	r2, #0
 801019a:	601a      	str	r2, [r3, #0]
    }

    if(blink == 1)
 801019c:	4b33      	ldr	r3, [pc, #204]	; (801026c <fm_lcd_units_vol+0x13c>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d146      	bne.n	8010232 <fm_lcd_units_vol+0x102>
    {
        if(fm_factory_get_units_vol().res == 1)
 80101a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7fe fd19 	bl	800ebe0 <fm_factory_get_units_vol>
 80101ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80101b2:	2b01      	cmp	r3, #1
 80101b4:	d109      	bne.n	80101ca <fm_lcd_units_vol+0x9a>
        {
            resolution_modify = PNT_6;
 80101b6:	2306      	movs	r3, #6
 80101b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 80101bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80101c0:	4619      	mov	r1, r3
 80101c2:	2000      	movs	r0, #0
 80101c4:	f000 fbe4 	bl	8010990 <lcd_clear_point>
 80101c8:	e024      	b.n	8010214 <fm_lcd_units_vol+0xe4>
        }
        else if(fm_factory_get_units_vol().res == 2)
 80101ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7fe fd06 	bl	800ebe0 <fm_factory_get_units_vol>
 80101d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80101d8:	2b02      	cmp	r3, #2
 80101da:	d109      	bne.n	80101f0 <fm_lcd_units_vol+0xc0>
        {
            resolution_modify = PNT_5;
 80101dc:	2305      	movs	r3, #5
 80101de:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 80101e2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80101e6:	4619      	mov	r1, r3
 80101e8:	2000      	movs	r0, #0
 80101ea:	f000 fbd1 	bl	8010990 <lcd_clear_point>
 80101ee:	e011      	b.n	8010214 <fm_lcd_units_vol+0xe4>
        }
        else if(fm_factory_get_units_vol().res == 3)
 80101f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7fe fcf3 	bl	800ebe0 <fm_factory_get_units_vol>
 80101fa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80101fe:	2b03      	cmp	r3, #3
 8010200:	d108      	bne.n	8010214 <fm_lcd_units_vol+0xe4>
        {
            resolution_modify = PNT_4;
 8010202:	2304      	movs	r3, #4
 8010204:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 8010208:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801020c:	4619      	mov	r1, r3
 801020e:	2000      	movs	r0, #0
 8010210:	f000 fbbe 	bl	8010990 <lcd_clear_point>
        }

        lcd_clear_vol_unit(fmc_get_acm().unit_volume, 0x0);
 8010214:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010218:	4618      	mov	r0, r3
 801021a:	f004 f8ed 	bl	80143f8 <fmc_get_acm>
 801021e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8010222:	2100      	movs	r1, #0
 8010224:	4618      	mov	r0, r3
 8010226:	f000 fca1 	bl	8010b6c <lcd_clear_vol_unit>

        blink = 0;
 801022a:	4b10      	ldr	r3, [pc, #64]	; (801026c <fm_lcd_units_vol+0x13c>)
 801022c:	2200      	movs	r2, #0
 801022e:	601a      	str	r2, [r3, #0]
 8010230:	e00d      	b.n	801024e <fm_lcd_units_vol+0x11e>
    }
    else
    {
        lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 8010232:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010236:	4618      	mov	r0, r3
 8010238:	f004 f8de 	bl	80143f8 <fmc_get_acm>
 801023c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010240:	2100      	movs	r1, #0
 8010242:	4618      	mov	r0, r3
 8010244:	f001 fcc6 	bl	8011bd4 <lcd_set_vol_unit>
        blink = 1;
 8010248:	4b08      	ldr	r3, [pc, #32]	; (801026c <fm_lcd_units_vol+0x13c>)
 801024a:	2201      	movs	r2, #1
 801024c:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(ACM, 0x00);
 801024e:	2100      	movs	r1, #0
 8010250:	2006      	movs	r0, #6
 8010252:	f001 f93b 	bl	80114cc <lcd_set_symbol>
    lcd_set_symbol(TTL, 0x00);
 8010256:	2100      	movs	r1, #0
 8010258:	2005      	movs	r0, #5
 801025a:	f001 f937 	bl	80114cc <lcd_set_symbol>
}
 801025e:	bf00      	nop
 8010260:	3790      	adds	r7, #144	; 0x90
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
 8010266:	bf00      	nop
 8010268:	20001db7 	.word	0x20001db7
 801026c:	2000011c 	.word	0x2000011c

08010270 <fm_lcd_version>:
 * según las opciones que se elijan.
 * @param puntos de la fila inferior a imprimir, de tipo point_t.
 * @retval None
 */
void fm_lcd_version(point_t low_point1, point_t low_point2)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b086      	sub	sp, #24
 8010274:	af00      	add	r7, sp, #0
 8010276:	4603      	mov	r3, r0
 8010278:	460a      	mov	r2, r1
 801027a:	71fb      	strb	r3, [r7, #7]
 801027c:	4613      	mov	r3, r2
 801027e:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[MSG_LENGTH];

    fm_lcd_format_number_in_line(LOW_ROW, fm_version_get(), lcd_msg,
 8010280:	f004 f8a0 	bl	80143c4 <fm_version_get>
 8010284:	4601      	mov	r1, r0
 8010286:	f107 020c 	add.w	r2, r7, #12
 801028a:	230c      	movs	r3, #12
 801028c:	2001      	movs	r0, #1
 801028e:	f7ff fbab 	bl	800f9e8 <fm_lcd_format_number_in_line>
    MSG_LENGTH);
    fm_lcd_puts(lcd_msg, LOW_ROW);
 8010292:	f107 030c 	add.w	r3, r7, #12
 8010296:	2101      	movs	r1, #1
 8010298:	4618      	mov	r0, r3
 801029a:	f7ff fdfb 	bl	800fe94 <fm_lcd_puts>
    lcd_set_point(LOW_ROW, low_point1);
 801029e:	79fb      	ldrb	r3, [r7, #7]
 80102a0:	4619      	mov	r1, r3
 80102a2:	2001      	movs	r0, #1
 80102a4:	f001 f866 	bl	8011374 <lcd_set_point>
    lcd_set_point(LOW_ROW, low_point2);
 80102a8:	79bb      	ldrb	r3, [r7, #6]
 80102aa:	4619      	mov	r1, r3
 80102ac:	2001      	movs	r0, #1
 80102ae:	f001 f861 	bl	8011374 <lcd_set_point>

    lcd_set_symbol(VE, 0x0);
 80102b2:	2100      	movs	r1, #0
 80102b4:	2009      	movs	r0, #9
 80102b6:	f001 f909 	bl	80114cc <lcd_set_symbol>
}
 80102ba:	bf00      	nop
 80102bc:	3718      	adds	r7, #24
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
	...

080102c4 <lcd_clear_all>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void lcd_clear_all()
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b082      	sub	sp, #8
 80102c8:	af00      	add	r7, sp, #0
    pcf8553_clear_buff();
 80102ca:	f001 ffa3 	bl	8012214 <pcf8553_clear_buff>
     * Limpia el buffer intermedio de los números que aparecen en las filas HIGH
     * y LOW de la pantalla LCD. No es muy eficiente si se pretende usar al
     * refrescar la pantalla cada x tiempo, pero será necesario usarla por el
     * momento al pasar de una pantalla a otra.
     */
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 80102ce:	2300      	movs	r3, #0
 80102d0:	607b      	str	r3, [r7, #4]
 80102d2:	e013      	b.n	80102fc <lcd_clear_all+0x38>
    {
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 80102d4:	2300      	movs	r3, #0
 80102d6:	603b      	str	r3, [r7, #0]
 80102d8:	e00a      	b.n	80102f0 <lcd_clear_all+0x2c>
        {
            g_buf[cont_buff_row][cont_buff_col] = 0;
 80102da:	4a0d      	ldr	r2, [pc, #52]	; (8010310 <lcd_clear_all+0x4c>)
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	00db      	lsls	r3, r3, #3
 80102e0:	441a      	add	r2, r3
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	4413      	add	r3, r2
 80102e6:	2200      	movs	r2, #0
 80102e8:	701a      	strb	r2, [r3, #0]
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	3301      	adds	r3, #1
 80102ee:	603b      	str	r3, [r7, #0]
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	2b07      	cmp	r3, #7
 80102f4:	ddf1      	ble.n	80102da <lcd_clear_all+0x16>
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	3301      	adds	r3, #1
 80102fa:	607b      	str	r3, [r7, #4]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2b01      	cmp	r3, #1
 8010300:	dde8      	ble.n	80102d4 <lcd_clear_all+0x10>
        }
    }

    pcf8553_write_all(NONE_SEGMENTS);
 8010302:	2000      	movs	r0, #0
 8010304:	f002 f816 	bl	8012334 <pcf8553_write_all>
}
 8010308:	bf00      	nop
 801030a:	3708      	adds	r7, #8
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}
 8010310:	20001cf8 	.word	0x20001cf8

08010314 <lcd_clear_digit>:

void lcd_clear_digit(screen_digits_t digit, rows_t line)
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
 801031a:	4603      	mov	r3, r0
 801031c:	460a      	mov	r2, r1
 801031e:	71fb      	strb	r3, [r7, #7]
 8010320:	4613      	mov	r3, r2
 8010322:	71bb      	strb	r3, [r7, #6]
    if(line == HIGH_ROW)
 8010324:	79bb      	ldrb	r3, [r7, #6]
 8010326:	2b00      	cmp	r3, #0
 8010328:	f040 81aa 	bne.w	8010680 <lcd_clear_digit+0x36c>
    {
        switch(digit)
 801032c:	79fb      	ldrb	r3, [r7, #7]
 801032e:	2b07      	cmp	r3, #7
 8010330:	f200 8320 	bhi.w	8010974 <lcd_clear_digit+0x660>
 8010334:	a201      	add	r2, pc, #4	; (adr r2, 801033c <lcd_clear_digit+0x28>)
 8010336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801033a:	bf00      	nop
 801033c:	0801035d 	.word	0x0801035d
 8010340:	080103c1 	.word	0x080103c1
 8010344:	08010425 	.word	0x08010425
 8010348:	08010489 	.word	0x08010489
 801034c:	080104ed 	.word	0x080104ed
 8010350:	08010551 	.word	0x08010551
 8010354:	080105b9 	.word	0x080105b9
 8010358:	0801061d 	.word	0x0801061d
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_7);
 801035c:	4b95      	ldr	r3, [pc, #596]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801035e:	7b1b      	ldrb	r3, [r3, #12]
 8010360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010364:	b2da      	uxtb	r2, r3
 8010366:	4b93      	ldr	r3, [pc, #588]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010368:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_6);
 801036a:	4b92      	ldr	r3, [pc, #584]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801036c:	7b1b      	ldrb	r3, [r3, #12]
 801036e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010372:	b2da      	uxtb	r2, r3
 8010374:	4b8f      	ldr	r3, [pc, #572]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010376:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_7);
 8010378:	4b8e      	ldr	r3, [pc, #568]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801037a:	7c5b      	ldrb	r3, [r3, #17]
 801037c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010380:	b2da      	uxtb	r2, r3
 8010382:	4b8c      	ldr	r3, [pc, #560]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010384:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_6);
 8010386:	4b8b      	ldr	r3, [pc, #556]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010388:	7c5b      	ldrb	r3, [r3, #17]
 801038a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801038e:	b2da      	uxtb	r2, r3
 8010390:	4b88      	ldr	r3, [pc, #544]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010392:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_6);
 8010394:	4b87      	ldr	r3, [pc, #540]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010396:	789b      	ldrb	r3, [r3, #2]
 8010398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801039c:	b2da      	uxtb	r2, r3
 801039e:	4b85      	ldr	r3, [pc, #532]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80103a0:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_7);
 80103a2:	4b84      	ldr	r3, [pc, #528]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80103a4:	789b      	ldrb	r3, [r3, #2]
 80103a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103aa:	b2da      	uxtb	r2, r3
 80103ac:	4b81      	ldr	r3, [pc, #516]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80103ae:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_6);
 80103b0:	4b80      	ldr	r3, [pc, #512]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80103b2:	79db      	ldrb	r3, [r3, #7]
 80103b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103b8:	b2da      	uxtb	r2, r3
 80103ba:	4b7e      	ldr	r3, [pc, #504]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80103bc:	71da      	strb	r2, [r3, #7]
            break;
 80103be:	e2de      	b.n	801097e <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_13] &= ~(1 << BIT_1);
 80103c0:	4b7c      	ldr	r3, [pc, #496]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80103c2:	7b5b      	ldrb	r3, [r3, #13]
 80103c4:	f023 0302 	bic.w	r3, r3, #2
 80103c8:	b2da      	uxtb	r2, r3
 80103ca:	4b7a      	ldr	r3, [pc, #488]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80103cc:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_0);
 80103ce:	4b79      	ldr	r3, [pc, #484]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80103d0:	7b5b      	ldrb	r3, [r3, #13]
 80103d2:	f023 0301 	bic.w	r3, r3, #1
 80103d6:	b2da      	uxtb	r2, r3
 80103d8:	4b76      	ldr	r3, [pc, #472]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80103da:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_1);
 80103dc:	4b75      	ldr	r3, [pc, #468]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80103de:	7c9b      	ldrb	r3, [r3, #18]
 80103e0:	f023 0302 	bic.w	r3, r3, #2
 80103e4:	b2da      	uxtb	r2, r3
 80103e6:	4b73      	ldr	r3, [pc, #460]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80103e8:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_0);
 80103ea:	4b72      	ldr	r3, [pc, #456]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80103ec:	7c9b      	ldrb	r3, [r3, #18]
 80103ee:	f023 0301 	bic.w	r3, r3, #1
 80103f2:	b2da      	uxtb	r2, r3
 80103f4:	4b6f      	ldr	r3, [pc, #444]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80103f6:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_0);
 80103f8:	4b6e      	ldr	r3, [pc, #440]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80103fa:	78db      	ldrb	r3, [r3, #3]
 80103fc:	f023 0301 	bic.w	r3, r3, #1
 8010400:	b2da      	uxtb	r2, r3
 8010402:	4b6c      	ldr	r3, [pc, #432]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010404:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_1);
 8010406:	4b6b      	ldr	r3, [pc, #428]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010408:	78db      	ldrb	r3, [r3, #3]
 801040a:	f023 0302 	bic.w	r3, r3, #2
 801040e:	b2da      	uxtb	r2, r3
 8010410:	4b68      	ldr	r3, [pc, #416]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010412:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_0);
 8010414:	4b67      	ldr	r3, [pc, #412]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010416:	7a1b      	ldrb	r3, [r3, #8]
 8010418:	f023 0301 	bic.w	r3, r3, #1
 801041c:	b2da      	uxtb	r2, r3
 801041e:	4b65      	ldr	r3, [pc, #404]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010420:	721a      	strb	r2, [r3, #8]
            break;
 8010422:	e2ac      	b.n	801097e <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_13] &= ~(1 << BIT_3);
 8010424:	4b63      	ldr	r3, [pc, #396]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010426:	7b5b      	ldrb	r3, [r3, #13]
 8010428:	f023 0308 	bic.w	r3, r3, #8
 801042c:	b2da      	uxtb	r2, r3
 801042e:	4b61      	ldr	r3, [pc, #388]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010430:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_2);
 8010432:	4b60      	ldr	r3, [pc, #384]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010434:	7b5b      	ldrb	r3, [r3, #13]
 8010436:	f023 0304 	bic.w	r3, r3, #4
 801043a:	b2da      	uxtb	r2, r3
 801043c:	4b5d      	ldr	r3, [pc, #372]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801043e:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_3);
 8010440:	4b5c      	ldr	r3, [pc, #368]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010442:	7c9b      	ldrb	r3, [r3, #18]
 8010444:	f023 0308 	bic.w	r3, r3, #8
 8010448:	b2da      	uxtb	r2, r3
 801044a:	4b5a      	ldr	r3, [pc, #360]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801044c:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_2);
 801044e:	4b59      	ldr	r3, [pc, #356]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010450:	7c9b      	ldrb	r3, [r3, #18]
 8010452:	f023 0304 	bic.w	r3, r3, #4
 8010456:	b2da      	uxtb	r2, r3
 8010458:	4b56      	ldr	r3, [pc, #344]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801045a:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_2);
 801045c:	4b55      	ldr	r3, [pc, #340]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801045e:	78db      	ldrb	r3, [r3, #3]
 8010460:	f023 0304 	bic.w	r3, r3, #4
 8010464:	b2da      	uxtb	r2, r3
 8010466:	4b53      	ldr	r3, [pc, #332]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010468:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_3);
 801046a:	4b52      	ldr	r3, [pc, #328]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801046c:	78db      	ldrb	r3, [r3, #3]
 801046e:	f023 0308 	bic.w	r3, r3, #8
 8010472:	b2da      	uxtb	r2, r3
 8010474:	4b4f      	ldr	r3, [pc, #316]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010476:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_2);
 8010478:	4b4e      	ldr	r3, [pc, #312]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801047a:	7a1b      	ldrb	r3, [r3, #8]
 801047c:	f023 0304 	bic.w	r3, r3, #4
 8010480:	b2da      	uxtb	r2, r3
 8010482:	4b4c      	ldr	r3, [pc, #304]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010484:	721a      	strb	r2, [r3, #8]
            break;
 8010486:	e27a      	b.n	801097e <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_13] &= ~(1 << BIT_5);
 8010488:	4b4a      	ldr	r3, [pc, #296]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801048a:	7b5b      	ldrb	r3, [r3, #13]
 801048c:	f023 0320 	bic.w	r3, r3, #32
 8010490:	b2da      	uxtb	r2, r3
 8010492:	4b48      	ldr	r3, [pc, #288]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010494:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_4);
 8010496:	4b47      	ldr	r3, [pc, #284]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010498:	7b5b      	ldrb	r3, [r3, #13]
 801049a:	f023 0310 	bic.w	r3, r3, #16
 801049e:	b2da      	uxtb	r2, r3
 80104a0:	4b44      	ldr	r3, [pc, #272]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80104a2:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_5);
 80104a4:	4b43      	ldr	r3, [pc, #268]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80104a6:	7c9b      	ldrb	r3, [r3, #18]
 80104a8:	f023 0320 	bic.w	r3, r3, #32
 80104ac:	b2da      	uxtb	r2, r3
 80104ae:	4b41      	ldr	r3, [pc, #260]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80104b0:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_4);
 80104b2:	4b40      	ldr	r3, [pc, #256]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80104b4:	7c9b      	ldrb	r3, [r3, #18]
 80104b6:	f023 0310 	bic.w	r3, r3, #16
 80104ba:	b2da      	uxtb	r2, r3
 80104bc:	4b3d      	ldr	r3, [pc, #244]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80104be:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_4);
 80104c0:	4b3c      	ldr	r3, [pc, #240]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80104c2:	78db      	ldrb	r3, [r3, #3]
 80104c4:	f023 0310 	bic.w	r3, r3, #16
 80104c8:	b2da      	uxtb	r2, r3
 80104ca:	4b3a      	ldr	r3, [pc, #232]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80104cc:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_5);
 80104ce:	4b39      	ldr	r3, [pc, #228]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80104d0:	78db      	ldrb	r3, [r3, #3]
 80104d2:	f023 0320 	bic.w	r3, r3, #32
 80104d6:	b2da      	uxtb	r2, r3
 80104d8:	4b36      	ldr	r3, [pc, #216]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80104da:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_4);
 80104dc:	4b35      	ldr	r3, [pc, #212]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80104de:	7a1b      	ldrb	r3, [r3, #8]
 80104e0:	f023 0310 	bic.w	r3, r3, #16
 80104e4:	b2da      	uxtb	r2, r3
 80104e6:	4b33      	ldr	r3, [pc, #204]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80104e8:	721a      	strb	r2, [r3, #8]
            break;
 80104ea:	e248      	b.n	801097e <lcd_clear_digit+0x66a>
            case DIGIT_4:
                g_lcd_map[REG_13] &= ~(1 << BIT_7);
 80104ec:	4b31      	ldr	r3, [pc, #196]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80104ee:	7b5b      	ldrb	r3, [r3, #13]
 80104f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104f4:	b2da      	uxtb	r2, r3
 80104f6:	4b2f      	ldr	r3, [pc, #188]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80104f8:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_6);
 80104fa:	4b2e      	ldr	r3, [pc, #184]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80104fc:	7b5b      	ldrb	r3, [r3, #13]
 80104fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010502:	b2da      	uxtb	r2, r3
 8010504:	4b2b      	ldr	r3, [pc, #172]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010506:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_7);
 8010508:	4b2a      	ldr	r3, [pc, #168]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801050a:	7c9b      	ldrb	r3, [r3, #18]
 801050c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010510:	b2da      	uxtb	r2, r3
 8010512:	4b28      	ldr	r3, [pc, #160]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010514:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_6);
 8010516:	4b27      	ldr	r3, [pc, #156]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010518:	7c9b      	ldrb	r3, [r3, #18]
 801051a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801051e:	b2da      	uxtb	r2, r3
 8010520:	4b24      	ldr	r3, [pc, #144]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010522:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_6);
 8010524:	4b23      	ldr	r3, [pc, #140]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010526:	78db      	ldrb	r3, [r3, #3]
 8010528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801052c:	b2da      	uxtb	r2, r3
 801052e:	4b21      	ldr	r3, [pc, #132]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010530:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_7);
 8010532:	4b20      	ldr	r3, [pc, #128]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010534:	78db      	ldrb	r3, [r3, #3]
 8010536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801053a:	b2da      	uxtb	r2, r3
 801053c:	4b1d      	ldr	r3, [pc, #116]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801053e:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_6);
 8010540:	4b1c      	ldr	r3, [pc, #112]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010542:	7a1b      	ldrb	r3, [r3, #8]
 8010544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010548:	b2da      	uxtb	r2, r3
 801054a:	4b1a      	ldr	r3, [pc, #104]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801054c:	721a      	strb	r2, [r3, #8]
            break;
 801054e:	e216      	b.n	801097e <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_14] &= ~(1 << BIT_1);
 8010550:	4b18      	ldr	r3, [pc, #96]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010552:	7b9b      	ldrb	r3, [r3, #14]
 8010554:	f023 0302 	bic.w	r3, r3, #2
 8010558:	b2da      	uxtb	r2, r3
 801055a:	4b16      	ldr	r3, [pc, #88]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801055c:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_0);
 801055e:	4b15      	ldr	r3, [pc, #84]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010560:	7b9b      	ldrb	r3, [r3, #14]
 8010562:	f023 0301 	bic.w	r3, r3, #1
 8010566:	b2da      	uxtb	r2, r3
 8010568:	4b12      	ldr	r3, [pc, #72]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801056a:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_1);
 801056c:	4b11      	ldr	r3, [pc, #68]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801056e:	7cdb      	ldrb	r3, [r3, #19]
 8010570:	f023 0302 	bic.w	r3, r3, #2
 8010574:	b2da      	uxtb	r2, r3
 8010576:	4b0f      	ldr	r3, [pc, #60]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010578:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_0);
 801057a:	4b0e      	ldr	r3, [pc, #56]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801057c:	7cdb      	ldrb	r3, [r3, #19]
 801057e:	f023 0301 	bic.w	r3, r3, #1
 8010582:	b2da      	uxtb	r2, r3
 8010584:	4b0b      	ldr	r3, [pc, #44]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010586:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_0);
 8010588:	4b0a      	ldr	r3, [pc, #40]	; (80105b4 <lcd_clear_digit+0x2a0>)
 801058a:	791b      	ldrb	r3, [r3, #4]
 801058c:	f023 0301 	bic.w	r3, r3, #1
 8010590:	b2da      	uxtb	r2, r3
 8010592:	4b08      	ldr	r3, [pc, #32]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010594:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_1);
 8010596:	4b07      	ldr	r3, [pc, #28]	; (80105b4 <lcd_clear_digit+0x2a0>)
 8010598:	791b      	ldrb	r3, [r3, #4]
 801059a:	f023 0302 	bic.w	r3, r3, #2
 801059e:	b2da      	uxtb	r2, r3
 80105a0:	4b04      	ldr	r3, [pc, #16]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80105a2:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_0);
 80105a4:	4b03      	ldr	r3, [pc, #12]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80105a6:	7a5b      	ldrb	r3, [r3, #9]
 80105a8:	f023 0301 	bic.w	r3, r3, #1
 80105ac:	b2da      	uxtb	r2, r3
 80105ae:	4b01      	ldr	r3, [pc, #4]	; (80105b4 <lcd_clear_digit+0x2a0>)
 80105b0:	725a      	strb	r2, [r3, #9]
            break;
 80105b2:	e1e4      	b.n	801097e <lcd_clear_digit+0x66a>
 80105b4:	20001d9c 	.word	0x20001d9c
            case DIGIT_6:
                g_lcd_map[REG_14] &= ~(1 << BIT_3);
 80105b8:	4ba2      	ldr	r3, [pc, #648]	; (8010844 <lcd_clear_digit+0x530>)
 80105ba:	7b9b      	ldrb	r3, [r3, #14]
 80105bc:	f023 0308 	bic.w	r3, r3, #8
 80105c0:	b2da      	uxtb	r2, r3
 80105c2:	4ba0      	ldr	r3, [pc, #640]	; (8010844 <lcd_clear_digit+0x530>)
 80105c4:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_2);
 80105c6:	4b9f      	ldr	r3, [pc, #636]	; (8010844 <lcd_clear_digit+0x530>)
 80105c8:	7b9b      	ldrb	r3, [r3, #14]
 80105ca:	f023 0304 	bic.w	r3, r3, #4
 80105ce:	b2da      	uxtb	r2, r3
 80105d0:	4b9c      	ldr	r3, [pc, #624]	; (8010844 <lcd_clear_digit+0x530>)
 80105d2:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_3);
 80105d4:	4b9b      	ldr	r3, [pc, #620]	; (8010844 <lcd_clear_digit+0x530>)
 80105d6:	7cdb      	ldrb	r3, [r3, #19]
 80105d8:	f023 0308 	bic.w	r3, r3, #8
 80105dc:	b2da      	uxtb	r2, r3
 80105de:	4b99      	ldr	r3, [pc, #612]	; (8010844 <lcd_clear_digit+0x530>)
 80105e0:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_2);
 80105e2:	4b98      	ldr	r3, [pc, #608]	; (8010844 <lcd_clear_digit+0x530>)
 80105e4:	7cdb      	ldrb	r3, [r3, #19]
 80105e6:	f023 0304 	bic.w	r3, r3, #4
 80105ea:	b2da      	uxtb	r2, r3
 80105ec:	4b95      	ldr	r3, [pc, #596]	; (8010844 <lcd_clear_digit+0x530>)
 80105ee:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_2);
 80105f0:	4b94      	ldr	r3, [pc, #592]	; (8010844 <lcd_clear_digit+0x530>)
 80105f2:	791b      	ldrb	r3, [r3, #4]
 80105f4:	f023 0304 	bic.w	r3, r3, #4
 80105f8:	b2da      	uxtb	r2, r3
 80105fa:	4b92      	ldr	r3, [pc, #584]	; (8010844 <lcd_clear_digit+0x530>)
 80105fc:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_3);
 80105fe:	4b91      	ldr	r3, [pc, #580]	; (8010844 <lcd_clear_digit+0x530>)
 8010600:	791b      	ldrb	r3, [r3, #4]
 8010602:	f023 0308 	bic.w	r3, r3, #8
 8010606:	b2da      	uxtb	r2, r3
 8010608:	4b8e      	ldr	r3, [pc, #568]	; (8010844 <lcd_clear_digit+0x530>)
 801060a:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_2);
 801060c:	4b8d      	ldr	r3, [pc, #564]	; (8010844 <lcd_clear_digit+0x530>)
 801060e:	7a5b      	ldrb	r3, [r3, #9]
 8010610:	f023 0304 	bic.w	r3, r3, #4
 8010614:	b2da      	uxtb	r2, r3
 8010616:	4b8b      	ldr	r3, [pc, #556]	; (8010844 <lcd_clear_digit+0x530>)
 8010618:	725a      	strb	r2, [r3, #9]
            break;
 801061a:	e1b0      	b.n	801097e <lcd_clear_digit+0x66a>
            case DIGIT_7:
                g_lcd_map[REG_14] &= ~(1 << BIT_5);
 801061c:	4b89      	ldr	r3, [pc, #548]	; (8010844 <lcd_clear_digit+0x530>)
 801061e:	7b9b      	ldrb	r3, [r3, #14]
 8010620:	f023 0320 	bic.w	r3, r3, #32
 8010624:	b2da      	uxtb	r2, r3
 8010626:	4b87      	ldr	r3, [pc, #540]	; (8010844 <lcd_clear_digit+0x530>)
 8010628:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_4);
 801062a:	4b86      	ldr	r3, [pc, #536]	; (8010844 <lcd_clear_digit+0x530>)
 801062c:	7b9b      	ldrb	r3, [r3, #14]
 801062e:	f023 0310 	bic.w	r3, r3, #16
 8010632:	b2da      	uxtb	r2, r3
 8010634:	4b83      	ldr	r3, [pc, #524]	; (8010844 <lcd_clear_digit+0x530>)
 8010636:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_5);
 8010638:	4b82      	ldr	r3, [pc, #520]	; (8010844 <lcd_clear_digit+0x530>)
 801063a:	7cdb      	ldrb	r3, [r3, #19]
 801063c:	f023 0320 	bic.w	r3, r3, #32
 8010640:	b2da      	uxtb	r2, r3
 8010642:	4b80      	ldr	r3, [pc, #512]	; (8010844 <lcd_clear_digit+0x530>)
 8010644:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_4);
 8010646:	4b7f      	ldr	r3, [pc, #508]	; (8010844 <lcd_clear_digit+0x530>)
 8010648:	7cdb      	ldrb	r3, [r3, #19]
 801064a:	f023 0310 	bic.w	r3, r3, #16
 801064e:	b2da      	uxtb	r2, r3
 8010650:	4b7c      	ldr	r3, [pc, #496]	; (8010844 <lcd_clear_digit+0x530>)
 8010652:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_4);
 8010654:	4b7b      	ldr	r3, [pc, #492]	; (8010844 <lcd_clear_digit+0x530>)
 8010656:	791b      	ldrb	r3, [r3, #4]
 8010658:	f023 0310 	bic.w	r3, r3, #16
 801065c:	b2da      	uxtb	r2, r3
 801065e:	4b79      	ldr	r3, [pc, #484]	; (8010844 <lcd_clear_digit+0x530>)
 8010660:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_5);
 8010662:	4b78      	ldr	r3, [pc, #480]	; (8010844 <lcd_clear_digit+0x530>)
 8010664:	791b      	ldrb	r3, [r3, #4]
 8010666:	f023 0320 	bic.w	r3, r3, #32
 801066a:	b2da      	uxtb	r2, r3
 801066c:	4b75      	ldr	r3, [pc, #468]	; (8010844 <lcd_clear_digit+0x530>)
 801066e:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_4);
 8010670:	4b74      	ldr	r3, [pc, #464]	; (8010844 <lcd_clear_digit+0x530>)
 8010672:	7a5b      	ldrb	r3, [r3, #9]
 8010674:	f023 0310 	bic.w	r3, r3, #16
 8010678:	b2da      	uxtb	r2, r3
 801067a:	4b72      	ldr	r3, [pc, #456]	; (8010844 <lcd_clear_digit+0x530>)
 801067c:	725a      	strb	r2, [r3, #9]
            break;
 801067e:	e17e      	b.n	801097e <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
    else if(line == LOW_ROW)
 8010680:	79bb      	ldrb	r3, [r7, #6]
 8010682:	2b01      	cmp	r3, #1
 8010684:	f040 8178 	bne.w	8010978 <lcd_clear_digit+0x664>
    {
        switch(digit)
 8010688:	79fb      	ldrb	r3, [r7, #7]
 801068a:	2b06      	cmp	r3, #6
 801068c:	f200 8176 	bhi.w	801097c <lcd_clear_digit+0x668>
 8010690:	a201      	add	r2, pc, #4	; (adr r2, 8010698 <lcd_clear_digit+0x384>)
 8010692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010696:	bf00      	nop
 8010698:	080106b5 	.word	0x080106b5
 801069c:	08010719 	.word	0x08010719
 80106a0:	0801077d 	.word	0x0801077d
 80106a4:	080107e1 	.word	0x080107e1
 80106a8:	08010849 	.word	0x08010849
 80106ac:	080108ad 	.word	0x080108ad
 80106b0:	08010911 	.word	0x08010911
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_2);
 80106b4:	4b63      	ldr	r3, [pc, #396]	; (8010844 <lcd_clear_digit+0x530>)
 80106b6:	7b1b      	ldrb	r3, [r3, #12]
 80106b8:	f023 0304 	bic.w	r3, r3, #4
 80106bc:	b2da      	uxtb	r2, r3
 80106be:	4b61      	ldr	r3, [pc, #388]	; (8010844 <lcd_clear_digit+0x530>)
 80106c0:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_3);
 80106c2:	4b60      	ldr	r3, [pc, #384]	; (8010844 <lcd_clear_digit+0x530>)
 80106c4:	7b1b      	ldrb	r3, [r3, #12]
 80106c6:	f023 0308 	bic.w	r3, r3, #8
 80106ca:	b2da      	uxtb	r2, r3
 80106cc:	4b5d      	ldr	r3, [pc, #372]	; (8010844 <lcd_clear_digit+0x530>)
 80106ce:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_2);
 80106d0:	4b5c      	ldr	r3, [pc, #368]	; (8010844 <lcd_clear_digit+0x530>)
 80106d2:	7c5b      	ldrb	r3, [r3, #17]
 80106d4:	f023 0304 	bic.w	r3, r3, #4
 80106d8:	b2da      	uxtb	r2, r3
 80106da:	4b5a      	ldr	r3, [pc, #360]	; (8010844 <lcd_clear_digit+0x530>)
 80106dc:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_3);
 80106de:	4b59      	ldr	r3, [pc, #356]	; (8010844 <lcd_clear_digit+0x530>)
 80106e0:	7c5b      	ldrb	r3, [r3, #17]
 80106e2:	f023 0308 	bic.w	r3, r3, #8
 80106e6:	b2da      	uxtb	r2, r3
 80106e8:	4b56      	ldr	r3, [pc, #344]	; (8010844 <lcd_clear_digit+0x530>)
 80106ea:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_2);
 80106ec:	4b55      	ldr	r3, [pc, #340]	; (8010844 <lcd_clear_digit+0x530>)
 80106ee:	789b      	ldrb	r3, [r3, #2]
 80106f0:	f023 0304 	bic.w	r3, r3, #4
 80106f4:	b2da      	uxtb	r2, r3
 80106f6:	4b53      	ldr	r3, [pc, #332]	; (8010844 <lcd_clear_digit+0x530>)
 80106f8:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_3);
 80106fa:	4b52      	ldr	r3, [pc, #328]	; (8010844 <lcd_clear_digit+0x530>)
 80106fc:	789b      	ldrb	r3, [r3, #2]
 80106fe:	f023 0308 	bic.w	r3, r3, #8
 8010702:	b2da      	uxtb	r2, r3
 8010704:	4b4f      	ldr	r3, [pc, #316]	; (8010844 <lcd_clear_digit+0x530>)
 8010706:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_3);
 8010708:	4b4e      	ldr	r3, [pc, #312]	; (8010844 <lcd_clear_digit+0x530>)
 801070a:	79db      	ldrb	r3, [r3, #7]
 801070c:	f023 0308 	bic.w	r3, r3, #8
 8010710:	b2da      	uxtb	r2, r3
 8010712:	4b4c      	ldr	r3, [pc, #304]	; (8010844 <lcd_clear_digit+0x530>)
 8010714:	71da      	strb	r2, [r3, #7]
            break;
 8010716:	e132      	b.n	801097e <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_12] &= ~(1 << BIT_0);
 8010718:	4b4a      	ldr	r3, [pc, #296]	; (8010844 <lcd_clear_digit+0x530>)
 801071a:	7b1b      	ldrb	r3, [r3, #12]
 801071c:	f023 0301 	bic.w	r3, r3, #1
 8010720:	b2da      	uxtb	r2, r3
 8010722:	4b48      	ldr	r3, [pc, #288]	; (8010844 <lcd_clear_digit+0x530>)
 8010724:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_1);
 8010726:	4b47      	ldr	r3, [pc, #284]	; (8010844 <lcd_clear_digit+0x530>)
 8010728:	7b1b      	ldrb	r3, [r3, #12]
 801072a:	f023 0302 	bic.w	r3, r3, #2
 801072e:	b2da      	uxtb	r2, r3
 8010730:	4b44      	ldr	r3, [pc, #272]	; (8010844 <lcd_clear_digit+0x530>)
 8010732:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_0);
 8010734:	4b43      	ldr	r3, [pc, #268]	; (8010844 <lcd_clear_digit+0x530>)
 8010736:	7c5b      	ldrb	r3, [r3, #17]
 8010738:	f023 0301 	bic.w	r3, r3, #1
 801073c:	b2da      	uxtb	r2, r3
 801073e:	4b41      	ldr	r3, [pc, #260]	; (8010844 <lcd_clear_digit+0x530>)
 8010740:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_1);
 8010742:	4b40      	ldr	r3, [pc, #256]	; (8010844 <lcd_clear_digit+0x530>)
 8010744:	7c5b      	ldrb	r3, [r3, #17]
 8010746:	f023 0302 	bic.w	r3, r3, #2
 801074a:	b2da      	uxtb	r2, r3
 801074c:	4b3d      	ldr	r3, [pc, #244]	; (8010844 <lcd_clear_digit+0x530>)
 801074e:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_0);
 8010750:	4b3c      	ldr	r3, [pc, #240]	; (8010844 <lcd_clear_digit+0x530>)
 8010752:	789b      	ldrb	r3, [r3, #2]
 8010754:	f023 0301 	bic.w	r3, r3, #1
 8010758:	b2da      	uxtb	r2, r3
 801075a:	4b3a      	ldr	r3, [pc, #232]	; (8010844 <lcd_clear_digit+0x530>)
 801075c:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_1);
 801075e:	4b39      	ldr	r3, [pc, #228]	; (8010844 <lcd_clear_digit+0x530>)
 8010760:	789b      	ldrb	r3, [r3, #2]
 8010762:	f023 0302 	bic.w	r3, r3, #2
 8010766:	b2da      	uxtb	r2, r3
 8010768:	4b36      	ldr	r3, [pc, #216]	; (8010844 <lcd_clear_digit+0x530>)
 801076a:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_1);
 801076c:	4b35      	ldr	r3, [pc, #212]	; (8010844 <lcd_clear_digit+0x530>)
 801076e:	79db      	ldrb	r3, [r3, #7]
 8010770:	f023 0302 	bic.w	r3, r3, #2
 8010774:	b2da      	uxtb	r2, r3
 8010776:	4b33      	ldr	r3, [pc, #204]	; (8010844 <lcd_clear_digit+0x530>)
 8010778:	71da      	strb	r2, [r3, #7]
            break;
 801077a:	e100      	b.n	801097e <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_11] &= ~(1 << BIT_6);
 801077c:	4b31      	ldr	r3, [pc, #196]	; (8010844 <lcd_clear_digit+0x530>)
 801077e:	7adb      	ldrb	r3, [r3, #11]
 8010780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010784:	b2da      	uxtb	r2, r3
 8010786:	4b2f      	ldr	r3, [pc, #188]	; (8010844 <lcd_clear_digit+0x530>)
 8010788:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_7);
 801078a:	4b2e      	ldr	r3, [pc, #184]	; (8010844 <lcd_clear_digit+0x530>)
 801078c:	7adb      	ldrb	r3, [r3, #11]
 801078e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010792:	b2da      	uxtb	r2, r3
 8010794:	4b2b      	ldr	r3, [pc, #172]	; (8010844 <lcd_clear_digit+0x530>)
 8010796:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_6);
 8010798:	4b2a      	ldr	r3, [pc, #168]	; (8010844 <lcd_clear_digit+0x530>)
 801079a:	7c1b      	ldrb	r3, [r3, #16]
 801079c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107a0:	b2da      	uxtb	r2, r3
 80107a2:	4b28      	ldr	r3, [pc, #160]	; (8010844 <lcd_clear_digit+0x530>)
 80107a4:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_7);
 80107a6:	4b27      	ldr	r3, [pc, #156]	; (8010844 <lcd_clear_digit+0x530>)
 80107a8:	7c1b      	ldrb	r3, [r3, #16]
 80107aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107ae:	b2da      	uxtb	r2, r3
 80107b0:	4b24      	ldr	r3, [pc, #144]	; (8010844 <lcd_clear_digit+0x530>)
 80107b2:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_6);
 80107b4:	4b23      	ldr	r3, [pc, #140]	; (8010844 <lcd_clear_digit+0x530>)
 80107b6:	785b      	ldrb	r3, [r3, #1]
 80107b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107bc:	b2da      	uxtb	r2, r3
 80107be:	4b21      	ldr	r3, [pc, #132]	; (8010844 <lcd_clear_digit+0x530>)
 80107c0:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_7);
 80107c2:	4b20      	ldr	r3, [pc, #128]	; (8010844 <lcd_clear_digit+0x530>)
 80107c4:	785b      	ldrb	r3, [r3, #1]
 80107c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107ca:	b2da      	uxtb	r2, r3
 80107cc:	4b1d      	ldr	r3, [pc, #116]	; (8010844 <lcd_clear_digit+0x530>)
 80107ce:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_7);
 80107d0:	4b1c      	ldr	r3, [pc, #112]	; (8010844 <lcd_clear_digit+0x530>)
 80107d2:	799b      	ldrb	r3, [r3, #6]
 80107d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107d8:	b2da      	uxtb	r2, r3
 80107da:	4b1a      	ldr	r3, [pc, #104]	; (8010844 <lcd_clear_digit+0x530>)
 80107dc:	719a      	strb	r2, [r3, #6]
            break;
 80107de:	e0ce      	b.n	801097e <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_11] &= ~(1 << BIT_4);
 80107e0:	4b18      	ldr	r3, [pc, #96]	; (8010844 <lcd_clear_digit+0x530>)
 80107e2:	7adb      	ldrb	r3, [r3, #11]
 80107e4:	f023 0310 	bic.w	r3, r3, #16
 80107e8:	b2da      	uxtb	r2, r3
 80107ea:	4b16      	ldr	r3, [pc, #88]	; (8010844 <lcd_clear_digit+0x530>)
 80107ec:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_5);
 80107ee:	4b15      	ldr	r3, [pc, #84]	; (8010844 <lcd_clear_digit+0x530>)
 80107f0:	7adb      	ldrb	r3, [r3, #11]
 80107f2:	f023 0320 	bic.w	r3, r3, #32
 80107f6:	b2da      	uxtb	r2, r3
 80107f8:	4b12      	ldr	r3, [pc, #72]	; (8010844 <lcd_clear_digit+0x530>)
 80107fa:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_4);
 80107fc:	4b11      	ldr	r3, [pc, #68]	; (8010844 <lcd_clear_digit+0x530>)
 80107fe:	7c1b      	ldrb	r3, [r3, #16]
 8010800:	f023 0310 	bic.w	r3, r3, #16
 8010804:	b2da      	uxtb	r2, r3
 8010806:	4b0f      	ldr	r3, [pc, #60]	; (8010844 <lcd_clear_digit+0x530>)
 8010808:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_5);
 801080a:	4b0e      	ldr	r3, [pc, #56]	; (8010844 <lcd_clear_digit+0x530>)
 801080c:	7c1b      	ldrb	r3, [r3, #16]
 801080e:	f023 0320 	bic.w	r3, r3, #32
 8010812:	b2da      	uxtb	r2, r3
 8010814:	4b0b      	ldr	r3, [pc, #44]	; (8010844 <lcd_clear_digit+0x530>)
 8010816:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_4);
 8010818:	4b0a      	ldr	r3, [pc, #40]	; (8010844 <lcd_clear_digit+0x530>)
 801081a:	785b      	ldrb	r3, [r3, #1]
 801081c:	f023 0310 	bic.w	r3, r3, #16
 8010820:	b2da      	uxtb	r2, r3
 8010822:	4b08      	ldr	r3, [pc, #32]	; (8010844 <lcd_clear_digit+0x530>)
 8010824:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_5);
 8010826:	4b07      	ldr	r3, [pc, #28]	; (8010844 <lcd_clear_digit+0x530>)
 8010828:	785b      	ldrb	r3, [r3, #1]
 801082a:	f023 0320 	bic.w	r3, r3, #32
 801082e:	b2da      	uxtb	r2, r3
 8010830:	4b04      	ldr	r3, [pc, #16]	; (8010844 <lcd_clear_digit+0x530>)
 8010832:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_5);
 8010834:	4b03      	ldr	r3, [pc, #12]	; (8010844 <lcd_clear_digit+0x530>)
 8010836:	799b      	ldrb	r3, [r3, #6]
 8010838:	f023 0320 	bic.w	r3, r3, #32
 801083c:	b2da      	uxtb	r2, r3
 801083e:	4b01      	ldr	r3, [pc, #4]	; (8010844 <lcd_clear_digit+0x530>)
 8010840:	719a      	strb	r2, [r3, #6]
            break;
 8010842:	e09c      	b.n	801097e <lcd_clear_digit+0x66a>
 8010844:	20001d9c 	.word	0x20001d9c
            case DIGIT_4:
                g_lcd_map[REG_11] &= ~(1 << BIT_2);
 8010848:	4b50      	ldr	r3, [pc, #320]	; (801098c <lcd_clear_digit+0x678>)
 801084a:	7adb      	ldrb	r3, [r3, #11]
 801084c:	f023 0304 	bic.w	r3, r3, #4
 8010850:	b2da      	uxtb	r2, r3
 8010852:	4b4e      	ldr	r3, [pc, #312]	; (801098c <lcd_clear_digit+0x678>)
 8010854:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_3);
 8010856:	4b4d      	ldr	r3, [pc, #308]	; (801098c <lcd_clear_digit+0x678>)
 8010858:	7adb      	ldrb	r3, [r3, #11]
 801085a:	f023 0308 	bic.w	r3, r3, #8
 801085e:	b2da      	uxtb	r2, r3
 8010860:	4b4a      	ldr	r3, [pc, #296]	; (801098c <lcd_clear_digit+0x678>)
 8010862:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_2);
 8010864:	4b49      	ldr	r3, [pc, #292]	; (801098c <lcd_clear_digit+0x678>)
 8010866:	7c1b      	ldrb	r3, [r3, #16]
 8010868:	f023 0304 	bic.w	r3, r3, #4
 801086c:	b2da      	uxtb	r2, r3
 801086e:	4b47      	ldr	r3, [pc, #284]	; (801098c <lcd_clear_digit+0x678>)
 8010870:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_3);
 8010872:	4b46      	ldr	r3, [pc, #280]	; (801098c <lcd_clear_digit+0x678>)
 8010874:	7c1b      	ldrb	r3, [r3, #16]
 8010876:	f023 0308 	bic.w	r3, r3, #8
 801087a:	b2da      	uxtb	r2, r3
 801087c:	4b43      	ldr	r3, [pc, #268]	; (801098c <lcd_clear_digit+0x678>)
 801087e:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_2);
 8010880:	4b42      	ldr	r3, [pc, #264]	; (801098c <lcd_clear_digit+0x678>)
 8010882:	785b      	ldrb	r3, [r3, #1]
 8010884:	f023 0304 	bic.w	r3, r3, #4
 8010888:	b2da      	uxtb	r2, r3
 801088a:	4b40      	ldr	r3, [pc, #256]	; (801098c <lcd_clear_digit+0x678>)
 801088c:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_3);
 801088e:	4b3f      	ldr	r3, [pc, #252]	; (801098c <lcd_clear_digit+0x678>)
 8010890:	785b      	ldrb	r3, [r3, #1]
 8010892:	f023 0308 	bic.w	r3, r3, #8
 8010896:	b2da      	uxtb	r2, r3
 8010898:	4b3c      	ldr	r3, [pc, #240]	; (801098c <lcd_clear_digit+0x678>)
 801089a:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_3);
 801089c:	4b3b      	ldr	r3, [pc, #236]	; (801098c <lcd_clear_digit+0x678>)
 801089e:	799b      	ldrb	r3, [r3, #6]
 80108a0:	f023 0308 	bic.w	r3, r3, #8
 80108a4:	b2da      	uxtb	r2, r3
 80108a6:	4b39      	ldr	r3, [pc, #228]	; (801098c <lcd_clear_digit+0x678>)
 80108a8:	719a      	strb	r2, [r3, #6]
            break;
 80108aa:	e068      	b.n	801097e <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_11] &= ~(1 << BIT_0);
 80108ac:	4b37      	ldr	r3, [pc, #220]	; (801098c <lcd_clear_digit+0x678>)
 80108ae:	7adb      	ldrb	r3, [r3, #11]
 80108b0:	f023 0301 	bic.w	r3, r3, #1
 80108b4:	b2da      	uxtb	r2, r3
 80108b6:	4b35      	ldr	r3, [pc, #212]	; (801098c <lcd_clear_digit+0x678>)
 80108b8:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_1);
 80108ba:	4b34      	ldr	r3, [pc, #208]	; (801098c <lcd_clear_digit+0x678>)
 80108bc:	7adb      	ldrb	r3, [r3, #11]
 80108be:	f023 0302 	bic.w	r3, r3, #2
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	4b31      	ldr	r3, [pc, #196]	; (801098c <lcd_clear_digit+0x678>)
 80108c6:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_0);
 80108c8:	4b30      	ldr	r3, [pc, #192]	; (801098c <lcd_clear_digit+0x678>)
 80108ca:	7c1b      	ldrb	r3, [r3, #16]
 80108cc:	f023 0301 	bic.w	r3, r3, #1
 80108d0:	b2da      	uxtb	r2, r3
 80108d2:	4b2e      	ldr	r3, [pc, #184]	; (801098c <lcd_clear_digit+0x678>)
 80108d4:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_1);
 80108d6:	4b2d      	ldr	r3, [pc, #180]	; (801098c <lcd_clear_digit+0x678>)
 80108d8:	7c1b      	ldrb	r3, [r3, #16]
 80108da:	f023 0302 	bic.w	r3, r3, #2
 80108de:	b2da      	uxtb	r2, r3
 80108e0:	4b2a      	ldr	r3, [pc, #168]	; (801098c <lcd_clear_digit+0x678>)
 80108e2:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_0);
 80108e4:	4b29      	ldr	r3, [pc, #164]	; (801098c <lcd_clear_digit+0x678>)
 80108e6:	785b      	ldrb	r3, [r3, #1]
 80108e8:	f023 0301 	bic.w	r3, r3, #1
 80108ec:	b2da      	uxtb	r2, r3
 80108ee:	4b27      	ldr	r3, [pc, #156]	; (801098c <lcd_clear_digit+0x678>)
 80108f0:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_1);
 80108f2:	4b26      	ldr	r3, [pc, #152]	; (801098c <lcd_clear_digit+0x678>)
 80108f4:	785b      	ldrb	r3, [r3, #1]
 80108f6:	f023 0302 	bic.w	r3, r3, #2
 80108fa:	b2da      	uxtb	r2, r3
 80108fc:	4b23      	ldr	r3, [pc, #140]	; (801098c <lcd_clear_digit+0x678>)
 80108fe:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_1);
 8010900:	4b22      	ldr	r3, [pc, #136]	; (801098c <lcd_clear_digit+0x678>)
 8010902:	799b      	ldrb	r3, [r3, #6]
 8010904:	f023 0302 	bic.w	r3, r3, #2
 8010908:	b2da      	uxtb	r2, r3
 801090a:	4b20      	ldr	r3, [pc, #128]	; (801098c <lcd_clear_digit+0x678>)
 801090c:	719a      	strb	r2, [r3, #6]
            break;
 801090e:	e036      	b.n	801097e <lcd_clear_digit+0x66a>
            case DIGIT_6:
                g_lcd_map[REG_10] &= ~(1 << BIT_6);
 8010910:	4b1e      	ldr	r3, [pc, #120]	; (801098c <lcd_clear_digit+0x678>)
 8010912:	7a9b      	ldrb	r3, [r3, #10]
 8010914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010918:	b2da      	uxtb	r2, r3
 801091a:	4b1c      	ldr	r3, [pc, #112]	; (801098c <lcd_clear_digit+0x678>)
 801091c:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_10] &= ~(1 << BIT_7);
 801091e:	4b1b      	ldr	r3, [pc, #108]	; (801098c <lcd_clear_digit+0x678>)
 8010920:	7a9b      	ldrb	r3, [r3, #10]
 8010922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010926:	b2da      	uxtb	r2, r3
 8010928:	4b18      	ldr	r3, [pc, #96]	; (801098c <lcd_clear_digit+0x678>)
 801092a:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_15] &= ~(1 << BIT_6);
 801092c:	4b17      	ldr	r3, [pc, #92]	; (801098c <lcd_clear_digit+0x678>)
 801092e:	7bdb      	ldrb	r3, [r3, #15]
 8010930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010934:	b2da      	uxtb	r2, r3
 8010936:	4b15      	ldr	r3, [pc, #84]	; (801098c <lcd_clear_digit+0x678>)
 8010938:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_15] &= ~(1 << BIT_7);
 801093a:	4b14      	ldr	r3, [pc, #80]	; (801098c <lcd_clear_digit+0x678>)
 801093c:	7bdb      	ldrb	r3, [r3, #15]
 801093e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010942:	b2da      	uxtb	r2, r3
 8010944:	4b11      	ldr	r3, [pc, #68]	; (801098c <lcd_clear_digit+0x678>)
 8010946:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_0] &= ~(1 << BIT_6);
 8010948:	4b10      	ldr	r3, [pc, #64]	; (801098c <lcd_clear_digit+0x678>)
 801094a:	781b      	ldrb	r3, [r3, #0]
 801094c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010950:	b2da      	uxtb	r2, r3
 8010952:	4b0e      	ldr	r3, [pc, #56]	; (801098c <lcd_clear_digit+0x678>)
 8010954:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_0] &= ~(1 << BIT_7);
 8010956:	4b0d      	ldr	r3, [pc, #52]	; (801098c <lcd_clear_digit+0x678>)
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801095e:	b2da      	uxtb	r2, r3
 8010960:	4b0a      	ldr	r3, [pc, #40]	; (801098c <lcd_clear_digit+0x678>)
 8010962:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_5] &= ~(1 << BIT_7);
 8010964:	4b09      	ldr	r3, [pc, #36]	; (801098c <lcd_clear_digit+0x678>)
 8010966:	795b      	ldrb	r3, [r3, #5]
 8010968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801096c:	b2da      	uxtb	r2, r3
 801096e:	4b07      	ldr	r3, [pc, #28]	; (801098c <lcd_clear_digit+0x678>)
 8010970:	715a      	strb	r2, [r3, #5]
            break;
 8010972:	e004      	b.n	801097e <lcd_clear_digit+0x66a>
            break;
 8010974:	bf00      	nop
 8010976:	e002      	b.n	801097e <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
 8010978:	bf00      	nop
 801097a:	e000      	b.n	801097e <lcd_clear_digit+0x66a>
            break;
 801097c:	bf00      	nop
}
 801097e:	bf00      	nop
 8010980:	370c      	adds	r7, #12
 8010982:	46bd      	mov	sp, r7
 8010984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010988:	4770      	bx	lr
 801098a:	bf00      	nop
 801098c:	20001d9c 	.word	0x20001d9c

08010990 <lcd_clear_point>:
 * pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_clear_point(rows_t line, point_t point)
{
 8010990:	b480      	push	{r7}
 8010992:	b083      	sub	sp, #12
 8010994:	af00      	add	r7, sp, #0
 8010996:	4603      	mov	r3, r0
 8010998:	460a      	mov	r2, r1
 801099a:	71fb      	strb	r3, [r7, #7]
 801099c:	4613      	mov	r3, r2
 801099e:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 80109a0:	79fb      	ldrb	r3, [r7, #7]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d14c      	bne.n	8010a40 <lcd_clear_point+0xb0>
    {
        switch (point)
 80109a6:	79bb      	ldrb	r3, [r7, #6]
 80109a8:	2b06      	cmp	r3, #6
 80109aa:	f200 808f 	bhi.w	8010acc <lcd_clear_point+0x13c>
 80109ae:	a201      	add	r2, pc, #4	; (adr r2, 80109b4 <lcd_clear_point+0x24>)
 80109b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109b4:	080109d1 	.word	0x080109d1
 80109b8:	080109e1 	.word	0x080109e1
 80109bc:	080109f1 	.word	0x080109f1
 80109c0:	08010a01 	.word	0x08010a01
 80109c4:	08010a11 	.word	0x08010a11
 80109c8:	08010a21 	.word	0x08010a21
 80109cc:	08010a31 	.word	0x08010a31
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_7);
 80109d0:	4b44      	ldr	r3, [pc, #272]	; (8010ae4 <lcd_clear_point+0x154>)
 80109d2:	79db      	ldrb	r3, [r3, #7]
 80109d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109d8:	b2da      	uxtb	r2, r3
 80109da:	4b42      	ldr	r3, [pc, #264]	; (8010ae4 <lcd_clear_point+0x154>)
 80109dc:	71da      	strb	r2, [r3, #7]
            break;
 80109de:	e07a      	b.n	8010ad6 <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] &= ~(1 << BIT_1);
 80109e0:	4b40      	ldr	r3, [pc, #256]	; (8010ae4 <lcd_clear_point+0x154>)
 80109e2:	7a1b      	ldrb	r3, [r3, #8]
 80109e4:	f023 0302 	bic.w	r3, r3, #2
 80109e8:	b2da      	uxtb	r2, r3
 80109ea:	4b3e      	ldr	r3, [pc, #248]	; (8010ae4 <lcd_clear_point+0x154>)
 80109ec:	721a      	strb	r2, [r3, #8]
            break;
 80109ee:	e072      	b.n	8010ad6 <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] &= ~(1 << BIT_3);
 80109f0:	4b3c      	ldr	r3, [pc, #240]	; (8010ae4 <lcd_clear_point+0x154>)
 80109f2:	7a1b      	ldrb	r3, [r3, #8]
 80109f4:	f023 0308 	bic.w	r3, r3, #8
 80109f8:	b2da      	uxtb	r2, r3
 80109fa:	4b3a      	ldr	r3, [pc, #232]	; (8010ae4 <lcd_clear_point+0x154>)
 80109fc:	721a      	strb	r2, [r3, #8]
            break;
 80109fe:	e06a      	b.n	8010ad6 <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] &= ~(1 << BIT_5);
 8010a00:	4b38      	ldr	r3, [pc, #224]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a02:	7a1b      	ldrb	r3, [r3, #8]
 8010a04:	f023 0320 	bic.w	r3, r3, #32
 8010a08:	b2da      	uxtb	r2, r3
 8010a0a:	4b36      	ldr	r3, [pc, #216]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a0c:	721a      	strb	r2, [r3, #8]
            break;
 8010a0e:	e062      	b.n	8010ad6 <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] &= ~(1 << BIT_7);
 8010a10:	4b34      	ldr	r3, [pc, #208]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a12:	7a1b      	ldrb	r3, [r3, #8]
 8010a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a18:	b2da      	uxtb	r2, r3
 8010a1a:	4b32      	ldr	r3, [pc, #200]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a1c:	721a      	strb	r2, [r3, #8]
            break;
 8010a1e:	e05a      	b.n	8010ad6 <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] &= ~(1 << BIT_1);
 8010a20:	4b30      	ldr	r3, [pc, #192]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a22:	7a5b      	ldrb	r3, [r3, #9]
 8010a24:	f023 0302 	bic.w	r3, r3, #2
 8010a28:	b2da      	uxtb	r2, r3
 8010a2a:	4b2e      	ldr	r3, [pc, #184]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a2c:	725a      	strb	r2, [r3, #9]
            break;
 8010a2e:	e052      	b.n	8010ad6 <lcd_clear_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] &= ~(1 << BIT_3);
 8010a30:	4b2c      	ldr	r3, [pc, #176]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a32:	7a5b      	ldrb	r3, [r3, #9]
 8010a34:	f023 0308 	bic.w	r3, r3, #8
 8010a38:	b2da      	uxtb	r2, r3
 8010a3a:	4b2a      	ldr	r3, [pc, #168]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a3c:	725a      	strb	r2, [r3, #9]
            break;
 8010a3e:	e04a      	b.n	8010ad6 <lcd_clear_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8010a40:	79fb      	ldrb	r3, [r7, #7]
 8010a42:	2b01      	cmp	r3, #1
 8010a44:	d144      	bne.n	8010ad0 <lcd_clear_point+0x140>
    {
        switch (point)
 8010a46:	79bb      	ldrb	r3, [r7, #6]
 8010a48:	2b05      	cmp	r3, #5
 8010a4a:	d843      	bhi.n	8010ad4 <lcd_clear_point+0x144>
 8010a4c:	a201      	add	r2, pc, #4	; (adr r2, 8010a54 <lcd_clear_point+0xc4>)
 8010a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a52:	bf00      	nop
 8010a54:	08010a6d 	.word	0x08010a6d
 8010a58:	08010a7d 	.word	0x08010a7d
 8010a5c:	08010a8d 	.word	0x08010a8d
 8010a60:	08010a9d 	.word	0x08010a9d
 8010a64:	08010aad 	.word	0x08010aad
 8010a68:	08010abd 	.word	0x08010abd
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_2);
 8010a6c:	4b1d      	ldr	r3, [pc, #116]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a6e:	79db      	ldrb	r3, [r3, #7]
 8010a70:	f023 0304 	bic.w	r3, r3, #4
 8010a74:	b2da      	uxtb	r2, r3
 8010a76:	4b1b      	ldr	r3, [pc, #108]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a78:	71da      	strb	r2, [r3, #7]
            break;
 8010a7a:	e02c      	b.n	8010ad6 <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] &= ~(1 << BIT_0);
 8010a7c:	4b19      	ldr	r3, [pc, #100]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a7e:	79db      	ldrb	r3, [r3, #7]
 8010a80:	f023 0301 	bic.w	r3, r3, #1
 8010a84:	b2da      	uxtb	r2, r3
 8010a86:	4b17      	ldr	r3, [pc, #92]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a88:	71da      	strb	r2, [r3, #7]
            break;
 8010a8a:	e024      	b.n	8010ad6 <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] &= ~(1 << BIT_6);
 8010a8c:	4b15      	ldr	r3, [pc, #84]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a8e:	799b      	ldrb	r3, [r3, #6]
 8010a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a94:	b2da      	uxtb	r2, r3
 8010a96:	4b13      	ldr	r3, [pc, #76]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a98:	719a      	strb	r2, [r3, #6]
            break;
 8010a9a:	e01c      	b.n	8010ad6 <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] &= ~(1 << BIT_4);
 8010a9c:	4b11      	ldr	r3, [pc, #68]	; (8010ae4 <lcd_clear_point+0x154>)
 8010a9e:	799b      	ldrb	r3, [r3, #6]
 8010aa0:	f023 0310 	bic.w	r3, r3, #16
 8010aa4:	b2da      	uxtb	r2, r3
 8010aa6:	4b0f      	ldr	r3, [pc, #60]	; (8010ae4 <lcd_clear_point+0x154>)
 8010aa8:	719a      	strb	r2, [r3, #6]
            break;
 8010aaa:	e014      	b.n	8010ad6 <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] &= ~(1 << BIT_2);
 8010aac:	4b0d      	ldr	r3, [pc, #52]	; (8010ae4 <lcd_clear_point+0x154>)
 8010aae:	799b      	ldrb	r3, [r3, #6]
 8010ab0:	f023 0304 	bic.w	r3, r3, #4
 8010ab4:	b2da      	uxtb	r2, r3
 8010ab6:	4b0b      	ldr	r3, [pc, #44]	; (8010ae4 <lcd_clear_point+0x154>)
 8010ab8:	719a      	strb	r2, [r3, #6]
            break;
 8010aba:	e00c      	b.n	8010ad6 <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] &= ~(1 << BIT_0);
 8010abc:	4b09      	ldr	r3, [pc, #36]	; (8010ae4 <lcd_clear_point+0x154>)
 8010abe:	799b      	ldrb	r3, [r3, #6]
 8010ac0:	f023 0301 	bic.w	r3, r3, #1
 8010ac4:	b2da      	uxtb	r2, r3
 8010ac6:	4b07      	ldr	r3, [pc, #28]	; (8010ae4 <lcd_clear_point+0x154>)
 8010ac8:	719a      	strb	r2, [r3, #6]
            break;
 8010aca:	e004      	b.n	8010ad6 <lcd_clear_point+0x146>
            break;
 8010acc:	bf00      	nop
 8010ace:	e002      	b.n	8010ad6 <lcd_clear_point+0x146>
            default:
            break;
        }
    }
 8010ad0:	bf00      	nop
 8010ad2:	e000      	b.n	8010ad6 <lcd_clear_point+0x146>
            break;
 8010ad4:	bf00      	nop
}
 8010ad6:	bf00      	nop
 8010ad8:	370c      	adds	r7, #12
 8010ada:	46bd      	mov	sp, r7
 8010adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae0:	4770      	bx	lr
 8010ae2:	bf00      	nop
 8010ae4:	20001d9c 	.word	0x20001d9c

08010ae8 <lcd_clear_time_unit>:

    pcf8553_blink(blink_speed);
}

void lcd_clear_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	4603      	mov	r3, r0
 8010af0:	460a      	mov	r2, r1
 8010af2:	71fb      	strb	r3, [r7, #7]
 8010af4:	4613      	mov	r3, r2
 8010af6:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8010af8:	79fb      	ldrb	r3, [r7, #7]
 8010afa:	2b03      	cmp	r3, #3
 8010afc:	d82a      	bhi.n	8010b54 <lcd_clear_time_unit+0x6c>
 8010afe:	a201      	add	r2, pc, #4	; (adr r2, 8010b04 <lcd_clear_time_unit+0x1c>)
 8010b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b04:	08010b15 	.word	0x08010b15
 8010b08:	08010b25 	.word	0x08010b25
 8010b0c:	08010b35 	.word	0x08010b35
 8010b10:	08010b45 	.word	0x08010b45
    {
        case H:
            g_lcd_map[REG_5] &= ~(1 << BIT_6);
 8010b14:	4b14      	ldr	r3, [pc, #80]	; (8010b68 <lcd_clear_time_unit+0x80>)
 8010b16:	795b      	ldrb	r3, [r3, #5]
 8010b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b1c:	b2da      	uxtb	r2, r3
 8010b1e:	4b12      	ldr	r3, [pc, #72]	; (8010b68 <lcd_clear_time_unit+0x80>)
 8010b20:	715a      	strb	r2, [r3, #5]
        break;
 8010b22:	e018      	b.n	8010b56 <lcd_clear_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] &= ~(1 << BIT_5);
 8010b24:	4b10      	ldr	r3, [pc, #64]	; (8010b68 <lcd_clear_time_unit+0x80>)
 8010b26:	7a5b      	ldrb	r3, [r3, #9]
 8010b28:	f023 0320 	bic.w	r3, r3, #32
 8010b2c:	b2da      	uxtb	r2, r3
 8010b2e:	4b0e      	ldr	r3, [pc, #56]	; (8010b68 <lcd_clear_time_unit+0x80>)
 8010b30:	725a      	strb	r2, [r3, #9]
        break;
 8010b32:	e010      	b.n	8010b56 <lcd_clear_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] &= ~(1 << BIT_5);
 8010b34:	4b0c      	ldr	r3, [pc, #48]	; (8010b68 <lcd_clear_time_unit+0x80>)
 8010b36:	7a9b      	ldrb	r3, [r3, #10]
 8010b38:	f023 0320 	bic.w	r3, r3, #32
 8010b3c:	b2da      	uxtb	r2, r3
 8010b3e:	4b0a      	ldr	r3, [pc, #40]	; (8010b68 <lcd_clear_time_unit+0x80>)
 8010b40:	729a      	strb	r2, [r3, #10]
        break;
 8010b42:	e008      	b.n	8010b56 <lcd_clear_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] &= ~(1 << BIT_7);
 8010b44:	4b08      	ldr	r3, [pc, #32]	; (8010b68 <lcd_clear_time_unit+0x80>)
 8010b46:	7a5b      	ldrb	r3, [r3, #9]
 8010b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b4c:	b2da      	uxtb	r2, r3
 8010b4e:	4b06      	ldr	r3, [pc, #24]	; (8010b68 <lcd_clear_time_unit+0x80>)
 8010b50:	725a      	strb	r2, [r3, #9]
        break;
 8010b52:	e000      	b.n	8010b56 <lcd_clear_time_unit+0x6e>
        default:
        break;
 8010b54:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8010b56:	79bb      	ldrb	r3, [r7, #6]
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f001 fb2f 	bl	80121bc <pcf8553_blink>
}
 8010b5e:	bf00      	nop
 8010b60:	3708      	adds	r7, #8
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	20001d9c 	.word	0x20001d9c

08010b6c <lcd_clear_vol_unit>:

void lcd_clear_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b082      	sub	sp, #8
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	4603      	mov	r3, r0
 8010b74:	460a      	mov	r2, r1
 8010b76:	71fb      	strb	r3, [r7, #7]
 8010b78:	4613      	mov	r3, r2
 8010b7a:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8010b7c:	79fb      	ldrb	r3, [r7, #7]
 8010b7e:	2b06      	cmp	r3, #6
 8010b80:	f200 81e3 	bhi.w	8010f4a <lcd_clear_vol_unit+0x3de>
 8010b84:	a201      	add	r2, pc, #4	; (adr r2, 8010b8c <lcd_clear_vol_unit+0x20>)
 8010b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b8a:	bf00      	nop
 8010b8c:	08010ba9 	.word	0x08010ba9
 8010b90:	08010c9b 	.word	0x08010c9b
 8010b94:	08010bff 	.word	0x08010bff
 8010b98:	08010e11 	.word	0x08010e11
 8010b9c:	08010d45 	.word	0x08010d45
 8010ba0:	08010e91 	.word	0x08010e91
 8010ba4:	08010f11 	.word	0x08010f11
    {
        case LT:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010ba8:	4b98      	ldr	r3, [pc, #608]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010baa:	7bdb      	ldrb	r3, [r3, #15]
 8010bac:	f023 0320 	bic.w	r3, r3, #32
 8010bb0:	b2da      	uxtb	r2, r3
 8010bb2:	4b96      	ldr	r3, [pc, #600]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010bb4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010bb6:	4b95      	ldr	r3, [pc, #596]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	f023 0320 	bic.w	r3, r3, #32
 8010bbe:	b2da      	uxtb	r2, r3
 8010bc0:	4b92      	ldr	r3, [pc, #584]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010bc2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8010bc4:	4b91      	ldr	r3, [pc, #580]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010bc6:	795b      	ldrb	r3, [r3, #5]
 8010bc8:	f023 0320 	bic.w	r3, r3, #32
 8010bcc:	b2da      	uxtb	r2, r3
 8010bce:	4b8f      	ldr	r3, [pc, #572]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010bd0:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010bd2:	4b8e      	ldr	r3, [pc, #568]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010bd4:	7b9b      	ldrb	r3, [r3, #14]
 8010bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bda:	b2da      	uxtb	r2, r3
 8010bdc:	4b8b      	ldr	r3, [pc, #556]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010bde:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] &= ~(1 << BIT_0);
 8010be0:	4b8a      	ldr	r3, [pc, #552]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010be2:	7a9b      	ldrb	r3, [r3, #10]
 8010be4:	f023 0301 	bic.w	r3, r3, #1
 8010be8:	b2da      	uxtb	r2, r3
 8010bea:	4b88      	ldr	r3, [pc, #544]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010bec:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] &= ~(1 << BIT_6);
 8010bee:	4b87      	ldr	r3, [pc, #540]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010bf0:	7a5b      	ldrb	r3, [r3, #9]
 8010bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bf6:	b2da      	uxtb	r2, r3
 8010bf8:	4b84      	ldr	r3, [pc, #528]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010bfa:	725a      	strb	r2, [r3, #9]
        break;
 8010bfc:	e1a6      	b.n	8010f4c <lcd_clear_vol_unit+0x3e0>
        case KG:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010bfe:	4b83      	ldr	r3, [pc, #524]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c00:	7bdb      	ldrb	r3, [r3, #15]
 8010c02:	f023 0320 	bic.w	r3, r3, #32
 8010c06:	b2da      	uxtb	r2, r3
 8010c08:	4b80      	ldr	r3, [pc, #512]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c0a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010c0c:	4b7f      	ldr	r3, [pc, #508]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c0e:	7bdb      	ldrb	r3, [r3, #15]
 8010c10:	f023 0310 	bic.w	r3, r3, #16
 8010c14:	b2da      	uxtb	r2, r3
 8010c16:	4b7d      	ldr	r3, [pc, #500]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c18:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8010c1a:	4b7c      	ldr	r3, [pc, #496]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c1c:	7bdb      	ldrb	r3, [r3, #15]
 8010c1e:	f023 0304 	bic.w	r3, r3, #4
 8010c22:	b2da      	uxtb	r2, r3
 8010c24:	4b79      	ldr	r3, [pc, #484]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c26:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010c28:	4b78      	ldr	r3, [pc, #480]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	f023 0320 	bic.w	r3, r3, #32
 8010c30:	b2da      	uxtb	r2, r3
 8010c32:	4b76      	ldr	r3, [pc, #472]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c34:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_4);
 8010c36:	4b75      	ldr	r3, [pc, #468]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c38:	795b      	ldrb	r3, [r3, #5]
 8010c3a:	f023 0310 	bic.w	r3, r3, #16
 8010c3e:	b2da      	uxtb	r2, r3
 8010c40:	4b72      	ldr	r3, [pc, #456]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c42:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010c44:	4b71      	ldr	r3, [pc, #452]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c46:	7b9b      	ldrb	r3, [r3, #14]
 8010c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c4c:	b2da      	uxtb	r2, r3
 8010c4e:	4b6f      	ldr	r3, [pc, #444]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c50:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010c52:	4b6e      	ldr	r3, [pc, #440]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c54:	7bdb      	ldrb	r3, [r3, #15]
 8010c56:	f023 0302 	bic.w	r3, r3, #2
 8010c5a:	b2da      	uxtb	r2, r3
 8010c5c:	4b6b      	ldr	r3, [pc, #428]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c5e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010c60:	4b6a      	ldr	r3, [pc, #424]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	f023 0301 	bic.w	r3, r3, #1
 8010c68:	b2da      	uxtb	r2, r3
 8010c6a:	4b68      	ldr	r3, [pc, #416]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c6c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010c6e:	4b67      	ldr	r3, [pc, #412]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	f023 0302 	bic.w	r3, r3, #2
 8010c76:	b2da      	uxtb	r2, r3
 8010c78:	4b64      	ldr	r3, [pc, #400]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c7a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 8010c7c:	4b63      	ldr	r3, [pc, #396]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c7e:	791b      	ldrb	r3, [r3, #4]
 8010c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c84:	b2da      	uxtb	r2, r3
 8010c86:	4b61      	ldr	r3, [pc, #388]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c88:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010c8a:	4b60      	ldr	r3, [pc, #384]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c8c:	795b      	ldrb	r3, [r3, #5]
 8010c8e:	f023 0302 	bic.w	r3, r3, #2
 8010c92:	b2da      	uxtb	r2, r3
 8010c94:	4b5d      	ldr	r3, [pc, #372]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c96:	715a      	strb	r2, [r3, #5]
        break;
 8010c98:	e158      	b.n	8010f4c <lcd_clear_vol_unit+0x3e0>
        case M3:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010c9a:	4b5c      	ldr	r3, [pc, #368]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010c9c:	7bdb      	ldrb	r3, [r3, #15]
 8010c9e:	f023 0320 	bic.w	r3, r3, #32
 8010ca2:	b2da      	uxtb	r2, r3
 8010ca4:	4b59      	ldr	r3, [pc, #356]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010ca6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 8010ca8:	4b58      	ldr	r3, [pc, #352]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010caa:	7a9b      	ldrb	r3, [r3, #10]
 8010cac:	f023 0304 	bic.w	r3, r3, #4
 8010cb0:	b2da      	uxtb	r2, r3
 8010cb2:	4b56      	ldr	r3, [pc, #344]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010cb4:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010cb6:	4b55      	ldr	r3, [pc, #340]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010cb8:	7bdb      	ldrb	r3, [r3, #15]
 8010cba:	f023 0310 	bic.w	r3, r3, #16
 8010cbe:	b2da      	uxtb	r2, r3
 8010cc0:	4b52      	ldr	r3, [pc, #328]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010cc2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010cc4:	4b51      	ldr	r3, [pc, #324]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010cc6:	7bdb      	ldrb	r3, [r3, #15]
 8010cc8:	f023 0308 	bic.w	r3, r3, #8
 8010ccc:	b2da      	uxtb	r2, r3
 8010cce:	4b4f      	ldr	r3, [pc, #316]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010cd0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010cd2:	4b4e      	ldr	r3, [pc, #312]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010cd4:	781b      	ldrb	r3, [r3, #0]
 8010cd6:	f023 0320 	bic.w	r3, r3, #32
 8010cda:	b2da      	uxtb	r2, r3
 8010cdc:	4b4b      	ldr	r3, [pc, #300]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010cde:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8010ce0:	4b4a      	ldr	r3, [pc, #296]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	f023 0308 	bic.w	r3, r3, #8
 8010ce8:	b2da      	uxtb	r2, r3
 8010cea:	4b48      	ldr	r3, [pc, #288]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010cec:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010cee:	4b47      	ldr	r3, [pc, #284]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010cf0:	7b9b      	ldrb	r3, [r3, #14]
 8010cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cf6:	b2da      	uxtb	r2, r3
 8010cf8:	4b44      	ldr	r3, [pc, #272]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010cfa:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 8010cfc:	4b43      	ldr	r3, [pc, #268]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010cfe:	7cdb      	ldrb	r3, [r3, #19]
 8010d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d04:	b2da      	uxtb	r2, r3
 8010d06:	4b41      	ldr	r3, [pc, #260]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d08:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8010d0a:	4b40      	ldr	r3, [pc, #256]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d0c:	7cdb      	ldrb	r3, [r3, #19]
 8010d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d12:	b2da      	uxtb	r2, r3
 8010d14:	4b3d      	ldr	r3, [pc, #244]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d16:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010d18:	4b3c      	ldr	r3, [pc, #240]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d1a:	781b      	ldrb	r3, [r3, #0]
 8010d1c:	f023 0301 	bic.w	r3, r3, #1
 8010d20:	b2da      	uxtb	r2, r3
 8010d22:	4b3a      	ldr	r3, [pc, #232]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d24:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 8010d26:	4b39      	ldr	r3, [pc, #228]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d28:	791b      	ldrb	r3, [r3, #4]
 8010d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d2e:	b2da      	uxtb	r2, r3
 8010d30:	4b36      	ldr	r3, [pc, #216]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d32:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010d34:	4b35      	ldr	r3, [pc, #212]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d36:	795b      	ldrb	r3, [r3, #5]
 8010d38:	f023 0302 	bic.w	r3, r3, #2
 8010d3c:	b2da      	uxtb	r2, r3
 8010d3e:	4b33      	ldr	r3, [pc, #204]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d40:	715a      	strb	r2, [r3, #5]
        break;
 8010d42:	e103      	b.n	8010f4c <lcd_clear_vol_unit+0x3e0>
        case BR:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8010d44:	4b31      	ldr	r3, [pc, #196]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d46:	7a9b      	ldrb	r3, [r3, #10]
 8010d48:	f023 0308 	bic.w	r3, r3, #8
 8010d4c:	b2da      	uxtb	r2, r3
 8010d4e:	4b2f      	ldr	r3, [pc, #188]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d50:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] &= ~(1 << BIT_4);
 8010d52:	4b2e      	ldr	r3, [pc, #184]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d54:	7a9b      	ldrb	r3, [r3, #10]
 8010d56:	f023 0310 	bic.w	r3, r3, #16
 8010d5a:	b2da      	uxtb	r2, r3
 8010d5c:	4b2b      	ldr	r3, [pc, #172]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d5e:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010d60:	4b2a      	ldr	r3, [pc, #168]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d62:	7bdb      	ldrb	r3, [r3, #15]
 8010d64:	f023 0308 	bic.w	r3, r3, #8
 8010d68:	b2da      	uxtb	r2, r3
 8010d6a:	4b28      	ldr	r3, [pc, #160]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d6c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8010d6e:	4b27      	ldr	r3, [pc, #156]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	f023 0310 	bic.w	r3, r3, #16
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	4b24      	ldr	r3, [pc, #144]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d7a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_2);
 8010d7c:	4b23      	ldr	r3, [pc, #140]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d7e:	795b      	ldrb	r3, [r3, #5]
 8010d80:	f023 0304 	bic.w	r3, r3, #4
 8010d84:	b2da      	uxtb	r2, r3
 8010d86:	4b21      	ldr	r3, [pc, #132]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d88:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8010d8a:	4b20      	ldr	r3, [pc, #128]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d8c:	781b      	ldrb	r3, [r3, #0]
 8010d8e:	f023 0308 	bic.w	r3, r3, #8
 8010d92:	b2da      	uxtb	r2, r3
 8010d94:	4b1d      	ldr	r3, [pc, #116]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d96:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8010d98:	4b1c      	ldr	r3, [pc, #112]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010d9a:	795b      	ldrb	r3, [r3, #5]
 8010d9c:	f023 0320 	bic.w	r3, r3, #32
 8010da0:	b2da      	uxtb	r2, r3
 8010da2:	4b1a      	ldr	r3, [pc, #104]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010da4:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010da6:	4b19      	ldr	r3, [pc, #100]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010da8:	7b9b      	ldrb	r3, [r3, #14]
 8010daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dae:	b2da      	uxtb	r2, r3
 8010db0:	4b16      	ldr	r3, [pc, #88]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010db2:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010db4:	4b15      	ldr	r3, [pc, #84]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010db6:	7bdb      	ldrb	r3, [r3, #15]
 8010db8:	f023 0302 	bic.w	r3, r3, #2
 8010dbc:	b2da      	uxtb	r2, r3
 8010dbe:	4b13      	ldr	r3, [pc, #76]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010dc0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 8010dc2:	4b12      	ldr	r3, [pc, #72]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010dc4:	7cdb      	ldrb	r3, [r3, #19]
 8010dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dca:	b2da      	uxtb	r2, r3
 8010dcc:	4b0f      	ldr	r3, [pc, #60]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010dce:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8010dd0:	4b0e      	ldr	r3, [pc, #56]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010dd2:	7cdb      	ldrb	r3, [r3, #19]
 8010dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dd8:	b2da      	uxtb	r2, r3
 8010dda:	4b0c      	ldr	r3, [pc, #48]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010ddc:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010dde:	4b0b      	ldr	r3, [pc, #44]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	f023 0301 	bic.w	r3, r3, #1
 8010de6:	b2da      	uxtb	r2, r3
 8010de8:	4b08      	ldr	r3, [pc, #32]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010dea:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010dec:	4b07      	ldr	r3, [pc, #28]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010dee:	781b      	ldrb	r3, [r3, #0]
 8010df0:	f023 0302 	bic.w	r3, r3, #2
 8010df4:	b2da      	uxtb	r2, r3
 8010df6:	4b05      	ldr	r3, [pc, #20]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010df8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_0);
 8010dfa:	4b04      	ldr	r3, [pc, #16]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010dfc:	795b      	ldrb	r3, [r3, #5]
 8010dfe:	f023 0301 	bic.w	r3, r3, #1
 8010e02:	b2da      	uxtb	r2, r3
 8010e04:	4b01      	ldr	r3, [pc, #4]	; (8010e0c <lcd_clear_vol_unit+0x2a0>)
 8010e06:	715a      	strb	r2, [r3, #5]
        break;
 8010e08:	e0a0      	b.n	8010f4c <lcd_clear_vol_unit+0x3e0>
 8010e0a:	bf00      	nop
 8010e0c:	20001d9c 	.word	0x20001d9c
        case GL:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8010e10:	4b52      	ldr	r3, [pc, #328]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e12:	7a9b      	ldrb	r3, [r3, #10]
 8010e14:	f023 0308 	bic.w	r3, r3, #8
 8010e18:	b2da      	uxtb	r2, r3
 8010e1a:	4b50      	ldr	r3, [pc, #320]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e1c:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010e1e:	4b4f      	ldr	r3, [pc, #316]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e20:	7bdb      	ldrb	r3, [r3, #15]
 8010e22:	f023 0320 	bic.w	r3, r3, #32
 8010e26:	b2da      	uxtb	r2, r3
 8010e28:	4b4c      	ldr	r3, [pc, #304]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e2a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8010e2c:	4b4b      	ldr	r3, [pc, #300]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	f023 0310 	bic.w	r3, r3, #16
 8010e34:	b2da      	uxtb	r2, r3
 8010e36:	4b49      	ldr	r3, [pc, #292]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e38:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010e3a:	4b48      	ldr	r3, [pc, #288]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	f023 0320 	bic.w	r3, r3, #32
 8010e42:	b2da      	uxtb	r2, r3
 8010e44:	4b45      	ldr	r3, [pc, #276]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e46:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8010e48:	4b44      	ldr	r3, [pc, #272]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	f023 0308 	bic.w	r3, r3, #8
 8010e50:	b2da      	uxtb	r2, r3
 8010e52:	4b42      	ldr	r3, [pc, #264]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e54:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8010e56:	4b41      	ldr	r3, [pc, #260]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e58:	795b      	ldrb	r3, [r3, #5]
 8010e5a:	f023 0320 	bic.w	r3, r3, #32
 8010e5e:	b2da      	uxtb	r2, r3
 8010e60:	4b3e      	ldr	r3, [pc, #248]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e62:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010e64:	4b3d      	ldr	r3, [pc, #244]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e66:	7bdb      	ldrb	r3, [r3, #15]
 8010e68:	f023 0302 	bic.w	r3, r3, #2
 8010e6c:	b2da      	uxtb	r2, r3
 8010e6e:	4b3b      	ldr	r3, [pc, #236]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e70:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010e72:	4b3a      	ldr	r3, [pc, #232]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e74:	781b      	ldrb	r3, [r3, #0]
 8010e76:	f023 0302 	bic.w	r3, r3, #2
 8010e7a:	b2da      	uxtb	r2, r3
 8010e7c:	4b37      	ldr	r3, [pc, #220]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e7e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010e80:	4b36      	ldr	r3, [pc, #216]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e82:	795b      	ldrb	r3, [r3, #5]
 8010e84:	f023 0302 	bic.w	r3, r3, #2
 8010e88:	b2da      	uxtb	r2, r3
 8010e8a:	4b34      	ldr	r3, [pc, #208]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e8c:	715a      	strb	r2, [r3, #5]
        break;
 8010e8e:	e05d      	b.n	8010f4c <lcd_clear_vol_unit+0x3e0>
        case CELSIUS:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8010e90:	4b32      	ldr	r3, [pc, #200]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e92:	7a9b      	ldrb	r3, [r3, #10]
 8010e94:	f023 0308 	bic.w	r3, r3, #8
 8010e98:	b2da      	uxtb	r2, r3
 8010e9a:	4b30      	ldr	r3, [pc, #192]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010e9c:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010e9e:	4b2f      	ldr	r3, [pc, #188]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010ea0:	7bdb      	ldrb	r3, [r3, #15]
 8010ea2:	f023 0320 	bic.w	r3, r3, #32
 8010ea6:	b2da      	uxtb	r2, r3
 8010ea8:	4b2c      	ldr	r3, [pc, #176]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010eaa:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010eac:	4b2b      	ldr	r3, [pc, #172]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010eae:	7bdb      	ldrb	r3, [r3, #15]
 8010eb0:	f023 0308 	bic.w	r3, r3, #8
 8010eb4:	b2da      	uxtb	r2, r3
 8010eb6:	4b29      	ldr	r3, [pc, #164]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010eb8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8010eba:	4b28      	ldr	r3, [pc, #160]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010ebc:	7bdb      	ldrb	r3, [r3, #15]
 8010ebe:	f023 0304 	bic.w	r3, r3, #4
 8010ec2:	b2da      	uxtb	r2, r3
 8010ec4:	4b25      	ldr	r3, [pc, #148]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010ec6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8010ec8:	4b24      	ldr	r3, [pc, #144]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010eca:	781b      	ldrb	r3, [r3, #0]
 8010ecc:	f023 0310 	bic.w	r3, r3, #16
 8010ed0:	b2da      	uxtb	r2, r3
 8010ed2:	4b22      	ldr	r3, [pc, #136]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010ed4:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010ed6:	4b21      	ldr	r3, [pc, #132]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010ed8:	7b9b      	ldrb	r3, [r3, #14]
 8010eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ede:	b2da      	uxtb	r2, r3
 8010ee0:	4b1e      	ldr	r3, [pc, #120]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010ee2:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010ee4:	4b1d      	ldr	r3, [pc, #116]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010ee6:	7bdb      	ldrb	r3, [r3, #15]
 8010ee8:	f023 0302 	bic.w	r3, r3, #2
 8010eec:	b2da      	uxtb	r2, r3
 8010eee:	4b1b      	ldr	r3, [pc, #108]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010ef0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010ef2:	4b1a      	ldr	r3, [pc, #104]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010ef4:	781b      	ldrb	r3, [r3, #0]
 8010ef6:	f023 0302 	bic.w	r3, r3, #2
 8010efa:	b2da      	uxtb	r2, r3
 8010efc:	4b17      	ldr	r3, [pc, #92]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010efe:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010f00:	4b16      	ldr	r3, [pc, #88]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010f02:	795b      	ldrb	r3, [r3, #5]
 8010f04:	f023 0302 	bic.w	r3, r3, #2
 8010f08:	b2da      	uxtb	r2, r3
 8010f0a:	4b14      	ldr	r3, [pc, #80]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010f0c:	715a      	strb	r2, [r3, #5]
        break;
 8010f0e:	e01d      	b.n	8010f4c <lcd_clear_vol_unit+0x3e0>
        case NOTHING:
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8010f10:	4b12      	ldr	r3, [pc, #72]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010f12:	7bdb      	ldrb	r3, [r3, #15]
 8010f14:	f023 0304 	bic.w	r3, r3, #4
 8010f18:	b2da      	uxtb	r2, r3
 8010f1a:	4b10      	ldr	r3, [pc, #64]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010f1c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8010f1e:	4b0f      	ldr	r3, [pc, #60]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	f023 0310 	bic.w	r3, r3, #16
 8010f26:	b2da      	uxtb	r2, r3
 8010f28:	4b0c      	ldr	r3, [pc, #48]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010f2a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8010f2c:	4b0b      	ldr	r3, [pc, #44]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010f2e:	7cdb      	ldrb	r3, [r3, #19]
 8010f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f34:	b2da      	uxtb	r2, r3
 8010f36:	4b09      	ldr	r3, [pc, #36]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010f38:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010f3a:	4b08      	ldr	r3, [pc, #32]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	f023 0301 	bic.w	r3, r3, #1
 8010f42:	b2da      	uxtb	r2, r3
 8010f44:	4b05      	ldr	r3, [pc, #20]	; (8010f5c <lcd_clear_vol_unit+0x3f0>)
 8010f46:	701a      	strb	r2, [r3, #0]
        break;
 8010f48:	e000      	b.n	8010f4c <lcd_clear_vol_unit+0x3e0>
        default:
        break;
 8010f4a:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8010f4c:	79bb      	ldrb	r3, [r7, #6]
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f001 f934 	bl	80121bc <pcf8553_blink>
}
 8010f54:	bf00      	nop
 8010f56:	3708      	adds	r7, #8
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}
 8010f5c:	20001d9c 	.word	0x20001d9c

08010f60 <lcd_init>:
 * borrándola.
 * @param  None
 * @retval None
 */
void lcd_init()
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	af00      	add	r7, sp, #0
    pcf8553_init();
 8010f64:	f001 f99c 	bl	80122a0 <pcf8553_init>
}
 8010f68:	bf00      	nop
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <lcd_put_char>:
 * elegida.
 * @param caracter a escribir tipo char, columna y fila de tipo uint8_t
 * @retval None
 */
void lcd_put_char(char c, uint8_t col, uint8_t row)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	4603      	mov	r3, r0
 8010f74:	71fb      	strb	r3, [r7, #7]
 8010f76:	460b      	mov	r3, r1
 8010f78:	71bb      	strb	r3, [r7, #6]
 8010f7a:	4613      	mov	r3, r2
 8010f7c:	717b      	strb	r3, [r7, #5]
    g_row = row + 1;
 8010f7e:	797b      	ldrb	r3, [r7, #5]
 8010f80:	3301      	adds	r3, #1
 8010f82:	b2da      	uxtb	r2, r3
 8010f84:	4bde      	ldr	r3, [pc, #888]	; (8011300 <lcd_put_char+0x394>)
 8010f86:	701a      	strb	r2, [r3, #0]
     *
     * No se activa esta funcionalidad si se está en el menú de configuración,
     * debido a que entra en conflicto con la funcionalidad del parpadeo de los
     * campos a modificar.
     */
    if(in_configuration == 0)
 8010f88:	4bde      	ldr	r3, [pc, #888]	; (8011304 <lcd_put_char+0x398>)
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d10a      	bne.n	8010fa6 <lcd_put_char+0x3a>
    {
        if (g_buf[row][col] == c)
 8010f90:	797a      	ldrb	r2, [r7, #5]
 8010f92:	79bb      	ldrb	r3, [r7, #6]
 8010f94:	49dc      	ldr	r1, [pc, #880]	; (8011308 <lcd_put_char+0x39c>)
 8010f96:	00d2      	lsls	r2, r2, #3
 8010f98:	440a      	add	r2, r1
 8010f9a:	4413      	add	r3, r2
 8010f9c:	781b      	ldrb	r3, [r3, #0]
 8010f9e:	79fa      	ldrb	r2, [r7, #7]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	f000 81d6 	beq.w	8011352 <lcd_put_char+0x3e6>
        {
            return;
        }
    }

    g_buf[row][col] = c;
 8010fa6:	797a      	ldrb	r2, [r7, #5]
 8010fa8:	79bb      	ldrb	r3, [r7, #6]
 8010faa:	49d7      	ldr	r1, [pc, #860]	; (8011308 <lcd_put_char+0x39c>)
 8010fac:	00d2      	lsls	r2, r2, #3
 8010fae:	440a      	add	r2, r1
 8010fb0:	4413      	add	r3, r2
 8010fb2:	79fa      	ldrb	r2, [r7, #7]
 8010fb4:	701a      	strb	r2, [r3, #0]

    switch (row)
 8010fb6:	797b      	ldrb	r3, [r7, #5]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d002      	beq.n	8010fc2 <lcd_put_char+0x56>
 8010fbc:	2b01      	cmp	r3, #1
 8010fbe:	d008      	beq.n	8010fd2 <lcd_put_char+0x66>
                return;
            }

        break;
        default:
            return;
 8010fc0:	e1ce      	b.n	8011360 <lcd_put_char+0x3f4>
            if (col < LINE_0_DIGITS - 1)
 8010fc2:	79bb      	ldrb	r3, [r7, #6]
 8010fc4:	2b07      	cmp	r3, #7
 8010fc6:	f200 81c6 	bhi.w	8011356 <lcd_put_char+0x3ea>
                g_col = col;
 8010fca:	4ad0      	ldr	r2, [pc, #832]	; (801130c <lcd_put_char+0x3a0>)
 8010fcc:	79bb      	ldrb	r3, [r7, #6]
 8010fce:	7013      	strb	r3, [r2, #0]
        break;
 8010fd0:	e00a      	b.n	8010fe8 <lcd_put_char+0x7c>
            if (col < LINE_1_DIGITS - 1)
 8010fd2:	79bb      	ldrb	r3, [r7, #6]
 8010fd4:	2b06      	cmp	r3, #6
 8010fd6:	f200 81c0 	bhi.w	801135a <lcd_put_char+0x3ee>
                g_col = 6 - col; // @suppress("Avoid magic numbers")
 8010fda:	79bb      	ldrb	r3, [r7, #6]
 8010fdc:	f1c3 0306 	rsb	r3, r3, #6
 8010fe0:	b2da      	uxtb	r2, r3
 8010fe2:	4bca      	ldr	r3, [pc, #808]	; (801130c <lcd_put_char+0x3a0>)
 8010fe4:	701a      	strb	r2, [r3, #0]
        break;
 8010fe6:	bf00      	nop
        break;
    }

    switch (c)
 8010fe8:	79fb      	ldrb	r3, [r7, #7]
 8010fea:	3b20      	subs	r3, #32
 8010fec:	2b19      	cmp	r3, #25
 8010fee:	f200 81b6 	bhi.w	801135e <lcd_put_char+0x3f2>
 8010ff2:	a201      	add	r2, pc, #4	; (adr r2, 8010ff8 <lcd_put_char+0x8c>)
 8010ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ff8:	08011061 	.word	0x08011061
 8010ffc:	0801135f 	.word	0x0801135f
 8011000:	0801135f 	.word	0x0801135f
 8011004:	0801135f 	.word	0x0801135f
 8011008:	0801135f 	.word	0x0801135f
 801100c:	0801135f 	.word	0x0801135f
 8011010:	0801135f 	.word	0x0801135f
 8011014:	0801135f 	.word	0x0801135f
 8011018:	0801135f 	.word	0x0801135f
 801101c:	0801135f 	.word	0x0801135f
 8011020:	0801135f 	.word	0x0801135f
 8011024:	0801135f 	.word	0x0801135f
 8011028:	0801135f 	.word	0x0801135f
 801102c:	0801135f 	.word	0x0801135f
 8011030:	080110a3 	.word	0x080110a3
 8011034:	0801135f 	.word	0x0801135f
 8011038:	080110ad 	.word	0x080110ad
 801103c:	080110ef 	.word	0x080110ef
 8011040:	08011131 	.word	0x08011131
 8011044:	08011173 	.word	0x08011173
 8011048:	080111b5 	.word	0x080111b5
 801104c:	080111f7 	.word	0x080111f7
 8011050:	08011239 	.word	0x08011239
 8011054:	0801127b 	.word	0x0801127b
 8011058:	080112bd 	.word	0x080112bd
 801105c:	08011311 	.word	0x08011311
    {
        case ' ':
            lcd_write_line(SEG_A, 0);
 8011060:	2100      	movs	r1, #0
 8011062:	2000      	movs	r0, #0
 8011064:	f000 ffb0 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011068:	2100      	movs	r1, #0
 801106a:	2001      	movs	r0, #1
 801106c:	f000 ffac 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 8011070:	2100      	movs	r1, #0
 8011072:	2002      	movs	r0, #2
 8011074:	f000 ffa8 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011078:	2100      	movs	r1, #0
 801107a:	2003      	movs	r0, #3
 801107c:	f000 ffa4 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 8011080:	2100      	movs	r1, #0
 8011082:	2004      	movs	r0, #4
 8011084:	f000 ffa0 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 8011088:	2100      	movs	r1, #0
 801108a:	2005      	movs	r0, #5
 801108c:	f000 ff9c 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 8011090:	2100      	movs	r1, #0
 8011092:	2006      	movs	r0, #6
 8011094:	f000 ff98 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011098:	2100      	movs	r1, #0
 801109a:	2007      	movs	r0, #7
 801109c:	f000 ff94 	bl	8011fc8 <lcd_write_line>
        break;
 80110a0:	e15e      	b.n	8011360 <lcd_put_char+0x3f4>
        case '.':
            lcd_write_line(SEG_H, 1);
 80110a2:	2101      	movs	r1, #1
 80110a4:	2007      	movs	r0, #7
 80110a6:	f000 ff8f 	bl	8011fc8 <lcd_write_line>
        break;
 80110aa:	e159      	b.n	8011360 <lcd_put_char+0x3f4>
        case '0':
            lcd_write_line(SEG_A, 1);
 80110ac:	2101      	movs	r1, #1
 80110ae:	2000      	movs	r0, #0
 80110b0:	f000 ff8a 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80110b4:	2101      	movs	r1, #1
 80110b6:	2001      	movs	r0, #1
 80110b8:	f000 ff86 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80110bc:	2101      	movs	r1, #1
 80110be:	2002      	movs	r0, #2
 80110c0:	f000 ff82 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 80110c4:	2100      	movs	r1, #0
 80110c6:	2003      	movs	r0, #3
 80110c8:	f000 ff7e 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80110cc:	2101      	movs	r1, #1
 80110ce:	2004      	movs	r0, #4
 80110d0:	f000 ff7a 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80110d4:	2101      	movs	r1, #1
 80110d6:	2005      	movs	r0, #5
 80110d8:	f000 ff76 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80110dc:	2101      	movs	r1, #1
 80110de:	2006      	movs	r0, #6
 80110e0:	f000 ff72 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80110e4:	2100      	movs	r1, #0
 80110e6:	2007      	movs	r0, #7
 80110e8:	f000 ff6e 	bl	8011fc8 <lcd_write_line>
        break;
 80110ec:	e138      	b.n	8011360 <lcd_put_char+0x3f4>
        case '1':
            lcd_write_line(SEG_A, 0);
 80110ee:	2100      	movs	r1, #0
 80110f0:	2000      	movs	r0, #0
 80110f2:	f000 ff69 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80110f6:	2100      	movs	r1, #0
 80110f8:	2001      	movs	r0, #1
 80110fa:	f000 ff65 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80110fe:	2101      	movs	r1, #1
 8011100:	2002      	movs	r0, #2
 8011102:	f000 ff61 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011106:	2100      	movs	r1, #0
 8011108:	2003      	movs	r0, #3
 801110a:	f000 ff5d 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801110e:	2100      	movs	r1, #0
 8011110:	2004      	movs	r0, #4
 8011112:	f000 ff59 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011116:	2101      	movs	r1, #1
 8011118:	2005      	movs	r0, #5
 801111a:	f000 ff55 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 801111e:	2100      	movs	r1, #0
 8011120:	2006      	movs	r0, #6
 8011122:	f000 ff51 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011126:	2100      	movs	r1, #0
 8011128:	2007      	movs	r0, #7
 801112a:	f000 ff4d 	bl	8011fc8 <lcd_write_line>
        break;
 801112e:	e117      	b.n	8011360 <lcd_put_char+0x3f4>
        case '2':
            lcd_write_line(SEG_A, 1);
 8011130:	2101      	movs	r1, #1
 8011132:	2000      	movs	r0, #0
 8011134:	f000 ff48 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011138:	2101      	movs	r1, #1
 801113a:	2001      	movs	r0, #1
 801113c:	f000 ff44 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 8011140:	2100      	movs	r1, #0
 8011142:	2002      	movs	r0, #2
 8011144:	f000 ff40 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011148:	2101      	movs	r1, #1
 801114a:	2003      	movs	r0, #3
 801114c:	f000 ff3c 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 8011150:	2100      	movs	r1, #0
 8011152:	2004      	movs	r0, #4
 8011154:	f000 ff38 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011158:	2101      	movs	r1, #1
 801115a:	2005      	movs	r0, #5
 801115c:	f000 ff34 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011160:	2101      	movs	r1, #1
 8011162:	2006      	movs	r0, #6
 8011164:	f000 ff30 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011168:	2100      	movs	r1, #0
 801116a:	2007      	movs	r0, #7
 801116c:	f000 ff2c 	bl	8011fc8 <lcd_write_line>
        break;
 8011170:	e0f6      	b.n	8011360 <lcd_put_char+0x3f4>
        case '3':
            lcd_write_line(SEG_A, 1);
 8011172:	2101      	movs	r1, #1
 8011174:	2000      	movs	r0, #0
 8011176:	f000 ff27 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 801117a:	2100      	movs	r1, #0
 801117c:	2001      	movs	r0, #1
 801117e:	f000 ff23 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011182:	2101      	movs	r1, #1
 8011184:	2002      	movs	r0, #2
 8011186:	f000 ff1f 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 801118a:	2101      	movs	r1, #1
 801118c:	2003      	movs	r0, #3
 801118e:	f000 ff1b 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 8011192:	2100      	movs	r1, #0
 8011194:	2004      	movs	r0, #4
 8011196:	f000 ff17 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 801119a:	2101      	movs	r1, #1
 801119c:	2005      	movs	r0, #5
 801119e:	f000 ff13 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80111a2:	2101      	movs	r1, #1
 80111a4:	2006      	movs	r0, #6
 80111a6:	f000 ff0f 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80111aa:	2100      	movs	r1, #0
 80111ac:	2007      	movs	r0, #7
 80111ae:	f000 ff0b 	bl	8011fc8 <lcd_write_line>
        break;
 80111b2:	e0d5      	b.n	8011360 <lcd_put_char+0x3f4>
        case '4':
            lcd_write_line(SEG_A, 0);
 80111b4:	2100      	movs	r1, #0
 80111b6:	2000      	movs	r0, #0
 80111b8:	f000 ff06 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80111bc:	2100      	movs	r1, #0
 80111be:	2001      	movs	r0, #1
 80111c0:	f000 ff02 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80111c4:	2101      	movs	r1, #1
 80111c6:	2002      	movs	r0, #2
 80111c8:	f000 fefe 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80111cc:	2101      	movs	r1, #1
 80111ce:	2003      	movs	r0, #3
 80111d0:	f000 fefa 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80111d4:	2101      	movs	r1, #1
 80111d6:	2004      	movs	r0, #4
 80111d8:	f000 fef6 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80111dc:	2101      	movs	r1, #1
 80111de:	2005      	movs	r0, #5
 80111e0:	f000 fef2 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 80111e4:	2100      	movs	r1, #0
 80111e6:	2006      	movs	r0, #6
 80111e8:	f000 feee 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80111ec:	2100      	movs	r1, #0
 80111ee:	2007      	movs	r0, #7
 80111f0:	f000 feea 	bl	8011fc8 <lcd_write_line>
        break;
 80111f4:	e0b4      	b.n	8011360 <lcd_put_char+0x3f4>
        case '5':
            lcd_write_line(SEG_A, 1);
 80111f6:	2101      	movs	r1, #1
 80111f8:	2000      	movs	r0, #0
 80111fa:	f000 fee5 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80111fe:	2100      	movs	r1, #0
 8011200:	2001      	movs	r0, #1
 8011202:	f000 fee1 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011206:	2101      	movs	r1, #1
 8011208:	2002      	movs	r0, #2
 801120a:	f000 fedd 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 801120e:	2101      	movs	r1, #1
 8011210:	2003      	movs	r0, #3
 8011212:	f000 fed9 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011216:	2101      	movs	r1, #1
 8011218:	2004      	movs	r0, #4
 801121a:	f000 fed5 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 801121e:	2100      	movs	r1, #0
 8011220:	2005      	movs	r0, #5
 8011222:	f000 fed1 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011226:	2101      	movs	r1, #1
 8011228:	2006      	movs	r0, #6
 801122a:	f000 fecd 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801122e:	2100      	movs	r1, #0
 8011230:	2007      	movs	r0, #7
 8011232:	f000 fec9 	bl	8011fc8 <lcd_write_line>
        break;
 8011236:	e093      	b.n	8011360 <lcd_put_char+0x3f4>
        case '6':
            lcd_write_line(SEG_A, 1);
 8011238:	2101      	movs	r1, #1
 801123a:	2000      	movs	r0, #0
 801123c:	f000 fec4 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011240:	2101      	movs	r1, #1
 8011242:	2001      	movs	r0, #1
 8011244:	f000 fec0 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011248:	2101      	movs	r1, #1
 801124a:	2002      	movs	r0, #2
 801124c:	f000 febc 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011250:	2101      	movs	r1, #1
 8011252:	2003      	movs	r0, #3
 8011254:	f000 feb8 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011258:	2101      	movs	r1, #1
 801125a:	2004      	movs	r0, #4
 801125c:	f000 feb4 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 8011260:	2100      	movs	r1, #0
 8011262:	2005      	movs	r0, #5
 8011264:	f000 feb0 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011268:	2101      	movs	r1, #1
 801126a:	2006      	movs	r0, #6
 801126c:	f000 feac 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011270:	2100      	movs	r1, #0
 8011272:	2007      	movs	r0, #7
 8011274:	f000 fea8 	bl	8011fc8 <lcd_write_line>
        break;
 8011278:	e072      	b.n	8011360 <lcd_put_char+0x3f4>
        case '7':
            lcd_write_line(SEG_A, 0);
 801127a:	2100      	movs	r1, #0
 801127c:	2000      	movs	r0, #0
 801127e:	f000 fea3 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011282:	2100      	movs	r1, #0
 8011284:	2001      	movs	r0, #1
 8011286:	f000 fe9f 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801128a:	2101      	movs	r1, #1
 801128c:	2002      	movs	r0, #2
 801128e:	f000 fe9b 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011292:	2100      	movs	r1, #0
 8011294:	2003      	movs	r0, #3
 8011296:	f000 fe97 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801129a:	2100      	movs	r1, #0
 801129c:	2004      	movs	r0, #4
 801129e:	f000 fe93 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80112a2:	2101      	movs	r1, #1
 80112a4:	2005      	movs	r0, #5
 80112a6:	f000 fe8f 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80112aa:	2101      	movs	r1, #1
 80112ac:	2006      	movs	r0, #6
 80112ae:	f000 fe8b 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80112b2:	2100      	movs	r1, #0
 80112b4:	2007      	movs	r0, #7
 80112b6:	f000 fe87 	bl	8011fc8 <lcd_write_line>
        break;
 80112ba:	e051      	b.n	8011360 <lcd_put_char+0x3f4>
        case '8':
            lcd_write_line(SEG_A, 1);
 80112bc:	2101      	movs	r1, #1
 80112be:	2000      	movs	r0, #0
 80112c0:	f000 fe82 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80112c4:	2101      	movs	r1, #1
 80112c6:	2001      	movs	r0, #1
 80112c8:	f000 fe7e 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80112cc:	2101      	movs	r1, #1
 80112ce:	2002      	movs	r0, #2
 80112d0:	f000 fe7a 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80112d4:	2101      	movs	r1, #1
 80112d6:	2003      	movs	r0, #3
 80112d8:	f000 fe76 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80112dc:	2101      	movs	r1, #1
 80112de:	2004      	movs	r0, #4
 80112e0:	f000 fe72 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80112e4:	2101      	movs	r1, #1
 80112e6:	2005      	movs	r0, #5
 80112e8:	f000 fe6e 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80112ec:	2101      	movs	r1, #1
 80112ee:	2006      	movs	r0, #6
 80112f0:	f000 fe6a 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80112f4:	2100      	movs	r1, #0
 80112f6:	2007      	movs	r0, #7
 80112f8:	f000 fe66 	bl	8011fc8 <lcd_write_line>
        break;
 80112fc:	e030      	b.n	8011360 <lcd_put_char+0x3f4>
 80112fe:	bf00      	nop
 8011300:	20001d09 	.word	0x20001d09
 8011304:	20001db8 	.word	0x20001db8
 8011308:	20001cf8 	.word	0x20001cf8
 801130c:	20001d08 	.word	0x20001d08
        case '9':
            lcd_write_line(SEG_A, 0);
 8011310:	2100      	movs	r1, #0
 8011312:	2000      	movs	r0, #0
 8011314:	f000 fe58 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011318:	2100      	movs	r1, #0
 801131a:	2001      	movs	r0, #1
 801131c:	f000 fe54 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011320:	2101      	movs	r1, #1
 8011322:	2002      	movs	r0, #2
 8011324:	f000 fe50 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011328:	2101      	movs	r1, #1
 801132a:	2003      	movs	r0, #3
 801132c:	f000 fe4c 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011330:	2101      	movs	r1, #1
 8011332:	2004      	movs	r0, #4
 8011334:	f000 fe48 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011338:	2101      	movs	r1, #1
 801133a:	2005      	movs	r0, #5
 801133c:	f000 fe44 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011340:	2101      	movs	r1, #1
 8011342:	2006      	movs	r0, #6
 8011344:	f000 fe40 	bl	8011fc8 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011348:	2100      	movs	r1, #0
 801134a:	2007      	movs	r0, #7
 801134c:	f000 fe3c 	bl	8011fc8 <lcd_write_line>
        break;
 8011350:	e006      	b.n	8011360 <lcd_put_char+0x3f4>
            return;
 8011352:	bf00      	nop
 8011354:	e004      	b.n	8011360 <lcd_put_char+0x3f4>
                return;
 8011356:	bf00      	nop
 8011358:	e002      	b.n	8011360 <lcd_put_char+0x3f4>
                return;
 801135a:	bf00      	nop
 801135c:	e000      	b.n	8011360 <lcd_put_char+0x3f4>
        default:
        break;
 801135e:	bf00      	nop
    }
}
 8011360:	3708      	adds	r7, #8
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}
 8011366:	bf00      	nop

08011368 <lcd_refresh>:
 * enviar en dicho buffer y luego escribir todo junto.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_refresh()
{
 8011368:	b580      	push	{r7, lr}
 801136a:	af00      	add	r7, sp, #0
    pcf8553_dump();
 801136c:	f000 ff6c 	bl	8012248 <pcf8553_dump>
}
 8011370:	bf00      	nop
 8011372:	bd80      	pop	{r7, pc}

08011374 <lcd_set_point>:
 * @brief Función que escribe un punto en específico en la pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_set_point(rows_t line, point_t point)
{
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
 801137a:	4603      	mov	r3, r0
 801137c:	460a      	mov	r2, r1
 801137e:	71fb      	strb	r3, [r7, #7]
 8011380:	4613      	mov	r3, r2
 8011382:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8011384:	79fb      	ldrb	r3, [r7, #7]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d14c      	bne.n	8011424 <lcd_set_point+0xb0>
    {
        switch (point)
 801138a:	79bb      	ldrb	r3, [r7, #6]
 801138c:	2b06      	cmp	r3, #6
 801138e:	f200 808f 	bhi.w	80114b0 <lcd_set_point+0x13c>
 8011392:	a201      	add	r2, pc, #4	; (adr r2, 8011398 <lcd_set_point+0x24>)
 8011394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011398:	080113b5 	.word	0x080113b5
 801139c:	080113c5 	.word	0x080113c5
 80113a0:	080113d5 	.word	0x080113d5
 80113a4:	080113e5 	.word	0x080113e5
 80113a8:	080113f5 	.word	0x080113f5
 80113ac:	08011405 	.word	0x08011405
 80113b0:	08011415 	.word	0x08011415
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_7);
 80113b4:	4b44      	ldr	r3, [pc, #272]	; (80114c8 <lcd_set_point+0x154>)
 80113b6:	79db      	ldrb	r3, [r3, #7]
 80113b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80113bc:	b2da      	uxtb	r2, r3
 80113be:	4b42      	ldr	r3, [pc, #264]	; (80114c8 <lcd_set_point+0x154>)
 80113c0:	71da      	strb	r2, [r3, #7]
            break;
 80113c2:	e07a      	b.n	80114ba <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] |= (1 << BIT_1);
 80113c4:	4b40      	ldr	r3, [pc, #256]	; (80114c8 <lcd_set_point+0x154>)
 80113c6:	7a1b      	ldrb	r3, [r3, #8]
 80113c8:	f043 0302 	orr.w	r3, r3, #2
 80113cc:	b2da      	uxtb	r2, r3
 80113ce:	4b3e      	ldr	r3, [pc, #248]	; (80114c8 <lcd_set_point+0x154>)
 80113d0:	721a      	strb	r2, [r3, #8]
            break;
 80113d2:	e072      	b.n	80114ba <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] |= (1 << BIT_3);
 80113d4:	4b3c      	ldr	r3, [pc, #240]	; (80114c8 <lcd_set_point+0x154>)
 80113d6:	7a1b      	ldrb	r3, [r3, #8]
 80113d8:	f043 0308 	orr.w	r3, r3, #8
 80113dc:	b2da      	uxtb	r2, r3
 80113de:	4b3a      	ldr	r3, [pc, #232]	; (80114c8 <lcd_set_point+0x154>)
 80113e0:	721a      	strb	r2, [r3, #8]
            break;
 80113e2:	e06a      	b.n	80114ba <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] |= (1 << BIT_5);
 80113e4:	4b38      	ldr	r3, [pc, #224]	; (80114c8 <lcd_set_point+0x154>)
 80113e6:	7a1b      	ldrb	r3, [r3, #8]
 80113e8:	f043 0320 	orr.w	r3, r3, #32
 80113ec:	b2da      	uxtb	r2, r3
 80113ee:	4b36      	ldr	r3, [pc, #216]	; (80114c8 <lcd_set_point+0x154>)
 80113f0:	721a      	strb	r2, [r3, #8]
            break;
 80113f2:	e062      	b.n	80114ba <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] |= (1 << BIT_7);
 80113f4:	4b34      	ldr	r3, [pc, #208]	; (80114c8 <lcd_set_point+0x154>)
 80113f6:	7a1b      	ldrb	r3, [r3, #8]
 80113f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80113fc:	b2da      	uxtb	r2, r3
 80113fe:	4b32      	ldr	r3, [pc, #200]	; (80114c8 <lcd_set_point+0x154>)
 8011400:	721a      	strb	r2, [r3, #8]
            break;
 8011402:	e05a      	b.n	80114ba <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] |= (1 << BIT_1);
 8011404:	4b30      	ldr	r3, [pc, #192]	; (80114c8 <lcd_set_point+0x154>)
 8011406:	7a5b      	ldrb	r3, [r3, #9]
 8011408:	f043 0302 	orr.w	r3, r3, #2
 801140c:	b2da      	uxtb	r2, r3
 801140e:	4b2e      	ldr	r3, [pc, #184]	; (80114c8 <lcd_set_point+0x154>)
 8011410:	725a      	strb	r2, [r3, #9]
            break;
 8011412:	e052      	b.n	80114ba <lcd_set_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] |= (1 << BIT_3);
 8011414:	4b2c      	ldr	r3, [pc, #176]	; (80114c8 <lcd_set_point+0x154>)
 8011416:	7a5b      	ldrb	r3, [r3, #9]
 8011418:	f043 0308 	orr.w	r3, r3, #8
 801141c:	b2da      	uxtb	r2, r3
 801141e:	4b2a      	ldr	r3, [pc, #168]	; (80114c8 <lcd_set_point+0x154>)
 8011420:	725a      	strb	r2, [r3, #9]
            break;
 8011422:	e04a      	b.n	80114ba <lcd_set_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8011424:	79fb      	ldrb	r3, [r7, #7]
 8011426:	2b01      	cmp	r3, #1
 8011428:	d144      	bne.n	80114b4 <lcd_set_point+0x140>
    {
        switch (point)
 801142a:	79bb      	ldrb	r3, [r7, #6]
 801142c:	2b05      	cmp	r3, #5
 801142e:	d843      	bhi.n	80114b8 <lcd_set_point+0x144>
 8011430:	a201      	add	r2, pc, #4	; (adr r2, 8011438 <lcd_set_point+0xc4>)
 8011432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011436:	bf00      	nop
 8011438:	08011451 	.word	0x08011451
 801143c:	08011461 	.word	0x08011461
 8011440:	08011471 	.word	0x08011471
 8011444:	08011481 	.word	0x08011481
 8011448:	08011491 	.word	0x08011491
 801144c:	080114a1 	.word	0x080114a1
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_2);
 8011450:	4b1d      	ldr	r3, [pc, #116]	; (80114c8 <lcd_set_point+0x154>)
 8011452:	79db      	ldrb	r3, [r3, #7]
 8011454:	f043 0304 	orr.w	r3, r3, #4
 8011458:	b2da      	uxtb	r2, r3
 801145a:	4b1b      	ldr	r3, [pc, #108]	; (80114c8 <lcd_set_point+0x154>)
 801145c:	71da      	strb	r2, [r3, #7]
            break;
 801145e:	e02c      	b.n	80114ba <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] |= (1 << BIT_0);
 8011460:	4b19      	ldr	r3, [pc, #100]	; (80114c8 <lcd_set_point+0x154>)
 8011462:	79db      	ldrb	r3, [r3, #7]
 8011464:	f043 0301 	orr.w	r3, r3, #1
 8011468:	b2da      	uxtb	r2, r3
 801146a:	4b17      	ldr	r3, [pc, #92]	; (80114c8 <lcd_set_point+0x154>)
 801146c:	71da      	strb	r2, [r3, #7]
            break;
 801146e:	e024      	b.n	80114ba <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] |= (1 << BIT_6);
 8011470:	4b15      	ldr	r3, [pc, #84]	; (80114c8 <lcd_set_point+0x154>)
 8011472:	799b      	ldrb	r3, [r3, #6]
 8011474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011478:	b2da      	uxtb	r2, r3
 801147a:	4b13      	ldr	r3, [pc, #76]	; (80114c8 <lcd_set_point+0x154>)
 801147c:	719a      	strb	r2, [r3, #6]
            break;
 801147e:	e01c      	b.n	80114ba <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] |= (1 << BIT_4);
 8011480:	4b11      	ldr	r3, [pc, #68]	; (80114c8 <lcd_set_point+0x154>)
 8011482:	799b      	ldrb	r3, [r3, #6]
 8011484:	f043 0310 	orr.w	r3, r3, #16
 8011488:	b2da      	uxtb	r2, r3
 801148a:	4b0f      	ldr	r3, [pc, #60]	; (80114c8 <lcd_set_point+0x154>)
 801148c:	719a      	strb	r2, [r3, #6]
            break;
 801148e:	e014      	b.n	80114ba <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] |= (1 << BIT_2);
 8011490:	4b0d      	ldr	r3, [pc, #52]	; (80114c8 <lcd_set_point+0x154>)
 8011492:	799b      	ldrb	r3, [r3, #6]
 8011494:	f043 0304 	orr.w	r3, r3, #4
 8011498:	b2da      	uxtb	r2, r3
 801149a:	4b0b      	ldr	r3, [pc, #44]	; (80114c8 <lcd_set_point+0x154>)
 801149c:	719a      	strb	r2, [r3, #6]
            break;
 801149e:	e00c      	b.n	80114ba <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] |= (1 << BIT_0);
 80114a0:	4b09      	ldr	r3, [pc, #36]	; (80114c8 <lcd_set_point+0x154>)
 80114a2:	799b      	ldrb	r3, [r3, #6]
 80114a4:	f043 0301 	orr.w	r3, r3, #1
 80114a8:	b2da      	uxtb	r2, r3
 80114aa:	4b07      	ldr	r3, [pc, #28]	; (80114c8 <lcd_set_point+0x154>)
 80114ac:	719a      	strb	r2, [r3, #6]
            break;
 80114ae:	e004      	b.n	80114ba <lcd_set_point+0x146>
            break;
 80114b0:	bf00      	nop
 80114b2:	e002      	b.n	80114ba <lcd_set_point+0x146>
            default:
            break;
        }
    }
 80114b4:	bf00      	nop
 80114b6:	e000      	b.n	80114ba <lcd_set_point+0x146>
            break;
 80114b8:	bf00      	nop
}
 80114ba:	bf00      	nop
 80114bc:	370c      	adds	r7, #12
 80114be:	46bd      	mov	sp, r7
 80114c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c4:	4770      	bx	lr
 80114c6:	bf00      	nop
 80114c8:	20001d9c 	.word	0x20001d9c

080114cc <lcd_set_symbol>:
 * @brief Función que escribe un símbolo en específico en la pantalla.
 * @param Enumeraciones symbols_t y blink_t de lcd.h
 * @retval None
 */
void lcd_set_symbol(symbols_t symbol, blink_t blink_speed)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b082      	sub	sp, #8
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	4603      	mov	r3, r0
 80114d4:	460a      	mov	r2, r1
 80114d6:	71fb      	strb	r3, [r7, #7]
 80114d8:	4613      	mov	r3, r2
 80114da:	71bb      	strb	r3, [r7, #6]
    switch (symbol)
 80114dc:	79fb      	ldrb	r3, [r7, #7]
 80114de:	2b15      	cmp	r3, #21
 80114e0:	f200 832b 	bhi.w	8011b3a <lcd_set_symbol+0x66e>
 80114e4:	a201      	add	r2, pc, #4	; (adr r2, 80114ec <lcd_set_symbol+0x20>)
 80114e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ea:	bf00      	nop
 80114ec:	08011555 	.word	0x08011555
 80114f0:	08011545 	.word	0x08011545
 80114f4:	08011575 	.word	0x08011575
 80114f8:	08011585 	.word	0x08011585
 80114fc:	08011565 	.word	0x08011565
 8011500:	080115b5 	.word	0x080115b5
 8011504:	080115a5 	.word	0x080115a5
 8011508:	080115c5 	.word	0x080115c5
 801150c:	08011595 	.word	0x08011595
 8011510:	080115d5 	.word	0x080115d5
 8011514:	08011663 	.word	0x08011663
 8011518:	08011791 	.word	0x08011791
 801151c:	080117d9 	.word	0x080117d9
 8011520:	08011867 	.word	0x08011867
 8011524:	080118cb 	.word	0x080118cb
 8011528:	0801192f 	.word	0x0801192f
 801152c:	08011993 	.word	0x08011993
 8011530:	080119cd 	.word	0x080119cd
 8011534:	080119f1 	.word	0x080119f1
 8011538:	08011a47 	.word	0x08011a47
 801153c:	08011a9d 	.word	0x08011a9d
 8011540:	08011ae5 	.word	0x08011ae5
    {
        case POWER:
            g_lcd_map[REG_2] |= (1 << BIT_5);
 8011544:	4b91      	ldr	r3, [pc, #580]	; (801178c <lcd_set_symbol+0x2c0>)
 8011546:	789b      	ldrb	r3, [r3, #2]
 8011548:	f043 0320 	orr.w	r3, r3, #32
 801154c:	b2da      	uxtb	r2, r3
 801154e:	4b8f      	ldr	r3, [pc, #572]	; (801178c <lcd_set_symbol+0x2c0>)
 8011550:	709a      	strb	r2, [r3, #2]
        break;
 8011552:	e2f3      	b.n	8011b3c <lcd_set_symbol+0x670>
        case BATTERY:
            g_lcd_map[REG_7] |= (1 << BIT_5);
 8011554:	4b8d      	ldr	r3, [pc, #564]	; (801178c <lcd_set_symbol+0x2c0>)
 8011556:	79db      	ldrb	r3, [r3, #7]
 8011558:	f043 0320 	orr.w	r3, r3, #32
 801155c:	b2da      	uxtb	r2, r3
 801155e:	4b8b      	ldr	r3, [pc, #556]	; (801178c <lcd_set_symbol+0x2c0>)
 8011560:	71da      	strb	r2, [r3, #7]
        break;
 8011562:	e2eb      	b.n	8011b3c <lcd_set_symbol+0x670>
        case BATCH:
            g_lcd_map[REG_12] |= (1 << BIT_5);
 8011564:	4b89      	ldr	r3, [pc, #548]	; (801178c <lcd_set_symbol+0x2c0>)
 8011566:	7b1b      	ldrb	r3, [r3, #12]
 8011568:	f043 0320 	orr.w	r3, r3, #32
 801156c:	b2da      	uxtb	r2, r3
 801156e:	4b87      	ldr	r3, [pc, #540]	; (801178c <lcd_set_symbol+0x2c0>)
 8011570:	731a      	strb	r2, [r3, #12]
        break;
 8011572:	e2e3      	b.n	8011b3c <lcd_set_symbol+0x670>
        case RATE:
            g_lcd_map[REG_17] |= (1 << BIT_5);
 8011574:	4b85      	ldr	r3, [pc, #532]	; (801178c <lcd_set_symbol+0x2c0>)
 8011576:	7c5b      	ldrb	r3, [r3, #17]
 8011578:	f043 0320 	orr.w	r3, r3, #32
 801157c:	b2da      	uxtb	r2, r3
 801157e:	4b83      	ldr	r3, [pc, #524]	; (801178c <lcd_set_symbol+0x2c0>)
 8011580:	745a      	strb	r2, [r3, #17]
        break;
 8011582:	e2db      	b.n	8011b3c <lcd_set_symbol+0x670>
        case E:
            g_lcd_map[REG_2] |= (1 << BIT_4);
 8011584:	4b81      	ldr	r3, [pc, #516]	; (801178c <lcd_set_symbol+0x2c0>)
 8011586:	789b      	ldrb	r3, [r3, #2]
 8011588:	f043 0310 	orr.w	r3, r3, #16
 801158c:	b2da      	uxtb	r2, r3
 801158e:	4b7f      	ldr	r3, [pc, #508]	; (801178c <lcd_set_symbol+0x2c0>)
 8011590:	709a      	strb	r2, [r3, #2]
        break;
 8011592:	e2d3      	b.n	8011b3c <lcd_set_symbol+0x670>
        case POINT:
            g_lcd_map[REG_7] |= (1 << BIT_4);
 8011594:	4b7d      	ldr	r3, [pc, #500]	; (801178c <lcd_set_symbol+0x2c0>)
 8011596:	79db      	ldrb	r3, [r3, #7]
 8011598:	f043 0310 	orr.w	r3, r3, #16
 801159c:	b2da      	uxtb	r2, r3
 801159e:	4b7b      	ldr	r3, [pc, #492]	; (801178c <lcd_set_symbol+0x2c0>)
 80115a0:	71da      	strb	r2, [r3, #7]
        break;
 80115a2:	e2cb      	b.n	8011b3c <lcd_set_symbol+0x670>
        case ACM:
            g_lcd_map[REG_12] |= (1 << BIT_4);
 80115a4:	4b79      	ldr	r3, [pc, #484]	; (801178c <lcd_set_symbol+0x2c0>)
 80115a6:	7b1b      	ldrb	r3, [r3, #12]
 80115a8:	f043 0310 	orr.w	r3, r3, #16
 80115ac:	b2da      	uxtb	r2, r3
 80115ae:	4b77      	ldr	r3, [pc, #476]	; (801178c <lcd_set_symbol+0x2c0>)
 80115b0:	731a      	strb	r2, [r3, #12]
        break;
 80115b2:	e2c3      	b.n	8011b3c <lcd_set_symbol+0x670>
        case TTL:
            g_lcd_map[REG_17] |= (1 << BIT_4);
 80115b4:	4b75      	ldr	r3, [pc, #468]	; (801178c <lcd_set_symbol+0x2c0>)
 80115b6:	7c5b      	ldrb	r3, [r3, #17]
 80115b8:	f043 0310 	orr.w	r3, r3, #16
 80115bc:	b2da      	uxtb	r2, r3
 80115be:	4b73      	ldr	r3, [pc, #460]	; (801178c <lcd_set_symbol+0x2c0>)
 80115c0:	745a      	strb	r2, [r3, #17]
        break;
 80115c2:	e2bb      	b.n	8011b3c <lcd_set_symbol+0x670>
        case BACKSLASH:
            g_lcd_map[REG_10] |= (1 << BIT_1);
 80115c4:	4b71      	ldr	r3, [pc, #452]	; (801178c <lcd_set_symbol+0x2c0>)
 80115c6:	7a9b      	ldrb	r3, [r3, #10]
 80115c8:	f043 0302 	orr.w	r3, r3, #2
 80115cc:	b2da      	uxtb	r2, r3
 80115ce:	4b6f      	ldr	r3, [pc, #444]	; (801178c <lcd_set_symbol+0x2c0>)
 80115d0:	729a      	strb	r2, [r3, #10]
        break;
 80115d2:	e2b3      	b.n	8011b3c <lcd_set_symbol+0x670>
        case VE:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80115d4:	4b6d      	ldr	r3, [pc, #436]	; (801178c <lcd_set_symbol+0x2c0>)
 80115d6:	7bdb      	ldrb	r3, [r3, #15]
 80115d8:	f043 0320 	orr.w	r3, r3, #32
 80115dc:	b2da      	uxtb	r2, r3
 80115de:	4b6b      	ldr	r3, [pc, #428]	; (801178c <lcd_set_symbol+0x2c0>)
 80115e0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 80115e2:	4b6a      	ldr	r3, [pc, #424]	; (801178c <lcd_set_symbol+0x2c0>)
 80115e4:	7bdb      	ldrb	r3, [r3, #15]
 80115e6:	f043 0310 	orr.w	r3, r3, #16
 80115ea:	b2da      	uxtb	r2, r3
 80115ec:	4b67      	ldr	r3, [pc, #412]	; (801178c <lcd_set_symbol+0x2c0>)
 80115ee:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80115f0:	4b66      	ldr	r3, [pc, #408]	; (801178c <lcd_set_symbol+0x2c0>)
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	f043 0320 	orr.w	r3, r3, #32
 80115f8:	b2da      	uxtb	r2, r3
 80115fa:	4b64      	ldr	r3, [pc, #400]	; (801178c <lcd_set_symbol+0x2c0>)
 80115fc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_2);
 80115fe:	4b63      	ldr	r3, [pc, #396]	; (801178c <lcd_set_symbol+0x2c0>)
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	f043 0304 	orr.w	r3, r3, #4
 8011606:	b2da      	uxtb	r2, r3
 8011608:	4b60      	ldr	r3, [pc, #384]	; (801178c <lcd_set_symbol+0x2c0>)
 801160a:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 801160c:	4b5f      	ldr	r3, [pc, #380]	; (801178c <lcd_set_symbol+0x2c0>)
 801160e:	7b9b      	ldrb	r3, [r3, #14]
 8011610:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011614:	b2da      	uxtb	r2, r3
 8011616:	4b5d      	ldr	r3, [pc, #372]	; (801178c <lcd_set_symbol+0x2c0>)
 8011618:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 801161a:	4b5c      	ldr	r3, [pc, #368]	; (801178c <lcd_set_symbol+0x2c0>)
 801161c:	7bdb      	ldrb	r3, [r3, #15]
 801161e:	f043 0302 	orr.w	r3, r3, #2
 8011622:	b2da      	uxtb	r2, r3
 8011624:	4b59      	ldr	r3, [pc, #356]	; (801178c <lcd_set_symbol+0x2c0>)
 8011626:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011628:	4b58      	ldr	r3, [pc, #352]	; (801178c <lcd_set_symbol+0x2c0>)
 801162a:	7cdb      	ldrb	r3, [r3, #19]
 801162c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011630:	b2da      	uxtb	r2, r3
 8011632:	4b56      	ldr	r3, [pc, #344]	; (801178c <lcd_set_symbol+0x2c0>)
 8011634:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011636:	4b55      	ldr	r3, [pc, #340]	; (801178c <lcd_set_symbol+0x2c0>)
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	f043 0301 	orr.w	r3, r3, #1
 801163e:	b2da      	uxtb	r2, r3
 8011640:	4b52      	ldr	r3, [pc, #328]	; (801178c <lcd_set_symbol+0x2c0>)
 8011642:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011644:	4b51      	ldr	r3, [pc, #324]	; (801178c <lcd_set_symbol+0x2c0>)
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	f043 0302 	orr.w	r3, r3, #2
 801164c:	b2da      	uxtb	r2, r3
 801164e:	4b4f      	ldr	r3, [pc, #316]	; (801178c <lcd_set_symbol+0x2c0>)
 8011650:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011652:	4b4e      	ldr	r3, [pc, #312]	; (801178c <lcd_set_symbol+0x2c0>)
 8011654:	795b      	ldrb	r3, [r3, #5]
 8011656:	f043 0302 	orr.w	r3, r3, #2
 801165a:	b2da      	uxtb	r2, r3
 801165c:	4b4b      	ldr	r3, [pc, #300]	; (801178c <lcd_set_symbol+0x2c0>)
 801165e:	715a      	strb	r2, [r3, #5]
        break;
 8011660:	e26c      	b.n	8011b3c <lcd_set_symbol+0x670>
        case PASS:
            g_lcd_map[REG_13] |= (1 << BIT_1);
 8011662:	4b4a      	ldr	r3, [pc, #296]	; (801178c <lcd_set_symbol+0x2c0>)
 8011664:	7b5b      	ldrb	r3, [r3, #13]
 8011666:	f043 0302 	orr.w	r3, r3, #2
 801166a:	b2da      	uxtb	r2, r3
 801166c:	4b47      	ldr	r3, [pc, #284]	; (801178c <lcd_set_symbol+0x2c0>)
 801166e:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_0);
 8011670:	4b46      	ldr	r3, [pc, #280]	; (801178c <lcd_set_symbol+0x2c0>)
 8011672:	7b5b      	ldrb	r3, [r3, #13]
 8011674:	f043 0301 	orr.w	r3, r3, #1
 8011678:	b2da      	uxtb	r2, r3
 801167a:	4b44      	ldr	r3, [pc, #272]	; (801178c <lcd_set_symbol+0x2c0>)
 801167c:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_1);
 801167e:	4b43      	ldr	r3, [pc, #268]	; (801178c <lcd_set_symbol+0x2c0>)
 8011680:	7c9b      	ldrb	r3, [r3, #18]
 8011682:	f043 0302 	orr.w	r3, r3, #2
 8011686:	b2da      	uxtb	r2, r3
 8011688:	4b40      	ldr	r3, [pc, #256]	; (801178c <lcd_set_symbol+0x2c0>)
 801168a:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_0);
 801168c:	4b3f      	ldr	r3, [pc, #252]	; (801178c <lcd_set_symbol+0x2c0>)
 801168e:	7c9b      	ldrb	r3, [r3, #18]
 8011690:	f043 0301 	orr.w	r3, r3, #1
 8011694:	b2da      	uxtb	r2, r3
 8011696:	4b3d      	ldr	r3, [pc, #244]	; (801178c <lcd_set_symbol+0x2c0>)
 8011698:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_0);
 801169a:	4b3c      	ldr	r3, [pc, #240]	; (801178c <lcd_set_symbol+0x2c0>)
 801169c:	78db      	ldrb	r3, [r3, #3]
 801169e:	f043 0301 	orr.w	r3, r3, #1
 80116a2:	b2da      	uxtb	r2, r3
 80116a4:	4b39      	ldr	r3, [pc, #228]	; (801178c <lcd_set_symbol+0x2c0>)
 80116a6:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_3);
 80116a8:	4b38      	ldr	r3, [pc, #224]	; (801178c <lcd_set_symbol+0x2c0>)
 80116aa:	7b5b      	ldrb	r3, [r3, #13]
 80116ac:	f043 0308 	orr.w	r3, r3, #8
 80116b0:	b2da      	uxtb	r2, r3
 80116b2:	4b36      	ldr	r3, [pc, #216]	; (801178c <lcd_set_symbol+0x2c0>)
 80116b4:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_2);
 80116b6:	4b35      	ldr	r3, [pc, #212]	; (801178c <lcd_set_symbol+0x2c0>)
 80116b8:	7b5b      	ldrb	r3, [r3, #13]
 80116ba:	f043 0304 	orr.w	r3, r3, #4
 80116be:	b2da      	uxtb	r2, r3
 80116c0:	4b32      	ldr	r3, [pc, #200]	; (801178c <lcd_set_symbol+0x2c0>)
 80116c2:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_3);
 80116c4:	4b31      	ldr	r3, [pc, #196]	; (801178c <lcd_set_symbol+0x2c0>)
 80116c6:	7c9b      	ldrb	r3, [r3, #18]
 80116c8:	f043 0308 	orr.w	r3, r3, #8
 80116cc:	b2da      	uxtb	r2, r3
 80116ce:	4b2f      	ldr	r3, [pc, #188]	; (801178c <lcd_set_symbol+0x2c0>)
 80116d0:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_2);
 80116d2:	4b2e      	ldr	r3, [pc, #184]	; (801178c <lcd_set_symbol+0x2c0>)
 80116d4:	7c9b      	ldrb	r3, [r3, #18]
 80116d6:	f043 0304 	orr.w	r3, r3, #4
 80116da:	b2da      	uxtb	r2, r3
 80116dc:	4b2b      	ldr	r3, [pc, #172]	; (801178c <lcd_set_symbol+0x2c0>)
 80116de:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_2);
 80116e0:	4b2a      	ldr	r3, [pc, #168]	; (801178c <lcd_set_symbol+0x2c0>)
 80116e2:	78db      	ldrb	r3, [r3, #3]
 80116e4:	f043 0304 	orr.w	r3, r3, #4
 80116e8:	b2da      	uxtb	r2, r3
 80116ea:	4b28      	ldr	r3, [pc, #160]	; (801178c <lcd_set_symbol+0x2c0>)
 80116ec:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_3] |= (1 << BIT_3);
 80116ee:	4b27      	ldr	r3, [pc, #156]	; (801178c <lcd_set_symbol+0x2c0>)
 80116f0:	78db      	ldrb	r3, [r3, #3]
 80116f2:	f043 0308 	orr.w	r3, r3, #8
 80116f6:	b2da      	uxtb	r2, r3
 80116f8:	4b24      	ldr	r3, [pc, #144]	; (801178c <lcd_set_symbol+0x2c0>)
 80116fa:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_5);
 80116fc:	4b23      	ldr	r3, [pc, #140]	; (801178c <lcd_set_symbol+0x2c0>)
 80116fe:	7b5b      	ldrb	r3, [r3, #13]
 8011700:	f043 0320 	orr.w	r3, r3, #32
 8011704:	b2da      	uxtb	r2, r3
 8011706:	4b21      	ldr	r3, [pc, #132]	; (801178c <lcd_set_symbol+0x2c0>)
 8011708:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_4);
 801170a:	4b20      	ldr	r3, [pc, #128]	; (801178c <lcd_set_symbol+0x2c0>)
 801170c:	7b5b      	ldrb	r3, [r3, #13]
 801170e:	f043 0310 	orr.w	r3, r3, #16
 8011712:	b2da      	uxtb	r2, r3
 8011714:	4b1d      	ldr	r3, [pc, #116]	; (801178c <lcd_set_symbol+0x2c0>)
 8011716:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_4);
 8011718:	4b1c      	ldr	r3, [pc, #112]	; (801178c <lcd_set_symbol+0x2c0>)
 801171a:	7c9b      	ldrb	r3, [r3, #18]
 801171c:	f043 0310 	orr.w	r3, r3, #16
 8011720:	b2da      	uxtb	r2, r3
 8011722:	4b1a      	ldr	r3, [pc, #104]	; (801178c <lcd_set_symbol+0x2c0>)
 8011724:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_5);
 8011726:	4b19      	ldr	r3, [pc, #100]	; (801178c <lcd_set_symbol+0x2c0>)
 8011728:	78db      	ldrb	r3, [r3, #3]
 801172a:	f043 0320 	orr.w	r3, r3, #32
 801172e:	b2da      	uxtb	r2, r3
 8011730:	4b16      	ldr	r3, [pc, #88]	; (801178c <lcd_set_symbol+0x2c0>)
 8011732:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_4);
 8011734:	4b15      	ldr	r3, [pc, #84]	; (801178c <lcd_set_symbol+0x2c0>)
 8011736:	7a1b      	ldrb	r3, [r3, #8]
 8011738:	f043 0310 	orr.w	r3, r3, #16
 801173c:	b2da      	uxtb	r2, r3
 801173e:	4b13      	ldr	r3, [pc, #76]	; (801178c <lcd_set_symbol+0x2c0>)
 8011740:	721a      	strb	r2, [r3, #8]

            g_lcd_map[REG_13] |= (1 << BIT_7);
 8011742:	4b12      	ldr	r3, [pc, #72]	; (801178c <lcd_set_symbol+0x2c0>)
 8011744:	7b5b      	ldrb	r3, [r3, #13]
 8011746:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801174a:	b2da      	uxtb	r2, r3
 801174c:	4b0f      	ldr	r3, [pc, #60]	; (801178c <lcd_set_symbol+0x2c0>)
 801174e:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_6);
 8011750:	4b0e      	ldr	r3, [pc, #56]	; (801178c <lcd_set_symbol+0x2c0>)
 8011752:	7b5b      	ldrb	r3, [r3, #13]
 8011754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011758:	b2da      	uxtb	r2, r3
 801175a:	4b0c      	ldr	r3, [pc, #48]	; (801178c <lcd_set_symbol+0x2c0>)
 801175c:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_6);
 801175e:	4b0b      	ldr	r3, [pc, #44]	; (801178c <lcd_set_symbol+0x2c0>)
 8011760:	7c9b      	ldrb	r3, [r3, #18]
 8011762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011766:	b2da      	uxtb	r2, r3
 8011768:	4b08      	ldr	r3, [pc, #32]	; (801178c <lcd_set_symbol+0x2c0>)
 801176a:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_7);
 801176c:	4b07      	ldr	r3, [pc, #28]	; (801178c <lcd_set_symbol+0x2c0>)
 801176e:	78db      	ldrb	r3, [r3, #3]
 8011770:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011774:	b2da      	uxtb	r2, r3
 8011776:	4b05      	ldr	r3, [pc, #20]	; (801178c <lcd_set_symbol+0x2c0>)
 8011778:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_6);
 801177a:	4b04      	ldr	r3, [pc, #16]	; (801178c <lcd_set_symbol+0x2c0>)
 801177c:	7a1b      	ldrb	r3, [r3, #8]
 801177e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011782:	b2da      	uxtb	r2, r3
 8011784:	4b01      	ldr	r3, [pc, #4]	; (801178c <lcd_set_symbol+0x2c0>)
 8011786:	721a      	strb	r2, [r3, #8]

        break;
 8011788:	e1d8      	b.n	8011b3c <lcd_set_symbol+0x670>
 801178a:	bf00      	nop
 801178c:	20001d9c 	.word	0x20001d9c
        case K:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011790:	4b96      	ldr	r3, [pc, #600]	; (80119ec <lcd_set_symbol+0x520>)
 8011792:	7bdb      	ldrb	r3, [r3, #15]
 8011794:	f043 0320 	orr.w	r3, r3, #32
 8011798:	b2da      	uxtb	r2, r3
 801179a:	4b94      	ldr	r3, [pc, #592]	; (80119ec <lcd_set_symbol+0x520>)
 801179c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 801179e:	4b93      	ldr	r3, [pc, #588]	; (80119ec <lcd_set_symbol+0x520>)
 80117a0:	7bdb      	ldrb	r3, [r3, #15]
 80117a2:	f043 0310 	orr.w	r3, r3, #16
 80117a6:	b2da      	uxtb	r2, r3
 80117a8:	4b90      	ldr	r3, [pc, #576]	; (80119ec <lcd_set_symbol+0x520>)
 80117aa:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 80117ac:	4b8f      	ldr	r3, [pc, #572]	; (80119ec <lcd_set_symbol+0x520>)
 80117ae:	7bdb      	ldrb	r3, [r3, #15]
 80117b0:	f043 0304 	orr.w	r3, r3, #4
 80117b4:	b2da      	uxtb	r2, r3
 80117b6:	4b8d      	ldr	r3, [pc, #564]	; (80119ec <lcd_set_symbol+0x520>)
 80117b8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80117ba:	4b8c      	ldr	r3, [pc, #560]	; (80119ec <lcd_set_symbol+0x520>)
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	f043 0320 	orr.w	r3, r3, #32
 80117c2:	b2da      	uxtb	r2, r3
 80117c4:	4b89      	ldr	r3, [pc, #548]	; (80119ec <lcd_set_symbol+0x520>)
 80117c6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 80117c8:	4b88      	ldr	r3, [pc, #544]	; (80119ec <lcd_set_symbol+0x520>)
 80117ca:	795b      	ldrb	r3, [r3, #5]
 80117cc:	f043 0310 	orr.w	r3, r3, #16
 80117d0:	b2da      	uxtb	r2, r3
 80117d2:	4b86      	ldr	r3, [pc, #536]	; (80119ec <lcd_set_symbol+0x520>)
 80117d4:	715a      	strb	r2, [r3, #5]
        break;
 80117d6:	e1b1      	b.n	8011b3c <lcd_set_symbol+0x670>
        case KO:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80117d8:	4b84      	ldr	r3, [pc, #528]	; (80119ec <lcd_set_symbol+0x520>)
 80117da:	7bdb      	ldrb	r3, [r3, #15]
 80117dc:	f043 0320 	orr.w	r3, r3, #32
 80117e0:	b2da      	uxtb	r2, r3
 80117e2:	4b82      	ldr	r3, [pc, #520]	; (80119ec <lcd_set_symbol+0x520>)
 80117e4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 80117e6:	4b81      	ldr	r3, [pc, #516]	; (80119ec <lcd_set_symbol+0x520>)
 80117e8:	7bdb      	ldrb	r3, [r3, #15]
 80117ea:	f043 0310 	orr.w	r3, r3, #16
 80117ee:	b2da      	uxtb	r2, r3
 80117f0:	4b7e      	ldr	r3, [pc, #504]	; (80119ec <lcd_set_symbol+0x520>)
 80117f2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 80117f4:	4b7d      	ldr	r3, [pc, #500]	; (80119ec <lcd_set_symbol+0x520>)
 80117f6:	7bdb      	ldrb	r3, [r3, #15]
 80117f8:	f043 0304 	orr.w	r3, r3, #4
 80117fc:	b2da      	uxtb	r2, r3
 80117fe:	4b7b      	ldr	r3, [pc, #492]	; (80119ec <lcd_set_symbol+0x520>)
 8011800:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011802:	4b7a      	ldr	r3, [pc, #488]	; (80119ec <lcd_set_symbol+0x520>)
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	f043 0320 	orr.w	r3, r3, #32
 801180a:	b2da      	uxtb	r2, r3
 801180c:	4b77      	ldr	r3, [pc, #476]	; (80119ec <lcd_set_symbol+0x520>)
 801180e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011810:	4b76      	ldr	r3, [pc, #472]	; (80119ec <lcd_set_symbol+0x520>)
 8011812:	795b      	ldrb	r3, [r3, #5]
 8011814:	f043 0310 	orr.w	r3, r3, #16
 8011818:	b2da      	uxtb	r2, r3
 801181a:	4b74      	ldr	r3, [pc, #464]	; (80119ec <lcd_set_symbol+0x520>)
 801181c:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_19] |= (1 << BIT_6);
 801181e:	4b73      	ldr	r3, [pc, #460]	; (80119ec <lcd_set_symbol+0x520>)
 8011820:	7cdb      	ldrb	r3, [r3, #19]
 8011822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011826:	b2da      	uxtb	r2, r3
 8011828:	4b70      	ldr	r3, [pc, #448]	; (80119ec <lcd_set_symbol+0x520>)
 801182a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 801182c:	4b6f      	ldr	r3, [pc, #444]	; (80119ec <lcd_set_symbol+0x520>)
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	f043 0301 	orr.w	r3, r3, #1
 8011834:	b2da      	uxtb	r2, r3
 8011836:	4b6d      	ldr	r3, [pc, #436]	; (80119ec <lcd_set_symbol+0x520>)
 8011838:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 801183a:	4b6c      	ldr	r3, [pc, #432]	; (80119ec <lcd_set_symbol+0x520>)
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	f043 0302 	orr.w	r3, r3, #2
 8011842:	b2da      	uxtb	r2, r3
 8011844:	4b69      	ldr	r3, [pc, #420]	; (80119ec <lcd_set_symbol+0x520>)
 8011846:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011848:	4b68      	ldr	r3, [pc, #416]	; (80119ec <lcd_set_symbol+0x520>)
 801184a:	791b      	ldrb	r3, [r3, #4]
 801184c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011850:	b2da      	uxtb	r2, r3
 8011852:	4b66      	ldr	r3, [pc, #408]	; (80119ec <lcd_set_symbol+0x520>)
 8011854:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011856:	4b65      	ldr	r3, [pc, #404]	; (80119ec <lcd_set_symbol+0x520>)
 8011858:	795b      	ldrb	r3, [r3, #5]
 801185a:	f043 0302 	orr.w	r3, r3, #2
 801185e:	b2da      	uxtb	r2, r3
 8011860:	4b62      	ldr	r3, [pc, #392]	; (80119ec <lcd_set_symbol+0x520>)
 8011862:	715a      	strb	r2, [r3, #5]
        break;
 8011864:	e16a      	b.n	8011b3c <lcd_set_symbol+0x670>
        case PASS1:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011866:	4b61      	ldr	r3, [pc, #388]	; (80119ec <lcd_set_symbol+0x520>)
 8011868:	7b1b      	ldrb	r3, [r3, #12]
 801186a:	f043 0301 	orr.w	r3, r3, #1
 801186e:	b2da      	uxtb	r2, r3
 8011870:	4b5e      	ldr	r3, [pc, #376]	; (80119ec <lcd_set_symbol+0x520>)
 8011872:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011874:	4b5d      	ldr	r3, [pc, #372]	; (80119ec <lcd_set_symbol+0x520>)
 8011876:	7b1b      	ldrb	r3, [r3, #12]
 8011878:	f043 0302 	orr.w	r3, r3, #2
 801187c:	b2da      	uxtb	r2, r3
 801187e:	4b5b      	ldr	r3, [pc, #364]	; (80119ec <lcd_set_symbol+0x520>)
 8011880:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011882:	4b5a      	ldr	r3, [pc, #360]	; (80119ec <lcd_set_symbol+0x520>)
 8011884:	7c5b      	ldrb	r3, [r3, #17]
 8011886:	f043 0301 	orr.w	r3, r3, #1
 801188a:	b2da      	uxtb	r2, r3
 801188c:	4b57      	ldr	r3, [pc, #348]	; (80119ec <lcd_set_symbol+0x520>)
 801188e:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011890:	4b56      	ldr	r3, [pc, #344]	; (80119ec <lcd_set_symbol+0x520>)
 8011892:	7c5b      	ldrb	r3, [r3, #17]
 8011894:	f043 0302 	orr.w	r3, r3, #2
 8011898:	b2da      	uxtb	r2, r3
 801189a:	4b54      	ldr	r3, [pc, #336]	; (80119ec <lcd_set_symbol+0x520>)
 801189c:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 801189e:	4b53      	ldr	r3, [pc, #332]	; (80119ec <lcd_set_symbol+0x520>)
 80118a0:	789b      	ldrb	r3, [r3, #2]
 80118a2:	f043 0302 	orr.w	r3, r3, #2
 80118a6:	b2da      	uxtb	r2, r3
 80118a8:	4b50      	ldr	r3, [pc, #320]	; (80119ec <lcd_set_symbol+0x520>)
 80118aa:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 80118ac:	4b4f      	ldr	r3, [pc, #316]	; (80119ec <lcd_set_symbol+0x520>)
 80118ae:	789b      	ldrb	r3, [r3, #2]
 80118b0:	f043 0301 	orr.w	r3, r3, #1
 80118b4:	b2da      	uxtb	r2, r3
 80118b6:	4b4d      	ldr	r3, [pc, #308]	; (80119ec <lcd_set_symbol+0x520>)
 80118b8:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 80118ba:	4b4c      	ldr	r3, [pc, #304]	; (80119ec <lcd_set_symbol+0x520>)
 80118bc:	79db      	ldrb	r3, [r3, #7]
 80118be:	f043 0302 	orr.w	r3, r3, #2
 80118c2:	b2da      	uxtb	r2, r3
 80118c4:	4b49      	ldr	r3, [pc, #292]	; (80119ec <lcd_set_symbol+0x520>)
 80118c6:	71da      	strb	r2, [r3, #7]
        break;
 80118c8:	e138      	b.n	8011b3c <lcd_set_symbol+0x670>
        case PASS2:
            g_lcd_map[REG_11] |= (1 << BIT_6);
 80118ca:	4b48      	ldr	r3, [pc, #288]	; (80119ec <lcd_set_symbol+0x520>)
 80118cc:	7adb      	ldrb	r3, [r3, #11]
 80118ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118d2:	b2da      	uxtb	r2, r3
 80118d4:	4b45      	ldr	r3, [pc, #276]	; (80119ec <lcd_set_symbol+0x520>)
 80118d6:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_7);
 80118d8:	4b44      	ldr	r3, [pc, #272]	; (80119ec <lcd_set_symbol+0x520>)
 80118da:	7adb      	ldrb	r3, [r3, #11]
 80118dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80118e0:	b2da      	uxtb	r2, r3
 80118e2:	4b42      	ldr	r3, [pc, #264]	; (80119ec <lcd_set_symbol+0x520>)
 80118e4:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_6);
 80118e6:	4b41      	ldr	r3, [pc, #260]	; (80119ec <lcd_set_symbol+0x520>)
 80118e8:	7c1b      	ldrb	r3, [r3, #16]
 80118ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ee:	b2da      	uxtb	r2, r3
 80118f0:	4b3e      	ldr	r3, [pc, #248]	; (80119ec <lcd_set_symbol+0x520>)
 80118f2:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_7);
 80118f4:	4b3d      	ldr	r3, [pc, #244]	; (80119ec <lcd_set_symbol+0x520>)
 80118f6:	7c1b      	ldrb	r3, [r3, #16]
 80118f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80118fc:	b2da      	uxtb	r2, r3
 80118fe:	4b3b      	ldr	r3, [pc, #236]	; (80119ec <lcd_set_symbol+0x520>)
 8011900:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_7);
 8011902:	4b3a      	ldr	r3, [pc, #232]	; (80119ec <lcd_set_symbol+0x520>)
 8011904:	785b      	ldrb	r3, [r3, #1]
 8011906:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801190a:	b2da      	uxtb	r2, r3
 801190c:	4b37      	ldr	r3, [pc, #220]	; (80119ec <lcd_set_symbol+0x520>)
 801190e:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_6);
 8011910:	4b36      	ldr	r3, [pc, #216]	; (80119ec <lcd_set_symbol+0x520>)
 8011912:	785b      	ldrb	r3, [r3, #1]
 8011914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011918:	b2da      	uxtb	r2, r3
 801191a:	4b34      	ldr	r3, [pc, #208]	; (80119ec <lcd_set_symbol+0x520>)
 801191c:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_7);
 801191e:	4b33      	ldr	r3, [pc, #204]	; (80119ec <lcd_set_symbol+0x520>)
 8011920:	799b      	ldrb	r3, [r3, #6]
 8011922:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011926:	b2da      	uxtb	r2, r3
 8011928:	4b30      	ldr	r3, [pc, #192]	; (80119ec <lcd_set_symbol+0x520>)
 801192a:	719a      	strb	r2, [r3, #6]
        break;
 801192c:	e106      	b.n	8011b3c <lcd_set_symbol+0x670>
        case PASS3:
            g_lcd_map[REG_11] |= (1 << BIT_4);
 801192e:	4b2f      	ldr	r3, [pc, #188]	; (80119ec <lcd_set_symbol+0x520>)
 8011930:	7adb      	ldrb	r3, [r3, #11]
 8011932:	f043 0310 	orr.w	r3, r3, #16
 8011936:	b2da      	uxtb	r2, r3
 8011938:	4b2c      	ldr	r3, [pc, #176]	; (80119ec <lcd_set_symbol+0x520>)
 801193a:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_5);
 801193c:	4b2b      	ldr	r3, [pc, #172]	; (80119ec <lcd_set_symbol+0x520>)
 801193e:	7adb      	ldrb	r3, [r3, #11]
 8011940:	f043 0320 	orr.w	r3, r3, #32
 8011944:	b2da      	uxtb	r2, r3
 8011946:	4b29      	ldr	r3, [pc, #164]	; (80119ec <lcd_set_symbol+0x520>)
 8011948:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_4);
 801194a:	4b28      	ldr	r3, [pc, #160]	; (80119ec <lcd_set_symbol+0x520>)
 801194c:	7c1b      	ldrb	r3, [r3, #16]
 801194e:	f043 0310 	orr.w	r3, r3, #16
 8011952:	b2da      	uxtb	r2, r3
 8011954:	4b25      	ldr	r3, [pc, #148]	; (80119ec <lcd_set_symbol+0x520>)
 8011956:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_5);
 8011958:	4b24      	ldr	r3, [pc, #144]	; (80119ec <lcd_set_symbol+0x520>)
 801195a:	7c1b      	ldrb	r3, [r3, #16]
 801195c:	f043 0320 	orr.w	r3, r3, #32
 8011960:	b2da      	uxtb	r2, r3
 8011962:	4b22      	ldr	r3, [pc, #136]	; (80119ec <lcd_set_symbol+0x520>)
 8011964:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_5);
 8011966:	4b21      	ldr	r3, [pc, #132]	; (80119ec <lcd_set_symbol+0x520>)
 8011968:	785b      	ldrb	r3, [r3, #1]
 801196a:	f043 0320 	orr.w	r3, r3, #32
 801196e:	b2da      	uxtb	r2, r3
 8011970:	4b1e      	ldr	r3, [pc, #120]	; (80119ec <lcd_set_symbol+0x520>)
 8011972:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_4);
 8011974:	4b1d      	ldr	r3, [pc, #116]	; (80119ec <lcd_set_symbol+0x520>)
 8011976:	785b      	ldrb	r3, [r3, #1]
 8011978:	f043 0310 	orr.w	r3, r3, #16
 801197c:	b2da      	uxtb	r2, r3
 801197e:	4b1b      	ldr	r3, [pc, #108]	; (80119ec <lcd_set_symbol+0x520>)
 8011980:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_5);
 8011982:	4b1a      	ldr	r3, [pc, #104]	; (80119ec <lcd_set_symbol+0x520>)
 8011984:	799b      	ldrb	r3, [r3, #6]
 8011986:	f043 0320 	orr.w	r3, r3, #32
 801198a:	b2da      	uxtb	r2, r3
 801198c:	4b17      	ldr	r3, [pc, #92]	; (80119ec <lcd_set_symbol+0x520>)
 801198e:	719a      	strb	r2, [r3, #6]
        break;
 8011990:	e0d4      	b.n	8011b3c <lcd_set_symbol+0x670>
        case F:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 8011992:	4b16      	ldr	r3, [pc, #88]	; (80119ec <lcd_set_symbol+0x520>)
 8011994:	7a9b      	ldrb	r3, [r3, #10]
 8011996:	f043 0308 	orr.w	r3, r3, #8
 801199a:	b2da      	uxtb	r2, r3
 801199c:	4b13      	ldr	r3, [pc, #76]	; (80119ec <lcd_set_symbol+0x520>)
 801199e:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80119a0:	4b12      	ldr	r3, [pc, #72]	; (80119ec <lcd_set_symbol+0x520>)
 80119a2:	7bdb      	ldrb	r3, [r3, #15]
 80119a4:	f043 0320 	orr.w	r3, r3, #32
 80119a8:	b2da      	uxtb	r2, r3
 80119aa:	4b10      	ldr	r3, [pc, #64]	; (80119ec <lcd_set_symbol+0x520>)
 80119ac:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 80119ae:	4b0f      	ldr	r3, [pc, #60]	; (80119ec <lcd_set_symbol+0x520>)
 80119b0:	7bdb      	ldrb	r3, [r3, #15]
 80119b2:	f043 0304 	orr.w	r3, r3, #4
 80119b6:	b2da      	uxtb	r2, r3
 80119b8:	4b0c      	ldr	r3, [pc, #48]	; (80119ec <lcd_set_symbol+0x520>)
 80119ba:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  |= (1 << BIT_5);
 80119bc:	4b0b      	ldr	r3, [pc, #44]	; (80119ec <lcd_set_symbol+0x520>)
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	f043 0320 	orr.w	r3, r3, #32
 80119c4:	b2da      	uxtb	r2, r3
 80119c6:	4b09      	ldr	r3, [pc, #36]	; (80119ec <lcd_set_symbol+0x520>)
 80119c8:	701a      	strb	r2, [r3, #0]
        break;
 80119ca:	e0b7      	b.n	8011b3c <lcd_set_symbol+0x670>
        case LIN_1:
            g_lcd_map[REG_15] |= (1 << BIT_1);
 80119cc:	4b07      	ldr	r3, [pc, #28]	; (80119ec <lcd_set_symbol+0x520>)
 80119ce:	7bdb      	ldrb	r3, [r3, #15]
 80119d0:	f043 0302 	orr.w	r3, r3, #2
 80119d4:	b2da      	uxtb	r2, r3
 80119d6:	4b05      	ldr	r3, [pc, #20]	; (80119ec <lcd_set_symbol+0x520>)
 80119d8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80119da:	4b04      	ldr	r3, [pc, #16]	; (80119ec <lcd_set_symbol+0x520>)
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	f043 0302 	orr.w	r3, r3, #2
 80119e2:	b2da      	uxtb	r2, r3
 80119e4:	4b01      	ldr	r3, [pc, #4]	; (80119ec <lcd_set_symbol+0x520>)
 80119e6:	701a      	strb	r2, [r3, #0]
        break;
 80119e8:	e0a8      	b.n	8011b3c <lcd_set_symbol+0x670>
 80119ea:	bf00      	nop
 80119ec:	20001d9c 	.word	0x20001d9c
        case LIN_2:
            g_lcd_map[REG_14] |= (1 << BIT_7);
 80119f0:	4b56      	ldr	r3, [pc, #344]	; (8011b4c <lcd_set_symbol+0x680>)
 80119f2:	7b9b      	ldrb	r3, [r3, #14]
 80119f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80119f8:	b2da      	uxtb	r2, r3
 80119fa:	4b54      	ldr	r3, [pc, #336]	; (8011b4c <lcd_set_symbol+0x680>)
 80119fc:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 80119fe:	4b53      	ldr	r3, [pc, #332]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a00:	7cdb      	ldrb	r3, [r3, #19]
 8011a02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a06:	b2da      	uxtb	r2, r3
 8011a08:	4b50      	ldr	r3, [pc, #320]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a0a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 8011a0c:	4b4f      	ldr	r3, [pc, #316]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	f043 0301 	orr.w	r3, r3, #1
 8011a14:	b2da      	uxtb	r2, r3
 8011a16:	4b4d      	ldr	r3, [pc, #308]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a18:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011a1a:	4b4c      	ldr	r3, [pc, #304]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a1c:	7cdb      	ldrb	r3, [r3, #19]
 8011a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a22:	b2da      	uxtb	r2, r3
 8011a24:	4b49      	ldr	r3, [pc, #292]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a26:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_1);
 8011a28:	4b48      	ldr	r3, [pc, #288]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	f043 0302 	orr.w	r3, r3, #2
 8011a30:	b2da      	uxtb	r2, r3
 8011a32:	4b46      	ldr	r3, [pc, #280]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a34:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 8011a36:	4b45      	ldr	r3, [pc, #276]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a38:	795b      	ldrb	r3, [r3, #5]
 8011a3a:	f043 0302 	orr.w	r3, r3, #2
 8011a3e:	b2da      	uxtb	r2, r3
 8011a40:	4b42      	ldr	r3, [pc, #264]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a42:	715a      	strb	r2, [r3, #5]
        break;
 8011a44:	e07a      	b.n	8011b3c <lcd_set_symbol+0x670>
        case LIN_3:
            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011a46:	4b41      	ldr	r3, [pc, #260]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a48:	7b9b      	ldrb	r3, [r3, #14]
 8011a4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a4e:	b2da      	uxtb	r2, r3
 8011a50:	4b3e      	ldr	r3, [pc, #248]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a52:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 8011a54:	4b3d      	ldr	r3, [pc, #244]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a56:	7cdb      	ldrb	r3, [r3, #19]
 8011a58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a5c:	b2da      	uxtb	r2, r3
 8011a5e:	4b3b      	ldr	r3, [pc, #236]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a60:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 8011a62:	4b3a      	ldr	r3, [pc, #232]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	f043 0301 	orr.w	r3, r3, #1
 8011a6a:	b2da      	uxtb	r2, r3
 8011a6c:	4b37      	ldr	r3, [pc, #220]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a6e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011a70:	4b36      	ldr	r3, [pc, #216]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a72:	7cdb      	ldrb	r3, [r3, #19]
 8011a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a78:	b2da      	uxtb	r2, r3
 8011a7a:	4b34      	ldr	r3, [pc, #208]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a7c:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_4]  |= (1 << BIT_7);
 8011a7e:	4b33      	ldr	r3, [pc, #204]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a80:	791b      	ldrb	r3, [r3, #4]
 8011a82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a86:	b2da      	uxtb	r2, r3
 8011a88:	4b30      	ldr	r3, [pc, #192]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a8a:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 8011a8c:	4b2f      	ldr	r3, [pc, #188]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a8e:	795b      	ldrb	r3, [r3, #5]
 8011a90:	f043 0302 	orr.w	r3, r3, #2
 8011a94:	b2da      	uxtb	r2, r3
 8011a96:	4b2d      	ldr	r3, [pc, #180]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a98:	715a      	strb	r2, [r3, #5]
        break;
 8011a9a:	e04f      	b.n	8011b3c <lcd_set_symbol+0x670>
        case LIN_4:
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011a9c:	4b2b      	ldr	r3, [pc, #172]	; (8011b4c <lcd_set_symbol+0x680>)
 8011a9e:	7bdb      	ldrb	r3, [r3, #15]
 8011aa0:	f043 0302 	orr.w	r3, r3, #2
 8011aa4:	b2da      	uxtb	r2, r3
 8011aa6:	4b29      	ldr	r3, [pc, #164]	; (8011b4c <lcd_set_symbol+0x680>)
 8011aa8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 8011aaa:	4b28      	ldr	r3, [pc, #160]	; (8011b4c <lcd_set_symbol+0x680>)
 8011aac:	7cdb      	ldrb	r3, [r3, #19]
 8011aae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ab2:	b2da      	uxtb	r2, r3
 8011ab4:	4b25      	ldr	r3, [pc, #148]	; (8011b4c <lcd_set_symbol+0x680>)
 8011ab6:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 8011ab8:	4b24      	ldr	r3, [pc, #144]	; (8011b4c <lcd_set_symbol+0x680>)
 8011aba:	781b      	ldrb	r3, [r3, #0]
 8011abc:	f043 0301 	orr.w	r3, r3, #1
 8011ac0:	b2da      	uxtb	r2, r3
 8011ac2:	4b22      	ldr	r3, [pc, #136]	; (8011b4c <lcd_set_symbol+0x680>)
 8011ac4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011ac6:	4b21      	ldr	r3, [pc, #132]	; (8011b4c <lcd_set_symbol+0x680>)
 8011ac8:	7cdb      	ldrb	r3, [r3, #19]
 8011aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ace:	b2da      	uxtb	r2, r3
 8011ad0:	4b1e      	ldr	r3, [pc, #120]	; (8011b4c <lcd_set_symbol+0x680>)
 8011ad2:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_4]  |= (1 << BIT_7);
 8011ad4:	4b1d      	ldr	r3, [pc, #116]	; (8011b4c <lcd_set_symbol+0x680>)
 8011ad6:	791b      	ldrb	r3, [r3, #4]
 8011ad8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011adc:	b2da      	uxtb	r2, r3
 8011ade:	4b1b      	ldr	r3, [pc, #108]	; (8011b4c <lcd_set_symbol+0x680>)
 8011ae0:	711a      	strb	r2, [r3, #4]
        break;
 8011ae2:	e02b      	b.n	8011b3c <lcd_set_symbol+0x670>
        case LIN_5:
            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011ae4:	4b19      	ldr	r3, [pc, #100]	; (8011b4c <lcd_set_symbol+0x680>)
 8011ae6:	7b9b      	ldrb	r3, [r3, #14]
 8011ae8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011aec:	b2da      	uxtb	r2, r3
 8011aee:	4b17      	ldr	r3, [pc, #92]	; (8011b4c <lcd_set_symbol+0x680>)
 8011af0:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011af2:	4b16      	ldr	r3, [pc, #88]	; (8011b4c <lcd_set_symbol+0x680>)
 8011af4:	7bdb      	ldrb	r3, [r3, #15]
 8011af6:	f043 0302 	orr.w	r3, r3, #2
 8011afa:	b2da      	uxtb	r2, r3
 8011afc:	4b13      	ldr	r3, [pc, #76]	; (8011b4c <lcd_set_symbol+0x680>)
 8011afe:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 8011b00:	4b12      	ldr	r3, [pc, #72]	; (8011b4c <lcd_set_symbol+0x680>)
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	f043 0301 	orr.w	r3, r3, #1
 8011b08:	b2da      	uxtb	r2, r3
 8011b0a:	4b10      	ldr	r3, [pc, #64]	; (8011b4c <lcd_set_symbol+0x680>)
 8011b0c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011b0e:	4b0f      	ldr	r3, [pc, #60]	; (8011b4c <lcd_set_symbol+0x680>)
 8011b10:	7cdb      	ldrb	r3, [r3, #19]
 8011b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b16:	b2da      	uxtb	r2, r3
 8011b18:	4b0c      	ldr	r3, [pc, #48]	; (8011b4c <lcd_set_symbol+0x680>)
 8011b1a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_4]  |= (1 << BIT_7);
 8011b1c:	4b0b      	ldr	r3, [pc, #44]	; (8011b4c <lcd_set_symbol+0x680>)
 8011b1e:	791b      	ldrb	r3, [r3, #4]
 8011b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b24:	b2da      	uxtb	r2, r3
 8011b26:	4b09      	ldr	r3, [pc, #36]	; (8011b4c <lcd_set_symbol+0x680>)
 8011b28:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 8011b2a:	4b08      	ldr	r3, [pc, #32]	; (8011b4c <lcd_set_symbol+0x680>)
 8011b2c:	795b      	ldrb	r3, [r3, #5]
 8011b2e:	f043 0302 	orr.w	r3, r3, #2
 8011b32:	b2da      	uxtb	r2, r3
 8011b34:	4b05      	ldr	r3, [pc, #20]	; (8011b4c <lcd_set_symbol+0x680>)
 8011b36:	715a      	strb	r2, [r3, #5]
        break;
 8011b38:	e000      	b.n	8011b3c <lcd_set_symbol+0x670>
        default:
        break;
 8011b3a:	bf00      	nop
    }

    pcf8553_blink(blink_speed);
 8011b3c:	79bb      	ldrb	r3, [r7, #6]
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f000 fb3c 	bl	80121bc <pcf8553_blink>
}
 8011b44:	bf00      	nop
 8011b46:	3708      	adds	r7, #8
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	20001d9c 	.word	0x20001d9c

08011b50 <lcd_set_time_unit>:
 * pantalla LCD custom.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b082      	sub	sp, #8
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	4603      	mov	r3, r0
 8011b58:	460a      	mov	r2, r1
 8011b5a:	71fb      	strb	r3, [r7, #7]
 8011b5c:	4613      	mov	r3, r2
 8011b5e:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8011b60:	79fb      	ldrb	r3, [r7, #7]
 8011b62:	2b03      	cmp	r3, #3
 8011b64:	d82a      	bhi.n	8011bbc <lcd_set_time_unit+0x6c>
 8011b66:	a201      	add	r2, pc, #4	; (adr r2, 8011b6c <lcd_set_time_unit+0x1c>)
 8011b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b6c:	08011b7d 	.word	0x08011b7d
 8011b70:	08011b8d 	.word	0x08011b8d
 8011b74:	08011b9d 	.word	0x08011b9d
 8011b78:	08011bad 	.word	0x08011bad
    {
        case H:
            g_lcd_map[REG_5] |= (1 << BIT_6);
 8011b7c:	4b14      	ldr	r3, [pc, #80]	; (8011bd0 <lcd_set_time_unit+0x80>)
 8011b7e:	795b      	ldrb	r3, [r3, #5]
 8011b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b84:	b2da      	uxtb	r2, r3
 8011b86:	4b12      	ldr	r3, [pc, #72]	; (8011bd0 <lcd_set_time_unit+0x80>)
 8011b88:	715a      	strb	r2, [r3, #5]
        break;
 8011b8a:	e018      	b.n	8011bbe <lcd_set_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] |= (1 << BIT_5);
 8011b8c:	4b10      	ldr	r3, [pc, #64]	; (8011bd0 <lcd_set_time_unit+0x80>)
 8011b8e:	7a5b      	ldrb	r3, [r3, #9]
 8011b90:	f043 0320 	orr.w	r3, r3, #32
 8011b94:	b2da      	uxtb	r2, r3
 8011b96:	4b0e      	ldr	r3, [pc, #56]	; (8011bd0 <lcd_set_time_unit+0x80>)
 8011b98:	725a      	strb	r2, [r3, #9]
        break;
 8011b9a:	e010      	b.n	8011bbe <lcd_set_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] |= (1 << BIT_5);
 8011b9c:	4b0c      	ldr	r3, [pc, #48]	; (8011bd0 <lcd_set_time_unit+0x80>)
 8011b9e:	7a9b      	ldrb	r3, [r3, #10]
 8011ba0:	f043 0320 	orr.w	r3, r3, #32
 8011ba4:	b2da      	uxtb	r2, r3
 8011ba6:	4b0a      	ldr	r3, [pc, #40]	; (8011bd0 <lcd_set_time_unit+0x80>)
 8011ba8:	729a      	strb	r2, [r3, #10]
        break;
 8011baa:	e008      	b.n	8011bbe <lcd_set_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] |= (1 << BIT_7);
 8011bac:	4b08      	ldr	r3, [pc, #32]	; (8011bd0 <lcd_set_time_unit+0x80>)
 8011bae:	7a5b      	ldrb	r3, [r3, #9]
 8011bb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011bb4:	b2da      	uxtb	r2, r3
 8011bb6:	4b06      	ldr	r3, [pc, #24]	; (8011bd0 <lcd_set_time_unit+0x80>)
 8011bb8:	725a      	strb	r2, [r3, #9]
        break;
 8011bba:	e000      	b.n	8011bbe <lcd_set_time_unit+0x6e>
        default:
        break;
 8011bbc:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8011bbe:	79bb      	ldrb	r3, [r7, #6]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f000 fafb 	bl	80121bc <pcf8553_blink>
}
 8011bc6:	bf00      	nop
 8011bc8:	3708      	adds	r7, #8
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}
 8011bce:	bf00      	nop
 8011bd0:	20001d9c 	.word	0x20001d9c

08011bd4 <lcd_set_vol_unit>:
 * @brief Función que imprime la unidad de volumen a utilizar.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	4603      	mov	r3, r0
 8011bdc:	460a      	mov	r2, r1
 8011bde:	71fb      	strb	r3, [r7, #7]
 8011be0:	4613      	mov	r3, r2
 8011be2:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8011be4:	79fb      	ldrb	r3, [r7, #7]
 8011be6:	2b06      	cmp	r3, #6
 8011be8:	f200 81e3 	bhi.w	8011fb2 <lcd_set_vol_unit+0x3de>
 8011bec:	a201      	add	r2, pc, #4	; (adr r2, 8011bf4 <lcd_set_vol_unit+0x20>)
 8011bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bf2:	bf00      	nop
 8011bf4:	08011c11 	.word	0x08011c11
 8011bf8:	08011d03 	.word	0x08011d03
 8011bfc:	08011c67 	.word	0x08011c67
 8011c00:	08011e79 	.word	0x08011e79
 8011c04:	08011dad 	.word	0x08011dad
 8011c08:	08011ef9 	.word	0x08011ef9
 8011c0c:	08011f79 	.word	0x08011f79
    {
        case LT:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011c10:	4b98      	ldr	r3, [pc, #608]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c12:	7bdb      	ldrb	r3, [r3, #15]
 8011c14:	f043 0320 	orr.w	r3, r3, #32
 8011c18:	b2da      	uxtb	r2, r3
 8011c1a:	4b96      	ldr	r3, [pc, #600]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c1c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011c1e:	4b95      	ldr	r3, [pc, #596]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	f043 0320 	orr.w	r3, r3, #32
 8011c26:	b2da      	uxtb	r2, r3
 8011c28:	4b92      	ldr	r3, [pc, #584]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c2a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8011c2c:	4b91      	ldr	r3, [pc, #580]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c2e:	795b      	ldrb	r3, [r3, #5]
 8011c30:	f043 0320 	orr.w	r3, r3, #32
 8011c34:	b2da      	uxtb	r2, r3
 8011c36:	4b8f      	ldr	r3, [pc, #572]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c38:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011c3a:	4b8e      	ldr	r3, [pc, #568]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c3c:	7b9b      	ldrb	r3, [r3, #14]
 8011c3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c42:	b2da      	uxtb	r2, r3
 8011c44:	4b8b      	ldr	r3, [pc, #556]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c46:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] |= (1 << BIT_0);
 8011c48:	4b8a      	ldr	r3, [pc, #552]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c4a:	7a9b      	ldrb	r3, [r3, #10]
 8011c4c:	f043 0301 	orr.w	r3, r3, #1
 8011c50:	b2da      	uxtb	r2, r3
 8011c52:	4b88      	ldr	r3, [pc, #544]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c54:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] |= (1 << BIT_6);
 8011c56:	4b87      	ldr	r3, [pc, #540]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c58:	7a5b      	ldrb	r3, [r3, #9]
 8011c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c5e:	b2da      	uxtb	r2, r3
 8011c60:	4b84      	ldr	r3, [pc, #528]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c62:	725a      	strb	r2, [r3, #9]
        break;
 8011c64:	e1a6      	b.n	8011fb4 <lcd_set_vol_unit+0x3e0>
        case KG:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011c66:	4b83      	ldr	r3, [pc, #524]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c68:	7bdb      	ldrb	r3, [r3, #15]
 8011c6a:	f043 0320 	orr.w	r3, r3, #32
 8011c6e:	b2da      	uxtb	r2, r3
 8011c70:	4b80      	ldr	r3, [pc, #512]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c72:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011c74:	4b7f      	ldr	r3, [pc, #508]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c76:	7bdb      	ldrb	r3, [r3, #15]
 8011c78:	f043 0310 	orr.w	r3, r3, #16
 8011c7c:	b2da      	uxtb	r2, r3
 8011c7e:	4b7d      	ldr	r3, [pc, #500]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c80:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011c82:	4b7c      	ldr	r3, [pc, #496]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c84:	7bdb      	ldrb	r3, [r3, #15]
 8011c86:	f043 0304 	orr.w	r3, r3, #4
 8011c8a:	b2da      	uxtb	r2, r3
 8011c8c:	4b79      	ldr	r3, [pc, #484]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c8e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011c90:	4b78      	ldr	r3, [pc, #480]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c92:	781b      	ldrb	r3, [r3, #0]
 8011c94:	f043 0320 	orr.w	r3, r3, #32
 8011c98:	b2da      	uxtb	r2, r3
 8011c9a:	4b76      	ldr	r3, [pc, #472]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011c9c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011c9e:	4b75      	ldr	r3, [pc, #468]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011ca0:	795b      	ldrb	r3, [r3, #5]
 8011ca2:	f043 0310 	orr.w	r3, r3, #16
 8011ca6:	b2da      	uxtb	r2, r3
 8011ca8:	4b72      	ldr	r3, [pc, #456]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011caa:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011cac:	4b71      	ldr	r3, [pc, #452]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011cae:	7b9b      	ldrb	r3, [r3, #14]
 8011cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011cb4:	b2da      	uxtb	r2, r3
 8011cb6:	4b6f      	ldr	r3, [pc, #444]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011cb8:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011cba:	4b6e      	ldr	r3, [pc, #440]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011cbc:	7bdb      	ldrb	r3, [r3, #15]
 8011cbe:	f043 0302 	orr.w	r3, r3, #2
 8011cc2:	b2da      	uxtb	r2, r3
 8011cc4:	4b6b      	ldr	r3, [pc, #428]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011cc6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011cc8:	4b6a      	ldr	r3, [pc, #424]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011cca:	781b      	ldrb	r3, [r3, #0]
 8011ccc:	f043 0301 	orr.w	r3, r3, #1
 8011cd0:	b2da      	uxtb	r2, r3
 8011cd2:	4b68      	ldr	r3, [pc, #416]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011cd4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011cd6:	4b67      	ldr	r3, [pc, #412]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	f043 0302 	orr.w	r3, r3, #2
 8011cde:	b2da      	uxtb	r2, r3
 8011ce0:	4b64      	ldr	r3, [pc, #400]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011ce2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011ce4:	4b63      	ldr	r3, [pc, #396]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011ce6:	791b      	ldrb	r3, [r3, #4]
 8011ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011cec:	b2da      	uxtb	r2, r3
 8011cee:	4b61      	ldr	r3, [pc, #388]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011cf0:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011cf2:	4b60      	ldr	r3, [pc, #384]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011cf4:	795b      	ldrb	r3, [r3, #5]
 8011cf6:	f043 0302 	orr.w	r3, r3, #2
 8011cfa:	b2da      	uxtb	r2, r3
 8011cfc:	4b5d      	ldr	r3, [pc, #372]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011cfe:	715a      	strb	r2, [r3, #5]
        break;
 8011d00:	e158      	b.n	8011fb4 <lcd_set_vol_unit+0x3e0>
        case M3:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011d02:	4b5c      	ldr	r3, [pc, #368]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d04:	7bdb      	ldrb	r3, [r3, #15]
 8011d06:	f043 0320 	orr.w	r3, r3, #32
 8011d0a:	b2da      	uxtb	r2, r3
 8011d0c:	4b59      	ldr	r3, [pc, #356]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d0e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 8011d10:	4b58      	ldr	r3, [pc, #352]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d12:	7a9b      	ldrb	r3, [r3, #10]
 8011d14:	f043 0304 	orr.w	r3, r3, #4
 8011d18:	b2da      	uxtb	r2, r3
 8011d1a:	4b56      	ldr	r3, [pc, #344]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d1c:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011d1e:	4b55      	ldr	r3, [pc, #340]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d20:	7bdb      	ldrb	r3, [r3, #15]
 8011d22:	f043 0310 	orr.w	r3, r3, #16
 8011d26:	b2da      	uxtb	r2, r3
 8011d28:	4b52      	ldr	r3, [pc, #328]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d2a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8011d2c:	4b51      	ldr	r3, [pc, #324]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d2e:	7bdb      	ldrb	r3, [r3, #15]
 8011d30:	f043 0308 	orr.w	r3, r3, #8
 8011d34:	b2da      	uxtb	r2, r3
 8011d36:	4b4f      	ldr	r3, [pc, #316]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d38:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011d3a:	4b4e      	ldr	r3, [pc, #312]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	f043 0320 	orr.w	r3, r3, #32
 8011d42:	b2da      	uxtb	r2, r3
 8011d44:	4b4b      	ldr	r3, [pc, #300]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d46:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8011d48:	4b4a      	ldr	r3, [pc, #296]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	f043 0308 	orr.w	r3, r3, #8
 8011d50:	b2da      	uxtb	r2, r3
 8011d52:	4b48      	ldr	r3, [pc, #288]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d54:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011d56:	4b47      	ldr	r3, [pc, #284]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d58:	7b9b      	ldrb	r3, [r3, #14]
 8011d5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d5e:	b2da      	uxtb	r2, r3
 8011d60:	4b44      	ldr	r3, [pc, #272]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d62:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 8011d64:	4b43      	ldr	r3, [pc, #268]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d66:	7cdb      	ldrb	r3, [r3, #19]
 8011d68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d6c:	b2da      	uxtb	r2, r3
 8011d6e:	4b41      	ldr	r3, [pc, #260]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d70:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011d72:	4b40      	ldr	r3, [pc, #256]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d74:	7cdb      	ldrb	r3, [r3, #19]
 8011d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d7a:	b2da      	uxtb	r2, r3
 8011d7c:	4b3d      	ldr	r3, [pc, #244]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d7e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011d80:	4b3c      	ldr	r3, [pc, #240]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	f043 0301 	orr.w	r3, r3, #1
 8011d88:	b2da      	uxtb	r2, r3
 8011d8a:	4b3a      	ldr	r3, [pc, #232]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d8c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011d8e:	4b39      	ldr	r3, [pc, #228]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d90:	791b      	ldrb	r3, [r3, #4]
 8011d92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d96:	b2da      	uxtb	r2, r3
 8011d98:	4b36      	ldr	r3, [pc, #216]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d9a:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011d9c:	4b35      	ldr	r3, [pc, #212]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011d9e:	795b      	ldrb	r3, [r3, #5]
 8011da0:	f043 0302 	orr.w	r3, r3, #2
 8011da4:	b2da      	uxtb	r2, r3
 8011da6:	4b33      	ldr	r3, [pc, #204]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011da8:	715a      	strb	r2, [r3, #5]
        break;
 8011daa:	e103      	b.n	8011fb4 <lcd_set_vol_unit+0x3e0>
        case BR:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 8011dac:	4b31      	ldr	r3, [pc, #196]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011dae:	7a9b      	ldrb	r3, [r3, #10]
 8011db0:	f043 0308 	orr.w	r3, r3, #8
 8011db4:	b2da      	uxtb	r2, r3
 8011db6:	4b2f      	ldr	r3, [pc, #188]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011db8:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] |= (1 << BIT_4);
 8011dba:	4b2e      	ldr	r3, [pc, #184]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011dbc:	7a9b      	ldrb	r3, [r3, #10]
 8011dbe:	f043 0310 	orr.w	r3, r3, #16
 8011dc2:	b2da      	uxtb	r2, r3
 8011dc4:	4b2b      	ldr	r3, [pc, #172]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011dc6:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8011dc8:	4b2a      	ldr	r3, [pc, #168]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011dca:	7bdb      	ldrb	r3, [r3, #15]
 8011dcc:	f043 0308 	orr.w	r3, r3, #8
 8011dd0:	b2da      	uxtb	r2, r3
 8011dd2:	4b28      	ldr	r3, [pc, #160]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011dd4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8011dd6:	4b27      	ldr	r3, [pc, #156]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	f043 0310 	orr.w	r3, r3, #16
 8011dde:	b2da      	uxtb	r2, r3
 8011de0:	4b24      	ldr	r3, [pc, #144]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011de2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_2);
 8011de4:	4b23      	ldr	r3, [pc, #140]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011de6:	795b      	ldrb	r3, [r3, #5]
 8011de8:	f043 0304 	orr.w	r3, r3, #4
 8011dec:	b2da      	uxtb	r2, r3
 8011dee:	4b21      	ldr	r3, [pc, #132]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011df0:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8011df2:	4b20      	ldr	r3, [pc, #128]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	f043 0308 	orr.w	r3, r3, #8
 8011dfa:	b2da      	uxtb	r2, r3
 8011dfc:	4b1d      	ldr	r3, [pc, #116]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011dfe:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8011e00:	4b1c      	ldr	r3, [pc, #112]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e02:	795b      	ldrb	r3, [r3, #5]
 8011e04:	f043 0320 	orr.w	r3, r3, #32
 8011e08:	b2da      	uxtb	r2, r3
 8011e0a:	4b1a      	ldr	r3, [pc, #104]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e0c:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011e0e:	4b19      	ldr	r3, [pc, #100]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e10:	7b9b      	ldrb	r3, [r3, #14]
 8011e12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e16:	b2da      	uxtb	r2, r3
 8011e18:	4b16      	ldr	r3, [pc, #88]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e1a:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011e1c:	4b15      	ldr	r3, [pc, #84]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e1e:	7bdb      	ldrb	r3, [r3, #15]
 8011e20:	f043 0302 	orr.w	r3, r3, #2
 8011e24:	b2da      	uxtb	r2, r3
 8011e26:	4b13      	ldr	r3, [pc, #76]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e28:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 8011e2a:	4b12      	ldr	r3, [pc, #72]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e2c:	7cdb      	ldrb	r3, [r3, #19]
 8011e2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e32:	b2da      	uxtb	r2, r3
 8011e34:	4b0f      	ldr	r3, [pc, #60]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e36:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011e38:	4b0e      	ldr	r3, [pc, #56]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e3a:	7cdb      	ldrb	r3, [r3, #19]
 8011e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e40:	b2da      	uxtb	r2, r3
 8011e42:	4b0c      	ldr	r3, [pc, #48]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e44:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011e46:	4b0b      	ldr	r3, [pc, #44]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e48:	781b      	ldrb	r3, [r3, #0]
 8011e4a:	f043 0301 	orr.w	r3, r3, #1
 8011e4e:	b2da      	uxtb	r2, r3
 8011e50:	4b08      	ldr	r3, [pc, #32]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e52:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011e54:	4b07      	ldr	r3, [pc, #28]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e56:	781b      	ldrb	r3, [r3, #0]
 8011e58:	f043 0302 	orr.w	r3, r3, #2
 8011e5c:	b2da      	uxtb	r2, r3
 8011e5e:	4b05      	ldr	r3, [pc, #20]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e60:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_0);
 8011e62:	4b04      	ldr	r3, [pc, #16]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e64:	795b      	ldrb	r3, [r3, #5]
 8011e66:	f043 0301 	orr.w	r3, r3, #1
 8011e6a:	b2da      	uxtb	r2, r3
 8011e6c:	4b01      	ldr	r3, [pc, #4]	; (8011e74 <lcd_set_vol_unit+0x2a0>)
 8011e6e:	715a      	strb	r2, [r3, #5]
        break;
 8011e70:	e0a0      	b.n	8011fb4 <lcd_set_vol_unit+0x3e0>
 8011e72:	bf00      	nop
 8011e74:	20001d9c 	.word	0x20001d9c
        case GL:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 8011e78:	4b52      	ldr	r3, [pc, #328]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011e7a:	7a9b      	ldrb	r3, [r3, #10]
 8011e7c:	f043 0308 	orr.w	r3, r3, #8
 8011e80:	b2da      	uxtb	r2, r3
 8011e82:	4b50      	ldr	r3, [pc, #320]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011e84:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011e86:	4b4f      	ldr	r3, [pc, #316]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011e88:	7bdb      	ldrb	r3, [r3, #15]
 8011e8a:	f043 0320 	orr.w	r3, r3, #32
 8011e8e:	b2da      	uxtb	r2, r3
 8011e90:	4b4c      	ldr	r3, [pc, #304]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011e92:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8011e94:	4b4b      	ldr	r3, [pc, #300]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	f043 0310 	orr.w	r3, r3, #16
 8011e9c:	b2da      	uxtb	r2, r3
 8011e9e:	4b49      	ldr	r3, [pc, #292]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011ea0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011ea2:	4b48      	ldr	r3, [pc, #288]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	f043 0320 	orr.w	r3, r3, #32
 8011eaa:	b2da      	uxtb	r2, r3
 8011eac:	4b45      	ldr	r3, [pc, #276]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011eae:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8011eb0:	4b44      	ldr	r3, [pc, #272]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	f043 0308 	orr.w	r3, r3, #8
 8011eb8:	b2da      	uxtb	r2, r3
 8011eba:	4b42      	ldr	r3, [pc, #264]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011ebc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8011ebe:	4b41      	ldr	r3, [pc, #260]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011ec0:	795b      	ldrb	r3, [r3, #5]
 8011ec2:	f043 0320 	orr.w	r3, r3, #32
 8011ec6:	b2da      	uxtb	r2, r3
 8011ec8:	4b3e      	ldr	r3, [pc, #248]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011eca:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011ecc:	4b3d      	ldr	r3, [pc, #244]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011ece:	7bdb      	ldrb	r3, [r3, #15]
 8011ed0:	f043 0302 	orr.w	r3, r3, #2
 8011ed4:	b2da      	uxtb	r2, r3
 8011ed6:	4b3b      	ldr	r3, [pc, #236]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011ed8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011eda:	4b3a      	ldr	r3, [pc, #232]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	f043 0302 	orr.w	r3, r3, #2
 8011ee2:	b2da      	uxtb	r2, r3
 8011ee4:	4b37      	ldr	r3, [pc, #220]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011ee6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011ee8:	4b36      	ldr	r3, [pc, #216]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011eea:	795b      	ldrb	r3, [r3, #5]
 8011eec:	f043 0302 	orr.w	r3, r3, #2
 8011ef0:	b2da      	uxtb	r2, r3
 8011ef2:	4b34      	ldr	r3, [pc, #208]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011ef4:	715a      	strb	r2, [r3, #5]
        break;
 8011ef6:	e05d      	b.n	8011fb4 <lcd_set_vol_unit+0x3e0>
        case CELSIUS:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 8011ef8:	4b32      	ldr	r3, [pc, #200]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011efa:	7a9b      	ldrb	r3, [r3, #10]
 8011efc:	f043 0308 	orr.w	r3, r3, #8
 8011f00:	b2da      	uxtb	r2, r3
 8011f02:	4b30      	ldr	r3, [pc, #192]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f04:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011f06:	4b2f      	ldr	r3, [pc, #188]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f08:	7bdb      	ldrb	r3, [r3, #15]
 8011f0a:	f043 0320 	orr.w	r3, r3, #32
 8011f0e:	b2da      	uxtb	r2, r3
 8011f10:	4b2c      	ldr	r3, [pc, #176]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f12:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8011f14:	4b2b      	ldr	r3, [pc, #172]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f16:	7bdb      	ldrb	r3, [r3, #15]
 8011f18:	f043 0308 	orr.w	r3, r3, #8
 8011f1c:	b2da      	uxtb	r2, r3
 8011f1e:	4b29      	ldr	r3, [pc, #164]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f20:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011f22:	4b28      	ldr	r3, [pc, #160]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f24:	7bdb      	ldrb	r3, [r3, #15]
 8011f26:	f043 0304 	orr.w	r3, r3, #4
 8011f2a:	b2da      	uxtb	r2, r3
 8011f2c:	4b25      	ldr	r3, [pc, #148]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f2e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8011f30:	4b24      	ldr	r3, [pc, #144]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f32:	781b      	ldrb	r3, [r3, #0]
 8011f34:	f043 0310 	orr.w	r3, r3, #16
 8011f38:	b2da      	uxtb	r2, r3
 8011f3a:	4b22      	ldr	r3, [pc, #136]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f3c:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011f3e:	4b21      	ldr	r3, [pc, #132]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f40:	7b9b      	ldrb	r3, [r3, #14]
 8011f42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011f46:	b2da      	uxtb	r2, r3
 8011f48:	4b1e      	ldr	r3, [pc, #120]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f4a:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011f4c:	4b1d      	ldr	r3, [pc, #116]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f4e:	7bdb      	ldrb	r3, [r3, #15]
 8011f50:	f043 0302 	orr.w	r3, r3, #2
 8011f54:	b2da      	uxtb	r2, r3
 8011f56:	4b1b      	ldr	r3, [pc, #108]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f58:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011f5a:	4b1a      	ldr	r3, [pc, #104]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	f043 0302 	orr.w	r3, r3, #2
 8011f62:	b2da      	uxtb	r2, r3
 8011f64:	4b17      	ldr	r3, [pc, #92]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f66:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011f68:	4b16      	ldr	r3, [pc, #88]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f6a:	795b      	ldrb	r3, [r3, #5]
 8011f6c:	f043 0302 	orr.w	r3, r3, #2
 8011f70:	b2da      	uxtb	r2, r3
 8011f72:	4b14      	ldr	r3, [pc, #80]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f74:	715a      	strb	r2, [r3, #5]
        break;
 8011f76:	e01d      	b.n	8011fb4 <lcd_set_vol_unit+0x3e0>
        case NOTHING:
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011f78:	4b12      	ldr	r3, [pc, #72]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f7a:	7bdb      	ldrb	r3, [r3, #15]
 8011f7c:	f043 0304 	orr.w	r3, r3, #4
 8011f80:	b2da      	uxtb	r2, r3
 8011f82:	4b10      	ldr	r3, [pc, #64]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f84:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8011f86:	4b0f      	ldr	r3, [pc, #60]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	f043 0310 	orr.w	r3, r3, #16
 8011f8e:	b2da      	uxtb	r2, r3
 8011f90:	4b0c      	ldr	r3, [pc, #48]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f92:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011f94:	4b0b      	ldr	r3, [pc, #44]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011f96:	7cdb      	ldrb	r3, [r3, #19]
 8011f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f9c:	b2da      	uxtb	r2, r3
 8011f9e:	4b09      	ldr	r3, [pc, #36]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011fa0:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011fa2:	4b08      	ldr	r3, [pc, #32]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011fa4:	781b      	ldrb	r3, [r3, #0]
 8011fa6:	f043 0301 	orr.w	r3, r3, #1
 8011faa:	b2da      	uxtb	r2, r3
 8011fac:	4b05      	ldr	r3, [pc, #20]	; (8011fc4 <lcd_set_vol_unit+0x3f0>)
 8011fae:	701a      	strb	r2, [r3, #0]
        break;
 8011fb0:	e000      	b.n	8011fb4 <lcd_set_vol_unit+0x3e0>
        default:
        break;
 8011fb2:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8011fb4:	79bb      	ldrb	r3, [r7, #6]
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f000 f900 	bl	80121bc <pcf8553_blink>
}
 8011fbc:	bf00      	nop
 8011fbe:	3708      	adds	r7, #8
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	20001d9c 	.word	0x20001d9c

08011fc8 <lcd_write_line>:
 * la primera posicion de cada linea.
 * @param
 * @retval None
 */
void lcd_write_line(uint8_t seg, uint8_t data)
{
 8011fc8:	b480      	push	{r7}
 8011fca:	b085      	sub	sp, #20
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	4603      	mov	r3, r0
 8011fd0:	460a      	mov	r2, r1
 8011fd2:	71fb      	strb	r3, [r7, #7]
 8011fd4:	4613      	mov	r3, r2
 8011fd6:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = 0;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	73fb      	strb	r3, [r7, #15]
    uint8_t pos = 0;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	73bb      	strb	r3, [r7, #14]

    /*
     *
     *
     */
    switch (g_row)
 8011fe0:	4b33      	ldr	r3, [pc, #204]	; (80120b0 <lcd_write_line+0xe8>)
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	2b01      	cmp	r3, #1
 8011fe6:	d002      	beq.n	8011fee <lcd_write_line+0x26>
 8011fe8:	2b02      	cmp	r3, #2
 8011fea:	d01b      	beq.n	8012024 <lcd_write_line+0x5c>
            pos += g_col * 2;
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
            pos = pos % 8; // @suppress("Avoid magic numbers")
        break;
        default:
        break;
 8011fec:	e035      	b.n	801205a <lcd_write_line+0x92>
            pos = octal_1[seg].pos;
 8011fee:	79fb      	ldrb	r3, [r7, #7]
 8011ff0:	4a30      	ldr	r2, [pc, #192]	; (80120b4 <lcd_write_line+0xec>)
 8011ff2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8011ff6:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 8011ff8:	4b2f      	ldr	r3, [pc, #188]	; (80120b8 <lcd_write_line+0xf0>)
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	005b      	lsls	r3, r3, #1
 8011ffe:	b2da      	uxtb	r2, r3
 8012000:	7bbb      	ldrb	r3, [r7, #14]
 8012002:	4413      	add	r3, r2
 8012004:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_1[seg].reg; // @suppress("Avoid magic numbers")
 8012006:	7bbb      	ldrb	r3, [r7, #14]
 8012008:	08db      	lsrs	r3, r3, #3
 801200a:	b2da      	uxtb	r2, r3
 801200c:	79fb      	ldrb	r3, [r7, #7]
 801200e:	4929      	ldr	r1, [pc, #164]	; (80120b4 <lcd_write_line+0xec>)
 8012010:	005b      	lsls	r3, r3, #1
 8012012:	440b      	add	r3, r1
 8012014:	785b      	ldrb	r3, [r3, #1]
 8012016:	4413      	add	r3, r2
 8012018:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 801201a:	7bbb      	ldrb	r3, [r7, #14]
 801201c:	f003 0307 	and.w	r3, r3, #7
 8012020:	73bb      	strb	r3, [r7, #14]
        break;
 8012022:	e01a      	b.n	801205a <lcd_write_line+0x92>
            pos = octal_2[seg].pos;
 8012024:	79fb      	ldrb	r3, [r7, #7]
 8012026:	4a25      	ldr	r2, [pc, #148]	; (80120bc <lcd_write_line+0xf4>)
 8012028:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 801202c:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 801202e:	4b22      	ldr	r3, [pc, #136]	; (80120b8 <lcd_write_line+0xf0>)
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	005b      	lsls	r3, r3, #1
 8012034:	b2da      	uxtb	r2, r3
 8012036:	7bbb      	ldrb	r3, [r7, #14]
 8012038:	4413      	add	r3, r2
 801203a:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
 801203c:	7bbb      	ldrb	r3, [r7, #14]
 801203e:	08db      	lsrs	r3, r3, #3
 8012040:	b2da      	uxtb	r2, r3
 8012042:	79fb      	ldrb	r3, [r7, #7]
 8012044:	491d      	ldr	r1, [pc, #116]	; (80120bc <lcd_write_line+0xf4>)
 8012046:	005b      	lsls	r3, r3, #1
 8012048:	440b      	add	r3, r1
 801204a:	785b      	ldrb	r3, [r3, #1]
 801204c:	4413      	add	r3, r2
 801204e:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 8012050:	7bbb      	ldrb	r3, [r7, #14]
 8012052:	f003 0307 	and.w	r3, r3, #7
 8012056:	73bb      	strb	r3, [r7, #14]
        break;
 8012058:	bf00      	nop
    }

    if (data)
 801205a:	79bb      	ldrb	r3, [r7, #6]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d00f      	beq.n	8012080 <lcd_write_line+0xb8>
    {
        g_lcd_map[reg] |= 1 << pos;
 8012060:	7bfb      	ldrb	r3, [r7, #15]
 8012062:	4a17      	ldr	r2, [pc, #92]	; (80120c0 <lcd_write_line+0xf8>)
 8012064:	5cd3      	ldrb	r3, [r2, r3]
 8012066:	b25a      	sxtb	r2, r3
 8012068:	7bbb      	ldrb	r3, [r7, #14]
 801206a:	2101      	movs	r1, #1
 801206c:	fa01 f303 	lsl.w	r3, r1, r3
 8012070:	b25b      	sxtb	r3, r3
 8012072:	4313      	orrs	r3, r2
 8012074:	b25a      	sxtb	r2, r3
 8012076:	7bfb      	ldrb	r3, [r7, #15]
 8012078:	b2d1      	uxtb	r1, r2
 801207a:	4a11      	ldr	r2, [pc, #68]	; (80120c0 <lcd_write_line+0xf8>)
 801207c:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        g_lcd_map[reg] &= ~(1 << pos);
    }
}
 801207e:	e010      	b.n	80120a2 <lcd_write_line+0xda>
        g_lcd_map[reg] &= ~(1 << pos);
 8012080:	7bfb      	ldrb	r3, [r7, #15]
 8012082:	4a0f      	ldr	r2, [pc, #60]	; (80120c0 <lcd_write_line+0xf8>)
 8012084:	5cd3      	ldrb	r3, [r2, r3]
 8012086:	b25a      	sxtb	r2, r3
 8012088:	7bbb      	ldrb	r3, [r7, #14]
 801208a:	2101      	movs	r1, #1
 801208c:	fa01 f303 	lsl.w	r3, r1, r3
 8012090:	b25b      	sxtb	r3, r3
 8012092:	43db      	mvns	r3, r3
 8012094:	b25b      	sxtb	r3, r3
 8012096:	4013      	ands	r3, r2
 8012098:	b25a      	sxtb	r2, r3
 801209a:	7bfb      	ldrb	r3, [r7, #15]
 801209c:	b2d1      	uxtb	r1, r2
 801209e:	4a08      	ldr	r2, [pc, #32]	; (80120c0 <lcd_write_line+0xf8>)
 80120a0:	54d1      	strb	r1, [r2, r3]
}
 80120a2:	bf00      	nop
 80120a4:	3714      	adds	r7, #20
 80120a6:	46bd      	mov	sp, r7
 80120a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ac:	4770      	bx	lr
 80120ae:	bf00      	nop
 80120b0:	20001d09 	.word	0x20001d09
 80120b4:	20000120 	.word	0x20000120
 80120b8:	20001d08 	.word	0x20001d08
 80120bc:	20000130 	.word	0x20000130
 80120c0:	20001d9c 	.word	0x20001d9c

080120c4 <prepare_to_send>:
 * COM_0_ADDRESS
 * COM_1_ADDRESS
 *
 */
void static prepare_to_send(uint8_t add)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b084      	sub	sp, #16
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	4603      	mov	r3, r0
 80120cc:	71fb      	strb	r3, [r7, #7]
    register_address_t reg;
    reg.bits.address = add;
 80120ce:	79fb      	ldrb	r3, [r7, #7]
 80120d0:	f003 031f 	and.w	r3, r3, #31
 80120d4:	b2da      	uxtb	r2, r3
 80120d6:	7b3b      	ldrb	r3, [r7, #12]
 80120d8:	f362 0304 	bfi	r3, r2, #0, #5
 80120dc:	733b      	strb	r3, [r7, #12]
    reg.bits.not_used = 0;
 80120de:	7b3b      	ldrb	r3, [r7, #12]
 80120e0:	f36f 1346 	bfc	r3, #5, #2
 80120e4:	733b      	strb	r3, [r7, #12]
    reg.bits.read_write = WRITE_DATA;
 80120e6:	7b3b      	ldrb	r3, [r7, #12]
 80120e8:	f36f 13c7 	bfc	r3, #7, #1
 80120ec:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(&h_spi1, &(reg.data), 1, DEFAULT_DELAY);
 80120ee:	2314      	movs	r3, #20
 80120f0:	f107 010c 	add.w	r1, r7, #12
 80120f4:	2201      	movs	r2, #1
 80120f6:	4803      	ldr	r0, [pc, #12]	; (8012104 <prepare_to_send+0x40>)
 80120f8:	f7f7 fb36 	bl	8009768 <HAL_SPI_Transmit>
}
 80120fc:	bf00      	nop
 80120fe:	3710      	adds	r7, #16
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}
 8012104:	20001d0c 	.word	0x20001d0c

08012108 <spi1_init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void spi1_init(void)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	af00      	add	r7, sp, #0
    h_spi1.Instance = SPI1;
 801210c:	4b29      	ldr	r3, [pc, #164]	; (80121b4 <spi1_init+0xac>)
 801210e:	4a2a      	ldr	r2, [pc, #168]	; (80121b8 <spi1_init+0xb0>)
 8012110:	601a      	str	r2, [r3, #0]
    h_spi1.Init.Mode = SPI_MODE_MASTER;
 8012112:	4b28      	ldr	r3, [pc, #160]	; (80121b4 <spi1_init+0xac>)
 8012114:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8012118:	605a      	str	r2, [r3, #4]
    h_spi1.Init.Direction = SPI_DIRECTION_1LINE;
 801211a:	4b26      	ldr	r3, [pc, #152]	; (80121b4 <spi1_init+0xac>)
 801211c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8012120:	609a      	str	r2, [r3, #8]
    h_spi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012122:	4b24      	ldr	r3, [pc, #144]	; (80121b4 <spi1_init+0xac>)
 8012124:	2207      	movs	r2, #7
 8012126:	60da      	str	r2, [r3, #12]
    h_spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012128:	4b22      	ldr	r3, [pc, #136]	; (80121b4 <spi1_init+0xac>)
 801212a:	2200      	movs	r2, #0
 801212c:	611a      	str	r2, [r3, #16]
    h_spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801212e:	4b21      	ldr	r3, [pc, #132]	; (80121b4 <spi1_init+0xac>)
 8012130:	2200      	movs	r2, #0
 8012132:	615a      	str	r2, [r3, #20]
    h_spi1.Init.NSS = SPI_NSS_SOFT;
 8012134:	4b1f      	ldr	r3, [pc, #124]	; (80121b4 <spi1_init+0xac>)
 8012136:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801213a:	619a      	str	r2, [r3, #24]
    h_spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 801213c:	4b1d      	ldr	r3, [pc, #116]	; (80121b4 <spi1_init+0xac>)
 801213e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8012142:	61da      	str	r2, [r3, #28]
    h_spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012144:	4b1b      	ldr	r3, [pc, #108]	; (80121b4 <spi1_init+0xac>)
 8012146:	2200      	movs	r2, #0
 8012148:	621a      	str	r2, [r3, #32]
    h_spi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801214a:	4b1a      	ldr	r3, [pc, #104]	; (80121b4 <spi1_init+0xac>)
 801214c:	2200      	movs	r2, #0
 801214e:	625a      	str	r2, [r3, #36]	; 0x24
    h_spi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012150:	4b18      	ldr	r3, [pc, #96]	; (80121b4 <spi1_init+0xac>)
 8012152:	2200      	movs	r2, #0
 8012154:	629a      	str	r2, [r3, #40]	; 0x28
    h_spi1.Init.CRCPolynomial = 7; // @suppress("Avoid magic numbers")
 8012156:	4b17      	ldr	r3, [pc, #92]	; (80121b4 <spi1_init+0xac>)
 8012158:	2207      	movs	r2, #7
 801215a:	62da      	str	r2, [r3, #44]	; 0x2c
    h_spi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801215c:	4b15      	ldr	r3, [pc, #84]	; (80121b4 <spi1_init+0xac>)
 801215e:	2200      	movs	r2, #0
 8012160:	631a      	str	r2, [r3, #48]	; 0x30
    h_spi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8012162:	4b14      	ldr	r3, [pc, #80]	; (80121b4 <spi1_init+0xac>)
 8012164:	2200      	movs	r2, #0
 8012166:	635a      	str	r2, [r3, #52]	; 0x34
    h_spi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8012168:	4b12      	ldr	r3, [pc, #72]	; (80121b4 <spi1_init+0xac>)
 801216a:	2200      	movs	r2, #0
 801216c:	639a      	str	r2, [r3, #56]	; 0x38
    h_spi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 801216e:	4b11      	ldr	r3, [pc, #68]	; (80121b4 <spi1_init+0xac>)
 8012170:	2200      	movs	r2, #0
 8012172:	63da      	str	r2, [r3, #60]	; 0x3c
    h_spi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8012174:	4b0f      	ldr	r3, [pc, #60]	; (80121b4 <spi1_init+0xac>)
 8012176:	2200      	movs	r2, #0
 8012178:	649a      	str	r2, [r3, #72]	; 0x48
    h_spi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 801217a:	4b0e      	ldr	r3, [pc, #56]	; (80121b4 <spi1_init+0xac>)
 801217c:	2200      	movs	r2, #0
 801217e:	64da      	str	r2, [r3, #76]	; 0x4c
    h_spi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8012180:	4b0c      	ldr	r3, [pc, #48]	; (80121b4 <spi1_init+0xac>)
 8012182:	2200      	movs	r2, #0
 8012184:	651a      	str	r2, [r3, #80]	; 0x50
    h_spi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8012186:	4b0b      	ldr	r3, [pc, #44]	; (80121b4 <spi1_init+0xac>)
 8012188:	2200      	movs	r2, #0
 801218a:	655a      	str	r2, [r3, #84]	; 0x54
    h_spi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 801218c:	4b09      	ldr	r3, [pc, #36]	; (80121b4 <spi1_init+0xac>)
 801218e:	2200      	movs	r2, #0
 8012190:	659a      	str	r2, [r3, #88]	; 0x58
    h_spi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8012192:	4b08      	ldr	r3, [pc, #32]	; (80121b4 <spi1_init+0xac>)
 8012194:	2200      	movs	r2, #0
 8012196:	65da      	str	r2, [r3, #92]	; 0x5c
    h_spi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8012198:	4b06      	ldr	r3, [pc, #24]	; (80121b4 <spi1_init+0xac>)
 801219a:	2200      	movs	r2, #0
 801219c:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_SPI_Init(&h_spi1) != HAL_OK)
 801219e:	4805      	ldr	r0, [pc, #20]	; (80121b4 <spi1_init+0xac>)
 80121a0:	f7f7 f9cc 	bl	800953c <HAL_SPI_Init>
 80121a4:	4603      	mov	r3, r0
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d001      	beq.n	80121ae <spi1_init+0xa6>
    {
        Error_Handler();
 80121aa:	f7ef f82d 	bl	8001208 <Error_Handler>
    }
}
 80121ae:	bf00      	nop
 80121b0:	bd80      	pop	{r7, pc}
 80121b2:	bf00      	nop
 80121b4:	20001d0c 	.word	0x20001d0c
 80121b8:	40013000 	.word	0x40013000

080121bc <pcf8553_blink>:
 * PCF_BLINK_ONE_SECOND,
 * PCF_BLINK_HALF_SECOND
 * @retval None
 */
void pcf8553_blink(blink_t mode)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	4603      	mov	r3, r0
 80121c4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 80121c6:	2200      	movs	r2, #0
 80121c8:	2110      	movs	r1, #16
 80121ca:	480f      	ldr	r0, [pc, #60]	; (8012208 <pcf8553_blink+0x4c>)
 80121cc:	f7f2 f864 	bl	8004298 <HAL_GPIO_WritePin>
    g_display_ctrl_2.reg_bits.blink = mode;
 80121d0:	79fb      	ldrb	r3, [r7, #7]
 80121d2:	f003 0303 	and.w	r3, r3, #3
 80121d6:	b2d9      	uxtb	r1, r3
 80121d8:	4a0c      	ldr	r2, [pc, #48]	; (801220c <pcf8553_blink+0x50>)
 80121da:	7813      	ldrb	r3, [r2, #0]
 80121dc:	f361 0342 	bfi	r3, r1, #1, #2
 80121e0:	7013      	strb	r3, [r2, #0]
    prepare_to_send(DISPLAY_CTRL_2_ADDRESS);
 80121e2:	2003      	movs	r0, #3
 80121e4:	f7ff ff6e 	bl	80120c4 <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 80121e8:	2314      	movs	r3, #20
 80121ea:	2201      	movs	r2, #1
 80121ec:	4907      	ldr	r1, [pc, #28]	; (801220c <pcf8553_blink+0x50>)
 80121ee:	4808      	ldr	r0, [pc, #32]	; (8012210 <pcf8553_blink+0x54>)
 80121f0:	f7f7 faba 	bl	8009768 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 80121f4:	2201      	movs	r2, #1
 80121f6:	2110      	movs	r1, #16
 80121f8:	4803      	ldr	r0, [pc, #12]	; (8012208 <pcf8553_blink+0x4c>)
 80121fa:	f7f2 f84d 	bl	8004298 <HAL_GPIO_WritePin>
}
 80121fe:	bf00      	nop
 8012200:	3708      	adds	r7, #8
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}
 8012206:	bf00      	nop
 8012208:	42020000 	.word	0x42020000
 801220c:	20001db4 	.word	0x20001db4
 8012210:	20001d0c 	.word	0x20001d0c

08012214 <pcf8553_clear_buff>:

void pcf8553_clear_buff()
{
 8012214:	b480      	push	{r7}
 8012216:	b083      	sub	sp, #12
 8012218:	af00      	add	r7, sp, #0
    /*
     * Limpia el buffer final, que es mandado directamente al controlador de la
     * pantalla LCD.
     */
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 801221a:	2300      	movs	r3, #0
 801221c:	607b      	str	r3, [r7, #4]
 801221e:	e007      	b.n	8012230 <pcf8553_clear_buff+0x1c>
    {
        g_lcd_map[cont_buff_t] = 0;
 8012220:	4a08      	ldr	r2, [pc, #32]	; (8012244 <pcf8553_clear_buff+0x30>)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	4413      	add	r3, r2
 8012226:	2200      	movs	r2, #0
 8012228:	701a      	strb	r2, [r3, #0]
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	3301      	adds	r3, #1
 801222e:	607b      	str	r3, [r7, #4]
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2b13      	cmp	r3, #19
 8012234:	ddf4      	ble.n	8012220 <pcf8553_clear_buff+0xc>
    }
}
 8012236:	bf00      	nop
 8012238:	bf00      	nop
 801223a:	370c      	adds	r7, #12
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr
 8012244:	20001d9c 	.word	0x20001d9c

08012248 <pcf8553_dump>:
 *
 * @param None
 * @retval None
 */
void pcf8553_dump()
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 801224e:	2200      	movs	r2, #0
 8012250:	2110      	movs	r1, #16
 8012252:	4810      	ldr	r0, [pc, #64]	; (8012294 <pcf8553_dump+0x4c>)
 8012254:	f7f2 f820 	bl	8004298 <HAL_GPIO_WritePin>
    prepare_to_send(DATA_ADDRESS);
 8012258:	2004      	movs	r0, #4
 801225a:	f7ff ff33 	bl	80120c4 <prepare_to_send>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 801225e:	2300      	movs	r3, #0
 8012260:	607b      	str	r3, [r7, #4]
 8012262:	e00a      	b.n	801227a <pcf8553_dump+0x32>
    {
        HAL_SPI_Transmit(&h_spi1, g_lcd_map + i, 1, DEFAULT_DELAY);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	4a0c      	ldr	r2, [pc, #48]	; (8012298 <pcf8553_dump+0x50>)
 8012268:	1899      	adds	r1, r3, r2
 801226a:	2314      	movs	r3, #20
 801226c:	2201      	movs	r2, #1
 801226e:	480b      	ldr	r0, [pc, #44]	; (801229c <pcf8553_dump+0x54>)
 8012270:	f7f7 fa7a 	bl	8009768 <HAL_SPI_Transmit>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	3301      	adds	r3, #1
 8012278:	607b      	str	r3, [r7, #4]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2b13      	cmp	r3, #19
 801227e:	ddf1      	ble.n	8012264 <pcf8553_dump+0x1c>
    }
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 8012280:	2201      	movs	r2, #1
 8012282:	2110      	movs	r1, #16
 8012284:	4803      	ldr	r0, [pc, #12]	; (8012294 <pcf8553_dump+0x4c>)
 8012286:	f7f2 f807 	bl	8004298 <HAL_GPIO_WritePin>
}
 801228a:	bf00      	nop
 801228c:	3708      	adds	r7, #8
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}
 8012292:	bf00      	nop
 8012294:	42020000 	.word	0x42020000
 8012298:	20001d9c 	.word	0x20001d9c
 801229c:	20001d0c 	.word	0x20001d0c

080122a0 <pcf8553_init>:
 * @brief Llamar a esta función antes de empezar a trabajar con el driver.
 * @param None
 * @retval None
 */
void pcf8553_init()
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	af00      	add	r7, sp, #0
    spi1_init();
 80122a4:	f7ff ff30 	bl	8012108 <spi1_init>
    pcf8553_reset();
 80122a8:	f000 f830 	bl	801230c <pcf8553_reset>
    HAL_Delay(DEFAULT_DELAY);
 80122ac:	2314      	movs	r3, #20
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7ef fb1a 	bl	80018e8 <HAL_Delay>
     * @brief El pcf8553 tiene un pin de chip select, la siguiente instruccion
     * habilita el chip, el parametro GPIO_PIN_RESET es muy parecido a un
     * numero magico, se debe buscar una mejor solucion.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 80122b4:	2200      	movs	r2, #0
 80122b6:	2110      	movs	r1, #16
 80122b8:	480f      	ldr	r0, [pc, #60]	; (80122f8 <pcf8553_init+0x58>)
 80122ba:	f7f1 ffed 	bl	8004298 <HAL_GPIO_WritePin>
     *  Display_crtl_2 = 1 to enable display.
     *  Luego de un tiempo olvidé porque hice este comentario, no parece
     *  tener sentido.
     *
     */
    prepare_to_send(0x1);
 80122be:	2001      	movs	r0, #1
 80122c0:	f7ff ff00 	bl	80120c4 <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_device_ctrl.reg_data), 1, DEFAULT_DELAY);
 80122c4:	2314      	movs	r3, #20
 80122c6:	2201      	movs	r2, #1
 80122c8:	490c      	ldr	r1, [pc, #48]	; (80122fc <pcf8553_init+0x5c>)
 80122ca:	480d      	ldr	r0, [pc, #52]	; (8012300 <pcf8553_init+0x60>)
 80122cc:	f7f7 fa4c 	bl	8009768 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_1.reg_data), 1, DEFAULT_DELAY);
 80122d0:	2314      	movs	r3, #20
 80122d2:	2201      	movs	r2, #1
 80122d4:	490b      	ldr	r1, [pc, #44]	; (8012304 <pcf8553_init+0x64>)
 80122d6:	480a      	ldr	r0, [pc, #40]	; (8012300 <pcf8553_init+0x60>)
 80122d8:	f7f7 fa46 	bl	8009768 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 80122dc:	2314      	movs	r3, #20
 80122de:	2201      	movs	r2, #1
 80122e0:	4909      	ldr	r1, [pc, #36]	; (8012308 <pcf8553_init+0x68>)
 80122e2:	4807      	ldr	r0, [pc, #28]	; (8012300 <pcf8553_init+0x60>)
 80122e4:	f7f7 fa40 	bl	8009768 <HAL_SPI_Transmit>

    /*
     *  Chip disable.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 80122e8:	2201      	movs	r2, #1
 80122ea:	2110      	movs	r1, #16
 80122ec:	4802      	ldr	r0, [pc, #8]	; (80122f8 <pcf8553_init+0x58>)
 80122ee:	f7f1 ffd3 	bl	8004298 <HAL_GPIO_WritePin>
}
 80122f2:	bf00      	nop
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	42020000 	.word	0x42020000
 80122fc:	20001db0 	.word	0x20001db0
 8012300:	20001d0c 	.word	0x20001d0c
 8012304:	20000140 	.word	0x20000140
 8012308:	20001db4 	.word	0x20001db4

0801230c <pcf8553_reset>:
 * at least 10 μs.
 * @param  None
 * @retval None
 */
void pcf8553_reset()
{
 801230c:	b580      	push	{r7, lr}
 801230e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_PIN, GPIO_PIN_RESET);
 8012310:	2200      	movs	r2, #0
 8012312:	2140      	movs	r1, #64	; 0x40
 8012314:	4806      	ldr	r0, [pc, #24]	; (8012330 <pcf8553_reset+0x24>)
 8012316:	f7f1 ffbf 	bl	8004298 <HAL_GPIO_WritePin>
    HAL_Delay(DEFAULT_DELAY);
 801231a:	2314      	movs	r3, #20
 801231c:	4618      	mov	r0, r3
 801231e:	f7ef fae3 	bl	80018e8 <HAL_Delay>
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_Pin, GPIO_PIN_SET);
 8012322:	2201      	movs	r2, #1
 8012324:	2140      	movs	r1, #64	; 0x40
 8012326:	4802      	ldr	r0, [pc, #8]	; (8012330 <pcf8553_reset+0x24>)
 8012328:	f7f1 ffb6 	bl	8004298 <HAL_GPIO_WritePin>
}
 801232c:	bf00      	nop
 801232e:	bd80      	pop	{r7, pc}
 8012330:	42020000 	.word	0x42020000

08012334 <pcf8553_write_all>:
 * futuro se hará con una enumeración que lo deje claro, ya sea en esta función
 * o en una de mas alto nivel.
 * @retval None
 */
void pcf8553_write_all(uint8_t data)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	4603      	mov	r3, r0
 801233c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 801233e:	2300      	movs	r3, #0
 8012340:	60fb      	str	r3, [r7, #12]
 8012342:	e007      	b.n	8012354 <pcf8553_write_all+0x20>
    {
        g_lcd_map[i] = data;
 8012344:	4a08      	ldr	r2, [pc, #32]	; (8012368 <pcf8553_write_all+0x34>)
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	4413      	add	r3, r2
 801234a:	79fa      	ldrb	r2, [r7, #7]
 801234c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	3301      	adds	r3, #1
 8012352:	60fb      	str	r3, [r7, #12]
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	2b13      	cmp	r3, #19
 8012358:	ddf4      	ble.n	8012344 <pcf8553_write_all+0x10>
    }
    pcf8553_dump();
 801235a:	f7ff ff75 	bl	8012248 <pcf8553_dump>
}
 801235e:	bf00      	nop
 8012360:	3710      	adds	r7, #16
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}
 8012366:	bf00      	nop
 8012368:	20001d9c 	.word	0x20001d9c

0801236c <fm_menu_config_date_hour>:
 * @brief Función que imprime el menú de configuración de fecha y hora.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_date_hour(fm_event_t event_id)
{
 801236c:	b5b0      	push	{r4, r5, r7, lr}
 801236e:	b0b4      	sub	sp, #208	; 0xd0
 8012370:	af00      	add	r7, sp, #0
 8012372:	4603      	mov	r3, r0
 8012374:	71fb      	strb	r3, [r7, #7]
    static sel_second second_enum;
    RTC_TimeTypeDef time_final;
    RTC_DateTypeDef date_final;
    extern RTC_HandleTypeDef hrtc;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 8012376:	4b9d      	ldr	r3, [pc, #628]	; (80125ec <fm_menu_config_date_hour+0x280>)
 8012378:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    fm_event_t event_now;

    if (new_entry == 1)
 801237c:	4b9c      	ldr	r3, [pc, #624]	; (80125f0 <fm_menu_config_date_hour+0x284>)
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	2b01      	cmp	r3, #1
 8012382:	d107      	bne.n	8012394 <fm_menu_config_date_hour+0x28>
    {
        field = DAY;
 8012384:	4b9b      	ldr	r3, [pc, #620]	; (80125f4 <fm_menu_config_date_hour+0x288>)
 8012386:	2200      	movs	r2, #0
 8012388:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 801238a:	f7fd fa32 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 801238e:	4b98      	ldr	r3, [pc, #608]	; (80125f0 <fm_menu_config_date_hour+0x284>)
 8012390:	2200      	movs	r2, #0
 8012392:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(CONFIGURATION, event_id, field);
 8012394:	4b97      	ldr	r3, [pc, #604]	; (80125f4 <fm_menu_config_date_hour+0x288>)
 8012396:	781a      	ldrb	r2, [r3, #0]
 8012398:	79fb      	ldrb	r3, [r7, #7]
 801239a:	4619      	mov	r1, r3
 801239c:	2001      	movs	r0, #1
 801239e:	f7fd fa2f 	bl	800f800 <fm_lcd_date_hour>
    fm_lcd_refresh();
 80123a2:	f7fd fdb8 	bl	800ff16 <fm_lcd_refresh>

    day_enum = fm_factory_get_date_time().day;
 80123a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7fc fcd6 	bl	800ed5c <fm_factory_get_date_time>
 80123b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123b2:	b2da      	uxtb	r2, r3
 80123b4:	4b90      	ldr	r3, [pc, #576]	; (80125f8 <fm_menu_config_date_hour+0x28c>)
 80123b6:	701a      	strb	r2, [r3, #0]
    month_enum = fm_factory_get_date_time().month;
 80123b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80123bc:	4618      	mov	r0, r3
 80123be:	f7fc fccd 	bl	800ed5c <fm_factory_get_date_time>
 80123c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123c4:	b2da      	uxtb	r2, r3
 80123c6:	4b8d      	ldr	r3, [pc, #564]	; (80125fc <fm_menu_config_date_hour+0x290>)
 80123c8:	701a      	strb	r2, [r3, #0]
    year_enum = fm_factory_get_date_time().year;
 80123ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80123ce:	4618      	mov	r0, r3
 80123d0:	f7fc fcc4 	bl	800ed5c <fm_factory_get_date_time>
 80123d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80123d6:	b2da      	uxtb	r2, r3
 80123d8:	4b89      	ldr	r3, [pc, #548]	; (8012600 <fm_menu_config_date_hour+0x294>)
 80123da:	701a      	strb	r2, [r3, #0]
    hour_enum = fm_factory_get_date_time().hour;
 80123dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7fc fcbb 	bl	800ed5c <fm_factory_get_date_time>
 80123e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80123ea:	b2da      	uxtb	r2, r3
 80123ec:	4b85      	ldr	r3, [pc, #532]	; (8012604 <fm_menu_config_date_hour+0x298>)
 80123ee:	701a      	strb	r2, [r3, #0]
    minute_enum = fm_factory_get_date_time().minute;
 80123f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7fc fcb1 	bl	800ed5c <fm_factory_get_date_time>
 80123fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80123fe:	b2da      	uxtb	r2, r3
 8012400:	4b81      	ldr	r3, [pc, #516]	; (8012608 <fm_menu_config_date_hour+0x29c>)
 8012402:	701a      	strb	r2, [r3, #0]
    second_enum = fm_factory_get_date_time().second;
 8012404:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012408:	4618      	mov	r0, r3
 801240a:	f7fc fca7 	bl	800ed5c <fm_factory_get_date_time>
 801240e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012412:	b2da      	uxtb	r2, r3
 8012414:	4b7d      	ldr	r3, [pc, #500]	; (801260c <fm_menu_config_date_hour+0x2a0>)
 8012416:	701a      	strb	r2, [r3, #0]

    switch (event_id)
 8012418:	79fb      	ldrb	r3, [r7, #7]
 801241a:	3b01      	subs	r3, #1
 801241c:	2b04      	cmp	r3, #4
 801241e:	f200 83be 	bhi.w	8012b9e <fm_menu_config_date_hour+0x832>
 8012422:	a201      	add	r2, pc, #4	; (adr r2, 8012428 <fm_menu_config_date_hour+0xbc>)
 8012424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012428:	08012b9f 	.word	0x08012b9f
 801242c:	0801243d 	.word	0x0801243d
 8012430:	08012791 	.word	0x08012791
 8012434:	08012b01 	.word	0x08012b01
 8012438:	08012b7d 	.word	0x08012b7d
    {
        case EVENT_KEY_UP:
            if(correct_password)
 801243c:	4b74      	ldr	r3, [pc, #464]	; (8012610 <fm_menu_config_date_hour+0x2a4>)
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	2b00      	cmp	r3, #0
 8012442:	f000 83ae 	beq.w	8012ba2 <fm_menu_config_date_hour+0x836>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if(field == DAY)
 8012446:	4b6b      	ldr	r3, [pc, #428]	; (80125f4 <fm_menu_config_date_hour+0x288>)
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	2b00      	cmp	r3, #0
 801244c:	f040 809b 	bne.w	8012586 <fm_menu_config_date_hour+0x21a>
                {
                    if(month_enum == JANUARY ||
 8012450:	4b6a      	ldr	r3, [pc, #424]	; (80125fc <fm_menu_config_date_hour+0x290>)
 8012452:	781b      	ldrb	r3, [r3, #0]
 8012454:	2b01      	cmp	r3, #1
 8012456:	d017      	beq.n	8012488 <fm_menu_config_date_hour+0x11c>
                    month_enum == MARCH      ||
 8012458:	4b68      	ldr	r3, [pc, #416]	; (80125fc <fm_menu_config_date_hour+0x290>)
 801245a:	781b      	ldrb	r3, [r3, #0]
                    if(month_enum == JANUARY ||
 801245c:	2b03      	cmp	r3, #3
 801245e:	d013      	beq.n	8012488 <fm_menu_config_date_hour+0x11c>
                    month_enum == MAY        ||
 8012460:	4b66      	ldr	r3, [pc, #408]	; (80125fc <fm_menu_config_date_hour+0x290>)
 8012462:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MARCH      ||
 8012464:	2b05      	cmp	r3, #5
 8012466:	d00f      	beq.n	8012488 <fm_menu_config_date_hour+0x11c>
                    month_enum == JULY       ||
 8012468:	4b64      	ldr	r3, [pc, #400]	; (80125fc <fm_menu_config_date_hour+0x290>)
 801246a:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MAY        ||
 801246c:	2b07      	cmp	r3, #7
 801246e:	d00b      	beq.n	8012488 <fm_menu_config_date_hour+0x11c>
                    month_enum == AUGUST     ||
 8012470:	4b62      	ldr	r3, [pc, #392]	; (80125fc <fm_menu_config_date_hour+0x290>)
 8012472:	781b      	ldrb	r3, [r3, #0]
                    month_enum == JULY       ||
 8012474:	2b08      	cmp	r3, #8
 8012476:	d007      	beq.n	8012488 <fm_menu_config_date_hour+0x11c>
                    month_enum == OCTOBER    ||
 8012478:	4b60      	ldr	r3, [pc, #384]	; (80125fc <fm_menu_config_date_hour+0x290>)
 801247a:	781b      	ldrb	r3, [r3, #0]
                    month_enum == AUGUST     ||
 801247c:	2b0a      	cmp	r3, #10
 801247e:	d003      	beq.n	8012488 <fm_menu_config_date_hour+0x11c>
                    month_enum == DECEMBER)
 8012480:	4b5e      	ldr	r3, [pc, #376]	; (80125fc <fm_menu_config_date_hour+0x290>)
 8012482:	781b      	ldrb	r3, [r3, #0]
                    month_enum == OCTOBER    ||
 8012484:	2b0c      	cmp	r3, #12
 8012486:	d119      	bne.n	80124bc <fm_menu_config_date_hour+0x150>
                    {
                        if(day_enum < DAY_31)
 8012488:	4b5b      	ldr	r3, [pc, #364]	; (80125f8 <fm_menu_config_date_hour+0x28c>)
 801248a:	781b      	ldrb	r3, [r3, #0]
 801248c:	2b1e      	cmp	r3, #30
 801248e:	d80b      	bhi.n	80124a8 <fm_menu_config_date_hour+0x13c>
                        {
                            fm_factory_modify_date(day_enum +
 8012490:	4b59      	ldr	r3, [pc, #356]	; (80125f8 <fm_menu_config_date_hour+0x28c>)
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	3301      	adds	r3, #1
 8012496:	4a59      	ldr	r2, [pc, #356]	; (80125fc <fm_menu_config_date_hour+0x290>)
 8012498:	7812      	ldrb	r2, [r2, #0]
 801249a:	4611      	mov	r1, r2
 801249c:	4a58      	ldr	r2, [pc, #352]	; (8012600 <fm_menu_config_date_hour+0x294>)
 801249e:	7812      	ldrb	r2, [r2, #0]
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7fc fcd9 	bl	800ee58 <fm_factory_modify_date>
                        if(day_enum < DAY_31)
 80124a6:	e168      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                            1, month_enum,
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1,
 80124a8:	4b54      	ldr	r3, [pc, #336]	; (80125fc <fm_menu_config_date_hour+0x290>)
 80124aa:	781b      	ldrb	r3, [r3, #0]
 80124ac:	4619      	mov	r1, r3
 80124ae:	4b54      	ldr	r3, [pc, #336]	; (8012600 <fm_menu_config_date_hour+0x294>)
 80124b0:	781b      	ldrb	r3, [r3, #0]
 80124b2:	461a      	mov	r2, r3
 80124b4:	2001      	movs	r0, #1
 80124b6:	f7fc fccf 	bl	800ee58 <fm_factory_modify_date>
                        if(day_enum < DAY_31)
 80124ba:	e15e      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                            month_enum,
                            year_enum);
                        }
                    }
                    else if(month_enum == APRIL ||
 80124bc:	4b4f      	ldr	r3, [pc, #316]	; (80125fc <fm_menu_config_date_hour+0x290>)
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	2b04      	cmp	r3, #4
 80124c2:	d00b      	beq.n	80124dc <fm_menu_config_date_hour+0x170>
                    month_enum == JUNE          ||
 80124c4:	4b4d      	ldr	r3, [pc, #308]	; (80125fc <fm_menu_config_date_hour+0x290>)
 80124c6:	781b      	ldrb	r3, [r3, #0]
                    else if(month_enum == APRIL ||
 80124c8:	2b06      	cmp	r3, #6
 80124ca:	d007      	beq.n	80124dc <fm_menu_config_date_hour+0x170>
                    month_enum == SEPTEMBER     ||
 80124cc:	4b4b      	ldr	r3, [pc, #300]	; (80125fc <fm_menu_config_date_hour+0x290>)
 80124ce:	781b      	ldrb	r3, [r3, #0]
                    month_enum == JUNE          ||
 80124d0:	2b09      	cmp	r3, #9
 80124d2:	d003      	beq.n	80124dc <fm_menu_config_date_hour+0x170>
                    month_enum == NOVEMBER)
 80124d4:	4b49      	ldr	r3, [pc, #292]	; (80125fc <fm_menu_config_date_hour+0x290>)
 80124d6:	781b      	ldrb	r3, [r3, #0]
                    month_enum == SEPTEMBER     ||
 80124d8:	2b0b      	cmp	r3, #11
 80124da:	d119      	bne.n	8012510 <fm_menu_config_date_hour+0x1a4>
                    {
                        if(day_enum < DAY_30)
 80124dc:	4b46      	ldr	r3, [pc, #280]	; (80125f8 <fm_menu_config_date_hour+0x28c>)
 80124de:	781b      	ldrb	r3, [r3, #0]
 80124e0:	2b1d      	cmp	r3, #29
 80124e2:	d80b      	bhi.n	80124fc <fm_menu_config_date_hour+0x190>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 80124e4:	4b44      	ldr	r3, [pc, #272]	; (80125f8 <fm_menu_config_date_hour+0x28c>)
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	3301      	adds	r3, #1
 80124ea:	4a44      	ldr	r2, [pc, #272]	; (80125fc <fm_menu_config_date_hour+0x290>)
 80124ec:	7812      	ldrb	r2, [r2, #0]
 80124ee:	4611      	mov	r1, r2
 80124f0:	4a43      	ldr	r2, [pc, #268]	; (8012600 <fm_menu_config_date_hour+0x294>)
 80124f2:	7812      	ldrb	r2, [r2, #0]
 80124f4:	4618      	mov	r0, r3
 80124f6:	f7fc fcaf 	bl	800ee58 <fm_factory_modify_date>
                        if(day_enum < DAY_30)
 80124fa:	e13e      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 80124fc:	4b3f      	ldr	r3, [pc, #252]	; (80125fc <fm_menu_config_date_hour+0x290>)
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	4619      	mov	r1, r3
 8012502:	4b3f      	ldr	r3, [pc, #252]	; (8012600 <fm_menu_config_date_hour+0x294>)
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	461a      	mov	r2, r3
 8012508:	2001      	movs	r0, #1
 801250a:	f7fc fca5 	bl	800ee58 <fm_factory_modify_date>
                        if(day_enum < DAY_30)
 801250e:	e134      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else
                    {
                        if(year_enum % YEAR_4 == 0)
 8012510:	4b3b      	ldr	r3, [pc, #236]	; (8012600 <fm_menu_config_date_hour+0x294>)
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	f003 0303 	and.w	r3, r3, #3
 8012518:	b2db      	uxtb	r3, r3
 801251a:	2b00      	cmp	r3, #0
 801251c:	d119      	bne.n	8012552 <fm_menu_config_date_hour+0x1e6>
                        {
                            if(day_enum < DAY_29)
 801251e:	4b36      	ldr	r3, [pc, #216]	; (80125f8 <fm_menu_config_date_hour+0x28c>)
 8012520:	781b      	ldrb	r3, [r3, #0]
 8012522:	2b1c      	cmp	r3, #28
 8012524:	d80b      	bhi.n	801253e <fm_menu_config_date_hour+0x1d2>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 8012526:	4b34      	ldr	r3, [pc, #208]	; (80125f8 <fm_menu_config_date_hour+0x28c>)
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	3301      	adds	r3, #1
 801252c:	4a33      	ldr	r2, [pc, #204]	; (80125fc <fm_menu_config_date_hour+0x290>)
 801252e:	7812      	ldrb	r2, [r2, #0]
 8012530:	4611      	mov	r1, r2
 8012532:	4a33      	ldr	r2, [pc, #204]	; (8012600 <fm_menu_config_date_hour+0x294>)
 8012534:	7812      	ldrb	r2, [r2, #0]
 8012536:	4618      	mov	r0, r3
 8012538:	f7fc fc8e 	bl	800ee58 <fm_factory_modify_date>
 801253c:	e11d      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 801253e:	4b2f      	ldr	r3, [pc, #188]	; (80125fc <fm_menu_config_date_hour+0x290>)
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	4619      	mov	r1, r3
 8012544:	4b2e      	ldr	r3, [pc, #184]	; (8012600 <fm_menu_config_date_hour+0x294>)
 8012546:	781b      	ldrb	r3, [r3, #0]
 8012548:	461a      	mov	r2, r3
 801254a:	2001      	movs	r0, #1
 801254c:	f7fc fc84 	bl	800ee58 <fm_factory_modify_date>
 8012550:	e113      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if(day_enum < DAY_28)
 8012552:	4b29      	ldr	r3, [pc, #164]	; (80125f8 <fm_menu_config_date_hour+0x28c>)
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	2b1b      	cmp	r3, #27
 8012558:	d80b      	bhi.n	8012572 <fm_menu_config_date_hour+0x206>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 801255a:	4b27      	ldr	r3, [pc, #156]	; (80125f8 <fm_menu_config_date_hour+0x28c>)
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	3301      	adds	r3, #1
 8012560:	4a26      	ldr	r2, [pc, #152]	; (80125fc <fm_menu_config_date_hour+0x290>)
 8012562:	7812      	ldrb	r2, [r2, #0]
 8012564:	4611      	mov	r1, r2
 8012566:	4a26      	ldr	r2, [pc, #152]	; (8012600 <fm_menu_config_date_hour+0x294>)
 8012568:	7812      	ldrb	r2, [r2, #0]
 801256a:	4618      	mov	r0, r3
 801256c:	f7fc fc74 	bl	800ee58 <fm_factory_modify_date>
 8012570:	e103      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 8012572:	4b22      	ldr	r3, [pc, #136]	; (80125fc <fm_menu_config_date_hour+0x290>)
 8012574:	781b      	ldrb	r3, [r3, #0]
 8012576:	4619      	mov	r1, r3
 8012578:	4b21      	ldr	r3, [pc, #132]	; (8012600 <fm_menu_config_date_hour+0x294>)
 801257a:	781b      	ldrb	r3, [r3, #0]
 801257c:	461a      	mov	r2, r3
 801257e:	2001      	movs	r0, #1
 8012580:	f7fc fc6a 	bl	800ee58 <fm_factory_modify_date>
 8012584:	e0f9      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                    }
                }
                else if(field == MONTH)
 8012586:	4b1b      	ldr	r3, [pc, #108]	; (80125f4 <fm_menu_config_date_hour+0x288>)
 8012588:	781b      	ldrb	r3, [r3, #0]
 801258a:	2b01      	cmp	r3, #1
 801258c:	d16a      	bne.n	8012664 <fm_menu_config_date_hour+0x2f8>
                {
                    if(month_enum < DECEMBER)
 801258e:	4b1b      	ldr	r3, [pc, #108]	; (80125fc <fm_menu_config_date_hour+0x290>)
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	2b0b      	cmp	r3, #11
 8012594:	d85c      	bhi.n	8012650 <fm_menu_config_date_hour+0x2e4>
                    {
                        if((month_enum + 1 == APRIL ||
 8012596:	4b19      	ldr	r3, [pc, #100]	; (80125fc <fm_menu_config_date_hour+0x290>)
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	2b03      	cmp	r3, #3
 801259c:	d00b      	beq.n	80125b6 <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == JUNE      ||
 801259e:	4b17      	ldr	r3, [pc, #92]	; (80125fc <fm_menu_config_date_hour+0x290>)
 80125a0:	781b      	ldrb	r3, [r3, #0]
                        if((month_enum + 1 == APRIL ||
 80125a2:	2b05      	cmp	r3, #5
 80125a4:	d007      	beq.n	80125b6 <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == SEPTEMBER ||
 80125a6:	4b15      	ldr	r3, [pc, #84]	; (80125fc <fm_menu_config_date_hour+0x290>)
 80125a8:	781b      	ldrb	r3, [r3, #0]
                        month_enum + 1 == JUNE      ||
 80125aa:	2b08      	cmp	r3, #8
 80125ac:	d003      	beq.n	80125b6 <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == NOVEMBER)
 80125ae:	4b13      	ldr	r3, [pc, #76]	; (80125fc <fm_menu_config_date_hour+0x290>)
 80125b0:	781b      	ldrb	r3, [r3, #0]
                        month_enum + 1 == SEPTEMBER ||
 80125b2:	2b0a      	cmp	r3, #10
 80125b4:	d107      	bne.n	80125c6 <fm_menu_config_date_hour+0x25a>
                        && (day_enum > DAY_30))
 80125b6:	4b10      	ldr	r3, [pc, #64]	; (80125f8 <fm_menu_config_date_hour+0x28c>)
 80125b8:	781b      	ldrb	r3, [r3, #0]
 80125ba:	2b1e      	cmp	r3, #30
 80125bc:	d903      	bls.n	80125c6 <fm_menu_config_date_hour+0x25a>
                        {
                            day_enum = DAY_30;
 80125be:	4b0e      	ldr	r3, [pc, #56]	; (80125f8 <fm_menu_config_date_hour+0x28c>)
 80125c0:	221e      	movs	r2, #30
 80125c2:	701a      	strb	r2, [r3, #0]
 80125c4:	e038      	b.n	8012638 <fm_menu_config_date_hour+0x2cc>
                        }
                        else if((month_enum + 1 == FEBRUARY) &&
 80125c6:	4b0d      	ldr	r3, [pc, #52]	; (80125fc <fm_menu_config_date_hour+0x290>)
 80125c8:	781b      	ldrb	r3, [r3, #0]
 80125ca:	2b01      	cmp	r3, #1
 80125cc:	d122      	bne.n	8012614 <fm_menu_config_date_hour+0x2a8>
                        (year_enum % YEAR_4 == 0) &&
 80125ce:	4b0c      	ldr	r3, [pc, #48]	; (8012600 <fm_menu_config_date_hour+0x294>)
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	f003 0303 	and.w	r3, r3, #3
 80125d6:	b2db      	uxtb	r3, r3
                        else if((month_enum + 1 == FEBRUARY) &&
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d11b      	bne.n	8012614 <fm_menu_config_date_hour+0x2a8>
                        (day_enum > DAY_29))
 80125dc:	4b06      	ldr	r3, [pc, #24]	; (80125f8 <fm_menu_config_date_hour+0x28c>)
 80125de:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 == 0) &&
 80125e0:	2b1d      	cmp	r3, #29
 80125e2:	d917      	bls.n	8012614 <fm_menu_config_date_hour+0x2a8>
                        {
                            day_enum = DAY_29;
 80125e4:	4b04      	ldr	r3, [pc, #16]	; (80125f8 <fm_menu_config_date_hour+0x28c>)
 80125e6:	221d      	movs	r2, #29
 80125e8:	701a      	strb	r2, [r3, #0]
 80125ea:	e025      	b.n	8012638 <fm_menu_config_date_hour+0x2cc>
 80125ec:	0801236d 	.word	0x0801236d
 80125f0:	20000141 	.word	0x20000141
 80125f4:	20001db9 	.word	0x20001db9
 80125f8:	20001dba 	.word	0x20001dba
 80125fc:	20001dbb 	.word	0x20001dbb
 8012600:	20001dbc 	.word	0x20001dbc
 8012604:	20001dbd 	.word	0x20001dbd
 8012608:	20001dbe 	.word	0x20001dbe
 801260c:	20001dbf 	.word	0x20001dbf
 8012610:	20001db6 	.word	0x20001db6
                        }
                        else if((month_enum + 1 == FEBRUARY) &&
 8012614:	4b93      	ldr	r3, [pc, #588]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	2b01      	cmp	r3, #1
 801261a:	d10d      	bne.n	8012638 <fm_menu_config_date_hour+0x2cc>
                        (year_enum % YEAR_4 != 0) &&
 801261c:	4b92      	ldr	r3, [pc, #584]	; (8012868 <fm_menu_config_date_hour+0x4fc>)
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	f003 0303 	and.w	r3, r3, #3
 8012624:	b2db      	uxtb	r3, r3
                        else if((month_enum + 1 == FEBRUARY) &&
 8012626:	2b00      	cmp	r3, #0
 8012628:	d006      	beq.n	8012638 <fm_menu_config_date_hour+0x2cc>
                        (day_enum > DAY_28))
 801262a:	4b90      	ldr	r3, [pc, #576]	; (801286c <fm_menu_config_date_hour+0x500>)
 801262c:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 != 0) &&
 801262e:	2b1c      	cmp	r3, #28
 8012630:	d902      	bls.n	8012638 <fm_menu_config_date_hour+0x2cc>
                        {
                            day_enum = DAY_28;
 8012632:	4b8e      	ldr	r3, [pc, #568]	; (801286c <fm_menu_config_date_hour+0x500>)
 8012634:	221c      	movs	r2, #28
 8012636:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum + 1,
 8012638:	4b8c      	ldr	r3, [pc, #560]	; (801286c <fm_menu_config_date_hour+0x500>)
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	4618      	mov	r0, r3
 801263e:	4b89      	ldr	r3, [pc, #548]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	3301      	adds	r3, #1
 8012644:	4a88      	ldr	r2, [pc, #544]	; (8012868 <fm_menu_config_date_hour+0x4fc>)
 8012646:	7812      	ldrb	r2, [r2, #0]
 8012648:	4619      	mov	r1, r3
 801264a:	f7fc fc05 	bl	800ee58 <fm_factory_modify_date>
 801264e:	e094      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, JANUARY, year_enum);
 8012650:	4b86      	ldr	r3, [pc, #536]	; (801286c <fm_menu_config_date_hour+0x500>)
 8012652:	781b      	ldrb	r3, [r3, #0]
 8012654:	4618      	mov	r0, r3
 8012656:	4b84      	ldr	r3, [pc, #528]	; (8012868 <fm_menu_config_date_hour+0x4fc>)
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	461a      	mov	r2, r3
 801265c:	2101      	movs	r1, #1
 801265e:	f7fc fbfb 	bl	800ee58 <fm_factory_modify_date>
 8012662:	e08a      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if(field == YEAR)
 8012664:	4b82      	ldr	r3, [pc, #520]	; (8012870 <fm_menu_config_date_hour+0x504>)
 8012666:	781b      	ldrb	r3, [r3, #0]
 8012668:	2b02      	cmp	r3, #2
 801266a:	d12c      	bne.n	80126c6 <fm_menu_config_date_hour+0x35a>
                {
                    if(year_enum < YEAR_99)
 801266c:	4b7e      	ldr	r3, [pc, #504]	; (8012868 <fm_menu_config_date_hour+0x4fc>)
 801266e:	781b      	ldrb	r3, [r3, #0]
 8012670:	2b62      	cmp	r3, #98	; 0x62
 8012672:	d81e      	bhi.n	80126b2 <fm_menu_config_date_hour+0x346>
                    {
                        if(((year_enum + 1) % YEAR_4 != YEAR_0) &&
 8012674:	4b7c      	ldr	r3, [pc, #496]	; (8012868 <fm_menu_config_date_hour+0x4fc>)
 8012676:	781b      	ldrb	r3, [r3, #0]
 8012678:	3301      	adds	r3, #1
 801267a:	f003 0303 	and.w	r3, r3, #3
 801267e:	2b00      	cmp	r3, #0
 8012680:	d00a      	beq.n	8012698 <fm_menu_config_date_hour+0x32c>
                        (month_enum == FEBRUARY) &&
 8012682:	4b78      	ldr	r3, [pc, #480]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 8012684:	781b      	ldrb	r3, [r3, #0]
                        if(((year_enum + 1) % YEAR_4 != YEAR_0) &&
 8012686:	2b02      	cmp	r3, #2
 8012688:	d106      	bne.n	8012698 <fm_menu_config_date_hour+0x32c>
                        (day_enum > DAY_28))
 801268a:	4b78      	ldr	r3, [pc, #480]	; (801286c <fm_menu_config_date_hour+0x500>)
 801268c:	781b      	ldrb	r3, [r3, #0]
                        (month_enum == FEBRUARY) &&
 801268e:	2b1c      	cmp	r3, #28
 8012690:	d902      	bls.n	8012698 <fm_menu_config_date_hour+0x32c>
                        {
                            day_enum = DAY_28;
 8012692:	4b76      	ldr	r3, [pc, #472]	; (801286c <fm_menu_config_date_hour+0x500>)
 8012694:	221c      	movs	r2, #28
 8012696:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum, year_enum
 8012698:	4b74      	ldr	r3, [pc, #464]	; (801286c <fm_menu_config_date_hour+0x500>)
 801269a:	781b      	ldrb	r3, [r3, #0]
 801269c:	4618      	mov	r0, r3
 801269e:	4b71      	ldr	r3, [pc, #452]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	4619      	mov	r1, r3
 80126a4:	4b70      	ldr	r3, [pc, #448]	; (8012868 <fm_menu_config_date_hour+0x4fc>)
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	3301      	adds	r3, #1
 80126aa:	461a      	mov	r2, r3
 80126ac:	f7fc fbd4 	bl	800ee58 <fm_factory_modify_date>
 80126b0:	e063      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                        + 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_0);
 80126b2:	4b6e      	ldr	r3, [pc, #440]	; (801286c <fm_menu_config_date_hour+0x500>)
 80126b4:	781b      	ldrb	r3, [r3, #0]
 80126b6:	4618      	mov	r0, r3
 80126b8:	4b6a      	ldr	r3, [pc, #424]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 80126ba:	781b      	ldrb	r3, [r3, #0]
 80126bc:	2200      	movs	r2, #0
 80126be:	4619      	mov	r1, r3
 80126c0:	f7fc fbca 	bl	800ee58 <fm_factory_modify_date>
 80126c4:	e059      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if(field == HOUR)
 80126c6:	4b6a      	ldr	r3, [pc, #424]	; (8012870 <fm_menu_config_date_hour+0x504>)
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	2b03      	cmp	r3, #3
 80126cc:	d119      	bne.n	8012702 <fm_menu_config_date_hour+0x396>
                {
                    if(hour_enum < HOUR_23)
 80126ce:	4b69      	ldr	r3, [pc, #420]	; (8012874 <fm_menu_config_date_hour+0x508>)
 80126d0:	781b      	ldrb	r3, [r3, #0]
 80126d2:	2b16      	cmp	r3, #22
 80126d4:	d80b      	bhi.n	80126ee <fm_menu_config_date_hour+0x382>
                    {
                        fm_factory_modify_time(hour_enum + 1,
 80126d6:	4b67      	ldr	r3, [pc, #412]	; (8012874 <fm_menu_config_date_hour+0x508>)
 80126d8:	781b      	ldrb	r3, [r3, #0]
 80126da:	3301      	adds	r3, #1
 80126dc:	4a66      	ldr	r2, [pc, #408]	; (8012878 <fm_menu_config_date_hour+0x50c>)
 80126de:	7812      	ldrb	r2, [r2, #0]
 80126e0:	4611      	mov	r1, r2
 80126e2:	4a66      	ldr	r2, [pc, #408]	; (801287c <fm_menu_config_date_hour+0x510>)
 80126e4:	7812      	ldrb	r2, [r2, #0]
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7fc fbe2 	bl	800eeb0 <fm_factory_modify_time>
 80126ec:	e045      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                        minute_enum,
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_0, minute_enum,
 80126ee:	4b62      	ldr	r3, [pc, #392]	; (8012878 <fm_menu_config_date_hour+0x50c>)
 80126f0:	781b      	ldrb	r3, [r3, #0]
 80126f2:	4619      	mov	r1, r3
 80126f4:	4b61      	ldr	r3, [pc, #388]	; (801287c <fm_menu_config_date_hour+0x510>)
 80126f6:	781b      	ldrb	r3, [r3, #0]
 80126f8:	461a      	mov	r2, r3
 80126fa:	2000      	movs	r0, #0
 80126fc:	f7fc fbd8 	bl	800eeb0 <fm_factory_modify_time>
 8012700:	e03b      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                }
                else if(field == MINUTE)
 8012702:	4b5b      	ldr	r3, [pc, #364]	; (8012870 <fm_menu_config_date_hour+0x504>)
 8012704:	781b      	ldrb	r3, [r3, #0]
 8012706:	2b04      	cmp	r3, #4
 8012708:	d119      	bne.n	801273e <fm_menu_config_date_hour+0x3d2>
                {
                    if(minute_enum < MINU_59)
 801270a:	4b5b      	ldr	r3, [pc, #364]	; (8012878 <fm_menu_config_date_hour+0x50c>)
 801270c:	781b      	ldrb	r3, [r3, #0]
 801270e:	2b3a      	cmp	r3, #58	; 0x3a
 8012710:	d80b      	bhi.n	801272a <fm_menu_config_date_hour+0x3be>
                    {
                        fm_factory_modify_time(hour_enum,
 8012712:	4b58      	ldr	r3, [pc, #352]	; (8012874 <fm_menu_config_date_hour+0x508>)
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	4618      	mov	r0, r3
 8012718:	4b57      	ldr	r3, [pc, #348]	; (8012878 <fm_menu_config_date_hour+0x50c>)
 801271a:	781b      	ldrb	r3, [r3, #0]
 801271c:	3301      	adds	r3, #1
 801271e:	4a57      	ldr	r2, [pc, #348]	; (801287c <fm_menu_config_date_hour+0x510>)
 8012720:	7812      	ldrb	r2, [r2, #0]
 8012722:	4619      	mov	r1, r3
 8012724:	f7fc fbc4 	bl	800eeb0 <fm_factory_modify_time>
 8012728:	e027      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                        minute_enum + 1,
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum,
 801272a:	4b52      	ldr	r3, [pc, #328]	; (8012874 <fm_menu_config_date_hour+0x508>)
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	4618      	mov	r0, r3
 8012730:	4b52      	ldr	r3, [pc, #328]	; (801287c <fm_menu_config_date_hour+0x510>)
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	461a      	mov	r2, r3
 8012736:	2100      	movs	r1, #0
 8012738:	f7fc fbba 	bl	800eeb0 <fm_factory_modify_time>
 801273c:	e01d      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                        MINU_0, second_enum);
                    }
                }
                else if(field == SECOND)
 801273e:	4b4c      	ldr	r3, [pc, #304]	; (8012870 <fm_menu_config_date_hour+0x504>)
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	2b05      	cmp	r3, #5
 8012744:	d119      	bne.n	801277a <fm_menu_config_date_hour+0x40e>
                {
                    if(second_enum < SEC_59)
 8012746:	4b4d      	ldr	r3, [pc, #308]	; (801287c <fm_menu_config_date_hour+0x510>)
 8012748:	781b      	ldrb	r3, [r3, #0]
 801274a:	2b3a      	cmp	r3, #58	; 0x3a
 801274c:	d80c      	bhi.n	8012768 <fm_menu_config_date_hour+0x3fc>
                    {
                        fm_factory_modify_time(hour_enum,
 801274e:	4b49      	ldr	r3, [pc, #292]	; (8012874 <fm_menu_config_date_hour+0x508>)
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	4618      	mov	r0, r3
 8012754:	4b48      	ldr	r3, [pc, #288]	; (8012878 <fm_menu_config_date_hour+0x50c>)
 8012756:	781b      	ldrb	r3, [r3, #0]
 8012758:	4619      	mov	r1, r3
 801275a:	4b48      	ldr	r3, [pc, #288]	; (801287c <fm_menu_config_date_hour+0x510>)
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	3301      	adds	r3, #1
 8012760:	461a      	mov	r2, r3
 8012762:	f7fc fba5 	bl	800eeb0 <fm_factory_modify_time>
 8012766:	e008      	b.n	801277a <fm_menu_config_date_hour+0x40e>
                        minute_enum,
                        second_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum,
 8012768:	4b42      	ldr	r3, [pc, #264]	; (8012874 <fm_menu_config_date_hour+0x508>)
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	4618      	mov	r0, r3
 801276e:	4b42      	ldr	r3, [pc, #264]	; (8012878 <fm_menu_config_date_hour+0x50c>)
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	2200      	movs	r2, #0
 8012774:	4619      	mov	r1, r3
 8012776:	f7fc fb9b 	bl	800eeb0 <fm_factory_modify_time>
                        minute_enum,
                        SEC_0);
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 801277a:	2301      	movs	r3, #1
 801277c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012780:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012784:	2200      	movs	r2, #0
 8012786:	4619      	mov	r1, r3
 8012788:	483d      	ldr	r0, [pc, #244]	; (8012880 <fm_menu_config_date_hour+0x514>)
 801278a:	f7fb fd6b 	bl	800e264 <_txe_queue_send>
            }
        break;
 801278e:	e208      	b.n	8012ba2 <fm_menu_config_date_hour+0x836>
        case EVENT_KEY_DOWN:
            if(correct_password)
 8012790:	4b3c      	ldr	r3, [pc, #240]	; (8012884 <fm_menu_config_date_hour+0x518>)
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	2b00      	cmp	r3, #0
 8012796:	f000 8206 	beq.w	8012ba6 <fm_menu_config_date_hour+0x83a>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if(field == DAY)
 801279a:	4b35      	ldr	r3, [pc, #212]	; (8012870 <fm_menu_config_date_hour+0x504>)
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	f040 80ad 	bne.w	80128fe <fm_menu_config_date_hour+0x592>
                {
                    if(month_enum == JANUARY || month_enum == MARCH   ||
 80127a4:	4b2f      	ldr	r3, [pc, #188]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 80127a6:	781b      	ldrb	r3, [r3, #0]
 80127a8:	2b01      	cmp	r3, #1
 80127aa:	d017      	beq.n	80127dc <fm_menu_config_date_hour+0x470>
 80127ac:	4b2d      	ldr	r3, [pc, #180]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 80127ae:	781b      	ldrb	r3, [r3, #0]
 80127b0:	2b03      	cmp	r3, #3
 80127b2:	d013      	beq.n	80127dc <fm_menu_config_date_hour+0x470>
                    month_enum == MAY        || month_enum == JULY    ||
 80127b4:	4b2b      	ldr	r3, [pc, #172]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 80127b6:	781b      	ldrb	r3, [r3, #0]
                    if(month_enum == JANUARY || month_enum == MARCH   ||
 80127b8:	2b05      	cmp	r3, #5
 80127ba:	d00f      	beq.n	80127dc <fm_menu_config_date_hour+0x470>
                    month_enum == MAY        || month_enum == JULY    ||
 80127bc:	4b29      	ldr	r3, [pc, #164]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 80127be:	781b      	ldrb	r3, [r3, #0]
 80127c0:	2b07      	cmp	r3, #7
 80127c2:	d00b      	beq.n	80127dc <fm_menu_config_date_hour+0x470>
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 80127c4:	4b27      	ldr	r3, [pc, #156]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 80127c6:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MAY        || month_enum == JULY    ||
 80127c8:	2b08      	cmp	r3, #8
 80127ca:	d007      	beq.n	80127dc <fm_menu_config_date_hour+0x470>
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 80127cc:	4b25      	ldr	r3, [pc, #148]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	2b0a      	cmp	r3, #10
 80127d2:	d003      	beq.n	80127dc <fm_menu_config_date_hour+0x470>
                    month_enum == DECEMBER)
 80127d4:	4b23      	ldr	r3, [pc, #140]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 80127d6:	781b      	ldrb	r3, [r3, #0]
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 80127d8:	2b0c      	cmp	r3, #12
 80127da:	d119      	bne.n	8012810 <fm_menu_config_date_hour+0x4a4>
                    {
                        if(day_enum > DAY_1)
 80127dc:	4b23      	ldr	r3, [pc, #140]	; (801286c <fm_menu_config_date_hour+0x500>)
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	2b01      	cmp	r3, #1
 80127e2:	d90b      	bls.n	80127fc <fm_menu_config_date_hour+0x490>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 80127e4:	4b21      	ldr	r3, [pc, #132]	; (801286c <fm_menu_config_date_hour+0x500>)
 80127e6:	781b      	ldrb	r3, [r3, #0]
 80127e8:	3b01      	subs	r3, #1
 80127ea:	4a1e      	ldr	r2, [pc, #120]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 80127ec:	7812      	ldrb	r2, [r2, #0]
 80127ee:	4611      	mov	r1, r2
 80127f0:	4a1d      	ldr	r2, [pc, #116]	; (8012868 <fm_menu_config_date_hour+0x4fc>)
 80127f2:	7812      	ldrb	r2, [r2, #0]
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7fc fb2f 	bl	800ee58 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 80127fa:	e166      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_31, month_enum,
 80127fc:	4b19      	ldr	r3, [pc, #100]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	4619      	mov	r1, r3
 8012802:	4b19      	ldr	r3, [pc, #100]	; (8012868 <fm_menu_config_date_hour+0x4fc>)
 8012804:	781b      	ldrb	r3, [r3, #0]
 8012806:	461a      	mov	r2, r3
 8012808:	201f      	movs	r0, #31
 801280a:	f7fc fb25 	bl	800ee58 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 801280e:	e15c      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                    }
                    else if(month_enum == APRIL || month_enum == JUNE ||
 8012810:	4b14      	ldr	r3, [pc, #80]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	2b04      	cmp	r3, #4
 8012816:	d00b      	beq.n	8012830 <fm_menu_config_date_hour+0x4c4>
 8012818:	4b12      	ldr	r3, [pc, #72]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 801281a:	781b      	ldrb	r3, [r3, #0]
 801281c:	2b06      	cmp	r3, #6
 801281e:	d007      	beq.n	8012830 <fm_menu_config_date_hour+0x4c4>
                    month_enum == SEPTEMBER     || month_enum == NOVEMBER)
 8012820:	4b10      	ldr	r3, [pc, #64]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 8012822:	781b      	ldrb	r3, [r3, #0]
                    else if(month_enum == APRIL || month_enum == JUNE ||
 8012824:	2b09      	cmp	r3, #9
 8012826:	d003      	beq.n	8012830 <fm_menu_config_date_hour+0x4c4>
                    month_enum == SEPTEMBER     || month_enum == NOVEMBER)
 8012828:	4b0e      	ldr	r3, [pc, #56]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	2b0b      	cmp	r3, #11
 801282e:	d12b      	bne.n	8012888 <fm_menu_config_date_hour+0x51c>
                    {
                        if(day_enum > DAY_1)
 8012830:	4b0e      	ldr	r3, [pc, #56]	; (801286c <fm_menu_config_date_hour+0x500>)
 8012832:	781b      	ldrb	r3, [r3, #0]
 8012834:	2b01      	cmp	r3, #1
 8012836:	d90b      	bls.n	8012850 <fm_menu_config_date_hour+0x4e4>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012838:	4b0c      	ldr	r3, [pc, #48]	; (801286c <fm_menu_config_date_hour+0x500>)
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	3b01      	subs	r3, #1
 801283e:	4a09      	ldr	r2, [pc, #36]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 8012840:	7812      	ldrb	r2, [r2, #0]
 8012842:	4611      	mov	r1, r2
 8012844:	4a08      	ldr	r2, [pc, #32]	; (8012868 <fm_menu_config_date_hour+0x4fc>)
 8012846:	7812      	ldrb	r2, [r2, #0]
 8012848:	4618      	mov	r0, r3
 801284a:	f7fc fb05 	bl	800ee58 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 801284e:	e13c      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_30, month_enum,
 8012850:	4b04      	ldr	r3, [pc, #16]	; (8012864 <fm_menu_config_date_hour+0x4f8>)
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	4619      	mov	r1, r3
 8012856:	4b04      	ldr	r3, [pc, #16]	; (8012868 <fm_menu_config_date_hour+0x4fc>)
 8012858:	781b      	ldrb	r3, [r3, #0]
 801285a:	461a      	mov	r2, r3
 801285c:	201e      	movs	r0, #30
 801285e:	f7fc fafb 	bl	800ee58 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 8012862:	e132      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
 8012864:	20001dbb 	.word	0x20001dbb
 8012868:	20001dbc 	.word	0x20001dbc
 801286c:	20001dba 	.word	0x20001dba
 8012870:	20001db9 	.word	0x20001db9
 8012874:	20001dbd 	.word	0x20001dbd
 8012878:	20001dbe 	.word	0x20001dbe
 801287c:	20001dbf 	.word	0x20001dbf
 8012880:	20001388 	.word	0x20001388
 8012884:	20001db6 	.word	0x20001db6
                            year_enum);
                        }
                    }
                    else
                    {
                        if(year_enum % YEAR_4 == 0)
 8012888:	4b95      	ldr	r3, [pc, #596]	; (8012ae0 <fm_menu_config_date_hour+0x774>)
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	f003 0303 	and.w	r3, r3, #3
 8012890:	b2db      	uxtb	r3, r3
 8012892:	2b00      	cmp	r3, #0
 8012894:	d119      	bne.n	80128ca <fm_menu_config_date_hour+0x55e>
                        {
                            if(day_enum > DAY_1)
 8012896:	4b93      	ldr	r3, [pc, #588]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	2b01      	cmp	r3, #1
 801289c:	d90b      	bls.n	80128b6 <fm_menu_config_date_hour+0x54a>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 801289e:	4b91      	ldr	r3, [pc, #580]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	3b01      	subs	r3, #1
 80128a4:	4a90      	ldr	r2, [pc, #576]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 80128a6:	7812      	ldrb	r2, [r2, #0]
 80128a8:	4611      	mov	r1, r2
 80128aa:	4a8d      	ldr	r2, [pc, #564]	; (8012ae0 <fm_menu_config_date_hour+0x774>)
 80128ac:	7812      	ldrb	r2, [r2, #0]
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7fc fad2 	bl	800ee58 <fm_factory_modify_date>
 80128b4:	e109      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_29, month_enum,
 80128b6:	4b8c      	ldr	r3, [pc, #560]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	4619      	mov	r1, r3
 80128bc:	4b88      	ldr	r3, [pc, #544]	; (8012ae0 <fm_menu_config_date_hour+0x774>)
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	461a      	mov	r2, r3
 80128c2:	201d      	movs	r0, #29
 80128c4:	f7fc fac8 	bl	800ee58 <fm_factory_modify_date>
 80128c8:	e0ff      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if(day_enum > DAY_1)
 80128ca:	4b86      	ldr	r3, [pc, #536]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	d90b      	bls.n	80128ea <fm_menu_config_date_hour+0x57e>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 80128d2:	4b84      	ldr	r3, [pc, #528]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 80128d4:	781b      	ldrb	r3, [r3, #0]
 80128d6:	3b01      	subs	r3, #1
 80128d8:	4a83      	ldr	r2, [pc, #524]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 80128da:	7812      	ldrb	r2, [r2, #0]
 80128dc:	4611      	mov	r1, r2
 80128de:	4a80      	ldr	r2, [pc, #512]	; (8012ae0 <fm_menu_config_date_hour+0x774>)
 80128e0:	7812      	ldrb	r2, [r2, #0]
 80128e2:	4618      	mov	r0, r3
 80128e4:	f7fc fab8 	bl	800ee58 <fm_factory_modify_date>
 80128e8:	e0ef      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_28, month_enum,
 80128ea:	4b7f      	ldr	r3, [pc, #508]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 80128ec:	781b      	ldrb	r3, [r3, #0]
 80128ee:	4619      	mov	r1, r3
 80128f0:	4b7b      	ldr	r3, [pc, #492]	; (8012ae0 <fm_menu_config_date_hour+0x774>)
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	461a      	mov	r2, r3
 80128f6:	201c      	movs	r0, #28
 80128f8:	f7fc faae 	bl	800ee58 <fm_factory_modify_date>
 80128fc:	e0e5      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                    }
                }
                else if(field == MONTH)
 80128fe:	4b7b      	ldr	r3, [pc, #492]	; (8012aec <fm_menu_config_date_hour+0x780>)
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	2b01      	cmp	r3, #1
 8012904:	d156      	bne.n	80129b4 <fm_menu_config_date_hour+0x648>
                {
                    if(month_enum > JANUARY)
 8012906:	4b78      	ldr	r3, [pc, #480]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 8012908:	781b      	ldrb	r3, [r3, #0]
 801290a:	2b01      	cmp	r3, #1
 801290c:	d948      	bls.n	80129a0 <fm_menu_config_date_hour+0x634>
                    {
                        if((month_enum - 1 == APRIL ||
 801290e:	4b76      	ldr	r3, [pc, #472]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	2b05      	cmp	r3, #5
 8012914:	d00b      	beq.n	801292e <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == JUNE      ||
 8012916:	4b74      	ldr	r3, [pc, #464]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 8012918:	781b      	ldrb	r3, [r3, #0]
                        if((month_enum - 1 == APRIL ||
 801291a:	2b07      	cmp	r3, #7
 801291c:	d007      	beq.n	801292e <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == SEPTEMBER ||
 801291e:	4b72      	ldr	r3, [pc, #456]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 8012920:	781b      	ldrb	r3, [r3, #0]
                        month_enum - 1 == JUNE      ||
 8012922:	2b0a      	cmp	r3, #10
 8012924:	d003      	beq.n	801292e <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 8012926:	4b70      	ldr	r3, [pc, #448]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 8012928:	781b      	ldrb	r3, [r3, #0]
                        month_enum - 1 == SEPTEMBER ||
 801292a:	2b0c      	cmp	r3, #12
 801292c:	d107      	bne.n	801293e <fm_menu_config_date_hour+0x5d2>
                        month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 801292e:	4b6d      	ldr	r3, [pc, #436]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 8012930:	781b      	ldrb	r3, [r3, #0]
 8012932:	2b1e      	cmp	r3, #30
 8012934:	d903      	bls.n	801293e <fm_menu_config_date_hour+0x5d2>
                        {
                            day_enum = DAY_30;
 8012936:	4b6b      	ldr	r3, [pc, #428]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 8012938:	221e      	movs	r2, #30
 801293a:	701a      	strb	r2, [r3, #0]
 801293c:	e024      	b.n	8012988 <fm_menu_config_date_hour+0x61c>
                        }
                        else if((month_enum - 1 == FEBRUARY) &&
 801293e:	4b6a      	ldr	r3, [pc, #424]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	2b03      	cmp	r3, #3
 8012944:	d10e      	bne.n	8012964 <fm_menu_config_date_hour+0x5f8>
                        (year_enum % YEAR_4 == 0) &&
 8012946:	4b66      	ldr	r3, [pc, #408]	; (8012ae0 <fm_menu_config_date_hour+0x774>)
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	f003 0303 	and.w	r3, r3, #3
 801294e:	b2db      	uxtb	r3, r3
                        else if((month_enum - 1 == FEBRUARY) &&
 8012950:	2b00      	cmp	r3, #0
 8012952:	d107      	bne.n	8012964 <fm_menu_config_date_hour+0x5f8>
                        (day_enum > DAY_29))
 8012954:	4b63      	ldr	r3, [pc, #396]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 8012956:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 == 0) &&
 8012958:	2b1d      	cmp	r3, #29
 801295a:	d903      	bls.n	8012964 <fm_menu_config_date_hour+0x5f8>
                        {
                            day_enum = DAY_29;
 801295c:	4b61      	ldr	r3, [pc, #388]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 801295e:	221d      	movs	r2, #29
 8012960:	701a      	strb	r2, [r3, #0]
 8012962:	e011      	b.n	8012988 <fm_menu_config_date_hour+0x61c>
                        }
                        else if((month_enum - 1 == FEBRUARY) &&
 8012964:	4b60      	ldr	r3, [pc, #384]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	2b03      	cmp	r3, #3
 801296a:	d10d      	bne.n	8012988 <fm_menu_config_date_hour+0x61c>
                        (year_enum % YEAR_4 != 0) &&
 801296c:	4b5c      	ldr	r3, [pc, #368]	; (8012ae0 <fm_menu_config_date_hour+0x774>)
 801296e:	781b      	ldrb	r3, [r3, #0]
 8012970:	f003 0303 	and.w	r3, r3, #3
 8012974:	b2db      	uxtb	r3, r3
                        else if((month_enum - 1 == FEBRUARY) &&
 8012976:	2b00      	cmp	r3, #0
 8012978:	d006      	beq.n	8012988 <fm_menu_config_date_hour+0x61c>
                        (day_enum > DAY_28))
 801297a:	4b5a      	ldr	r3, [pc, #360]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 801297c:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 != 0) &&
 801297e:	2b1c      	cmp	r3, #28
 8012980:	d902      	bls.n	8012988 <fm_menu_config_date_hour+0x61c>
                        {
                            day_enum = DAY_28;
 8012982:	4b58      	ldr	r3, [pc, #352]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 8012984:	221c      	movs	r2, #28
 8012986:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum - 1,
 8012988:	4b56      	ldr	r3, [pc, #344]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	4618      	mov	r0, r3
 801298e:	4b56      	ldr	r3, [pc, #344]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	3b01      	subs	r3, #1
 8012994:	4a52      	ldr	r2, [pc, #328]	; (8012ae0 <fm_menu_config_date_hour+0x774>)
 8012996:	7812      	ldrb	r2, [r2, #0]
 8012998:	4619      	mov	r1, r3
 801299a:	f7fc fa5d 	bl	800ee58 <fm_factory_modify_date>
 801299e:	e094      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, DECEMBER, year_enum);
 80129a0:	4b50      	ldr	r3, [pc, #320]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	4618      	mov	r0, r3
 80129a6:	4b4e      	ldr	r3, [pc, #312]	; (8012ae0 <fm_menu_config_date_hour+0x774>)
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	461a      	mov	r2, r3
 80129ac:	210c      	movs	r1, #12
 80129ae:	f7fc fa53 	bl	800ee58 <fm_factory_modify_date>
 80129b2:	e08a      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == YEAR)
 80129b4:	4b4d      	ldr	r3, [pc, #308]	; (8012aec <fm_menu_config_date_hour+0x780>)
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	2b02      	cmp	r3, #2
 80129ba:	d12c      	bne.n	8012a16 <fm_menu_config_date_hour+0x6aa>
                {
                    if(year_enum > YEAR_0)
 80129bc:	4b48      	ldr	r3, [pc, #288]	; (8012ae0 <fm_menu_config_date_hour+0x774>)
 80129be:	781b      	ldrb	r3, [r3, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d01e      	beq.n	8012a02 <fm_menu_config_date_hour+0x696>
                    {
                        if(((year_enum - 1) % YEAR_4 != YEAR_0) &&
 80129c4:	4b46      	ldr	r3, [pc, #280]	; (8012ae0 <fm_menu_config_date_hour+0x774>)
 80129c6:	781b      	ldrb	r3, [r3, #0]
 80129c8:	3b01      	subs	r3, #1
 80129ca:	f003 0303 	and.w	r3, r3, #3
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d00a      	beq.n	80129e8 <fm_menu_config_date_hour+0x67c>
                        (month_enum == FEBRUARY) &&
 80129d2:	4b45      	ldr	r3, [pc, #276]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 80129d4:	781b      	ldrb	r3, [r3, #0]
                        if(((year_enum - 1) % YEAR_4 != YEAR_0) &&
 80129d6:	2b02      	cmp	r3, #2
 80129d8:	d106      	bne.n	80129e8 <fm_menu_config_date_hour+0x67c>
                        (day_enum > DAY_28))
 80129da:	4b42      	ldr	r3, [pc, #264]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 80129dc:	781b      	ldrb	r3, [r3, #0]
                        (month_enum == FEBRUARY) &&
 80129de:	2b1c      	cmp	r3, #28
 80129e0:	d902      	bls.n	80129e8 <fm_menu_config_date_hour+0x67c>
                        {
                            day_enum = DAY_28;
 80129e2:	4b40      	ldr	r3, [pc, #256]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 80129e4:	221c      	movs	r2, #28
 80129e6:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 80129e8:	4b3e      	ldr	r3, [pc, #248]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	4618      	mov	r0, r3
 80129ee:	4b3e      	ldr	r3, [pc, #248]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	4619      	mov	r1, r3
 80129f4:	4b3a      	ldr	r3, [pc, #232]	; (8012ae0 <fm_menu_config_date_hour+0x774>)
 80129f6:	781b      	ldrb	r3, [r3, #0]
 80129f8:	3b01      	subs	r3, #1
 80129fa:	461a      	mov	r2, r3
 80129fc:	f7fc fa2c 	bl	800ee58 <fm_factory_modify_date>
 8012a00:	e063      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                        year_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_99);
 8012a02:	4b38      	ldr	r3, [pc, #224]	; (8012ae4 <fm_menu_config_date_hour+0x778>)
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	4618      	mov	r0, r3
 8012a08:	4b37      	ldr	r3, [pc, #220]	; (8012ae8 <fm_menu_config_date_hour+0x77c>)
 8012a0a:	781b      	ldrb	r3, [r3, #0]
 8012a0c:	2263      	movs	r2, #99	; 0x63
 8012a0e:	4619      	mov	r1, r3
 8012a10:	f7fc fa22 	bl	800ee58 <fm_factory_modify_date>
 8012a14:	e059      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == HOUR)
 8012a16:	4b35      	ldr	r3, [pc, #212]	; (8012aec <fm_menu_config_date_hour+0x780>)
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	2b03      	cmp	r3, #3
 8012a1c:	d119      	bne.n	8012a52 <fm_menu_config_date_hour+0x6e6>
                {
                    if(hour_enum > HOUR_0)
 8012a1e:	4b34      	ldr	r3, [pc, #208]	; (8012af0 <fm_menu_config_date_hour+0x784>)
 8012a20:	781b      	ldrb	r3, [r3, #0]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d00b      	beq.n	8012a3e <fm_menu_config_date_hour+0x6d2>
                    {
                        fm_factory_modify_time(hour_enum - 1, minute_enum,
 8012a26:	4b32      	ldr	r3, [pc, #200]	; (8012af0 <fm_menu_config_date_hour+0x784>)
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	3b01      	subs	r3, #1
 8012a2c:	4a31      	ldr	r2, [pc, #196]	; (8012af4 <fm_menu_config_date_hour+0x788>)
 8012a2e:	7812      	ldrb	r2, [r2, #0]
 8012a30:	4611      	mov	r1, r2
 8012a32:	4a31      	ldr	r2, [pc, #196]	; (8012af8 <fm_menu_config_date_hour+0x78c>)
 8012a34:	7812      	ldrb	r2, [r2, #0]
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7fc fa3a 	bl	800eeb0 <fm_factory_modify_time>
 8012a3c:	e045      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_23, minute_enum,
 8012a3e:	4b2d      	ldr	r3, [pc, #180]	; (8012af4 <fm_menu_config_date_hour+0x788>)
 8012a40:	781b      	ldrb	r3, [r3, #0]
 8012a42:	4619      	mov	r1, r3
 8012a44:	4b2c      	ldr	r3, [pc, #176]	; (8012af8 <fm_menu_config_date_hour+0x78c>)
 8012a46:	781b      	ldrb	r3, [r3, #0]
 8012a48:	461a      	mov	r2, r3
 8012a4a:	2017      	movs	r0, #23
 8012a4c:	f7fc fa30 	bl	800eeb0 <fm_factory_modify_time>
 8012a50:	e03b      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                }
                else if(field == MINUTE)
 8012a52:	4b26      	ldr	r3, [pc, #152]	; (8012aec <fm_menu_config_date_hour+0x780>)
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	2b04      	cmp	r3, #4
 8012a58:	d119      	bne.n	8012a8e <fm_menu_config_date_hour+0x722>
                {
                    if(minute_enum > MINU_0)
 8012a5a:	4b26      	ldr	r3, [pc, #152]	; (8012af4 <fm_menu_config_date_hour+0x788>)
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d00b      	beq.n	8012a7a <fm_menu_config_date_hour+0x70e>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum - 1,
 8012a62:	4b23      	ldr	r3, [pc, #140]	; (8012af0 <fm_menu_config_date_hour+0x784>)
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	4618      	mov	r0, r3
 8012a68:	4b22      	ldr	r3, [pc, #136]	; (8012af4 <fm_menu_config_date_hour+0x788>)
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	3b01      	subs	r3, #1
 8012a6e:	4a22      	ldr	r2, [pc, #136]	; (8012af8 <fm_menu_config_date_hour+0x78c>)
 8012a70:	7812      	ldrb	r2, [r2, #0]
 8012a72:	4619      	mov	r1, r3
 8012a74:	f7fc fa1c 	bl	800eeb0 <fm_factory_modify_time>
 8012a78:	e027      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_59, second_enum);
 8012a7a:	4b1d      	ldr	r3, [pc, #116]	; (8012af0 <fm_menu_config_date_hour+0x784>)
 8012a7c:	781b      	ldrb	r3, [r3, #0]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	4b1d      	ldr	r3, [pc, #116]	; (8012af8 <fm_menu_config_date_hour+0x78c>)
 8012a82:	781b      	ldrb	r3, [r3, #0]
 8012a84:	461a      	mov	r2, r3
 8012a86:	213b      	movs	r1, #59	; 0x3b
 8012a88:	f7fc fa12 	bl	800eeb0 <fm_factory_modify_time>
 8012a8c:	e01d      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == SECOND)
 8012a8e:	4b17      	ldr	r3, [pc, #92]	; (8012aec <fm_menu_config_date_hour+0x780>)
 8012a90:	781b      	ldrb	r3, [r3, #0]
 8012a92:	2b05      	cmp	r3, #5
 8012a94:	d119      	bne.n	8012aca <fm_menu_config_date_hour+0x75e>
                {
                    if(second_enum > SEC_0)
 8012a96:	4b18      	ldr	r3, [pc, #96]	; (8012af8 <fm_menu_config_date_hour+0x78c>)
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d00c      	beq.n	8012ab8 <fm_menu_config_date_hour+0x74c>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 8012a9e:	4b14      	ldr	r3, [pc, #80]	; (8012af0 <fm_menu_config_date_hour+0x784>)
 8012aa0:	781b      	ldrb	r3, [r3, #0]
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	4b13      	ldr	r3, [pc, #76]	; (8012af4 <fm_menu_config_date_hour+0x788>)
 8012aa6:	781b      	ldrb	r3, [r3, #0]
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	4b13      	ldr	r3, [pc, #76]	; (8012af8 <fm_menu_config_date_hour+0x78c>)
 8012aac:	781b      	ldrb	r3, [r3, #0]
 8012aae:	3b01      	subs	r3, #1
 8012ab0:	461a      	mov	r2, r3
 8012ab2:	f7fc f9fd 	bl	800eeb0 <fm_factory_modify_time>
 8012ab6:	e008      	b.n	8012aca <fm_menu_config_date_hour+0x75e>
                        second_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_59);
 8012ab8:	4b0d      	ldr	r3, [pc, #52]	; (8012af0 <fm_menu_config_date_hour+0x784>)
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	4618      	mov	r0, r3
 8012abe:	4b0d      	ldr	r3, [pc, #52]	; (8012af4 <fm_menu_config_date_hour+0x788>)
 8012ac0:	781b      	ldrb	r3, [r3, #0]
 8012ac2:	223b      	movs	r2, #59	; 0x3b
 8012ac4:	4619      	mov	r1, r3
 8012ac6:	f7fc f9f3 	bl	800eeb0 <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 8012aca:	2301      	movs	r3, #1
 8012acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012ad0:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	4808      	ldr	r0, [pc, #32]	; (8012afc <fm_menu_config_date_hour+0x790>)
 8012ada:	f7fb fbc3 	bl	800e264 <_txe_queue_send>
            }
        break;
 8012ade:	e062      	b.n	8012ba6 <fm_menu_config_date_hour+0x83a>
 8012ae0:	20001dbc 	.word	0x20001dbc
 8012ae4:	20001dba 	.word	0x20001dba
 8012ae8:	20001dbb 	.word	0x20001dbb
 8012aec:	20001db9 	.word	0x20001db9
 8012af0:	20001dbd 	.word	0x20001dbd
 8012af4:	20001dbe 	.word	0x20001dbe
 8012af8:	20001dbf 	.word	0x20001dbf
 8012afc:	20001388 	.word	0x20001388
        case EVENT_KEY_ENTER:
            if(correct_password)
 8012b00:	4b5b      	ldr	r3, [pc, #364]	; (8012c70 <fm_menu_config_date_hour+0x904>)
 8012b02:	781b      	ldrb	r3, [r3, #0]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d050      	beq.n	8012baa <fm_menu_config_date_hour+0x83e>
            {
                /*
                 * Se cambia qué parámetro se va a modificar según cual estaba
                 * seleccionado para modificarse actualmente.
                 */
                if(field == DAY)
 8012b08:	4b5a      	ldr	r3, [pc, #360]	; (8012c74 <fm_menu_config_date_hour+0x908>)
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d103      	bne.n	8012b18 <fm_menu_config_date_hour+0x7ac>
                {
                    field = MONTH;
 8012b10:	4b58      	ldr	r3, [pc, #352]	; (8012c74 <fm_menu_config_date_hour+0x908>)
 8012b12:	2201      	movs	r2, #1
 8012b14:	701a      	strb	r2, [r3, #0]
 8012b16:	e026      	b.n	8012b66 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == MONTH)
 8012b18:	4b56      	ldr	r3, [pc, #344]	; (8012c74 <fm_menu_config_date_hour+0x908>)
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	2b01      	cmp	r3, #1
 8012b1e:	d103      	bne.n	8012b28 <fm_menu_config_date_hour+0x7bc>
                {
                    field = YEAR;
 8012b20:	4b54      	ldr	r3, [pc, #336]	; (8012c74 <fm_menu_config_date_hour+0x908>)
 8012b22:	2202      	movs	r2, #2
 8012b24:	701a      	strb	r2, [r3, #0]
 8012b26:	e01e      	b.n	8012b66 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == YEAR)
 8012b28:	4b52      	ldr	r3, [pc, #328]	; (8012c74 <fm_menu_config_date_hour+0x908>)
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	2b02      	cmp	r3, #2
 8012b2e:	d103      	bne.n	8012b38 <fm_menu_config_date_hour+0x7cc>
                {
                    field = HOUR;
 8012b30:	4b50      	ldr	r3, [pc, #320]	; (8012c74 <fm_menu_config_date_hour+0x908>)
 8012b32:	2203      	movs	r2, #3
 8012b34:	701a      	strb	r2, [r3, #0]
 8012b36:	e016      	b.n	8012b66 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == HOUR)
 8012b38:	4b4e      	ldr	r3, [pc, #312]	; (8012c74 <fm_menu_config_date_hour+0x908>)
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	2b03      	cmp	r3, #3
 8012b3e:	d103      	bne.n	8012b48 <fm_menu_config_date_hour+0x7dc>
                {
                    field = MINUTE;
 8012b40:	4b4c      	ldr	r3, [pc, #304]	; (8012c74 <fm_menu_config_date_hour+0x908>)
 8012b42:	2204      	movs	r2, #4
 8012b44:	701a      	strb	r2, [r3, #0]
 8012b46:	e00e      	b.n	8012b66 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == MINUTE)
 8012b48:	4b4a      	ldr	r3, [pc, #296]	; (8012c74 <fm_menu_config_date_hour+0x908>)
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	2b04      	cmp	r3, #4
 8012b4e:	d103      	bne.n	8012b58 <fm_menu_config_date_hour+0x7ec>
                {
                    field = SECOND;
 8012b50:	4b48      	ldr	r3, [pc, #288]	; (8012c74 <fm_menu_config_date_hour+0x908>)
 8012b52:	2205      	movs	r2, #5
 8012b54:	701a      	strb	r2, [r3, #0]
 8012b56:	e006      	b.n	8012b66 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == SECOND)
 8012b58:	4b46      	ldr	r3, [pc, #280]	; (8012c74 <fm_menu_config_date_hour+0x908>)
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	2b05      	cmp	r3, #5
 8012b5e:	d102      	bne.n	8012b66 <fm_menu_config_date_hour+0x7fa>
                {
                    field = DAY;
 8012b60:	4b44      	ldr	r3, [pc, #272]	; (8012c74 <fm_menu_config_date_hour+0x908>)
 8012b62:	2200      	movs	r2, #0
 8012b64:	701a      	strb	r2, [r3, #0]
                }
                event_now = EVENT_LCD_REFRESH;
 8012b66:	2301      	movs	r3, #1
 8012b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012b6c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012b70:	2200      	movs	r2, #0
 8012b72:	4619      	mov	r1, r3
 8012b74:	4840      	ldr	r0, [pc, #256]	; (8012c78 <fm_menu_config_date_hour+0x90c>)
 8012b76:	f7fb fb75 	bl	800e264 <_txe_queue_send>
            }
        break;
 8012b7a:	e016      	b.n	8012baa <fm_menu_config_date_hour+0x83e>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8012b7c:	4b3f      	ldr	r3, [pc, #252]	; (8012c7c <fm_menu_config_date_hour+0x910>)
 8012b7e:	2201      	movs	r2, #1
 8012b80:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8012b82:	4b3f      	ldr	r3, [pc, #252]	; (8012c80 <fm_menu_config_date_hour+0x914>)
 8012b84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            event_now = EVENT_LCD_REFRESH;
 8012b88:	2301      	movs	r3, #1
 8012b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012b8e:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012b92:	2200      	movs	r2, #0
 8012b94:	4619      	mov	r1, r3
 8012b96:	4838      	ldr	r0, [pc, #224]	; (8012c78 <fm_menu_config_date_hour+0x90c>)
 8012b98:	f7fb fb64 	bl	800e264 <_txe_queue_send>
        break;
 8012b9c:	e006      	b.n	8012bac <fm_menu_config_date_hour+0x840>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8012b9e:	bf00      	nop
 8012ba0:	e004      	b.n	8012bac <fm_menu_config_date_hour+0x840>
        break;
 8012ba2:	bf00      	nop
 8012ba4:	e002      	b.n	8012bac <fm_menu_config_date_hour+0x840>
        break;
 8012ba6:	bf00      	nop
 8012ba8:	e000      	b.n	8012bac <fm_menu_config_date_hour+0x840>
        break;
 8012baa:	bf00      	nop
    }

    previous_event = event_id;
 8012bac:	4a35      	ldr	r2, [pc, #212]	; (8012c84 <fm_menu_config_date_hour+0x918>)
 8012bae:	79fb      	ldrb	r3, [r7, #7]
 8012bb0:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar fecha y hora\n";
 8012bb2:	4b35      	ldr	r3, [pc, #212]	; (8012c88 <fm_menu_config_date_hour+0x91c>)
 8012bb4:	f107 0408 	add.w	r4, r7, #8
 8012bb8:	461d      	mov	r5, r3
 8012bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012bbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012bc2:	c403      	stmia	r4!, {r0, r1}
 8012bc4:	7022      	strb	r2, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8012bc6:	f107 0308 	add.w	r3, r7, #8
 8012bca:	2119      	movs	r1, #25
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7fb ff85 	bl	800eadc <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8012bd2:	4b2a      	ldr	r3, [pc, #168]	; (8012c7c <fm_menu_config_date_hour+0x910>)
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	2b01      	cmp	r3, #1
 8012bd8:	d143      	bne.n	8012c62 <fm_menu_config_date_hour+0x8f6>
    {
        if(correct_password)
 8012bda:	4b25      	ldr	r3, [pc, #148]	; (8012c70 <fm_menu_config_date_hour+0x904>)
 8012bdc:	781b      	ldrb	r3, [r3, #0]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d036      	beq.n	8012c50 <fm_menu_config_date_hour+0x8e4>
             * encuentren corrompidos y se lea cualquier cosa. Para mas info de
             * esto ver el link siguiente:
             *
             * http://www.efton.sk/STM32/gotcha/g113.html
             */
            date_final.Date = day_enum;
 8012be2:	4b2a      	ldr	r3, [pc, #168]	; (8012c8c <fm_menu_config_date_hour+0x920>)
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            date_final.Month = month_enum;
 8012bea:	4b29      	ldr	r3, [pc, #164]	; (8012c90 <fm_menu_config_date_hour+0x924>)
 8012bec:	781b      	ldrb	r3, [r3, #0]
 8012bee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            date_final.Year = year_enum;
 8012bf2:	4b28      	ldr	r3, [pc, #160]	; (8012c94 <fm_menu_config_date_hour+0x928>)
 8012bf4:	781b      	ldrb	r3, [r3, #0]
 8012bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            date_final.WeekDay = RTC_WEEKDAY_FRIDAY;
 8012bfa:	2305      	movs	r3, #5
 8012bfc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            HAL_RTC_SetDate(&hrtc, &date_final, RTC_FORMAT_BIN);
 8012c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012c04:	2200      	movs	r2, #0
 8012c06:	4619      	mov	r1, r3
 8012c08:	4823      	ldr	r0, [pc, #140]	; (8012c98 <fm_menu_config_date_hour+0x92c>)
 8012c0a:	f7f6 f9c3 	bl	8008f94 <HAL_RTC_SetDate>

            /*
             * Idem que lo de la fecha escrito arriba, pero para la hora, y en
             * general siempre que se use la HAL completando estructuras.
             */
            time_final.Hours = hour_enum;
 8012c0e:	4b23      	ldr	r3, [pc, #140]	; (8012c9c <fm_menu_config_date_hour+0x930>)
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            time_final.Minutes = minute_enum;
 8012c16:	4b22      	ldr	r3, [pc, #136]	; (8012ca0 <fm_menu_config_date_hour+0x934>)
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            time_final.Seconds = second_enum;
 8012c1e:	4b21      	ldr	r3, [pc, #132]	; (8012ca4 <fm_menu_config_date_hour+0x938>)
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            time_final.SecondFraction = 0;
 8012c26:	2300      	movs	r3, #0
 8012c28:	633b      	str	r3, [r7, #48]	; 0x30
            time_final.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	637b      	str	r3, [r7, #52]	; 0x34
            time_final.StoreOperation = RTC_STOREOPERATION_RESET;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	63bb      	str	r3, [r7, #56]	; 0x38
            time_final.SubSeconds = 0;
 8012c32:	2300      	movs	r3, #0
 8012c34:	62fb      	str	r3, [r7, #44]	; 0x2c
            time_final.TimeFormat = RTC_HOURFORMAT12_AM;
 8012c36:	2300      	movs	r3, #0
 8012c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            HAL_RTC_SetTime(&hrtc, &time_final, RTC_FORMAT_BIN);
 8012c3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012c40:	2200      	movs	r2, #0
 8012c42:	4619      	mov	r1, r3
 8012c44:	4814      	ldr	r0, [pc, #80]	; (8012c98 <fm_menu_config_date_hour+0x92c>)
 8012c46:	f7f6 f897 	bl	8008d78 <HAL_RTC_SetTime>

            correct_password = 0;
 8012c4a:	4b09      	ldr	r3, [pc, #36]	; (8012c70 <fm_menu_config_date_hour+0x904>)
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	701a      	strb	r2, [r3, #0]
        }
        in_configuration = 0;
 8012c50:	4b15      	ldr	r3, [pc, #84]	; (8012ca8 <fm_menu_config_date_hour+0x93c>)
 8012c52:	2200      	movs	r2, #0
 8012c54:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8012c56:	4b15      	ldr	r3, [pc, #84]	; (8012cac <fm_menu_config_date_hour+0x940>)
 8012c58:	2201      	movs	r2, #1
 8012c5a:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8012c5c:	4b07      	ldr	r3, [pc, #28]	; (8012c7c <fm_menu_config_date_hour+0x910>)
 8012c5e:	2200      	movs	r2, #0
 8012c60:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8012c62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	37d0      	adds	r7, #208	; 0xd0
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8012c6e:	bf00      	nop
 8012c70:	20001db6 	.word	0x20001db6
 8012c74:	20001db9 	.word	0x20001db9
 8012c78:	20001388 	.word	0x20001388
 8012c7c:	20001dc0 	.word	0x20001dc0
 8012c80:	08013ff9 	.word	0x08013ff9
 8012c84:	20001db7 	.word	0x20001db7
 8012c88:	08015214 	.word	0x08015214
 8012c8c:	20001dba 	.word	0x20001dba
 8012c90:	20001dbb 	.word	0x20001dbb
 8012c94:	20001dbc 	.word	0x20001dbc
 8012c98:	200014a0 	.word	0x200014a0
 8012c9c:	20001dbd 	.word	0x20001dbd
 8012ca0:	20001dbe 	.word	0x20001dbe
 8012ca4:	20001dbf 	.word	0x20001dbf
 8012ca8:	20001db8 	.word	0x20001db8
 8012cac:	20000141 	.word	0x20000141

08012cb0 <fm_menu_config_k_lin_1>:

    return (ret_menu);
}

ptr_ret_menu_t fm_menu_config_k_lin_1(fm_event_t event_id)
{
 8012cb0:	b5b0      	push	{r4, r5, r7, lr}
 8012cb2:	b08c      	sub	sp, #48	; 0x30
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 8012cba:	4b51      	ldr	r3, [pc, #324]	; (8012e00 <fm_menu_config_k_lin_1+0x150>)
 8012cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8012cbe:	4b51      	ldr	r3, [pc, #324]	; (8012e04 <fm_menu_config_k_lin_1+0x154>)
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	2b01      	cmp	r3, #1
 8012cc4:	d104      	bne.n	8012cd0 <fm_menu_config_k_lin_1+0x20>
    {
        fm_lcd_clear();
 8012cc6:	f7fc fd94 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 8012cca:	4b4e      	ldr	r3, [pc, #312]	; (8012e04 <fm_menu_config_k_lin_1+0x154>)
 8012ccc:	2200      	movs	r2, #0
 8012cce:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_1, event_id, digit_lin_modify);
 8012cd0:	4b4d      	ldr	r3, [pc, #308]	; (8012e08 <fm_menu_config_k_lin_1+0x158>)
 8012cd2:	781a      	ldrb	r2, [r3, #0]
 8012cd4:	79fb      	ldrb	r3, [r7, #7]
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	2001      	movs	r0, #1
 8012cda:	f7fd f807 	bl	800fcec <fm_lcd_k_lin>
    fm_lcd_refresh();
 8012cde:	f7fd f91a 	bl	800ff16 <fm_lcd_refresh>

    switch (event_id)
 8012ce2:	79fb      	ldrb	r3, [r7, #7]
 8012ce4:	3b01      	subs	r3, #1
 8012ce6:	2b04      	cmp	r3, #4
 8012ce8:	d863      	bhi.n	8012db2 <fm_menu_config_k_lin_1+0x102>
 8012cea:	a201      	add	r2, pc, #4	; (adr r2, 8012cf0 <fm_menu_config_k_lin_1+0x40>)
 8012cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cf0:	08012db3 	.word	0x08012db3
 8012cf4:	08012d05 	.word	0x08012d05
 8012cf8:	08012d2f 	.word	0x08012d2f
 8012cfc:	08012d59 	.word	0x08012d59
 8012d00:	08012d93 	.word	0x08012d93
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8012d04:	4b41      	ldr	r3, [pc, #260]	; (8012e0c <fm_menu_config_k_lin_1+0x15c>)
 8012d06:	781b      	ldrb	r3, [r3, #0]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d005      	beq.n	8012d18 <fm_menu_config_k_lin_1+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_1);
 8012d0c:	4b3e      	ldr	r3, [pc, #248]	; (8012e08 <fm_menu_config_k_lin_1+0x158>)
 8012d0e:	781b      	ldrb	r3, [r3, #0]
 8012d10:	2101      	movs	r1, #1
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7fc f974 	bl	800f000 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8012d18:	2301      	movs	r3, #1
 8012d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012d1e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012d22:	2200      	movs	r2, #0
 8012d24:	4619      	mov	r1, r3
 8012d26:	483a      	ldr	r0, [pc, #232]	; (8012e10 <fm_menu_config_k_lin_1+0x160>)
 8012d28:	f7fb fa9c 	bl	800e264 <_txe_queue_send>
        break;
 8012d2c:	e042      	b.n	8012db4 <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8012d2e:	4b37      	ldr	r3, [pc, #220]	; (8012e0c <fm_menu_config_k_lin_1+0x15c>)
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d005      	beq.n	8012d42 <fm_menu_config_k_lin_1+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_1);
 8012d36:	4b34      	ldr	r3, [pc, #208]	; (8012e08 <fm_menu_config_k_lin_1+0x158>)
 8012d38:	781b      	ldrb	r3, [r3, #0]
 8012d3a:	2101      	movs	r1, #1
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7fc fa4b 	bl	800f1d8 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8012d42:	2301      	movs	r3, #1
 8012d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012d48:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	4619      	mov	r1, r3
 8012d50:	482f      	ldr	r0, [pc, #188]	; (8012e10 <fm_menu_config_k_lin_1+0x160>)
 8012d52:	f7fb fa87 	bl	800e264 <_txe_queue_send>
        break;
 8012d56:	e02d      	b.n	8012db4 <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8012d58:	4b2c      	ldr	r3, [pc, #176]	; (8012e0c <fm_menu_config_k_lin_1+0x15c>)
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d00d      	beq.n	8012d7c <fm_menu_config_k_lin_1+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 8012d60:	4b29      	ldr	r3, [pc, #164]	; (8012e08 <fm_menu_config_k_lin_1+0x158>)
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	2b0a      	cmp	r3, #10
 8012d66:	d806      	bhi.n	8012d76 <fm_menu_config_k_lin_1+0xc6>
                {
                    digit_lin_modify++;
 8012d68:	4b27      	ldr	r3, [pc, #156]	; (8012e08 <fm_menu_config_k_lin_1+0x158>)
 8012d6a:	781b      	ldrb	r3, [r3, #0]
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	b2da      	uxtb	r2, r3
 8012d70:	4b25      	ldr	r3, [pc, #148]	; (8012e08 <fm_menu_config_k_lin_1+0x158>)
 8012d72:	701a      	strb	r2, [r3, #0]
 8012d74:	e002      	b.n	8012d7c <fm_menu_config_k_lin_1+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8012d76:	4b24      	ldr	r3, [pc, #144]	; (8012e08 <fm_menu_config_k_lin_1+0x158>)
 8012d78:	2200      	movs	r2, #0
 8012d7a:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012d82:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012d86:	2200      	movs	r2, #0
 8012d88:	4619      	mov	r1, r3
 8012d8a:	4821      	ldr	r0, [pc, #132]	; (8012e10 <fm_menu_config_k_lin_1+0x160>)
 8012d8c:	f7fb fa6a 	bl	800e264 <_txe_queue_send>
        break;
 8012d90:	e010      	b.n	8012db4 <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8012d92:	4b20      	ldr	r3, [pc, #128]	; (8012e14 <fm_menu_config_k_lin_1+0x164>)
 8012d94:	2201      	movs	r2, #1
 8012d96:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 8012d98:	4b1f      	ldr	r3, [pc, #124]	; (8012e18 <fm_menu_config_k_lin_1+0x168>)
 8012d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012da2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012da6:	2200      	movs	r2, #0
 8012da8:	4619      	mov	r1, r3
 8012daa:	4819      	ldr	r0, [pc, #100]	; (8012e10 <fm_menu_config_k_lin_1+0x160>)
 8012dac:	f7fb fa5a 	bl	800e264 <_txe_queue_send>
        break;
 8012db0:	e000      	b.n	8012db4 <fm_menu_config_k_lin_1+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8012db2:	bf00      	nop
    }

    previous_event = event_id;
 8012db4:	4a19      	ldr	r2, [pc, #100]	; (8012e1c <fm_menu_config_k_lin_1+0x16c>)
 8012db6:	79fb      	ldrb	r3, [r7, #7]
 8012db8:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_1\n";
 8012dba:	4b19      	ldr	r3, [pc, #100]	; (8012e20 <fm_menu_config_k_lin_1+0x170>)
 8012dbc:	f107 040c 	add.w	r4, r7, #12
 8012dc0:	461d      	mov	r5, r3
 8012dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012dc6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012dca:	c407      	stmia	r4!, {r0, r1, r2}
 8012dcc:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8012dce:	f107 030c 	add.w	r3, r7, #12
 8012dd2:	211e      	movs	r1, #30
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7fb fe81 	bl	800eadc <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8012dda:	4b0e      	ldr	r3, [pc, #56]	; (8012e14 <fm_menu_config_k_lin_1+0x164>)
 8012ddc:	781b      	ldrb	r3, [r3, #0]
 8012dde:	2b01      	cmp	r3, #1
 8012de0:	d108      	bne.n	8012df4 <fm_menu_config_k_lin_1+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 8012de2:	4b09      	ldr	r3, [pc, #36]	; (8012e08 <fm_menu_config_k_lin_1+0x158>)
 8012de4:	2200      	movs	r2, #0
 8012de6:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8012de8:	4b06      	ldr	r3, [pc, #24]	; (8012e04 <fm_menu_config_k_lin_1+0x154>)
 8012dea:	2201      	movs	r2, #1
 8012dec:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8012dee:	4b09      	ldr	r3, [pc, #36]	; (8012e14 <fm_menu_config_k_lin_1+0x164>)
 8012df0:	2200      	movs	r2, #0
 8012df2:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8012df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3730      	adds	r7, #48	; 0x30
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8012dfe:	bf00      	nop
 8012e00:	08012cb1 	.word	0x08012cb1
 8012e04:	20000142 	.word	0x20000142
 8012e08:	20001dc1 	.word	0x20001dc1
 8012e0c:	20001db6 	.word	0x20001db6
 8012e10:	20001388 	.word	0x20001388
 8012e14:	20001dc2 	.word	0x20001dc2
 8012e18:	08012e25 	.word	0x08012e25
 8012e1c:	20001db7 	.word	0x20001db7
 8012e20:	08015250 	.word	0x08015250

08012e24 <fm_menu_config_k_lin_2>:

ptr_ret_menu_t fm_menu_config_k_lin_2(fm_event_t event_id)
{
 8012e24:	b5b0      	push	{r4, r5, r7, lr}
 8012e26:	b08c      	sub	sp, #48	; 0x30
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 8012e2e:	4b51      	ldr	r3, [pc, #324]	; (8012f74 <fm_menu_config_k_lin_2+0x150>)
 8012e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8012e32:	4b51      	ldr	r3, [pc, #324]	; (8012f78 <fm_menu_config_k_lin_2+0x154>)
 8012e34:	781b      	ldrb	r3, [r3, #0]
 8012e36:	2b01      	cmp	r3, #1
 8012e38:	d104      	bne.n	8012e44 <fm_menu_config_k_lin_2+0x20>
    {
        fm_lcd_clear();
 8012e3a:	f7fc fcda 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 8012e3e:	4b4e      	ldr	r3, [pc, #312]	; (8012f78 <fm_menu_config_k_lin_2+0x154>)
 8012e40:	2200      	movs	r2, #0
 8012e42:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_2, event_id, digit_lin_modify);
 8012e44:	4b4d      	ldr	r3, [pc, #308]	; (8012f7c <fm_menu_config_k_lin_2+0x158>)
 8012e46:	781a      	ldrb	r2, [r3, #0]
 8012e48:	79fb      	ldrb	r3, [r7, #7]
 8012e4a:	4619      	mov	r1, r3
 8012e4c:	2002      	movs	r0, #2
 8012e4e:	f7fc ff4d 	bl	800fcec <fm_lcd_k_lin>
    fm_lcd_refresh();
 8012e52:	f7fd f860 	bl	800ff16 <fm_lcd_refresh>

    switch (event_id)
 8012e56:	79fb      	ldrb	r3, [r7, #7]
 8012e58:	3b01      	subs	r3, #1
 8012e5a:	2b04      	cmp	r3, #4
 8012e5c:	d863      	bhi.n	8012f26 <fm_menu_config_k_lin_2+0x102>
 8012e5e:	a201      	add	r2, pc, #4	; (adr r2, 8012e64 <fm_menu_config_k_lin_2+0x40>)
 8012e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e64:	08012f27 	.word	0x08012f27
 8012e68:	08012e79 	.word	0x08012e79
 8012e6c:	08012ea3 	.word	0x08012ea3
 8012e70:	08012ecd 	.word	0x08012ecd
 8012e74:	08012f07 	.word	0x08012f07
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8012e78:	4b41      	ldr	r3, [pc, #260]	; (8012f80 <fm_menu_config_k_lin_2+0x15c>)
 8012e7a:	781b      	ldrb	r3, [r3, #0]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d005      	beq.n	8012e8c <fm_menu_config_k_lin_2+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_2);
 8012e80:	4b3e      	ldr	r3, [pc, #248]	; (8012f7c <fm_menu_config_k_lin_2+0x158>)
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	2102      	movs	r1, #2
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7fc f8ba 	bl	800f000 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012e92:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012e96:	2200      	movs	r2, #0
 8012e98:	4619      	mov	r1, r3
 8012e9a:	483a      	ldr	r0, [pc, #232]	; (8012f84 <fm_menu_config_k_lin_2+0x160>)
 8012e9c:	f7fb f9e2 	bl	800e264 <_txe_queue_send>
        break;
 8012ea0:	e042      	b.n	8012f28 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8012ea2:	4b37      	ldr	r3, [pc, #220]	; (8012f80 <fm_menu_config_k_lin_2+0x15c>)
 8012ea4:	781b      	ldrb	r3, [r3, #0]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d005      	beq.n	8012eb6 <fm_menu_config_k_lin_2+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_2);
 8012eaa:	4b34      	ldr	r3, [pc, #208]	; (8012f7c <fm_menu_config_k_lin_2+0x158>)
 8012eac:	781b      	ldrb	r3, [r3, #0]
 8012eae:	2102      	movs	r1, #2
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7fc f991 	bl	800f1d8 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012ebc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	482f      	ldr	r0, [pc, #188]	; (8012f84 <fm_menu_config_k_lin_2+0x160>)
 8012ec6:	f7fb f9cd 	bl	800e264 <_txe_queue_send>
        break;
 8012eca:	e02d      	b.n	8012f28 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8012ecc:	4b2c      	ldr	r3, [pc, #176]	; (8012f80 <fm_menu_config_k_lin_2+0x15c>)
 8012ece:	781b      	ldrb	r3, [r3, #0]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d00d      	beq.n	8012ef0 <fm_menu_config_k_lin_2+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 8012ed4:	4b29      	ldr	r3, [pc, #164]	; (8012f7c <fm_menu_config_k_lin_2+0x158>)
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	2b0a      	cmp	r3, #10
 8012eda:	d806      	bhi.n	8012eea <fm_menu_config_k_lin_2+0xc6>
                {
                    digit_lin_modify++;
 8012edc:	4b27      	ldr	r3, [pc, #156]	; (8012f7c <fm_menu_config_k_lin_2+0x158>)
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	3301      	adds	r3, #1
 8012ee2:	b2da      	uxtb	r2, r3
 8012ee4:	4b25      	ldr	r3, [pc, #148]	; (8012f7c <fm_menu_config_k_lin_2+0x158>)
 8012ee6:	701a      	strb	r2, [r3, #0]
 8012ee8:	e002      	b.n	8012ef0 <fm_menu_config_k_lin_2+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8012eea:	4b24      	ldr	r3, [pc, #144]	; (8012f7c <fm_menu_config_k_lin_2+0x158>)
 8012eec:	2200      	movs	r2, #0
 8012eee:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8012ef0:	2301      	movs	r3, #1
 8012ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012ef6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012efa:	2200      	movs	r2, #0
 8012efc:	4619      	mov	r1, r3
 8012efe:	4821      	ldr	r0, [pc, #132]	; (8012f84 <fm_menu_config_k_lin_2+0x160>)
 8012f00:	f7fb f9b0 	bl	800e264 <_txe_queue_send>
        break;
 8012f04:	e010      	b.n	8012f28 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8012f06:	4b20      	ldr	r3, [pc, #128]	; (8012f88 <fm_menu_config_k_lin_2+0x164>)
 8012f08:	2201      	movs	r2, #1
 8012f0a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 8012f0c:	4b1f      	ldr	r3, [pc, #124]	; (8012f8c <fm_menu_config_k_lin_2+0x168>)
 8012f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8012f10:	2301      	movs	r3, #1
 8012f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012f16:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	4819      	ldr	r0, [pc, #100]	; (8012f84 <fm_menu_config_k_lin_2+0x160>)
 8012f20:	f7fb f9a0 	bl	800e264 <_txe_queue_send>
        break;
 8012f24:	e000      	b.n	8012f28 <fm_menu_config_k_lin_2+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8012f26:	bf00      	nop
    }

    previous_event = event_id;
 8012f28:	4a19      	ldr	r2, [pc, #100]	; (8012f90 <fm_menu_config_k_lin_2+0x16c>)
 8012f2a:	79fb      	ldrb	r3, [r7, #7]
 8012f2c:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_2\n";
 8012f2e:	4b19      	ldr	r3, [pc, #100]	; (8012f94 <fm_menu_config_k_lin_2+0x170>)
 8012f30:	f107 040c 	add.w	r4, r7, #12
 8012f34:	461d      	mov	r5, r3
 8012f36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012f3e:	c407      	stmia	r4!, {r0, r1, r2}
 8012f40:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8012f42:	f107 030c 	add.w	r3, r7, #12
 8012f46:	211e      	movs	r1, #30
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f7fb fdc7 	bl	800eadc <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8012f4e:	4b0e      	ldr	r3, [pc, #56]	; (8012f88 <fm_menu_config_k_lin_2+0x164>)
 8012f50:	781b      	ldrb	r3, [r3, #0]
 8012f52:	2b01      	cmp	r3, #1
 8012f54:	d108      	bne.n	8012f68 <fm_menu_config_k_lin_2+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 8012f56:	4b09      	ldr	r3, [pc, #36]	; (8012f7c <fm_menu_config_k_lin_2+0x158>)
 8012f58:	2200      	movs	r2, #0
 8012f5a:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8012f5c:	4b06      	ldr	r3, [pc, #24]	; (8012f78 <fm_menu_config_k_lin_2+0x154>)
 8012f5e:	2201      	movs	r2, #1
 8012f60:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8012f62:	4b09      	ldr	r3, [pc, #36]	; (8012f88 <fm_menu_config_k_lin_2+0x164>)
 8012f64:	2200      	movs	r2, #0
 8012f66:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8012f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3730      	adds	r7, #48	; 0x30
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bdb0      	pop	{r4, r5, r7, pc}
 8012f72:	bf00      	nop
 8012f74:	08012e25 	.word	0x08012e25
 8012f78:	20000143 	.word	0x20000143
 8012f7c:	20001dc3 	.word	0x20001dc3
 8012f80:	20001db6 	.word	0x20001db6
 8012f84:	20001388 	.word	0x20001388
 8012f88:	20001dc4 	.word	0x20001dc4
 8012f8c:	08012f99 	.word	0x08012f99
 8012f90:	20001db7 	.word	0x20001db7
 8012f94:	08015270 	.word	0x08015270

08012f98 <fm_menu_config_k_lin_3>:

ptr_ret_menu_t fm_menu_config_k_lin_3(fm_event_t event_id)
{
 8012f98:	b5b0      	push	{r4, r5, r7, lr}
 8012f9a:	b08c      	sub	sp, #48	; 0x30
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 8012fa2:	4b51      	ldr	r3, [pc, #324]	; (80130e8 <fm_menu_config_k_lin_3+0x150>)
 8012fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8012fa6:	4b51      	ldr	r3, [pc, #324]	; (80130ec <fm_menu_config_k_lin_3+0x154>)
 8012fa8:	781b      	ldrb	r3, [r3, #0]
 8012faa:	2b01      	cmp	r3, #1
 8012fac:	d104      	bne.n	8012fb8 <fm_menu_config_k_lin_3+0x20>
    {
        fm_lcd_clear();
 8012fae:	f7fc fc20 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 8012fb2:	4b4e      	ldr	r3, [pc, #312]	; (80130ec <fm_menu_config_k_lin_3+0x154>)
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_3, event_id, digit_lin_modify);
 8012fb8:	4b4d      	ldr	r3, [pc, #308]	; (80130f0 <fm_menu_config_k_lin_3+0x158>)
 8012fba:	781a      	ldrb	r2, [r3, #0]
 8012fbc:	79fb      	ldrb	r3, [r7, #7]
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	2003      	movs	r0, #3
 8012fc2:	f7fc fe93 	bl	800fcec <fm_lcd_k_lin>
    fm_lcd_refresh();
 8012fc6:	f7fc ffa6 	bl	800ff16 <fm_lcd_refresh>

    switch (event_id)
 8012fca:	79fb      	ldrb	r3, [r7, #7]
 8012fcc:	3b01      	subs	r3, #1
 8012fce:	2b04      	cmp	r3, #4
 8012fd0:	d863      	bhi.n	801309a <fm_menu_config_k_lin_3+0x102>
 8012fd2:	a201      	add	r2, pc, #4	; (adr r2, 8012fd8 <fm_menu_config_k_lin_3+0x40>)
 8012fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fd8:	0801309b 	.word	0x0801309b
 8012fdc:	08012fed 	.word	0x08012fed
 8012fe0:	08013017 	.word	0x08013017
 8012fe4:	08013041 	.word	0x08013041
 8012fe8:	0801307b 	.word	0x0801307b
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8012fec:	4b41      	ldr	r3, [pc, #260]	; (80130f4 <fm_menu_config_k_lin_3+0x15c>)
 8012fee:	781b      	ldrb	r3, [r3, #0]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d005      	beq.n	8013000 <fm_menu_config_k_lin_3+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_3);
 8012ff4:	4b3e      	ldr	r3, [pc, #248]	; (80130f0 <fm_menu_config_k_lin_3+0x158>)
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	2103      	movs	r1, #3
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7fc f800 	bl	800f000 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013000:	2301      	movs	r3, #1
 8013002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013006:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801300a:	2200      	movs	r2, #0
 801300c:	4619      	mov	r1, r3
 801300e:	483a      	ldr	r0, [pc, #232]	; (80130f8 <fm_menu_config_k_lin_3+0x160>)
 8013010:	f7fb f928 	bl	800e264 <_txe_queue_send>
        break;
 8013014:	e042      	b.n	801309c <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013016:	4b37      	ldr	r3, [pc, #220]	; (80130f4 <fm_menu_config_k_lin_3+0x15c>)
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d005      	beq.n	801302a <fm_menu_config_k_lin_3+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_3);
 801301e:	4b34      	ldr	r3, [pc, #208]	; (80130f0 <fm_menu_config_k_lin_3+0x158>)
 8013020:	781b      	ldrb	r3, [r3, #0]
 8013022:	2103      	movs	r1, #3
 8013024:	4618      	mov	r0, r3
 8013026:	f7fc f8d7 	bl	800f1d8 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801302a:	2301      	movs	r3, #1
 801302c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013030:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013034:	2200      	movs	r2, #0
 8013036:	4619      	mov	r1, r3
 8013038:	482f      	ldr	r0, [pc, #188]	; (80130f8 <fm_menu_config_k_lin_3+0x160>)
 801303a:	f7fb f913 	bl	800e264 <_txe_queue_send>
        break;
 801303e:	e02d      	b.n	801309c <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013040:	4b2c      	ldr	r3, [pc, #176]	; (80130f4 <fm_menu_config_k_lin_3+0x15c>)
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d00d      	beq.n	8013064 <fm_menu_config_k_lin_3+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 8013048:	4b29      	ldr	r3, [pc, #164]	; (80130f0 <fm_menu_config_k_lin_3+0x158>)
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	2b0a      	cmp	r3, #10
 801304e:	d806      	bhi.n	801305e <fm_menu_config_k_lin_3+0xc6>
                {
                    digit_lin_modify++;
 8013050:	4b27      	ldr	r3, [pc, #156]	; (80130f0 <fm_menu_config_k_lin_3+0x158>)
 8013052:	781b      	ldrb	r3, [r3, #0]
 8013054:	3301      	adds	r3, #1
 8013056:	b2da      	uxtb	r2, r3
 8013058:	4b25      	ldr	r3, [pc, #148]	; (80130f0 <fm_menu_config_k_lin_3+0x158>)
 801305a:	701a      	strb	r2, [r3, #0]
 801305c:	e002      	b.n	8013064 <fm_menu_config_k_lin_3+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801305e:	4b24      	ldr	r3, [pc, #144]	; (80130f0 <fm_menu_config_k_lin_3+0x158>)
 8013060:	2200      	movs	r2, #0
 8013062:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013064:	2301      	movs	r3, #1
 8013066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801306a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801306e:	2200      	movs	r2, #0
 8013070:	4619      	mov	r1, r3
 8013072:	4821      	ldr	r0, [pc, #132]	; (80130f8 <fm_menu_config_k_lin_3+0x160>)
 8013074:	f7fb f8f6 	bl	800e264 <_txe_queue_send>
        break;
 8013078:	e010      	b.n	801309c <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801307a:	4b20      	ldr	r3, [pc, #128]	; (80130fc <fm_menu_config_k_lin_3+0x164>)
 801307c:	2201      	movs	r2, #1
 801307e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 8013080:	4b1f      	ldr	r3, [pc, #124]	; (8013100 <fm_menu_config_k_lin_3+0x168>)
 8013082:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8013084:	2301      	movs	r3, #1
 8013086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801308a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801308e:	2200      	movs	r2, #0
 8013090:	4619      	mov	r1, r3
 8013092:	4819      	ldr	r0, [pc, #100]	; (80130f8 <fm_menu_config_k_lin_3+0x160>)
 8013094:	f7fb f8e6 	bl	800e264 <_txe_queue_send>
        break;
 8013098:	e000      	b.n	801309c <fm_menu_config_k_lin_3+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801309a:	bf00      	nop
    }

    previous_event = event_id;
 801309c:	4a19      	ldr	r2, [pc, #100]	; (8013104 <fm_menu_config_k_lin_3+0x16c>)
 801309e:	79fb      	ldrb	r3, [r7, #7]
 80130a0:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_3\n";
 80130a2:	4b19      	ldr	r3, [pc, #100]	; (8013108 <fm_menu_config_k_lin_3+0x170>)
 80130a4:	f107 040c 	add.w	r4, r7, #12
 80130a8:	461d      	mov	r5, r3
 80130aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80130ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80130b2:	c407      	stmia	r4!, {r0, r1, r2}
 80130b4:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80130b6:	f107 030c 	add.w	r3, r7, #12
 80130ba:	211e      	movs	r1, #30
 80130bc:	4618      	mov	r0, r3
 80130be:	f7fb fd0d 	bl	800eadc <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 80130c2:	4b0e      	ldr	r3, [pc, #56]	; (80130fc <fm_menu_config_k_lin_3+0x164>)
 80130c4:	781b      	ldrb	r3, [r3, #0]
 80130c6:	2b01      	cmp	r3, #1
 80130c8:	d108      	bne.n	80130dc <fm_menu_config_k_lin_3+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 80130ca:	4b09      	ldr	r3, [pc, #36]	; (80130f0 <fm_menu_config_k_lin_3+0x158>)
 80130cc:	2200      	movs	r2, #0
 80130ce:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80130d0:	4b06      	ldr	r3, [pc, #24]	; (80130ec <fm_menu_config_k_lin_3+0x154>)
 80130d2:	2201      	movs	r2, #1
 80130d4:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80130d6:	4b09      	ldr	r3, [pc, #36]	; (80130fc <fm_menu_config_k_lin_3+0x164>)
 80130d8:	2200      	movs	r2, #0
 80130da:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80130dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3730      	adds	r7, #48	; 0x30
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bdb0      	pop	{r4, r5, r7, pc}
 80130e6:	bf00      	nop
 80130e8:	08012f99 	.word	0x08012f99
 80130ec:	20000144 	.word	0x20000144
 80130f0:	20001dc5 	.word	0x20001dc5
 80130f4:	20001db6 	.word	0x20001db6
 80130f8:	20001388 	.word	0x20001388
 80130fc:	20001dc6 	.word	0x20001dc6
 8013100:	0801310d 	.word	0x0801310d
 8013104:	20001db7 	.word	0x20001db7
 8013108:	08015290 	.word	0x08015290

0801310c <fm_menu_config_k_lin_4>:

ptr_ret_menu_t fm_menu_config_k_lin_4(fm_event_t event_id)
{
 801310c:	b5b0      	push	{r4, r5, r7, lr}
 801310e:	b08c      	sub	sp, #48	; 0x30
 8013110:	af00      	add	r7, sp, #0
 8013112:	4603      	mov	r3, r0
 8013114:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 8013116:	4b51      	ldr	r3, [pc, #324]	; (801325c <fm_menu_config_k_lin_4+0x150>)
 8013118:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 801311a:	4b51      	ldr	r3, [pc, #324]	; (8013260 <fm_menu_config_k_lin_4+0x154>)
 801311c:	781b      	ldrb	r3, [r3, #0]
 801311e:	2b01      	cmp	r3, #1
 8013120:	d104      	bne.n	801312c <fm_menu_config_k_lin_4+0x20>
    {
        fm_lcd_clear();
 8013122:	f7fc fb66 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 8013126:	4b4e      	ldr	r3, [pc, #312]	; (8013260 <fm_menu_config_k_lin_4+0x154>)
 8013128:	2200      	movs	r2, #0
 801312a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_4, event_id, digit_lin_modify);
 801312c:	4b4d      	ldr	r3, [pc, #308]	; (8013264 <fm_menu_config_k_lin_4+0x158>)
 801312e:	781a      	ldrb	r2, [r3, #0]
 8013130:	79fb      	ldrb	r3, [r7, #7]
 8013132:	4619      	mov	r1, r3
 8013134:	2004      	movs	r0, #4
 8013136:	f7fc fdd9 	bl	800fcec <fm_lcd_k_lin>
    fm_lcd_refresh();
 801313a:	f7fc feec 	bl	800ff16 <fm_lcd_refresh>

    switch (event_id)
 801313e:	79fb      	ldrb	r3, [r7, #7]
 8013140:	3b01      	subs	r3, #1
 8013142:	2b04      	cmp	r3, #4
 8013144:	d863      	bhi.n	801320e <fm_menu_config_k_lin_4+0x102>
 8013146:	a201      	add	r2, pc, #4	; (adr r2, 801314c <fm_menu_config_k_lin_4+0x40>)
 8013148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801314c:	0801320f 	.word	0x0801320f
 8013150:	08013161 	.word	0x08013161
 8013154:	0801318b 	.word	0x0801318b
 8013158:	080131b5 	.word	0x080131b5
 801315c:	080131ef 	.word	0x080131ef
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013160:	4b41      	ldr	r3, [pc, #260]	; (8013268 <fm_menu_config_k_lin_4+0x15c>)
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d005      	beq.n	8013174 <fm_menu_config_k_lin_4+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_4);
 8013168:	4b3e      	ldr	r3, [pc, #248]	; (8013264 <fm_menu_config_k_lin_4+0x158>)
 801316a:	781b      	ldrb	r3, [r3, #0]
 801316c:	2104      	movs	r1, #4
 801316e:	4618      	mov	r0, r3
 8013170:	f7fb ff46 	bl	800f000 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013174:	2301      	movs	r3, #1
 8013176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801317a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801317e:	2200      	movs	r2, #0
 8013180:	4619      	mov	r1, r3
 8013182:	483a      	ldr	r0, [pc, #232]	; (801326c <fm_menu_config_k_lin_4+0x160>)
 8013184:	f7fb f86e 	bl	800e264 <_txe_queue_send>
        break;
 8013188:	e042      	b.n	8013210 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 801318a:	4b37      	ldr	r3, [pc, #220]	; (8013268 <fm_menu_config_k_lin_4+0x15c>)
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d005      	beq.n	801319e <fm_menu_config_k_lin_4+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_4);
 8013192:	4b34      	ldr	r3, [pc, #208]	; (8013264 <fm_menu_config_k_lin_4+0x158>)
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	2104      	movs	r1, #4
 8013198:	4618      	mov	r0, r3
 801319a:	f7fc f81d 	bl	800f1d8 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801319e:	2301      	movs	r3, #1
 80131a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80131a4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80131a8:	2200      	movs	r2, #0
 80131aa:	4619      	mov	r1, r3
 80131ac:	482f      	ldr	r0, [pc, #188]	; (801326c <fm_menu_config_k_lin_4+0x160>)
 80131ae:	f7fb f859 	bl	800e264 <_txe_queue_send>
        break;
 80131b2:	e02d      	b.n	8013210 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80131b4:	4b2c      	ldr	r3, [pc, #176]	; (8013268 <fm_menu_config_k_lin_4+0x15c>)
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d00d      	beq.n	80131d8 <fm_menu_config_k_lin_4+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 80131bc:	4b29      	ldr	r3, [pc, #164]	; (8013264 <fm_menu_config_k_lin_4+0x158>)
 80131be:	781b      	ldrb	r3, [r3, #0]
 80131c0:	2b0a      	cmp	r3, #10
 80131c2:	d806      	bhi.n	80131d2 <fm_menu_config_k_lin_4+0xc6>
                {
                    digit_lin_modify++;
 80131c4:	4b27      	ldr	r3, [pc, #156]	; (8013264 <fm_menu_config_k_lin_4+0x158>)
 80131c6:	781b      	ldrb	r3, [r3, #0]
 80131c8:	3301      	adds	r3, #1
 80131ca:	b2da      	uxtb	r2, r3
 80131cc:	4b25      	ldr	r3, [pc, #148]	; (8013264 <fm_menu_config_k_lin_4+0x158>)
 80131ce:	701a      	strb	r2, [r3, #0]
 80131d0:	e002      	b.n	80131d8 <fm_menu_config_k_lin_4+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 80131d2:	4b24      	ldr	r3, [pc, #144]	; (8013264 <fm_menu_config_k_lin_4+0x158>)
 80131d4:	2200      	movs	r2, #0
 80131d6:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80131d8:	2301      	movs	r3, #1
 80131da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80131de:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80131e2:	2200      	movs	r2, #0
 80131e4:	4619      	mov	r1, r3
 80131e6:	4821      	ldr	r0, [pc, #132]	; (801326c <fm_menu_config_k_lin_4+0x160>)
 80131e8:	f7fb f83c 	bl	800e264 <_txe_queue_send>
        break;
 80131ec:	e010      	b.n	8013210 <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80131ee:	4b20      	ldr	r3, [pc, #128]	; (8013270 <fm_menu_config_k_lin_4+0x164>)
 80131f0:	2201      	movs	r2, #1
 80131f2:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 80131f4:	4b1f      	ldr	r3, [pc, #124]	; (8013274 <fm_menu_config_k_lin_4+0x168>)
 80131f6:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 80131f8:	2301      	movs	r3, #1
 80131fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80131fe:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013202:	2200      	movs	r2, #0
 8013204:	4619      	mov	r1, r3
 8013206:	4819      	ldr	r0, [pc, #100]	; (801326c <fm_menu_config_k_lin_4+0x160>)
 8013208:	f7fb f82c 	bl	800e264 <_txe_queue_send>
        break;
 801320c:	e000      	b.n	8013210 <fm_menu_config_k_lin_4+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801320e:	bf00      	nop
    }

    previous_event = event_id;
 8013210:	4a19      	ldr	r2, [pc, #100]	; (8013278 <fm_menu_config_k_lin_4+0x16c>)
 8013212:	79fb      	ldrb	r3, [r7, #7]
 8013214:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_4\n";
 8013216:	4b19      	ldr	r3, [pc, #100]	; (801327c <fm_menu_config_k_lin_4+0x170>)
 8013218:	f107 040c 	add.w	r4, r7, #12
 801321c:	461d      	mov	r5, r3
 801321e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013222:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013226:	c407      	stmia	r4!, {r0, r1, r2}
 8013228:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801322a:	f107 030c 	add.w	r3, r7, #12
 801322e:	211e      	movs	r1, #30
 8013230:	4618      	mov	r0, r3
 8013232:	f7fb fc53 	bl	800eadc <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8013236:	4b0e      	ldr	r3, [pc, #56]	; (8013270 <fm_menu_config_k_lin_4+0x164>)
 8013238:	781b      	ldrb	r3, [r3, #0]
 801323a:	2b01      	cmp	r3, #1
 801323c:	d108      	bne.n	8013250 <fm_menu_config_k_lin_4+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 801323e:	4b09      	ldr	r3, [pc, #36]	; (8013264 <fm_menu_config_k_lin_4+0x158>)
 8013240:	2200      	movs	r2, #0
 8013242:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013244:	4b06      	ldr	r3, [pc, #24]	; (8013260 <fm_menu_config_k_lin_4+0x154>)
 8013246:	2201      	movs	r2, #1
 8013248:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801324a:	4b09      	ldr	r3, [pc, #36]	; (8013270 <fm_menu_config_k_lin_4+0x164>)
 801324c:	2200      	movs	r2, #0
 801324e:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013252:	4618      	mov	r0, r3
 8013254:	3730      	adds	r7, #48	; 0x30
 8013256:	46bd      	mov	sp, r7
 8013258:	bdb0      	pop	{r4, r5, r7, pc}
 801325a:	bf00      	nop
 801325c:	0801310d 	.word	0x0801310d
 8013260:	20000145 	.word	0x20000145
 8013264:	20001dc7 	.word	0x20001dc7
 8013268:	20001db6 	.word	0x20001db6
 801326c:	20001388 	.word	0x20001388
 8013270:	20001dc8 	.word	0x20001dc8
 8013274:	08013281 	.word	0x08013281
 8013278:	20001db7 	.word	0x20001db7
 801327c:	080152b0 	.word	0x080152b0

08013280 <fm_menu_config_k_lin_5>:

ptr_ret_menu_t fm_menu_config_k_lin_5(fm_event_t event_id)
{
 8013280:	b5b0      	push	{r4, r5, r7, lr}
 8013282:	b08c      	sub	sp, #48	; 0x30
 8013284:	af00      	add	r7, sp, #0
 8013286:	4603      	mov	r3, r0
 8013288:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 801328a:	4b51      	ldr	r3, [pc, #324]	; (80133d0 <fm_menu_config_k_lin_5+0x150>)
 801328c:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 801328e:	4b51      	ldr	r3, [pc, #324]	; (80133d4 <fm_menu_config_k_lin_5+0x154>)
 8013290:	781b      	ldrb	r3, [r3, #0]
 8013292:	2b01      	cmp	r3, #1
 8013294:	d104      	bne.n	80132a0 <fm_menu_config_k_lin_5+0x20>
    {
        fm_lcd_clear();
 8013296:	f7fc faac 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 801329a:	4b4e      	ldr	r3, [pc, #312]	; (80133d4 <fm_menu_config_k_lin_5+0x154>)
 801329c:	2200      	movs	r2, #0
 801329e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_5, event_id, digit_lin_modify);
 80132a0:	4b4d      	ldr	r3, [pc, #308]	; (80133d8 <fm_menu_config_k_lin_5+0x158>)
 80132a2:	781a      	ldrb	r2, [r3, #0]
 80132a4:	79fb      	ldrb	r3, [r7, #7]
 80132a6:	4619      	mov	r1, r3
 80132a8:	2005      	movs	r0, #5
 80132aa:	f7fc fd1f 	bl	800fcec <fm_lcd_k_lin>
    fm_lcd_refresh();
 80132ae:	f7fc fe32 	bl	800ff16 <fm_lcd_refresh>

    switch (event_id)
 80132b2:	79fb      	ldrb	r3, [r7, #7]
 80132b4:	3b01      	subs	r3, #1
 80132b6:	2b04      	cmp	r3, #4
 80132b8:	d863      	bhi.n	8013382 <fm_menu_config_k_lin_5+0x102>
 80132ba:	a201      	add	r2, pc, #4	; (adr r2, 80132c0 <fm_menu_config_k_lin_5+0x40>)
 80132bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132c0:	08013383 	.word	0x08013383
 80132c4:	080132d5 	.word	0x080132d5
 80132c8:	080132ff 	.word	0x080132ff
 80132cc:	08013329 	.word	0x08013329
 80132d0:	08013363 	.word	0x08013363
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80132d4:	4b41      	ldr	r3, [pc, #260]	; (80133dc <fm_menu_config_k_lin_5+0x15c>)
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d005      	beq.n	80132e8 <fm_menu_config_k_lin_5+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_5);
 80132dc:	4b3e      	ldr	r3, [pc, #248]	; (80133d8 <fm_menu_config_k_lin_5+0x158>)
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	2105      	movs	r1, #5
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7fb fe8c 	bl	800f000 <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80132e8:	2301      	movs	r3, #1
 80132ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80132ee:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80132f2:	2200      	movs	r2, #0
 80132f4:	4619      	mov	r1, r3
 80132f6:	483a      	ldr	r0, [pc, #232]	; (80133e0 <fm_menu_config_k_lin_5+0x160>)
 80132f8:	f7fa ffb4 	bl	800e264 <_txe_queue_send>
        break;
 80132fc:	e042      	b.n	8013384 <fm_menu_config_k_lin_5+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80132fe:	4b37      	ldr	r3, [pc, #220]	; (80133dc <fm_menu_config_k_lin_5+0x15c>)
 8013300:	781b      	ldrb	r3, [r3, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d005      	beq.n	8013312 <fm_menu_config_k_lin_5+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_5);
 8013306:	4b34      	ldr	r3, [pc, #208]	; (80133d8 <fm_menu_config_k_lin_5+0x158>)
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	2105      	movs	r1, #5
 801330c:	4618      	mov	r0, r3
 801330e:	f7fb ff63 	bl	800f1d8 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013312:	2301      	movs	r3, #1
 8013314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013318:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801331c:	2200      	movs	r2, #0
 801331e:	4619      	mov	r1, r3
 8013320:	482f      	ldr	r0, [pc, #188]	; (80133e0 <fm_menu_config_k_lin_5+0x160>)
 8013322:	f7fa ff9f 	bl	800e264 <_txe_queue_send>
        break;
 8013326:	e02d      	b.n	8013384 <fm_menu_config_k_lin_5+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013328:	4b2c      	ldr	r3, [pc, #176]	; (80133dc <fm_menu_config_k_lin_5+0x15c>)
 801332a:	781b      	ldrb	r3, [r3, #0]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d00d      	beq.n	801334c <fm_menu_config_k_lin_5+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 8013330:	4b29      	ldr	r3, [pc, #164]	; (80133d8 <fm_menu_config_k_lin_5+0x158>)
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	2b0a      	cmp	r3, #10
 8013336:	d806      	bhi.n	8013346 <fm_menu_config_k_lin_5+0xc6>
                {
                    digit_lin_modify++;
 8013338:	4b27      	ldr	r3, [pc, #156]	; (80133d8 <fm_menu_config_k_lin_5+0x158>)
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	3301      	adds	r3, #1
 801333e:	b2da      	uxtb	r2, r3
 8013340:	4b25      	ldr	r3, [pc, #148]	; (80133d8 <fm_menu_config_k_lin_5+0x158>)
 8013342:	701a      	strb	r2, [r3, #0]
 8013344:	e002      	b.n	801334c <fm_menu_config_k_lin_5+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8013346:	4b24      	ldr	r3, [pc, #144]	; (80133d8 <fm_menu_config_k_lin_5+0x158>)
 8013348:	2200      	movs	r2, #0
 801334a:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 801334c:	2301      	movs	r3, #1
 801334e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013352:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013356:	2200      	movs	r2, #0
 8013358:	4619      	mov	r1, r3
 801335a:	4821      	ldr	r0, [pc, #132]	; (80133e0 <fm_menu_config_k_lin_5+0x160>)
 801335c:	f7fa ff82 	bl	800e264 <_txe_queue_send>
        break;
 8013360:	e010      	b.n	8013384 <fm_menu_config_k_lin_5+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013362:	4b20      	ldr	r3, [pc, #128]	; (80133e4 <fm_menu_config_k_lin_5+0x164>)
 8013364:	2201      	movs	r2, #1
 8013366:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8013368:	4b1f      	ldr	r3, [pc, #124]	; (80133e8 <fm_menu_config_k_lin_5+0x168>)
 801336a:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 801336c:	2301      	movs	r3, #1
 801336e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013372:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013376:	2200      	movs	r2, #0
 8013378:	4619      	mov	r1, r3
 801337a:	4819      	ldr	r0, [pc, #100]	; (80133e0 <fm_menu_config_k_lin_5+0x160>)
 801337c:	f7fa ff72 	bl	800e264 <_txe_queue_send>
        break;
 8013380:	e000      	b.n	8013384 <fm_menu_config_k_lin_5+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013382:	bf00      	nop
    }

    previous_event = event_id;
 8013384:	4a19      	ldr	r2, [pc, #100]	; (80133ec <fm_menu_config_k_lin_5+0x16c>)
 8013386:	79fb      	ldrb	r3, [r7, #7]
 8013388:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_5\n";
 801338a:	4b19      	ldr	r3, [pc, #100]	; (80133f0 <fm_menu_config_k_lin_5+0x170>)
 801338c:	f107 040c 	add.w	r4, r7, #12
 8013390:	461d      	mov	r5, r3
 8013392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013396:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801339a:	c407      	stmia	r4!, {r0, r1, r2}
 801339c:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801339e:	f107 030c 	add.w	r3, r7, #12
 80133a2:	211e      	movs	r1, #30
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7fb fb99 	bl	800eadc <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 80133aa:	4b0e      	ldr	r3, [pc, #56]	; (80133e4 <fm_menu_config_k_lin_5+0x164>)
 80133ac:	781b      	ldrb	r3, [r3, #0]
 80133ae:	2b01      	cmp	r3, #1
 80133b0:	d108      	bne.n	80133c4 <fm_menu_config_k_lin_5+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 80133b2:	4b09      	ldr	r3, [pc, #36]	; (80133d8 <fm_menu_config_k_lin_5+0x158>)
 80133b4:	2200      	movs	r2, #0
 80133b6:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80133b8:	4b06      	ldr	r3, [pc, #24]	; (80133d4 <fm_menu_config_k_lin_5+0x154>)
 80133ba:	2201      	movs	r2, #1
 80133bc:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80133be:	4b09      	ldr	r3, [pc, #36]	; (80133e4 <fm_menu_config_k_lin_5+0x164>)
 80133c0:	2200      	movs	r2, #0
 80133c2:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80133c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	3730      	adds	r7, #48	; 0x30
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bdb0      	pop	{r4, r5, r7, pc}
 80133ce:	bf00      	nop
 80133d0:	08013281 	.word	0x08013281
 80133d4:	20000146 	.word	0x20000146
 80133d8:	20001dc9 	.word	0x20001dc9
 80133dc:	20001db6 	.word	0x20001db6
 80133e0:	20001388 	.word	0x20001388
 80133e4:	20001dca 	.word	0x20001dca
 80133e8:	08013a9d 	.word	0x08013a9d
 80133ec:	20001db7 	.word	0x20001db7
 80133f0:	080152d0 	.word	0x080152d0

080133f4 <fm_menu_config_k_param>:
 * K.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_param(fm_event_t event_id)
{
 80133f4:	b5b0      	push	{r4, r5, r7, lr}
 80133f6:	b08a      	sub	sp, #40	; 0x28
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	4603      	mov	r3, r0
 80133fc:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_t digit_modify = DIG_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 80133fe:	4b69      	ldr	r3, [pc, #420]	; (80135a4 <fm_menu_config_k_param+0x1b0>)
 8013400:	627b      	str	r3, [r7, #36]	; 0x24
    fm_event_t event_now;

    if (new_entry == 1)
 8013402:	4b69      	ldr	r3, [pc, #420]	; (80135a8 <fm_menu_config_k_param+0x1b4>)
 8013404:	781b      	ldrb	r3, [r3, #0]
 8013406:	2b01      	cmp	r3, #1
 8013408:	d104      	bne.n	8013414 <fm_menu_config_k_param+0x20>
    {
        fm_lcd_clear();
 801340a:	f7fc f9f2 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 801340e:	4b66      	ldr	r3, [pc, #408]	; (80135a8 <fm_menu_config_k_param+0x1b4>)
 8013410:	2200      	movs	r2, #0
 8013412:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_factor(event_id, digit_modify);
 8013414:	4b65      	ldr	r3, [pc, #404]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 8013416:	781a      	ldrb	r2, [r3, #0]
 8013418:	79fb      	ldrb	r3, [r7, #7]
 801341a:	4611      	mov	r1, r2
 801341c:	4618      	mov	r0, r3
 801341e:	f7fc fbf3 	bl	800fc08 <fm_lcd_k_factor>
    fm_lcd_refresh();
 8013422:	f7fc fd78 	bl	800ff16 <fm_lcd_refresh>

    switch (event_id)
 8013426:	79fb      	ldrb	r3, [r7, #7]
 8013428:	3b01      	subs	r3, #1
 801342a:	2b04      	cmp	r3, #4
 801342c:	f200 8094 	bhi.w	8013558 <fm_menu_config_k_param+0x164>
 8013430:	a201      	add	r2, pc, #4	; (adr r2, 8013438 <fm_menu_config_k_param+0x44>)
 8013432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013436:	bf00      	nop
 8013438:	08013559 	.word	0x08013559
 801343c:	0801344d 	.word	0x0801344d
 8013440:	08013475 	.word	0x08013475
 8013444:	0801349d 	.word	0x0801349d
 8013448:	08013539 	.word	0x08013539
    {
        case EVENT_KEY_UP:
            if (correct_password)
 801344c:	4b58      	ldr	r3, [pc, #352]	; (80135b0 <fm_menu_config_k_param+0x1bc>)
 801344e:	781b      	ldrb	r3, [r3, #0]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d004      	beq.n	801345e <fm_menu_config_k_param+0x6a>
            {
                fm_factory_modify_k_factor_add(digit_modify);
 8013454:	4b55      	ldr	r3, [pc, #340]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 8013456:	781b      	ldrb	r3, [r3, #0]
 8013458:	4618      	mov	r0, r3
 801345a:	f7fb fd51 	bl	800ef00 <fm_factory_modify_k_factor_add>
            }
            event_now = EVENT_LCD_REFRESH;
 801345e:	2301      	movs	r3, #1
 8013460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013464:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013468:	2200      	movs	r2, #0
 801346a:	4619      	mov	r1, r3
 801346c:	4851      	ldr	r0, [pc, #324]	; (80135b4 <fm_menu_config_k_param+0x1c0>)
 801346e:	f7fa fef9 	bl	800e264 <_txe_queue_send>
        break;
 8013472:	e072      	b.n	801355a <fm_menu_config_k_param+0x166>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013474:	4b4e      	ldr	r3, [pc, #312]	; (80135b0 <fm_menu_config_k_param+0x1bc>)
 8013476:	781b      	ldrb	r3, [r3, #0]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d004      	beq.n	8013486 <fm_menu_config_k_param+0x92>
            {
                fm_factory_modify_k_factor_subs(digit_modify);
 801347c:	4b4b      	ldr	r3, [pc, #300]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 801347e:	781b      	ldrb	r3, [r3, #0]
 8013480:	4618      	mov	r0, r3
 8013482:	f7fb fd7d 	bl	800ef80 <fm_factory_modify_k_factor_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013486:	2301      	movs	r3, #1
 8013488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801348c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013490:	2200      	movs	r2, #0
 8013492:	4619      	mov	r1, r3
 8013494:	4847      	ldr	r0, [pc, #284]	; (80135b4 <fm_menu_config_k_param+0x1c0>)
 8013496:	f7fa fee5 	bl	800e264 <_txe_queue_send>
        break;
 801349a:	e05e      	b.n	801355a <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ENTER:
            if (correct_password)
 801349c:	4b44      	ldr	r3, [pc, #272]	; (80135b0 <fm_menu_config_k_param+0x1bc>)
 801349e:	781b      	ldrb	r3, [r3, #0]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d03e      	beq.n	8013522 <fm_menu_config_k_param+0x12e>
            {
                if (digit_modify == DIG_0)
 80134a4:	4b41      	ldr	r3, [pc, #260]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d103      	bne.n	80134b4 <fm_menu_config_k_param+0xc0>
                {
                    digit_modify = DIG_1;
 80134ac:	4b3f      	ldr	r3, [pc, #252]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 80134ae:	2201      	movs	r2, #1
 80134b0:	701a      	strb	r2, [r3, #0]
 80134b2:	e036      	b.n	8013522 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_1)
 80134b4:	4b3d      	ldr	r3, [pc, #244]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	2b01      	cmp	r3, #1
 80134ba:	d103      	bne.n	80134c4 <fm_menu_config_k_param+0xd0>
                {
                    digit_modify = DIG_2;
 80134bc:	4b3b      	ldr	r3, [pc, #236]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 80134be:	2202      	movs	r2, #2
 80134c0:	701a      	strb	r2, [r3, #0]
 80134c2:	e02e      	b.n	8013522 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_2)
 80134c4:	4b39      	ldr	r3, [pc, #228]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	2b02      	cmp	r3, #2
 80134ca:	d103      	bne.n	80134d4 <fm_menu_config_k_param+0xe0>
                {
                    digit_modify = DIG_3;
 80134cc:	4b37      	ldr	r3, [pc, #220]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 80134ce:	2203      	movs	r2, #3
 80134d0:	701a      	strb	r2, [r3, #0]
 80134d2:	e026      	b.n	8013522 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_3)
 80134d4:	4b35      	ldr	r3, [pc, #212]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 80134d6:	781b      	ldrb	r3, [r3, #0]
 80134d8:	2b03      	cmp	r3, #3
 80134da:	d103      	bne.n	80134e4 <fm_menu_config_k_param+0xf0>
                {
                    digit_modify = DIG_4;
 80134dc:	4b33      	ldr	r3, [pc, #204]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 80134de:	2204      	movs	r2, #4
 80134e0:	701a      	strb	r2, [r3, #0]
 80134e2:	e01e      	b.n	8013522 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_4)
 80134e4:	4b31      	ldr	r3, [pc, #196]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	2b04      	cmp	r3, #4
 80134ea:	d103      	bne.n	80134f4 <fm_menu_config_k_param+0x100>
                {
                    digit_modify = DIG_5;
 80134ec:	4b2f      	ldr	r3, [pc, #188]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 80134ee:	2205      	movs	r2, #5
 80134f0:	701a      	strb	r2, [r3, #0]
 80134f2:	e016      	b.n	8013522 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_5)
 80134f4:	4b2d      	ldr	r3, [pc, #180]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 80134f6:	781b      	ldrb	r3, [r3, #0]
 80134f8:	2b05      	cmp	r3, #5
 80134fa:	d103      	bne.n	8013504 <fm_menu_config_k_param+0x110>
                {
                    digit_modify = DIG_6;
 80134fc:	4b2b      	ldr	r3, [pc, #172]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 80134fe:	2206      	movs	r2, #6
 8013500:	701a      	strb	r2, [r3, #0]
 8013502:	e00e      	b.n	8013522 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_6)
 8013504:	4b29      	ldr	r3, [pc, #164]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	2b06      	cmp	r3, #6
 801350a:	d103      	bne.n	8013514 <fm_menu_config_k_param+0x120>
                {
                    digit_modify = DIG_7;
 801350c:	4b27      	ldr	r3, [pc, #156]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 801350e:	2207      	movs	r2, #7
 8013510:	701a      	strb	r2, [r3, #0]
 8013512:	e006      	b.n	8013522 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_7)
 8013514:	4b25      	ldr	r3, [pc, #148]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 8013516:	781b      	ldrb	r3, [r3, #0]
 8013518:	2b07      	cmp	r3, #7
 801351a:	d102      	bne.n	8013522 <fm_menu_config_k_param+0x12e>
                {
                    digit_modify = DIG_0;
 801351c:	4b23      	ldr	r3, [pc, #140]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 801351e:	2200      	movs	r2, #0
 8013520:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013522:	2301      	movs	r3, #1
 8013524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013528:	f107 0323 	add.w	r3, r7, #35	; 0x23
 801352c:	2200      	movs	r2, #0
 801352e:	4619      	mov	r1, r3
 8013530:	4820      	ldr	r0, [pc, #128]	; (80135b4 <fm_menu_config_k_param+0x1c0>)
 8013532:	f7fa fe97 	bl	800e264 <_txe_queue_send>
        break;
 8013536:	e010      	b.n	801355a <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013538:	4b1f      	ldr	r3, [pc, #124]	; (80135b8 <fm_menu_config_k_param+0x1c4>)
 801353a:	2201      	movs	r2, #1
 801353c:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 801353e:	4b1f      	ldr	r3, [pc, #124]	; (80135bc <fm_menu_config_k_param+0x1c8>)
 8013540:	627b      	str	r3, [r7, #36]	; 0x24
            event_now = EVENT_LCD_REFRESH;
 8013542:	2301      	movs	r3, #1
 8013544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013548:	f107 0323 	add.w	r3, r7, #35	; 0x23
 801354c:	2200      	movs	r2, #0
 801354e:	4619      	mov	r1, r3
 8013550:	4818      	ldr	r0, [pc, #96]	; (80135b4 <fm_menu_config_k_param+0x1c0>)
 8013552:	f7fa fe87 	bl	800e264 <_txe_queue_send>
        break;
 8013556:	e000      	b.n	801355a <fm_menu_config_k_param+0x166>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013558:	bf00      	nop
    }

    previous_event = event_id;
 801355a:	4a19      	ldr	r2, [pc, #100]	; (80135c0 <fm_menu_config_k_param+0x1cc>)
 801355c:	79fb      	ldrb	r3, [r7, #7]
 801355e:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K\n";
 8013560:	4b18      	ldr	r3, [pc, #96]	; (80135c4 <fm_menu_config_k_param+0x1d0>)
 8013562:	f107 0408 	add.w	r4, r7, #8
 8013566:	461d      	mov	r5, r3
 8013568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801356a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801356c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013570:	e884 0003 	stmia.w	r4, {r0, r1}
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013574:	f107 0308 	add.w	r3, r7, #8
 8013578:	2118      	movs	r1, #24
 801357a:	4618      	mov	r0, r3
 801357c:	f7fb faae 	bl	800eadc <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8013580:	4b0d      	ldr	r3, [pc, #52]	; (80135b8 <fm_menu_config_k_param+0x1c4>)
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	2b01      	cmp	r3, #1
 8013586:	d108      	bne.n	801359a <fm_menu_config_k_param+0x1a6>
    {
        digit_modify = DIG_0;
 8013588:	4b08      	ldr	r3, [pc, #32]	; (80135ac <fm_menu_config_k_param+0x1b8>)
 801358a:	2200      	movs	r2, #0
 801358c:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801358e:	4b06      	ldr	r3, [pc, #24]	; (80135a8 <fm_menu_config_k_param+0x1b4>)
 8013590:	2201      	movs	r2, #1
 8013592:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013594:	4b08      	ldr	r3, [pc, #32]	; (80135b8 <fm_menu_config_k_param+0x1c4>)
 8013596:	2200      	movs	r2, #0
 8013598:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801359c:	4618      	mov	r0, r3
 801359e:	3728      	adds	r7, #40	; 0x28
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bdb0      	pop	{r4, r5, r7, pc}
 80135a4:	080133f5 	.word	0x080133f5
 80135a8:	20000147 	.word	0x20000147
 80135ac:	20001dcb 	.word	0x20001dcb
 80135b0:	20001db6 	.word	0x20001db6
 80135b4:	20001388 	.word	0x20001388
 80135b8:	20001dcc 	.word	0x20001dcc
 80135bc:	08012cb1 	.word	0x08012cb1
 80135c0:	20001db7 	.word	0x20001db7
 80135c4:	080152f0 	.word	0x080152f0

080135c8 <fm_menu_config_pass>:
 * almacenada en memoria (DOWN -> UP -> UP -> ENTER).
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_pass(fm_event_t event_id)
{
 80135c8:	b5b0      	push	{r4, r5, r7, lr}
 80135ca:	b086      	sub	sp, #24
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	4603      	mov	r3, r0
 80135d0:	71fb      	strb	r3, [r7, #7]
        0,
        0
    };
    static uint8_t password_index = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 80135d2:	4ba4      	ldr	r3, [pc, #656]	; (8013864 <fm_menu_config_pass+0x29c>)
 80135d4:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80135d6:	4ba4      	ldr	r3, [pc, #656]	; (8013868 <fm_menu_config_pass+0x2a0>)
 80135d8:	781b      	ldrb	r3, [r3, #0]
 80135da:	2b01      	cmp	r3, #1
 80135dc:	d10a      	bne.n	80135f4 <fm_menu_config_pass+0x2c>
    {
        in_configuration = 1;
 80135de:	4ba3      	ldr	r3, [pc, #652]	; (801386c <fm_menu_config_pass+0x2a4>)
 80135e0:	2201      	movs	r2, #1
 80135e2:	701a      	strb	r2, [r3, #0]
        correct_password = 0;
 80135e4:	4ba2      	ldr	r3, [pc, #648]	; (8013870 <fm_menu_config_pass+0x2a8>)
 80135e6:	2200      	movs	r2, #0
 80135e8:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 80135ea:	f7fc f902 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 80135ee:	4b9e      	ldr	r3, [pc, #632]	; (8013868 <fm_menu_config_pass+0x2a0>)
 80135f0:	2200      	movs	r2, #0
 80135f2:	701a      	strb	r2, [r3, #0]
    }

    lcd_set_symbol(PASS, 0x00);
 80135f4:	2100      	movs	r1, #0
 80135f6:	200a      	movs	r0, #10
 80135f8:	f7fd ff68 	bl	80114cc <lcd_set_symbol>
    /*
     * Cada vez que se introduce un dígito de la contraseña, aparece un 8 nuevo
     * en la pantalla, hasta 3 veces (luego de la cuarta vez, se pasa al menú
     * de configuración del factor K).
     */
    if (password_index == 1)
 80135fc:	4b9d      	ldr	r3, [pc, #628]	; (8013874 <fm_menu_config_pass+0x2ac>)
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	2b01      	cmp	r3, #1
 8013602:	d104      	bne.n	801360e <fm_menu_config_pass+0x46>
    {
        lcd_set_symbol(PASS1, 0x00);
 8013604:	2100      	movs	r1, #0
 8013606:	200d      	movs	r0, #13
 8013608:	f7fd ff60 	bl	80114cc <lcd_set_symbol>
 801360c:	e010      	b.n	8013630 <fm_menu_config_pass+0x68>
    }
    else if (password_index == 2)
 801360e:	4b99      	ldr	r3, [pc, #612]	; (8013874 <fm_menu_config_pass+0x2ac>)
 8013610:	781b      	ldrb	r3, [r3, #0]
 8013612:	2b02      	cmp	r3, #2
 8013614:	d104      	bne.n	8013620 <fm_menu_config_pass+0x58>
    {
        lcd_set_symbol(PASS2, 0x00);
 8013616:	2100      	movs	r1, #0
 8013618:	200e      	movs	r0, #14
 801361a:	f7fd ff57 	bl	80114cc <lcd_set_symbol>
 801361e:	e007      	b.n	8013630 <fm_menu_config_pass+0x68>
    }
    else if (password_index == PASSWORD_LENGTH - 1)
 8013620:	4b94      	ldr	r3, [pc, #592]	; (8013874 <fm_menu_config_pass+0x2ac>)
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	2b03      	cmp	r3, #3
 8013626:	d103      	bne.n	8013630 <fm_menu_config_pass+0x68>
    {
        lcd_set_symbol(PASS3, 0x00);
 8013628:	2100      	movs	r1, #0
 801362a:	200f      	movs	r0, #15
 801362c:	f7fd ff4e 	bl	80114cc <lcd_set_symbol>
    }
    fm_lcd_refresh();
 8013630:	f7fc fc71 	bl	800ff16 <fm_lcd_refresh>

    switch (event_id)
 8013634:	79fb      	ldrb	r3, [r7, #7]
 8013636:	3b01      	subs	r3, #1
 8013638:	2b04      	cmp	r3, #4
 801363a:	f200 80b1 	bhi.w	80137a0 <fm_menu_config_pass+0x1d8>
 801363e:	a201      	add	r2, pc, #4	; (adr r2, 8013644 <fm_menu_config_pass+0x7c>)
 8013640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013644:	080137a1 	.word	0x080137a1
 8013648:	08013659 	.word	0x08013659
 801364c:	080136ab 	.word	0x080136ab
 8013650:	080136fd 	.word	0x080136fd
 8013654:	0801374f 	.word	0x0801374f
    {
        case EVENT_KEY_UP:
            password[password_index] = 1;
 8013658:	4b86      	ldr	r3, [pc, #536]	; (8013874 <fm_menu_config_pass+0x2ac>)
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	461a      	mov	r2, r3
 801365e:	4b86      	ldr	r3, [pc, #536]	; (8013878 <fm_menu_config_pass+0x2b0>)
 8013660:	2101      	movs	r1, #1
 8013662:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013664:	4b83      	ldr	r3, [pc, #524]	; (8013874 <fm_menu_config_pass+0x2ac>)
 8013666:	781b      	ldrb	r3, [r3, #0]
 8013668:	2b02      	cmp	r3, #2
 801366a:	d80f      	bhi.n	801368c <fm_menu_config_pass+0xc4>
            {
                event_now = EVENT_LCD_REFRESH;
 801366c:	2301      	movs	r3, #1
 801366e:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013670:	f107 0313 	add.w	r3, r7, #19
 8013674:	2200      	movs	r2, #0
 8013676:	4619      	mov	r1, r3
 8013678:	4880      	ldr	r0, [pc, #512]	; (801387c <fm_menu_config_pass+0x2b4>)
 801367a:	f7fa fdf3 	bl	800e264 <_txe_queue_send>
                password_index++;
 801367e:	4b7d      	ldr	r3, [pc, #500]	; (8013874 <fm_menu_config_pass+0x2ac>)
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	3301      	adds	r3, #1
 8013684:	b2da      	uxtb	r2, r3
 8013686:	4b7b      	ldr	r3, [pc, #492]	; (8013874 <fm_menu_config_pass+0x2ac>)
 8013688:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 801368a:	e08a      	b.n	80137a2 <fm_menu_config_pass+0x1da>
                new_exit = 1;
 801368c:	4b7c      	ldr	r3, [pc, #496]	; (8013880 <fm_menu_config_pass+0x2b8>)
 801368e:	2201      	movs	r2, #1
 8013690:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 8013692:	4b7c      	ldr	r3, [pc, #496]	; (8013884 <fm_menu_config_pass+0x2bc>)
 8013694:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8013696:	2301      	movs	r3, #1
 8013698:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801369a:	f107 0313 	add.w	r3, r7, #19
 801369e:	2200      	movs	r2, #0
 80136a0:	4619      	mov	r1, r3
 80136a2:	4876      	ldr	r0, [pc, #472]	; (801387c <fm_menu_config_pass+0x2b4>)
 80136a4:	f7fa fdde 	bl	800e264 <_txe_queue_send>
        break;
 80136a8:	e07b      	b.n	80137a2 <fm_menu_config_pass+0x1da>
        case EVENT_KEY_DOWN:
            password[password_index] = 2;
 80136aa:	4b72      	ldr	r3, [pc, #456]	; (8013874 <fm_menu_config_pass+0x2ac>)
 80136ac:	781b      	ldrb	r3, [r3, #0]
 80136ae:	461a      	mov	r2, r3
 80136b0:	4b71      	ldr	r3, [pc, #452]	; (8013878 <fm_menu_config_pass+0x2b0>)
 80136b2:	2102      	movs	r1, #2
 80136b4:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 80136b6:	4b6f      	ldr	r3, [pc, #444]	; (8013874 <fm_menu_config_pass+0x2ac>)
 80136b8:	781b      	ldrb	r3, [r3, #0]
 80136ba:	2b02      	cmp	r3, #2
 80136bc:	d80f      	bhi.n	80136de <fm_menu_config_pass+0x116>
            {
                event_now = EVENT_LCD_REFRESH;
 80136be:	2301      	movs	r3, #1
 80136c0:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136c2:	f107 0313 	add.w	r3, r7, #19
 80136c6:	2200      	movs	r2, #0
 80136c8:	4619      	mov	r1, r3
 80136ca:	486c      	ldr	r0, [pc, #432]	; (801387c <fm_menu_config_pass+0x2b4>)
 80136cc:	f7fa fdca 	bl	800e264 <_txe_queue_send>
                password_index++;
 80136d0:	4b68      	ldr	r3, [pc, #416]	; (8013874 <fm_menu_config_pass+0x2ac>)
 80136d2:	781b      	ldrb	r3, [r3, #0]
 80136d4:	3301      	adds	r3, #1
 80136d6:	b2da      	uxtb	r2, r3
 80136d8:	4b66      	ldr	r3, [pc, #408]	; (8013874 <fm_menu_config_pass+0x2ac>)
 80136da:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 80136dc:	e061      	b.n	80137a2 <fm_menu_config_pass+0x1da>
                new_exit = 1;
 80136de:	4b68      	ldr	r3, [pc, #416]	; (8013880 <fm_menu_config_pass+0x2b8>)
 80136e0:	2201      	movs	r2, #1
 80136e2:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 80136e4:	4b67      	ldr	r3, [pc, #412]	; (8013884 <fm_menu_config_pass+0x2bc>)
 80136e6:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 80136e8:	2301      	movs	r3, #1
 80136ea:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136ec:	f107 0313 	add.w	r3, r7, #19
 80136f0:	2200      	movs	r2, #0
 80136f2:	4619      	mov	r1, r3
 80136f4:	4861      	ldr	r0, [pc, #388]	; (801387c <fm_menu_config_pass+0x2b4>)
 80136f6:	f7fa fdb5 	bl	800e264 <_txe_queue_send>
        break;
 80136fa:	e052      	b.n	80137a2 <fm_menu_config_pass+0x1da>
        case EVENT_KEY_ENTER:
            password[password_index] = 3; // @suppress("Avoid magic numbers")
 80136fc:	4b5d      	ldr	r3, [pc, #372]	; (8013874 <fm_menu_config_pass+0x2ac>)
 80136fe:	781b      	ldrb	r3, [r3, #0]
 8013700:	461a      	mov	r2, r3
 8013702:	4b5d      	ldr	r3, [pc, #372]	; (8013878 <fm_menu_config_pass+0x2b0>)
 8013704:	2103      	movs	r1, #3
 8013706:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013708:	4b5a      	ldr	r3, [pc, #360]	; (8013874 <fm_menu_config_pass+0x2ac>)
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	2b02      	cmp	r3, #2
 801370e:	d80f      	bhi.n	8013730 <fm_menu_config_pass+0x168>
            {
                event_now = EVENT_LCD_REFRESH;
 8013710:	2301      	movs	r3, #1
 8013712:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013714:	f107 0313 	add.w	r3, r7, #19
 8013718:	2200      	movs	r2, #0
 801371a:	4619      	mov	r1, r3
 801371c:	4857      	ldr	r0, [pc, #348]	; (801387c <fm_menu_config_pass+0x2b4>)
 801371e:	f7fa fda1 	bl	800e264 <_txe_queue_send>
                password_index++;
 8013722:	4b54      	ldr	r3, [pc, #336]	; (8013874 <fm_menu_config_pass+0x2ac>)
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	3301      	adds	r3, #1
 8013728:	b2da      	uxtb	r2, r3
 801372a:	4b52      	ldr	r3, [pc, #328]	; (8013874 <fm_menu_config_pass+0x2ac>)
 801372c:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 801372e:	e038      	b.n	80137a2 <fm_menu_config_pass+0x1da>
                new_exit = 1;
 8013730:	4b53      	ldr	r3, [pc, #332]	; (8013880 <fm_menu_config_pass+0x2b8>)
 8013732:	2201      	movs	r2, #1
 8013734:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 8013736:	4b53      	ldr	r3, [pc, #332]	; (8013884 <fm_menu_config_pass+0x2bc>)
 8013738:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 801373a:	2301      	movs	r3, #1
 801373c:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801373e:	f107 0313 	add.w	r3, r7, #19
 8013742:	2200      	movs	r2, #0
 8013744:	4619      	mov	r1, r3
 8013746:	484d      	ldr	r0, [pc, #308]	; (801387c <fm_menu_config_pass+0x2b4>)
 8013748:	f7fa fd8c 	bl	800e264 <_txe_queue_send>
        break;
 801374c:	e029      	b.n	80137a2 <fm_menu_config_pass+0x1da>
        case EVENT_KEY_ESC:
            password[password_index] = 4; // @suppress("Avoid magic numbers")
 801374e:	4b49      	ldr	r3, [pc, #292]	; (8013874 <fm_menu_config_pass+0x2ac>)
 8013750:	781b      	ldrb	r3, [r3, #0]
 8013752:	461a      	mov	r2, r3
 8013754:	4b48      	ldr	r3, [pc, #288]	; (8013878 <fm_menu_config_pass+0x2b0>)
 8013756:	2104      	movs	r1, #4
 8013758:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 801375a:	4b46      	ldr	r3, [pc, #280]	; (8013874 <fm_menu_config_pass+0x2ac>)
 801375c:	781b      	ldrb	r3, [r3, #0]
 801375e:	2b02      	cmp	r3, #2
 8013760:	d80f      	bhi.n	8013782 <fm_menu_config_pass+0x1ba>
            {
                event_now = EVENT_LCD_REFRESH;
 8013762:	2301      	movs	r3, #1
 8013764:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013766:	f107 0313 	add.w	r3, r7, #19
 801376a:	2200      	movs	r2, #0
 801376c:	4619      	mov	r1, r3
 801376e:	4843      	ldr	r0, [pc, #268]	; (801387c <fm_menu_config_pass+0x2b4>)
 8013770:	f7fa fd78 	bl	800e264 <_txe_queue_send>
                password_index++;
 8013774:	4b3f      	ldr	r3, [pc, #252]	; (8013874 <fm_menu_config_pass+0x2ac>)
 8013776:	781b      	ldrb	r3, [r3, #0]
 8013778:	3301      	adds	r3, #1
 801377a:	b2da      	uxtb	r2, r3
 801377c:	4b3d      	ldr	r3, [pc, #244]	; (8013874 <fm_menu_config_pass+0x2ac>)
 801377e:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 8013780:	e00f      	b.n	80137a2 <fm_menu_config_pass+0x1da>
                new_exit = 1;
 8013782:	4b3f      	ldr	r3, [pc, #252]	; (8013880 <fm_menu_config_pass+0x2b8>)
 8013784:	2201      	movs	r2, #1
 8013786:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 8013788:	4b3e      	ldr	r3, [pc, #248]	; (8013884 <fm_menu_config_pass+0x2bc>)
 801378a:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 801378c:	2301      	movs	r3, #1
 801378e:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013790:	f107 0313 	add.w	r3, r7, #19
 8013794:	2200      	movs	r2, #0
 8013796:	4619      	mov	r1, r3
 8013798:	4838      	ldr	r0, [pc, #224]	; (801387c <fm_menu_config_pass+0x2b4>)
 801379a:	f7fa fd63 	bl	800e264 <_txe_queue_send>
        break;
 801379e:	e000      	b.n	80137a2 <fm_menu_config_pass+0x1da>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80137a0:	bf00      	nop
    }

    previous_event = event_id;
 80137a2:	4a39      	ldr	r2, [pc, #228]	; (8013888 <fm_menu_config_pass+0x2c0>)
 80137a4:	79fb      	ldrb	r3, [r7, #7]
 80137a6:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Password\n";
 80137a8:	4a38      	ldr	r2, [pc, #224]	; (801388c <fm_menu_config_pass+0x2c4>)
 80137aa:	f107 0308 	add.w	r3, r7, #8
 80137ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80137b0:	c303      	stmia	r3!, {r0, r1}
 80137b2:	801a      	strh	r2, [r3, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80137b4:	f107 0308 	add.w	r3, r7, #8
 80137b8:	210a      	movs	r1, #10
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7fb f98e 	bl	800eadc <fm_debug_msg_uart>
    #endif

    if (new_exit == 1 && password_index >= PASSWORD_LENGTH - 1)
 80137c0:	4b2f      	ldr	r3, [pc, #188]	; (8013880 <fm_menu_config_pass+0x2b8>)
 80137c2:	781b      	ldrb	r3, [r3, #0]
 80137c4:	2b01      	cmp	r3, #1
 80137c6:	d147      	bne.n	8013858 <fm_menu_config_pass+0x290>
 80137c8:	4b2a      	ldr	r3, [pc, #168]	; (8013874 <fm_menu_config_pass+0x2ac>)
 80137ca:	781b      	ldrb	r3, [r3, #0]
 80137cc:	2b02      	cmp	r3, #2
 80137ce:	d943      	bls.n	8013858 <fm_menu_config_pass+0x290>
    {
        /*
         * Si la contraseña ingresada es correcta, se activa una flag global que
         * permite modificar los parámetros de los menús de configuración.
         */
        if (password[0] == 2 && password[1] == 1 && password[2] == 1
 80137d0:	4b29      	ldr	r3, [pc, #164]	; (8013878 <fm_menu_config_pass+0x2b0>)
 80137d2:	781b      	ldrb	r3, [r3, #0]
 80137d4:	2b02      	cmp	r3, #2
 80137d6:	d10e      	bne.n	80137f6 <fm_menu_config_pass+0x22e>
 80137d8:	4b27      	ldr	r3, [pc, #156]	; (8013878 <fm_menu_config_pass+0x2b0>)
 80137da:	785b      	ldrb	r3, [r3, #1]
 80137dc:	2b01      	cmp	r3, #1
 80137de:	d10a      	bne.n	80137f6 <fm_menu_config_pass+0x22e>
 80137e0:	4b25      	ldr	r3, [pc, #148]	; (8013878 <fm_menu_config_pass+0x2b0>)
 80137e2:	789b      	ldrb	r3, [r3, #2]
 80137e4:	2b01      	cmp	r3, #1
 80137e6:	d106      	bne.n	80137f6 <fm_menu_config_pass+0x22e>
        && password[PASSWORD_LENGTH - 1] == 3)
 80137e8:	4b23      	ldr	r3, [pc, #140]	; (8013878 <fm_menu_config_pass+0x2b0>)
 80137ea:	78db      	ldrb	r3, [r3, #3]
 80137ec:	2b03      	cmp	r3, #3
 80137ee:	d102      	bne.n	80137f6 <fm_menu_config_pass+0x22e>
        {
            correct_password = 1;
 80137f0:	4b1f      	ldr	r3, [pc, #124]	; (8013870 <fm_menu_config_pass+0x2a8>)
 80137f2:	2201      	movs	r2, #1
 80137f4:	701a      	strb	r2, [r3, #0]
        }
        fm_factory_modify_date(fm_calendar_get_day(),
 80137f6:	f7fb f907 	bl	800ea08 <fm_calendar_get_day>
 80137fa:	4604      	mov	r4, r0
 80137fc:	f7fb f90e 	bl	800ea1c <fm_calendar_get_month>
 8013800:	4605      	mov	r5, r0
 8013802:	f7fb f915 	bl	800ea30 <fm_calendar_get_year>
 8013806:	4603      	mov	r3, r0
 8013808:	461a      	mov	r2, r3
 801380a:	4629      	mov	r1, r5
 801380c:	4620      	mov	r0, r4
 801380e:	f7fb fb23 	bl	800ee58 <fm_factory_modify_date>
        fm_calendar_get_month(), fm_calendar_get_year());

        fm_factory_modify_time(fm_calendar_get_hour(),
 8013812:	f7fb f8db 	bl	800e9cc <fm_calendar_get_hour>
 8013816:	4604      	mov	r4, r0
 8013818:	f7fb f8e2 	bl	800e9e0 <fm_calendar_get_minute>
 801381c:	4605      	mov	r5, r0
 801381e:	f7fb f8e9 	bl	800e9f4 <fm_calendar_get_second>
 8013822:	4603      	mov	r3, r0
 8013824:	461a      	mov	r2, r3
 8013826:	4629      	mov	r1, r5
 8013828:	4620      	mov	r0, r4
 801382a:	f7fb fb41 	bl	800eeb0 <fm_factory_modify_time>
        fm_calendar_get_minute(), fm_calendar_get_second());
        /*
         * Reinicio el arreglo de la contraseña ingresada.
         */
        password_index = 0;
 801382e:	4b11      	ldr	r3, [pc, #68]	; (8013874 <fm_menu_config_pass+0x2ac>)
 8013830:	2200      	movs	r2, #0
 8013832:	701a      	strb	r2, [r3, #0]
        password[0] = 0;
 8013834:	4b10      	ldr	r3, [pc, #64]	; (8013878 <fm_menu_config_pass+0x2b0>)
 8013836:	2200      	movs	r2, #0
 8013838:	701a      	strb	r2, [r3, #0]
        password[1] = 0;
 801383a:	4b0f      	ldr	r3, [pc, #60]	; (8013878 <fm_menu_config_pass+0x2b0>)
 801383c:	2200      	movs	r2, #0
 801383e:	705a      	strb	r2, [r3, #1]
        password[2] = 0;
 8013840:	4b0d      	ldr	r3, [pc, #52]	; (8013878 <fm_menu_config_pass+0x2b0>)
 8013842:	2200      	movs	r2, #0
 8013844:	709a      	strb	r2, [r3, #2]
        password[PASSWORD_LENGTH - 1] = 0;
 8013846:	4b0c      	ldr	r3, [pc, #48]	; (8013878 <fm_menu_config_pass+0x2b0>)
 8013848:	2200      	movs	r2, #0
 801384a:	70da      	strb	r2, [r3, #3]
        new_entry = 1;
 801384c:	4b06      	ldr	r3, [pc, #24]	; (8013868 <fm_menu_config_pass+0x2a0>)
 801384e:	2201      	movs	r2, #1
 8013850:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013852:	4b0b      	ldr	r3, [pc, #44]	; (8013880 <fm_menu_config_pass+0x2b8>)
 8013854:	2200      	movs	r2, #0
 8013856:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013858:	697b      	ldr	r3, [r7, #20]
}
 801385a:	4618      	mov	r0, r3
 801385c:	3718      	adds	r7, #24
 801385e:	46bd      	mov	sp, r7
 8013860:	bdb0      	pop	{r4, r5, r7, pc}
 8013862:	bf00      	nop
 8013864:	080135c9 	.word	0x080135c9
 8013868:	20000148 	.word	0x20000148
 801386c:	20001db8 	.word	0x20001db8
 8013870:	20001db6 	.word	0x20001db6
 8013874:	20001dcd 	.word	0x20001dcd
 8013878:	20001dd0 	.word	0x20001dd0
 801387c:	20001388 	.word	0x20001388
 8013880:	20001dd4 	.word	0x20001dd4
 8013884:	080133f5 	.word	0x080133f5
 8013888:	20001db7 	.word	0x20001db7
 801388c:	08015324 	.word	0x08015324

08013890 <fm_menu_config_units_tim>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_tim(fm_event_t event_id)
{
 8013890:	b5b0      	push	{r4, r5, r7, lr}
 8013892:	b0b8      	sub	sp, #224	; 0xe0
 8013894:	af00      	add	r7, sp, #0
 8013896:	4603      	mov	r3, r0
 8013898:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 801389a:	4b78      	ldr	r3, [pc, #480]	; (8013a7c <fm_menu_config_units_tim+0x1ec>)
 801389c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    fm_event_t event_now;

    if (new_entry == 1)
 80138a0:	4b77      	ldr	r3, [pc, #476]	; (8013a80 <fm_menu_config_units_tim+0x1f0>)
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d104      	bne.n	80138b2 <fm_menu_config_units_tim+0x22>
    {
        fm_lcd_clear();
 80138a8:	f7fb ffa3 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 80138ac:	4b74      	ldr	r3, [pc, #464]	; (8013a80 <fm_menu_config_units_tim+0x1f0>)
 80138ae:	2200      	movs	r2, #0
 80138b0:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_tim(event_id);
 80138b2:	79fb      	ldrb	r3, [r7, #7]
 80138b4:	4618      	mov	r0, r3
 80138b6:	f7fc fb9f 	bl	800fff8 <fm_lcd_units_tim>
    fm_lcd_refresh();
 80138ba:	f7fc fb2c 	bl	800ff16 <fm_lcd_refresh>

    switch (event_id)
 80138be:	79fb      	ldrb	r3, [r7, #7]
 80138c0:	3b01      	subs	r3, #1
 80138c2:	2b04      	cmp	r3, #4
 80138c4:	f200 80b4 	bhi.w	8013a30 <fm_menu_config_units_tim+0x1a0>
 80138c8:	a201      	add	r2, pc, #4	; (adr r2, 80138d0 <fm_menu_config_units_tim+0x40>)
 80138ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138ce:	bf00      	nop
 80138d0:	08013a31 	.word	0x08013a31
 80138d4:	080138e5 	.word	0x080138e5
 80138d8:	0801396d 	.word	0x0801396d
 80138dc:	08013983 	.word	0x08013983
 80138e0:	08013a0f 	.word	0x08013a0f
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80138e4:	4b67      	ldr	r3, [pc, #412]	; (8013a84 <fm_menu_config_units_tim+0x1f4>)
 80138e6:	781b      	ldrb	r3, [r3, #0]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d034      	beq.n	8013956 <fm_menu_config_units_tim+0xc6>
            {
                if (fm_factory_get_rate().unit_time == H)
 80138ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80138f0:	4618      	mov	r0, r3
 80138f2:	f7fb f93b 	bl	800eb6c <fm_factory_get_rate>
 80138f6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d103      	bne.n	8013906 <fm_menu_config_units_tim+0x76>
                {
                    fm_factory_modify_time_units(D);
 80138fe:	2001      	movs	r0, #1
 8013900:	f7fb fd8c 	bl	800f41c <fm_factory_modify_time_units>
 8013904:	e025      	b.n	8013952 <fm_menu_config_units_tim+0xc2>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013906:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801390a:	4618      	mov	r0, r3
 801390c:	f7fb f92e 	bl	800eb6c <fm_factory_get_rate>
 8013910:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8013914:	2b01      	cmp	r3, #1
 8013916:	d103      	bne.n	8013920 <fm_menu_config_units_tim+0x90>
                {
                    fm_factory_modify_time_units(S);
 8013918:	2002      	movs	r0, #2
 801391a:	f7fb fd7f 	bl	800f41c <fm_factory_modify_time_units>
 801391e:	e018      	b.n	8013952 <fm_menu_config_units_tim+0xc2>
                }
                else if (fm_factory_get_rate().unit_time == S)
 8013920:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013924:	4618      	mov	r0, r3
 8013926:	f7fb f921 	bl	800eb6c <fm_factory_get_rate>
 801392a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 801392e:	2b02      	cmp	r3, #2
 8013930:	d103      	bne.n	801393a <fm_menu_config_units_tim+0xaa>
                {
                    fm_factory_modify_time_units(M);
 8013932:	2003      	movs	r0, #3
 8013934:	f7fb fd72 	bl	800f41c <fm_factory_modify_time_units>
 8013938:	e00b      	b.n	8013952 <fm_menu_config_units_tim+0xc2>
                }
                else if (fm_factory_get_rate().unit_time == M)
 801393a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801393e:	4618      	mov	r0, r3
 8013940:	f7fb f914 	bl	800eb6c <fm_factory_get_rate>
 8013944:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8013948:	2b03      	cmp	r3, #3
 801394a:	d102      	bne.n	8013952 <fm_menu_config_units_tim+0xc2>
                {
                    fm_factory_modify_time_units(H);
 801394c:	2000      	movs	r0, #0
 801394e:	f7fb fd65 	bl	800f41c <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 8013952:	f7fb ff4e 	bl	800f7f2 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013956:	2301      	movs	r3, #1
 8013958:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801395c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013960:	2200      	movs	r2, #0
 8013962:	4619      	mov	r1, r3
 8013964:	4848      	ldr	r0, [pc, #288]	; (8013a88 <fm_menu_config_units_tim+0x1f8>)
 8013966:	f7fa fc7d 	bl	800e264 <_txe_queue_send>
        break;
 801396a:	e062      	b.n	8013a32 <fm_menu_config_units_tim+0x1a2>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 801396c:	2301      	movs	r3, #1
 801396e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013972:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013976:	2200      	movs	r2, #0
 8013978:	4619      	mov	r1, r3
 801397a:	4843      	ldr	r0, [pc, #268]	; (8013a88 <fm_menu_config_units_tim+0x1f8>)
 801397c:	f7fa fc72 	bl	800e264 <_txe_queue_send>
        break;
 8013980:	e057      	b.n	8013a32 <fm_menu_config_units_tim+0x1a2>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013982:	4b40      	ldr	r3, [pc, #256]	; (8013a84 <fm_menu_config_units_tim+0x1f4>)
 8013984:	781b      	ldrb	r3, [r3, #0]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d036      	beq.n	80139f8 <fm_menu_config_units_tim+0x168>
            {
                if (fm_factory_get_units_tim().res == RES_0)
 801398a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801398e:	4618      	mov	r0, r3
 8013990:	f7fb f914 	bl	800ebbc <fm_factory_get_units_tim>
 8013994:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8013998:	2b00      	cmp	r3, #0
 801399a:	d104      	bne.n	80139a6 <fm_menu_config_units_tim+0x116>
                {
                    fm_factory_modify_res_rate(RES_1, RES_1);
 801399c:	2101      	movs	r1, #1
 801399e:	2001      	movs	r0, #1
 80139a0:	f7fb fd24 	bl	800f3ec <fm_factory_modify_res_rate>
 80139a4:	e028      	b.n	80139f8 <fm_menu_config_units_tim+0x168>
                }
                else if (fm_factory_get_units_tim().res == RES_1)
 80139a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7fb f906 	bl	800ebbc <fm_factory_get_units_tim>
 80139b0:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80139b4:	2b01      	cmp	r3, #1
 80139b6:	d104      	bne.n	80139c2 <fm_menu_config_units_tim+0x132>
                {
                    fm_factory_modify_res_rate(RES_2, RES_2);
 80139b8:	2102      	movs	r1, #2
 80139ba:	2002      	movs	r0, #2
 80139bc:	f7fb fd16 	bl	800f3ec <fm_factory_modify_res_rate>
 80139c0:	e01a      	b.n	80139f8 <fm_menu_config_units_tim+0x168>
                }
                else if (fm_factory_get_units_tim().res == RES_2)
 80139c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7fb f8f8 	bl	800ebbc <fm_factory_get_units_tim>
 80139cc:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 80139d0:	2b02      	cmp	r3, #2
 80139d2:	d104      	bne.n	80139de <fm_menu_config_units_tim+0x14e>
                {
                    fm_factory_modify_res_rate(RES_3, RES_3);
 80139d4:	2103      	movs	r1, #3
 80139d6:	2003      	movs	r0, #3
 80139d8:	f7fb fd08 	bl	800f3ec <fm_factory_modify_res_rate>
 80139dc:	e00c      	b.n	80139f8 <fm_menu_config_units_tim+0x168>
                }
                else if (fm_factory_get_units_tim().res == RES_3)
 80139de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80139e2:	4618      	mov	r0, r3
 80139e4:	f7fb f8ea 	bl	800ebbc <fm_factory_get_units_tim>
 80139e8:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80139ec:	2b03      	cmp	r3, #3
 80139ee:	d103      	bne.n	80139f8 <fm_menu_config_units_tim+0x168>
                {
                    fm_factory_modify_res_rate(RES_0, RES_0);
 80139f0:	2100      	movs	r1, #0
 80139f2:	2000      	movs	r0, #0
 80139f4:	f7fb fcfa 	bl	800f3ec <fm_factory_modify_res_rate>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80139f8:	2301      	movs	r3, #1
 80139fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80139fe:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013a02:	2200      	movs	r2, #0
 8013a04:	4619      	mov	r1, r3
 8013a06:	4820      	ldr	r0, [pc, #128]	; (8013a88 <fm_menu_config_units_tim+0x1f8>)
 8013a08:	f7fa fc2c 	bl	800e264 <_txe_queue_send>
        break;
 8013a0c:	e011      	b.n	8013a32 <fm_menu_config_units_tim+0x1a2>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013a0e:	4b1f      	ldr	r3, [pc, #124]	; (8013a8c <fm_menu_config_units_tim+0x1fc>)
 8013a10:	2201      	movs	r2, #1
 8013a12:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 8013a14:	4b1e      	ldr	r3, [pc, #120]	; (8013a90 <fm_menu_config_units_tim+0x200>)
 8013a16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            event_now = EVENT_LCD_REFRESH;
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013a20:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013a24:	2200      	movs	r2, #0
 8013a26:	4619      	mov	r1, r3
 8013a28:	4817      	ldr	r0, [pc, #92]	; (8013a88 <fm_menu_config_units_tim+0x1f8>)
 8013a2a:	f7fa fc1b 	bl	800e264 <_txe_queue_send>
        break;
 8013a2e:	e000      	b.n	8013a32 <fm_menu_config_units_tim+0x1a2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013a30:	bf00      	nop
    }

    previous_event = event_id;
 8013a32:	4a18      	ldr	r2, [pc, #96]	; (8013a94 <fm_menu_config_units_tim+0x204>)
 8013a34:	79fb      	ldrb	r3, [r7, #7]
 8013a36:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar unidades de tiempo y resolucion\n";
 8013a38:	4b17      	ldr	r3, [pc, #92]	; (8013a98 <fm_menu_config_units_tim+0x208>)
 8013a3a:	f107 0408 	add.w	r4, r7, #8
 8013a3e:	461d      	mov	r5, r3
 8013a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013a48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013a4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013a50:	f107 0308 	add.w	r3, r7, #8
 8013a54:	212c      	movs	r1, #44	; 0x2c
 8013a56:	4618      	mov	r0, r3
 8013a58:	f7fb f840 	bl	800eadc <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8013a5c:	4b0b      	ldr	r3, [pc, #44]	; (8013a8c <fm_menu_config_units_tim+0x1fc>)
 8013a5e:	781b      	ldrb	r3, [r3, #0]
 8013a60:	2b01      	cmp	r3, #1
 8013a62:	d105      	bne.n	8013a70 <fm_menu_config_units_tim+0x1e0>
    {
        new_entry = 1;
 8013a64:	4b06      	ldr	r3, [pc, #24]	; (8013a80 <fm_menu_config_units_tim+0x1f0>)
 8013a66:	2201      	movs	r2, #1
 8013a68:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013a6a:	4b08      	ldr	r3, [pc, #32]	; (8013a8c <fm_menu_config_units_tim+0x1fc>)
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	37e0      	adds	r7, #224	; 0xe0
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8013a7c:	08013891 	.word	0x08013891
 8013a80:	20000149 	.word	0x20000149
 8013a84:	20001db6 	.word	0x20001db6
 8013a88:	20001388 	.word	0x20001388
 8013a8c:	20001dd5 	.word	0x20001dd5
 8013a90:	0801236d 	.word	0x0801236d
 8013a94:	20001db7 	.word	0x20001db7
 8013a98:	08015344 	.word	0x08015344

08013a9c <fm_menu_config_units_vol>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_vol(fm_event_t event_id)
{
 8013a9c:	b5b0      	push	{r4, r5, r7, lr}
 8013a9e:	b0c8      	sub	sp, #288	; 0x120
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	4602      	mov	r2, r0
 8013aa4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013aa8:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8013aac:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8013aae:	4b8f      	ldr	r3, [pc, #572]	; (8013cec <fm_menu_config_units_vol+0x250>)
 8013ab0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    fm_event_t event_now;

    if (new_entry == 1)
 8013ab4:	4b8e      	ldr	r3, [pc, #568]	; (8013cf0 <fm_menu_config_units_vol+0x254>)
 8013ab6:	781b      	ldrb	r3, [r3, #0]
 8013ab8:	2b01      	cmp	r3, #1
 8013aba:	d104      	bne.n	8013ac6 <fm_menu_config_units_vol+0x2a>
    {
        fm_lcd_clear();
 8013abc:	f7fb fe99 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 8013ac0:	4b8b      	ldr	r3, [pc, #556]	; (8013cf0 <fm_menu_config_units_vol+0x254>)
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_vol(event_id);
 8013ac6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013aca:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7fc fb2d 	bl	8010130 <fm_lcd_units_vol>
    fm_lcd_refresh();
 8013ad6:	f7fc fa1e 	bl	800ff16 <fm_lcd_refresh>

    switch (event_id)
 8013ada:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013ade:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	3b01      	subs	r3, #1
 8013ae6:	2b04      	cmp	r3, #4
 8013ae8:	f200 80d2 	bhi.w	8013c90 <fm_menu_config_units_vol+0x1f4>
 8013aec:	a201      	add	r2, pc, #4	; (adr r2, 8013af4 <fm_menu_config_units_vol+0x58>)
 8013aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013af2:	bf00      	nop
 8013af4:	08013c91 	.word	0x08013c91
 8013af8:	08013b09 	.word	0x08013b09
 8013afc:	08013bc5 	.word	0x08013bc5
 8013b00:	08013bdb 	.word	0x08013bdb
 8013b04:	08013c6f 	.word	0x08013c6f
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013b08:	4b7a      	ldr	r3, [pc, #488]	; (8013cf4 <fm_menu_config_units_vol+0x258>)
 8013b0a:	781b      	ldrb	r3, [r3, #0]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d04e      	beq.n	8013bae <fm_menu_config_units_vol+0x112>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 8013b10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7fa fffd 	bl	800eb14 <fm_factory_get_acm>
 8013b1a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d103      	bne.n	8013b2a <fm_menu_config_units_vol+0x8e>
                {
                    fm_factory_modify_volume_units(M3);
 8013b22:	2001      	movs	r0, #1
 8013b24:	f7fb fc94 	bl	800f450 <fm_factory_modify_volume_units>
 8013b28:	e03f      	b.n	8013baa <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 8013b2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f7fa fff0 	bl	800eb14 <fm_factory_get_acm>
 8013b34:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8013b38:	2b01      	cmp	r3, #1
 8013b3a:	d103      	bne.n	8013b44 <fm_menu_config_units_vol+0xa8>
                {
                    fm_factory_modify_volume_units(KG);
 8013b3c:	2002      	movs	r0, #2
 8013b3e:	f7fb fc87 	bl	800f450 <fm_factory_modify_volume_units>
 8013b42:	e032      	b.n	8013baa <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 8013b44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f7fa ffe3 	bl	800eb14 <fm_factory_get_acm>
 8013b4e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8013b52:	2b02      	cmp	r3, #2
 8013b54:	d103      	bne.n	8013b5e <fm_menu_config_units_vol+0xc2>
                {
                    fm_factory_modify_volume_units(GL);
 8013b56:	2003      	movs	r0, #3
 8013b58:	f7fb fc7a 	bl	800f450 <fm_factory_modify_volume_units>
 8013b5c:	e025      	b.n	8013baa <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 8013b5e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7fa ffd6 	bl	800eb14 <fm_factory_get_acm>
 8013b68:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8013b6c:	2b03      	cmp	r3, #3
 8013b6e:	d103      	bne.n	8013b78 <fm_menu_config_units_vol+0xdc>
                {
                    fm_factory_modify_volume_units(BR);
 8013b70:	2004      	movs	r0, #4
 8013b72:	f7fb fc6d 	bl	800f450 <fm_factory_modify_volume_units>
 8013b76:	e018      	b.n	8013baa <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 8013b78:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f7fa ffc9 	bl	800eb14 <fm_factory_get_acm>
 8013b82:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8013b86:	2b04      	cmp	r3, #4
 8013b88:	d103      	bne.n	8013b92 <fm_menu_config_units_vol+0xf6>
                {
                    fm_factory_modify_volume_units(NOTHING);
 8013b8a:	2006      	movs	r0, #6
 8013b8c:	f7fb fc60 	bl	800f450 <fm_factory_modify_volume_units>
 8013b90:	e00b      	b.n	8013baa <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 8013b92:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013b96:	4618      	mov	r0, r3
 8013b98:	f7fa ffbc 	bl	800eb14 <fm_factory_get_acm>
 8013b9c:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 8013ba0:	2b06      	cmp	r3, #6
 8013ba2:	d102      	bne.n	8013baa <fm_menu_config_units_vol+0x10e>
                {
                    fm_factory_modify_volume_units(LT);
 8013ba4:	2000      	movs	r0, #0
 8013ba6:	f7fb fc53 	bl	800f450 <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 8013baa:	f7fb fe22 	bl	800f7f2 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013bae:	2301      	movs	r3, #1
 8013bb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013bb4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013bb8:	2200      	movs	r2, #0
 8013bba:	4619      	mov	r1, r3
 8013bbc:	484e      	ldr	r0, [pc, #312]	; (8013cf8 <fm_menu_config_units_vol+0x25c>)
 8013bbe:	f7fa fb51 	bl	800e264 <_txe_queue_send>
        break;
 8013bc2:	e066      	b.n	8013c92 <fm_menu_config_units_vol+0x1f6>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013bca:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013bce:	2200      	movs	r2, #0
 8013bd0:	4619      	mov	r1, r3
 8013bd2:	4849      	ldr	r0, [pc, #292]	; (8013cf8 <fm_menu_config_units_vol+0x25c>)
 8013bd4:	f7fa fb46 	bl	800e264 <_txe_queue_send>
        break;
 8013bd8:	e05b      	b.n	8013c92 <fm_menu_config_units_vol+0x1f6>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013bda:	4b46      	ldr	r3, [pc, #280]	; (8013cf4 <fm_menu_config_units_vol+0x258>)
 8013bdc:	781b      	ldrb	r3, [r3, #0]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d03a      	beq.n	8013c58 <fm_menu_config_units_vol+0x1bc>
            {
                if (fm_factory_get_units_vol().res == RES_0)
 8013be2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7fa fffa 	bl	800ebe0 <fm_factory_get_units_vol>
 8013bec:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d105      	bne.n	8013c00 <fm_menu_config_units_vol+0x164>
                {
                    fm_factory_modify_res_acm_ttl(RES_1, RES_1, RES_1);
 8013bf4:	2201      	movs	r2, #1
 8013bf6:	2101      	movs	r1, #1
 8013bf8:	2001      	movs	r0, #1
 8013bfa:	f7fb fbd9 	bl	800f3b0 <fm_factory_modify_res_acm_ttl>
 8013bfe:	e02b      	b.n	8013c58 <fm_menu_config_units_vol+0x1bc>
                }
                else if (fm_factory_get_units_vol().res == RES_1)
 8013c00:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7fa ffeb 	bl	800ebe0 <fm_factory_get_units_vol>
 8013c0a:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8013c0e:	2b01      	cmp	r3, #1
 8013c10:	d105      	bne.n	8013c1e <fm_menu_config_units_vol+0x182>
                {
                    fm_factory_modify_res_acm_ttl(RES_2, RES_2, RES_2);
 8013c12:	2202      	movs	r2, #2
 8013c14:	2102      	movs	r1, #2
 8013c16:	2002      	movs	r0, #2
 8013c18:	f7fb fbca 	bl	800f3b0 <fm_factory_modify_res_acm_ttl>
 8013c1c:	e01c      	b.n	8013c58 <fm_menu_config_units_vol+0x1bc>
                }
                else if (fm_factory_get_units_vol().res == RES_2)
 8013c1e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7fa ffdc 	bl	800ebe0 <fm_factory_get_units_vol>
 8013c28:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8013c2c:	2b02      	cmp	r3, #2
 8013c2e:	d105      	bne.n	8013c3c <fm_menu_config_units_vol+0x1a0>
                {
                    fm_factory_modify_res_acm_ttl(RES_3, RES_3, RES_3);
 8013c30:	2203      	movs	r2, #3
 8013c32:	2103      	movs	r1, #3
 8013c34:	2003      	movs	r0, #3
 8013c36:	f7fb fbbb 	bl	800f3b0 <fm_factory_modify_res_acm_ttl>
 8013c3a:	e00d      	b.n	8013c58 <fm_menu_config_units_vol+0x1bc>
                }
                else if (fm_factory_get_units_vol().res == RES_3)
 8013c3c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7fa ffcd 	bl	800ebe0 <fm_factory_get_units_vol>
 8013c46:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8013c4a:	2b03      	cmp	r3, #3
 8013c4c:	d104      	bne.n	8013c58 <fm_menu_config_units_vol+0x1bc>
                {
                    fm_factory_modify_res_acm_ttl(RES_0, RES_0, RES_0);
 8013c4e:	2200      	movs	r2, #0
 8013c50:	2100      	movs	r1, #0
 8013c52:	2000      	movs	r0, #0
 8013c54:	f7fb fbac 	bl	800f3b0 <fm_factory_modify_res_acm_ttl>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013c58:	2301      	movs	r3, #1
 8013c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c5e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013c62:	2200      	movs	r2, #0
 8013c64:	4619      	mov	r1, r3
 8013c66:	4824      	ldr	r0, [pc, #144]	; (8013cf8 <fm_menu_config_units_vol+0x25c>)
 8013c68:	f7fa fafc 	bl	800e264 <_txe_queue_send>
        break;
 8013c6c:	e011      	b.n	8013c92 <fm_menu_config_units_vol+0x1f6>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013c6e:	4b23      	ldr	r3, [pc, #140]	; (8013cfc <fm_menu_config_units_vol+0x260>)
 8013c70:	2201      	movs	r2, #1
 8013c72:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 8013c74:	4b22      	ldr	r3, [pc, #136]	; (8013d00 <fm_menu_config_units_vol+0x264>)
 8013c76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            event_now = EVENT_LCD_REFRESH;
 8013c7a:	2301      	movs	r3, #1
 8013c7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c80:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013c84:	2200      	movs	r2, #0
 8013c86:	4619      	mov	r1, r3
 8013c88:	481b      	ldr	r0, [pc, #108]	; (8013cf8 <fm_menu_config_units_vol+0x25c>)
 8013c8a:	f7fa faeb 	bl	800e264 <_txe_queue_send>
        break;
 8013c8e:	e000      	b.n	8013c92 <fm_menu_config_units_vol+0x1f6>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013c90:	bf00      	nop
    }

    previous_event = event_id;
 8013c92:	4a1c      	ldr	r2, [pc, #112]	; (8013d04 <fm_menu_config_units_vol+0x268>)
 8013c94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013c98:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8013c9c:	781b      	ldrb	r3, [r3, #0]
 8013c9e:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar unidades de volumen y resolucion\n";
 8013ca0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013ca4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013ca8:	4a17      	ldr	r2, [pc, #92]	; (8013d08 <fm_menu_config_units_vol+0x26c>)
 8013caa:	461c      	mov	r4, r3
 8013cac:	4615      	mov	r5, r2
 8013cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013cb6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013cba:	c407      	stmia	r4!, {r0, r1, r2}
 8013cbc:	7023      	strb	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013cbe:	f107 0308 	add.w	r3, r7, #8
 8013cc2:	212d      	movs	r1, #45	; 0x2d
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7fa ff09 	bl	800eadc <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8013cca:	4b0c      	ldr	r3, [pc, #48]	; (8013cfc <fm_menu_config_units_vol+0x260>)
 8013ccc:	781b      	ldrb	r3, [r3, #0]
 8013cce:	2b01      	cmp	r3, #1
 8013cd0:	d105      	bne.n	8013cde <fm_menu_config_units_vol+0x242>
    {
        new_entry = 1;
 8013cd2:	4b07      	ldr	r3, [pc, #28]	; (8013cf0 <fm_menu_config_units_vol+0x254>)
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013cd8:	4b08      	ldr	r3, [pc, #32]	; (8013cfc <fm_menu_config_units_vol+0x260>)
 8013cda:	2200      	movs	r2, #0
 8013cdc:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bdb0      	pop	{r4, r5, r7, pc}
 8013cec:	08013a9d 	.word	0x08013a9d
 8013cf0:	2000014a 	.word	0x2000014a
 8013cf4:	20001db6 	.word	0x20001db6
 8013cf8:	20001388 	.word	0x20001388
 8013cfc:	20001dd6 	.word	0x20001dd6
 8013d00:	08013891 	.word	0x08013891
 8013d04:	20001db7 	.word	0x20001db7
 8013d08:	08015370 	.word	0x08015370

08013d0c <fm_menu_show_acm_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_rate(fm_event_t event_id)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b086      	sub	sp, #24
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	4603      	mov	r3, r0
 8013d14:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 8013d16:	4b35      	ldr	r3, [pc, #212]	; (8013dec <fm_menu_show_acm_rate+0xe0>)
 8013d18:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8013d1a:	4b35      	ldr	r3, [pc, #212]	; (8013df0 <fm_menu_show_acm_rate+0xe4>)
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	2b01      	cmp	r3, #1
 8013d20:	d104      	bne.n	8013d2c <fm_menu_show_acm_rate+0x20>
    {
        fm_lcd_clear();
 8013d22:	f7fb fd66 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 8013d26:	4b32      	ldr	r3, [pc, #200]	; (8013df0 <fm_menu_show_acm_rate+0xe4>)
 8013d28:	2200      	movs	r2, #0
 8013d2a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_rate();
 8013d2c:	f7fb fc9e 	bl	800f66c <fm_lcd_acm_rate>
    fm_lcd_refresh();
 8013d30:	f7fc f8f1 	bl	800ff16 <fm_lcd_refresh>

    switch (event_id)
 8013d34:	79fb      	ldrb	r3, [r7, #7]
 8013d36:	3b01      	subs	r3, #1
 8013d38:	2b04      	cmp	r3, #4
 8013d3a:	d83a      	bhi.n	8013db2 <fm_menu_show_acm_rate+0xa6>
 8013d3c:	a201      	add	r2, pc, #4	; (adr r2, 8013d44 <fm_menu_show_acm_rate+0x38>)
 8013d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d42:	bf00      	nop
 8013d44:	08013db3 	.word	0x08013db3
 8013d48:	08013d59 	.word	0x08013d59
 8013d4c:	08013d77 	.word	0x08013d77
 8013d50:	08013db3 	.word	0x08013db3
 8013d54:	08013d95 	.word	0x08013d95
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8013d58:	4b26      	ldr	r3, [pc, #152]	; (8013df4 <fm_menu_show_acm_rate+0xe8>)
 8013d5a:	2201      	movs	r2, #1
 8013d5c:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8013d5e:	4b26      	ldr	r3, [pc, #152]	; (8013df8 <fm_menu_show_acm_rate+0xec>)
 8013d60:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013d62:	2301      	movs	r3, #1
 8013d64:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013d66:	f107 0313 	add.w	r3, r7, #19
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	4619      	mov	r1, r3
 8013d6e:	4823      	ldr	r0, [pc, #140]	; (8013dfc <fm_menu_show_acm_rate+0xf0>)
 8013d70:	f7fa fa78 	bl	800e264 <_txe_queue_send>
        break;
 8013d74:	e01e      	b.n	8013db4 <fm_menu_show_acm_rate+0xa8>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 8013d76:	4b1f      	ldr	r3, [pc, #124]	; (8013df4 <fm_menu_show_acm_rate+0xe8>)
 8013d78:	2201      	movs	r2, #1
 8013d7a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8013d7c:	4b20      	ldr	r3, [pc, #128]	; (8013e00 <fm_menu_show_acm_rate+0xf4>)
 8013d7e:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013d80:	2301      	movs	r3, #1
 8013d82:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013d84:	f107 0313 	add.w	r3, r7, #19
 8013d88:	2200      	movs	r2, #0
 8013d8a:	4619      	mov	r1, r3
 8013d8c:	481b      	ldr	r0, [pc, #108]	; (8013dfc <fm_menu_show_acm_rate+0xf0>)
 8013d8e:	f7fa fa69 	bl	800e264 <_txe_queue_send>
        break;
 8013d92:	e00f      	b.n	8013db4 <fm_menu_show_acm_rate+0xa8>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013d94:	4b17      	ldr	r3, [pc, #92]	; (8013df4 <fm_menu_show_acm_rate+0xe8>)
 8013d96:	2201      	movs	r2, #1
 8013d98:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013d9a:	4b1a      	ldr	r3, [pc, #104]	; (8013e04 <fm_menu_show_acm_rate+0xf8>)
 8013d9c:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013d9e:	2301      	movs	r3, #1
 8013da0:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013da2:	f107 0313 	add.w	r3, r7, #19
 8013da6:	2200      	movs	r2, #0
 8013da8:	4619      	mov	r1, r3
 8013daa:	4814      	ldr	r0, [pc, #80]	; (8013dfc <fm_menu_show_acm_rate+0xf0>)
 8013dac:	f7fa fa5a 	bl	800e264 <_txe_queue_send>
        break;
 8013db0:	e000      	b.n	8013db4 <fm_menu_show_acm_rate+0xa8>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013db2:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_rate\n";
 8013db4:	4a14      	ldr	r2, [pc, #80]	; (8013e08 <fm_menu_show_acm_rate+0xfc>)
 8013db6:	f107 0308 	add.w	r3, r7, #8
 8013dba:	ca07      	ldmia	r2, {r0, r1, r2}
 8013dbc:	c303      	stmia	r3!, {r0, r1}
 8013dbe:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013dc0:	f107 0308 	add.w	r3, r7, #8
 8013dc4:	210a      	movs	r1, #10
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f7fa fe88 	bl	800eadc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013dcc:	4b09      	ldr	r3, [pc, #36]	; (8013df4 <fm_menu_show_acm_rate+0xe8>)
 8013dce:	781b      	ldrb	r3, [r3, #0]
 8013dd0:	2b01      	cmp	r3, #1
 8013dd2:	d105      	bne.n	8013de0 <fm_menu_show_acm_rate+0xd4>
    {
        new_entry = 1;
 8013dd4:	4b06      	ldr	r3, [pc, #24]	; (8013df0 <fm_menu_show_acm_rate+0xe4>)
 8013dd6:	2201      	movs	r2, #1
 8013dd8:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013dda:	4b06      	ldr	r3, [pc, #24]	; (8013df4 <fm_menu_show_acm_rate+0xe8>)
 8013ddc:	2200      	movs	r2, #0
 8013dde:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013de0:	697b      	ldr	r3, [r7, #20]
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	3718      	adds	r7, #24
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
 8013dea:	bf00      	nop
 8013dec:	08013d0d 	.word	0x08013d0d
 8013df0:	2000014b 	.word	0x2000014b
 8013df4:	20001dd7 	.word	0x20001dd7
 8013df8:	08014121 	.word	0x08014121
 8013dfc:	20001388 	.word	0x20001388
 8013e00:	08013e0d 	.word	0x08013e0d
 8013e04:	080135c9 	.word	0x080135c9
 8013e08:	080153a0 	.word	0x080153a0

08013e0c <fm_menu_show_acm_temp>:
 * la pantalla.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_temp(fm_event_t event_id)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b086      	sub	sp, #24
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	4603      	mov	r3, r0
 8013e14:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8013e16:	4b35      	ldr	r3, [pc, #212]	; (8013eec <fm_menu_show_acm_temp+0xe0>)
 8013e18:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8013e1a:	4b35      	ldr	r3, [pc, #212]	; (8013ef0 <fm_menu_show_acm_temp+0xe4>)
 8013e1c:	781b      	ldrb	r3, [r3, #0]
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d104      	bne.n	8013e2c <fm_menu_show_acm_temp+0x20>
    {
        fm_lcd_clear();
 8013e22:	f7fb fce6 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 8013e26:	4b32      	ldr	r3, [pc, #200]	; (8013ef0 <fm_menu_show_acm_temp+0xe4>)
 8013e28:	2200      	movs	r2, #0
 8013e2a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_temp();
 8013e2c:	f7fb fc89 	bl	800f742 <fm_lcd_acm_temp>
    fm_lcd_refresh();
 8013e30:	f7fc f871 	bl	800ff16 <fm_lcd_refresh>

    switch (event_id)
 8013e34:	79fb      	ldrb	r3, [r7, #7]
 8013e36:	3b01      	subs	r3, #1
 8013e38:	2b04      	cmp	r3, #4
 8013e3a:	d83a      	bhi.n	8013eb2 <fm_menu_show_acm_temp+0xa6>
 8013e3c:	a201      	add	r2, pc, #4	; (adr r2, 8013e44 <fm_menu_show_acm_temp+0x38>)
 8013e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e42:	bf00      	nop
 8013e44:	08013eb3 	.word	0x08013eb3
 8013e48:	08013e59 	.word	0x08013e59
 8013e4c:	08013e77 	.word	0x08013e77
 8013e50:	08013eb3 	.word	0x08013eb3
 8013e54:	08013e95 	.word	0x08013e95
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8013e58:	4b26      	ldr	r3, [pc, #152]	; (8013ef4 <fm_menu_show_acm_temp+0xe8>)
 8013e5a:	2201      	movs	r2, #1
 8013e5c:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 8013e5e:	4b26      	ldr	r3, [pc, #152]	; (8013ef8 <fm_menu_show_acm_temp+0xec>)
 8013e60:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013e62:	2301      	movs	r3, #1
 8013e64:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013e66:	f107 0313 	add.w	r3, r7, #19
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	4619      	mov	r1, r3
 8013e6e:	4823      	ldr	r0, [pc, #140]	; (8013efc <fm_menu_show_acm_temp+0xf0>)
 8013e70:	f7fa f9f8 	bl	800e264 <_txe_queue_send>
        break;
 8013e74:	e01e      	b.n	8013eb4 <fm_menu_show_acm_temp+0xa8>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 8013e76:	4b1f      	ldr	r3, [pc, #124]	; (8013ef4 <fm_menu_show_acm_temp+0xe8>)
 8013e78:	2201      	movs	r2, #1
 8013e7a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 8013e7c:	4b20      	ldr	r3, [pc, #128]	; (8013f00 <fm_menu_show_acm_temp+0xf4>)
 8013e7e:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013e80:	2301      	movs	r3, #1
 8013e82:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013e84:	f107 0313 	add.w	r3, r7, #19
 8013e88:	2200      	movs	r2, #0
 8013e8a:	4619      	mov	r1, r3
 8013e8c:	481b      	ldr	r0, [pc, #108]	; (8013efc <fm_menu_show_acm_temp+0xf0>)
 8013e8e:	f7fa f9e9 	bl	800e264 <_txe_queue_send>
        break;
 8013e92:	e00f      	b.n	8013eb4 <fm_menu_show_acm_temp+0xa8>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013e94:	4b17      	ldr	r3, [pc, #92]	; (8013ef4 <fm_menu_show_acm_temp+0xe8>)
 8013e96:	2201      	movs	r2, #1
 8013e98:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013e9a:	4b1a      	ldr	r3, [pc, #104]	; (8013f04 <fm_menu_show_acm_temp+0xf8>)
 8013e9c:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013ea2:	f107 0313 	add.w	r3, r7, #19
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	4619      	mov	r1, r3
 8013eaa:	4814      	ldr	r0, [pc, #80]	; (8013efc <fm_menu_show_acm_temp+0xf0>)
 8013eac:	f7fa f9da 	bl	800e264 <_txe_queue_send>
        break;
 8013eb0:	e000      	b.n	8013eb4 <fm_menu_show_acm_temp+0xa8>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013eb2:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_temp\n";
 8013eb4:	4a14      	ldr	r2, [pc, #80]	; (8013f08 <fm_menu_show_acm_temp+0xfc>)
 8013eb6:	f107 0308 	add.w	r3, r7, #8
 8013eba:	ca07      	ldmia	r2, {r0, r1, r2}
 8013ebc:	c303      	stmia	r3!, {r0, r1}
 8013ebe:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013ec0:	f107 0308 	add.w	r3, r7, #8
 8013ec4:	210a      	movs	r1, #10
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7fa fe08 	bl	800eadc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013ecc:	4b09      	ldr	r3, [pc, #36]	; (8013ef4 <fm_menu_show_acm_temp+0xe8>)
 8013ece:	781b      	ldrb	r3, [r3, #0]
 8013ed0:	2b01      	cmp	r3, #1
 8013ed2:	d105      	bne.n	8013ee0 <fm_menu_show_acm_temp+0xd4>
    {
        new_entry = 1;
 8013ed4:	4b06      	ldr	r3, [pc, #24]	; (8013ef0 <fm_menu_show_acm_temp+0xe4>)
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013eda:	4b06      	ldr	r3, [pc, #24]	; (8013ef4 <fm_menu_show_acm_temp+0xe8>)
 8013edc:	2200      	movs	r2, #0
 8013ede:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013ee0:	697b      	ldr	r3, [r7, #20]
}
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3718      	adds	r7, #24
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}
 8013eea:	bf00      	nop
 8013eec:	08013e0d 	.word	0x08013e0d
 8013ef0:	2000014c 	.word	0x2000014c
 8013ef4:	20001dd8 	.word	0x20001dd8
 8013ef8:	08013d0d 	.word	0x08013d0d
 8013efc:	20001388 	.word	0x20001388
 8013f00:	08013f0d 	.word	0x08013f0d
 8013f04:	080135c9 	.word	0x080135c9
 8013f08:	080153ac 	.word	0x080153ac

08013f0c <fm_menu_show_date_hour>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_date_hour(fm_event_t event_id)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b086      	sub	sp, #24
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	4603      	mov	r3, r0
 8013f14:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 8013f16:	4b31      	ldr	r3, [pc, #196]	; (8013fdc <fm_menu_show_date_hour+0xd0>)
 8013f18:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8013f1a:	4b31      	ldr	r3, [pc, #196]	; (8013fe0 <fm_menu_show_date_hour+0xd4>)
 8013f1c:	781b      	ldrb	r3, [r3, #0]
 8013f1e:	2b01      	cmp	r3, #1
 8013f20:	d104      	bne.n	8013f2c <fm_menu_show_date_hour+0x20>
    {
        fm_lcd_clear();
 8013f22:	f7fb fc66 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 8013f26:	4b2e      	ldr	r3, [pc, #184]	; (8013fe0 <fm_menu_show_date_hour+0xd4>)
 8013f28:	2200      	movs	r2, #0
 8013f2a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(USER, event_id, DAY);
 8013f2c:	79fb      	ldrb	r3, [r7, #7]
 8013f2e:	2200      	movs	r2, #0
 8013f30:	4619      	mov	r1, r3
 8013f32:	2000      	movs	r0, #0
 8013f34:	f7fb fc64 	bl	800f800 <fm_lcd_date_hour>

    fm_lcd_refresh();
 8013f38:	f7fb ffed 	bl	800ff16 <fm_lcd_refresh>

    switch (event_id)
 8013f3c:	79fb      	ldrb	r3, [r7, #7]
 8013f3e:	3b01      	subs	r3, #1
 8013f40:	2b04      	cmp	r3, #4
 8013f42:	d82b      	bhi.n	8013f9c <fm_menu_show_date_hour+0x90>
 8013f44:	a201      	add	r2, pc, #4	; (adr r2, 8013f4c <fm_menu_show_date_hour+0x40>)
 8013f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f4a:	bf00      	nop
 8013f4c:	08013f9d 	.word	0x08013f9d
 8013f50:	08013f61 	.word	0x08013f61
 8013f54:	08013f9d 	.word	0x08013f9d
 8013f58:	08013f9d 	.word	0x08013f9d
 8013f5c:	08013f7f 	.word	0x08013f7f
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8013f60:	4b20      	ldr	r3, [pc, #128]	; (8013fe4 <fm_menu_show_date_hour+0xd8>)
 8013f62:	2201      	movs	r2, #1
 8013f64:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8013f66:	4b20      	ldr	r3, [pc, #128]	; (8013fe8 <fm_menu_show_date_hour+0xdc>)
 8013f68:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013f6a:	2301      	movs	r3, #1
 8013f6c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013f6e:	f107 0313 	add.w	r3, r7, #19
 8013f72:	2200      	movs	r2, #0
 8013f74:	4619      	mov	r1, r3
 8013f76:	481d      	ldr	r0, [pc, #116]	; (8013fec <fm_menu_show_date_hour+0xe0>)
 8013f78:	f7fa f974 	bl	800e264 <_txe_queue_send>
        break;
 8013f7c:	e00f      	b.n	8013f9e <fm_menu_show_date_hour+0x92>
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013f7e:	4b19      	ldr	r3, [pc, #100]	; (8013fe4 <fm_menu_show_date_hour+0xd8>)
 8013f80:	2201      	movs	r2, #1
 8013f82:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013f84:	4b1a      	ldr	r3, [pc, #104]	; (8013ff0 <fm_menu_show_date_hour+0xe4>)
 8013f86:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013f88:	2301      	movs	r3, #1
 8013f8a:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013f8c:	f107 0313 	add.w	r3, r7, #19
 8013f90:	2200      	movs	r2, #0
 8013f92:	4619      	mov	r1, r3
 8013f94:	4815      	ldr	r0, [pc, #84]	; (8013fec <fm_menu_show_date_hour+0xe0>)
 8013f96:	f7fa f965 	bl	800e264 <_txe_queue_send>
        break;
 8013f9a:	e000      	b.n	8013f9e <fm_menu_show_date_hour+0x92>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013f9c:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer3[] = "date_hour\n";
 8013f9e:	4a15      	ldr	r2, [pc, #84]	; (8013ff4 <fm_menu_show_date_hour+0xe8>)
 8013fa0:	f107 0308 	add.w	r3, r7, #8
 8013fa4:	ca07      	ldmia	r2, {r0, r1, r2}
 8013fa6:	c303      	stmia	r3!, {r0, r1}
 8013fa8:	801a      	strh	r2, [r3, #0]
 8013faa:	3302      	adds	r3, #2
 8013fac:	0c12      	lsrs	r2, r2, #16
 8013fae:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer3, sizeof(msg_buffer3));
 8013fb0:	f107 0308 	add.w	r3, r7, #8
 8013fb4:	210b      	movs	r1, #11
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7fa fd90 	bl	800eadc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013fbc:	4b09      	ldr	r3, [pc, #36]	; (8013fe4 <fm_menu_show_date_hour+0xd8>)
 8013fbe:	781b      	ldrb	r3, [r3, #0]
 8013fc0:	2b01      	cmp	r3, #1
 8013fc2:	d105      	bne.n	8013fd0 <fm_menu_show_date_hour+0xc4>
    {
        new_entry = 1;
 8013fc4:	4b06      	ldr	r3, [pc, #24]	; (8013fe0 <fm_menu_show_date_hour+0xd4>)
 8013fc6:	2201      	movs	r2, #1
 8013fc8:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013fca:	4b06      	ldr	r3, [pc, #24]	; (8013fe4 <fm_menu_show_date_hour+0xd8>)
 8013fcc:	2200      	movs	r2, #0
 8013fce:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013fd0:	697b      	ldr	r3, [r7, #20]
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	3718      	adds	r7, #24
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}
 8013fda:	bf00      	nop
 8013fdc:	08013f0d 	.word	0x08013f0d
 8013fe0:	2000014d 	.word	0x2000014d
 8013fe4:	20001dd9 	.word	0x20001dd9
 8013fe8:	08013e0d 	.word	0x08013e0d
 8013fec:	20001388 	.word	0x20001388
 8013ff0:	080135c9 	.word	0x080135c9
 8013ff4:	080153b8 	.word	0x080153b8

08013ff8 <fm_menu_show_init>:

ptr_ret_menu_t fm_menu_show_init(fm_event_t event_id)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b086      	sub	sp, #24
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	4603      	mov	r3, r0
 8014000:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const  uint8_t counter_max = 30;
 8014002:	231e      	movs	r3, #30
 8014004:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8014006:	4b3f      	ldr	r3, [pc, #252]	; (8014104 <fm_menu_show_init+0x10c>)
 8014008:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 801400a:	4b3f      	ldr	r3, [pc, #252]	; (8014108 <fm_menu_show_init+0x110>)
 801400c:	781b      	ldrb	r3, [r3, #0]
 801400e:	2b01      	cmp	r3, #1
 8014010:	d106      	bne.n	8014020 <fm_menu_show_init+0x28>
    {
        fm_lcd_init();
 8014012:	f7fb fdf1 	bl	800fbf8 <fm_lcd_init>
        fm_lcd_clear();
 8014016:	f7fb fbec 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 801401a:	4b3b      	ldr	r3, [pc, #236]	; (8014108 <fm_menu_show_init+0x110>)
 801401c:	2200      	movs	r2, #0
 801401e:	701a      	strb	r2, [r3, #0]
    }

    pcf8553_write_all(0xFF); // @suppress("Avoid magic numbers")
 8014020:	20ff      	movs	r0, #255	; 0xff
 8014022:	f7fe f987 	bl	8012334 <pcf8553_write_all>

    switch (event_id)
 8014026:	79fb      	ldrb	r3, [r7, #7]
 8014028:	3b01      	subs	r3, #1
 801402a:	2b04      	cmp	r3, #4
 801402c:	d848      	bhi.n	80140c0 <fm_menu_show_init+0xc8>
 801402e:	a201      	add	r2, pc, #4	; (adr r2, 8014034 <fm_menu_show_init+0x3c>)
 8014030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014034:	0801406d 	.word	0x0801406d
 8014038:	080140c1 	.word	0x080140c1
 801403c:	080140c1 	.word	0x080140c1
 8014040:	08014049 	.word	0x08014049
 8014044:	080140c1 	.word	0x080140c1
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 8014048:	4830      	ldr	r0, [pc, #192]	; (801410c <fm_menu_show_init+0x114>)
 801404a:	f7fa f8a3 	bl	800e194 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 801404e:	4b30      	ldr	r3, [pc, #192]	; (8014110 <fm_menu_show_init+0x118>)
 8014050:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014052:	2301      	movs	r3, #1
 8014054:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014056:	f107 0312 	add.w	r3, r7, #18
 801405a:	2200      	movs	r2, #0
 801405c:	4619      	mov	r1, r3
 801405e:	482b      	ldr	r0, [pc, #172]	; (801410c <fm_menu_show_init+0x114>)
 8014060:	f7fa f900 	bl	800e264 <_txe_queue_send>
            new_exit = 1;
 8014064:	4b2b      	ldr	r3, [pc, #172]	; (8014114 <fm_menu_show_init+0x11c>)
 8014066:	2201      	movs	r2, #1
 8014068:	701a      	strb	r2, [r3, #0]
        break;
 801406a:	e02a      	b.n	80140c2 <fm_menu_show_init+0xca>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if(counter < counter_max)
 801406c:	4b2a      	ldr	r3, [pc, #168]	; (8014118 <fm_menu_show_init+0x120>)
 801406e:	781b      	ldrb	r3, [r3, #0]
 8014070:	7cfa      	ldrb	r2, [r7, #19]
 8014072:	429a      	cmp	r2, r3
 8014074:	d912      	bls.n	801409c <fm_menu_show_init+0xa4>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 8014076:	2064      	movs	r0, #100	; 0x64
 8014078:	f7ed fc36 	bl	80018e8 <HAL_Delay>
                counter++;
 801407c:	4b26      	ldr	r3, [pc, #152]	; (8014118 <fm_menu_show_init+0x120>)
 801407e:	781b      	ldrb	r3, [r3, #0]
 8014080:	3301      	adds	r3, #1
 8014082:	b2da      	uxtb	r2, r3
 8014084:	4b24      	ldr	r3, [pc, #144]	; (8014118 <fm_menu_show_init+0x120>)
 8014086:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 8014088:	2301      	movs	r3, #1
 801408a:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801408c:	f107 0312 	add.w	r3, r7, #18
 8014090:	2200      	movs	r2, #0
 8014092:	4619      	mov	r1, r3
 8014094:	481d      	ldr	r0, [pc, #116]	; (801410c <fm_menu_show_init+0x114>)
 8014096:	f7fa f8e5 	bl	800e264 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 801409a:	e012      	b.n	80140c2 <fm_menu_show_init+0xca>
                tx_queue_flush(&event_queue_ptr);
 801409c:	481b      	ldr	r0, [pc, #108]	; (801410c <fm_menu_show_init+0x114>)
 801409e:	f7fa f879 	bl	800e194 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 80140a2:	4b1b      	ldr	r3, [pc, #108]	; (8014110 <fm_menu_show_init+0x118>)
 80140a4:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 80140a6:	2301      	movs	r3, #1
 80140a8:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80140aa:	f107 0312 	add.w	r3, r7, #18
 80140ae:	2200      	movs	r2, #0
 80140b0:	4619      	mov	r1, r3
 80140b2:	4816      	ldr	r0, [pc, #88]	; (801410c <fm_menu_show_init+0x114>)
 80140b4:	f7fa f8d6 	bl	800e264 <_txe_queue_send>
                new_exit = 1;
 80140b8:	4b16      	ldr	r3, [pc, #88]	; (8014114 <fm_menu_show_init+0x11c>)
 80140ba:	2201      	movs	r2, #1
 80140bc:	701a      	strb	r2, [r3, #0]
        break;
 80140be:	e000      	b.n	80140c2 <fm_menu_show_init+0xca>
        default:
        break;
 80140c0:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "INIT\n";
 80140c2:	4a16      	ldr	r2, [pc, #88]	; (801411c <fm_menu_show_init+0x124>)
 80140c4:	f107 030c 	add.w	r3, r7, #12
 80140c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140cc:	6018      	str	r0, [r3, #0]
 80140ce:	3304      	adds	r3, #4
 80140d0:	8019      	strh	r1, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80140d2:	f107 030c 	add.w	r3, r7, #12
 80140d6:	2106      	movs	r1, #6
 80140d8:	4618      	mov	r0, r3
 80140da:	f7fa fcff 	bl	800eadc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80140de:	4b0d      	ldr	r3, [pc, #52]	; (8014114 <fm_menu_show_init+0x11c>)
 80140e0:	781b      	ldrb	r3, [r3, #0]
 80140e2:	2b01      	cmp	r3, #1
 80140e4:	d108      	bne.n	80140f8 <fm_menu_show_init+0x100>
    {
        counter = 0;
 80140e6:	4b0c      	ldr	r3, [pc, #48]	; (8014118 <fm_menu_show_init+0x120>)
 80140e8:	2200      	movs	r2, #0
 80140ea:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80140ec:	4b06      	ldr	r3, [pc, #24]	; (8014108 <fm_menu_show_init+0x110>)
 80140ee:	2201      	movs	r2, #1
 80140f0:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80140f2:	4b08      	ldr	r3, [pc, #32]	; (8014114 <fm_menu_show_init+0x11c>)
 80140f4:	2200      	movs	r2, #0
 80140f6:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80140f8:	697b      	ldr	r3, [r7, #20]
}
 80140fa:	4618      	mov	r0, r3
 80140fc:	3718      	adds	r7, #24
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}
 8014102:	bf00      	nop
 8014104:	08013ff9 	.word	0x08013ff9
 8014108:	2000014e 	.word	0x2000014e
 801410c:	20001388 	.word	0x20001388
 8014110:	080141fd 	.word	0x080141fd
 8014114:	20001dda 	.word	0x20001dda
 8014118:	20001ddb 	.word	0x20001ddb
 801411c:	080153c4 	.word	0x080153c4

08014120 <fm_menu_show_ttl_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_ttl_rate(fm_event_t event_id)
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b086      	sub	sp, #24
 8014124:	af00      	add	r7, sp, #0
 8014126:	4603      	mov	r3, r0
 8014128:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 801412a:	4b2d      	ldr	r3, [pc, #180]	; (80141e0 <fm_menu_show_ttl_rate+0xc0>)
 801412c:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 801412e:	4b2d      	ldr	r3, [pc, #180]	; (80141e4 <fm_menu_show_ttl_rate+0xc4>)
 8014130:	781b      	ldrb	r3, [r3, #0]
 8014132:	2b01      	cmp	r3, #1
 8014134:	d104      	bne.n	8014140 <fm_menu_show_ttl_rate+0x20>
    {
        fm_lcd_clear();
 8014136:	f7fb fb5c 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 801413a:	4b2a      	ldr	r3, [pc, #168]	; (80141e4 <fm_menu_show_ttl_rate+0xc4>)
 801413c:	2200      	movs	r2, #0
 801413e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_ttl_rate();
 8014140:	f7fb feef 	bl	800ff22 <fm_lcd_ttl_rate>
    fm_lcd_refresh();
 8014144:	f7fb fee7 	bl	800ff16 <fm_lcd_refresh>

    switch (event_id)
 8014148:	79fb      	ldrb	r3, [r7, #7]
 801414a:	3b01      	subs	r3, #1
 801414c:	2b04      	cmp	r3, #4
 801414e:	d82b      	bhi.n	80141a8 <fm_menu_show_ttl_rate+0x88>
 8014150:	a201      	add	r2, pc, #4	; (adr r2, 8014158 <fm_menu_show_ttl_rate+0x38>)
 8014152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014156:	bf00      	nop
 8014158:	080141a9 	.word	0x080141a9
 801415c:	080141a9 	.word	0x080141a9
 8014160:	0801416d 	.word	0x0801416d
 8014164:	080141a9 	.word	0x080141a9
 8014168:	0801418b 	.word	0x0801418b
    {
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
            new_exit = 1;
 801416c:	4b1e      	ldr	r3, [pc, #120]	; (80141e8 <fm_menu_show_ttl_rate+0xc8>)
 801416e:	2201      	movs	r2, #1
 8014170:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 8014172:	4b1e      	ldr	r3, [pc, #120]	; (80141ec <fm_menu_show_ttl_rate+0xcc>)
 8014174:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014176:	2301      	movs	r3, #1
 8014178:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801417a:	f107 0313 	add.w	r3, r7, #19
 801417e:	2200      	movs	r2, #0
 8014180:	4619      	mov	r1, r3
 8014182:	481b      	ldr	r0, [pc, #108]	; (80141f0 <fm_menu_show_ttl_rate+0xd0>)
 8014184:	f7fa f86e 	bl	800e264 <_txe_queue_send>
        break;
 8014188:	e00f      	b.n	80141aa <fm_menu_show_ttl_rate+0x8a>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 801418a:	4b17      	ldr	r3, [pc, #92]	; (80141e8 <fm_menu_show_ttl_rate+0xc8>)
 801418c:	2201      	movs	r2, #1
 801418e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8014190:	4b18      	ldr	r3, [pc, #96]	; (80141f4 <fm_menu_show_ttl_rate+0xd4>)
 8014192:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014194:	2301      	movs	r3, #1
 8014196:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014198:	f107 0313 	add.w	r3, r7, #19
 801419c:	2200      	movs	r2, #0
 801419e:	4619      	mov	r1, r3
 80141a0:	4813      	ldr	r0, [pc, #76]	; (80141f0 <fm_menu_show_ttl_rate+0xd0>)
 80141a2:	f7fa f85f 	bl	800e264 <_txe_queue_send>
        break;
 80141a6:	e000      	b.n	80141aa <fm_menu_show_ttl_rate+0x8a>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80141a8:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "ttl_rate\n";
 80141aa:	4a13      	ldr	r2, [pc, #76]	; (80141f8 <fm_menu_show_ttl_rate+0xd8>)
 80141ac:	f107 0308 	add.w	r3, r7, #8
 80141b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80141b2:	c303      	stmia	r3!, {r0, r1}
 80141b4:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80141b6:	f107 0308 	add.w	r3, r7, #8
 80141ba:	210a      	movs	r1, #10
 80141bc:	4618      	mov	r0, r3
 80141be:	f7fa fc8d 	bl	800eadc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80141c2:	4b09      	ldr	r3, [pc, #36]	; (80141e8 <fm_menu_show_ttl_rate+0xc8>)
 80141c4:	781b      	ldrb	r3, [r3, #0]
 80141c6:	2b01      	cmp	r3, #1
 80141c8:	d105      	bne.n	80141d6 <fm_menu_show_ttl_rate+0xb6>
    {
        new_entry = 1;
 80141ca:	4b06      	ldr	r3, [pc, #24]	; (80141e4 <fm_menu_show_ttl_rate+0xc4>)
 80141cc:	2201      	movs	r2, #1
 80141ce:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80141d0:	4b05      	ldr	r3, [pc, #20]	; (80141e8 <fm_menu_show_ttl_rate+0xc8>)
 80141d2:	2200      	movs	r2, #0
 80141d4:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80141d6:	697b      	ldr	r3, [r7, #20]
}
 80141d8:	4618      	mov	r0, r3
 80141da:	3718      	adds	r7, #24
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	08014121 	.word	0x08014121
 80141e4:	2000014f 	.word	0x2000014f
 80141e8:	20001ddc 	.word	0x20001ddc
 80141ec:	08013d0d 	.word	0x08013d0d
 80141f0:	20001388 	.word	0x20001388
 80141f4:	080135c9 	.word	0x080135c9
 80141f8:	080153cc 	.word	0x080153cc

080141fc <fm_menu_show_version>:
 * pantalla, con puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_version(fm_event_t event_id)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b086      	sub	sp, #24
 8014200:	af00      	add	r7, sp, #0
 8014202:	4603      	mov	r3, r0
 8014204:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const  uint8_t counter_max = 30;
 8014206:	231e      	movs	r3, #30
 8014208:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 801420a:	4b3f      	ldr	r3, [pc, #252]	; (8014308 <fm_menu_show_version+0x10c>)
 801420c:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 801420e:	4b3f      	ldr	r3, [pc, #252]	; (801430c <fm_menu_show_version+0x110>)
 8014210:	781b      	ldrb	r3, [r3, #0]
 8014212:	2b01      	cmp	r3, #1
 8014214:	d104      	bne.n	8014220 <fm_menu_show_version+0x24>
    {
        fm_lcd_clear();
 8014216:	f7fb faec 	bl	800f7f2 <fm_lcd_clear>
        new_entry = 0;
 801421a:	4b3c      	ldr	r3, [pc, #240]	; (801430c <fm_menu_show_version+0x110>)
 801421c:	2200      	movs	r2, #0
 801421e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_version(PNT_4, PNT_5);
 8014220:	2105      	movs	r1, #5
 8014222:	2004      	movs	r0, #4
 8014224:	f7fc f824 	bl	8010270 <fm_lcd_version>
    fm_lcd_refresh();
 8014228:	f7fb fe75 	bl	800ff16 <fm_lcd_refresh>

    switch (event_id)
 801422c:	79fb      	ldrb	r3, [r7, #7]
 801422e:	3b01      	subs	r3, #1
 8014230:	2b04      	cmp	r3, #4
 8014232:	d849      	bhi.n	80142c8 <fm_menu_show_version+0xcc>
 8014234:	a201      	add	r2, pc, #4	; (adr r2, 801423c <fm_menu_show_version+0x40>)
 8014236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801423a:	bf00      	nop
 801423c:	08014275 	.word	0x08014275
 8014240:	080142c9 	.word	0x080142c9
 8014244:	080142c9 	.word	0x080142c9
 8014248:	08014251 	.word	0x08014251
 801424c:	080142c9 	.word	0x080142c9
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 8014250:	482f      	ldr	r0, [pc, #188]	; (8014310 <fm_menu_show_version+0x114>)
 8014252:	f7f9 ff9f 	bl	800e194 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014256:	4b2f      	ldr	r3, [pc, #188]	; (8014314 <fm_menu_show_version+0x118>)
 8014258:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 801425a:	2301      	movs	r3, #1
 801425c:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801425e:	f107 0312 	add.w	r3, r7, #18
 8014262:	2200      	movs	r2, #0
 8014264:	4619      	mov	r1, r3
 8014266:	482a      	ldr	r0, [pc, #168]	; (8014310 <fm_menu_show_version+0x114>)
 8014268:	f7f9 fffc 	bl	800e264 <_txe_queue_send>
            new_exit = 1;
 801426c:	4b2a      	ldr	r3, [pc, #168]	; (8014318 <fm_menu_show_version+0x11c>)
 801426e:	2201      	movs	r2, #1
 8014270:	701a      	strb	r2, [r3, #0]
        break;
 8014272:	e02a      	b.n	80142ca <fm_menu_show_version+0xce>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if(counter < counter_max)
 8014274:	4b29      	ldr	r3, [pc, #164]	; (801431c <fm_menu_show_version+0x120>)
 8014276:	781b      	ldrb	r3, [r3, #0]
 8014278:	7cfa      	ldrb	r2, [r7, #19]
 801427a:	429a      	cmp	r2, r3
 801427c:	d912      	bls.n	80142a4 <fm_menu_show_version+0xa8>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 801427e:	2064      	movs	r0, #100	; 0x64
 8014280:	f7ed fb32 	bl	80018e8 <HAL_Delay>
                counter++;
 8014284:	4b25      	ldr	r3, [pc, #148]	; (801431c <fm_menu_show_version+0x120>)
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	3301      	adds	r3, #1
 801428a:	b2da      	uxtb	r2, r3
 801428c:	4b23      	ldr	r3, [pc, #140]	; (801431c <fm_menu_show_version+0x120>)
 801428e:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 8014290:	2301      	movs	r3, #1
 8014292:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014294:	f107 0312 	add.w	r3, r7, #18
 8014298:	2200      	movs	r2, #0
 801429a:	4619      	mov	r1, r3
 801429c:	481c      	ldr	r0, [pc, #112]	; (8014310 <fm_menu_show_version+0x114>)
 801429e:	f7f9 ffe1 	bl	800e264 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 80142a2:	e012      	b.n	80142ca <fm_menu_show_version+0xce>
                tx_queue_flush(&event_queue_ptr);
 80142a4:	481a      	ldr	r0, [pc, #104]	; (8014310 <fm_menu_show_version+0x114>)
 80142a6:	f7f9 ff75 	bl	800e194 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 80142aa:	4b1a      	ldr	r3, [pc, #104]	; (8014314 <fm_menu_show_version+0x118>)
 80142ac:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 80142ae:	2301      	movs	r3, #1
 80142b0:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80142b2:	f107 0312 	add.w	r3, r7, #18
 80142b6:	2200      	movs	r2, #0
 80142b8:	4619      	mov	r1, r3
 80142ba:	4815      	ldr	r0, [pc, #84]	; (8014310 <fm_menu_show_version+0x114>)
 80142bc:	f7f9 ffd2 	bl	800e264 <_txe_queue_send>
                new_exit = 1;
 80142c0:	4b15      	ldr	r3, [pc, #84]	; (8014318 <fm_menu_show_version+0x11c>)
 80142c2:	2201      	movs	r2, #1
 80142c4:	701a      	strb	r2, [r3, #0]
        break;
 80142c6:	e000      	b.n	80142ca <fm_menu_show_version+0xce>
        default:
        break;
 80142c8:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "version\n";
 80142ca:	4a15      	ldr	r2, [pc, #84]	; (8014320 <fm_menu_show_version+0x124>)
 80142cc:	f107 0308 	add.w	r3, r7, #8
 80142d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80142d2:	c303      	stmia	r3!, {r0, r1}
 80142d4:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80142d6:	f107 0308 	add.w	r3, r7, #8
 80142da:	2109      	movs	r1, #9
 80142dc:	4618      	mov	r0, r3
 80142de:	f7fa fbfd 	bl	800eadc <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80142e2:	4b0d      	ldr	r3, [pc, #52]	; (8014318 <fm_menu_show_version+0x11c>)
 80142e4:	781b      	ldrb	r3, [r3, #0]
 80142e6:	2b01      	cmp	r3, #1
 80142e8:	d108      	bne.n	80142fc <fm_menu_show_version+0x100>
    {
        counter = 0;
 80142ea:	4b0c      	ldr	r3, [pc, #48]	; (801431c <fm_menu_show_version+0x120>)
 80142ec:	2200      	movs	r2, #0
 80142ee:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80142f0:	4b06      	ldr	r3, [pc, #24]	; (801430c <fm_menu_show_version+0x110>)
 80142f2:	2201      	movs	r2, #1
 80142f4:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80142f6:	4b08      	ldr	r3, [pc, #32]	; (8014318 <fm_menu_show_version+0x11c>)
 80142f8:	2200      	movs	r2, #0
 80142fa:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80142fc:	697b      	ldr	r3, [r7, #20]
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3718      	adds	r7, #24
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
 8014306:	bf00      	nop
 8014308:	080141fd 	.word	0x080141fd
 801430c:	20000150 	.word	0x20000150
 8014310:	20001388 	.word	0x20001388
 8014314:	08014121 	.word	0x08014121
 8014318:	20001ddd 	.word	0x20001ddd
 801431c:	20001dde 	.word	0x20001dde
 8014320:	080153d8 	.word	0x080153d8

08014324 <fm_temp_stm32_get>:
// Private function bodies.

// Public function bodies.

void fm_temp_stm32_get()
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b082      	sub	sp, #8
 8014328:	af00      	add	r7, sp, #0
    const uint8_t poll_time = 100;
 801432a:	2364      	movs	r3, #100	; 0x64
 801432c:	71fb      	strb	r3, [r7, #7]

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET ,ADC_SINGLE_ENDED);
 801432e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014332:	2100      	movs	r1, #0
 8014334:	4808      	ldr	r0, [pc, #32]	; (8014358 <fm_temp_stm32_get+0x34>)
 8014336:	f7ef fb75 	bl	8003a24 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(&hadc1);
 801433a:	4807      	ldr	r0, [pc, #28]	; (8014358 <fm_temp_stm32_get+0x34>)
 801433c:	f7ee f934 	bl	80025a8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, poll_time);
 8014340:	79fb      	ldrb	r3, [r7, #7]
 8014342:	4619      	mov	r1, r3
 8014344:	4804      	ldr	r0, [pc, #16]	; (8014358 <fm_temp_stm32_get+0x34>)
 8014346:	f7ee f9d7 	bl	80026f8 <HAL_ADC_PollForConversion>
    HAL_ADC_Stop(&hadc1);
 801434a:	4803      	ldr	r0, [pc, #12]	; (8014358 <fm_temp_stm32_get+0x34>)
 801434c:	f7ee f9a0 	bl	8002690 <HAL_ADC_Stop>
}
 8014350:	bf00      	nop
 8014352:	3708      	adds	r7, #8
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}
 8014358:	200013c4 	.word	0x200013c4

0801435c <fm_temp_stm32_format>:

int fm_temp_stm32_format()
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b082      	sub	sp, #8
 8014360:	af00      	add	r7, sp, #0
    uint16_t raw_value;
    int temp_celcius;

    fm_temp_stm32_get();
 8014362:	f7ff ffdf 	bl	8014324 <fm_temp_stm32_get>
    raw_value = HAL_ADC_GetValue(&hadc1);
 8014366:	4813      	ldr	r0, [pc, #76]	; (80143b4 <fm_temp_stm32_format+0x58>)
 8014368:	f7ee faac 	bl	80028c4 <HAL_ADC_GetValue>
 801436c:	4603      	mov	r3, r0
 801436e:	80fb      	strh	r3, [r7, #6]
    temp_celcius = __HAL_ADC_CALC_TEMPERATURE(&hadc1, 3285, raw_value,
 8014370:	88fb      	ldrh	r3, [r7, #6]
 8014372:	009b      	lsls	r3, r3, #2
 8014374:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8014378:	fb02 f303 	mul.w	r3, r2, r3
 801437c:	461a      	mov	r2, r3
 801437e:	4b0e      	ldr	r3, [pc, #56]	; (80143b8 <fm_temp_stm32_format+0x5c>)
 8014380:	fba3 2302 	umull	r2, r3, r3, r2
 8014384:	099b      	lsrs	r3, r3, #6
 8014386:	461a      	mov	r2, r3
 8014388:	4b0c      	ldr	r3, [pc, #48]	; (80143bc <fm_temp_stm32_format+0x60>)
 801438a:	881b      	ldrh	r3, [r3, #0]
 801438c:	1ad3      	subs	r3, r2, r3
 801438e:	2264      	movs	r2, #100	; 0x64
 8014390:	fb03 f202 	mul.w	r2, r3, r2
 8014394:	4b0a      	ldr	r3, [pc, #40]	; (80143c0 <fm_temp_stm32_format+0x64>)
 8014396:	881b      	ldrh	r3, [r3, #0]
 8014398:	4619      	mov	r1, r3
 801439a:	4b08      	ldr	r3, [pc, #32]	; (80143bc <fm_temp_stm32_format+0x60>)
 801439c:	881b      	ldrh	r3, [r3, #0]
 801439e:	1acb      	subs	r3, r1, r3
 80143a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80143a4:	331e      	adds	r3, #30
 80143a6:	603b      	str	r3, [r7, #0]
    ADC_RESOLUTION_12B);

    return (temp_celcius);
 80143a8:	683b      	ldr	r3, [r7, #0]
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3708      	adds	r7, #8
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}
 80143b2:	bf00      	nop
 80143b4:	200013c4 	.word	0x200013c4
 80143b8:	057619f1 	.word	0x057619f1
 80143bc:	0bfa0710 	.word	0x0bfa0710
 80143c0:	0bfa0742 	.word	0x0bfa0742

080143c4 <fm_version_get>:
 * actualizado este valor.
 * @param None
 * @retval Número de versión en formato VRR.
 */
uint32_t fm_version_get()
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b088      	sub	sp, #32
 80143c8:	af02      	add	r7, sp, #8
    uint32_t version = 0;
 80143ca:	2300      	movs	r3, #0
 80143cc:	617b      	str	r3, [r7, #20]
    char version_arr[PCF8553_DATA_SIZE];

    sprintf(version_arr, "%d%d%d", VERSION, REVISION, RELEASE);
 80143ce:	4638      	mov	r0, r7
 80143d0:	2301      	movs	r3, #1
 80143d2:	9300      	str	r3, [sp, #0]
 80143d4:	2302      	movs	r3, #2
 80143d6:	2201      	movs	r2, #1
 80143d8:	4906      	ldr	r1, [pc, #24]	; (80143f4 <fm_version_get+0x30>)
 80143da:	f000 f9bb 	bl	8014754 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    version = atoi(version_arr);
 80143de:	463b      	mov	r3, r7
 80143e0:	4618      	mov	r0, r3
 80143e2:	f000 f94d 	bl	8014680 <atoi>
 80143e6:	4603      	mov	r3, r0
 80143e8:	617b      	str	r3, [r7, #20]

    return (version);
 80143ea:	697b      	ldr	r3, [r7, #20]
}
 80143ec:	4618      	mov	r0, r3
 80143ee:	3718      	adds	r7, #24
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}
 80143f4:	080153e4 	.word	0x080153e4

080143f8 <fmc_get_acm>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen acumulado como estructura.
 */
fmc_totalizer_t fmc_get_acm()
{
 80143f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143fa:	b093      	sub	sp, #76	; 0x4c
 80143fc:	af06      	add	r7, sp, #24
 80143fe:	62f8      	str	r0, [r7, #44]	; 0x2c
    acm = fm_factory_get_acm();
 8014400:	4c1c      	ldr	r4, [pc, #112]	; (8014474 <fmc_get_acm+0x7c>)
 8014402:	f107 0308 	add.w	r3, r7, #8
 8014406:	4618      	mov	r0, r3
 8014408:	f7fa fb84 	bl	800eb14 <fm_factory_get_acm>
 801440c:	4625      	mov	r5, r4
 801440e:	f107 0408 	add.w	r4, r7, #8
 8014412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014416:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801441a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    acm = fmc_totalizer_init(acm);
 801441e:	4b15      	ldr	r3, [pc, #84]	; (8014474 <fmc_get_acm+0x7c>)
 8014420:	607b      	str	r3, [r7, #4]
 8014422:	f107 0c08 	add.w	ip, r7, #8
 8014426:	4e13      	ldr	r6, [pc, #76]	; (8014474 <fmc_get_acm+0x7c>)
 8014428:	466d      	mov	r5, sp
 801442a:	f106 0408 	add.w	r4, r6, #8
 801442e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014432:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014436:	e885 0003 	stmia.w	r5, {r0, r1}
 801443a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801443e:	4660      	mov	r0, ip
 8014440:	f000 f8c0 	bl	80145c4 <fmc_totalizer_init>
 8014444:	687d      	ldr	r5, [r7, #4]
 8014446:	f107 0408 	add.w	r4, r7, #8
 801444a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801444c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801444e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014452:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (acm);
 8014456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014458:	4a06      	ldr	r2, [pc, #24]	; (8014474 <fmc_get_acm+0x7c>)
 801445a:	461c      	mov	r4, r3
 801445c:	4615      	mov	r5, r2
 801445e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014462:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014466:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801446a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801446c:	3734      	adds	r7, #52	; 0x34
 801446e:	46bd      	mov	sp, r7
 8014470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014472:	bf00      	nop
 8014474:	20001de0 	.word	0x20001de0

08014478 <fmc_get_stm32_temp>:
 * @retval temperatura interna del microcontrolador como una estructura que
 * contiene su valor, resolución y unidad.
 * global.
 */
fmc_temp_t fmc_get_stm32_temp()
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b088      	sub	sp, #32
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
    int_temperature.temperature.num = fm_temp_stm32_format();
 8014480:	f7ff ff6c 	bl	801435c <fm_temp_stm32_format>
 8014484:	4603      	mov	r3, r0
 8014486:	461a      	mov	r2, r3
 8014488:	4b0d      	ldr	r3, [pc, #52]	; (80144c0 <fmc_get_stm32_temp+0x48>)
 801448a:	601a      	str	r2, [r3, #0]
    int_temperature.temperature.res = fm_factory_get_temp().temperature.res;
 801448c:	f107 0308 	add.w	r3, r7, #8
 8014490:	4618      	mov	r0, r3
 8014492:	f7fa fb81 	bl	800eb98 <fm_factory_get_temp>
 8014496:	7b3a      	ldrb	r2, [r7, #12]
 8014498:	4b09      	ldr	r3, [pc, #36]	; (80144c0 <fmc_get_stm32_temp+0x48>)
 801449a:	711a      	strb	r2, [r3, #4]
    int_temperature.unit_volume_temp = fm_factory_get_temp().unit_volume_temp;
 801449c:	f107 0314 	add.w	r3, r7, #20
 80144a0:	4618      	mov	r0, r3
 80144a2:	f7fa fb79 	bl	800eb98 <fm_factory_get_temp>
 80144a6:	7f3a      	ldrb	r2, [r7, #28]
 80144a8:	4b05      	ldr	r3, [pc, #20]	; (80144c0 <fmc_get_stm32_temp+0x48>)
 80144aa:	721a      	strb	r2, [r3, #8]

    return (int_temperature);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	4a04      	ldr	r2, [pc, #16]	; (80144c0 <fmc_get_stm32_temp+0x48>)
 80144b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80144b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	3720      	adds	r7, #32
 80144ba:	46bd      	mov	sp, r7
 80144bc:	bd80      	pop	{r7, pc}
 80144be:	bf00      	nop
 80144c0:	20001e40 	.word	0x20001e40

080144c4 <fmc_get_rate>:
 * devuelve como parámetro de retorno.
 * @param  None
 * @retval caudal instantaneo como estructura.
 */
fmc_totalizer_t fmc_get_rate()
{
 80144c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144c6:	b093      	sub	sp, #76	; 0x4c
 80144c8:	af06      	add	r7, sp, #24
 80144ca:	62f8      	str	r0, [r7, #44]	; 0x2c
    rate = fm_factory_get_rate();
 80144cc:	4c1c      	ldr	r4, [pc, #112]	; (8014540 <fmc_get_rate+0x7c>)
 80144ce:	f107 0308 	add.w	r3, r7, #8
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7fa fb4a 	bl	800eb6c <fm_factory_get_rate>
 80144d8:	4625      	mov	r5, r4
 80144da:	f107 0408 	add.w	r4, r7, #8
 80144de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80144e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80144e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80144e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    rate = fmc_totalizer_init(rate);
 80144ea:	4b15      	ldr	r3, [pc, #84]	; (8014540 <fmc_get_rate+0x7c>)
 80144ec:	607b      	str	r3, [r7, #4]
 80144ee:	f107 0c08 	add.w	ip, r7, #8
 80144f2:	4e13      	ldr	r6, [pc, #76]	; (8014540 <fmc_get_rate+0x7c>)
 80144f4:	466d      	mov	r5, sp
 80144f6:	f106 0408 	add.w	r4, r6, #8
 80144fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80144fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80144fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014502:	e885 0003 	stmia.w	r5, {r0, r1}
 8014506:	e896 000c 	ldmia.w	r6, {r2, r3}
 801450a:	4660      	mov	r0, ip
 801450c:	f000 f85a 	bl	80145c4 <fmc_totalizer_init>
 8014510:	687d      	ldr	r5, [r7, #4]
 8014512:	f107 0408 	add.w	r4, r7, #8
 8014516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801451a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801451e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (rate);
 8014522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014524:	4a06      	ldr	r2, [pc, #24]	; (8014540 <fmc_get_rate+0x7c>)
 8014526:	461c      	mov	r4, r3
 8014528:	4615      	mov	r5, r2
 801452a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801452c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801452e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014532:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014538:	3734      	adds	r7, #52	; 0x34
 801453a:	46bd      	mov	sp, r7
 801453c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801453e:	bf00      	nop
 8014540:	20001e00 	.word	0x20001e00

08014544 <fmc_get_ttl>:
 * parámetro de retorno.
 * @param  None
 * @retval volumen histórico como estructura.
 */
fmc_totalizer_t fmc_get_ttl()
{
 8014544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014546:	b093      	sub	sp, #76	; 0x4c
 8014548:	af06      	add	r7, sp, #24
 801454a:	62f8      	str	r0, [r7, #44]	; 0x2c
    ttl = fm_factory_get_ttl();
 801454c:	4c1c      	ldr	r4, [pc, #112]	; (80145c0 <fmc_get_ttl+0x7c>)
 801454e:	f107 0308 	add.w	r3, r7, #8
 8014552:	4618      	mov	r0, r3
 8014554:	f7fa faf4 	bl	800eb40 <fm_factory_get_ttl>
 8014558:	4625      	mov	r5, r4
 801455a:	f107 0408 	add.w	r4, r7, #8
 801455e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014562:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014566:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    ttl = fmc_totalizer_init(ttl);
 801456a:	4b15      	ldr	r3, [pc, #84]	; (80145c0 <fmc_get_ttl+0x7c>)
 801456c:	607b      	str	r3, [r7, #4]
 801456e:	f107 0c08 	add.w	ip, r7, #8
 8014572:	4e13      	ldr	r6, [pc, #76]	; (80145c0 <fmc_get_ttl+0x7c>)
 8014574:	466d      	mov	r5, sp
 8014576:	f106 0408 	add.w	r4, r6, #8
 801457a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801457c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801457e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014582:	e885 0003 	stmia.w	r5, {r0, r1}
 8014586:	e896 000c 	ldmia.w	r6, {r2, r3}
 801458a:	4660      	mov	r0, ip
 801458c:	f000 f81a 	bl	80145c4 <fmc_totalizer_init>
 8014590:	687d      	ldr	r5, [r7, #4]
 8014592:	f107 0408 	add.w	r4, r7, #8
 8014596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801459a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801459e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (ttl);
 80145a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a4:	4a06      	ldr	r2, [pc, #24]	; (80145c0 <fmc_get_ttl+0x7c>)
 80145a6:	461c      	mov	r4, r3
 80145a8:	4615      	mov	r5, r2
 80145aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80145ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80145ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80145b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80145b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145b8:	3734      	adds	r7, #52	; 0x34
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145be:	bf00      	nop
 80145c0:	20001e20 	.word	0x20001e20

080145c4 <fmc_totalizer_init>:
 * @brief
 * @param
 * @retval None
 */
fmc_totalizer_t fmc_totalizer_init(fmc_totalizer_t totalizer)
{
 80145c4:	b082      	sub	sp, #8
 80145c6:	b5b0      	push	{r4, r5, r7, lr}
 80145c8:	b082      	sub	sp, #8
 80145ca:	af00      	add	r7, sp, #0
 80145cc:	6078      	str	r0, [r7, #4]
 80145ce:	f107 0118 	add.w	r1, r7, #24
 80145d2:	e881 000c 	stmia.w	r1, {r2, r3}
    fmc_totalizer_refresh(&totalizer);
 80145d6:	f107 0018 	add.w	r0, r7, #24
 80145da:	f000 f811 	bl	8014600 <fmc_totalizer_refresh>

    return (totalizer);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	461d      	mov	r5, r3
 80145e2:	f107 0418 	add.w	r4, r7, #24
 80145e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80145ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80145ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	3708      	adds	r7, #8
 80145f6:	46bd      	mov	sp, r7
 80145f8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80145fc:	b002      	add	sp, #8
 80145fe:	4770      	bx	lr

08014600 <fmc_totalizer_refresh>:
 * @param  puntero a estructura que contiene datos como la cantidad de pulsos
 * leidos, valor y resolución del caudal/volumen, entre otros.
 * @retval None
 */
void fmc_totalizer_refresh(fmc_totalizer_t *p_totalizer)
{
 8014600:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014604:	b084      	sub	sp, #16
 8014606:	af00      	add	r7, sp, #0
 8014608:	6078      	str	r0, [r7, #4]
    uint64_t result;

    /*
     * result es la cantidad de pulsos almacenados en la estructura p_totalizer.
     */
    result = (uint64_t) p_totalizer->pulse;
 801460a:	6879      	ldr	r1, [r7, #4]
 801460c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014610:	e9c7 0102 	strd	r0, r1, [r7, #8]

    /*
     * Pulsos escalados en el factor y en la resolucion a mostrar.
     */
    result *= g_scalar[p_totalizer->factor.res + p_totalizer->volume.res];
 8014614:	6879      	ldr	r1, [r7, #4]
 8014616:	7d09      	ldrb	r1, [r1, #20]
 8014618:	4608      	mov	r0, r1
 801461a:	6879      	ldr	r1, [r7, #4]
 801461c:	7b09      	ldrb	r1, [r1, #12]
 801461e:	4401      	add	r1, r0
 8014620:	4816      	ldr	r0, [pc, #88]	; (801467c <fmc_totalizer_refresh+0x7c>)
 8014622:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8014626:	2000      	movs	r0, #0
 8014628:	460c      	mov	r4, r1
 801462a:	4605      	mov	r5, r0
 801462c:	68f9      	ldr	r1, [r7, #12]
 801462e:	fb04 f001 	mul.w	r0, r4, r1
 8014632:	68b9      	ldr	r1, [r7, #8]
 8014634:	fb05 f101 	mul.w	r1, r5, r1
 8014638:	4401      	add	r1, r0
 801463a:	68b8      	ldr	r0, [r7, #8]
 801463c:	fba0 2304 	umull	r2, r3, r0, r4
 8014640:	4419      	add	r1, r3
 8014642:	460b      	mov	r3, r1
 8014644:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8014648:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /*
     * Obtengo el valor numérico del volumen dividiendo los pulsos escalados
     * por el factor.
     */
    result /= p_totalizer->factor.num;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	691b      	ldr	r3, [r3, #16]
 8014650:	2200      	movs	r2, #0
 8014652:	4698      	mov	r8, r3
 8014654:	4691      	mov	r9, r2
 8014656:	4642      	mov	r2, r8
 8014658:	464b      	mov	r3, r9
 801465a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801465e:	f7eb ff39 	bl	80004d4 <__aeabi_uldivmod>
 8014662:	4602      	mov	r2, r0
 8014664:	460b      	mov	r3, r1
 8014666:	e9c7 2302 	strd	r2, r3, [r7, #8]

    p_totalizer->volume.num = (uint32_t) result;
 801466a:	68ba      	ldr	r2, [r7, #8]
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	609a      	str	r2, [r3, #8]

}
 8014670:	bf00      	nop
 8014672:	3710      	adds	r7, #16
 8014674:	46bd      	mov	sp, r7
 8014676:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801467a:	bf00      	nop
 801467c:	080154ec 	.word	0x080154ec

08014680 <atoi>:
 8014680:	220a      	movs	r2, #10
 8014682:	2100      	movs	r1, #0
 8014684:	f000 b908 	b.w	8014898 <strtol>

08014688 <__errno>:
 8014688:	4b01      	ldr	r3, [pc, #4]	; (8014690 <__errno+0x8>)
 801468a:	6818      	ldr	r0, [r3, #0]
 801468c:	4770      	bx	lr
 801468e:	bf00      	nop
 8014690:	20000154 	.word	0x20000154

08014694 <__libc_init_array>:
 8014694:	b570      	push	{r4, r5, r6, lr}
 8014696:	4d0d      	ldr	r5, [pc, #52]	; (80146cc <__libc_init_array+0x38>)
 8014698:	2600      	movs	r6, #0
 801469a:	4c0d      	ldr	r4, [pc, #52]	; (80146d0 <__libc_init_array+0x3c>)
 801469c:	1b64      	subs	r4, r4, r5
 801469e:	10a4      	asrs	r4, r4, #2
 80146a0:	42a6      	cmp	r6, r4
 80146a2:	d109      	bne.n	80146b8 <__libc_init_array+0x24>
 80146a4:	4d0b      	ldr	r5, [pc, #44]	; (80146d4 <__libc_init_array+0x40>)
 80146a6:	2600      	movs	r6, #0
 80146a8:	4c0b      	ldr	r4, [pc, #44]	; (80146d8 <__libc_init_array+0x44>)
 80146aa:	f000 fd5d 	bl	8015168 <_init>
 80146ae:	1b64      	subs	r4, r4, r5
 80146b0:	10a4      	asrs	r4, r4, #2
 80146b2:	42a6      	cmp	r6, r4
 80146b4:	d105      	bne.n	80146c2 <__libc_init_array+0x2e>
 80146b6:	bd70      	pop	{r4, r5, r6, pc}
 80146b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80146bc:	3601      	adds	r6, #1
 80146be:	4798      	blx	r3
 80146c0:	e7ee      	b.n	80146a0 <__libc_init_array+0xc>
 80146c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80146c6:	3601      	adds	r6, #1
 80146c8:	4798      	blx	r3
 80146ca:	e7f2      	b.n	80146b2 <__libc_init_array+0x1e>
 80146cc:	08015644 	.word	0x08015644
 80146d0:	08015644 	.word	0x08015644
 80146d4:	08015644 	.word	0x08015644
 80146d8:	08015648 	.word	0x08015648

080146dc <memset>:
 80146dc:	4402      	add	r2, r0
 80146de:	4603      	mov	r3, r0
 80146e0:	4293      	cmp	r3, r2
 80146e2:	d100      	bne.n	80146e6 <memset+0xa>
 80146e4:	4770      	bx	lr
 80146e6:	f803 1b01 	strb.w	r1, [r3], #1
 80146ea:	e7f9      	b.n	80146e0 <memset+0x4>

080146ec <sniprintf>:
 80146ec:	b40c      	push	{r2, r3}
 80146ee:	4b18      	ldr	r3, [pc, #96]	; (8014750 <sniprintf+0x64>)
 80146f0:	b530      	push	{r4, r5, lr}
 80146f2:	1e0c      	subs	r4, r1, #0
 80146f4:	b09d      	sub	sp, #116	; 0x74
 80146f6:	681d      	ldr	r5, [r3, #0]
 80146f8:	da08      	bge.n	801470c <sniprintf+0x20>
 80146fa:	238b      	movs	r3, #139	; 0x8b
 80146fc:	f04f 30ff 	mov.w	r0, #4294967295
 8014700:	602b      	str	r3, [r5, #0]
 8014702:	b01d      	add	sp, #116	; 0x74
 8014704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014708:	b002      	add	sp, #8
 801470a:	4770      	bx	lr
 801470c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014710:	9002      	str	r0, [sp, #8]
 8014712:	9006      	str	r0, [sp, #24]
 8014714:	a902      	add	r1, sp, #8
 8014716:	f8ad 3014 	strh.w	r3, [sp, #20]
 801471a:	bf14      	ite	ne
 801471c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014720:	4623      	moveq	r3, r4
 8014722:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014724:	4628      	mov	r0, r5
 8014726:	9304      	str	r3, [sp, #16]
 8014728:	9307      	str	r3, [sp, #28]
 801472a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801472e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014732:	ab21      	add	r3, sp, #132	; 0x84
 8014734:	9301      	str	r3, [sp, #4]
 8014736:	f000 f915 	bl	8014964 <_svfiprintf_r>
 801473a:	1c43      	adds	r3, r0, #1
 801473c:	bfbc      	itt	lt
 801473e:	238b      	movlt	r3, #139	; 0x8b
 8014740:	602b      	strlt	r3, [r5, #0]
 8014742:	2c00      	cmp	r4, #0
 8014744:	d0dd      	beq.n	8014702 <sniprintf+0x16>
 8014746:	9b02      	ldr	r3, [sp, #8]
 8014748:	2200      	movs	r2, #0
 801474a:	701a      	strb	r2, [r3, #0]
 801474c:	e7d9      	b.n	8014702 <sniprintf+0x16>
 801474e:	bf00      	nop
 8014750:	20000154 	.word	0x20000154

08014754 <siprintf>:
 8014754:	b40e      	push	{r1, r2, r3}
 8014756:	b500      	push	{lr}
 8014758:	b09c      	sub	sp, #112	; 0x70
 801475a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801475e:	ab1d      	add	r3, sp, #116	; 0x74
 8014760:	9002      	str	r0, [sp, #8]
 8014762:	9006      	str	r0, [sp, #24]
 8014764:	9107      	str	r1, [sp, #28]
 8014766:	9104      	str	r1, [sp, #16]
 8014768:	4808      	ldr	r0, [pc, #32]	; (801478c <siprintf+0x38>)
 801476a:	4909      	ldr	r1, [pc, #36]	; (8014790 <siprintf+0x3c>)
 801476c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014770:	9105      	str	r1, [sp, #20]
 8014772:	a902      	add	r1, sp, #8
 8014774:	6800      	ldr	r0, [r0, #0]
 8014776:	9301      	str	r3, [sp, #4]
 8014778:	f000 f8f4 	bl	8014964 <_svfiprintf_r>
 801477c:	9b02      	ldr	r3, [sp, #8]
 801477e:	2200      	movs	r2, #0
 8014780:	701a      	strb	r2, [r3, #0]
 8014782:	b01c      	add	sp, #112	; 0x70
 8014784:	f85d eb04 	ldr.w	lr, [sp], #4
 8014788:	b003      	add	sp, #12
 801478a:	4770      	bx	lr
 801478c:	20000154 	.word	0x20000154
 8014790:	ffff0208 	.word	0xffff0208

08014794 <_strtol_l.constprop.0>:
 8014794:	2b01      	cmp	r3, #1
 8014796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801479a:	d001      	beq.n	80147a0 <_strtol_l.constprop.0+0xc>
 801479c:	2b24      	cmp	r3, #36	; 0x24
 801479e:	d906      	bls.n	80147ae <_strtol_l.constprop.0+0x1a>
 80147a0:	f7ff ff72 	bl	8014688 <__errno>
 80147a4:	2316      	movs	r3, #22
 80147a6:	6003      	str	r3, [r0, #0]
 80147a8:	2000      	movs	r0, #0
 80147aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147ae:	460d      	mov	r5, r1
 80147b0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8014894 <_strtol_l.constprop.0+0x100>
 80147b4:	462e      	mov	r6, r5
 80147b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 80147be:	f017 0708 	ands.w	r7, r7, #8
 80147c2:	d1f7      	bne.n	80147b4 <_strtol_l.constprop.0+0x20>
 80147c4:	2c2d      	cmp	r4, #45	; 0x2d
 80147c6:	d132      	bne.n	801482e <_strtol_l.constprop.0+0x9a>
 80147c8:	782c      	ldrb	r4, [r5, #0]
 80147ca:	2701      	movs	r7, #1
 80147cc:	1cb5      	adds	r5, r6, #2
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d05b      	beq.n	801488a <_strtol_l.constprop.0+0xf6>
 80147d2:	2b10      	cmp	r3, #16
 80147d4:	d109      	bne.n	80147ea <_strtol_l.constprop.0+0x56>
 80147d6:	2c30      	cmp	r4, #48	; 0x30
 80147d8:	d107      	bne.n	80147ea <_strtol_l.constprop.0+0x56>
 80147da:	782c      	ldrb	r4, [r5, #0]
 80147dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80147e0:	2c58      	cmp	r4, #88	; 0x58
 80147e2:	d14d      	bne.n	8014880 <_strtol_l.constprop.0+0xec>
 80147e4:	786c      	ldrb	r4, [r5, #1]
 80147e6:	2310      	movs	r3, #16
 80147e8:	3502      	adds	r5, #2
 80147ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80147ee:	f04f 0c00 	mov.w	ip, #0
 80147f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80147f6:	4666      	mov	r6, ip
 80147f8:	fbb8 f9f3 	udiv	r9, r8, r3
 80147fc:	fb03 8a19 	mls	sl, r3, r9, r8
 8014800:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014804:	f1be 0f09 	cmp.w	lr, #9
 8014808:	d816      	bhi.n	8014838 <_strtol_l.constprop.0+0xa4>
 801480a:	4674      	mov	r4, lr
 801480c:	42a3      	cmp	r3, r4
 801480e:	dd24      	ble.n	801485a <_strtol_l.constprop.0+0xc6>
 8014810:	f1bc 0f00 	cmp.w	ip, #0
 8014814:	db1e      	blt.n	8014854 <_strtol_l.constprop.0+0xc0>
 8014816:	45b1      	cmp	r9, r6
 8014818:	d31c      	bcc.n	8014854 <_strtol_l.constprop.0+0xc0>
 801481a:	d101      	bne.n	8014820 <_strtol_l.constprop.0+0x8c>
 801481c:	45a2      	cmp	sl, r4
 801481e:	db19      	blt.n	8014854 <_strtol_l.constprop.0+0xc0>
 8014820:	fb06 4603 	mla	r6, r6, r3, r4
 8014824:	f04f 0c01 	mov.w	ip, #1
 8014828:	f815 4b01 	ldrb.w	r4, [r5], #1
 801482c:	e7e8      	b.n	8014800 <_strtol_l.constprop.0+0x6c>
 801482e:	2c2b      	cmp	r4, #43	; 0x2b
 8014830:	bf04      	itt	eq
 8014832:	782c      	ldrbeq	r4, [r5, #0]
 8014834:	1cb5      	addeq	r5, r6, #2
 8014836:	e7ca      	b.n	80147ce <_strtol_l.constprop.0+0x3a>
 8014838:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801483c:	f1be 0f19 	cmp.w	lr, #25
 8014840:	d801      	bhi.n	8014846 <_strtol_l.constprop.0+0xb2>
 8014842:	3c37      	subs	r4, #55	; 0x37
 8014844:	e7e2      	b.n	801480c <_strtol_l.constprop.0+0x78>
 8014846:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801484a:	f1be 0f19 	cmp.w	lr, #25
 801484e:	d804      	bhi.n	801485a <_strtol_l.constprop.0+0xc6>
 8014850:	3c57      	subs	r4, #87	; 0x57
 8014852:	e7db      	b.n	801480c <_strtol_l.constprop.0+0x78>
 8014854:	f04f 3cff 	mov.w	ip, #4294967295
 8014858:	e7e6      	b.n	8014828 <_strtol_l.constprop.0+0x94>
 801485a:	f1bc 0f00 	cmp.w	ip, #0
 801485e:	da05      	bge.n	801486c <_strtol_l.constprop.0+0xd8>
 8014860:	2322      	movs	r3, #34	; 0x22
 8014862:	4646      	mov	r6, r8
 8014864:	6003      	str	r3, [r0, #0]
 8014866:	b942      	cbnz	r2, 801487a <_strtol_l.constprop.0+0xe6>
 8014868:	4630      	mov	r0, r6
 801486a:	e79e      	b.n	80147aa <_strtol_l.constprop.0+0x16>
 801486c:	b107      	cbz	r7, 8014870 <_strtol_l.constprop.0+0xdc>
 801486e:	4276      	negs	r6, r6
 8014870:	2a00      	cmp	r2, #0
 8014872:	d0f9      	beq.n	8014868 <_strtol_l.constprop.0+0xd4>
 8014874:	f1bc 0f00 	cmp.w	ip, #0
 8014878:	d000      	beq.n	801487c <_strtol_l.constprop.0+0xe8>
 801487a:	1e69      	subs	r1, r5, #1
 801487c:	6011      	str	r1, [r2, #0]
 801487e:	e7f3      	b.n	8014868 <_strtol_l.constprop.0+0xd4>
 8014880:	2430      	movs	r4, #48	; 0x30
 8014882:	2b00      	cmp	r3, #0
 8014884:	d1b1      	bne.n	80147ea <_strtol_l.constprop.0+0x56>
 8014886:	2308      	movs	r3, #8
 8014888:	e7af      	b.n	80147ea <_strtol_l.constprop.0+0x56>
 801488a:	2c30      	cmp	r4, #48	; 0x30
 801488c:	d0a5      	beq.n	80147da <_strtol_l.constprop.0+0x46>
 801488e:	230a      	movs	r3, #10
 8014890:	e7ab      	b.n	80147ea <_strtol_l.constprop.0+0x56>
 8014892:	bf00      	nop
 8014894:	08015509 	.word	0x08015509

08014898 <strtol>:
 8014898:	4613      	mov	r3, r2
 801489a:	460a      	mov	r2, r1
 801489c:	4601      	mov	r1, r0
 801489e:	4802      	ldr	r0, [pc, #8]	; (80148a8 <strtol+0x10>)
 80148a0:	6800      	ldr	r0, [r0, #0]
 80148a2:	f7ff bf77 	b.w	8014794 <_strtol_l.constprop.0>
 80148a6:	bf00      	nop
 80148a8:	20000154 	.word	0x20000154

080148ac <__ssputs_r>:
 80148ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148b0:	688e      	ldr	r6, [r1, #8]
 80148b2:	4682      	mov	sl, r0
 80148b4:	460c      	mov	r4, r1
 80148b6:	4690      	mov	r8, r2
 80148b8:	429e      	cmp	r6, r3
 80148ba:	461f      	mov	r7, r3
 80148bc:	d838      	bhi.n	8014930 <__ssputs_r+0x84>
 80148be:	898a      	ldrh	r2, [r1, #12]
 80148c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80148c4:	d032      	beq.n	801492c <__ssputs_r+0x80>
 80148c6:	6825      	ldr	r5, [r4, #0]
 80148c8:	3301      	adds	r3, #1
 80148ca:	6909      	ldr	r1, [r1, #16]
 80148cc:	eba5 0901 	sub.w	r9, r5, r1
 80148d0:	6965      	ldr	r5, [r4, #20]
 80148d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80148d6:	444b      	add	r3, r9
 80148d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80148dc:	106d      	asrs	r5, r5, #1
 80148de:	429d      	cmp	r5, r3
 80148e0:	bf38      	it	cc
 80148e2:	461d      	movcc	r5, r3
 80148e4:	0553      	lsls	r3, r2, #21
 80148e6:	d531      	bpl.n	801494c <__ssputs_r+0xa0>
 80148e8:	4629      	mov	r1, r5
 80148ea:	f000 fb73 	bl	8014fd4 <_malloc_r>
 80148ee:	4606      	mov	r6, r0
 80148f0:	b950      	cbnz	r0, 8014908 <__ssputs_r+0x5c>
 80148f2:	230c      	movs	r3, #12
 80148f4:	f04f 30ff 	mov.w	r0, #4294967295
 80148f8:	f8ca 3000 	str.w	r3, [sl]
 80148fc:	89a3      	ldrh	r3, [r4, #12]
 80148fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014902:	81a3      	strh	r3, [r4, #12]
 8014904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014908:	464a      	mov	r2, r9
 801490a:	6921      	ldr	r1, [r4, #16]
 801490c:	f000 face 	bl	8014eac <memcpy>
 8014910:	89a3      	ldrh	r3, [r4, #12]
 8014912:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801491a:	81a3      	strh	r3, [r4, #12]
 801491c:	6126      	str	r6, [r4, #16]
 801491e:	444e      	add	r6, r9
 8014920:	6165      	str	r5, [r4, #20]
 8014922:	eba5 0509 	sub.w	r5, r5, r9
 8014926:	6026      	str	r6, [r4, #0]
 8014928:	463e      	mov	r6, r7
 801492a:	60a5      	str	r5, [r4, #8]
 801492c:	42be      	cmp	r6, r7
 801492e:	d900      	bls.n	8014932 <__ssputs_r+0x86>
 8014930:	463e      	mov	r6, r7
 8014932:	4632      	mov	r2, r6
 8014934:	4641      	mov	r1, r8
 8014936:	6820      	ldr	r0, [r4, #0]
 8014938:	f000 fac5 	bl	8014ec6 <memmove>
 801493c:	68a3      	ldr	r3, [r4, #8]
 801493e:	2000      	movs	r0, #0
 8014940:	1b9b      	subs	r3, r3, r6
 8014942:	60a3      	str	r3, [r4, #8]
 8014944:	6823      	ldr	r3, [r4, #0]
 8014946:	4433      	add	r3, r6
 8014948:	6023      	str	r3, [r4, #0]
 801494a:	e7db      	b.n	8014904 <__ssputs_r+0x58>
 801494c:	462a      	mov	r2, r5
 801494e:	f000 fbb5 	bl	80150bc <_realloc_r>
 8014952:	4606      	mov	r6, r0
 8014954:	2800      	cmp	r0, #0
 8014956:	d1e1      	bne.n	801491c <__ssputs_r+0x70>
 8014958:	6921      	ldr	r1, [r4, #16]
 801495a:	4650      	mov	r0, sl
 801495c:	f000 face 	bl	8014efc <_free_r>
 8014960:	e7c7      	b.n	80148f2 <__ssputs_r+0x46>
	...

08014964 <_svfiprintf_r>:
 8014964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014968:	4698      	mov	r8, r3
 801496a:	898b      	ldrh	r3, [r1, #12]
 801496c:	b09d      	sub	sp, #116	; 0x74
 801496e:	4607      	mov	r7, r0
 8014970:	061b      	lsls	r3, r3, #24
 8014972:	460d      	mov	r5, r1
 8014974:	4614      	mov	r4, r2
 8014976:	d50e      	bpl.n	8014996 <_svfiprintf_r+0x32>
 8014978:	690b      	ldr	r3, [r1, #16]
 801497a:	b963      	cbnz	r3, 8014996 <_svfiprintf_r+0x32>
 801497c:	2140      	movs	r1, #64	; 0x40
 801497e:	f000 fb29 	bl	8014fd4 <_malloc_r>
 8014982:	6028      	str	r0, [r5, #0]
 8014984:	6128      	str	r0, [r5, #16]
 8014986:	b920      	cbnz	r0, 8014992 <_svfiprintf_r+0x2e>
 8014988:	230c      	movs	r3, #12
 801498a:	603b      	str	r3, [r7, #0]
 801498c:	f04f 30ff 	mov.w	r0, #4294967295
 8014990:	e0d1      	b.n	8014b36 <_svfiprintf_r+0x1d2>
 8014992:	2340      	movs	r3, #64	; 0x40
 8014994:	616b      	str	r3, [r5, #20]
 8014996:	2300      	movs	r3, #0
 8014998:	f8cd 800c 	str.w	r8, [sp, #12]
 801499c:	f04f 0901 	mov.w	r9, #1
 80149a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8014b50 <_svfiprintf_r+0x1ec>
 80149a4:	9309      	str	r3, [sp, #36]	; 0x24
 80149a6:	2320      	movs	r3, #32
 80149a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80149ac:	2330      	movs	r3, #48	; 0x30
 80149ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80149b2:	4623      	mov	r3, r4
 80149b4:	469a      	mov	sl, r3
 80149b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80149ba:	b10a      	cbz	r2, 80149c0 <_svfiprintf_r+0x5c>
 80149bc:	2a25      	cmp	r2, #37	; 0x25
 80149be:	d1f9      	bne.n	80149b4 <_svfiprintf_r+0x50>
 80149c0:	ebba 0b04 	subs.w	fp, sl, r4
 80149c4:	d00b      	beq.n	80149de <_svfiprintf_r+0x7a>
 80149c6:	465b      	mov	r3, fp
 80149c8:	4622      	mov	r2, r4
 80149ca:	4629      	mov	r1, r5
 80149cc:	4638      	mov	r0, r7
 80149ce:	f7ff ff6d 	bl	80148ac <__ssputs_r>
 80149d2:	3001      	adds	r0, #1
 80149d4:	f000 80aa 	beq.w	8014b2c <_svfiprintf_r+0x1c8>
 80149d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149da:	445a      	add	r2, fp
 80149dc:	9209      	str	r2, [sp, #36]	; 0x24
 80149de:	f89a 3000 	ldrb.w	r3, [sl]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	f000 80a2 	beq.w	8014b2c <_svfiprintf_r+0x1c8>
 80149e8:	2300      	movs	r3, #0
 80149ea:	f04f 32ff 	mov.w	r2, #4294967295
 80149ee:	f10a 0a01 	add.w	sl, sl, #1
 80149f2:	9304      	str	r3, [sp, #16]
 80149f4:	9307      	str	r3, [sp, #28]
 80149f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80149fa:	931a      	str	r3, [sp, #104]	; 0x68
 80149fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a00:	4654      	mov	r4, sl
 8014a02:	2205      	movs	r2, #5
 8014a04:	4852      	ldr	r0, [pc, #328]	; (8014b50 <_svfiprintf_r+0x1ec>)
 8014a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a0a:	f000 fa41 	bl	8014e90 <memchr>
 8014a0e:	9a04      	ldr	r2, [sp, #16]
 8014a10:	b9d8      	cbnz	r0, 8014a4a <_svfiprintf_r+0xe6>
 8014a12:	06d0      	lsls	r0, r2, #27
 8014a14:	bf44      	itt	mi
 8014a16:	2320      	movmi	r3, #32
 8014a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a1c:	0711      	lsls	r1, r2, #28
 8014a1e:	bf44      	itt	mi
 8014a20:	232b      	movmi	r3, #43	; 0x2b
 8014a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a26:	f89a 3000 	ldrb.w	r3, [sl]
 8014a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8014a2c:	d015      	beq.n	8014a5a <_svfiprintf_r+0xf6>
 8014a2e:	9a07      	ldr	r2, [sp, #28]
 8014a30:	4654      	mov	r4, sl
 8014a32:	2000      	movs	r0, #0
 8014a34:	f04f 0c0a 	mov.w	ip, #10
 8014a38:	4621      	mov	r1, r4
 8014a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a3e:	3b30      	subs	r3, #48	; 0x30
 8014a40:	2b09      	cmp	r3, #9
 8014a42:	d94e      	bls.n	8014ae2 <_svfiprintf_r+0x17e>
 8014a44:	b1b0      	cbz	r0, 8014a74 <_svfiprintf_r+0x110>
 8014a46:	9207      	str	r2, [sp, #28]
 8014a48:	e014      	b.n	8014a74 <_svfiprintf_r+0x110>
 8014a4a:	eba0 0308 	sub.w	r3, r0, r8
 8014a4e:	46a2      	mov	sl, r4
 8014a50:	fa09 f303 	lsl.w	r3, r9, r3
 8014a54:	4313      	orrs	r3, r2
 8014a56:	9304      	str	r3, [sp, #16]
 8014a58:	e7d2      	b.n	8014a00 <_svfiprintf_r+0x9c>
 8014a5a:	9b03      	ldr	r3, [sp, #12]
 8014a5c:	1d19      	adds	r1, r3, #4
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	9103      	str	r1, [sp, #12]
 8014a64:	bfbb      	ittet	lt
 8014a66:	425b      	neglt	r3, r3
 8014a68:	f042 0202 	orrlt.w	r2, r2, #2
 8014a6c:	9307      	strge	r3, [sp, #28]
 8014a6e:	9307      	strlt	r3, [sp, #28]
 8014a70:	bfb8      	it	lt
 8014a72:	9204      	strlt	r2, [sp, #16]
 8014a74:	7823      	ldrb	r3, [r4, #0]
 8014a76:	2b2e      	cmp	r3, #46	; 0x2e
 8014a78:	d10c      	bne.n	8014a94 <_svfiprintf_r+0x130>
 8014a7a:	7863      	ldrb	r3, [r4, #1]
 8014a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8014a7e:	d135      	bne.n	8014aec <_svfiprintf_r+0x188>
 8014a80:	9b03      	ldr	r3, [sp, #12]
 8014a82:	3402      	adds	r4, #2
 8014a84:	1d1a      	adds	r2, r3, #4
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	9203      	str	r2, [sp, #12]
 8014a8c:	bfb8      	it	lt
 8014a8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014a92:	9305      	str	r3, [sp, #20]
 8014a94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014b60 <_svfiprintf_r+0x1fc>
 8014a98:	2203      	movs	r2, #3
 8014a9a:	7821      	ldrb	r1, [r4, #0]
 8014a9c:	4650      	mov	r0, sl
 8014a9e:	f000 f9f7 	bl	8014e90 <memchr>
 8014aa2:	b140      	cbz	r0, 8014ab6 <_svfiprintf_r+0x152>
 8014aa4:	2340      	movs	r3, #64	; 0x40
 8014aa6:	eba0 000a 	sub.w	r0, r0, sl
 8014aaa:	3401      	adds	r4, #1
 8014aac:	fa03 f000 	lsl.w	r0, r3, r0
 8014ab0:	9b04      	ldr	r3, [sp, #16]
 8014ab2:	4303      	orrs	r3, r0
 8014ab4:	9304      	str	r3, [sp, #16]
 8014ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014aba:	2206      	movs	r2, #6
 8014abc:	4825      	ldr	r0, [pc, #148]	; (8014b54 <_svfiprintf_r+0x1f0>)
 8014abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ac2:	f000 f9e5 	bl	8014e90 <memchr>
 8014ac6:	2800      	cmp	r0, #0
 8014ac8:	d038      	beq.n	8014b3c <_svfiprintf_r+0x1d8>
 8014aca:	4b23      	ldr	r3, [pc, #140]	; (8014b58 <_svfiprintf_r+0x1f4>)
 8014acc:	bb1b      	cbnz	r3, 8014b16 <_svfiprintf_r+0x1b2>
 8014ace:	9b03      	ldr	r3, [sp, #12]
 8014ad0:	3307      	adds	r3, #7
 8014ad2:	f023 0307 	bic.w	r3, r3, #7
 8014ad6:	3308      	adds	r3, #8
 8014ad8:	9303      	str	r3, [sp, #12]
 8014ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014adc:	4433      	add	r3, r6
 8014ade:	9309      	str	r3, [sp, #36]	; 0x24
 8014ae0:	e767      	b.n	80149b2 <_svfiprintf_r+0x4e>
 8014ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ae6:	460c      	mov	r4, r1
 8014ae8:	2001      	movs	r0, #1
 8014aea:	e7a5      	b.n	8014a38 <_svfiprintf_r+0xd4>
 8014aec:	2300      	movs	r3, #0
 8014aee:	3401      	adds	r4, #1
 8014af0:	f04f 0c0a 	mov.w	ip, #10
 8014af4:	4619      	mov	r1, r3
 8014af6:	9305      	str	r3, [sp, #20]
 8014af8:	4620      	mov	r0, r4
 8014afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014afe:	3a30      	subs	r2, #48	; 0x30
 8014b00:	2a09      	cmp	r2, #9
 8014b02:	d903      	bls.n	8014b0c <_svfiprintf_r+0x1a8>
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d0c5      	beq.n	8014a94 <_svfiprintf_r+0x130>
 8014b08:	9105      	str	r1, [sp, #20]
 8014b0a:	e7c3      	b.n	8014a94 <_svfiprintf_r+0x130>
 8014b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b10:	4604      	mov	r4, r0
 8014b12:	2301      	movs	r3, #1
 8014b14:	e7f0      	b.n	8014af8 <_svfiprintf_r+0x194>
 8014b16:	ab03      	add	r3, sp, #12
 8014b18:	462a      	mov	r2, r5
 8014b1a:	a904      	add	r1, sp, #16
 8014b1c:	4638      	mov	r0, r7
 8014b1e:	9300      	str	r3, [sp, #0]
 8014b20:	4b0e      	ldr	r3, [pc, #56]	; (8014b5c <_svfiprintf_r+0x1f8>)
 8014b22:	e000      	b.n	8014b26 <_svfiprintf_r+0x1c2>
 8014b24:	bf00      	nop
 8014b26:	1c42      	adds	r2, r0, #1
 8014b28:	4606      	mov	r6, r0
 8014b2a:	d1d6      	bne.n	8014ada <_svfiprintf_r+0x176>
 8014b2c:	89ab      	ldrh	r3, [r5, #12]
 8014b2e:	065b      	lsls	r3, r3, #25
 8014b30:	f53f af2c 	bmi.w	801498c <_svfiprintf_r+0x28>
 8014b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b36:	b01d      	add	sp, #116	; 0x74
 8014b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b3c:	ab03      	add	r3, sp, #12
 8014b3e:	462a      	mov	r2, r5
 8014b40:	a904      	add	r1, sp, #16
 8014b42:	4638      	mov	r0, r7
 8014b44:	9300      	str	r3, [sp, #0]
 8014b46:	4b05      	ldr	r3, [pc, #20]	; (8014b5c <_svfiprintf_r+0x1f8>)
 8014b48:	f000 f87c 	bl	8014c44 <_printf_i>
 8014b4c:	e7eb      	b.n	8014b26 <_svfiprintf_r+0x1c2>
 8014b4e:	bf00      	nop
 8014b50:	08015609 	.word	0x08015609
 8014b54:	08015613 	.word	0x08015613
 8014b58:	00000000 	.word	0x00000000
 8014b5c:	080148ad 	.word	0x080148ad
 8014b60:	0801560f 	.word	0x0801560f

08014b64 <_printf_common>:
 8014b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b68:	4616      	mov	r6, r2
 8014b6a:	4699      	mov	r9, r3
 8014b6c:	688a      	ldr	r2, [r1, #8]
 8014b6e:	4607      	mov	r7, r0
 8014b70:	690b      	ldr	r3, [r1, #16]
 8014b72:	460c      	mov	r4, r1
 8014b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014b78:	4293      	cmp	r3, r2
 8014b7a:	bfb8      	it	lt
 8014b7c:	4613      	movlt	r3, r2
 8014b7e:	6033      	str	r3, [r6, #0]
 8014b80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014b84:	b10a      	cbz	r2, 8014b8a <_printf_common+0x26>
 8014b86:	3301      	adds	r3, #1
 8014b88:	6033      	str	r3, [r6, #0]
 8014b8a:	6823      	ldr	r3, [r4, #0]
 8014b8c:	0699      	lsls	r1, r3, #26
 8014b8e:	bf42      	ittt	mi
 8014b90:	6833      	ldrmi	r3, [r6, #0]
 8014b92:	3302      	addmi	r3, #2
 8014b94:	6033      	strmi	r3, [r6, #0]
 8014b96:	6825      	ldr	r5, [r4, #0]
 8014b98:	f015 0506 	ands.w	r5, r5, #6
 8014b9c:	d106      	bne.n	8014bac <_printf_common+0x48>
 8014b9e:	f104 0a19 	add.w	sl, r4, #25
 8014ba2:	68e3      	ldr	r3, [r4, #12]
 8014ba4:	6832      	ldr	r2, [r6, #0]
 8014ba6:	1a9b      	subs	r3, r3, r2
 8014ba8:	42ab      	cmp	r3, r5
 8014baa:	dc29      	bgt.n	8014c00 <_printf_common+0x9c>
 8014bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014bb0:	1e13      	subs	r3, r2, #0
 8014bb2:	6822      	ldr	r2, [r4, #0]
 8014bb4:	bf18      	it	ne
 8014bb6:	2301      	movne	r3, #1
 8014bb8:	0692      	lsls	r2, r2, #26
 8014bba:	d42e      	bmi.n	8014c1a <_printf_common+0xb6>
 8014bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014bc0:	4649      	mov	r1, r9
 8014bc2:	4638      	mov	r0, r7
 8014bc4:	47c0      	blx	r8
 8014bc6:	3001      	adds	r0, #1
 8014bc8:	d021      	beq.n	8014c0e <_printf_common+0xaa>
 8014bca:	6823      	ldr	r3, [r4, #0]
 8014bcc:	341a      	adds	r4, #26
 8014bce:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8014bd2:	f003 0306 	and.w	r3, r3, #6
 8014bd6:	6832      	ldr	r2, [r6, #0]
 8014bd8:	2600      	movs	r6, #0
 8014bda:	2b04      	cmp	r3, #4
 8014bdc:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8014be0:	bf08      	it	eq
 8014be2:	1aad      	subeq	r5, r5, r2
 8014be4:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8014be8:	bf14      	ite	ne
 8014bea:	2500      	movne	r5, #0
 8014bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014bf0:	4293      	cmp	r3, r2
 8014bf2:	bfc4      	itt	gt
 8014bf4:	1a9b      	subgt	r3, r3, r2
 8014bf6:	18ed      	addgt	r5, r5, r3
 8014bf8:	42b5      	cmp	r5, r6
 8014bfa:	d11a      	bne.n	8014c32 <_printf_common+0xce>
 8014bfc:	2000      	movs	r0, #0
 8014bfe:	e008      	b.n	8014c12 <_printf_common+0xae>
 8014c00:	2301      	movs	r3, #1
 8014c02:	4652      	mov	r2, sl
 8014c04:	4649      	mov	r1, r9
 8014c06:	4638      	mov	r0, r7
 8014c08:	47c0      	blx	r8
 8014c0a:	3001      	adds	r0, #1
 8014c0c:	d103      	bne.n	8014c16 <_printf_common+0xb2>
 8014c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c16:	3501      	adds	r5, #1
 8014c18:	e7c3      	b.n	8014ba2 <_printf_common+0x3e>
 8014c1a:	18e1      	adds	r1, r4, r3
 8014c1c:	1c5a      	adds	r2, r3, #1
 8014c1e:	2030      	movs	r0, #48	; 0x30
 8014c20:	3302      	adds	r3, #2
 8014c22:	4422      	add	r2, r4
 8014c24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014c30:	e7c4      	b.n	8014bbc <_printf_common+0x58>
 8014c32:	2301      	movs	r3, #1
 8014c34:	4622      	mov	r2, r4
 8014c36:	4649      	mov	r1, r9
 8014c38:	4638      	mov	r0, r7
 8014c3a:	47c0      	blx	r8
 8014c3c:	3001      	adds	r0, #1
 8014c3e:	d0e6      	beq.n	8014c0e <_printf_common+0xaa>
 8014c40:	3601      	adds	r6, #1
 8014c42:	e7d9      	b.n	8014bf8 <_printf_common+0x94>

08014c44 <_printf_i>:
 8014c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c48:	7e0f      	ldrb	r7, [r1, #24]
 8014c4a:	4691      	mov	r9, r2
 8014c4c:	4680      	mov	r8, r0
 8014c4e:	460c      	mov	r4, r1
 8014c50:	2f78      	cmp	r7, #120	; 0x78
 8014c52:	469a      	mov	sl, r3
 8014c54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014c56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014c5a:	d807      	bhi.n	8014c6c <_printf_i+0x28>
 8014c5c:	2f62      	cmp	r7, #98	; 0x62
 8014c5e:	d80a      	bhi.n	8014c76 <_printf_i+0x32>
 8014c60:	2f00      	cmp	r7, #0
 8014c62:	f000 80d8 	beq.w	8014e16 <_printf_i+0x1d2>
 8014c66:	2f58      	cmp	r7, #88	; 0x58
 8014c68:	f000 80a3 	beq.w	8014db2 <_printf_i+0x16e>
 8014c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014c74:	e03a      	b.n	8014cec <_printf_i+0xa8>
 8014c76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014c7a:	2b15      	cmp	r3, #21
 8014c7c:	d8f6      	bhi.n	8014c6c <_printf_i+0x28>
 8014c7e:	a101      	add	r1, pc, #4	; (adr r1, 8014c84 <_printf_i+0x40>)
 8014c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014c84:	08014cdd 	.word	0x08014cdd
 8014c88:	08014cf1 	.word	0x08014cf1
 8014c8c:	08014c6d 	.word	0x08014c6d
 8014c90:	08014c6d 	.word	0x08014c6d
 8014c94:	08014c6d 	.word	0x08014c6d
 8014c98:	08014c6d 	.word	0x08014c6d
 8014c9c:	08014cf1 	.word	0x08014cf1
 8014ca0:	08014c6d 	.word	0x08014c6d
 8014ca4:	08014c6d 	.word	0x08014c6d
 8014ca8:	08014c6d 	.word	0x08014c6d
 8014cac:	08014c6d 	.word	0x08014c6d
 8014cb0:	08014dfd 	.word	0x08014dfd
 8014cb4:	08014d21 	.word	0x08014d21
 8014cb8:	08014ddf 	.word	0x08014ddf
 8014cbc:	08014c6d 	.word	0x08014c6d
 8014cc0:	08014c6d 	.word	0x08014c6d
 8014cc4:	08014e1f 	.word	0x08014e1f
 8014cc8:	08014c6d 	.word	0x08014c6d
 8014ccc:	08014d21 	.word	0x08014d21
 8014cd0:	08014c6d 	.word	0x08014c6d
 8014cd4:	08014c6d 	.word	0x08014c6d
 8014cd8:	08014de7 	.word	0x08014de7
 8014cdc:	682b      	ldr	r3, [r5, #0]
 8014cde:	1d1a      	adds	r2, r3, #4
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	602a      	str	r2, [r5, #0]
 8014ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014cec:	2301      	movs	r3, #1
 8014cee:	e0a3      	b.n	8014e38 <_printf_i+0x1f4>
 8014cf0:	6820      	ldr	r0, [r4, #0]
 8014cf2:	6829      	ldr	r1, [r5, #0]
 8014cf4:	0606      	lsls	r6, r0, #24
 8014cf6:	f101 0304 	add.w	r3, r1, #4
 8014cfa:	d50a      	bpl.n	8014d12 <_printf_i+0xce>
 8014cfc:	680e      	ldr	r6, [r1, #0]
 8014cfe:	602b      	str	r3, [r5, #0]
 8014d00:	2e00      	cmp	r6, #0
 8014d02:	da03      	bge.n	8014d0c <_printf_i+0xc8>
 8014d04:	232d      	movs	r3, #45	; 0x2d
 8014d06:	4276      	negs	r6, r6
 8014d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d0c:	485e      	ldr	r0, [pc, #376]	; (8014e88 <_printf_i+0x244>)
 8014d0e:	230a      	movs	r3, #10
 8014d10:	e019      	b.n	8014d46 <_printf_i+0x102>
 8014d12:	680e      	ldr	r6, [r1, #0]
 8014d14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014d18:	602b      	str	r3, [r5, #0]
 8014d1a:	bf18      	it	ne
 8014d1c:	b236      	sxthne	r6, r6
 8014d1e:	e7ef      	b.n	8014d00 <_printf_i+0xbc>
 8014d20:	682b      	ldr	r3, [r5, #0]
 8014d22:	6820      	ldr	r0, [r4, #0]
 8014d24:	1d19      	adds	r1, r3, #4
 8014d26:	6029      	str	r1, [r5, #0]
 8014d28:	0601      	lsls	r1, r0, #24
 8014d2a:	d501      	bpl.n	8014d30 <_printf_i+0xec>
 8014d2c:	681e      	ldr	r6, [r3, #0]
 8014d2e:	e002      	b.n	8014d36 <_printf_i+0xf2>
 8014d30:	0646      	lsls	r6, r0, #25
 8014d32:	d5fb      	bpl.n	8014d2c <_printf_i+0xe8>
 8014d34:	881e      	ldrh	r6, [r3, #0]
 8014d36:	2f6f      	cmp	r7, #111	; 0x6f
 8014d38:	4853      	ldr	r0, [pc, #332]	; (8014e88 <_printf_i+0x244>)
 8014d3a:	bf0c      	ite	eq
 8014d3c:	2308      	moveq	r3, #8
 8014d3e:	230a      	movne	r3, #10
 8014d40:	2100      	movs	r1, #0
 8014d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014d46:	6865      	ldr	r5, [r4, #4]
 8014d48:	2d00      	cmp	r5, #0
 8014d4a:	60a5      	str	r5, [r4, #8]
 8014d4c:	bfa2      	ittt	ge
 8014d4e:	6821      	ldrge	r1, [r4, #0]
 8014d50:	f021 0104 	bicge.w	r1, r1, #4
 8014d54:	6021      	strge	r1, [r4, #0]
 8014d56:	b90e      	cbnz	r6, 8014d5c <_printf_i+0x118>
 8014d58:	2d00      	cmp	r5, #0
 8014d5a:	d04d      	beq.n	8014df8 <_printf_i+0x1b4>
 8014d5c:	4615      	mov	r5, r2
 8014d5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8014d62:	fb03 6711 	mls	r7, r3, r1, r6
 8014d66:	5dc7      	ldrb	r7, [r0, r7]
 8014d68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014d6c:	4637      	mov	r7, r6
 8014d6e:	460e      	mov	r6, r1
 8014d70:	42bb      	cmp	r3, r7
 8014d72:	d9f4      	bls.n	8014d5e <_printf_i+0x11a>
 8014d74:	2b08      	cmp	r3, #8
 8014d76:	d10b      	bne.n	8014d90 <_printf_i+0x14c>
 8014d78:	6823      	ldr	r3, [r4, #0]
 8014d7a:	07de      	lsls	r6, r3, #31
 8014d7c:	d508      	bpl.n	8014d90 <_printf_i+0x14c>
 8014d7e:	6923      	ldr	r3, [r4, #16]
 8014d80:	6861      	ldr	r1, [r4, #4]
 8014d82:	4299      	cmp	r1, r3
 8014d84:	bfde      	ittt	le
 8014d86:	2330      	movle	r3, #48	; 0x30
 8014d88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014d8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014d90:	1b52      	subs	r2, r2, r5
 8014d92:	6122      	str	r2, [r4, #16]
 8014d94:	464b      	mov	r3, r9
 8014d96:	aa03      	add	r2, sp, #12
 8014d98:	4621      	mov	r1, r4
 8014d9a:	4640      	mov	r0, r8
 8014d9c:	f8cd a000 	str.w	sl, [sp]
 8014da0:	f7ff fee0 	bl	8014b64 <_printf_common>
 8014da4:	3001      	adds	r0, #1
 8014da6:	d14c      	bne.n	8014e42 <_printf_i+0x1fe>
 8014da8:	f04f 30ff 	mov.w	r0, #4294967295
 8014dac:	b004      	add	sp, #16
 8014dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014db2:	4835      	ldr	r0, [pc, #212]	; (8014e88 <_printf_i+0x244>)
 8014db4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014db8:	6829      	ldr	r1, [r5, #0]
 8014dba:	6823      	ldr	r3, [r4, #0]
 8014dbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8014dc0:	6029      	str	r1, [r5, #0]
 8014dc2:	061d      	lsls	r5, r3, #24
 8014dc4:	d514      	bpl.n	8014df0 <_printf_i+0x1ac>
 8014dc6:	07df      	lsls	r7, r3, #31
 8014dc8:	bf44      	itt	mi
 8014dca:	f043 0320 	orrmi.w	r3, r3, #32
 8014dce:	6023      	strmi	r3, [r4, #0]
 8014dd0:	b91e      	cbnz	r6, 8014dda <_printf_i+0x196>
 8014dd2:	6823      	ldr	r3, [r4, #0]
 8014dd4:	f023 0320 	bic.w	r3, r3, #32
 8014dd8:	6023      	str	r3, [r4, #0]
 8014dda:	2310      	movs	r3, #16
 8014ddc:	e7b0      	b.n	8014d40 <_printf_i+0xfc>
 8014dde:	6823      	ldr	r3, [r4, #0]
 8014de0:	f043 0320 	orr.w	r3, r3, #32
 8014de4:	6023      	str	r3, [r4, #0]
 8014de6:	2378      	movs	r3, #120	; 0x78
 8014de8:	4828      	ldr	r0, [pc, #160]	; (8014e8c <_printf_i+0x248>)
 8014dea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014dee:	e7e3      	b.n	8014db8 <_printf_i+0x174>
 8014df0:	0659      	lsls	r1, r3, #25
 8014df2:	bf48      	it	mi
 8014df4:	b2b6      	uxthmi	r6, r6
 8014df6:	e7e6      	b.n	8014dc6 <_printf_i+0x182>
 8014df8:	4615      	mov	r5, r2
 8014dfa:	e7bb      	b.n	8014d74 <_printf_i+0x130>
 8014dfc:	682b      	ldr	r3, [r5, #0]
 8014dfe:	6826      	ldr	r6, [r4, #0]
 8014e00:	1d18      	adds	r0, r3, #4
 8014e02:	6961      	ldr	r1, [r4, #20]
 8014e04:	6028      	str	r0, [r5, #0]
 8014e06:	0635      	lsls	r5, r6, #24
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	d501      	bpl.n	8014e10 <_printf_i+0x1cc>
 8014e0c:	6019      	str	r1, [r3, #0]
 8014e0e:	e002      	b.n	8014e16 <_printf_i+0x1d2>
 8014e10:	0670      	lsls	r0, r6, #25
 8014e12:	d5fb      	bpl.n	8014e0c <_printf_i+0x1c8>
 8014e14:	8019      	strh	r1, [r3, #0]
 8014e16:	2300      	movs	r3, #0
 8014e18:	4615      	mov	r5, r2
 8014e1a:	6123      	str	r3, [r4, #16]
 8014e1c:	e7ba      	b.n	8014d94 <_printf_i+0x150>
 8014e1e:	682b      	ldr	r3, [r5, #0]
 8014e20:	2100      	movs	r1, #0
 8014e22:	1d1a      	adds	r2, r3, #4
 8014e24:	602a      	str	r2, [r5, #0]
 8014e26:	681d      	ldr	r5, [r3, #0]
 8014e28:	6862      	ldr	r2, [r4, #4]
 8014e2a:	4628      	mov	r0, r5
 8014e2c:	f000 f830 	bl	8014e90 <memchr>
 8014e30:	b108      	cbz	r0, 8014e36 <_printf_i+0x1f2>
 8014e32:	1b40      	subs	r0, r0, r5
 8014e34:	6060      	str	r0, [r4, #4]
 8014e36:	6863      	ldr	r3, [r4, #4]
 8014e38:	6123      	str	r3, [r4, #16]
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e40:	e7a8      	b.n	8014d94 <_printf_i+0x150>
 8014e42:	6923      	ldr	r3, [r4, #16]
 8014e44:	462a      	mov	r2, r5
 8014e46:	4649      	mov	r1, r9
 8014e48:	4640      	mov	r0, r8
 8014e4a:	47d0      	blx	sl
 8014e4c:	3001      	adds	r0, #1
 8014e4e:	d0ab      	beq.n	8014da8 <_printf_i+0x164>
 8014e50:	6823      	ldr	r3, [r4, #0]
 8014e52:	079b      	lsls	r3, r3, #30
 8014e54:	d413      	bmi.n	8014e7e <_printf_i+0x23a>
 8014e56:	68e0      	ldr	r0, [r4, #12]
 8014e58:	9b03      	ldr	r3, [sp, #12]
 8014e5a:	4298      	cmp	r0, r3
 8014e5c:	bfb8      	it	lt
 8014e5e:	4618      	movlt	r0, r3
 8014e60:	e7a4      	b.n	8014dac <_printf_i+0x168>
 8014e62:	2301      	movs	r3, #1
 8014e64:	4632      	mov	r2, r6
 8014e66:	4649      	mov	r1, r9
 8014e68:	4640      	mov	r0, r8
 8014e6a:	47d0      	blx	sl
 8014e6c:	3001      	adds	r0, #1
 8014e6e:	d09b      	beq.n	8014da8 <_printf_i+0x164>
 8014e70:	3501      	adds	r5, #1
 8014e72:	68e3      	ldr	r3, [r4, #12]
 8014e74:	9903      	ldr	r1, [sp, #12]
 8014e76:	1a5b      	subs	r3, r3, r1
 8014e78:	42ab      	cmp	r3, r5
 8014e7a:	dcf2      	bgt.n	8014e62 <_printf_i+0x21e>
 8014e7c:	e7eb      	b.n	8014e56 <_printf_i+0x212>
 8014e7e:	2500      	movs	r5, #0
 8014e80:	f104 0619 	add.w	r6, r4, #25
 8014e84:	e7f5      	b.n	8014e72 <_printf_i+0x22e>
 8014e86:	bf00      	nop
 8014e88:	0801561a 	.word	0x0801561a
 8014e8c:	0801562b 	.word	0x0801562b

08014e90 <memchr>:
 8014e90:	b2c9      	uxtb	r1, r1
 8014e92:	4402      	add	r2, r0
 8014e94:	b510      	push	{r4, lr}
 8014e96:	4290      	cmp	r0, r2
 8014e98:	4603      	mov	r3, r0
 8014e9a:	d101      	bne.n	8014ea0 <memchr+0x10>
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	e003      	b.n	8014ea8 <memchr+0x18>
 8014ea0:	781c      	ldrb	r4, [r3, #0]
 8014ea2:	3001      	adds	r0, #1
 8014ea4:	428c      	cmp	r4, r1
 8014ea6:	d1f6      	bne.n	8014e96 <memchr+0x6>
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	bd10      	pop	{r4, pc}

08014eac <memcpy>:
 8014eac:	440a      	add	r2, r1
 8014eae:	1e43      	subs	r3, r0, #1
 8014eb0:	4291      	cmp	r1, r2
 8014eb2:	d100      	bne.n	8014eb6 <memcpy+0xa>
 8014eb4:	4770      	bx	lr
 8014eb6:	b510      	push	{r4, lr}
 8014eb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ebc:	4291      	cmp	r1, r2
 8014ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014ec2:	d1f9      	bne.n	8014eb8 <memcpy+0xc>
 8014ec4:	bd10      	pop	{r4, pc}

08014ec6 <memmove>:
 8014ec6:	4288      	cmp	r0, r1
 8014ec8:	b510      	push	{r4, lr}
 8014eca:	eb01 0402 	add.w	r4, r1, r2
 8014ece:	d902      	bls.n	8014ed6 <memmove+0x10>
 8014ed0:	4284      	cmp	r4, r0
 8014ed2:	4623      	mov	r3, r4
 8014ed4:	d807      	bhi.n	8014ee6 <memmove+0x20>
 8014ed6:	1e43      	subs	r3, r0, #1
 8014ed8:	42a1      	cmp	r1, r4
 8014eda:	d008      	beq.n	8014eee <memmove+0x28>
 8014edc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014ee0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014ee4:	e7f8      	b.n	8014ed8 <memmove+0x12>
 8014ee6:	4402      	add	r2, r0
 8014ee8:	4601      	mov	r1, r0
 8014eea:	428a      	cmp	r2, r1
 8014eec:	d100      	bne.n	8014ef0 <memmove+0x2a>
 8014eee:	bd10      	pop	{r4, pc}
 8014ef0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ef4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ef8:	e7f7      	b.n	8014eea <memmove+0x24>
	...

08014efc <_free_r>:
 8014efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014efe:	2900      	cmp	r1, #0
 8014f00:	d043      	beq.n	8014f8a <_free_r+0x8e>
 8014f02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f06:	1f0c      	subs	r4, r1, #4
 8014f08:	9001      	str	r0, [sp, #4]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	bfb8      	it	lt
 8014f0e:	18e4      	addlt	r4, r4, r3
 8014f10:	f000 f914 	bl	801513c <__malloc_lock>
 8014f14:	4a1e      	ldr	r2, [pc, #120]	; (8014f90 <_free_r+0x94>)
 8014f16:	9801      	ldr	r0, [sp, #4]
 8014f18:	6813      	ldr	r3, [r2, #0]
 8014f1a:	b933      	cbnz	r3, 8014f2a <_free_r+0x2e>
 8014f1c:	6063      	str	r3, [r4, #4]
 8014f1e:	6014      	str	r4, [r2, #0]
 8014f20:	b003      	add	sp, #12
 8014f22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014f26:	f000 b90f 	b.w	8015148 <__malloc_unlock>
 8014f2a:	42a3      	cmp	r3, r4
 8014f2c:	d908      	bls.n	8014f40 <_free_r+0x44>
 8014f2e:	6825      	ldr	r5, [r4, #0]
 8014f30:	1961      	adds	r1, r4, r5
 8014f32:	428b      	cmp	r3, r1
 8014f34:	bf01      	itttt	eq
 8014f36:	6819      	ldreq	r1, [r3, #0]
 8014f38:	685b      	ldreq	r3, [r3, #4]
 8014f3a:	1949      	addeq	r1, r1, r5
 8014f3c:	6021      	streq	r1, [r4, #0]
 8014f3e:	e7ed      	b.n	8014f1c <_free_r+0x20>
 8014f40:	461a      	mov	r2, r3
 8014f42:	685b      	ldr	r3, [r3, #4]
 8014f44:	b10b      	cbz	r3, 8014f4a <_free_r+0x4e>
 8014f46:	42a3      	cmp	r3, r4
 8014f48:	d9fa      	bls.n	8014f40 <_free_r+0x44>
 8014f4a:	6811      	ldr	r1, [r2, #0]
 8014f4c:	1855      	adds	r5, r2, r1
 8014f4e:	42a5      	cmp	r5, r4
 8014f50:	d10b      	bne.n	8014f6a <_free_r+0x6e>
 8014f52:	6824      	ldr	r4, [r4, #0]
 8014f54:	4421      	add	r1, r4
 8014f56:	1854      	adds	r4, r2, r1
 8014f58:	6011      	str	r1, [r2, #0]
 8014f5a:	42a3      	cmp	r3, r4
 8014f5c:	d1e0      	bne.n	8014f20 <_free_r+0x24>
 8014f5e:	681c      	ldr	r4, [r3, #0]
 8014f60:	685b      	ldr	r3, [r3, #4]
 8014f62:	4421      	add	r1, r4
 8014f64:	6053      	str	r3, [r2, #4]
 8014f66:	6011      	str	r1, [r2, #0]
 8014f68:	e7da      	b.n	8014f20 <_free_r+0x24>
 8014f6a:	d902      	bls.n	8014f72 <_free_r+0x76>
 8014f6c:	230c      	movs	r3, #12
 8014f6e:	6003      	str	r3, [r0, #0]
 8014f70:	e7d6      	b.n	8014f20 <_free_r+0x24>
 8014f72:	6825      	ldr	r5, [r4, #0]
 8014f74:	1961      	adds	r1, r4, r5
 8014f76:	428b      	cmp	r3, r1
 8014f78:	bf02      	ittt	eq
 8014f7a:	6819      	ldreq	r1, [r3, #0]
 8014f7c:	685b      	ldreq	r3, [r3, #4]
 8014f7e:	1949      	addeq	r1, r1, r5
 8014f80:	6063      	str	r3, [r4, #4]
 8014f82:	bf08      	it	eq
 8014f84:	6021      	streq	r1, [r4, #0]
 8014f86:	6054      	str	r4, [r2, #4]
 8014f88:	e7ca      	b.n	8014f20 <_free_r+0x24>
 8014f8a:	b003      	add	sp, #12
 8014f8c:	bd30      	pop	{r4, r5, pc}
 8014f8e:	bf00      	nop
 8014f90:	20001e4c 	.word	0x20001e4c

08014f94 <sbrk_aligned>:
 8014f94:	b570      	push	{r4, r5, r6, lr}
 8014f96:	4e0e      	ldr	r6, [pc, #56]	; (8014fd0 <sbrk_aligned+0x3c>)
 8014f98:	460c      	mov	r4, r1
 8014f9a:	4605      	mov	r5, r0
 8014f9c:	6831      	ldr	r1, [r6, #0]
 8014f9e:	b911      	cbnz	r1, 8014fa6 <sbrk_aligned+0x12>
 8014fa0:	f000 f8bc 	bl	801511c <_sbrk_r>
 8014fa4:	6030      	str	r0, [r6, #0]
 8014fa6:	4621      	mov	r1, r4
 8014fa8:	4628      	mov	r0, r5
 8014faa:	f000 f8b7 	bl	801511c <_sbrk_r>
 8014fae:	1c43      	adds	r3, r0, #1
 8014fb0:	d00a      	beq.n	8014fc8 <sbrk_aligned+0x34>
 8014fb2:	1cc4      	adds	r4, r0, #3
 8014fb4:	f024 0403 	bic.w	r4, r4, #3
 8014fb8:	42a0      	cmp	r0, r4
 8014fba:	d007      	beq.n	8014fcc <sbrk_aligned+0x38>
 8014fbc:	1a21      	subs	r1, r4, r0
 8014fbe:	4628      	mov	r0, r5
 8014fc0:	f000 f8ac 	bl	801511c <_sbrk_r>
 8014fc4:	3001      	adds	r0, #1
 8014fc6:	d101      	bne.n	8014fcc <sbrk_aligned+0x38>
 8014fc8:	f04f 34ff 	mov.w	r4, #4294967295
 8014fcc:	4620      	mov	r0, r4
 8014fce:	bd70      	pop	{r4, r5, r6, pc}
 8014fd0:	20001e50 	.word	0x20001e50

08014fd4 <_malloc_r>:
 8014fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fd8:	1ccd      	adds	r5, r1, #3
 8014fda:	4607      	mov	r7, r0
 8014fdc:	f025 0503 	bic.w	r5, r5, #3
 8014fe0:	3508      	adds	r5, #8
 8014fe2:	2d0c      	cmp	r5, #12
 8014fe4:	bf38      	it	cc
 8014fe6:	250c      	movcc	r5, #12
 8014fe8:	2d00      	cmp	r5, #0
 8014fea:	db01      	blt.n	8014ff0 <_malloc_r+0x1c>
 8014fec:	42a9      	cmp	r1, r5
 8014fee:	d905      	bls.n	8014ffc <_malloc_r+0x28>
 8014ff0:	230c      	movs	r3, #12
 8014ff2:	2600      	movs	r6, #0
 8014ff4:	603b      	str	r3, [r7, #0]
 8014ff6:	4630      	mov	r0, r6
 8014ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ffc:	4e2e      	ldr	r6, [pc, #184]	; (80150b8 <_malloc_r+0xe4>)
 8014ffe:	f000 f89d 	bl	801513c <__malloc_lock>
 8015002:	6833      	ldr	r3, [r6, #0]
 8015004:	461c      	mov	r4, r3
 8015006:	bb34      	cbnz	r4, 8015056 <_malloc_r+0x82>
 8015008:	4629      	mov	r1, r5
 801500a:	4638      	mov	r0, r7
 801500c:	f7ff ffc2 	bl	8014f94 <sbrk_aligned>
 8015010:	1c43      	adds	r3, r0, #1
 8015012:	4604      	mov	r4, r0
 8015014:	d14d      	bne.n	80150b2 <_malloc_r+0xde>
 8015016:	6834      	ldr	r4, [r6, #0]
 8015018:	4626      	mov	r6, r4
 801501a:	2e00      	cmp	r6, #0
 801501c:	d140      	bne.n	80150a0 <_malloc_r+0xcc>
 801501e:	6823      	ldr	r3, [r4, #0]
 8015020:	4631      	mov	r1, r6
 8015022:	4638      	mov	r0, r7
 8015024:	eb04 0803 	add.w	r8, r4, r3
 8015028:	f000 f878 	bl	801511c <_sbrk_r>
 801502c:	4580      	cmp	r8, r0
 801502e:	d13a      	bne.n	80150a6 <_malloc_r+0xd2>
 8015030:	6821      	ldr	r1, [r4, #0]
 8015032:	3503      	adds	r5, #3
 8015034:	4638      	mov	r0, r7
 8015036:	1a6d      	subs	r5, r5, r1
 8015038:	f025 0503 	bic.w	r5, r5, #3
 801503c:	3508      	adds	r5, #8
 801503e:	2d0c      	cmp	r5, #12
 8015040:	bf38      	it	cc
 8015042:	250c      	movcc	r5, #12
 8015044:	4629      	mov	r1, r5
 8015046:	f7ff ffa5 	bl	8014f94 <sbrk_aligned>
 801504a:	3001      	adds	r0, #1
 801504c:	d02b      	beq.n	80150a6 <_malloc_r+0xd2>
 801504e:	6823      	ldr	r3, [r4, #0]
 8015050:	442b      	add	r3, r5
 8015052:	6023      	str	r3, [r4, #0]
 8015054:	e00e      	b.n	8015074 <_malloc_r+0xa0>
 8015056:	6822      	ldr	r2, [r4, #0]
 8015058:	1b52      	subs	r2, r2, r5
 801505a:	d41e      	bmi.n	801509a <_malloc_r+0xc6>
 801505c:	2a0b      	cmp	r2, #11
 801505e:	d916      	bls.n	801508e <_malloc_r+0xba>
 8015060:	1961      	adds	r1, r4, r5
 8015062:	42a3      	cmp	r3, r4
 8015064:	6025      	str	r5, [r4, #0]
 8015066:	bf18      	it	ne
 8015068:	6059      	strne	r1, [r3, #4]
 801506a:	6863      	ldr	r3, [r4, #4]
 801506c:	bf08      	it	eq
 801506e:	6031      	streq	r1, [r6, #0]
 8015070:	5162      	str	r2, [r4, r5]
 8015072:	604b      	str	r3, [r1, #4]
 8015074:	f104 060b 	add.w	r6, r4, #11
 8015078:	4638      	mov	r0, r7
 801507a:	f000 f865 	bl	8015148 <__malloc_unlock>
 801507e:	1d23      	adds	r3, r4, #4
 8015080:	f026 0607 	bic.w	r6, r6, #7
 8015084:	1af2      	subs	r2, r6, r3
 8015086:	d0b6      	beq.n	8014ff6 <_malloc_r+0x22>
 8015088:	1b9b      	subs	r3, r3, r6
 801508a:	50a3      	str	r3, [r4, r2]
 801508c:	e7b3      	b.n	8014ff6 <_malloc_r+0x22>
 801508e:	6862      	ldr	r2, [r4, #4]
 8015090:	42a3      	cmp	r3, r4
 8015092:	bf0c      	ite	eq
 8015094:	6032      	streq	r2, [r6, #0]
 8015096:	605a      	strne	r2, [r3, #4]
 8015098:	e7ec      	b.n	8015074 <_malloc_r+0xa0>
 801509a:	4623      	mov	r3, r4
 801509c:	6864      	ldr	r4, [r4, #4]
 801509e:	e7b2      	b.n	8015006 <_malloc_r+0x32>
 80150a0:	4634      	mov	r4, r6
 80150a2:	6876      	ldr	r6, [r6, #4]
 80150a4:	e7b9      	b.n	801501a <_malloc_r+0x46>
 80150a6:	230c      	movs	r3, #12
 80150a8:	4638      	mov	r0, r7
 80150aa:	603b      	str	r3, [r7, #0]
 80150ac:	f000 f84c 	bl	8015148 <__malloc_unlock>
 80150b0:	e7a1      	b.n	8014ff6 <_malloc_r+0x22>
 80150b2:	6025      	str	r5, [r4, #0]
 80150b4:	e7de      	b.n	8015074 <_malloc_r+0xa0>
 80150b6:	bf00      	nop
 80150b8:	20001e4c 	.word	0x20001e4c

080150bc <_realloc_r>:
 80150bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150c0:	4680      	mov	r8, r0
 80150c2:	4614      	mov	r4, r2
 80150c4:	460e      	mov	r6, r1
 80150c6:	b921      	cbnz	r1, 80150d2 <_realloc_r+0x16>
 80150c8:	4611      	mov	r1, r2
 80150ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150ce:	f7ff bf81 	b.w	8014fd4 <_malloc_r>
 80150d2:	b92a      	cbnz	r2, 80150e0 <_realloc_r+0x24>
 80150d4:	4625      	mov	r5, r4
 80150d6:	f7ff ff11 	bl	8014efc <_free_r>
 80150da:	4628      	mov	r0, r5
 80150dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150e0:	f000 f838 	bl	8015154 <_malloc_usable_size_r>
 80150e4:	4284      	cmp	r4, r0
 80150e6:	4607      	mov	r7, r0
 80150e8:	d802      	bhi.n	80150f0 <_realloc_r+0x34>
 80150ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80150ee:	d812      	bhi.n	8015116 <_realloc_r+0x5a>
 80150f0:	4621      	mov	r1, r4
 80150f2:	4640      	mov	r0, r8
 80150f4:	f7ff ff6e 	bl	8014fd4 <_malloc_r>
 80150f8:	4605      	mov	r5, r0
 80150fa:	2800      	cmp	r0, #0
 80150fc:	d0ed      	beq.n	80150da <_realloc_r+0x1e>
 80150fe:	42bc      	cmp	r4, r7
 8015100:	4622      	mov	r2, r4
 8015102:	4631      	mov	r1, r6
 8015104:	bf28      	it	cs
 8015106:	463a      	movcs	r2, r7
 8015108:	f7ff fed0 	bl	8014eac <memcpy>
 801510c:	4631      	mov	r1, r6
 801510e:	4640      	mov	r0, r8
 8015110:	f7ff fef4 	bl	8014efc <_free_r>
 8015114:	e7e1      	b.n	80150da <_realloc_r+0x1e>
 8015116:	4635      	mov	r5, r6
 8015118:	e7df      	b.n	80150da <_realloc_r+0x1e>
	...

0801511c <_sbrk_r>:
 801511c:	b538      	push	{r3, r4, r5, lr}
 801511e:	2300      	movs	r3, #0
 8015120:	4d05      	ldr	r5, [pc, #20]	; (8015138 <_sbrk_r+0x1c>)
 8015122:	4604      	mov	r4, r0
 8015124:	4608      	mov	r0, r1
 8015126:	602b      	str	r3, [r5, #0]
 8015128:	f7ec faf8 	bl	800171c <_sbrk>
 801512c:	1c43      	adds	r3, r0, #1
 801512e:	d102      	bne.n	8015136 <_sbrk_r+0x1a>
 8015130:	682b      	ldr	r3, [r5, #0]
 8015132:	b103      	cbz	r3, 8015136 <_sbrk_r+0x1a>
 8015134:	6023      	str	r3, [r4, #0]
 8015136:	bd38      	pop	{r3, r4, r5, pc}
 8015138:	20001e54 	.word	0x20001e54

0801513c <__malloc_lock>:
 801513c:	4801      	ldr	r0, [pc, #4]	; (8015144 <__malloc_lock+0x8>)
 801513e:	f000 b811 	b.w	8015164 <__retarget_lock_acquire_recursive>
 8015142:	bf00      	nop
 8015144:	20001e58 	.word	0x20001e58

08015148 <__malloc_unlock>:
 8015148:	4801      	ldr	r0, [pc, #4]	; (8015150 <__malloc_unlock+0x8>)
 801514a:	f000 b80c 	b.w	8015166 <__retarget_lock_release_recursive>
 801514e:	bf00      	nop
 8015150:	20001e58 	.word	0x20001e58

08015154 <_malloc_usable_size_r>:
 8015154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015158:	1f18      	subs	r0, r3, #4
 801515a:	2b00      	cmp	r3, #0
 801515c:	bfbc      	itt	lt
 801515e:	580b      	ldrlt	r3, [r1, r0]
 8015160:	18c0      	addlt	r0, r0, r3
 8015162:	4770      	bx	lr

08015164 <__retarget_lock_acquire_recursive>:
 8015164:	4770      	bx	lr

08015166 <__retarget_lock_release_recursive>:
 8015166:	4770      	bx	lr

08015168 <_init>:
 8015168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801516a:	bf00      	nop
 801516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801516e:	bc08      	pop	{r3}
 8015170:	469e      	mov	lr, r3
 8015172:	4770      	bx	lr

08015174 <_fini>:
 8015174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015176:	bf00      	nop
 8015178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801517a:	bc08      	pop	{r3}
 801517c:	469e      	mov	lr, r3
 801517e:	4770      	bx	lr
