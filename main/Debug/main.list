
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000154b8  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  080156f0  080156f0  000256f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015bac  08015bac  00025bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015bb4  08015bb4  00025bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015bb8  08015bb8  00025bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001b8  20000000  08015bbc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ca9  200001b8  08015d74  000301b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000607  20001e61  08015d74  00031e61  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041dc1  00000000  00000000  000301ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009177  00000000  00000000  00071faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002988  00000000  00000000  0007b128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002490  00000000  00000000  0007dab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040b26  00000000  00000000  0007ff40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003fb4e  00000000  00000000  000c0a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001784ea  00000000  00000000  001005b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00278a9e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a860  00000000  00000000  00278af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001b8 	.word	0x200001b8
 8000254:	00000000 	.word	0x00000000
 8000258:	080156d8 	.word	0x080156d8

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001bc 	.word	0x200001bc
 8000274:	080156d8 	.word	0x080156d8

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f89f 	bl	800040c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	20001680 	.word	0x20001680
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a31      	ldr	r2, [pc, #196]	; (80003bc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c22      	ldr	r4, [pc, #136]	; (80003c8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c1b      	ldr	r4, [pc, #108]	; (80003c8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b949      	cbnz	r1, 80003a6 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000392:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000394:	f00e f9ee 	bl	800e774 <tx_low_power_enter>
    POP     {r0-r3}
 8000398:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800039a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 800039c:	f00e fa1a 	bl	800e7d4 <tx_low_power_exit>
    POP     {r0-r3}
 80003a0:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a4:	e7f1      	b.n	800038a <__tx_ts_wait>

080003a6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003aa:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003ae:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b4:	e7d0      	b.n	8000358 <__tx_ts_restore>
 80003b6:	bf00      	nop

080003b8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b8:	4770      	bx	lr
 80003ba:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003bc:	2000171c 	.word	0x2000171c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c0:	20001684 	.word	0x20001684
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c4:	20001688 	.word	0x20001688
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c8:	20001c88 	.word	0x20001c88

080003cc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003cc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ce:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003da:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003dc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ea:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003ec:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ee:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fe:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000400:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000406:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000408:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr

0800040c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	4922      	ldr	r1, [pc, #136]	; (8000498 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000410:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000414:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000418:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041a:	b13a      	cbz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800041c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000420:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000422:	b91a      	cbnz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000426:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042a:	6018      	str	r0, [r3, #0]

0800042c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800042c:	491d      	ldr	r1, [pc, #116]	; (80004a4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000430:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000432:	b122      	cbz	r2, 800043e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000436:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800043c:	e008      	b.n	8000450 <__tx_timer_done>

0800043e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000444:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000446:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000448:	d101      	bne.n	800044e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800044c:	6818      	ldr	r0, [r3, #0]

0800044e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044e:	6008      	str	r0, [r1, #0]

08000450 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000452:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000454:	b912      	cbnz	r2, 800045c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000456:	4914      	ldr	r1, [pc, #80]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000458:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045a:	b1c8      	cbz	r0, 8000490 <__tx_timer_nothing_expired>

0800045c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800045c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045e:	4912      	ldr	r1, [pc, #72]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000462:	b108      	cbz	r0, 8000468 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000464:	f00d fa48 	bl	800d8f8 <_tx_timer_expiration_process>

08000468 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800046c:	b172      	cbz	r2, 800048c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046e:	f00d f927 	bl	800d6c0 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000472:	4810      	ldr	r0, [pc, #64]	; (80004b4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000474:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000476:	b949      	cbnz	r1, 800048c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000486:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000488:	d000      	beq.n	800048c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048a:	6002      	str	r2, [r0, #0]

0800048c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800048c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000490 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000490:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000494:	4770      	bx	lr
 8000496:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000498:	20001728 	.word	0x20001728
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049c:	20001c88 	.word	0x20001c88
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a0:	2000172c 	.word	0x2000172c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a4:	200017b8 	.word	0x200017b8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a8:	200017bc 	.word	0x200017bc
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004ac:	200017b4 	.word	0x200017b4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b0:	200017b0 	.word	0x200017b0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b4:	2000171c 	.word	0x2000171c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b8:	20001684 	.word	0x20001684
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004bc:	20001688 	.word	0x20001688
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c0:	e000ed04 	.word	0xe000ed04

080004c4 <strlen>:
 80004c4:	4603      	mov	r3, r0
 80004c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d1fb      	bne.n	80004c6 <strlen+0x2>
 80004ce:	1a18      	subs	r0, r3, r0
 80004d0:	3801      	subs	r0, #1
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_uldivmod>:
 80004d4:	b953      	cbnz	r3, 80004ec <__aeabi_uldivmod+0x18>
 80004d6:	b94a      	cbnz	r2, 80004ec <__aeabi_uldivmod+0x18>
 80004d8:	2900      	cmp	r1, #0
 80004da:	bf08      	it	eq
 80004dc:	2800      	cmpeq	r0, #0
 80004de:	bf1c      	itt	ne
 80004e0:	f04f 31ff 	movne.w	r1, #4294967295
 80004e4:	f04f 30ff 	movne.w	r0, #4294967295
 80004e8:	f000 b982 	b.w	80007f0 <__aeabi_idiv0>
 80004ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80004f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004f4:	f000 f806 	bl	8000504 <__udivmoddi4>
 80004f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000500:	b004      	add	sp, #16
 8000502:	4770      	bx	lr

08000504 <__udivmoddi4>:
 8000504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000508:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800050a:	4604      	mov	r4, r0
 800050c:	460f      	mov	r7, r1
 800050e:	2b00      	cmp	r3, #0
 8000510:	d148      	bne.n	80005a4 <__udivmoddi4+0xa0>
 8000512:	428a      	cmp	r2, r1
 8000514:	4694      	mov	ip, r2
 8000516:	d961      	bls.n	80005dc <__udivmoddi4+0xd8>
 8000518:	fab2 f382 	clz	r3, r2
 800051c:	b143      	cbz	r3, 8000530 <__udivmoddi4+0x2c>
 800051e:	f1c3 0120 	rsb	r1, r3, #32
 8000522:	409f      	lsls	r7, r3
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	409c      	lsls	r4, r3
 800052a:	fa20 f101 	lsr.w	r1, r0, r1
 800052e:	430f      	orrs	r7, r1
 8000530:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	0c22      	lsrs	r2, r4, #16
 800053a:	fbb7 f6f1 	udiv	r6, r7, r1
 800053e:	fb01 7716 	mls	r7, r1, r6, r7
 8000542:	fb06 f00e 	mul.w	r0, r6, lr
 8000546:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800054a:	4290      	cmp	r0, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x5c>
 800054e:	eb1c 0202 	adds.w	r2, ip, r2
 8000552:	f106 37ff 	add.w	r7, r6, #4294967295
 8000556:	d202      	bcs.n	800055e <__udivmoddi4+0x5a>
 8000558:	4290      	cmp	r0, r2
 800055a:	f200 8137 	bhi.w	80007cc <__udivmoddi4+0x2c8>
 800055e:	463e      	mov	r6, r7
 8000560:	1a12      	subs	r2, r2, r0
 8000562:	b2a4      	uxth	r4, r4
 8000564:	fbb2 f0f1 	udiv	r0, r2, r1
 8000568:	fb01 2210 	mls	r2, r1, r0, r2
 800056c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000570:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x86>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000580:	d202      	bcs.n	8000588 <__udivmoddi4+0x84>
 8000582:	45a6      	cmp	lr, r4
 8000584:	f200 811c 	bhi.w	80007c0 <__udivmoddi4+0x2bc>
 8000588:	4610      	mov	r0, r2
 800058a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800058e:	eba4 040e 	sub.w	r4, r4, lr
 8000592:	2600      	movs	r6, #0
 8000594:	b11d      	cbz	r5, 800059e <__udivmoddi4+0x9a>
 8000596:	40dc      	lsrs	r4, r3
 8000598:	2300      	movs	r3, #0
 800059a:	e9c5 4300 	strd	r4, r3, [r5]
 800059e:	4631      	mov	r1, r6
 80005a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d909      	bls.n	80005bc <__udivmoddi4+0xb8>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	f000 80fd 	beq.w	80007a8 <__udivmoddi4+0x2a4>
 80005ae:	2600      	movs	r6, #0
 80005b0:	e9c5 0100 	strd	r0, r1, [r5]
 80005b4:	4630      	mov	r0, r6
 80005b6:	4631      	mov	r1, r6
 80005b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005bc:	fab3 f683 	clz	r6, r3
 80005c0:	2e00      	cmp	r6, #0
 80005c2:	d14b      	bne.n	800065c <__udivmoddi4+0x158>
 80005c4:	428b      	cmp	r3, r1
 80005c6:	f0c0 80f2 	bcc.w	80007ae <__udivmoddi4+0x2aa>
 80005ca:	4282      	cmp	r2, r0
 80005cc:	f240 80ef 	bls.w	80007ae <__udivmoddi4+0x2aa>
 80005d0:	4630      	mov	r0, r6
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d0e3      	beq.n	800059e <__udivmoddi4+0x9a>
 80005d6:	e9c5 4700 	strd	r4, r7, [r5]
 80005da:	e7e0      	b.n	800059e <__udivmoddi4+0x9a>
 80005dc:	b902      	cbnz	r2, 80005e0 <__udivmoddi4+0xdc>
 80005de:	deff      	udf	#255	; 0xff
 80005e0:	fab2 f382 	clz	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f040 809d 	bne.w	8000724 <__udivmoddi4+0x220>
 80005ea:	1a89      	subs	r1, r1, r2
 80005ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005f0:	b297      	uxth	r7, r2
 80005f2:	2601      	movs	r6, #1
 80005f4:	0c20      	lsrs	r0, r4, #16
 80005f6:	fbb1 f2fe 	udiv	r2, r1, lr
 80005fa:	fb0e 1112 	mls	r1, lr, r2, r1
 80005fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000602:	fb07 f002 	mul.w	r0, r7, r2
 8000606:	4288      	cmp	r0, r1
 8000608:	d90f      	bls.n	800062a <__udivmoddi4+0x126>
 800060a:	eb1c 0101 	adds.w	r1, ip, r1
 800060e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000612:	bf2c      	ite	cs
 8000614:	f04f 0901 	movcs.w	r9, #1
 8000618:	f04f 0900 	movcc.w	r9, #0
 800061c:	4288      	cmp	r0, r1
 800061e:	d903      	bls.n	8000628 <__udivmoddi4+0x124>
 8000620:	f1b9 0f00 	cmp.w	r9, #0
 8000624:	f000 80cf 	beq.w	80007c6 <__udivmoddi4+0x2c2>
 8000628:	4642      	mov	r2, r8
 800062a:	1a09      	subs	r1, r1, r0
 800062c:	b2a4      	uxth	r4, r4
 800062e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000632:	fb0e 1110 	mls	r1, lr, r0, r1
 8000636:	fb00 f707 	mul.w	r7, r0, r7
 800063a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800063e:	42a7      	cmp	r7, r4
 8000640:	d908      	bls.n	8000654 <__udivmoddi4+0x150>
 8000642:	eb1c 0404 	adds.w	r4, ip, r4
 8000646:	f100 31ff 	add.w	r1, r0, #4294967295
 800064a:	d202      	bcs.n	8000652 <__udivmoddi4+0x14e>
 800064c:	42a7      	cmp	r7, r4
 800064e:	f200 80b4 	bhi.w	80007ba <__udivmoddi4+0x2b6>
 8000652:	4608      	mov	r0, r1
 8000654:	1be4      	subs	r4, r4, r7
 8000656:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800065a:	e79b      	b.n	8000594 <__udivmoddi4+0x90>
 800065c:	f1c6 0720 	rsb	r7, r6, #32
 8000660:	40b3      	lsls	r3, r6
 8000662:	fa01 f406 	lsl.w	r4, r1, r6
 8000666:	fa22 fc07 	lsr.w	ip, r2, r7
 800066a:	40f9      	lsrs	r1, r7
 800066c:	40b2      	lsls	r2, r6
 800066e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000672:	fa20 f307 	lsr.w	r3, r0, r7
 8000676:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800067a:	431c      	orrs	r4, r3
 800067c:	fa1f fe8c 	uxth.w	lr, ip
 8000680:	fa00 f306 	lsl.w	r3, r0, r6
 8000684:	0c20      	lsrs	r0, r4, #16
 8000686:	fbb1 f8f9 	udiv	r8, r1, r9
 800068a:	fb09 1118 	mls	r1, r9, r8, r1
 800068e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000692:	fb08 f00e 	mul.w	r0, r8, lr
 8000696:	4288      	cmp	r0, r1
 8000698:	d90f      	bls.n	80006ba <__udivmoddi4+0x1b6>
 800069a:	eb1c 0101 	adds.w	r1, ip, r1
 800069e:	f108 3aff 	add.w	sl, r8, #4294967295
 80006a2:	bf2c      	ite	cs
 80006a4:	f04f 0b01 	movcs.w	fp, #1
 80006a8:	f04f 0b00 	movcc.w	fp, #0
 80006ac:	4288      	cmp	r0, r1
 80006ae:	d903      	bls.n	80006b8 <__udivmoddi4+0x1b4>
 80006b0:	f1bb 0f00 	cmp.w	fp, #0
 80006b4:	f000 808d 	beq.w	80007d2 <__udivmoddi4+0x2ce>
 80006b8:	46d0      	mov	r8, sl
 80006ba:	1a09      	subs	r1, r1, r0
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	fbb1 f0f9 	udiv	r0, r1, r9
 80006c2:	fb09 1110 	mls	r1, r9, r0, r1
 80006c6:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ca:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006ce:	458e      	cmp	lr, r1
 80006d0:	d907      	bls.n	80006e2 <__udivmoddi4+0x1de>
 80006d2:	eb1c 0101 	adds.w	r1, ip, r1
 80006d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80006da:	d201      	bcs.n	80006e0 <__udivmoddi4+0x1dc>
 80006dc:	458e      	cmp	lr, r1
 80006de:	d87f      	bhi.n	80007e0 <__udivmoddi4+0x2dc>
 80006e0:	4620      	mov	r0, r4
 80006e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006e6:	eba1 010e 	sub.w	r1, r1, lr
 80006ea:	fba0 9802 	umull	r9, r8, r0, r2
 80006ee:	4541      	cmp	r1, r8
 80006f0:	464c      	mov	r4, r9
 80006f2:	46c6      	mov	lr, r8
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0x1f8>
 80006f6:	d106      	bne.n	8000706 <__udivmoddi4+0x202>
 80006f8:	454b      	cmp	r3, r9
 80006fa:	d204      	bcs.n	8000706 <__udivmoddi4+0x202>
 80006fc:	3801      	subs	r0, #1
 80006fe:	ebb9 0402 	subs.w	r4, r9, r2
 8000702:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000706:	2d00      	cmp	r5, #0
 8000708:	d070      	beq.n	80007ec <__udivmoddi4+0x2e8>
 800070a:	1b1a      	subs	r2, r3, r4
 800070c:	eb61 010e 	sbc.w	r1, r1, lr
 8000710:	fa22 f306 	lsr.w	r3, r2, r6
 8000714:	fa01 f707 	lsl.w	r7, r1, r7
 8000718:	40f1      	lsrs	r1, r6
 800071a:	2600      	movs	r6, #0
 800071c:	431f      	orrs	r7, r3
 800071e:	e9c5 7100 	strd	r7, r1, [r5]
 8000722:	e73c      	b.n	800059e <__udivmoddi4+0x9a>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0020 	rsb	r0, r3, #32
 800072c:	fa01 f203 	lsl.w	r2, r1, r3
 8000730:	fa21 f600 	lsr.w	r6, r1, r0
 8000734:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000738:	fa24 f100 	lsr.w	r1, r4, r0
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	409c      	lsls	r4, r3
 8000742:	4311      	orrs	r1, r2
 8000744:	fbb6 f0fe 	udiv	r0, r6, lr
 8000748:	0c0a      	lsrs	r2, r1, #16
 800074a:	fb0e 6610 	mls	r6, lr, r0, r6
 800074e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000752:	fb00 f607 	mul.w	r6, r0, r7
 8000756:	4296      	cmp	r6, r2
 8000758:	d90e      	bls.n	8000778 <__udivmoddi4+0x274>
 800075a:	eb1c 0202 	adds.w	r2, ip, r2
 800075e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000762:	bf2c      	ite	cs
 8000764:	f04f 0901 	movcs.w	r9, #1
 8000768:	f04f 0900 	movcc.w	r9, #0
 800076c:	4296      	cmp	r6, r2
 800076e:	d902      	bls.n	8000776 <__udivmoddi4+0x272>
 8000770:	f1b9 0f00 	cmp.w	r9, #0
 8000774:	d031      	beq.n	80007da <__udivmoddi4+0x2d6>
 8000776:	4640      	mov	r0, r8
 8000778:	1b92      	subs	r2, r2, r6
 800077a:	b289      	uxth	r1, r1
 800077c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000780:	fb0e 2216 	mls	r2, lr, r6, r2
 8000784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000788:	fb06 f207 	mul.w	r2, r6, r7
 800078c:	428a      	cmp	r2, r1
 800078e:	d907      	bls.n	80007a0 <__udivmoddi4+0x29c>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f106 38ff 	add.w	r8, r6, #4294967295
 8000798:	d201      	bcs.n	800079e <__udivmoddi4+0x29a>
 800079a:	428a      	cmp	r2, r1
 800079c:	d823      	bhi.n	80007e6 <__udivmoddi4+0x2e2>
 800079e:	4646      	mov	r6, r8
 80007a0:	1a89      	subs	r1, r1, r2
 80007a2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007a6:	e725      	b.n	80005f4 <__udivmoddi4+0xf0>
 80007a8:	462e      	mov	r6, r5
 80007aa:	4628      	mov	r0, r5
 80007ac:	e6f7      	b.n	800059e <__udivmoddi4+0x9a>
 80007ae:	1a84      	subs	r4, r0, r2
 80007b0:	eb61 0303 	sbc.w	r3, r1, r3
 80007b4:	2001      	movs	r0, #1
 80007b6:	461f      	mov	r7, r3
 80007b8:	e70b      	b.n	80005d2 <__udivmoddi4+0xce>
 80007ba:	4464      	add	r4, ip
 80007bc:	3802      	subs	r0, #2
 80007be:	e749      	b.n	8000654 <__udivmoddi4+0x150>
 80007c0:	4464      	add	r4, ip
 80007c2:	3802      	subs	r0, #2
 80007c4:	e6e1      	b.n	800058a <__udivmoddi4+0x86>
 80007c6:	3a02      	subs	r2, #2
 80007c8:	4461      	add	r1, ip
 80007ca:	e72e      	b.n	800062a <__udivmoddi4+0x126>
 80007cc:	3e02      	subs	r6, #2
 80007ce:	4462      	add	r2, ip
 80007d0:	e6c6      	b.n	8000560 <__udivmoddi4+0x5c>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4461      	add	r1, ip
 80007d8:	e76f      	b.n	80006ba <__udivmoddi4+0x1b6>
 80007da:	3802      	subs	r0, #2
 80007dc:	4462      	add	r2, ip
 80007de:	e7cb      	b.n	8000778 <__udivmoddi4+0x274>
 80007e0:	3802      	subs	r0, #2
 80007e2:	4461      	add	r1, ip
 80007e4:	e77d      	b.n	80006e2 <__udivmoddi4+0x1de>
 80007e6:	3e02      	subs	r6, #2
 80007e8:	4461      	add	r1, ip
 80007ea:	e7d9      	b.n	80007a0 <__udivmoddi4+0x29c>
 80007ec:	462e      	mov	r6, r5
 80007ee:	e6d6      	b.n	800059e <__udivmoddi4+0x9a>

080007f0 <__aeabi_idiv0>:
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000800:	2334      	movs	r3, #52	; 0x34
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <tx_application_define+0x40>)
 800080a:	490b      	ldr	r1, [pc, #44]	; (8000838 <tx_application_define+0x44>)
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <tx_application_define+0x48>)
 800080e:	f00d fbbf 	bl	800df90 <_txe_byte_pool_create>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d109      	bne.n	800082c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <tx_application_define+0x48>)
 800081a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800081c:	68b8      	ldr	r0, [r7, #8]
 800081e:	f000 f80f 	bl	8000840 <App_ThreadX_Init>
 8000822:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800082a:	e7fe      	b.n	800082a <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200001d4 	.word	0x200001d4
 8000838:	080156f0 	.word	0x080156f0
 800083c:	200005d4 	.word	0x200005d4

08000840 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af08      	add	r7, sp, #32
 8000846:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&menu_task_ptr, "menu_task", menu_task_entry, 0x1234,
 800084c:	23b0      	movs	r3, #176	; 0xb0
 800084e:	9306      	str	r3, [sp, #24]
 8000850:	2301      	movs	r3, #1
 8000852:	9305      	str	r3, [sp, #20]
 8000854:	2301      	movs	r3, #1
 8000856:	9304      	str	r3, [sp, #16]
 8000858:	230f      	movs	r3, #15
 800085a:	9303      	str	r3, [sp, #12]
 800085c:	230f      	movs	r3, #15
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <App_ThreadX_Init+0x90>)
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	f241 2334 	movw	r3, #4660	; 0x1234
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <App_ThreadX_Init+0x94>)
 8000870:	4919      	ldr	r1, [pc, #100]	; (80008d8 <App_ThreadX_Init+0x98>)
 8000872:	481a      	ldr	r0, [pc, #104]	; (80008dc <App_ThreadX_Init+0x9c>)
 8000874:	f00d fe8c 	bl	800e590 <_txe_thread_create>
                  menu_task_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);

  tx_thread_create(&debounce_task_ptr, "debounce_task", debounce_task_entry,
 8000878:	23b0      	movs	r3, #176	; 0xb0
 800087a:	9306      	str	r3, [sp, #24]
 800087c:	2301      	movs	r3, #1
 800087e:	9305      	str	r3, [sp, #20]
 8000880:	2301      	movs	r3, #1
 8000882:	9304      	str	r3, [sp, #16]
 8000884:	230e      	movs	r3, #14
 8000886:	9303      	str	r3, [sp, #12]
 8000888:	230e      	movs	r3, #14
 800088a:	9302      	str	r3, [sp, #8]
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <App_ThreadX_Init+0xa0>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	f241 2334 	movw	r3, #4660	; 0x1234
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <App_ThreadX_Init+0xa4>)
 800089c:	4912      	ldr	r1, [pc, #72]	; (80008e8 <App_ThreadX_Init+0xa8>)
 800089e:	4813      	ldr	r0, [pc, #76]	; (80008ec <App_ThreadX_Init+0xac>)
 80008a0:	f00d fe76 	bl	800e590 <_txe_thread_create>
                  0x1234, debounce_task_stack, THREAD_STACK_SIZE, 14, 14, 1,
                  TX_AUTO_START);

  tx_semaphore_create(&debounce_semaphore_ptr, "debounce_semaphore", 0);
 80008a4:	231c      	movs	r3, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <App_ThreadX_Init+0xb0>)
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <App_ThreadX_Init+0xb4>)
 80008ac:	f00d fd98 	bl	800e3e0 <_txe_semaphore_create>

  tx_queue_create(&event_queue_ptr, "event_queue", sizeof(fm_event_t),
 80008b0:	2338      	movs	r3, #56	; 0x38
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <App_ThreadX_Init+0xb8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	490f      	ldr	r1, [pc, #60]	; (80008fc <App_ThreadX_Init+0xbc>)
 80008c0:	480f      	ldr	r0, [pc, #60]	; (8000900 <App_ThreadX_Init+0xc0>)
 80008c2:	f00d fc05 	bl	800e0d0 <_txe_queue_create>
  #ifndef FM_THREADX_LOW_POWER
//      tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE, 30);
  #endif
  /* USER CODE END App_ThreadX_Init */

  return (ret);
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000060c 	.word	0x2000060c
 80008d4:	08000a05 	.word	0x08000a05
 80008d8:	08015704 	.word	0x08015704
 80008dc:	2000120c 	.word	0x2000120c
 80008e0:	20000a0c 	.word	0x20000a0c
 80008e4:	08000ab9 	.word	0x08000ab9
 80008e8:	08015710 	.word	0x08015710
 80008ec:	200012bc 	.word	0x200012bc
 80008f0:	08015720 	.word	0x08015720
 80008f4:	2000136c 	.word	0x2000136c
 80008f8:	20000e0c 	.word	0x20000e0c
 80008fc:	08015734 	.word	0x08015734
 8000900:	20001388 	.word	0x20001388

08000904 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000908:	f00a fdc4 	bl	800b494 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */
#ifdef FM_THREADX_LOW_POWER
  uint32_t ticks_to_sleep;

  g_lptim1_start = LPTIM1->CNT;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <App_ThreadX_LowPower_Timer_Setup+0x44>)
 800091a:	69db      	ldr	r3, [r3, #28]
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <App_ThreadX_LowPower_Timer_Setup+0x48>)
 8000920:	801a      	strh	r2, [r3, #0]
  /*
   * clock_freq/RTC_WAKEUPCLOCK_RTCCLK_DIV16
   */
  ticks_to_sleep = (32768 / 16) * count;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	02db      	lsls	r3, r3, #11
 8000926:	60fb      	str	r3, [r7, #12]
  ticks_to_sleep /= TX_TIMER_TICKS_PER_SECOND;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <App_ThreadX_LowPower_Timer_Setup+0x4c>)
 800092c:	fba2 2303 	umull	r2, r3, r2, r3
 8000930:	095b      	lsrs	r3, r3, #5
 8000932:	60fb      	str	r3, [r7, #12]

#ifdef FM_DEBUG_UART_TX_TIME_ON_IDLE
  fm_debug_uint32_uart(count);
#endif

  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks_to_sleep,
 8000934:	2300      	movs	r3, #0
 8000936:	2200      	movs	r2, #0
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	4809      	ldr	r0, [pc, #36]	; (8000960 <App_ThreadX_LowPower_Timer_Setup+0x50>)
 800093c:	f008 fd34 	bl	80093a8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <App_ThreadX_LowPower_Timer_Setup+0x3a>
      RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
  {
    Error_Handler();
 8000946:	f000 fcad 	bl	80012a4 <Error_Handler>
  }

#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	46004400 	.word	0x46004400
 8000958:	20000608 	.word	0x20000608
 800095c:	51eb851f 	.word	0x51eb851f
 8000960:	200014a4 	.word	0x200014a4

08000964 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2180      	movs	r1, #128	; 0x80
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <App_ThreadX_LowPower_Enter+0x18>)
 800096e:	f003 fce1 	bl	8004334 <HAL_GPIO_WritePin>


  #ifdef FM_THREADX_LOW_POWER
  HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 8000972:	2001      	movs	r0, #1
 8000974:	f004 f97c 	bl	8004c70 <HAL_PWREx_EnterSTOP1Mode>
  #endif

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	42020400 	.word	0x42020400

08000980 <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /*
     * If CPU wakes up other reason but timer flag we must wait until
     * expected time was elapsed. Debugger issues makes wake up CPU earlier
     */
  #ifdef FM_THREADX_LOW_POWER
    SystemClock_Config();
 8000984:	f000 f90a 	bl	8000b9c <SystemClock_Config>
  #endif

  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <App_ThreadX_LowPower_Exit+0x18>)
 800098e:	f003 fcd1 	bl	8004334 <HAL_GPIO_WritePin>

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	42020400 	.word	0x42020400

0800099c <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Adjust */
#ifdef FM_THREADX_LOW_POWER
  static uint16_t cnt_drift = 0;
  ULONG cnt_ret;
  g_lptim1_end = LPTIM1->CNT;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <App_ThreadX_LowPower_Timer_Adjust+0x58>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 80009aa:	801a      	strh	r2, [r3, #0]
  cnt_ret = (g_lptim1_end - g_lptim1_start);
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <App_ThreadX_LowPower_Timer_Adjust+0x60>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	607b      	str	r3, [r7, #4]
  cnt_ret *= TX_TIMER_TICKS_PER_SECOND;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2264      	movs	r2, #100	; 0x64
 80009be:	fb02 f303 	mul.w	r3, r2, r3
 80009c2:	607b      	str	r3, [r7, #4]
  cnt_ret += cnt_drift;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	607b      	str	r3, [r7, #4]
  cnt_drift = cnt_ret % 2048; // 2048 = lptim_clok_frq /  clock_prescaler
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 80009dc:	801a      	strh	r2, [r3, #0]
  cnt_ret /= 2048;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	0adb      	lsrs	r3, r3, #11
 80009e2:	607b      	str	r3, [r7, #4]
  return (cnt_ret);
 80009e4:	687b      	ldr	r3, [r7, #4]
#else
  return (0);
#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	46004400 	.word	0x46004400
 80009f8:	2000060a 	.word	0x2000060a
 80009fc:	20000608 	.word	0x20000608
 8000a00:	200013c0 	.word	0x200013c0

08000a04 <menu_task_entry>:

/* USER CODE BEGIN 1 */
VOID menu_task_entry(ULONG initial_input)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    static int backlight_cd = 0;
    ptr_fun_menu_t ptr_menu = fm_menu_show_init;
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <menu_task_entry+0xa0>)
 8000a0e:	617b      	str	r3, [r7, #20]
    fm_event_t event_next = EVENT_LCD_REFRESH;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73fb      	strb	r3, [r7, #15]
    UINT ret_status;
    while(1)
    {
        ret_status = tx_queue_receive(&event_queue_ptr,&event_next,100);
 8000a14:	f107 030f 	add.w	r3, r7, #15
 8000a18:	2264      	movs	r2, #100	; 0x64
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <menu_task_entry+0xa4>)
 8000a1e:	f00d fc25 	bl	800e26c <_txe_queue_receive>
 8000a22:	6138      	str	r0, [r7, #16]

        if(ptr_menu != fm_menu_show_init && ptr_menu != fm_menu_show_version)
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <menu_task_entry+0xa0>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d02d      	beq.n	8000a88 <menu_task_entry+0x84>
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	4a1f      	ldr	r2, [pc, #124]	; (8000aac <menu_task_entry+0xa8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d029      	beq.n	8000a88 <menu_task_entry+0x84>
        {
            if(event_next == EVENT_LCD_REFRESH && backlight_cd > 0)
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d109      	bne.n	8000a4e <menu_task_entry+0x4a>
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <menu_task_entry+0xac>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	dd05      	ble.n	8000a4e <menu_task_entry+0x4a>
            {
                backlight_cd--;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <menu_task_entry+0xac>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <menu_task_entry+0xac>)
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	e01c      	b.n	8000a88 <menu_task_entry+0x84>
            }
            else if(event_next == EVENT_LCD_REFRESH && backlight_cd <= 0)
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d10d      	bne.n	8000a70 <menu_task_entry+0x6c>
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <menu_task_entry+0xac>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	dc09      	bgt.n	8000a70 <menu_task_entry+0x6c>
            {
                HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a62:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <menu_task_entry+0xb0>)
 8000a64:	f003 fc66 	bl	8004334 <HAL_GPIO_WritePin>
                PCF8553_BACKLIGHT_Pin, GPIO_PIN_SET);
                backlight_cd = 0;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <menu_task_entry+0xac>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	e00b      	b.n	8000a88 <menu_task_entry+0x84>
            }
            else if(event_next != EVENT_LCD_REFRESH)
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d008      	beq.n	8000a88 <menu_task_entry+0x84>
            {
                HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <menu_task_entry+0xb0>)
 8000a7e:	f003 fc59 	bl	8004334 <HAL_GPIO_WritePin>
                PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
                backlight_cd = 10;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <menu_task_entry+0xac>)
 8000a84:	220a      	movs	r2, #10
 8000a86:	601a      	str	r2, [r3, #0]
            }
        }

        if(ret_status == TX_SUCCESS)
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d105      	bne.n	8000a9a <menu_task_entry+0x96>
        {
            ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(event_next);
 8000a8e:	7bfa      	ldrb	r2, [r7, #15]
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	4610      	mov	r0, r2
 8000a94:	4798      	blx	r3
 8000a96:	6178      	str	r0, [r7, #20]
 8000a98:	e7bc      	b.n	8000a14 <menu_task_entry+0x10>
        }
        else
        {
            ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(EVENT_LCD_REFRESH);
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	4798      	blx	r3
 8000aa0:	6178      	str	r0, [r7, #20]
        ret_status = tx_queue_receive(&event_queue_ptr,&event_next,100);
 8000aa2:	e7b7      	b.n	8000a14 <menu_task_entry+0x10>
 8000aa4:	08014521 	.word	0x08014521
 8000aa8:	20001388 	.word	0x20001388
 8000aac:	0801475d 	.word	0x0801475d
 8000ab0:	200013c4 	.word	0x200013c4
 8000ab4:	42020800 	.word	0x42020800

08000ab8 <debounce_task_entry>:
        }
    }
}

VOID debounce_task_entry(ULONG initial_input)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    /*
     * debounce_time*10ms se espera para evitar rebotes.
     */
    const int debounce_time = 14;
 8000ac0:	230e      	movs	r3, #14
 8000ac2:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	4819      	ldr	r0, [pc, #100]	; (8000b30 <debounce_task_entry+0x78>)
 8000aca:	f00d fd1f 	bl	800e50c <_txe_semaphore_get>

        tx_thread_sleep(debounce_time);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f00c f90f 	bl	800ccf4 <_tx_thread_sleep>

        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <debounce_task_entry+0x7c>)
 8000ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <debounce_task_entry+0x7c>)
 8000ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae4:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <debounce_task_entry+0x7c>)
 8000ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <debounce_task_entry+0x7c>)
 8000af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af4:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <debounce_task_entry+0x7c>)
 8000af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <debounce_task_entry+0x7c>)
 8000b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b04:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <debounce_task_entry+0x7c>)
 8000b08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <debounce_task_entry+0x7c>)
 8000b10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b14:	611a      	str	r2, [r3, #16]

        HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000b16:	2015      	movs	r0, #21
 8000b18:	f003 fa18 	bl	8003f4c <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000b1c:	2016      	movs	r0, #22
 8000b1e:	f003 fa15 	bl	8003f4c <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8000b22:	2017      	movs	r0, #23
 8000b24:	f003 fa12 	bl	8003f4c <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b28:	2018      	movs	r0, #24
 8000b2a:	f003 fa0f 	bl	8003f4c <HAL_NVIC_EnableIRQ>
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);
 8000b2e:	e7c9      	b.n	8000ac4 <debounce_task_entry+0xc>
 8000b30:	2000136c 	.word	0x2000136c
 8000b34:	46022000 	.word	0x46022000

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f000 fed4 	bl	80018e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f82c 	bl	8000b9c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000b44:	f000 f886 	bl	8000c54 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f000 faae 	bl	80010a8 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000b4c:	f000 f902 	bl	8000d54 <MX_ICACHE_Init>
  MX_LPTIM1_Init();
 8000b50:	f000 f914 	bl	8000d7c <MX_LPTIM1_Init>
  MX_RTC_Init();
 8000b54:	f000 f95e 	bl	8000e14 <MX_RTC_Init>
  MX_SPI1_Init();
 8000b58:	f000 f9ea 	bl	8000f30 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b5c:	f000 fa58 	bl	8001010 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b60:	f000 f88a 	bl	8000c78 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  fm_lcd_clear();
 8000b64:	f00e fea7 	bl	800f8b6 <fm_lcd_clear>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4808      	ldr	r0, [pc, #32]	; (8000b90 <main+0x58>)
 8000b70:	f002 ffa6 	bl	8003ac0 <HAL_ADCEx_Calibration_Start>
  __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <main+0x5c>)
 8000b76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b7a:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <main+0x5c>)
 8000b7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
   HAL_LPTIM_Counter_Start(&hlptim1);
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <main+0x60>)
 8000b86:	f003 fd4f 	bl	8004628 <HAL_LPTIM_Counter_Start>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000b8a:	f7ff febb 	bl	8000904 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <main+0x56>
 8000b90:	200013c8 	.word	0x200013c8
 8000b94:	46020c00 	.word	0x46020c00
 8000b98:	20001454 	.word	0x20001454

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09e      	sub	sp, #120	; 0x78
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0318 	add.w	r3, r7, #24
 8000ba6:	2260      	movs	r2, #96	; 0x60
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f014 f84e 	bl	8014c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
 8000bbe:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8000bc0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000bc4:	f003 ff78 	bl	8004ab8 <HAL_PWREx_ControlVoltageScaling>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000bce:	f000 fb69 	bl	80012a4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bd2:	f003 ff61 	bl	8004a98 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <SystemClock_Config+0xb4>)
 8000bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bdc:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <SystemClock_Config+0xb4>)
 8000bde:	f023 0318 	bic.w	r3, r3, #24
 8000be2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000be6:	2316      	movs	r3, #22
 8000be8:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bea:	2381      	movs	r3, #129	; 0x81
 8000bec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c08:	f107 0318 	add.w	r3, r7, #24
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 f88b 	bl	8004d28 <HAL_RCC_OscConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c18:	f000 fb44 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1c:	231f      	movs	r3, #31
 8000c1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c24:	2308      	movs	r3, #8
 8000c26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 ff51 	bl	8005ae0 <HAL_RCC_ClockConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c44:	f000 fb2e 	bl	80012a4 <Error_Handler>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3778      	adds	r7, #120	; 0x78
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	46020c00 	.word	0x46020c00

08000c54 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000c58:	f004 f836 	bl	8004cc8 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c5c:	f004 f854 	bl	8004d08 <HAL_PWREx_DisableUCPDDeadBattery>
/* USER CODE BEGIN PWR */
  HAL_PWREx_EnableVddIO2();
 8000c60:	f004 f832 	bl	8004cc8 <HAL_PWREx_EnableVddIO2>

  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000c64:	2002      	movs	r0, #2
 8000c66:	f003 ffb3 	bl	8004bd0 <HAL_PWREx_ConfigSupply>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemPower_Config+0x20>
  {
      Error_Handler();
 8000c70:	f000 fb18 	bl	80012a4 <Error_Handler>
  }
/* USER CODE END PWR */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2220      	movs	r2, #32
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f013 ffe1 	bl	8014c4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000c8c:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <MX_ADC1_Init+0xd4>)
 8000c8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000c92:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca4:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000caa:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000cac:	2204      	movs	r2, #4
 8000cae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cb6:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d00:	4811      	ldr	r0, [pc, #68]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000d02:	f001 f9d5 	bl	80020b0 <HAL_ADC_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000d0c:	f000 faca 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_ADC1_Init+0xd8>)
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d14:	2306      	movs	r3, #6
 8000d16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_391CYCLES_5;
 8000d18:	2306      	movs	r3, #6
 8000d1a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d22:	2304      	movs	r3, #4
 8000d24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <MX_ADC1_Init+0xd0>)
 8000d30:	f001 fe24 	bl	800297c <HAL_ADC_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000d3a:	f000 fab3 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	3720      	adds	r7, #32
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200013c8 	.word	0x200013c8
 8000d4c:	42028000 	.word	0x42028000
 8000d50:	ce080000 	.word	0xce080000

08000d54 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f003 fb35 	bl	80043c8 <HAL_ICACHE_ConfigAssociativityMode>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000d64:	f000 fa9e 	bl	80012a4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000d68:	f003 fb4e 	bl	8004408 <HAL_ICACHE_Enable>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000d72:	f000 fa97 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000d80:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <MX_LPTIM1_Init+0x8c>)
 8000d82:	4a22      	ldr	r2, [pc, #136]	; (8000e0c <MX_LPTIM1_Init+0x90>)
 8000d84:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <MX_LPTIM1_Init+0x8c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <MX_LPTIM1_Init+0x8c>)
 8000d8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d92:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_LPTIM1_Init+0x8c>)
 8000d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d9a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 65535;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_LPTIM1_Init+0x8c>)
 8000d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_LPTIM1_Init+0x8c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_LPTIM1_Init+0x8c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_LPTIM1_Init+0x8c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_LPTIM1_Init+0x8c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_LPTIM1_Init+0x8c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000dc2:	4811      	ldr	r0, [pc, #68]	; (8000e08 <MX_LPTIM1_Init+0x8c>)
 8000dc4:	f003 fb30 	bl	8004428 <HAL_LPTIM_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_LPTIM1_Init+0x56>
  {
    Error_Handler();
 8000dce:	f000 fa69 	bl	80012a4 <Error_Handler>
  /*
   * To run in stop mode the LPBAM low-power backgroung autonomous mode must be
   * configured
   *
   */
  __HAL_RCC_LPTIM1_CLKAM_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_LPTIM1_Init+0x94>)
 8000dd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <MX_LPTIM1_Init+0x94>)
 8000dda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  __HAL_RCC_LPDMA1_CLKAM_ENABLE();
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_LPTIM1_Init+0x94>)
 8000de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de8:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <MX_LPTIM1_Init+0x94>)
 8000dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  __HAL_RCC_SRAM4_CLKAM_ENABLE();
 8000df2:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <MX_LPTIM1_Init+0x94>)
 8000df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000df8:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <MX_LPTIM1_Init+0x94>)
 8000dfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dfe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

  /* USER CODE END LPTIM1_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20001454 	.word	0x20001454
 8000e0c:	46004400 	.word	0x46004400
 8000e10:	46020c00 	.word	0x46020c00

08000e14 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08e      	sub	sp, #56	; 0x38
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	615a      	str	r2, [r3, #20]
 8000e2c:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e42:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <MX_RTC_Init+0x114>)
 8000e44:	4a39      	ldr	r2, [pc, #228]	; (8000f2c <MX_RTC_Init+0x118>)
 8000e46:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e48:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <MX_RTC_Init+0x114>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e4e:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <MX_RTC_Init+0x114>)
 8000e50:	227f      	movs	r2, #127	; 0x7f
 8000e52:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e54:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <MX_RTC_Init+0x114>)
 8000e56:	22ff      	movs	r2, #255	; 0xff
 8000e58:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e5a:	4b33      	ldr	r3, [pc, #204]	; (8000f28 <MX_RTC_Init+0x114>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e60:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <MX_RTC_Init+0x114>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e66:	4b30      	ldr	r3, [pc, #192]	; (8000f28 <MX_RTC_Init+0x114>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <MX_RTC_Init+0x114>)
 8000e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e72:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000e74:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <MX_RTC_Init+0x114>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <MX_RTC_Init+0x114>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e80:	4829      	ldr	r0, [pc, #164]	; (8000f28 <MX_RTC_Init+0x114>)
 8000e82:	f007 ff45 	bl	8008d10 <HAL_RTC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000e8c:	f000 fa0a 	bl	80012a4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4820      	ldr	r0, [pc, #128]	; (8000f28 <MX_RTC_Init+0x114>)
 8000ea8:	f008 fb68 	bl	800957c <HAL_RTCEx_PrivilegeModeSet>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000eb2:	f000 f9f7 	bl	80012a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 8000eb6:	2311      	movs	r3, #17
 8000eb8:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	2200      	movs	r2, #0
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4815      	ldr	r0, [pc, #84]	; (8000f28 <MX_RTC_Init+0x114>)
 8000ed4:	f007 ff9e 	bl	8008e14 <HAL_RTC_SetTime>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000ede:	f000 f9e1 	bl	80012a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_MAY;
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	717b      	strb	r3, [r7, #5]
  sDate.Date = 8;
 8000eea:	2308      	movs	r3, #8
 8000eec:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 23;
 8000eee:	2317      	movs	r3, #23
 8000ef0:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <MX_RTC_Init+0x114>)
 8000efa:	f008 f899 	bl	8009030 <HAL_RTC_SetDate>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000f04:	f000 f9ce 	bl	80012a4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4096, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_RTC_Init+0x114>)
 8000f12:	f008 fa49 	bl	80093a8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8000f1c:	f000 f9c2 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3738      	adds	r7, #56	; 0x38
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200014a4 	.word	0x200014a4
 8000f2c:	46007800 	.word	0x46007800

08000f30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f40:	4b31      	ldr	r3, [pc, #196]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f42:	4a32      	ldr	r2, [pc, #200]	; (800100c <MX_SPI1_Init+0xdc>)
 8000f44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f46:	4b30      	ldr	r3, [pc, #192]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f50:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000f54:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f56:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f6e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000fce:	f008 fb03 	bl	80095d8 <HAL_SPI_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8000fd8:	f000 f964 	bl	80012a4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000fe0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	4619      	mov	r1, r3
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <MX_SPI1_Init+0xd8>)
 8000ff0:	f008 ff0f 	bl	8009e12 <HAL_SPIEx_SetConfigAutonomousMode>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8000ffa:	f000 f953 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200014d4 	.word	0x200014d4
 800100c:	40013000 	.word	0x40013000

08001010 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 8001016:	4a23      	ldr	r2, [pc, #140]	; (80010a4 <MX_USART2_UART_Init+0x94>)
 8001018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001058:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 800105a:	f009 fb05 	bl	800a668 <HAL_UART_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001064:	f000 f91e 	bl	80012a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001068:	2100      	movs	r1, #0
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 800106c:	f009 ffde 	bl	800b02c <HAL_UARTEx_SetTxFifoThreshold>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001076:	f000 f915 	bl	80012a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107a:	2100      	movs	r1, #0
 800107c:	4808      	ldr	r0, [pc, #32]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 800107e:	f00a f813 	bl	800b0a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001088:	f000 f90c 	bl	80012a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_USART2_UART_Init+0x90>)
 800108e:	f009 ff94 	bl	800afba <HAL_UARTEx_DisableFifoMode>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001098:	f000 f904 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20001564 	.word	0x20001564
 80010a4:	40004400 	.word	0x40004400

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	4b64      	ldr	r3, [pc, #400]	; (8001250 <MX_GPIO_Init+0x1a8>)
 80010c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010c4:	4a62      	ldr	r2, [pc, #392]	; (8001250 <MX_GPIO_Init+0x1a8>)
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010ce:	4b60      	ldr	r3, [pc, #384]	; (8001250 <MX_GPIO_Init+0x1a8>)
 80010d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b5c      	ldr	r3, [pc, #368]	; (8001250 <MX_GPIO_Init+0x1a8>)
 80010de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010e2:	4a5b      	ldr	r2, [pc, #364]	; (8001250 <MX_GPIO_Init+0x1a8>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010ec:	4b58      	ldr	r3, [pc, #352]	; (8001250 <MX_GPIO_Init+0x1a8>)
 80010ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b55      	ldr	r3, [pc, #340]	; (8001250 <MX_GPIO_Init+0x1a8>)
 80010fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001100:	4a53      	ldr	r2, [pc, #332]	; (8001250 <MX_GPIO_Init+0x1a8>)
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800110a:	4b51      	ldr	r3, [pc, #324]	; (8001250 <MX_GPIO_Init+0x1a8>)
 800110c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001118:	4b4d      	ldr	r3, [pc, #308]	; (8001250 <MX_GPIO_Init+0x1a8>)
 800111a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800111e:	4a4c      	ldr	r2, [pc, #304]	; (8001250 <MX_GPIO_Init+0x1a8>)
 8001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001124:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001128:	4b49      	ldr	r3, [pc, #292]	; (8001250 <MX_GPIO_Init+0x1a8>)
 800112a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800112e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PCF8553_CE_Pin|PCF8553_RESET_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2150      	movs	r1, #80	; 0x50
 800113a:	4846      	ldr	r0, [pc, #280]	; (8001254 <MX_GPIO_Init+0x1ac>)
 800113c:	f003 f8fa 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2104      	movs	r1, #4
 8001144:	4844      	ldr	r0, [pc, #272]	; (8001258 <MX_GPIO_Init+0x1b0>)
 8001146:	f003 f8f5 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port, PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001150:	4842      	ldr	r0, [pc, #264]	; (800125c <MX_GPIO_Init+0x1b4>)
 8001152:	f003 f8ef 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	4841      	ldr	r0, [pc, #260]	; (8001260 <MX_GPIO_Init+0x1b8>)
 800115c:	f003 f8ea 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCF8553_CE_Pin PCF8553_RESET_Pin */
  GPIO_InitStruct.Pin = PCF8553_CE_Pin|PCF8553_RESET_Pin;
 8001160:	2350      	movs	r3, #80	; 0x50
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4837      	ldr	r0, [pc, #220]	; (8001254 <MX_GPIO_Init+0x1ac>)
 8001178:	f002 ff04 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800117c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001182:	4b38      	ldr	r3, [pc, #224]	; (8001264 <MX_GPIO_Init+0x1bc>)
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4833      	ldr	r0, [pc, #204]	; (8001260 <MX_GPIO_Init+0x1b8>)
 8001192:	f002 fef7 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_red_Pin */
  GPIO_InitStruct.Pin = led_red_Pin;
 8001196:	2304      	movs	r3, #4
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_red_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	482a      	ldr	r0, [pc, #168]	; (8001258 <MX_GPIO_Init+0x1b0>)
 80011ae:	f002 fee9 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PCF8553_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = PCF8553_BACKLIGHT_Pin;
 80011b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCF8553_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4824      	ldr	r0, [pc, #144]	; (800125c <MX_GPIO_Init+0x1b4>)
 80011cc:	f002 feda 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <MX_GPIO_Init+0x1bc>)
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	481d      	ldr	r0, [pc, #116]	; (800125c <MX_GPIO_Init+0x1b4>)
 80011e6:	f002 fecd 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_blue_Pin */
  GPIO_InitStruct.Pin = led_blue_Pin;
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_blue_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4817      	ldr	r0, [pc, #92]	; (8001260 <MX_GPIO_Init+0x1b8>)
 8001202:	f002 febf 	bl	8003f84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI10_IRQn, 5, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2105      	movs	r1, #5
 800120a:	2015      	movs	r0, #21
 800120c:	f002 fe84 	bl	8003f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8001210:	2015      	movs	r0, #21
 8001212:	f002 fe9b 	bl	8003f4c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 5, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2105      	movs	r1, #5
 800121a:	2016      	movs	r0, #22
 800121c:	f002 fe7c 	bl	8003f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8001220:	2016      	movs	r0, #22
 8001222:	f002 fe93 	bl	8003f4c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI12_IRQn, 5, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2105      	movs	r1, #5
 800122a:	2017      	movs	r0, #23
 800122c:	f002 fe74 	bl	8003f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8001230:	2017      	movs	r0, #23
 8001232:	f002 fe8b 	bl	8003f4c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2105      	movs	r1, #5
 800123a:	2018      	movs	r0, #24
 800123c:	f002 fe6c 	bl	8003f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001240:	2018      	movs	r0, #24
 8001242:	f002 fe83 	bl	8003f4c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	46020c00 	.word	0x46020c00
 8001254:	42020000 	.word	0x42020000
 8001258:	42021800 	.word	0x42021800
 800125c:	42020800 	.word	0x42020800
 8001260:	42020400 	.word	0x42020400
 8001264:	10110000 	.word	0x10110000

08001268 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */

__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f008 f911 	bl	8009498 <HAL_RTCEx_DeactivateWakeUpTimer>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001292:	f000 fb57 	bl	8001944 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40001000 	.word	0x40001000

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, GPIO_PIN_SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2104      	movs	r1, #4
 80012b0:	4801      	ldr	r0, [pc, #4]	; (80012b8 <Error_Handler+0x14>)
 80012b2:	f003 f83f 	bl	8004334 <HAL_GPIO_WritePin>
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <Error_Handler+0x12>
 80012b8:	42021800 	.word	0x42021800

080012bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_MspInit+0x34>)
 80012c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c8:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <HAL_MspInit+0x34>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <HAL_MspInit+0x34>)
 80012d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_PWREx_EnableVddA();
 80012e0:	f003 fd02 	bl	8004ce8 <HAL_PWREx_EnableVddA>
  HAL_PWREx_EnableVddIO2();
 80012e4:	f003 fcf0 	bl	8004cc8 <HAL_PWREx_EnableVddIO2>
  /* USER CODE END MspInit 1 */
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	46020c00 	.word	0x46020c00

080012f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b0b6      	sub	sp, #216	; 0xd8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	22c8      	movs	r2, #200	; 0xc8
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f013 fca1 	bl	8014c4c <memset>
  if(hadc->Instance==ADC1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <HAL_ADC_MspInit+0x70>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d122      	bne.n	800135a <HAL_ADC_MspInit+0x66>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001314:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001320:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4618      	mov	r0, r3
 800132e:	f004 ffe5 	bl	80062fc <HAL_RCCEx_PeriphCLKConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 8001338:	f7ff ffb4 	bl	80012a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_ADC_MspInit+0x74>)
 800133e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001342:	4a09      	ldr	r2, [pc, #36]	; (8001368 <HAL_ADC_MspInit+0x74>)
 8001344:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001348:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_ADC_MspInit+0x74>)
 800134e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	37d8      	adds	r7, #216	; 0xd8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	42028000 	.word	0x42028000
 8001368:	46020c00 	.word	0x46020c00

0800136c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0b6      	sub	sp, #216	; 0xd8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	22c8      	movs	r2, #200	; 0xc8
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f013 fc65 	bl	8014c4c <memset>
  if(hlptim->Instance==LPTIM1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a19      	ldr	r2, [pc, #100]	; (80013ec <HAL_LPTIM_MspInit+0x80>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d12a      	bne.n	80013e2 <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800138c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001398:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800139c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4618      	mov	r0, r3
 80013a6:	f004 ffa9 	bl	80062fc <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 80013b0:	f7ff ff78 	bl	80012a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_LPTIM_MspInit+0x84>)
 80013b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80013ba:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <HAL_LPTIM_MspInit+0x84>)
 80013bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013c0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_LPTIM_MspInit+0x84>)
 80013c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80013ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	2043      	movs	r0, #67	; 0x43
 80013d8:	f002 fd9e 	bl	8003f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80013dc:	2043      	movs	r0, #67	; 0x43
 80013de:	f002 fdb5 	bl	8003f4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	37d8      	adds	r7, #216	; 0xd8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	46004400 	.word	0x46004400
 80013f0:	46020c00 	.word	0x46020c00

080013f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0b6      	sub	sp, #216	; 0xd8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	22c8      	movs	r2, #200	; 0xc8
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f013 fc21 	bl	8014c4c <memset>
  if(hrtc->Instance==RTC)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_RTC_MspInit+0x90>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d132      	bne.n	800147a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001414:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4618      	mov	r0, r3
 800142e:	f004 ff65 	bl	80062fc <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001438:	f7ff ff34 	bl	80012a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_RTC_MspInit+0x94>)
 800143e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001442:	4a11      	ldr	r2, [pc, #68]	; (8001488 <HAL_RTC_MspInit+0x94>)
 8001444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001448:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_RTC_MspInit+0x94>)
 800144e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001452:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <HAL_RTC_MspInit+0x94>)
 8001454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001458:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_RTC_MspInit+0x94>)
 800145e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2002      	movs	r0, #2
 8001470:	f002 fd52 	bl	8003f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001474:	2002      	movs	r0, #2
 8001476:	f002 fd69 	bl	8003f4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	37d8      	adds	r7, #216	; 0xd8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	46007800 	.word	0x46007800
 8001488:	46020c00 	.word	0x46020c00

0800148c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0bc      	sub	sp, #240	; 0xf0
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	22c8      	movs	r2, #200	; 0xc8
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f013 fbcd 	bl	8014c4c <memset>
  if(hspi->Instance==SPI1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a27      	ldr	r2, [pc, #156]	; (8001554 <HAL_SPI_MspInit+0xc8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d146      	bne.n	800154a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80014bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80014c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 ff11 	bl	80062fc <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80014e0:	f7ff fee0 	bl	80012a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_SPI_MspInit+0xcc>)
 80014e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80014ea:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <HAL_SPI_MspInit+0xcc>)
 80014ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014f0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_SPI_MspInit+0xcc>)
 80014f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80014fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_SPI_MspInit+0xcc>)
 8001504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001508:	4a13      	ldr	r2, [pc, #76]	; (8001558 <HAL_SPI_MspInit+0xcc>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_SPI_MspInit+0xcc>)
 8001514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PCF8553_SCL_Pin|PCF8553_SDIO_Pin;
 8001520:	2382      	movs	r3, #130	; 0x82
 8001522:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001538:	2305      	movs	r3, #5
 800153a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <HAL_SPI_MspInit+0xd0>)
 8001546:	f002 fd1d 	bl	8003f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	37f0      	adds	r7, #240	; 0xf0
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40013000 	.word	0x40013000
 8001558:	46020c00 	.word	0x46020c00
 800155c:	42020000 	.word	0x42020000

08001560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0bc      	sub	sp, #240	; 0xf0
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	22c8      	movs	r2, #200	; 0xc8
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f013 fb63 	bl	8014c4c <memset>
  if(huart->Instance==USART2)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a26      	ldr	r2, [pc, #152]	; (8001624 <HAL_UART_MspInit+0xc4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d144      	bne.n	800161a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001590:	f04f 0202 	mov.w	r2, #2
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800159c:	2300      	movs	r3, #0
 800159e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	4618      	mov	r0, r3
 80015a6:	f004 fea9 	bl	80062fc <HAL_RCCEx_PeriphCLKConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80015b0:	f7ff fe78 	bl	80012a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_UART_MspInit+0xc8>)
 80015b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015ba:	4a1b      	ldr	r2, [pc, #108]	; (8001628 <HAL_UART_MspInit+0xc8>)
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_UART_MspInit+0xc8>)
 80015c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_UART_MspInit+0xc8>)
 80015d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015d8:	4a13      	ldr	r2, [pc, #76]	; (8001628 <HAL_UART_MspInit+0xc8>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_UART_MspInit+0xc8>)
 80015e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015f0:	230c      	movs	r3, #12
 80015f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001608:	2307      	movs	r3, #7
 800160a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <HAL_UART_MspInit+0xcc>)
 8001616:	f002 fcb5 	bl	8003f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	37f0      	adds	r7, #240	; 0xf0
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40004400 	.word	0x40004400
 8001628:	46020c00 	.word	0x46020c00
 800162c:	42020000 	.word	0x42020000

08001630 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08e      	sub	sp, #56	; 0x38
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <HAL_InitTick+0xcc>)
 8001642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001646:	4a2d      	ldr	r2, [pc, #180]	; (80016fc <HAL_InitTick+0xcc>)
 8001648:	f043 0310 	orr.w	r3, r3, #16
 800164c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001650:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_InitTick+0xcc>)
 8001652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800165e:	f107 0210 	add.w	r2, r7, #16
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f004 fd89 	bl	8006180 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800166e:	f004 fd4b 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 8001672:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001676:	4a22      	ldr	r2, [pc, #136]	; (8001700 <HAL_InitTick+0xd0>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	0c9b      	lsrs	r3, r3, #18
 800167e:	3b01      	subs	r3, #1
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <HAL_InitTick+0xd4>)
 8001684:	4a20      	ldr	r2, [pc, #128]	; (8001708 <HAL_InitTick+0xd8>)
 8001686:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_InitTick+0xd4>)
 800168a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800168e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001690:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <HAL_InitTick+0xd4>)
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_InitTick+0xd4>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_InitTick+0xd4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80016a2:	4818      	ldr	r0, [pc, #96]	; (8001704 <HAL_InitTick+0xd4>)
 80016a4:	f008 fbf6 	bl	8009e94 <HAL_TIM_Base_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80016ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d118      	bne.n	80016e8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016b6:	4813      	ldr	r0, [pc, #76]	; (8001704 <HAL_InitTick+0xd4>)
 80016b8:	f008 fc4e 	bl	8009f58 <HAL_TIM_Base_Start_IT>
 80016bc:	4603      	mov	r3, r0
 80016be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80016c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10e      	bne.n	80016e8 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d808      	bhi.n	80016e2 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80016d0:	2200      	movs	r2, #0
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	2031      	movs	r0, #49	; 0x31
 80016d6:	f002 fc1f 	bl	8003f18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016da:	4a0c      	ldr	r2, [pc, #48]	; (800170c <HAL_InitTick+0xdc>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	e002      	b.n	80016e8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80016e8:	2031      	movs	r0, #49	; 0x31
 80016ea:	f002 fc2f 	bl	8003f4c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80016ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3738      	adds	r7, #56	; 0x38
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	46020c00 	.word	0x46020c00
 8001700:	431bde83 	.word	0x431bde83
 8001704:	200015f8 	.word	0x200015f8
 8001708:	40001000 	.word	0x40001000
 800170c:	20000004 	.word	0x20000004

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <NMI_Handler+0x4>

08001716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <MemManage_Handler+0x4>

08001722 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <UsageFault_Handler+0x4>

0800172e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <RTC_IRQHandler+0x10>)
 8001742:	f007 ff01 	bl	8009548 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200014a4 	.word	0x200014a4

08001750 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001754:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001758:	f002 fe04 	bl	8004364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001764:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001768:	f002 fdfc 	bl	8004364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <EXTI12_IRQHandler>:

/**
  * @brief This function handles EXTI Line12 interrupt.
  */
void EXTI12_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI12_IRQn 0 */

  /* USER CODE END EXTI12_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001774:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001778:	f002 fdf4 	bl	8004364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI12_IRQn 1 */

  /* USER CODE END EXTI12_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001784:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001788:	f002 fdec 	bl	8004364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <TIM6_IRQHandler+0x10>)
 8001796:	f008 fc7f 	bl	800a098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200015f8 	.word	0x200015f8

080017a4 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <LPTIM1_IRQHandler+0x10>)
 80017aa:	f002 ff71 	bl	8004690 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20001454 	.word	0x20001454

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	; (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f013 fa06 	bl	8014bf8 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200c0000 	.word	0x200c0000
 8001818:	00000400 	.word	0x00000400
 800181c:	20001644 	.word	0x20001644
 8001820:	20001e68 	.word	0x20001e68

08001824 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <SystemInit+0x68>)
 800182a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <SystemInit+0x68>)
 8001830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <SystemInit+0x6c>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <SystemInit+0x6c>)
 8001840:	2200      	movs	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <SystemInit+0x6c>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <SystemInit+0x6c>)
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <SystemInit+0x6c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <SystemInit+0x6c>)
 8001856:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800185a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800185e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <SystemInit+0x6c>)
 8001862:	2200      	movs	r2, #0
 8001864:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <SystemInit+0x6c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <SystemInit+0x6c>)
 800186c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <SystemInit+0x6c>)
 8001874:	2200      	movs	r2, #0
 8001876:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <SystemInit+0x68>)
 800187a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800187e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00
 8001890:	46020c00 	.word	0x46020c00

08001894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018cc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001898:	f7ff ffc4 	bl	8001824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800189c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800189e:	e003      	b.n	80018a8 <LoopCopyDataInit>

080018a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018a6:	3104      	adds	r1, #4

080018a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018a8:	480a      	ldr	r0, [pc, #40]	; (80018d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018b0:	d3f6      	bcc.n	80018a0 <CopyDataInit>
	ldr	r2, =_sbss
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80018b4:	e002      	b.n	80018bc <LoopFillZerobss>

080018b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018b8:	f842 3b04 	str.w	r3, [r2], #4

080018bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <LoopForever+0x16>)
	cmp	r2, r3
 80018be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018c0:	d3f9      	bcc.n	80018b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018c2:	f013 f99f 	bl	8014c04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018c6:	f7ff f937 	bl	8000b38 <main>

080018ca <LoopForever>:

LoopForever:
    b LoopForever
 80018ca:	e7fe      	b.n	80018ca <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80018cc:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80018d0:	08015bbc 	.word	0x08015bbc
	ldr	r0, =_sdata
 80018d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018d8:	200001b8 	.word	0x200001b8
	ldr	r2, =_sbss
 80018dc:	200001b8 	.word	0x200001b8
	ldr	r3, = _ebss
 80018e0:	20001e61 	.word	0x20001e61

080018e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC1_IRQHandler>
	...

080018e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_Init+0x4c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_Init+0x4c>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f002 fb02 	bl	8003f02 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80018fe:	f004 fae1 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8001902:	4602      	mov	r2, r0
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_Init+0x50>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	490b      	ldr	r1, [pc, #44]	; (800193c <HAL_Init+0x54>)
 800190e:	5ccb      	ldrb	r3, [r1, r3]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_Init+0x58>)
 8001916:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001918:	200f      	movs	r0, #15
 800191a:	f7ff fe89 	bl	8001630 <HAL_InitTick>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e002      	b.n	800192e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001928:	f7ff fcc8 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40022000 	.word	0x40022000
 8001938:	46020c00 	.word	0x46020c00
 800193c:	0801595c 	.word	0x0801595c
 8001940:	20000000 	.word	0x20000000

08001944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008
 8001968:	20001648 	.word	0x20001648

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20001648 	.word	0x20001648

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ffee 	bl	800196c <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d005      	beq.n	80019aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_Delay+0x44>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019aa:	bf00      	nop
 80019ac:	f7ff ffde 	bl	800196c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8f7      	bhi.n	80019ac <HAL_Delay+0x28>
  {
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000008 	.word	0x20000008

080019cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <HAL_GetREVID+0x18>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0c1b      	lsrs	r3, r3, #16
 80019d6:	b29b      	uxth	r3, r3
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e0044000 	.word	0xe0044000

080019e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	601a      	str	r2, [r3, #0]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	601a      	str	r2, [r3, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <LL_ADC_SetResolution+0x3c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d104      	bne.n	8001a70 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f023 020c 	bic.w	r2, r3, #12
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	60da      	str	r2, [r3, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	46021000 	.word	0x46021000

08001a90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3360      	adds	r3, #96	; 0x60
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001ac6:	bf00      	nop
 8001ac8:	371c      	adds	r7, #28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3360      	adds	r3, #96	; 0x60
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b087      	sub	sp, #28
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3360      	adds	r3, #96	; 0x60
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	601a      	str	r2, [r3, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3360      	adds	r3, #96	; 0x60
 8001b44:	461a      	mov	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	601a      	str	r2, [r3, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b087      	sub	sp, #28
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3360      	adds	r3, #96	; 0x60
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	601a      	str	r2, [r3, #0]
}
 8001b94:	bf00      	nop
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	2a00      	cmp	r2, #0
 8001bca:	d002      	beq.n	8001bd2 <LL_ADC_SetGainCompensation+0x32>
 8001bcc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bd0:	e000      	b.n	8001bd4 <LL_ADC_SetGainCompensation+0x34>
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2107      	movs	r1, #7
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	401a      	ands	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	431a      	orrs	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4a2b      	ldr	r2, [pc, #172]	; (8001d08 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d020      	beq.n	8001ca2 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3330      	adds	r3, #48	; 0x30
 8001c64:	461a      	mov	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	4413      	add	r3, r2
 8001c72:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	211f      	movs	r1, #31
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	0e9b      	lsrs	r3, r3, #26
 8001c8c:	f003 011f 	and.w	r1, r3, #31
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001ca0:	e02b      	b.n	8001cfa <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	210f      	movs	r1, #15
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d104      	bne.n	8001cca <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	0e9b      	lsrs	r3, r3, #26
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	e010      	b.n	8001cec <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	e003      	b.n	8001cec <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	f001 011f 	and.w	r1, r1, #31
 8001cf2:	408b      	lsls	r3, r1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cfa:	bf00      	nop
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	46021000 	.word	0x46021000

08001d0c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d107      	bne.n	8001d30 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	0e9b      	lsrs	r3, r3, #26
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	2201      	movs	r2, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	e015      	b.n	8001d5c <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	60fb      	str	r3, [r7, #12]
  return result;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001d46:	2320      	movs	r3, #32
 8001d48:	e003      	b.n	8001d52 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	2201      	movs	r2, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d66:	bf00      	nop
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	0e9b      	lsrs	r3, r3, #26
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	401a      	ands	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b08b      	sub	sp, #44	; 0x2c
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4a2d      	ldr	r2, [pc, #180]	; (8001e68 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d042      	beq.n	8001e3e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d104      	bne.n	8001dcc <LL_ADC_SetChannelSamplingTime+0x28>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	0e9b      	lsrs	r3, r3, #26
 8001dc6:	f003 021f 	and.w	r2, r3, #31
 8001dca:	e011      	b.n	8001df0 <LL_ADC_SetChannelSamplingTime+0x4c>
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	617b      	str	r3, [r7, #20]
  return result;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001de2:	2320      	movs	r3, #32
 8001de4:	e003      	b.n	8001dee <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fab3 f383 	clz	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	0e5b      	lsrs	r3, r3, #25
 8001df4:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001df8:	460b      	mov	r3, r1
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	1ad2      	subs	r2, r2, r3
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3314      	adds	r3, #20
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	0e5b      	lsrs	r3, r3, #25
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	4413      	add	r3, r2
 8001e1c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	2107      	movs	r1, #7
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	431a      	orrs	r2, r3
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001e3c:	e00e      	b.n	8001e5c <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	021b      	lsls	r3, r3, #8
 8001e46:	43db      	mvns	r3, r3
 8001e48:	401a      	ands	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	0219      	lsls	r1, r3, #8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	400b      	ands	r3, r1
 8001e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e56:	431a      	orrs	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	615a      	str	r2, [r3, #20]
}
 8001e5c:	bf00      	nop
 8001e5e:	372c      	adds	r7, #44	; 0x2c
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	46021000 	.word	0x46021000

08001e6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0318 	and.w	r3, r3, #24
 8001e8e:	4908      	ldr	r1, [pc, #32]	; (8001eb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e90:	40d9      	lsrs	r1, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	400b      	ands	r3, r1
 8001e96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	000fffff 	.word	0x000fffff

08001eb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ec4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6093      	str	r3, [r2, #8]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eec:	d101      	bne.n	8001ef2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f3c:	d101      	bne.n	8001f42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f64:	f043 0201 	orr.w	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f8c:	f043 0202 	orr.w	r2, r3, #2
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	609a      	str	r2, [r3, #8]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <LL_ADC_IsEnabled+0x18>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <LL_ADC_IsEnabled+0x1a>
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d101      	bne.n	8001fde <LL_ADC_IsDisableOngoing+0x18>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <LL_ADC_IsDisableOngoing+0x1a>
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ffc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002000:	f043 0204 	orr.w	r2, r3, #4
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	609a      	str	r2, [r3, #8]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002024:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002028:	f043 0210 	orr.w	r2, r3, #16
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b04      	cmp	r3, #4
 800204e:	d101      	bne.n	8002054 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002072:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002076:	f043 0220 	orr.w	r2, r3, #32
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	609a      	str	r2, [r3, #8]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b08      	cmp	r3, #8
 800209c:	d101      	bne.n	80020a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e2b3      	b.n	8002638 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a8b      	ldr	r2, [pc, #556]	; (800230c <HAL_ADC_Init+0x25c>)
 80020de:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d109      	bne.n	80020fc <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff f903 	bl	80012f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fee9 	bl	8001ed8 <LL_ADC_IsDeepPowerDownEnabled>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fecf 	bl	8001eb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ff04 	bl	8001f28 <LL_ADC_IsInternalRegulatorEnabled>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d115      	bne.n	8002152 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fee8 	bl	8001f00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002130:	4b77      	ldr	r3, [pc, #476]	; (8002310 <HAL_ADC_Init+0x260>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	4a77      	ldr	r2, [pc, #476]	; (8002314 <HAL_ADC_Init+0x264>)
 8002138:	fba2 2303 	umull	r2, r3, r2, r3
 800213c:	099b      	lsrs	r3, r3, #6
 800213e:	3301      	adds	r3, #1
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002144:	e002      	b.n	800214c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3b01      	subs	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f9      	bne.n	8002146 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fee6 	bl	8001f28 <LL_ADC_IsInternalRegulatorEnabled>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10e      	bne.n	8002180 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002166:	f043 0210 	orr.w	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff59 	bl	800203c <LL_ADC_REG_IsConversionOngoing>
 800218a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	f040 8244 	bne.w	8002622 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f040 8240 	bne.w	8002622 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021a6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021aa:	f043 0202 	orr.w	r2, r3, #2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fef2 	bl	8001fa0 <LL_ADC_IsEnabled>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d140      	bne.n	8002244 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a51      	ldr	r2, [pc, #324]	; (800230c <HAL_ADC_Init+0x25c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d028      	beq.n	800221e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a51      	ldr	r2, [pc, #324]	; (8002318 <HAL_ADC_Init+0x268>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d109      	bne.n	80021ea <HAL_ADC_Init+0x13a>
 80021d6:	4850      	ldr	r0, [pc, #320]	; (8002318 <HAL_ADC_Init+0x268>)
 80021d8:	f7ff fee2 	bl	8001fa0 <LL_ADC_IsEnabled>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf0c      	ite	eq
 80021e2:	2301      	moveq	r3, #1
 80021e4:	2300      	movne	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	e008      	b.n	80021fc <HAL_ADC_Init+0x14c>
 80021ea:	4848      	ldr	r0, [pc, #288]	; (800230c <HAL_ADC_Init+0x25c>)
 80021ec:	f7ff fed8 	bl	8001fa0 <LL_ADC_IsEnabled>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bf0c      	ite	eq
 80021f6:	2301      	moveq	r3, #1
 80021f8:	2300      	movne	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d021      	beq.n	8002244 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a44      	ldr	r2, [pc, #272]	; (8002318 <HAL_ADC_Init+0x268>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <HAL_ADC_Init+0x15e>
 800220a:	4a44      	ldr	r2, [pc, #272]	; (800231c <HAL_ADC_Init+0x26c>)
 800220c:	e000      	b.n	8002210 <HAL_ADC_Init+0x160>
 800220e:	4a44      	ldr	r2, [pc, #272]	; (8002320 <HAL_ADC_Init+0x270>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f7ff fbe6 	bl	80019e8 <LL_ADC_SetCommonClock>
 800221c:	e012      	b.n	8002244 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f7ff fc11 	bl	8001a50 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800222e:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <HAL_ADC_Init+0x270>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800223e:	4938      	ldr	r1, [pc, #224]	; (8002320 <HAL_ADC_Init+0x270>)
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a30      	ldr	r2, [pc, #192]	; (800230c <HAL_ADC_Init+0x25c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d010      	beq.n	8002270 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002254:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800225a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002260:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002268:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800226a:	4313      	orrs	r3, r2
 800226c:	623b      	str	r3, [r7, #32]
 800226e:	e030      	b.n	80022d2 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7f1b      	ldrb	r3, [r3, #28]
 8002274:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800227c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800227e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002284:	2a00      	cmp	r2, #0
 8002286:	d002      	beq.n	800228e <HAL_ADC_Init+0x1de>
 8002288:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800228c:	e000      	b.n	8002290 <HAL_ADC_Init+0x1e0>
 800228e:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002290:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002296:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	da04      	bge.n	80022aa <HAL_ADC_Init+0x1fa>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022a8:	e001      	b.n	80022ae <HAL_ADC_Init+0x1fe>
 80022aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 80022ae:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4918      	ldr	r1, [pc, #96]	; (8002318 <HAL_ADC_Init+0x268>)
 80022b6:	428b      	cmp	r3, r1
 80022b8:	d103      	bne.n	80022c2 <HAL_ADC_Init+0x212>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c0:	e003      	b.n	80022ca <HAL_ADC_Init+0x21a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80022ca:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022cc:	6a3a      	ldr	r2, [r7, #32]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d12f      	bne.n	800233c <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_ADC_Init+0x25c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	3b01      	subs	r3, #1
 80022ec:	045b      	lsls	r3, r3, #17
 80022ee:	6a3a      	ldr	r2, [r7, #32]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	e022      	b.n	800233c <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d111      	bne.n	8002324 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002306:	623b      	str	r3, [r7, #32]
 8002308:	e018      	b.n	800233c <HAL_ADC_Init+0x28c>
 800230a:	bf00      	nop
 800230c:	46021000 	.word	0x46021000
 8002310:	20000000 	.word	0x20000000
 8002314:	053e2d63 	.word	0x053e2d63
 8002318:	42028000 	.word	0x42028000
 800231c:	42028308 	.word	0x42028308
 8002320:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002328:	f043 0220 	orr.w	r2, r3, #32
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002334:	f043 0201 	orr.w	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a92      	ldr	r2, [pc, #584]	; (800258c <HAL_ADC_Init+0x4dc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d018      	beq.n	8002378 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002352:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235a:	4313      	orrs	r3, r2
 800235c:	6a3a      	ldr	r2, [r7, #32]
 800235e:	4313      	orrs	r3, r2
 8002360:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	4b89      	ldr	r3, [pc, #548]	; (8002590 <HAL_ADC_Init+0x4e0>)
 800236a:	4013      	ands	r3, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	6a39      	ldr	r1, [r7, #32]
 8002372:	430b      	orrs	r3, r1
 8002374:	60d3      	str	r3, [r2, #12]
 8002376:	e031      	b.n	80023dc <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237c:	2b00      	cmp	r3, #0
 800237e:	d009      	beq.n	8002394 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002384:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238c:	4313      	orrs	r3, r2
 800238e:	6a3a      	ldr	r2, [r7, #32]
 8002390:	4313      	orrs	r3, r2
 8002392:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	4b7e      	ldr	r3, [pc, #504]	; (8002594 <HAL_ADC_Init+0x4e4>)
 800239c:	4013      	ands	r3, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	6a39      	ldr	r1, [r7, #32]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1a      	ldr	r2, [r3, #32]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a6a      	ldr	r2, [pc, #424]	; (800258c <HAL_ADC_Init+0x4dc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	f000 8093 	beq.w	800250e <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fe25 	bl	800203c <LL_ADC_REG_IsConversionOngoing>
 80023f2:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fe46 	bl	800208a <LL_ADC_INJ_IsConversionOngoing>
 80023fe:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d161      	bne.n	80024ca <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d15e      	bne.n	80024ca <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7f1b      	ldrb	r3, [r3, #28]
 8002410:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4960      	ldr	r1, [pc, #384]	; (8002598 <HAL_ADC_Init+0x4e8>)
 8002418:	428b      	cmp	r3, r1
 800241a:	d102      	bne.n	8002422 <HAL_ADC_Init+0x372>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	e002      	b.n	8002428 <HAL_ADC_Init+0x378>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002426:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002428:	4313      	orrs	r3, r2
 800242a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002436:	f023 0303 	bic.w	r3, r3, #3
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	6a39      	ldr	r1, [r7, #32]
 8002440:	430b      	orrs	r3, r1
 8002442:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d007      	beq.n	800245c <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f7ff fba2 	bl	8001ba0 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002462:	2b01      	cmp	r3, #1
 8002464:	d11e      	bne.n	80024a4 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	4b4a      	ldr	r3, [pc, #296]	; (800259c <HAL_ADC_Init+0x4ec>)
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800247a:	0411      	lsls	r1, r2, #16
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002480:	4311      	orrs	r1, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002486:	4311      	orrs	r1, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800248c:	4311      	orrs	r1, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002492:	0892      	lsrs	r2, r2, #2
 8002494:	430a      	orrs	r2, r1
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	611a      	str	r2, [r3, #16]
 80024a2:	e007      	b.n	80024b4 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d10c      	bne.n	80024ec <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f023 010f 	bic.w	r1, r3, #15
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	1e5a      	subs	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30
 80024ea:	e007      	b.n	80024fc <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 020f 	bic.w	r2, r2, #15
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002500:	f023 0303 	bic.w	r3, r3, #3
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800250c:	e092      	b.n	8002634 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002514:	2b01      	cmp	r3, #1
 8002516:	d111      	bne.n	800253c <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002520:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002526:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800252c:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	4313      	orrs	r3, r2
 8002532:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <HAL_ADC_Init+0x4f0>)
 8002544:	4013      	ands	r3, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	69f9      	ldr	r1, [r7, #28]
 800254c:	430b      	orrs	r3, r1
 800254e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002558:	461a      	mov	r2, r3
 800255a:	2100      	movs	r1, #0
 800255c:	f7ff fb43 	bl	8001be6 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002568:	461a      	mov	r2, r3
 800256a:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 800256e:	f7ff fb3a 	bl	8001be6 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d114      	bne.n	80025a4 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f062 020f 	orn	r2, r2, #15
 8002588:	629a      	str	r2, [r3, #40]	; 0x28
 800258a:	e024      	b.n	80025d6 <HAL_ADC_Init+0x526>
 800258c:	46021000 	.word	0x46021000
 8002590:	fff0c013 	.word	0xfff0c013
 8002594:	ffde800d 	.word	0xffde800d
 8002598:	42028000 	.word	0x42028000
 800259c:	fc00f81e 	.word	0xfc00f81e
 80025a0:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025ac:	d113      	bne.n	80025d6 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	3b01      	subs	r3, #1
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	f003 031c 	and.w	r3, r3, #28
 80025c0:	f06f 020f 	mvn.w	r2, #15
 80025c4:	fa02 f103 	lsl.w	r1, r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	4b18      	ldr	r3, [pc, #96]	; (8002640 <HAL_ADC_Init+0x590>)
 80025de:	4013      	ands	r3, r2
 80025e0:	6a3a      	ldr	r2, [r7, #32]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d10b      	bne.n	80025fe <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025f0:	f023 0303 	bic.w	r3, r3, #3
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80025fc:	e01a      	b.n	8002634 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002602:	f023 0312 	bic.w	r3, r3, #18
 8002606:	f043 0210 	orr.w	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002612:	f043 0201 	orr.w	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002620:	e008      	b.n	8002634 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002626:	f043 0210 	orr.w	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002638:	4618      	mov	r0, r3
 800263a:	3728      	adds	r7, #40	; 0x28
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	833ffff3 	.word	0x833ffff3

08002644 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fcf3 	bl	800203c <LL_ADC_REG_IsConversionOngoing>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d15d      	bne.n	8002718 <HAL_ADC_Start+0xd4>
  {
    __HAL_LOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_ADC_Start+0x26>
 8002666:	2302      	movs	r3, #2
 8002668:	e059      	b.n	800271e <HAL_ADC_Start+0xda>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f001 f916 	bl	80038a4 <ADC_Enable>
 8002678:	4603      	mov	r3, r0
 800267a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d145      	bne.n	800270e <HAL_ADC_Start+0xca>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002686:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a23      	ldr	r2, [pc, #140]	; (8002728 <HAL_ADC_Start+0xe4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d011      	beq.n	80026c4 <HAL_ADC_Start+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ac:	d106      	bne.n	80026bc <HAL_ADC_Start+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b2:	f023 0206 	bic.w	r2, r3, #6
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	67da      	str	r2, [r3, #124]	; 0x7c
 80026ba:	e006      	b.n	80026ca <HAL_ADC_Start+0x86>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	67da      	str	r2, [r3, #124]	; 0x7c
 80026c2:	e002      	b.n	80026ca <HAL_ADC_Start+0x86>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	221c      	movs	r2, #28
 80026d0:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <HAL_ADC_Start+0xe4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d00e      	beq.n	8002702 <HAL_ADC_Start+0xbe>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }

        }
#else
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_ADC_Start+0xbe>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fc70 	bl	8001fec <LL_ADC_REG_StartConversion>
 800270c:	e006      	b.n	800271c <HAL_ADC_Start+0xd8>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002716:	e001      	b.n	800271c <HAL_ADC_Start+0xd8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002718:	2302      	movs	r3, #2
 800271a:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	46021000 	.word	0x46021000

0800272c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_ADC_Stop+0x16>
 800273e:	2302      	movs	r3, #2
 8002740:	e023      	b.n	800278a <HAL_ADC_Stop+0x5e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800274a:	2103      	movs	r1, #3
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 ffed 	bl	800372c <ADC_ConversionStop>
 8002752:	4603      	mov	r3, r0
 8002754:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d111      	bne.n	8002780 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f001 f911 	bl	8003984 <ADC_Disable>
 8002762:	4603      	mov	r3, r0
 8002764:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002770:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d102      	bne.n	80027ac <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80027a6:	2308      	movs	r3, #8
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e027      	b.n	80027fc <HAL_ADC_PollForConversion+0x68>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a6a      	ldr	r2, [pc, #424]	; (800295c <HAL_ADC_PollForConversion+0x1c8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d011      	beq.n	80027da <HAL_ADC_PollForConversion+0x46>
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <HAL_ADC_PollForConversion+0x40>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027c8:	f043 0220 	orr.w	r2, r3, #32
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0be      	b.n	8002952 <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 80027d4:	2304      	movs	r3, #4
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e010      	b.n	80027fc <HAL_ADC_PollForConversion+0x68>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_ADC_PollForConversion+0x64>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0ac      	b.n	8002952 <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 80027f8:	2304      	movs	r3, #4
 80027fa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027fc:	f7ff f8b6 	bl	800196c <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002802:	e021      	b.n	8002848 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280a:	d01d      	beq.n	8002848 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800280c:	f7ff f8ae 	bl	800196c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d302      	bcc.n	8002822 <HAL_ADC_PollForConversion+0x8e>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d112      	bne.n	8002848 <HAL_ADC_PollForConversion+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10b      	bne.n	8002848 <HAL_ADC_PollForConversion+0xb4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002834:	f043 0204 	orr.w	r2, r3, #4
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e084      	b.n	8002952 <HAL_ADC_PollForConversion+0x1be>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0d6      	beq.n	8002804 <HAL_ADC_PollForConversion+0x70>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800285a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff f9dc 	bl	8001c24 <LL_ADC_REG_IsTriggerSourceSWStart>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d06e      	beq.n	8002950 <HAL_ADC_PollForConversion+0x1bc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002878:	2b00      	cmp	r3, #0
 800287a:	d169      	bne.n	8002950 <HAL_ADC_PollForConversion+0x1bc>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a36      	ldr	r2, [pc, #216]	; (800295c <HAL_ADC_PollForConversion+0x1c8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d02e      	beq.n	80028e4 <HAL_ADC_PollForConversion+0x150>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b08      	cmp	r3, #8
 8002892:	d111      	bne.n	80028b8 <HAL_ADC_PollForConversion+0x124>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002898:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <HAL_ADC_PollForConversion+0x124>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	679a      	str	r2, [r3, #120]	; 0x78
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d104      	bne.n	80028d0 <HAL_ADC_PollForConversion+0x13c>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2208      	movs	r2, #8
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e03f      	b.n	8002950 <HAL_ADC_PollForConversion+0x1bc>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d13a      	bne.n	8002950 <HAL_ADC_PollForConversion+0x1bc>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	220c      	movs	r2, #12
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e035      	b.n	8002950 <HAL_ADC_PollForConversion+0x1bc>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d126      	bne.n	8002940 <HAL_ADC_PollForConversion+0x1ac>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fba0 	bl	800203c <LL_ADC_REG_IsConversionOngoing>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d112      	bne.n	8002928 <HAL_ADC_PollForConversion+0x194>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 020c 	bic.w	r2, r2, #12
 8002910:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	679a      	str	r2, [r3, #120]	; 0x78
 8002926:	e00b      	b.n	8002940 <HAL_ADC_PollForConversion+0x1ac>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7f1b      	ldrb	r3, [r3, #28]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <HAL_ADC_PollForConversion+0x1bc>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	220c      	movs	r2, #12
 800294e:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	46021000 	.word	0x46021000

08002960 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b0bc      	sub	sp, #240	; 0xf0
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4aa8      	ldr	r2, [pc, #672]	; (8002c38 <HAL_ADC_ConfigChannel+0x2bc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d103      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d102      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x36>
 80029ac:	2302      	movs	r3, #2
 80029ae:	f000 beb5 	b.w	800371c <HAL_ADC_ConfigChannel+0xda0>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fb3c 	bl	800203c <LL_ADC_REG_IsConversionOngoing>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 8695 	bne.w	80036f6 <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a99      	ldr	r2, [pc, #612]	; (8002c38 <HAL_ADC_ConfigChannel+0x2bc>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	f000 83ea 	beq.w	80031ac <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d108      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x7a>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0e9b      	lsrs	r3, r3, #26
 80029ea:	f003 031f 	and.w	r3, r3, #31
 80029ee:	2201      	movs	r2, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	e01d      	b.n	8002a32 <HAL_ADC_ConfigChannel+0xb6>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return result;
 8002a0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (value == 0U)
 8002a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	e004      	b.n	8002a28 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	69d1      	ldr	r1, [r2, #28]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f7ff f8fd 	bl	8001c4c <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff faf0 	bl	800203c <LL_ADC_REG_IsConversionOngoing>
 8002a5c:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fb10 	bl	800208a <LL_ADC_INJ_IsConversionOngoing>
 8002a6a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 81ed 	bne.w	8002e52 <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f040 81e8 	bne.w	8002e52 <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6819      	ldr	r1, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f7ff f988 	bl	8001da4 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d046      	beq.n	8002b44 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6919      	ldr	r1, [r3, #16]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ac6:	f7fe ffe3 	bl	8001a90 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6919      	ldr	r1, [r3, #16]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f7ff f811 	bl	8001afe <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	7e9b      	ldrb	r3, [r3, #26]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d11e      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x17e>
 8002af4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af8:	e000      	b.n	8002afc <HAL_ADC_ConfigChannel+0x180>
 8002afa:	2300      	movs	r3, #0
 8002afc:	461a      	mov	r2, r3
 8002afe:	f7ff f834 	bl	8001b6a <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d102      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x19c>
 8002b12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b16:	e000      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x19e>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f7ff f80a 	bl	8001b34 <LL_ADC_SetOffsetSignedSaturation>
 8002b20:	e197      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7ff f81c 	bl	8001b6a <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f7fe fff9 	bl	8001b34 <LL_ADC_SetOffsetSignedSaturation>
 8002b42:	e186      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe ffc1 	bl	8001ad2 <LL_ADC_GetOffsetChannel>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x1f4>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe ffb6 	bl	8001ad2 <LL_ADC_GetOffsetChannel>
 8002b66:	4603      	mov	r3, r0
 8002b68:	0e9b      	lsrs	r3, r3, #26
 8002b6a:	f003 021f 	and.w	r2, r3, #31
 8002b6e:	e01e      	b.n	8002bae <HAL_ADC_ConfigChannel+0x232>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe ffab 	bl	8001ad2 <LL_ADC_GetOffsetChannel>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return result;
 8002b8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (value == 0U)
 8002b96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	e004      	b.n	8002bac <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002ba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x24a>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	0e9b      	lsrs	r3, r3, #26
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	e018      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x27c>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002bda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002be2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002bea:	2320      	movs	r3, #32
 8002bec:	e004      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002bee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d107      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	2300      	movs	r3, #0
 8002c06:	2100      	movs	r1, #0
 8002c08:	f7fe ff42 	bl	8001a90 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2101      	movs	r1, #1
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe ff5d 	bl	8001ad2 <LL_ADC_GetOffsetChannel>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10c      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x2c0>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe ff52 	bl	8001ad2 <LL_ADC_GetOffsetChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	0e9b      	lsrs	r3, r3, #26
 8002c32:	f003 021f 	and.w	r2, r3, #31
 8002c36:	e020      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x2fe>
 8002c38:	46021000 	.word	0x46021000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2101      	movs	r1, #1
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe ff45 	bl	8001ad2 <LL_ADC_GetOffsetChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002c5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002c62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	e004      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002c6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d105      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x316>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	0e9b      	lsrs	r3, r3, #26
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	e018      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x348>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002ca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002cae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	e004      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002cba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d107      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	f7fe fedc 	bl	8001a90 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2102      	movs	r1, #2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fef7 	bl	8001ad2 <LL_ADC_GetOffsetChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x388>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe feec 	bl	8001ad2 <LL_ADC_GetOffsetChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	0e9b      	lsrs	r3, r3, #26
 8002cfe:	f003 021f 	and.w	r2, r3, #31
 8002d02:	e01e      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x3c6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2102      	movs	r1, #2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fee1 	bl	8001ad2 <LL_ADC_GetOffsetChannel>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002d22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002d2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002d32:	2320      	movs	r3, #32
 8002d34:	e004      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002d36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d105      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x3de>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	0e9b      	lsrs	r3, r3, #26
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	e018      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x410>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002d7e:	2320      	movs	r3, #32
 8002d80:	e004      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8002d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d107      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	f7fe fe78 	bl	8001a90 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2103      	movs	r1, #3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe fe93 	bl	8001ad2 <LL_ADC_GetOffsetChannel>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x450>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2103      	movs	r1, #3
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe fe88 	bl	8001ad2 <LL_ADC_GetOffsetChannel>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	0e9b      	lsrs	r3, r3, #26
 8002dc6:	f003 021f 	and.w	r2, r3, #31
 8002dca:	e01a      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x486>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fe7d 	bl	8001ad2 <LL_ADC_GetOffsetChannel>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002dea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8002df2:	2320      	movs	r3, #32
 8002df4:	e004      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8002df6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d105      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x49e>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	0e9b      	lsrs	r3, r3, #26
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	e011      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x4c2>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 8002e32:	2320      	movs	r3, #32
 8002e34:	e003      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8002e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d107      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2103      	movs	r1, #3
 8002e4e:	f7fe fe1f 	bl	8001a90 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f8a2 	bl	8001fa0 <LL_ADC_IsEnabled>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f040 8456 	bne.w	8003710 <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	6819      	ldr	r1, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	461a      	mov	r2, r3
 8002e72:	f7fe fffb 	bl	8001e6c <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e7e:	f040 80d6 	bne.w	800302e <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x52a>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	0e9b      	lsrs	r3, r3, #26
 8002e94:	3301      	adds	r3, #1
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2b09      	cmp	r3, #9
 8002e9c:	bf94      	ite	ls
 8002e9e:	2301      	movls	r3, #1
 8002ea0:	2300      	movhi	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	e019      	b.n	8002eda <HAL_ADC_ConfigChannel+0x55e>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eb6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	e003      	b.n	8002eca <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8002ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	2b09      	cmp	r3, #9
 8002ed2:	bf94      	ite	ls
 8002ed4:	2301      	movls	r3, #1
 8002ed6:	2300      	movhi	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d04d      	beq.n	8002f7a <HAL_ADC_ConfigChannel+0x5fe>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x57e>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	0e9b      	lsrs	r3, r3, #26
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	069b      	lsls	r3, r3, #26
 8002ef4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ef8:	e015      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x5aa>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 8002f12:	2320      	movs	r3, #32
 8002f14:	e003      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 8002f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	069b      	lsls	r3, r3, #26
 8002f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x5ca>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	0e9b      	lsrs	r3, r3, #26
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2101      	movs	r1, #1
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	e017      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x5fa>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f56:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8002f5e:	2320      	movs	r3, #32
 8002f60:	e003      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 8002f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	4313      	orrs	r3, r2
 8002f78:	e04e      	b.n	8003018 <HAL_ADC_ConfigChannel+0x69c>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x61a>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0e9b      	lsrs	r3, r3, #26
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	069b      	lsls	r3, r3, #26
 8002f90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f94:	e015      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x646>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 8002fae:	2320      	movs	r3, #32
 8002fb0:	e003      	b.n	8002fba <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 8002fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	069b      	lsls	r3, r3, #26
 8002fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x666>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	0e9b      	lsrs	r3, r3, #26
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	2101      	movs	r1, #1
 8002fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe0:	e017      	b.n	8003012 <HAL_ADC_ConfigChannel+0x696>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	e003      	b.n	8003006 <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f303 	lsl.w	r3, r1, r3
 8003012:	4313      	orrs	r3, r2
 8003014:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003018:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	461a      	mov	r2, r3
 8003026:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800302a:	f7fe febb 	bl	8001da4 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	f280 836c 	bge.w	8003710 <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a97      	ldr	r2, [pc, #604]	; (800329c <HAL_ADC_ConfigChannel+0x920>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x6ca>
 8003042:	4b97      	ldr	r3, [pc, #604]	; (80032a0 <HAL_ADC_ConfigChannel+0x924>)
 8003044:	e000      	b.n	8003048 <HAL_ADC_ConfigChannel+0x6cc>
 8003046:	4b97      	ldr	r3, [pc, #604]	; (80032a4 <HAL_ADC_ConfigChannel+0x928>)
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fcf3 	bl	8001a34 <LL_ADC_GetCommonPathInternalCh>
 800304e:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a91      	ldr	r2, [pc, #580]	; (800329c <HAL_ADC_ConfigChannel+0x920>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d109      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x6f4>
 800305c:	488f      	ldr	r0, [pc, #572]	; (800329c <HAL_ADC_ConfigChannel+0x920>)
 800305e:	f7fe ff9f 	bl	8001fa0 <LL_ADC_IsEnabled>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e008      	b.n	8003082 <HAL_ADC_ConfigChannel+0x706>
 8003070:	488d      	ldr	r0, [pc, #564]	; (80032a8 <HAL_ADC_ConfigChannel+0x92c>)
 8003072:	f7fe ff95 	bl	8001fa0 <LL_ADC_IsEnabled>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8088 	beq.w	8003198 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a87      	ldr	r2, [pc, #540]	; (80032ac <HAL_ADC_ConfigChannel+0x930>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d132      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d12c      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7e      	ldr	r2, [pc, #504]	; (800329c <HAL_ADC_ConfigChannel+0x920>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d005      	beq.n	80030b4 <HAL_ADC_ConfigChannel+0x738>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a7e      	ldr	r2, [pc, #504]	; (80032a8 <HAL_ADC_ConfigChannel+0x92c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	f040 832b 	bne.w	800370a <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a78      	ldr	r2, [pc, #480]	; (800329c <HAL_ADC_ConfigChannel+0x920>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x746>
 80030be:	4a78      	ldr	r2, [pc, #480]	; (80032a0 <HAL_ADC_ConfigChannel+0x924>)
 80030c0:	e000      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x748>
 80030c2:	4a78      	ldr	r2, [pc, #480]	; (80032a4 <HAL_ADC_ConfigChannel+0x928>)
 80030c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f7fe fc9d 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030d4:	4b76      	ldr	r3, [pc, #472]	; (80032b0 <HAL_ADC_ConfigChannel+0x934>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	099b      	lsrs	r3, r3, #6
 80030da:	4a76      	ldr	r2, [pc, #472]	; (80032b4 <HAL_ADC_ConfigChannel+0x938>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	3301      	adds	r3, #1
 80030e4:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80030e6:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80030e8:	e002      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f9      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030f6:	e308      	b.n	800370a <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a6e      	ldr	r2, [pc, #440]	; (80032b8 <HAL_ADC_ConfigChannel+0x93c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d121      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11b      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a62      	ldr	r2, [pc, #392]	; (800329c <HAL_ADC_ConfigChannel+0x920>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d005      	beq.n	8003124 <HAL_ADC_ConfigChannel+0x7a8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a62      	ldr	r2, [pc, #392]	; (80032a8 <HAL_ADC_ConfigChannel+0x92c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	f040 82f5 	bne.w	800370e <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a5c      	ldr	r2, [pc, #368]	; (800329c <HAL_ADC_ConfigChannel+0x920>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x7b6>
 800312e:	4a5c      	ldr	r2, [pc, #368]	; (80032a0 <HAL_ADC_ConfigChannel+0x924>)
 8003130:	e000      	b.n	8003134 <HAL_ADC_ConfigChannel+0x7b8>
 8003132:	4a5c      	ldr	r2, [pc, #368]	; (80032a4 <HAL_ADC_ConfigChannel+0x928>)
 8003134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f7fe fc65 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003144:	e2e3      	b.n	800370e <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a5c      	ldr	r2, [pc, #368]	; (80032bc <HAL_ADC_ConfigChannel+0x940>)
 800314c:	4293      	cmp	r3, r2
 800314e:	f040 82df 	bne.w	8003710 <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 82d8 	bne.w	8003710 <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a4d      	ldr	r2, [pc, #308]	; (800329c <HAL_ADC_ConfigChannel+0x920>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d005      	beq.n	8003176 <HAL_ADC_ConfigChannel+0x7fa>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a4e      	ldr	r2, [pc, #312]	; (80032a8 <HAL_ADC_ConfigChannel+0x92c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	f040 82cd 	bne.w	8003710 <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a48      	ldr	r2, [pc, #288]	; (800329c <HAL_ADC_ConfigChannel+0x920>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x808>
 8003180:	4a47      	ldr	r2, [pc, #284]	; (80032a0 <HAL_ADC_ConfigChannel+0x924>)
 8003182:	e000      	b.n	8003186 <HAL_ADC_ConfigChannel+0x80a>
 8003184:	4a47      	ldr	r2, [pc, #284]	; (80032a4 <HAL_ADC_ConfigChannel+0x928>)
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f7fe fc3c 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
 8003196:	e2bb      	b.n	8003710 <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80031aa:	e2b1      	b.n	8003710 <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 80031b4:	f7fe fc0a 	bl	80019cc <HAL_GetREVID>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031be:	d130      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a3e      	ldr	r2, [pc, #248]	; (80032c0 <HAL_ADC_ConfigChannel+0x944>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d103      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 80031ca:	4b3e      	ldr	r3, [pc, #248]	; (80032c4 <HAL_ADC_ConfigChannel+0x948>)
 80031cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031d0:	e027      	b.n	8003222 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a3c      	ldr	r2, [pc, #240]	; (80032c8 <HAL_ADC_ConfigChannel+0x94c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d103      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 80031dc:	4b3b      	ldr	r3, [pc, #236]	; (80032cc <HAL_ADC_ConfigChannel+0x950>)
 80031de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031e2:	e01e      	b.n	8003222 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a39      	ldr	r2, [pc, #228]	; (80032d0 <HAL_ADC_ConfigChannel+0x954>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d103      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 80031ee:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <HAL_ADC_ConfigChannel+0x958>)
 80031f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031f4:	e015      	b.n	8003222 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a37      	ldr	r2, [pc, #220]	; (80032d8 <HAL_ADC_ConfigChannel+0x95c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d103      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003200:	4b36      	ldr	r3, [pc, #216]	; (80032dc <HAL_ADC_ConfigChannel+0x960>)
 8003202:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003206:	e00c      	b.n	8003222 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a34      	ldr	r2, [pc, #208]	; (80032e0 <HAL_ADC_ConfigChannel+0x964>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d103      	bne.n	800321a <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003212:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <HAL_ADC_ConfigChannel+0x95c>)
 8003214:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003218:	e003      	b.n	8003222 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b02      	cmp	r3, #2
 8003228:	f000 81a2 	beq.w	8003570 <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003234:	d004      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800323a:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <HAL_ADC_ConfigChannel+0x968>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d107      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe fd5f 	bl	8001d0c <LL_ADC_REG_SetSequencerChAdd>
 800324e:	e0c1      	b.n	80033d4 <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	210f      	movs	r1, #15
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	401a      	ands	r2, r3
 8003268:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800326c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x904>
 8003274:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003278:	0e9b      	lsrs	r3, r3, #26
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	e037      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x974>
 8003280:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d127      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 8003298:	2320      	movs	r3, #32
 800329a:	e029      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x974>
 800329c:	42028000 	.word	0x42028000
 80032a0:	42028308 	.word	0x42028308
 80032a4:	46021308 	.word	0x46021308
 80032a8:	46021000 	.word	0x46021000
 80032ac:	ce080000 	.word	0xce080000
 80032b0:	20000000 	.word	0x20000000
 80032b4:	053e2d63 	.word	0x053e2d63
 80032b8:	ca040000 	.word	0xca040000
 80032bc:	80000001 	.word	0x80000001
 80032c0:	b6002000 	.word	0xb6002000
 80032c4:	da400000 	.word	0xda400000
 80032c8:	ba004000 	.word	0xba004000
 80032cc:	de800000 	.word	0xde800000
 80032d0:	b2001000 	.word	0xb2001000
 80032d4:	81000001 	.word	0x81000001
 80032d8:	d6200000 	.word	0xd6200000
 80032dc:	d2100000 	.word	0xd2100000
 80032e0:	d7200000 	.word	0xd7200000
 80032e4:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	6839      	ldr	r1, [r7, #0]
 80032f2:	6849      	ldr	r1, [r1, #4]
 80032f4:	f001 011f 	and.w	r1, r1, #31
 80032f8:	408b      	lsls	r3, r1
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	429a      	cmp	r2, r3
 8003310:	d860      	bhi.n	80033d4 <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003312:	f7fe fb5b 	bl	80019cc <HAL_GetREVID>
 8003316:	4603      	mov	r3, r0
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331c:	d851      	bhi.n	80033c2 <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 800331e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003322:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x9c4>
 800332a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800332e:	0e9b      	lsrs	r3, r3, #26
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2b13      	cmp	r3, #19
 8003336:	bf8c      	ite	hi
 8003338:	2301      	movhi	r3, #1
 800333a:	2300      	movls	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e016      	b.n	800336e <HAL_ADC_ConfigChannel+0x9f2>
 8003340:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003344:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	61bb      	str	r3, [r7, #24]
  return result;
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 8003358:	2320      	movs	r3, #32
 800335a:	e003      	b.n	8003364 <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b13      	cmp	r3, #19
 8003366:	bf8c      	ite	hi
 8003368:	2301      	movhi	r3, #1
 800336a:	2300      	movls	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d027      	beq.n	80033c2 <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 8003372:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003376:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_ADC_ConfigChannel+0xa16>
 800337e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003382:	0e9b      	lsrs	r3, r3, #26
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	3b09      	subs	r3, #9
 800338a:	2201      	movs	r2, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	e015      	b.n	80033be <HAL_ADC_ConfigChannel+0xa42>
 8003392:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	60fb      	str	r3, [r7, #12]
  return result;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 80033aa:	2320      	movs	r3, #32
 80033ac:	e003      	b.n	80033b6 <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	3b09      	subs	r3, #9
 80033b8:	2201      	movs	r2, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80033ce:	4619      	mov	r1, r3
 80033d0:	f7fe fc3c 	bl	8001c4c <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	461a      	mov	r2, r3
 80033de:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80033e2:	f7fe fcdf 	bl	8001da4 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f280 8190 	bge.w	8003710 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a97      	ldr	r2, [pc, #604]	; (8003654 <HAL_ADC_ConfigChannel+0xcd8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_ConfigChannel+0xa82>
 80033fa:	4b97      	ldr	r3, [pc, #604]	; (8003658 <HAL_ADC_ConfigChannel+0xcdc>)
 80033fc:	e000      	b.n	8003400 <HAL_ADC_ConfigChannel+0xa84>
 80033fe:	4b97      	ldr	r3, [pc, #604]	; (800365c <HAL_ADC_ConfigChannel+0xce0>)
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe fb17 	bl	8001a34 <LL_ADC_GetCommonPathInternalCh>
 8003406:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a94      	ldr	r2, [pc, #592]	; (8003660 <HAL_ADC_ConfigChannel+0xce4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d126      	bne.n	8003462 <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d120      	bne.n	8003462 <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a8b      	ldr	r2, [pc, #556]	; (8003654 <HAL_ADC_ConfigChannel+0xcd8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d101      	bne.n	800342e <HAL_ADC_ConfigChannel+0xab2>
 800342a:	4a8b      	ldr	r2, [pc, #556]	; (8003658 <HAL_ADC_ConfigChannel+0xcdc>)
 800342c:	e000      	b.n	8003430 <HAL_ADC_ConfigChannel+0xab4>
 800342e:	4a8b      	ldr	r2, [pc, #556]	; (800365c <HAL_ADC_ConfigChannel+0xce0>)
 8003430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003434:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f7fe fae7 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003440:	4b88      	ldr	r3, [pc, #544]	; (8003664 <HAL_ADC_ConfigChannel+0xce8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	099b      	lsrs	r3, r3, #6
 8003446:	4a88      	ldr	r2, [pc, #544]	; (8003668 <HAL_ADC_ConfigChannel+0xcec>)
 8003448:	fba2 2303 	umull	r2, r3, r2, r3
 800344c:	099b      	lsrs	r3, r3, #6
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003452:	e002      	b.n	800345a <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	3b01      	subs	r3, #1
 8003458:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f9      	bne.n	8003454 <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003460:	e067      	b.n	8003532 <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a81      	ldr	r2, [pc, #516]	; (800366c <HAL_ADC_ConfigChannel+0xcf0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d116      	bne.n	800349a <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800346c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003474:	2b00      	cmp	r3, #0
 8003476:	d110      	bne.n	800349a <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a75      	ldr	r2, [pc, #468]	; (8003654 <HAL_ADC_ConfigChannel+0xcd8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_ADC_ConfigChannel+0xb0a>
 8003482:	4a75      	ldr	r2, [pc, #468]	; (8003658 <HAL_ADC_ConfigChannel+0xcdc>)
 8003484:	e000      	b.n	8003488 <HAL_ADC_ConfigChannel+0xb0c>
 8003486:	4a75      	ldr	r2, [pc, #468]	; (800365c <HAL_ADC_ConfigChannel+0xce0>)
 8003488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003490:	4619      	mov	r1, r3
 8003492:	4610      	mov	r0, r2
 8003494:	f7fe fabb 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
 8003498:	e04b      	b.n	8003532 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a74      	ldr	r2, [pc, #464]	; (8003670 <HAL_ADC_ConfigChannel+0xcf4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d116      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d110      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a67      	ldr	r2, [pc, #412]	; (8003654 <HAL_ADC_ConfigChannel+0xcd8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d101      	bne.n	80034be <HAL_ADC_ConfigChannel+0xb42>
 80034ba:	4a67      	ldr	r2, [pc, #412]	; (8003658 <HAL_ADC_ConfigChannel+0xcdc>)
 80034bc:	e000      	b.n	80034c0 <HAL_ADC_ConfigChannel+0xb44>
 80034be:	4a67      	ldr	r2, [pc, #412]	; (800365c <HAL_ADC_ConfigChannel+0xce0>)
 80034c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f7fe fa9f 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
 80034d0:	e02f      	b.n	8003532 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a67      	ldr	r2, [pc, #412]	; (8003674 <HAL_ADC_ConfigChannel+0xcf8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d12a      	bne.n	8003532 <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d124      	bne.n	8003532 <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a62      	ldr	r2, [pc, #392]	; (8003678 <HAL_ADC_ConfigChannel+0xcfc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d11f      	bne.n	8003532 <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a57      	ldr	r2, [pc, #348]	; (8003654 <HAL_ADC_ConfigChannel+0xcd8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d101      	bne.n	8003500 <HAL_ADC_ConfigChannel+0xb84>
 80034fc:	4a56      	ldr	r2, [pc, #344]	; (8003658 <HAL_ADC_ConfigChannel+0xcdc>)
 80034fe:	e000      	b.n	8003502 <HAL_ADC_ConfigChannel+0xb86>
 8003500:	4a56      	ldr	r2, [pc, #344]	; (800365c <HAL_ADC_ConfigChannel+0xce0>)
 8003502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003506:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f7fe fa7e 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003512:	f7fe fa5b 	bl	80019cc <HAL_GetREVID>
 8003516:	4603      	mov	r3, r0
 8003518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351c:	d809      	bhi.n	8003532 <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8003532:	f7fe fa4b 	bl	80019cc <HAL_GetREVID>
 8003536:	4603      	mov	r3, r0
 8003538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800353c:	f040 80e8 	bne.w	8003710 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a4d      	ldr	r2, [pc, #308]	; (800367c <HAL_ADC_ConfigChannel+0xd00>)
 8003546:	4293      	cmp	r3, r2
 8003548:	f040 80e2 	bne.w	8003710 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800354c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003554:	2b00      	cmp	r3, #0
 8003556:	f040 80db 	bne.w	8003710 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800356e:	e0cf      	b.n	8003710 <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003578:	d004      	beq.n	8003584 <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800357e:	4a40      	ldr	r2, [pc, #256]	; (8003680 <HAL_ADC_ConfigChannel+0xd04>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d106      	bne.n	8003592 <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe fbf0 	bl	8001d72 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f280 80ba 	bge.w	8003710 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2c      	ldr	r2, [pc, #176]	; (8003654 <HAL_ADC_ConfigChannel+0xcd8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_ConfigChannel+0xc2e>
 80035a6:	4b2c      	ldr	r3, [pc, #176]	; (8003658 <HAL_ADC_ConfigChannel+0xcdc>)
 80035a8:	e000      	b.n	80035ac <HAL_ADC_ConfigChannel+0xc30>
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <HAL_ADC_ConfigChannel+0xce0>)
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe fa41 	bl	8001a34 <LL_ADC_GetCommonPathInternalCh>
 80035b2:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a32      	ldr	r2, [pc, #200]	; (8003684 <HAL_ADC_ConfigChannel+0xd08>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d110      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a23      	ldr	r2, [pc, #140]	; (8003654 <HAL_ADC_ConfigChannel+0xcd8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d101      	bne.n	80035ce <HAL_ADC_ConfigChannel+0xc52>
 80035ca:	4a23      	ldr	r2, [pc, #140]	; (8003658 <HAL_ADC_ConfigChannel+0xcdc>)
 80035cc:	e000      	b.n	80035d0 <HAL_ADC_ConfigChannel+0xc54>
 80035ce:	4a23      	ldr	r2, [pc, #140]	; (800365c <HAL_ADC_ConfigChannel+0xce0>)
 80035d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f7fe fa17 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
 80035e0:	e06d      	b.n	80036be <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a28      	ldr	r2, [pc, #160]	; (8003688 <HAL_ADC_ConfigChannel+0xd0c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d110      	bne.n	800360e <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a18      	ldr	r2, [pc, #96]	; (8003654 <HAL_ADC_ConfigChannel+0xcd8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_ConfigChannel+0xc7e>
 80035f6:	4a18      	ldr	r2, [pc, #96]	; (8003658 <HAL_ADC_ConfigChannel+0xcdc>)
 80035f8:	e000      	b.n	80035fc <HAL_ADC_ConfigChannel+0xc80>
 80035fa:	4a18      	ldr	r2, [pc, #96]	; (800365c <HAL_ADC_ConfigChannel+0xce0>)
 80035fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f7fe fa01 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
 800360c:	e057      	b.n	80036be <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a17      	ldr	r2, [pc, #92]	; (8003670 <HAL_ADC_ConfigChannel+0xcf4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d110      	bne.n	800363a <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a0d      	ldr	r2, [pc, #52]	; (8003654 <HAL_ADC_ConfigChannel+0xcd8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <HAL_ADC_ConfigChannel+0xcaa>
 8003622:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <HAL_ADC_ConfigChannel+0xcdc>)
 8003624:	e000      	b.n	8003628 <HAL_ADC_ConfigChannel+0xcac>
 8003626:	4a0d      	ldr	r2, [pc, #52]	; (800365c <HAL_ADC_ConfigChannel+0xce0>)
 8003628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f7fe f9eb 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
 8003638:	e041      	b.n	80036be <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a0d      	ldr	r2, [pc, #52]	; (8003674 <HAL_ADC_ConfigChannel+0xcf8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d13c      	bne.n	80036be <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a02      	ldr	r2, [pc, #8]	; (8003654 <HAL_ADC_ConfigChannel+0xcd8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d11e      	bne.n	800368c <HAL_ADC_ConfigChannel+0xd10>
 800364e:	4a02      	ldr	r2, [pc, #8]	; (8003658 <HAL_ADC_ConfigChannel+0xcdc>)
 8003650:	e01d      	b.n	800368e <HAL_ADC_ConfigChannel+0xd12>
 8003652:	bf00      	nop
 8003654:	42028000 	.word	0x42028000
 8003658:	42028308 	.word	0x42028308
 800365c:	46021308 	.word	0x46021308
 8003660:	b6002000 	.word	0xb6002000
 8003664:	20000000 	.word	0x20000000
 8003668:	053e2d63 	.word	0x053e2d63
 800366c:	ba004000 	.word	0xba004000
 8003670:	80000001 	.word	0x80000001
 8003674:	b2001000 	.word	0xb2001000
 8003678:	46021000 	.word	0x46021000
 800367c:	d7200000 	.word	0xd7200000
 8003680:	80000010 	.word	0x80000010
 8003684:	ce080000 	.word	0xce080000
 8003688:	ca040000 	.word	0xca040000
 800368c:	4a25      	ldr	r2, [pc, #148]	; (8003724 <HAL_ADC_ConfigChannel+0xda8>)
 800368e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003692:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f7fe f9b8 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800369e:	f7fe f995 	bl	80019cc <HAL_GetREVID>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a8:	d809      	bhi.n	80036be <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80036be:	f7fe f985 	bl	80019cc <HAL_GetREVID>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c8:	d122      	bne.n	8003710 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a16      	ldr	r2, [pc, #88]	; (8003728 <HAL_ADC_ConfigChannel+0xdac>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d11d      	bne.n	8003710 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d117      	bne.n	8003710 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80036f4:	e00c      	b.n	8003710 <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036fa:	f043 0220 	orr.w	r2, r3, #32
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8003708:	e002      	b.n	8003710 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800370a:	bf00      	nop
 800370c:	e000      	b.n	8003710 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800370e:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003718:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 800371c:	4618      	mov	r0, r3
 800371e:	37f0      	adds	r7, #240	; 0xf0
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	46021308 	.word	0x46021308
 8003728:	d7200000 	.word	0xd7200000

0800372c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe fc7a 	bl	800203c <LL_ADC_REG_IsConversionOngoing>
 8003748:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe fc9b 	bl	800208a <LL_ADC_INJ_IsConversionOngoing>
 8003754:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d103      	bne.n	8003764 <ADC_ConversionStop+0x38>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8099 	beq.w	8003896 <ADC_ConversionStop+0x16a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d02b      	beq.n	80037ca <ADC_ConversionStop+0x9e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003778:	2b01      	cmp	r3, #1
 800377a:	d126      	bne.n	80037ca <ADC_ConversionStop+0x9e>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7f1b      	ldrb	r3, [r3, #28]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d122      	bne.n	80037ca <ADC_ConversionStop+0x9e>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003784:	2301      	movs	r3, #1
 8003786:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003788:	e014      	b.n	80037b4 <ADC_ConversionStop+0x88>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4a44      	ldr	r2, [pc, #272]	; (80038a0 <ADC_ConversionStop+0x174>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d90d      	bls.n	80037ae <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003796:	f043 0210 	orr.w	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e074      	b.n	8003898 <ADC_ConversionStop+0x16c>
        }
        conversion_timeout_cpu_cycles++;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3301      	adds	r3, #1
 80037b2:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d1e3      	bne.n	800378a <ADC_ConversionStop+0x5e>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2240      	movs	r2, #64	; 0x40
 80037c8:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d014      	beq.n	80037fa <ADC_ConversionStop+0xce>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe fc31 	bl	800203c <LL_ADC_REG_IsConversionOngoing>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00c      	beq.n	80037fa <ADC_ConversionStop+0xce>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe fbee 	bl	8001fc6 <LL_ADC_IsDisableOngoing>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d104      	bne.n	80037fa <ADC_ConversionStop+0xce>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe fc0d 	bl	8002014 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d014      	beq.n	800382a <ADC_ConversionStop+0xfe>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe fc40 	bl	800208a <LL_ADC_INJ_IsConversionOngoing>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00c      	beq.n	800382a <ADC_ConversionStop+0xfe>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe fbd6 	bl	8001fc6 <LL_ADC_IsDisableOngoing>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <ADC_ConversionStop+0xfe>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fc1c 	bl	8002062 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d005      	beq.n	800383c <ADC_ConversionStop+0x110>
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d105      	bne.n	8003842 <ADC_ConversionStop+0x116>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003836:	230c      	movs	r3, #12
 8003838:	617b      	str	r3, [r7, #20]
        break;
 800383a:	e005      	b.n	8003848 <ADC_ConversionStop+0x11c>
      case ADC_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 800383c:	2308      	movs	r3, #8
 800383e:	617b      	str	r3, [r7, #20]
        break;
 8003840:	e002      	b.n	8003848 <ADC_ConversionStop+0x11c>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 8003842:	2304      	movs	r3, #4
 8003844:	617b      	str	r3, [r7, #20]
        break;
 8003846:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003848:	f7fe f890 	bl	800196c <HAL_GetTick>
 800384c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 800384e:	e01b      	b.n	8003888 <ADC_ConversionStop+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003850:	f7fe f88c 	bl	800196c <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b05      	cmp	r3, #5
 800385c:	d914      	bls.n	8003888 <ADC_ConversionStop+0x15c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00d      	beq.n	8003888 <ADC_ConversionStop+0x15c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003870:	f043 0210 	orr.w	r2, r3, #16
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800387c:	f043 0201 	orr.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e007      	b.n	8003898 <ADC_ConversionStop+0x16c>
    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1dc      	bne.n	8003850 <ADC_ConversionStop+0x124>
        }
      }
    }
  }

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3720      	adds	r7, #32
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	000cdbff 	.word	0x000cdbff

080038a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fe fb75 	bl	8001fa0 <LL_ADC_IsEnabled>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d15a      	bne.n	8003972 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	4b2e      	ldr	r3, [pc, #184]	; (800397c <ADC_Enable+0xd8>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ce:	f043 0210 	orr.w	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e046      	b.n	8003974 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe fb2c 	bl	8001f50 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d004      	beq.n	800390a <ADC_Enable+0x66>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <ADC_Enable+0xdc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d033      	beq.n	8003972 <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800390a:	f7fe f82f 	bl	800196c <HAL_GetTick>
 800390e:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003910:	e028      	b.n	8003964 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fb42 	bl	8001fa0 <LL_ADC_IsEnabled>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d104      	bne.n	800392c <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fb12 	bl	8001f50 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800392c:	f7fe f81e 	bl	800196c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d914      	bls.n	8003964 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d00d      	beq.n	8003964 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800394c:	f043 0210 	orr.w	r2, r3, #16
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003958:	f043 0201 	orr.w	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e007      	b.n	8003974 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b01      	cmp	r3, #1
 8003970:	d1cf      	bne.n	8003912 <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	8000003f 	.word	0x8000003f
 8003980:	46021000 	.word	0x46021000

08003984 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe fb18 	bl	8001fc6 <LL_ADC_IsDisableOngoing>
 8003996:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe faff 	bl	8001fa0 <LL_ADC_IsEnabled>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d047      	beq.n	8003a38 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d144      	bne.n	8003a38 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030d 	and.w	r3, r3, #13
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d10c      	bne.n	80039d6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe fad9 	bl	8001f78 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2203      	movs	r2, #3
 80039cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039ce:	f7fd ffcd 	bl	800196c <HAL_GetTick>
 80039d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039d4:	e029      	b.n	8003a2a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039da:	f043 0210 	orr.w	r2, r3, #16
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	679a      	str	r2, [r3, #120]	; 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039e6:	f043 0201 	orr.w	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	67da      	str	r2, [r3, #124]	; 0x7c
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e023      	b.n	8003a3a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039f2:	f7fd ffbb 	bl	800196c <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d914      	bls.n	8003a2a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00d      	beq.n	8003a2a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a12:	f043 0210 	orr.w	r2, r3, #16
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a1e:	f043 0201 	orr.w	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e007      	b.n	8003a3a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1dc      	bne.n	80039f2 <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <LL_ADC_StartCalibration>:
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a0f      	ldr	r2, [pc, #60]	; (8003a90 <LL_ADC_StartCalibration+0x4c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00c      	beq.n	8003a70 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <LL_ADC_StartCalibration+0x50>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
}
 8003a6e:	e009      	b.n	8003a84 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	609a      	str	r2, [r3, #8]
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	46021000 	.word	0x46021000
 8003a94:	7ffeffc0 	.word	0x7ffeffc0

08003a98 <LL_ADC_IsCalibrationOnGoing>:
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aac:	d101      	bne.n	8003ab2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_ADCEx_Calibration_Start+0x1e>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e133      	b.n	8003d46 <HAL_ADCEx_Calibration_Start+0x286>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f7ff ff4c 	bl	8003984 <ADC_Disable>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f040 8119 	bne.w	8003d2e <HAL_ADCEx_Calibration_Start+0x26e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b04:	f023 0302 	bic.w	r3, r3, #2
 8003b08:	f043 0202 	orr.w	r2, r3, #2
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	679a      	str	r2, [r3, #120]	; 0x78

    if (hadc->Instance == ADC4)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a8e      	ldr	r2, [pc, #568]	; (8003d50 <HAL_ADCEx_Calibration_Start+0x290>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d150      	bne.n	8003bbc <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0203 	bic.w	r2, r2, #3
 8003b40:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff73 	bl	8003a44 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b5e:	e014      	b.n	8003b8a <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	3301      	adds	r3, #1
 8003b64:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4a7a      	ldr	r2, [pc, #488]	; (8003d54 <HAL_ADCEx_Calibration_Start+0x294>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d90d      	bls.n	8003b8a <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b72:	f023 0312 	bic.w	r3, r3, #18
 8003b76:	f043 0210 	orr.w	r2, r3, #16
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	679a      	str	r2, [r3, #120]	; 0x78

          __HAL_UNLOCK(hadc);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e0dd      	b.n	8003d46 <HAL_ADCEx_Calibration_Start+0x286>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff ff82 	bl	8003a98 <LL_ADC_IsCalibrationOnGoing>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e2      	bne.n	8003b60 <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68d9      	ldr	r1, [r3, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
 8003bba:	e0af      	b.n	8003d1c <HAL_ADCEx_Calibration_Start+0x25c>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8003bbc:	4b66      	ldr	r3, [pc, #408]	; (8003d58 <HAL_ADCEx_Calibration_Start+0x298>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc4:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8003bc6:	4b64      	ldr	r3, [pc, #400]	; (8003d58 <HAL_ADCEx_Calibration_Start+0x298>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	0c1b      	lsrs	r3, r3, #16
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	f240 4255 	movw	r2, #1109	; 0x455
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d012      	beq.n	8003c00 <HAL_ADCEx_Calibration_Start+0x140>
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	f240 4276 	movw	r2, #1142	; 0x476
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00d      	beq.n	8003c00 <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	f240 4281 	movw	r2, #1153	; 0x481
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <HAL_ADCEx_Calibration_Start+0x138>
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f240 4282 	movw	r2, #1154	; 0x482
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d16d      	bne.n	8003cd4 <HAL_ADCEx_Calibration_Start+0x214>
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bfe:	d369      	bcc.n	8003cd4 <HAL_ADCEx_Calibration_Start+0x214>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f7ff fe4f 	bl	80038a4 <ADC_Enable>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (tmp_hal_status == HAL_OK)
 8003c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f040 8083 	bne.w	8003d1c <HAL_ADCEx_Calibration_Start+0x25c>
        {
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 6210 	orr.w	r2, r2, #150994944	; 0x9000000
 8003c28:	609a      	str	r2, [r3, #8]
          MODIFY_REG(hadc->Instance->CALFACT2, 0x00FF0000UL, 0x00020000UL);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003c32:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003c3e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003c52:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7ff fe94 	bl	8003984 <ADC_Disable>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003c68:	d109      	bne.n	8003c7e <HAL_ADCEx_Calibration_Start+0x1be>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	4b3a      	ldr	r3, [pc, #232]	; (8003d5c <HAL_ADCEx_Calibration_Start+0x29c>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7c:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c94:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c96:	e014      	b.n	8003cc2 <HAL_ADCEx_Calibration_Start+0x202>
          {
            wait_loop_index++;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4a2c      	ldr	r2, [pc, #176]	; (8003d54 <HAL_ADCEx_Calibration_Start+0x294>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d90d      	bls.n	8003cc2 <HAL_ADCEx_Calibration_Start+0x202>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003caa:	f023 0312 	bic.w	r3, r3, #18
 8003cae:	f043 0210 	orr.w	r2, r3, #16
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	679a      	str	r2, [r3, #120]	; 0x78

              __HAL_UNLOCK(hadc);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

              return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e041      	b.n	8003d46 <HAL_ADCEx_Calibration_Start+0x286>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff fee6 	bl	8003a98 <LL_ADC_IsCalibrationOnGoing>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e2      	bne.n	8003c98 <HAL_ADCEx_Calibration_Start+0x1d8>
        if (tmp_hal_status == HAL_OK)
 8003cd2:	e023      	b.n	8003d1c <HAL_ADCEx_Calibration_Start+0x25c>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff feb2 	bl	8003a44 <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ce0:	e014      	b.n	8003d0c <HAL_ADCEx_Calibration_Start+0x24c>
        {
          wait_loop_index++;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4a1a      	ldr	r2, [pc, #104]	; (8003d54 <HAL_ADCEx_Calibration_Start+0x294>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d90d      	bls.n	8003d0c <HAL_ADCEx_Calibration_Start+0x24c>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf4:	f023 0312 	bic.w	r3, r3, #18
 8003cf8:	f043 0210 	orr.w	r2, r3, #16
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	679a      	str	r2, [r3, #120]	; 0x78

            __HAL_UNLOCK(hadc);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

            return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e01c      	b.n	8003d46 <HAL_ADCEx_Calibration_Start+0x286>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fec1 	bl	8003a98 <LL_ADC_IsCalibrationOnGoing>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e2      	bne.n	8003ce2 <HAL_ADCEx_Calibration_Start+0x222>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d20:	f023 0303 	bic.w	r3, r3, #3
 8003d24:	f043 0201 	orr.w	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	679a      	str	r2, [r3, #120]	; 0x78
 8003d2c:	e005      	b.n	8003d3a <HAL_ADCEx_Calibration_Start+0x27a>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d32:	f043 0210 	orr.w	r2, r3, #16
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	679a      	str	r2, [r3, #120]	; 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003d42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3728      	adds	r7, #40	; 0x28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	46021000 	.word	0x46021000
 8003d54:	01ba813f 	.word	0x01ba813f
 8003d58:	e0044000 	.word	0xe0044000
 8003d5c:	7ffeffc0 	.word	0x7ffeffc0

08003d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d92:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	60d3      	str	r3, [r2, #12]
}
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dac:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	f003 0307 	and.w	r3, r3, #7
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	db0b      	blt.n	8003dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	f003 021f 	and.w	r2, r3, #31
 8003ddc:	4907      	ldr	r1, [pc, #28]	; (8003dfc <__NVIC_EnableIRQ+0x38>)
 8003dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	2001      	movs	r0, #1
 8003de6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	e000e100 	.word	0xe000e100

08003e00 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	db12      	blt.n	8003e38 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	f003 021f 	and.w	r2, r3, #31
 8003e18:	490a      	ldr	r1, [pc, #40]	; (8003e44 <__NVIC_DisableIRQ+0x44>)
 8003e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	2001      	movs	r0, #1
 8003e22:	fa00 f202 	lsl.w	r2, r0, r2
 8003e26:	3320      	adds	r3, #32
 8003e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e2c:	f3bf 8f4f 	dsb	sy
}
 8003e30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e32:	f3bf 8f6f 	isb	sy
}
 8003e36:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	e000e100 	.word	0xe000e100

08003e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	6039      	str	r1, [r7, #0]
 8003e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	db0a      	blt.n	8003e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	490c      	ldr	r1, [pc, #48]	; (8003e94 <__NVIC_SetPriority+0x4c>)
 8003e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e66:	0112      	lsls	r2, r2, #4
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e70:	e00a      	b.n	8003e88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	4908      	ldr	r1, [pc, #32]	; (8003e98 <__NVIC_SetPriority+0x50>)
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	3b04      	subs	r3, #4
 8003e80:	0112      	lsls	r2, r2, #4
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	440b      	add	r3, r1
 8003e86:	761a      	strb	r2, [r3, #24]
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	e000e100 	.word	0xe000e100
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b089      	sub	sp, #36	; 0x24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f1c3 0307 	rsb	r3, r3, #7
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	bf28      	it	cs
 8003eba:	2304      	movcs	r3, #4
 8003ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	d902      	bls.n	8003ecc <NVIC_EncodePriority+0x30>
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3b03      	subs	r3, #3
 8003eca:	e000      	b.n	8003ece <NVIC_EncodePriority+0x32>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43da      	mvns	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	401a      	ands	r2, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	43d9      	mvns	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef4:	4313      	orrs	r3, r2
         );
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3724      	adds	r7, #36	; 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff ff28 	bl	8003d60 <__NVIC_SetPriorityGrouping>
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f26:	f7ff ff3f 	bl	8003da8 <__NVIC_GetPriorityGrouping>
 8003f2a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	6978      	ldr	r0, [r7, #20]
 8003f32:	f7ff ffb3 	bl	8003e9c <NVIC_EncodePriority>
 8003f36:	4602      	mov	r2, r0
 8003f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ff82 	bl	8003e48 <__NVIC_SetPriority>
}
 8003f44:	bf00      	nop
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff ff32 	bl	8003dc4 <__NVIC_EnableIRQ>
}
 8003f60:	bf00      	nop
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff ff42 	bl	8003e00 <__NVIC_DisableIRQ>
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b089      	sub	sp, #36	; 0x24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003f96:	e1ba      	b.n	800430e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 81aa 	beq.w	8004308 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a55      	ldr	r2, [pc, #340]	; (800410c <HAL_GPIO_Init+0x188>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d15d      	bne.n	8004078 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 0201 	and.w	r2, r3, #1
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003fec:	4a48      	ldr	r2, [pc, #288]	; (8004110 <HAL_GPIO_Init+0x18c>)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ff4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003ff6:	4a46      	ldr	r2, [pc, #280]	; (8004110 <HAL_GPIO_Init+0x18c>)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	08da      	lsrs	r2, r3, #3
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	3208      	adds	r2, #8
 800400a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800400e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	220f      	movs	r2, #15
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	4013      	ands	r3, r2
 8004024:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	220b      	movs	r2, #11
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	4313      	orrs	r3, r2
 8004038:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	08da      	lsrs	r2, r3, #3
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	3208      	adds	r2, #8
 8004042:	69f9      	ldr	r1, [r7, #28]
 8004044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	2203      	movs	r2, #3
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	4013      	ands	r3, r2
 800405e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	2202      	movs	r2, #2
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	4313      	orrs	r3, r2
 800406e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e067      	b.n	8004148 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0x104>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b12      	cmp	r3, #18
 8004086:	d145      	bne.n	8004114 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	08da      	lsrs	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3208      	adds	r2, #8
 8004090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004094:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	220f      	movs	r2, #15
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f003 020f 	and.w	r2, r3, #15
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	69fa      	ldr	r2, [r7, #28]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	08da      	lsrs	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3208      	adds	r2, #8
 80040ce:	69f9      	ldr	r1, [r7, #28]
 80040d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	2203      	movs	r2, #3
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	4013      	ands	r3, r2
 80040ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0203 	and.w	r2, r3, #3
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e01e      	b.n	8004148 <HAL_GPIO_Init+0x1c4>
 800410a:	bf00      	nop
 800410c:	46020000 	.word	0x46020000
 8004110:	080159b4 	.word	0x080159b4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	2203      	movs	r2, #3
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	4013      	ands	r3, r2
 800412a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0203 	and.w	r2, r3, #3
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	4313      	orrs	r3, r2
 8004140:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d00b      	beq.n	8004168 <HAL_GPIO_Init+0x1e4>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d007      	beq.n	8004168 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800415c:	2b11      	cmp	r3, #17
 800415e:	d003      	beq.n	8004168 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b12      	cmp	r3, #18
 8004166:	d130      	bne.n	80041ca <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	2203      	movs	r2, #3
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	4013      	ands	r3, r2
 800417e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	4313      	orrs	r3, r2
 8004190:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800419e:	2201      	movs	r2, #1
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43db      	mvns	r3, r3
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	4013      	ands	r3, r2
 80041ac:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 0201 	and.w	r2, r3, #1
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d017      	beq.n	8004202 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	2203      	movs	r2, #3
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	4013      	ands	r3, r2
 80041e8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d07c      	beq.n	8004308 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800420e:	4a47      	ldr	r2, [pc, #284]	; (800432c <HAL_GPIO_Init+0x3a8>)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	3318      	adds	r3, #24
 8004216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	220f      	movs	r2, #15
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	4013      	ands	r3, r2
 8004230:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	0a9a      	lsrs	r2, r3, #10
 8004236:	4b3e      	ldr	r3, [pc, #248]	; (8004330 <HAL_GPIO_Init+0x3ac>)
 8004238:	4013      	ands	r3, r2
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	f002 0203 	and.w	r2, r2, #3
 8004240:	00d2      	lsls	r2, r2, #3
 8004242:	4093      	lsls	r3, r2
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	4313      	orrs	r3, r2
 8004248:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800424a:	4938      	ldr	r1, [pc, #224]	; (800432c <HAL_GPIO_Init+0x3a8>)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	089b      	lsrs	r3, r3, #2
 8004250:	3318      	adds	r3, #24
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004258:	4b34      	ldr	r3, [pc, #208]	; (800432c <HAL_GPIO_Init+0x3a8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	43db      	mvns	r3, r3
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	4013      	ands	r3, r2
 8004266:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800427c:	4a2b      	ldr	r2, [pc, #172]	; (800432c <HAL_GPIO_Init+0x3a8>)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004282:	4b2a      	ldr	r3, [pc, #168]	; (800432c <HAL_GPIO_Init+0x3a8>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	43db      	mvns	r3, r3
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	4013      	ands	r3, r2
 8004290:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80042a6:	4a21      	ldr	r2, [pc, #132]	; (800432c <HAL_GPIO_Init+0x3a8>)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80042ac:	4b1f      	ldr	r3, [pc, #124]	; (800432c <HAL_GPIO_Init+0x3a8>)
 80042ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	43db      	mvns	r3, r3
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	4013      	ands	r3, r2
 80042bc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80042d2:	4a16      	ldr	r2, [pc, #88]	; (800432c <HAL_GPIO_Init+0x3a8>)
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80042da:	4b14      	ldr	r3, [pc, #80]	; (800432c <HAL_GPIO_Init+0x3a8>)
 80042dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004300:	4a0a      	ldr	r2, [pc, #40]	; (800432c <HAL_GPIO_Init+0x3a8>)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	3301      	adds	r3, #1
 800430c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	f47f ae3d 	bne.w	8003f98 <HAL_GPIO_Init+0x14>
  }
}
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	3724      	adds	r7, #36	; 0x24
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	46022000 	.word	0x46022000
 8004330:	002f7f7f 	.word	0x002f7f7f

08004334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	807b      	strh	r3, [r7, #2]
 8004340:	4613      	mov	r3, r2
 8004342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004344:	787b      	ldrb	r3, [r7, #1]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004350:	e002      	b.n	8004358 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004352:	887a      	ldrh	r2, [r7, #2]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800436e:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	4013      	ands	r3, r2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d006      	beq.n	8004388 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800437a:	4a0c      	ldr	r2, [pc, #48]	; (80043ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	4618      	mov	r0, r3
 8004384:	f00b f98e 	bl	800f6a4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	4013      	ands	r3, r2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d006      	beq.n	80043a2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004394:	4a05      	ldr	r2, [pc, #20]	; (80043ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	4618      	mov	r0, r3
 800439e:	f000 f807 	bl	80043b0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	46022000 	.word	0x46022000

080043b0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
 80043e4:	e007      	b.n	80043f6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80043e6:	4b07      	ldr	r3, [pc, #28]	; (8004404 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 0204 	bic.w	r2, r3, #4
 80043ee:	4905      	ldr	r1, [pc, #20]	; (8004404 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40030400 	.word	0x40030400

08004408 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_ICACHE_Enable+0x1c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a04      	ldr	r2, [pc, #16]	; (8004424 <HAL_ICACHE_Enable+0x1c>)
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	40030400 	.word	0x40030400

08004428 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e0e7      	b.n	800460a <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fc ff89 	bl	800136c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2202      	movs	r2, #2
 800445e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800447a:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004484:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8004486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fad4 	bl	8004a38 <LPTIM_WaitForFlag>
 8004490:	4603      	mov	r3, r0
 8004492:	2b03      	cmp	r3, #3
 8004494:	d101      	bne.n	800449a <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e0b7      	b.n	800460a <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2210      	movs	r2, #16
 80044a0:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6a12      	ldr	r2, [r2, #32]
 80044aa:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80044ac:	2110      	movs	r1, #16
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fac2 	bl	8004a38 <LPTIM_WaitForFlag>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d101      	bne.n	80044be <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e0a5      	b.n	800460a <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10e      	bne.n	80044ea <HAL_LPTIM_Init+0xc2>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d107      	bne.n	80044ea <HAL_LPTIM_Init+0xc2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d004      	beq.n	8004504 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004502:	d103      	bne.n	800450c <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 031e 	bic.w	r3, r3, #30
 800450a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004514:	4293      	cmp	r3, r2
 8004516:	d005      	beq.n	8004524 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800451e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004522:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4b3b      	ldr	r3, [pc, #236]	; (8004614 <HAL_LPTIM_Init+0x1ec>)
 8004528:	4013      	ands	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004534:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 800453a:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004540:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d107      	bne.n	8004560 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004558:	4313      	orrs	r3, r2
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d004      	beq.n	8004572 <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004570:	d107      	bne.n	8004582 <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800457a:	4313      	orrs	r3, r2
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800458a:	4293      	cmp	r3, r2
 800458c:	d00a      	beq.n	80045a4 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004596:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800459c:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a19      	ldr	r2, [pc, #100]	; (8004618 <HAL_LPTIM_Init+0x1f0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d004      	beq.n	80045c0 <HAL_LPTIM_Init+0x198>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a18      	ldr	r2, [pc, #96]	; (800461c <HAL_LPTIM_Init+0x1f4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d108      	bne.n	80045d2 <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24
 80045d0:	e00e      	b.n	80045f0 <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a12      	ldr	r2, [pc, #72]	; (8004620 <HAL_LPTIM_Init+0x1f8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d004      	beq.n	80045e6 <HAL_LPTIM_Init+0x1be>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a10      	ldr	r2, [pc, #64]	; (8004624 <HAL_LPTIM_Init+0x1fc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d104      	bne.n	80045f0 <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	ff39f1fe 	.word	0xff39f1fe
 8004618:	46004400 	.word	0x46004400
 800461c:	40009400 	.word	0x40009400
 8004620:	46004800 	.word	0x46004800
 8004624:	46004c00 	.word	0x46004c00

08004628 <HAL_LPTIM_Counter_Start>:
  * @brief  Start the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d00c      	beq.n	800465a <HAL_LPTIM_Counter_Start+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004648:	d107      	bne.n	800465a <HAL_LPTIM_Counter_Start+0x32>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8004658:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0201 	orr.w	r2, r2, #1
 8004668:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0204 	orr.w	r2, r2, #4
 8004678:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d120      	bne.n	80046e8 <HAL_LPTIM_IRQHandler+0x58>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d119      	bne.n	80046e8 <HAL_LPTIM_IRQHandler+0x58>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2201      	movs	r2, #1
 80046ba:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f99c 	bl	8004a10 <HAL_LPTIM_IC_CaptureCallback>
 80046d8:	e002      	b.n	80046e0 <HAL_LPTIM_IRQHandler+0x50>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f93e 	bl	800495c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f6:	d122      	bne.n	800473e <HAL_LPTIM_IRQHandler+0xae>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004706:	d11a      	bne.n	800473e <HAL_LPTIM_IRQHandler+0xae>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004710:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_LPTIM_IRQHandler+0xa0>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f971 	bl	8004a10 <HAL_LPTIM_IC_CaptureCallback>
 800472e:	e002      	b.n	8004736 <HAL_LPTIM_IRQHandler+0xa6>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f913 	bl	800495c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474c:	d117      	bne.n	800477e <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475c:	d10f      	bne.n	800477e <HAL_LPTIM_IRQHandler+0xee>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004766:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f957 	bl	8004a24 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478c:	d117      	bne.n	80047be <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479c:	d10f      	bne.n	80047be <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047a6:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f937 	bl	8004a24 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d10d      	bne.n	80047e8 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d106      	bne.n	80047e8 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2202      	movs	r2, #2
 80047e0:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f8c4 	bl	8004970 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d10d      	bne.n	8004812 <HAL_LPTIM_IRQHandler+0x182>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b04      	cmp	r3, #4
 8004802:	d106      	bne.n	8004812 <HAL_LPTIM_IRQHandler+0x182>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2204      	movs	r2, #4
 800480a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f8b9 	bl	8004984 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b08      	cmp	r3, #8
 800481e:	d111      	bne.n	8004844 <HAL_LPTIM_IRQHandler+0x1b4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b08      	cmp	r3, #8
 800482c:	d10a      	bne.n	8004844 <HAL_LPTIM_IRQHandler+0x1b4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2208      	movs	r2, #8
 8004834:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f8aa 	bl	8004998 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800484e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004852:	d113      	bne.n	800487c <HAL_LPTIM_IRQHandler+0x1ec>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800485e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004862:	d10b      	bne.n	800487c <HAL_LPTIM_IRQHandler+0x1ec>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800486c:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f88e 	bl	8004998 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b10      	cmp	r3, #16
 8004888:	d10d      	bne.n	80048a6 <HAL_LPTIM_IRQHandler+0x216>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b10      	cmp	r3, #16
 8004896:	d106      	bne.n	80048a6 <HAL_LPTIM_IRQHandler+0x216>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2210      	movs	r2, #16
 800489e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f883 	bl	80049ac <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d10d      	bne.n	80048d0 <HAL_LPTIM_IRQHandler+0x240>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d106      	bne.n	80048d0 <HAL_LPTIM_IRQHandler+0x240>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2220      	movs	r2, #32
 80048c8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f878 	bl	80049c0 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	d10d      	bne.n	80048fa <HAL_LPTIM_IRQHandler+0x26a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e8:	2b40      	cmp	r3, #64	; 0x40
 80048ea:	d106      	bne.n	80048fa <HAL_LPTIM_IRQHandler+0x26a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2240      	movs	r2, #64	; 0x40
 80048f2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f86d 	bl	80049d4 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d10d      	bne.n	8004924 <HAL_LPTIM_IRQHandler+0x294>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d106      	bne.n	8004924 <HAL_LPTIM_IRQHandler+0x294>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2280      	movs	r2, #128	; 0x80
 800491c:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f862 	bl	80049e8 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004932:	d10f      	bne.n	8004954 <HAL_LPTIM_IRQHandler+0x2c4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004942:	d107      	bne.n	8004954 <HAL_LPTIM_IRQHandler+0x2c4>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800494c:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f854 	bl	80049fc <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004954:	bf00      	nop
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <LPTIM_WaitForFlag+0x58>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a12      	ldr	r2, [pc, #72]	; (8004a94 <LPTIM_WaitForFlag+0x5c>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	0b9b      	lsrs	r3, r3, #14
 8004a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
 8004a5a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	4013      	ands	r3, r2
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d002      	beq.n	8004a82 <LPTIM_WaitForFlag+0x4a>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1ec      	bne.n	8004a5c <LPTIM_WaitForFlag+0x24>

  return result;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	20000000 	.word	0x20000000
 8004a94:	d1b71759 	.word	0xd1b71759

08004a98 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004a9c:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	4a04      	ldr	r2, [pc, #16]	; (8004ab4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004aa8:	bf00      	nop
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	46020800 	.word	0x46020800

08004ab8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004ac0:	4b39      	ldr	r3, [pc, #228]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ac8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d10b      	bne.n	8004aea <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad8:	d905      	bls.n	8004ae6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004ada:	4b33      	ldr	r3, [pc, #204]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	4a32      	ldr	r2, [pc, #200]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ae4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e057      	b.n	8004b9a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af0:	d90a      	bls.n	8004b08 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004af2:	4b2d      	ldr	r3, [pc, #180]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	4a2a      	ldr	r2, [pc, #168]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b04:	60d3      	str	r3, [r2, #12]
 8004b06:	e007      	b.n	8004b18 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004b08:	4b27      	ldr	r3, [pc, #156]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b10:	4925      	ldr	r1, [pc, #148]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004b18:	4b24      	ldr	r3, [pc, #144]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	099b      	lsrs	r3, r3, #6
 8004b24:	2232      	movs	r2, #50	; 0x32
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	4a21      	ldr	r2, [pc, #132]	; (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b30:	099b      	lsrs	r3, r3, #6
 8004b32:	3301      	adds	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004b36:	e002      	b.n	8004b3e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004b3e:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d102      	bne.n	8004b50 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f3      	bne.n	8004b38 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01b      	beq.n	8004b8e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004b56:	4b15      	ldr	r3, [pc, #84]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b60:	099b      	lsrs	r3, r3, #6
 8004b62:	2232      	movs	r2, #50	; 0x32
 8004b64:	fb02 f303 	mul.w	r3, r2, r3
 8004b68:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	099b      	lsrs	r3, r3, #6
 8004b70:	3301      	adds	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004b74:	e002      	b.n	8004b7c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d102      	bne.n	8004b8e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f3      	bne.n	8004b76 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e000      	b.n	8004b9a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	46020800 	.word	0x46020800
 8004bac:	20000000 	.word	0x20000000
 8004bb0:	10624dd3 	.word	0x10624dd3

08004bb4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004bb8:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <HAL_PWREx_GetVoltageRange+0x18>)
 8004bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	46020800 	.word	0x46020800

08004bd0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004bd8:	4b22      	ldr	r3, [pc, #136]	; (8004c64 <HAL_PWREx_ConfigSupply+0x94>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a22      	ldr	r2, [pc, #136]	; (8004c68 <HAL_PWREx_ConfigSupply+0x98>)
 8004bde:	fba2 2303 	umull	r2, r3, r2, r3
 8004be2:	099b      	lsrs	r3, r3, #6
 8004be4:	2232      	movs	r2, #50	; 0x32
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	4a1f      	ldr	r2, [pc, #124]	; (8004c68 <HAL_PWREx_ConfigSupply+0x98>)
 8004bec:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf0:	099b      	lsrs	r3, r3, #6
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d113      	bne.n	8004c24 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004bfc:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <HAL_PWREx_ConfigSupply+0x9c>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a1a      	ldr	r2, [pc, #104]	; (8004c6c <HAL_PWREx_ConfigSupply+0x9c>)
 8004c02:	f023 0302 	bic.w	r3, r3, #2
 8004c06:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c08:	e002      	b.n	8004c10 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c10:	4b16      	ldr	r3, [pc, #88]	; (8004c6c <HAL_PWREx_ConfigSupply+0x9c>)
 8004c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d116      	bne.n	8004c4a <HAL_PWREx_ConfigSupply+0x7a>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f3      	bne.n	8004c0a <HAL_PWREx_ConfigSupply+0x3a>
 8004c22:	e012      	b.n	8004c4a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004c24:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <HAL_PWREx_ConfigSupply+0x9c>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	4a10      	ldr	r2, [pc, #64]	; (8004c6c <HAL_PWREx_ConfigSupply+0x9c>)
 8004c2a:	f043 0302 	orr.w	r3, r3, #2
 8004c2e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c30:	e002      	b.n	8004c38 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <HAL_PWREx_ConfigSupply+0x9c>)
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <HAL_PWREx_ConfigSupply+0x7a>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f3      	bne.n	8004c32 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e000      	b.n	8004c56 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000000 	.word	0x20000000
 8004c68:	10624dd3 	.word	0x10624dd3
 8004c6c:	46020800 	.word	0x46020800

08004c70 <HAL_PWREx_EnterSTOP1Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_0);
 8004c7a:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 0307 	bic.w	r3, r3, #7
 8004c82:	4a0f      	ldr	r2, [pc, #60]	; (8004cc0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004c84:	f043 0301 	orr.w	r3, r3, #1
 8004c88:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004c8a:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	4a0d      	ldr	r2, [pc, #52]	; (8004cc4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004c90:	f043 0304 	orr.w	r3, r3, #4
 8004c94:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004c9c:	bf30      	wfi
 8004c9e:	e002      	b.n	8004ca6 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004ca0:	bf40      	sev
    __WFE();
 8004ca2:	bf20      	wfe
    __WFE();
 8004ca4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ca6:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	4a06      	ldr	r2, [pc, #24]	; (8004cc4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004cac:	f023 0304 	bic.w	r3, r3, #4
 8004cb0:	6113      	str	r3, [r2, #16]
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	46020800 	.word	0x46020800
 8004cc4:	e000ed00 	.word	0xe000ed00

08004cc8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	4a04      	ldr	r2, [pc, #16]	; (8004ce4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004cd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cd6:	6113      	str	r3, [r2, #16]
}
 8004cd8:	bf00      	nop
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	46020800 	.word	0x46020800

08004ce8 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <HAL_PWREx_EnableVddA+0x1c>)
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	4a04      	ldr	r2, [pc, #16]	; (8004d04 <HAL_PWREx_EnableVddA+0x1c>)
 8004cf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cf6:	6113      	str	r3, [r2, #16]
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	46020800 	.word	0x46020800

08004d08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004d0c:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	4a04      	ldr	r2, [pc, #16]	; (8004d24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	46020800 	.word	0x46020800

08004d28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08e      	sub	sp, #56	; 0x38
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004d30:	2300      	movs	r3, #0
 8004d32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f000 bec8 	b.w	8005ad2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d42:	4b99      	ldr	r3, [pc, #612]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f003 030c 	and.w	r3, r3, #12
 8004d4a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d4c:	4b96      	ldr	r3, [pc, #600]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 816c 	beq.w	800503c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d007      	beq.n	8004d7a <HAL_RCC_OscConfig+0x52>
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	2b0c      	cmp	r3, #12
 8004d6e:	f040 80de 	bne.w	8004f2e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	f040 80da 	bne.w	8004f2e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d102      	bne.n	8004d88 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f000 bea5 	b.w	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d8c:	4b86      	ldr	r3, [pc, #536]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d004      	beq.n	8004da2 <HAL_RCC_OscConfig+0x7a>
 8004d98:	4b83      	ldr	r3, [pc, #524]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004da0:	e005      	b.n	8004dae <HAL_RCC_OscConfig+0x86>
 8004da2:	4b81      	ldr	r3, [pc, #516]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d255      	bcs.n	8004e5e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 fa17 	bl	80061f0 <RCC_SetFlashLatencyFromMSIRange>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f000 be82 	b.w	8005ad2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004dce:	4b76      	ldr	r3, [pc, #472]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	4a75      	ldr	r2, [pc, #468]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004dd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dd8:	6093      	str	r3, [r2, #8]
 8004dda:	4b73      	ldr	r3, [pc, #460]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	4970      	ldr	r1, [pc, #448]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004df4:	d309      	bcc.n	8004e0a <HAL_RCC_OscConfig+0xe2>
 8004df6:	4b6c      	ldr	r3, [pc, #432]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f023 021f 	bic.w	r2, r3, #31
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	4969      	ldr	r1, [pc, #420]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60cb      	str	r3, [r1, #12]
 8004e08:	e07e      	b.n	8004f08 <HAL_RCC_OscConfig+0x1e0>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da0a      	bge.n	8004e28 <HAL_RCC_OscConfig+0x100>
 8004e12:	4b65      	ldr	r3, [pc, #404]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	015b      	lsls	r3, r3, #5
 8004e20:	4961      	ldr	r1, [pc, #388]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60cb      	str	r3, [r1, #12]
 8004e26:	e06f      	b.n	8004f08 <HAL_RCC_OscConfig+0x1e0>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d30a      	bcc.n	8004e48 <HAL_RCC_OscConfig+0x120>
 8004e32:	4b5d      	ldr	r3, [pc, #372]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	029b      	lsls	r3, r3, #10
 8004e40:	4959      	ldr	r1, [pc, #356]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60cb      	str	r3, [r1, #12]
 8004e46:	e05f      	b.n	8004f08 <HAL_RCC_OscConfig+0x1e0>
 8004e48:	4b57      	ldr	r3, [pc, #348]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	03db      	lsls	r3, r3, #15
 8004e56:	4954      	ldr	r1, [pc, #336]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60cb      	str	r3, [r1, #12]
 8004e5c:	e054      	b.n	8004f08 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004e5e:	4b52      	ldr	r3, [pc, #328]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	4a51      	ldr	r2, [pc, #324]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e68:	6093      	str	r3, [r2, #8]
 8004e6a:	4b4f      	ldr	r3, [pc, #316]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	494c      	ldr	r1, [pc, #304]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004e84:	d309      	bcc.n	8004e9a <HAL_RCC_OscConfig+0x172>
 8004e86:	4b48      	ldr	r3, [pc, #288]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f023 021f 	bic.w	r2, r3, #31
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	4945      	ldr	r1, [pc, #276]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60cb      	str	r3, [r1, #12]
 8004e98:	e028      	b.n	8004eec <HAL_RCC_OscConfig+0x1c4>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	da0a      	bge.n	8004eb8 <HAL_RCC_OscConfig+0x190>
 8004ea2:	4b41      	ldr	r3, [pc, #260]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	015b      	lsls	r3, r3, #5
 8004eb0:	493d      	ldr	r1, [pc, #244]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60cb      	str	r3, [r1, #12]
 8004eb6:	e019      	b.n	8004eec <HAL_RCC_OscConfig+0x1c4>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec0:	d30a      	bcc.n	8004ed8 <HAL_RCC_OscConfig+0x1b0>
 8004ec2:	4b39      	ldr	r3, [pc, #228]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	029b      	lsls	r3, r3, #10
 8004ed0:	4935      	ldr	r1, [pc, #212]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60cb      	str	r3, [r1, #12]
 8004ed6:	e009      	b.n	8004eec <HAL_RCC_OscConfig+0x1c4>
 8004ed8:	4b33      	ldr	r3, [pc, #204]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	03db      	lsls	r3, r3, #15
 8004ee6:	4930      	ldr	r1, [pc, #192]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10a      	bne.n	8004f08 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f001 f97a 	bl	80061f0 <RCC_SetFlashLatencyFromMSIRange>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	f000 bde5 	b.w	8005ad2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004f08:	f001 f8e4 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f0c:	4b27      	ldr	r3, [pc, #156]	; (8004fac <HAL_RCC_OscConfig+0x284>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fc fb8d 	bl	8001630 <HAL_InitTick>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 808a 	beq.w	800503a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f2a:	f000 bdd2 	b.w	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d066      	beq.n	8005004 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004f36:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1b      	ldr	r2, [pc, #108]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004f42:	f7fc fd13 	bl	800196c <HAL_GetTick>
 8004f46:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004f48:	e009      	b.n	8004f5e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f4a:	f7fc fd0f 	bl	800196c <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d902      	bls.n	8004f5e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	f000 bdba 	b.w	8005ad2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004f5e:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0ef      	beq.n	8004f4a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004f6a:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	4a0e      	ldr	r2, [pc, #56]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f74:	6093      	str	r3, [r2, #8]
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	4909      	ldr	r1, [pc, #36]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004f90:	d30e      	bcc.n	8004fb0 <HAL_RCC_OscConfig+0x288>
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f023 021f 	bic.w	r2, r3, #31
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	4902      	ldr	r1, [pc, #8]	; (8004fa8 <HAL_RCC_OscConfig+0x280>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60cb      	str	r3, [r1, #12]
 8004fa4:	e04a      	b.n	800503c <HAL_RCC_OscConfig+0x314>
 8004fa6:	bf00      	nop
 8004fa8:	46020c00 	.word	0x46020c00
 8004fac:	20000004 	.word	0x20000004
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	da0a      	bge.n	8004fce <HAL_RCC_OscConfig+0x2a6>
 8004fb8:	4b98      	ldr	r3, [pc, #608]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	015b      	lsls	r3, r3, #5
 8004fc6:	4995      	ldr	r1, [pc, #596]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60cb      	str	r3, [r1, #12]
 8004fcc:	e036      	b.n	800503c <HAL_RCC_OscConfig+0x314>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd6:	d30a      	bcc.n	8004fee <HAL_RCC_OscConfig+0x2c6>
 8004fd8:	4b90      	ldr	r3, [pc, #576]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	029b      	lsls	r3, r3, #10
 8004fe6:	498d      	ldr	r1, [pc, #564]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60cb      	str	r3, [r1, #12]
 8004fec:	e026      	b.n	800503c <HAL_RCC_OscConfig+0x314>
 8004fee:	4b8b      	ldr	r3, [pc, #556]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	03db      	lsls	r3, r3, #15
 8004ffc:	4987      	ldr	r1, [pc, #540]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60cb      	str	r3, [r1, #12]
 8005002:	e01b      	b.n	800503c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005004:	4b85      	ldr	r3, [pc, #532]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a84      	ldr	r2, [pc, #528]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 800500a:	f023 0301 	bic.w	r3, r3, #1
 800500e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005010:	f7fc fcac 	bl	800196c <HAL_GetTick>
 8005014:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005016:	e009      	b.n	800502c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005018:	f7fc fca8 	bl	800196c <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d902      	bls.n	800502c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	f000 bd53 	b.w	8005ad2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800502c:	4b7b      	ldr	r3, [pc, #492]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1ef      	bne.n	8005018 <HAL_RCC_OscConfig+0x2f0>
 8005038:	e000      	b.n	800503c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800503a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 808b 	beq.w	8005160 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	2b08      	cmp	r3, #8
 800504e:	d005      	beq.n	800505c <HAL_RCC_OscConfig+0x334>
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	2b0c      	cmp	r3, #12
 8005054:	d109      	bne.n	800506a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005058:	2b03      	cmp	r3, #3
 800505a:	d106      	bne.n	800506a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d17d      	bne.n	8005160 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	f000 bd34 	b.w	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005072:	d106      	bne.n	8005082 <HAL_RCC_OscConfig+0x35a>
 8005074:	4b69      	ldr	r3, [pc, #420]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a68      	ldr	r2, [pc, #416]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 800507a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	e041      	b.n	8005106 <HAL_RCC_OscConfig+0x3de>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800508a:	d112      	bne.n	80050b2 <HAL_RCC_OscConfig+0x38a>
 800508c:	4b63      	ldr	r3, [pc, #396]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a62      	ldr	r2, [pc, #392]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005092:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	4b60      	ldr	r3, [pc, #384]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a5f      	ldr	r2, [pc, #380]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 800509e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4b5d      	ldr	r3, [pc, #372]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a5c      	ldr	r2, [pc, #368]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	e029      	b.n	8005106 <HAL_RCC_OscConfig+0x3de>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80050ba:	d112      	bne.n	80050e2 <HAL_RCC_OscConfig+0x3ba>
 80050bc:	4b57      	ldr	r3, [pc, #348]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a56      	ldr	r2, [pc, #344]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	4b54      	ldr	r3, [pc, #336]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a53      	ldr	r2, [pc, #332]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	4b51      	ldr	r3, [pc, #324]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a50      	ldr	r2, [pc, #320]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	e011      	b.n	8005106 <HAL_RCC_OscConfig+0x3de>
 80050e2:	4b4e      	ldr	r3, [pc, #312]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a4d      	ldr	r2, [pc, #308]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	4b4b      	ldr	r3, [pc, #300]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a4a      	ldr	r2, [pc, #296]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	4b48      	ldr	r3, [pc, #288]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a47      	ldr	r2, [pc, #284]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005100:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005104:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d014      	beq.n	8005138 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800510e:	f7fc fc2d 	bl	800196c <HAL_GetTick>
 8005112:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005114:	e009      	b.n	800512a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005116:	f7fc fc29 	bl	800196c <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b64      	cmp	r3, #100	; 0x64
 8005122:	d902      	bls.n	800512a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	f000 bcd4 	b.w	8005ad2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800512a:	4b3c      	ldr	r3, [pc, #240]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0ef      	beq.n	8005116 <HAL_RCC_OscConfig+0x3ee>
 8005136:	e013      	b.n	8005160 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005138:	f7fc fc18 	bl	800196c <HAL_GetTick>
 800513c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800513e:	e009      	b.n	8005154 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005140:	f7fc fc14 	bl	800196c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b64      	cmp	r3, #100	; 0x64
 800514c:	d902      	bls.n	8005154 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	f000 bcbf 	b.w	8005ad2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005154:	4b31      	ldr	r3, [pc, #196]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1ef      	bne.n	8005140 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d05f      	beq.n	800522c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	2b04      	cmp	r3, #4
 8005170:	d005      	beq.n	800517e <HAL_RCC_OscConfig+0x456>
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	2b0c      	cmp	r3, #12
 8005176:	d114      	bne.n	80051a2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	2b02      	cmp	r3, #2
 800517c:	d111      	bne.n	80051a2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f000 bca3 	b.w	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800518c:	4b23      	ldr	r3, [pc, #140]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	041b      	lsls	r3, r3, #16
 800519a:	4920      	ldr	r1, [pc, #128]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 800519c:	4313      	orrs	r3, r2
 800519e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80051a0:	e044      	b.n	800522c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d024      	beq.n	80051f4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80051aa:	4b1c      	ldr	r3, [pc, #112]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1b      	ldr	r2, [pc, #108]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80051b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051b6:	f7fc fbd9 	bl	800196c <HAL_GetTick>
 80051ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051bc:	e009      	b.n	80051d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051be:	f7fc fbd5 	bl	800196c <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d902      	bls.n	80051d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	f000 bc80 	b.w	8005ad2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051d2:	4b12      	ldr	r3, [pc, #72]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0ef      	beq.n	80051be <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80051de:	4b0f      	ldr	r3, [pc, #60]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	041b      	lsls	r3, r3, #16
 80051ec:	490b      	ldr	r1, [pc, #44]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	610b      	str	r3, [r1, #16]
 80051f2:	e01b      	b.n	800522c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80051f4:	4b09      	ldr	r3, [pc, #36]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a08      	ldr	r2, [pc, #32]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80051fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051fe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005200:	f7fc fbb4 	bl	800196c <HAL_GetTick>
 8005204:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005206:	e00b      	b.n	8005220 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005208:	f7fc fbb0 	bl	800196c <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d904      	bls.n	8005220 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	f000 bc5b 	b.w	8005ad2 <HAL_RCC_OscConfig+0xdaa>
 800521c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005220:	4baf      	ldr	r3, [pc, #700]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1ed      	bne.n	8005208 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80c8 	beq.w	80053ca <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800523a:	2300      	movs	r3, #0
 800523c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005240:	4ba7      	ldr	r3, [pc, #668]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 8005242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	d111      	bne.n	8005272 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800524e:	4ba4      	ldr	r3, [pc, #656]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 8005250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005254:	4aa2      	ldr	r2, [pc, #648]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 8005256:	f043 0304 	orr.w	r3, r3, #4
 800525a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800525e:	4ba0      	ldr	r3, [pc, #640]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 8005260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005272:	4b9c      	ldr	r3, [pc, #624]	; (80054e4 <HAL_RCC_OscConfig+0x7bc>)
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d119      	bne.n	80052b2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800527e:	4b99      	ldr	r3, [pc, #612]	; (80054e4 <HAL_RCC_OscConfig+0x7bc>)
 8005280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005282:	4a98      	ldr	r2, [pc, #608]	; (80054e4 <HAL_RCC_OscConfig+0x7bc>)
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800528a:	f7fc fb6f 	bl	800196c <HAL_GetTick>
 800528e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005290:	e009      	b.n	80052a6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005292:	f7fc fb6b 	bl	800196c <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d902      	bls.n	80052a6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	f000 bc16 	b.w	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052a6:	4b8f      	ldr	r3, [pc, #572]	; (80054e4 <HAL_RCC_OscConfig+0x7bc>)
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0ef      	beq.n	8005292 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d05f      	beq.n	800537a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80052ba:	4b89      	ldr	r3, [pc, #548]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 80052bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052c0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d037      	beq.n	8005340 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d006      	beq.n	80052e8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e3f4      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01b      	beq.n	800532a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80052f2:	4b7b      	ldr	r3, [pc, #492]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 80052f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052f8:	4a79      	ldr	r2, [pc, #484]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 80052fa:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80052fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8005302:	f7fc fb33 	bl	800196c <HAL_GetTick>
 8005306:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800530a:	f7fc fb2f 	bl	800196c <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b05      	cmp	r3, #5
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e3da      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800531c:	4b70      	ldr	r3, [pc, #448]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 800531e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1ef      	bne.n	800530a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800532a:	4b6d      	ldr	r3, [pc, #436]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 800532c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005330:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	4969      	ldr	r1, [pc, #420]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005340:	4b67      	ldr	r3, [pc, #412]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 8005342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005346:	4a66      	ldr	r2, [pc, #408]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 8005348:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800534c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005350:	f7fc fb0c 	bl	800196c <HAL_GetTick>
 8005354:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005358:	f7fc fb08 	bl	800196c <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b05      	cmp	r3, #5
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e3b3      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800536a:	4b5d      	ldr	r3, [pc, #372]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 800536c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0ef      	beq.n	8005358 <HAL_RCC_OscConfig+0x630>
 8005378:	e01b      	b.n	80053b2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800537a:	4b59      	ldr	r3, [pc, #356]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 800537c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005380:	4a57      	ldr	r2, [pc, #348]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 8005382:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005386:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800538a:	f7fc faef 	bl	800196c <HAL_GetTick>
 800538e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005392:	f7fc faeb 	bl	800196c <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b05      	cmp	r3, #5
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e396      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80053a4:	4b4e      	ldr	r3, [pc, #312]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 80053a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1ef      	bne.n	8005392 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053b2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d107      	bne.n	80053ca <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ba:	4b49      	ldr	r3, [pc, #292]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 80053bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c0:	4a47      	ldr	r2, [pc, #284]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 80053c2:	f023 0304 	bic.w	r3, r3, #4
 80053c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8111 	beq.w	80055fa <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80053d8:	2300      	movs	r3, #0
 80053da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053de:	4b40      	ldr	r3, [pc, #256]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 80053e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d111      	bne.n	8005410 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ec:	4b3c      	ldr	r3, [pc, #240]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 80053ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053f2:	4a3b      	ldr	r2, [pc, #236]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 80053f4:	f043 0304 	orr.w	r3, r3, #4
 80053f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80053fc:	4b38      	ldr	r3, [pc, #224]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 80053fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	613b      	str	r3, [r7, #16]
 8005408:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800540a:	2301      	movs	r3, #1
 800540c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005410:	4b34      	ldr	r3, [pc, #208]	; (80054e4 <HAL_RCC_OscConfig+0x7bc>)
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d118      	bne.n	800544e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800541c:	4b31      	ldr	r3, [pc, #196]	; (80054e4 <HAL_RCC_OscConfig+0x7bc>)
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	4a30      	ldr	r2, [pc, #192]	; (80054e4 <HAL_RCC_OscConfig+0x7bc>)
 8005422:	f043 0301 	orr.w	r3, r3, #1
 8005426:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005428:	f7fc faa0 	bl	800196c <HAL_GetTick>
 800542c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005430:	f7fc fa9c 	bl	800196c <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e347      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005442:	4b28      	ldr	r3, [pc, #160]	; (80054e4 <HAL_RCC_OscConfig+0x7bc>)
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01f      	beq.n	800549a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	d010      	beq.n	8005488 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005466:	4b1e      	ldr	r3, [pc, #120]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 8005468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800546c:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 800546e:	f043 0304 	orr.w	r3, r3, #4
 8005472:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005476:	4b1a      	ldr	r3, [pc, #104]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 8005478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800547c:	4a18      	ldr	r2, [pc, #96]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005486:	e018      	b.n	80054ba <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005488:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 800548a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800548e:	4a14      	ldr	r2, [pc, #80]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005498:	e00f      	b.n	80054ba <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800549a:	4b11      	ldr	r3, [pc, #68]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 800549c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054a0:	4a0f      	ldr	r2, [pc, #60]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80054aa:	4b0d      	ldr	r3, [pc, #52]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 80054ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054b0:	4a0b      	ldr	r2, [pc, #44]	; (80054e0 <HAL_RCC_OscConfig+0x7b8>)
 80054b2:	f023 0304 	bic.w	r3, r3, #4
 80054b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d057      	beq.n	8005572 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80054c2:	f7fc fa53 	bl	800196c <HAL_GetTick>
 80054c6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c8:	e00e      	b.n	80054e8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ca:	f7fc fa4f 	bl	800196c <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d8:	4293      	cmp	r3, r2
 80054da:	d905      	bls.n	80054e8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e2f8      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
 80054e0:	46020c00 	.word	0x46020c00
 80054e4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e8:	4b9c      	ldr	r3, [pc, #624]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 80054ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0e9      	beq.n	80054ca <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01b      	beq.n	800553a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005502:	4b96      	ldr	r3, [pc, #600]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005508:	4a94      	ldr	r2, [pc, #592]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 800550a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005512:	e00a      	b.n	800552a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005514:	f7fc fa2a 	bl	800196c <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005522:	4293      	cmp	r3, r2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e2d3      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800552a:	4b8c      	ldr	r3, [pc, #560]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 800552c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0ed      	beq.n	8005514 <HAL_RCC_OscConfig+0x7ec>
 8005538:	e053      	b.n	80055e2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800553a:	4b88      	ldr	r3, [pc, #544]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 800553c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005540:	4a86      	ldr	r2, [pc, #536]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005546:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800554a:	e00a      	b.n	8005562 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554c:	f7fc fa0e 	bl	800196c <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	; 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e2b7      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005562:	4b7e      	ldr	r3, [pc, #504]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1ed      	bne.n	800554c <HAL_RCC_OscConfig+0x824>
 8005570:	e037      	b.n	80055e2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005572:	f7fc f9fb 	bl	800196c <HAL_GetTick>
 8005576:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005578:	e00a      	b.n	8005590 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800557a:	f7fc f9f7 	bl	800196c <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	f241 3288 	movw	r2, #5000	; 0x1388
 8005588:	4293      	cmp	r3, r2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e2a0      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005590:	4b72      	ldr	r3, [pc, #456]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1ed      	bne.n	800557a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800559e:	4b6f      	ldr	r3, [pc, #444]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 80055a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01a      	beq.n	80055e2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80055ac:	4b6b      	ldr	r3, [pc, #428]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 80055ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055b2:	4a6a      	ldr	r2, [pc, #424]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 80055b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80055bc:	e00a      	b.n	80055d4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055be:	f7fc f9d5 	bl	800196c <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e27e      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80055d4:	4b61      	ldr	r3, [pc, #388]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 80055d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1ed      	bne.n	80055be <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d107      	bne.n	80055fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ea:	4b5c      	ldr	r3, [pc, #368]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 80055ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055f0:	4a5a      	ldr	r2, [pc, #360]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 80055f2:	f023 0304 	bic.w	r3, r3, #4
 80055f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0320 	and.w	r3, r3, #32
 8005602:	2b00      	cmp	r3, #0
 8005604:	d036      	beq.n	8005674 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d019      	beq.n	8005642 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800560e:	4b53      	ldr	r3, [pc, #332]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a52      	ldr	r2, [pc, #328]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005614:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005618:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800561a:	f7fc f9a7 	bl	800196c <HAL_GetTick>
 800561e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005622:	f7fc f9a3 	bl	800196c <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e24e      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005634:	4b49      	ldr	r3, [pc, #292]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0f0      	beq.n	8005622 <HAL_RCC_OscConfig+0x8fa>
 8005640:	e018      	b.n	8005674 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005642:	4b46      	ldr	r3, [pc, #280]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a45      	ldr	r2, [pc, #276]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800564c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800564e:	f7fc f98d 	bl	800196c <HAL_GetTick>
 8005652:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005656:	f7fc f989 	bl	800196c <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e234      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005668:	4b3c      	ldr	r3, [pc, #240]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1f0      	bne.n	8005656 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567c:	2b00      	cmp	r3, #0
 800567e:	d036      	beq.n	80056ee <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	2b00      	cmp	r3, #0
 8005686:	d019      	beq.n	80056bc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005688:	4b34      	ldr	r3, [pc, #208]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a33      	ldr	r2, [pc, #204]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 800568e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005692:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005694:	f7fc f96a 	bl	800196c <HAL_GetTick>
 8005698:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800569a:	e008      	b.n	80056ae <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800569c:	f7fc f966 	bl	800196c <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e211      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80056ae:	4b2b      	ldr	r3, [pc, #172]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0f0      	beq.n	800569c <HAL_RCC_OscConfig+0x974>
 80056ba:	e018      	b.n	80056ee <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80056bc:	4b27      	ldr	r3, [pc, #156]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a26      	ldr	r2, [pc, #152]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 80056c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80056c8:	f7fc f950 	bl	800196c <HAL_GetTick>
 80056cc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80056d0:	f7fc f94c 	bl	800196c <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e1f7      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80056e2:	4b1e      	ldr	r3, [pc, #120]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f0      	bne.n	80056d0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d07f      	beq.n	80057fa <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d062      	beq.n	80057c8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005702:	4b16      	ldr	r3, [pc, #88]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	4a15      	ldr	r2, [pc, #84]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005708:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800570c:	6093      	str	r3, [r2, #8]
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	4910      	ldr	r1, [pc, #64]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 800571c:	4313      	orrs	r3, r2
 800571e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005728:	d309      	bcc.n	800573e <HAL_RCC_OscConfig+0xa16>
 800572a:	4b0c      	ldr	r3, [pc, #48]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f023 021f 	bic.w	r2, r3, #31
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	4909      	ldr	r1, [pc, #36]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005738:	4313      	orrs	r3, r2
 800573a:	60cb      	str	r3, [r1, #12]
 800573c:	e02a      	b.n	8005794 <HAL_RCC_OscConfig+0xa6c>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	da0c      	bge.n	8005760 <HAL_RCC_OscConfig+0xa38>
 8005746:	4b05      	ldr	r3, [pc, #20]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	015b      	lsls	r3, r3, #5
 8005754:	4901      	ldr	r1, [pc, #4]	; (800575c <HAL_RCC_OscConfig+0xa34>)
 8005756:	4313      	orrs	r3, r2
 8005758:	60cb      	str	r3, [r1, #12]
 800575a:	e01b      	b.n	8005794 <HAL_RCC_OscConfig+0xa6c>
 800575c:	46020c00 	.word	0x46020c00
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005768:	d30a      	bcc.n	8005780 <HAL_RCC_OscConfig+0xa58>
 800576a:	4ba1      	ldr	r3, [pc, #644]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	029b      	lsls	r3, r3, #10
 8005778:	499d      	ldr	r1, [pc, #628]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 800577a:	4313      	orrs	r3, r2
 800577c:	60cb      	str	r3, [r1, #12]
 800577e:	e009      	b.n	8005794 <HAL_RCC_OscConfig+0xa6c>
 8005780:	4b9b      	ldr	r3, [pc, #620]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	03db      	lsls	r3, r3, #15
 800578e:	4998      	ldr	r1, [pc, #608]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005790:	4313      	orrs	r3, r2
 8005792:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005794:	4b96      	ldr	r3, [pc, #600]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a95      	ldr	r2, [pc, #596]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 800579a:	f043 0310 	orr.w	r3, r3, #16
 800579e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80057a0:	f7fc f8e4 	bl	800196c <HAL_GetTick>
 80057a4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80057a8:	f7fc f8e0 	bl	800196c <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e18b      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80057ba:	4b8d      	ldr	r3, [pc, #564]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0xa80>
 80057c6:	e018      	b.n	80057fa <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80057c8:	4b89      	ldr	r3, [pc, #548]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a88      	ldr	r2, [pc, #544]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 80057ce:	f023 0310 	bic.w	r3, r3, #16
 80057d2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80057d4:	f7fc f8ca 	bl	800196c <HAL_GetTick>
 80057d8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80057dc:	f7fc f8c6 	bl	800196c <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e171      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80057ee:	4b80      	ldr	r3, [pc, #512]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f0      	bne.n	80057dc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8166 	beq.w	8005ad0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005804:	2300      	movs	r3, #0
 8005806:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800580a:	4b79      	ldr	r3, [pc, #484]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b0c      	cmp	r3, #12
 8005814:	f000 80f2 	beq.w	80059fc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	2b02      	cmp	r3, #2
 800581e:	f040 80c5 	bne.w	80059ac <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005822:	4b73      	ldr	r3, [pc, #460]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a72      	ldr	r2, [pc, #456]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005828:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800582c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800582e:	f7fc f89d 	bl	800196c <HAL_GetTick>
 8005832:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005836:	f7fc f899 	bl	800196c <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e144      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005848:	4b69      	ldr	r3, [pc, #420]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1f0      	bne.n	8005836 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005854:	4b66      	ldr	r3, [pc, #408]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b00      	cmp	r3, #0
 8005860:	d111      	bne.n	8005886 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005862:	4b63      	ldr	r3, [pc, #396]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005868:	4a61      	ldr	r2, [pc, #388]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 800586a:	f043 0304 	orr.w	r3, r3, #4
 800586e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005872:	4b5f      	ldr	r3, [pc, #380]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005880:	2301      	movs	r3, #1
 8005882:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005886:	4b5b      	ldr	r3, [pc, #364]	; (80059f4 <HAL_RCC_OscConfig+0xccc>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800588e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005892:	d102      	bne.n	800589a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005894:	2301      	movs	r3, #1
 8005896:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800589a:	4b56      	ldr	r3, [pc, #344]	; (80059f4 <HAL_RCC_OscConfig+0xccc>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	4a55      	ldr	r2, [pc, #340]	; (80059f4 <HAL_RCC_OscConfig+0xccc>)
 80058a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058a4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80058a6:	4b52      	ldr	r3, [pc, #328]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ae:	f023 0303 	bic.w	r3, r3, #3
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058ba:	3a01      	subs	r2, #1
 80058bc:	0212      	lsls	r2, r2, #8
 80058be:	4311      	orrs	r1, r2
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80058c4:	430a      	orrs	r2, r1
 80058c6:	494a      	ldr	r1, [pc, #296]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	628b      	str	r3, [r1, #40]	; 0x28
 80058cc:	4b48      	ldr	r3, [pc, #288]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 80058ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058d0:	4b49      	ldr	r3, [pc, #292]	; (80059f8 <HAL_RCC_OscConfig+0xcd0>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058d8:	3a01      	subs	r2, #1
 80058da:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80058e2:	3a01      	subs	r2, #1
 80058e4:	0252      	lsls	r2, r2, #9
 80058e6:	b292      	uxth	r2, r2
 80058e8:	4311      	orrs	r1, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80058ee:	3a01      	subs	r2, #1
 80058f0:	0412      	lsls	r2, r2, #16
 80058f2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80058f6:	4311      	orrs	r1, r2
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80058fc:	3a01      	subs	r2, #1
 80058fe:	0612      	lsls	r2, r2, #24
 8005900:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005904:	430a      	orrs	r2, r1
 8005906:	493a      	ldr	r1, [pc, #232]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005908:	4313      	orrs	r3, r2
 800590a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800590c:	4b38      	ldr	r3, [pc, #224]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	4a37      	ldr	r2, [pc, #220]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005912:	f023 0310 	bic.w	r3, r3, #16
 8005916:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591c:	4a34      	ldr	r2, [pc, #208]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005922:	4b33      	ldr	r3, [pc, #204]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	4a32      	ldr	r2, [pc, #200]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005928:	f043 0310 	orr.w	r3, r3, #16
 800592c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800592e:	4b30      	ldr	r3, [pc, #192]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005932:	f023 020c 	bic.w	r2, r3, #12
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	492d      	ldr	r1, [pc, #180]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 800593c:	4313      	orrs	r3, r2
 800593e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005940:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005944:	2b01      	cmp	r3, #1
 8005946:	d105      	bne.n	8005954 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005948:	4b2a      	ldr	r3, [pc, #168]	; (80059f4 <HAL_RCC_OscConfig+0xccc>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	4a29      	ldr	r2, [pc, #164]	; (80059f4 <HAL_RCC_OscConfig+0xccc>)
 800594e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005952:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005954:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005958:	2b01      	cmp	r3, #1
 800595a:	d107      	bne.n	800596c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800595c:	4b24      	ldr	r3, [pc, #144]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 800595e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005962:	4a23      	ldr	r2, [pc, #140]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005964:	f023 0304 	bic.w	r3, r3, #4
 8005968:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800596c:	4b20      	ldr	r3, [pc, #128]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 8005972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005976:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005978:	4b1d      	ldr	r3, [pc, #116]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 800597e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005982:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005984:	f7fb fff2 	bl	800196c <HAL_GetTick>
 8005988:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800598c:	f7fb ffee 	bl	800196c <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e099      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800599e:	4b14      	ldr	r3, [pc, #80]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCC_OscConfig+0xc64>
 80059aa:	e091      	b.n	8005ad0 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80059ac:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a0f      	ldr	r2, [pc, #60]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 80059b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059b6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80059b8:	f7fb ffd8 	bl	800196c <HAL_GetTick>
 80059bc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c0:	f7fb ffd4 	bl	800196c <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e07f      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80059d2:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1f0      	bne.n	80059c0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80059de:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 80059e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e2:	4a03      	ldr	r2, [pc, #12]	; (80059f0 <HAL_RCC_OscConfig+0xcc8>)
 80059e4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80059e8:	f023 0303 	bic.w	r3, r3, #3
 80059ec:	6293      	str	r3, [r2, #40]	; 0x28
 80059ee:	e06f      	b.n	8005ad0 <HAL_RCC_OscConfig+0xda8>
 80059f0:	46020c00 	.word	0x46020c00
 80059f4:	46020800 	.word	0x46020800
 80059f8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80059fc:	4b37      	ldr	r3, [pc, #220]	; (8005adc <HAL_RCC_OscConfig+0xdb4>)
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a02:	4b36      	ldr	r3, [pc, #216]	; (8005adc <HAL_RCC_OscConfig+0xdb4>)
 8005a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a06:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d039      	beq.n	8005a84 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f003 0203 	and.w	r2, r3, #3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d132      	bne.n	8005a84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	0a1b      	lsrs	r3, r3, #8
 8005a22:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d129      	bne.n	8005a84 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d122      	bne.n	8005a84 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a48:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d11a      	bne.n	8005a84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	0a5b      	lsrs	r3, r3, #9
 8005a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d111      	bne.n	8005a84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	0c1b      	lsrs	r3, r3, #16
 8005a64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d108      	bne.n	8005a84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	0e1b      	lsrs	r3, r3, #24
 8005a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e024      	b.n	8005ad2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005a88:	4b14      	ldr	r3, [pc, #80]	; (8005adc <HAL_RCC_OscConfig+0xdb4>)
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	08db      	lsrs	r3, r3, #3
 8005a8e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d01a      	beq.n	8005ad0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <HAL_RCC_OscConfig+0xdb4>)
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	4a0f      	ldr	r2, [pc, #60]	; (8005adc <HAL_RCC_OscConfig+0xdb4>)
 8005aa0:	f023 0310 	bic.w	r3, r3, #16
 8005aa4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa6:	f7fb ff61 	bl	800196c <HAL_GetTick>
 8005aaa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005aac:	bf00      	nop
 8005aae:	f7fb ff5d 	bl	800196c <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d0f9      	beq.n	8005aae <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abe:	4a07      	ldr	r2, [pc, #28]	; (8005adc <HAL_RCC_OscConfig+0xdb4>)
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <HAL_RCC_OscConfig+0xdb4>)
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	4a04      	ldr	r2, [pc, #16]	; (8005adc <HAL_RCC_OscConfig+0xdb4>)
 8005aca:	f043 0310 	orr.w	r3, r3, #16
 8005ace:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3738      	adds	r7, #56	; 0x38
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	46020c00 	.word	0x46020c00

08005ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e1d9      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005af4:	4b9b      	ldr	r3, [pc, #620]	; (8005d64 <HAL_RCC_ClockConfig+0x284>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d910      	bls.n	8005b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b98      	ldr	r3, [pc, #608]	; (8005d64 <HAL_RCC_ClockConfig+0x284>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f023 020f 	bic.w	r2, r3, #15
 8005b0a:	4996      	ldr	r1, [pc, #600]	; (8005d64 <HAL_RCC_ClockConfig+0x284>)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b12:	4b94      	ldr	r3, [pc, #592]	; (8005d64 <HAL_RCC_ClockConfig+0x284>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d001      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e1c1      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d010      	beq.n	8005b52 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	4b8c      	ldr	r3, [pc, #560]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d908      	bls.n	8005b52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005b40:	4b89      	ldr	r3, [pc, #548]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	4986      	ldr	r1, [pc, #536]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d012      	beq.n	8005b84 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	4b81      	ldr	r3, [pc, #516]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	091b      	lsrs	r3, r3, #4
 8005b68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d909      	bls.n	8005b84 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005b70:	4b7d      	ldr	r3, [pc, #500]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	497a      	ldr	r1, [pc, #488]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d010      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	4b74      	ldr	r3, [pc, #464]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d908      	bls.n	8005bb2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005ba0:	4b71      	ldr	r3, [pc, #452]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	496e      	ldr	r1, [pc, #440]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d010      	beq.n	8005be0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	4b69      	ldr	r3, [pc, #420]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d908      	bls.n	8005be0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005bce:	4b66      	ldr	r3, [pc, #408]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f023 020f 	bic.w	r2, r3, #15
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	4963      	ldr	r1, [pc, #396]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80d2 	beq.w	8005d92 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d143      	bne.n	8005c82 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bfa:	4b5b      	ldr	r3, [pc, #364]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d110      	bne.n	8005c2a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005c08:	4b57      	ldr	r3, [pc, #348]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c0e:	4a56      	ldr	r2, [pc, #344]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005c10:	f043 0304 	orr.w	r3, r3, #4
 8005c14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005c18:	4b53      	ldr	r3, [pc, #332]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	60bb      	str	r3, [r7, #8]
 8005c24:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005c26:	2301      	movs	r3, #1
 8005c28:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005c2a:	f7fb fe9f 	bl	800196c <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005c30:	4b4e      	ldr	r3, [pc, #312]	; (8005d6c <HAL_RCC_ClockConfig+0x28c>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00f      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005c3e:	f7fb fe95 	bl	800196c <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e12b      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005c50:	4b46      	ldr	r3, [pc, #280]	; (8005d6c <HAL_RCC_ClockConfig+0x28c>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0f0      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005c5c:	7dfb      	ldrb	r3, [r7, #23]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d107      	bne.n	8005c72 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005c62:	4b41      	ldr	r3, [pc, #260]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c68:	4a3f      	ldr	r2, [pc, #252]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005c6a:	f023 0304 	bic.w	r3, r3, #4
 8005c6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005c72:	4b3d      	ldr	r3, [pc, #244]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d121      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e112      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d107      	bne.n	8005c9a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c8a:	4b37      	ldr	r3, [pc, #220]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d115      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e106      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d107      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005ca2:	4b31      	ldr	r3, [pc, #196]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d109      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e0fa      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cb2:	4b2d      	ldr	r3, [pc, #180]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e0f2      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005cc2:	4b29      	ldr	r3, [pc, #164]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f023 0203 	bic.w	r2, r3, #3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	4926      	ldr	r1, [pc, #152]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005cd4:	f7fb fe4a 	bl	800196c <HAL_GetTick>
 8005cd8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d112      	bne.n	8005d08 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ce2:	e00a      	b.n	8005cfa <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce4:	f7fb fe42 	bl	800196c <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e0d6      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cfa:	4b1b      	ldr	r3, [pc, #108]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
 8005d02:	2b0c      	cmp	r3, #12
 8005d04:	d1ee      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x204>
 8005d06:	e044      	b.n	8005d92 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d112      	bne.n	8005d36 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d10:	e00a      	b.n	8005d28 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d12:	f7fb fe2b 	bl	800196c <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e0bf      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d28:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f003 030c 	and.w	r3, r3, #12
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d1ee      	bne.n	8005d12 <HAL_RCC_ClockConfig+0x232>
 8005d34:	e02d      	b.n	8005d92 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d123      	bne.n	8005d86 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d3e:	e00a      	b.n	8005d56 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d40:	f7fb fe14 	bl	800196c <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e0a8      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d56:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <HAL_RCC_ClockConfig+0x288>)
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f003 030c 	and.w	r3, r3, #12
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1ee      	bne.n	8005d40 <HAL_RCC_ClockConfig+0x260>
 8005d62:	e016      	b.n	8005d92 <HAL_RCC_ClockConfig+0x2b2>
 8005d64:	40022000 	.word	0x40022000
 8005d68:	46020c00 	.word	0x46020c00
 8005d6c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d70:	f7fb fdfc 	bl	800196c <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e090      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d86:	4b4a      	ldr	r3, [pc, #296]	; (8005eb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	f003 030c 	and.w	r3, r3, #12
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d1ee      	bne.n	8005d70 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d010      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	4b43      	ldr	r3, [pc, #268]	; (8005eb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d208      	bcs.n	8005dc0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005dae:	4b40      	ldr	r3, [pc, #256]	; (8005eb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f023 020f 	bic.w	r2, r3, #15
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	493d      	ldr	r1, [pc, #244]	; (8005eb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b3c      	ldr	r3, [pc, #240]	; (8005eb4 <HAL_RCC_ClockConfig+0x3d4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d210      	bcs.n	8005df0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b39      	ldr	r3, [pc, #228]	; (8005eb4 <HAL_RCC_ClockConfig+0x3d4>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 020f 	bic.w	r2, r3, #15
 8005dd6:	4937      	ldr	r1, [pc, #220]	; (8005eb4 <HAL_RCC_ClockConfig+0x3d4>)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dde:	4b35      	ldr	r3, [pc, #212]	; (8005eb4 <HAL_RCC_ClockConfig+0x3d4>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d001      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e05b      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d010      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	4b2b      	ldr	r3, [pc, #172]	; (8005eb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d208      	bcs.n	8005e1e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005e0c:	4b28      	ldr	r3, [pc, #160]	; (8005eb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4925      	ldr	r1, [pc, #148]	; (8005eb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d012      	beq.n	8005e50 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691a      	ldr	r2, [r3, #16]
 8005e2e:	4b20      	ldr	r3, [pc, #128]	; (8005eb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	091b      	lsrs	r3, r3, #4
 8005e34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d209      	bcs.n	8005e50 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005e3c:	4b1c      	ldr	r3, [pc, #112]	; (8005eb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	011b      	lsls	r3, r3, #4
 8005e4a:	4919      	ldr	r1, [pc, #100]	; (8005eb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0310 	and.w	r3, r3, #16
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d010      	beq.n	8005e7e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	4b13      	ldr	r3, [pc, #76]	; (8005eb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d208      	bcs.n	8005e7e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005e6c:	4b10      	ldr	r3, [pc, #64]	; (8005eb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	490d      	ldr	r1, [pc, #52]	; (8005eb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005e7e:	f000 f821 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8005e82:	4602      	mov	r2, r0
 8005e84:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	490a      	ldr	r1, [pc, #40]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d8>)
 8005e8e:	5ccb      	ldrb	r3, [r1, r3]
 8005e90:	fa22 f303 	lsr.w	r3, r2, r3
 8005e94:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <HAL_RCC_ClockConfig+0x3dc>)
 8005e96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e98:	4b09      	ldr	r3, [pc, #36]	; (8005ec0 <HAL_RCC_ClockConfig+0x3e0>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fb fbc7 	bl	8001630 <HAL_InitTick>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	73fb      	strb	r3, [r7, #15]

  return status;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	46020c00 	.word	0x46020c00
 8005eb4:	40022000 	.word	0x40022000
 8005eb8:	0801595c 	.word	0x0801595c
 8005ebc:	20000000 	.word	0x20000000
 8005ec0:	20000004 	.word	0x20000004

08005ec4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b08b      	sub	sp, #44	; 0x2c
 8005ec8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ed2:	4b7b      	ldr	r3, [pc, #492]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f003 030c 	and.w	r3, r3, #12
 8005eda:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005edc:	4b78      	ldr	r3, [pc, #480]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	2b0c      	cmp	r3, #12
 8005ef0:	d121      	bne.n	8005f36 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d11e      	bne.n	8005f36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005ef8:	4b71      	ldr	r3, [pc, #452]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d107      	bne.n	8005f14 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005f04:	4b6e      	ldr	r3, [pc, #440]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f0a:	0b1b      	lsrs	r3, r3, #12
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
 8005f12:	e005      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005f14:	4b6a      	ldr	r3, [pc, #424]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	0f1b      	lsrs	r3, r3, #28
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f20:	4a68      	ldr	r2, [pc, #416]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d110      	bne.n	8005f52 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f34:	e00d      	b.n	8005f52 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f36:	4b62      	ldr	r3, [pc, #392]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f003 030c 	and.w	r3, r3, #12
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d102      	bne.n	8005f48 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f42:	4b61      	ldr	r3, [pc, #388]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f44:	623b      	str	r3, [r7, #32]
 8005f46:	e004      	b.n	8005f52 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2b08      	cmp	r3, #8
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f4e:	4b5e      	ldr	r3, [pc, #376]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f50:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b0c      	cmp	r3, #12
 8005f56:	f040 80ac 	bne.w	80060b2 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005f5a:	4b59      	ldr	r3, [pc, #356]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005f64:	4b56      	ldr	r3, [pc, #344]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	0a1b      	lsrs	r3, r3, #8
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	3301      	adds	r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005f72:	4b53      	ldr	r3, [pc, #332]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	091b      	lsrs	r3, r3, #4
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005f7e:	4b50      	ldr	r3, [pc, #320]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	08db      	lsrs	r3, r3, #3
 8005f84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f96:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8086 	beq.w	80060ae <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d003      	beq.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xec>
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d022      	beq.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x130>
 8005fae:	e043      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fba:	eddf 6a44 	vldr	s13, [pc, #272]	; 80060cc <HAL_RCC_GetSysClockFreq+0x208>
 8005fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc2:	4b3f      	ldr	r3, [pc, #252]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005fd2:	ed97 6a01 	vldr	s12, [r7, #4]
 8005fd6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80060d0 <HAL_RCC_GetSysClockFreq+0x20c>
 8005fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fee:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005ff2:	e046      	b.n	8006082 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffe:	eddf 6a33 	vldr	s13, [pc, #204]	; 80060cc <HAL_RCC_GetSysClockFreq+0x208>
 8006002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006006:	4b2e      	ldr	r3, [pc, #184]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006016:	ed97 6a01 	vldr	s12, [r7, #4]
 800601a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80060d0 <HAL_RCC_GetSysClockFreq+0x20c>
 800601e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006022:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800602a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800602e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006032:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8006036:	e024      	b.n	8006082 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	ee07 3a90 	vmov	s15, r3
 800603e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	ee07 3a90 	vmov	s15, r3
 8006048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006050:	4b1b      	ldr	r3, [pc, #108]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006060:	ed97 6a01 	vldr	s12, [r7, #4]
 8006064:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80060d0 <HAL_RCC_GetSysClockFreq+0x20c>
 8006068:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800606c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006070:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006074:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607c:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8006080:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006082:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006086:	0e1b      	lsrs	r3, r3, #24
 8006088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800608c:	3301      	adds	r3, #1
 800608e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800609a:	edd7 6a07 	vldr	s13, [r7, #28]
 800609e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060a6:	ee17 3a90 	vmov	r3, s15
 80060aa:	623b      	str	r3, [r7, #32]
 80060ac:	e001      	b.n	80060b2 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80060b2:	6a3b      	ldr	r3, [r7, #32]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	372c      	adds	r7, #44	; 0x2c
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	46020c00 	.word	0x46020c00
 80060c4:	08015974 	.word	0x08015974
 80060c8:	00f42400 	.word	0x00f42400
 80060cc:	4b742400 	.word	0x4b742400
 80060d0:	46000000 	.word	0x46000000

080060d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80060d8:	f7ff fef4 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 80060dc:	4602      	mov	r2, r0
 80060de:	4b07      	ldr	r3, [pc, #28]	; (80060fc <HAL_RCC_GetHCLKFreq+0x28>)
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	4906      	ldr	r1, [pc, #24]	; (8006100 <HAL_RCC_GetHCLKFreq+0x2c>)
 80060e8:	5ccb      	ldrb	r3, [r1, r3]
 80060ea:	fa22 f303 	lsr.w	r3, r2, r3
 80060ee:	4a05      	ldr	r2, [pc, #20]	; (8006104 <HAL_RCC_GetHCLKFreq+0x30>)
 80060f0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80060f2:	4b04      	ldr	r3, [pc, #16]	; (8006104 <HAL_RCC_GetHCLKFreq+0x30>)
 80060f4:	681b      	ldr	r3, [r3, #0]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	46020c00 	.word	0x46020c00
 8006100:	0801595c 	.word	0x0801595c
 8006104:	20000000 	.word	0x20000000

08006108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800610c:	f7ff ffe2 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 8006110:	4602      	mov	r2, r0
 8006112:	4b05      	ldr	r3, [pc, #20]	; (8006128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	091b      	lsrs	r3, r3, #4
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	4903      	ldr	r1, [pc, #12]	; (800612c <HAL_RCC_GetPCLK1Freq+0x24>)
 800611e:	5ccb      	ldrb	r3, [r1, r3]
 8006120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006124:	4618      	mov	r0, r3
 8006126:	bd80      	pop	{r7, pc}
 8006128:	46020c00 	.word	0x46020c00
 800612c:	0801596c 	.word	0x0801596c

08006130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006134:	f7ff ffce 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 8006138:	4602      	mov	r2, r0
 800613a:	4b05      	ldr	r3, [pc, #20]	; (8006150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	4903      	ldr	r1, [pc, #12]	; (8006154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006146:	5ccb      	ldrb	r3, [r1, r3]
 8006148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800614c:	4618      	mov	r0, r3
 800614e:	bd80      	pop	{r7, pc}
 8006150:	46020c00 	.word	0x46020c00
 8006154:	0801596c 	.word	0x0801596c

08006158 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800615c:	f7ff ffba 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 8006160:	4602      	mov	r2, r0
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <HAL_RCC_GetPCLK3Freq+0x20>)
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	091b      	lsrs	r3, r3, #4
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	4903      	ldr	r1, [pc, #12]	; (800617c <HAL_RCC_GetPCLK3Freq+0x24>)
 800616e:	5ccb      	ldrb	r3, [r1, r3]
 8006170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006174:	4618      	mov	r0, r3
 8006176:	bd80      	pop	{r7, pc}
 8006178:	46020c00 	.word	0x46020c00
 800617c:	0801596c 	.word	0x0801596c

08006180 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	221f      	movs	r2, #31
 800618e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006190:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <HAL_RCC_GetClockConfig+0x68>)
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f003 0203 	and.w	r2, r3, #3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800619c:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <HAL_RCC_GetClockConfig+0x68>)
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	f003 020f 	and.w	r2, r3, #15
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80061a8:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <HAL_RCC_GetClockConfig+0x68>)
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80061b4:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <HAL_RCC_GetClockConfig+0x68>)
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	091b      	lsrs	r3, r3, #4
 80061ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80061c2:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <HAL_RCC_GetClockConfig+0x68>)
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061ce:	4b07      	ldr	r3, [pc, #28]	; (80061ec <HAL_RCC_GetClockConfig+0x6c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 020f 	and.w	r2, r3, #15
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	601a      	str	r2, [r3, #0]
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	46020c00 	.word	0x46020c00
 80061ec:	40022000 	.word	0x40022000

080061f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80061f8:	4b3e      	ldr	r3, [pc, #248]	; (80062f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80061fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006206:	f7fe fcd5 	bl	8004bb4 <HAL_PWREx_GetVoltageRange>
 800620a:	6178      	str	r0, [r7, #20]
 800620c:	e019      	b.n	8006242 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800620e:	4b39      	ldr	r3, [pc, #228]	; (80062f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006214:	4a37      	ldr	r2, [pc, #220]	; (80062f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006216:	f043 0304 	orr.w	r3, r3, #4
 800621a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800621e:	4b35      	ldr	r3, [pc, #212]	; (80062f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800622c:	f7fe fcc2 	bl	8004bb4 <HAL_PWREx_GetVoltageRange>
 8006230:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006232:	4b30      	ldr	r3, [pc, #192]	; (80062f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006238:	4a2e      	ldr	r2, [pc, #184]	; (80062f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800623a:	f023 0304 	bic.w	r3, r3, #4
 800623e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006248:	d003      	beq.n	8006252 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006250:	d109      	bne.n	8006266 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006258:	d202      	bcs.n	8006260 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800625a:	2301      	movs	r3, #1
 800625c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800625e:	e033      	b.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006260:	2300      	movs	r3, #0
 8006262:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006264:	e030      	b.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800626c:	d208      	bcs.n	8006280 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006274:	d102      	bne.n	800627c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8006276:	2303      	movs	r3, #3
 8006278:	613b      	str	r3, [r7, #16]
 800627a:	e025      	b.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e035      	b.n	80062ec <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006286:	d90f      	bls.n	80062a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006294:	d902      	bls.n	800629c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006296:	2300      	movs	r3, #0
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	e015      	b.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800629c:	2301      	movs	r3, #1
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	e012      	b.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80062a2:	2300      	movs	r3, #0
 80062a4:	613b      	str	r3, [r7, #16]
 80062a6:	e00f      	b.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062ae:	d109      	bne.n	80062c4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b6:	d102      	bne.n	80062be <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80062b8:	2301      	movs	r3, #1
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	e004      	b.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80062be:	2302      	movs	r3, #2
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	e001      	b.n	80062c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80062c4:	2301      	movs	r3, #1
 80062c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80062c8:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f023 020f 	bic.w	r2, r3, #15
 80062d0:	4909      	ldr	r1, [pc, #36]	; (80062f8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80062d8:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d001      	beq.n	80062ea <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	46020c00 	.word	0x46020c00
 80062f8:	40022000 	.word	0x40022000

080062fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80062fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006300:	b0ba      	sub	sp, #232	; 0xe8
 8006302:	af00      	add	r7, sp, #0
 8006304:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006308:	2300      	movs	r3, #0
 800630a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800630e:	2300      	movs	r3, #0
 8006310:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006314:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f002 0401 	and.w	r4, r2, #1
 8006320:	2500      	movs	r5, #0
 8006322:	ea54 0305 	orrs.w	r3, r4, r5
 8006326:	d00b      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006328:	4bcb      	ldr	r3, [pc, #812]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800632a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800632e:	f023 0103 	bic.w	r1, r3, #3
 8006332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006338:	4ac7      	ldr	r2, [pc, #796]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800633a:	430b      	orrs	r3, r1
 800633c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006348:	f002 0802 	and.w	r8, r2, #2
 800634c:	f04f 0900 	mov.w	r9, #0
 8006350:	ea58 0309 	orrs.w	r3, r8, r9
 8006354:	d00b      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006356:	4bc0      	ldr	r3, [pc, #768]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800635c:	f023 010c 	bic.w	r1, r3, #12
 8006360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006366:	4abc      	ldr	r2, [pc, #752]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006368:	430b      	orrs	r3, r1
 800636a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800636e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f002 0a04 	and.w	sl, r2, #4
 800637a:	f04f 0b00 	mov.w	fp, #0
 800637e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006382:	d00b      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006384:	4bb4      	ldr	r3, [pc, #720]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800638a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800638e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006394:	4ab0      	ldr	r2, [pc, #704]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006396:	430b      	orrs	r3, r1
 8006398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800639c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f002 0308 	and.w	r3, r2, #8
 80063a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063ac:	2300      	movs	r3, #0
 80063ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80063b6:	460b      	mov	r3, r1
 80063b8:	4313      	orrs	r3, r2
 80063ba:	d00b      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80063bc:	4ba6      	ldr	r3, [pc, #664]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80063c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063cc:	4aa2      	ldr	r2, [pc, #648]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063ce:	430b      	orrs	r3, r1
 80063d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f002 0310 	and.w	r3, r2, #16
 80063e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063e4:	2300      	movs	r3, #0
 80063e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4313      	orrs	r3, r2
 80063f2:	d00b      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80063f4:	4b98      	ldr	r3, [pc, #608]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006404:	4a94      	ldr	r2, [pc, #592]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006406:	430b      	orrs	r3, r1
 8006408:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800640c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	f002 0320 	and.w	r3, r2, #32
 8006418:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800641c:	2300      	movs	r3, #0
 800641e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006422:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006426:	460b      	mov	r3, r1
 8006428:	4313      	orrs	r3, r2
 800642a:	d00b      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800642c:	4b8a      	ldr	r3, [pc, #552]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800642e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006432:	f023 0107 	bic.w	r1, r3, #7
 8006436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800643a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800643c:	4a86      	ldr	r2, [pc, #536]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800643e:	430b      	orrs	r3, r1
 8006440:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006444:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006454:	2300      	movs	r3, #0
 8006456:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800645a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800645e:	460b      	mov	r3, r1
 8006460:	4313      	orrs	r3, r2
 8006462:	d00b      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006464:	4b7c      	ldr	r3, [pc, #496]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800646a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800646e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006474:	4a78      	ldr	r2, [pc, #480]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006476:	430b      	orrs	r3, r1
 8006478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800647c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006488:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800648c:	2300      	movs	r3, #0
 800648e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006492:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006496:	460b      	mov	r3, r1
 8006498:	4313      	orrs	r3, r2
 800649a:	d00b      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800649c:	4b6e      	ldr	r3, [pc, #440]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800649e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ac:	4a6a      	ldr	r2, [pc, #424]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064ae:	430b      	orrs	r3, r1
 80064b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80064c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064c4:	2300      	movs	r3, #0
 80064c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80064ca:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4313      	orrs	r3, r2
 80064d2:	d00b      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80064d4:	4b60      	ldr	r3, [pc, #384]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e4:	4a5c      	ldr	r2, [pc, #368]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064e6:	430b      	orrs	r3, r1
 80064e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80064f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064fc:	2300      	movs	r3, #0
 80064fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006502:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006506:	460b      	mov	r3, r1
 8006508:	4313      	orrs	r3, r2
 800650a:	d00b      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800650c:	4b52      	ldr	r3, [pc, #328]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800650e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006512:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8006516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800651a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800651c:	4a4e      	ldr	r2, [pc, #312]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800651e:	430b      	orrs	r3, r1
 8006520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006524:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8006530:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006534:	2300      	movs	r3, #0
 8006536:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800653a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800653e:	460b      	mov	r3, r1
 8006540:	4313      	orrs	r3, r2
 8006542:	d00b      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006544:	4b44      	ldr	r3, [pc, #272]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006546:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800654a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800654e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006554:	4a40      	ldr	r2, [pc, #256]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006556:	430b      	orrs	r3, r1
 8006558:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800655c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006564:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800656c:	2300      	movs	r3, #0
 800656e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006572:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006576:	460b      	mov	r3, r1
 8006578:	4313      	orrs	r3, r2
 800657a:	d00b      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800657c:	4b36      	ldr	r3, [pc, #216]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800657e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006582:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8006586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800658a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800658c:	4a32      	ldr	r2, [pc, #200]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800658e:	430b      	orrs	r3, r1
 8006590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80065a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065a4:	2300      	movs	r3, #0
 80065a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80065ae:	460b      	mov	r3, r1
 80065b0:	4313      	orrs	r3, r2
 80065b2:	d00c      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80065b4:	4b28      	ldr	r3, [pc, #160]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065c6:	4a24      	ldr	r2, [pc, #144]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065c8:	430b      	orrs	r3, r1
 80065ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80065ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80065da:	67bb      	str	r3, [r7, #120]	; 0x78
 80065dc:	2300      	movs	r3, #0
 80065de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80065e4:	460b      	mov	r3, r1
 80065e6:	4313      	orrs	r3, r2
 80065e8:	d04f      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80065ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f2:	2b80      	cmp	r3, #128	; 0x80
 80065f4:	d02d      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80065f6:	2b80      	cmp	r3, #128	; 0x80
 80065f8:	d827      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80065fa:	2b60      	cmp	r3, #96	; 0x60
 80065fc:	d02e      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80065fe:	2b60      	cmp	r3, #96	; 0x60
 8006600:	d823      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006602:	2b40      	cmp	r3, #64	; 0x40
 8006604:	d006      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006606:	2b40      	cmp	r3, #64	; 0x40
 8006608:	d81f      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800660e:	2b20      	cmp	r3, #32
 8006610:	d011      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006612:	e01a      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006614:	4b10      	ldr	r3, [pc, #64]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006618:	4a0f      	ldr	r2, [pc, #60]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800661a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800661e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006620:	e01d      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006626:	3308      	adds	r3, #8
 8006628:	4618      	mov	r0, r3
 800662a:	f002 fa41 	bl	8008ab0 <RCCEx_PLL2_Config>
 800662e:	4603      	mov	r3, r0
 8006630:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006634:	e013      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800663a:	332c      	adds	r3, #44	; 0x2c
 800663c:	4618      	mov	r0, r3
 800663e:	f002 facf 	bl	8008be0 <RCCEx_PLL3_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006648:	e009      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006650:	e005      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8006652:	bf00      	nop
 8006654:	e003      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006656:	bf00      	nop
 8006658:	46020c00 	.word	0x46020c00
        break;
 800665c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800665e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10d      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006666:	4bb6      	ldr	r3, [pc, #728]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006668:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800666c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8006670:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006678:	4ab1      	ldr	r2, [pc, #708]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800667a:	430b      	orrs	r3, r1
 800667c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006680:	e003      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006682:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006686:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800668a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006696:	673b      	str	r3, [r7, #112]	; 0x70
 8006698:	2300      	movs	r3, #0
 800669a:	677b      	str	r3, [r7, #116]	; 0x74
 800669c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80066a0:	460b      	mov	r3, r1
 80066a2:	4313      	orrs	r3, r2
 80066a4:	d053      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80066a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b2:	d033      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80066b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b8:	d82c      	bhi.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80066ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066be:	d02f      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80066c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066c4:	d826      	bhi.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80066c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ca:	d008      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80066cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066d0:	d820      	bhi.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80066d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066da:	d011      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80066dc:	e01a      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80066de:	4b98      	ldr	r3, [pc, #608]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e2:	4a97      	ldr	r2, [pc, #604]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80066e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80066ea:	e01a      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066f0:	3308      	adds	r3, #8
 80066f2:	4618      	mov	r0, r3
 80066f4:	f002 f9dc 	bl	8008ab0 <RCCEx_PLL2_Config>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80066fe:	e010      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006704:	332c      	adds	r3, #44	; 0x2c
 8006706:	4618      	mov	r0, r3
 8006708:	f002 fa6a 	bl	8008be0 <RCCEx_PLL3_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006712:	e006      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800671a:	e002      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800671c:	bf00      	nop
 800671e:	e000      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006722:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10d      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800672a:	4b85      	ldr	r3, [pc, #532]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800672c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006730:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800673c:	4a80      	ldr	r2, [pc, #512]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800673e:	430b      	orrs	r3, r1
 8006740:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006744:	e003      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006746:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800674a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800674e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800675a:	66bb      	str	r3, [r7, #104]	; 0x68
 800675c:	2300      	movs	r3, #0
 800675e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006760:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006764:	460b      	mov	r3, r1
 8006766:	4313      	orrs	r3, r2
 8006768:	d046      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800676a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800676e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006772:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006776:	d028      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006778:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800677c:	d821      	bhi.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800677e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006782:	d022      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006788:	d81b      	bhi.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800678a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800678e:	d01c      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006790:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006794:	d815      	bhi.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800679a:	d008      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800679c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a0:	d80f      	bhi.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d011      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80067a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067aa:	d00e      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80067ac:	e009      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067b2:	3308      	adds	r3, #8
 80067b4:	4618      	mov	r0, r3
 80067b6:	f002 f97b 	bl	8008ab0 <RCCEx_PLL2_Config>
 80067ba:	4603      	mov	r3, r0
 80067bc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067c0:	e004      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067c8:	e000      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80067ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10d      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80067d4:	4b5a      	ldr	r3, [pc, #360]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067da:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80067de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067e6:	4a56      	ldr	r2, [pc, #344]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067e8:	430b      	orrs	r3, r1
 80067ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80067ee:	e003      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067f4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80067f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006800:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006804:	663b      	str	r3, [r7, #96]	; 0x60
 8006806:	2300      	movs	r3, #0
 8006808:	667b      	str	r3, [r7, #100]	; 0x64
 800680a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800680e:	460b      	mov	r3, r1
 8006810:	4313      	orrs	r3, r2
 8006812:	d03f      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681c:	2b04      	cmp	r3, #4
 800681e:	d81e      	bhi.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006820:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006826:	bf00      	nop
 8006828:	08006867 	.word	0x08006867
 800682c:	0800683d 	.word	0x0800683d
 8006830:	0800684b 	.word	0x0800684b
 8006834:	08006867 	.word	0x08006867
 8006838:	08006867 	.word	0x08006867
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800683c:	4b40      	ldr	r3, [pc, #256]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800683e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006840:	4a3f      	ldr	r2, [pc, #252]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006846:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006848:	e00e      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800684a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800684e:	332c      	adds	r3, #44	; 0x2c
 8006850:	4618      	mov	r0, r3
 8006852:	f002 f9c5 	bl	8008be0 <RCCEx_PLL3_Config>
 8006856:	4603      	mov	r3, r0
 8006858:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800685c:	e004      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006864:	e000      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8006866:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006868:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10d      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006870:	4b33      	ldr	r3, [pc, #204]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006872:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006876:	f023 0107 	bic.w	r1, r3, #7
 800687a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800687e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006882:	4a2f      	ldr	r2, [pc, #188]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006884:	430b      	orrs	r3, r1
 8006886:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800688a:	e003      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006890:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006894:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80068a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80068a2:	2300      	movs	r3, #0
 80068a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80068aa:	460b      	mov	r3, r1
 80068ac:	4313      	orrs	r3, r2
 80068ae:	d04d      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80068b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068bc:	d028      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80068be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068c2:	d821      	bhi.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80068c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068c8:	d024      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80068ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068ce:	d81b      	bhi.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80068d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d4:	d00e      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80068d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068da:	d815      	bhi.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01b      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80068e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e4:	d110      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068e6:	4b16      	ldr	r3, [pc, #88]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	4a15      	ldr	r2, [pc, #84]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80068ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80068f2:	e012      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068f8:	332c      	adds	r3, #44	; 0x2c
 80068fa:	4618      	mov	r0, r3
 80068fc:	f002 f970 	bl	8008be0 <RCCEx_PLL3_Config>
 8006900:	4603      	mov	r3, r0
 8006902:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006906:	e008      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800690e:	e004      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006910:	bf00      	nop
 8006912:	e002      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006914:	bf00      	nop
 8006916:	e000      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006918:	bf00      	nop
    }
    if (ret == HAL_OK)
 800691a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d110      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006922:	4b07      	ldr	r3, [pc, #28]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006928:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800692c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006934:	4a02      	ldr	r2, [pc, #8]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006936:	430b      	orrs	r3, r1
 8006938:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800693c:	e006      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x650>
 800693e:	bf00      	nop
 8006940:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006944:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006948:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800694c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006958:	653b      	str	r3, [r7, #80]	; 0x50
 800695a:	2300      	movs	r3, #0
 800695c:	657b      	str	r3, [r7, #84]	; 0x54
 800695e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006962:	460b      	mov	r3, r1
 8006964:	4313      	orrs	r3, r2
 8006966:	f000 80b5 	beq.w	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800696a:	2300      	movs	r3, #0
 800696c:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006970:	4b9d      	ldr	r3, [pc, #628]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	d113      	bne.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800697e:	4b9a      	ldr	r3, [pc, #616]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006984:	4a98      	ldr	r2, [pc, #608]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006986:	f043 0304 	orr.w	r3, r3, #4
 800698a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800698e:	4b96      	ldr	r3, [pc, #600]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800699c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80069a6:	4b91      	ldr	r3, [pc, #580]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	4a90      	ldr	r2, [pc, #576]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80069ac:	f043 0301 	orr.w	r3, r3, #1
 80069b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069b2:	f7fa ffdb 	bl	800196c <HAL_GetTick>
 80069b6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80069ba:	e00b      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069bc:	f7fa ffd6 	bl	800196c <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d903      	bls.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80069d2:	e005      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80069d4:	4b85      	ldr	r3, [pc, #532]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0ed      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80069e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d165      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80069e8:	4b7f      	ldr	r3, [pc, #508]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80069f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d023      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80069fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d01b      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a0e:	4b76      	ldr	r3, [pc, #472]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a1c:	4b72      	ldr	r3, [pc, #456]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a22:	4a71      	ldr	r2, [pc, #452]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a28:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a2c:	4b6e      	ldr	r3, [pc, #440]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a32:	4a6d      	ldr	r2, [pc, #436]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a3c:	4a6a      	ldr	r2, [pc, #424]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d019      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a52:	f7fa ff8b 	bl	800196c <HAL_GetTick>
 8006a56:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a5a:	e00d      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a5c:	f7fa ff86 	bl	800196c <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a66:	1ad2      	subs	r2, r2, r3
 8006a68:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d903      	bls.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006a76:	e006      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a78:	4b5b      	ldr	r3, [pc, #364]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0ea      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006a86:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10d      	bne.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006a8e:	4b56      	ldr	r3, [pc, #344]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a94:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006aa0:	4a51      	ldr	r2, [pc, #324]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006aa2:	430b      	orrs	r3, r1
 8006aa4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006aa8:	e008      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006aaa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006aae:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006ab2:	e003      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ab8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006abc:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d107      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ac4:	4b48      	ldr	r3, [pc, #288]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aca:	4a47      	ldr	r2, [pc, #284]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006acc:	f023 0304 	bic.w	r3, r3, #4
 8006ad0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006ad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ae6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006aea:	460b      	mov	r3, r1
 8006aec:	4313      	orrs	r3, r2
 8006aee:	d042      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006af0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006af4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006af8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006afc:	d022      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006afe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006b02:	d81b      	bhi.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006b04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b08:	d011      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b0e:	d815      	bhi.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d019      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006b14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b18:	d110      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b1e:	3308      	adds	r3, #8
 8006b20:	4618      	mov	r0, r3
 8006b22:	f001 ffc5 	bl	8008ab0 <RCCEx_PLL2_Config>
 8006b26:	4603      	mov	r3, r0
 8006b28:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006b2c:	e00d      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b2e:	4b2e      	ldr	r3, [pc, #184]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b32:	4a2d      	ldr	r2, [pc, #180]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b38:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006b3a:	e006      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006b42:	e002      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006b44:	bf00      	nop
 8006b46:	e000      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006b48:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006b4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10d      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006b52:	4b25      	ldr	r3, [pc, #148]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b58:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006b5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b64:	4a20      	ldr	r2, [pc, #128]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b66:	430b      	orrs	r3, r1
 8006b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b6c:	e003      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b72:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006b82:	643b      	str	r3, [r7, #64]	; 0x40
 8006b84:	2300      	movs	r3, #0
 8006b86:	647b      	str	r3, [r7, #68]	; 0x44
 8006b88:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	d032      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b9e:	d00b      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba4:	d804      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d008      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bae:	d007      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006bb6:	e004      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006bb8:	bf00      	nop
 8006bba:	e002      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006bbc:	bf00      	nop
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006bc0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006bc2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d112      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006bca:	4b07      	ldr	r3, [pc, #28]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bd0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bdc:	4a02      	ldr	r2, [pc, #8]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bde:	430b      	orrs	r3, r1
 8006be0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006be4:	e008      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006be6:	bf00      	nop
 8006be8:	46020c00 	.word	0x46020c00
 8006bec:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006bf4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006bf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006c04:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c06:	2300      	movs	r3, #0
 8006c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c0a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4313      	orrs	r3, r2
 8006c12:	d00c      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006c14:	4b98      	ldr	r3, [pc, #608]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c1a:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c26:	4a94      	ldr	r2, [pc, #592]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c40:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006c44:	460b      	mov	r3, r1
 8006c46:	4313      	orrs	r3, r2
 8006c48:	d019      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c56:	d105      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c58:	4b87      	ldr	r3, [pc, #540]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5c:	4a86      	ldr	r2, [pc, #536]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c62:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006c64:	4b84      	ldr	r3, [pc, #528]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c6a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c76:	4a80      	ldr	r2, [pc, #512]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006c94:	460b      	mov	r3, r1
 8006c96:	4313      	orrs	r3, r2
 8006c98:	d00c      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006c9a:	4b77      	ldr	r3, [pc, #476]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ca4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ca8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006cac:	4972      	ldr	r1, [pc, #456]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006cb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006cc0:	623b      	str	r3, [r7, #32]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	d00c      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006cd0:	4b69      	ldr	r3, [pc, #420]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cde:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006ce2:	4965      	ldr	r1, [pc, #404]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006cea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	61fb      	str	r3, [r7, #28]
 8006cfc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d00:	460b      	mov	r3, r1
 8006d02:	4313      	orrs	r3, r2
 8006d04:	d00c      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006d06:	4b5c      	ldr	r3, [pc, #368]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d0c:	f023 0218 	bic.w	r2, r3, #24
 8006d10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d18:	4957      	ldr	r1, [pc, #348]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006d2c:	613b      	str	r3, [r7, #16]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d36:	460b      	mov	r3, r1
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	d032      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006d3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d48:	d105      	bne.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d4a:	4b4b      	ldr	r3, [pc, #300]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	4a4a      	ldr	r2, [pc, #296]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d54:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d62:	d108      	bne.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d68:	3308      	adds	r3, #8
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f001 fea0 	bl	8008ab0 <RCCEx_PLL2_Config>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006d76:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10d      	bne.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006d7e:	4b3e      	ldr	r3, [pc, #248]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d90:	4939      	ldr	r1, [pc, #228]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006d98:	e003      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d9e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006dae:	60bb      	str	r3, [r7, #8]
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006db8:	460b      	mov	r3, r1
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	d03a      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dca:	d00e      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006dcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dd0:	d815      	bhi.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d017      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006dd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006dda:	d110      	bne.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ddc:	4b26      	ldr	r3, [pc, #152]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	4a25      	ldr	r2, [pc, #148]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de6:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006de8:	e00e      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dee:	3308      	adds	r3, #8
 8006df0:	4618      	mov	r0, r3
 8006df2:	f001 fe5d 	bl	8008ab0 <RCCEx_PLL2_Config>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006dfc:	e004      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006e04:	e000      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006e06:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006e08:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10d      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006e10:	4b19      	ldr	r3, [pc, #100]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e22:	4915      	ldr	r1, [pc, #84]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006e2a:	e003      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006e30:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006e34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006e40:	603b      	str	r3, [r7, #0]
 8006e42:	2300      	movs	r3, #0
 8006e44:	607b      	str	r3, [r7, #4]
 8006e46:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	d00c      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e56:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e62:	4905      	ldr	r1, [pc, #20]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006e6a:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	37e8      	adds	r7, #232	; 0xe8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e78:	46020c00 	.word	0x46020c00

08006e7c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b089      	sub	sp, #36	; 0x24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006e84:	4bad      	ldr	r3, [pc, #692]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006e8e:	4bab      	ldr	r3, [pc, #684]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006e98:	4ba8      	ldr	r3, [pc, #672]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9c:	0a1b      	lsrs	r3, r3, #8
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006ea6:	4ba5      	ldr	r3, [pc, #660]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eaa:	091b      	lsrs	r3, r3, #4
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006eb2:	4ba2      	ldr	r3, [pc, #648]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	08db      	lsrs	r3, r3, #3
 8006eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	fb02 f303 	mul.w	r3, r2, r3
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eca:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8123 	beq.w	800711c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d062      	beq.n	8006fa2 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	f200 8081 	bhi.w	8006fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d024      	beq.n	8006f34 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d17a      	bne.n	8006fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007140 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f02:	4b8e      	ldr	r3, [pc, #568]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f16:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007144 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f32:	e08f      	b.n	8007054 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006f34:	4b81      	ldr	r3, [pc, #516]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8006f40:	4b7e      	ldr	r3, [pc, #504]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	0f1b      	lsrs	r3, r3, #28
 8006f46:	f003 030f 	and.w	r3, r3, #15
 8006f4a:	e006      	b.n	8006f5a <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8006f4c:	4b7b      	ldr	r3, [pc, #492]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f52:	041b      	lsls	r3, r3, #16
 8006f54:	0f1b      	lsrs	r3, r3, #28
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	4a7b      	ldr	r2, [pc, #492]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8006f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f60:	ee07 3a90 	vmov	s15, r3
 8006f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	ee07 3a90 	vmov	s15, r3
 8006f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f80:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f84:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007144 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fa0:	e058      	b.n	8007054 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	ee07 3a90 	vmov	s15, r3
 8006fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fac:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007140 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb4:	4b61      	ldr	r3, [pc, #388]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fbc:	ee07 3a90 	vmov	s15, r3
 8006fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fc8:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007144 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006fcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fe4:	e036      	b.n	8007054 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006fe6:	4b55      	ldr	r3, [pc, #340]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d005      	beq.n	8006ffe <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8006ff2:	4b52      	ldr	r3, [pc, #328]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	0f1b      	lsrs	r3, r3, #28
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	e006      	b.n	800700c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8006ffe:	4b4f      	ldr	r3, [pc, #316]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007004:	041b      	lsls	r3, r3, #16
 8007006:	0f1b      	lsrs	r3, r3, #28
 8007008:	f003 030f 	and.w	r3, r3, #15
 800700c:	4a4e      	ldr	r2, [pc, #312]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800700e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	ee07 3a90 	vmov	s15, r3
 8007020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	ee07 3a90 	vmov	s15, r3
 800702e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007032:	ed97 6a02 	vldr	s12, [r7, #8]
 8007036:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007144 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800703a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800703e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007046:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800704a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007052:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007054:	4b39      	ldr	r3, [pc, #228]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d017      	beq.n	8007090 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007060:	4b36      	ldr	r3, [pc, #216]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007064:	0a5b      	lsrs	r3, r3, #9
 8007066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8007072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007076:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800707a:	edd7 6a07 	vldr	s13, [r7, #28]
 800707e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007086:	ee17 2a90 	vmov	r2, s15
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	e002      	b.n	8007096 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007096:	4b29      	ldr	r3, [pc, #164]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d017      	beq.n	80070d2 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80070a2:	4b26      	ldr	r3, [pc, #152]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80070a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a6:	0c1b      	lsrs	r3, r3, #16
 80070a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ac:	ee07 3a90 	vmov	s15, r3
 80070b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80070b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070b8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80070bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80070c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070c8:	ee17 2a90 	vmov	r2, s15
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	605a      	str	r2, [r3, #4]
 80070d0:	e002      	b.n	80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80070d8:	4b18      	ldr	r3, [pc, #96]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80070da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d017      	beq.n	8007114 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80070e4:	4b15      	ldr	r3, [pc, #84]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e8:	0e1b      	lsrs	r3, r3, #24
 80070ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80070f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070fa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80070fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800710a:	ee17 2a90 	vmov	r2, s15
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007112:	e00c      	b.n	800712e <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	609a      	str	r2, [r3, #8]
}
 800711a:	e008      	b.n	800712e <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	609a      	str	r2, [r3, #8]
}
 800712e:	bf00      	nop
 8007130:	3724      	adds	r7, #36	; 0x24
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	46020c00 	.word	0x46020c00
 8007140:	4b742400 	.word	0x4b742400
 8007144:	46000000 	.word	0x46000000
 8007148:	08015974 	.word	0x08015974

0800714c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800714c:	b480      	push	{r7}
 800714e:	b089      	sub	sp, #36	; 0x24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007154:	4bad      	ldr	r3, [pc, #692]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800715e:	4bab      	ldr	r3, [pc, #684]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	f003 0303 	and.w	r3, r3, #3
 8007166:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8007168:	4ba8      	ldr	r3, [pc, #672]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	0a1b      	lsrs	r3, r3, #8
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	3301      	adds	r3, #1
 8007174:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007176:	4ba5      	ldr	r3, [pc, #660]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717a:	091b      	lsrs	r3, r3, #4
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007182:	4ba2      	ldr	r3, [pc, #648]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	08db      	lsrs	r3, r3, #3
 8007188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	fb02 f303 	mul.w	r3, r2, r3
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 8123 	beq.w	80073ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d062      	beq.n	8007272 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	f200 8081 	bhi.w	80072b6 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d024      	beq.n	8007204 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d17a      	bne.n	80072b6 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ca:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80071ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d2:	4b8e      	ldr	r3, [pc, #568]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80071d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80071e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071e6:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007414 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80071ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80071ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80071f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80071fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007202:	e08f      	b.n	8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007204:	4b81      	ldr	r3, [pc, #516]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8007210:	4b7e      	ldr	r3, [pc, #504]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	0f1b      	lsrs	r3, r3, #28
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	e006      	b.n	800722a <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 800721c:	4b7b      	ldr	r3, [pc, #492]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800721e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007222:	041b      	lsls	r3, r3, #16
 8007224:	0f1b      	lsrs	r3, r3, #28
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	4a7b      	ldr	r2, [pc, #492]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800722c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007230:	ee07 3a90 	vmov	s15, r3
 8007234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	ee07 3a90 	vmov	s15, r3
 800724c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007250:	ed97 6a02 	vldr	s12, [r7, #8]
 8007254:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007414 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007264:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007270:	e058      	b.n	8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	ee07 3a90 	vmov	s15, r3
 8007278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727c:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8007280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007284:	4b61      	ldr	r3, [pc, #388]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728c:	ee07 3a90 	vmov	s15, r3
 8007290:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007294:	ed97 6a02 	vldr	s12, [r7, #8]
 8007298:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007414 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800729c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80072a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80072a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80072ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072b4:	e036      	b.n	8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80072b6:	4b55      	ldr	r3, [pc, #340]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d005      	beq.n	80072ce <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 80072c2:	4b52      	ldr	r3, [pc, #328]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	0f1b      	lsrs	r3, r3, #28
 80072c8:	f003 030f 	and.w	r3, r3, #15
 80072cc:	e006      	b.n	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 80072ce:	4b4f      	ldr	r3, [pc, #316]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072d4:	041b      	lsls	r3, r3, #16
 80072d6:	0f1b      	lsrs	r3, r3, #28
 80072d8:	f003 030f 	and.w	r3, r3, #15
 80072dc:	4a4e      	ldr	r2, [pc, #312]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 80072de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	ee07 3a90 	vmov	s15, r3
 80072f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007302:	ed97 6a02 	vldr	s12, [r7, #8]
 8007306:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007414 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800730a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007316:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800731a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007322:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007324:	4b39      	ldr	r3, [pc, #228]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d017      	beq.n	8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007330:	4b36      	ldr	r3, [pc, #216]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007334:	0a5b      	lsrs	r3, r3, #9
 8007336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8007342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007346:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800734a:	edd7 6a07 	vldr	s13, [r7, #28]
 800734e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007356:	ee17 2a90 	vmov	r2, s15
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	e002      	b.n	8007366 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007366:	4b29      	ldr	r3, [pc, #164]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d017      	beq.n	80073a2 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007372:	4b26      	ldr	r3, [pc, #152]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007376:	0c1b      	lsrs	r3, r3, #16
 8007378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800737c:	ee07 3a90 	vmov	s15, r3
 8007380:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007388:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800738c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007398:	ee17 2a90 	vmov	r2, s15
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	605a      	str	r2, [r3, #4]
 80073a0:	e002      	b.n	80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80073a8:	4b18      	ldr	r3, [pc, #96]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d017      	beq.n	80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80073b4:	4b15      	ldr	r3, [pc, #84]	; (800740c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b8:	0e1b      	lsrs	r3, r3, #24
 80073ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80073c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073ca:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80073ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80073d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073da:	ee17 2a90 	vmov	r2, s15
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073e2:	e00c      	b.n	80073fe <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	609a      	str	r2, [r3, #8]
}
 80073ea:	e008      	b.n	80073fe <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	609a      	str	r2, [r3, #8]
}
 80073fe:	bf00      	nop
 8007400:	3724      	adds	r7, #36	; 0x24
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	46020c00 	.word	0x46020c00
 8007410:	4b742400 	.word	0x4b742400
 8007414:	46000000 	.word	0x46000000
 8007418:	08015974 	.word	0x08015974

0800741c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800741c:	b480      	push	{r7}
 800741e:	b089      	sub	sp, #36	; 0x24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007424:	4bad      	ldr	r3, [pc, #692]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800742e:	4bab      	ldr	r3, [pc, #684]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007438:	4ba8      	ldr	r3, [pc, #672]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800743a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743c:	0a1b      	lsrs	r3, r3, #8
 800743e:	f003 030f 	and.w	r3, r3, #15
 8007442:	3301      	adds	r3, #1
 8007444:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007446:	4ba5      	ldr	r3, [pc, #660]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	091b      	lsrs	r3, r3, #4
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007452:	4ba2      	ldr	r3, [pc, #648]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007456:	08db      	lsrs	r3, r3, #3
 8007458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	fb02 f303 	mul.w	r3, r2, r3
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 8123 	beq.w	80076bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2b03      	cmp	r3, #3
 800747a:	d062      	beq.n	8007542 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2b03      	cmp	r3, #3
 8007480:	f200 8081 	bhi.w	8007586 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d024      	beq.n	80074d4 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d17a      	bne.n	8007586 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749a:	eddf 6a91 	vldr	s13, [pc, #580]	; 80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800749e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a2:	4b8e      	ldr	r3, [pc, #568]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80074a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80074b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80074b6:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80074ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80074be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80074c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80074ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ce:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80074d2:	e08f      	b.n	80075f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80074d4:	4b81      	ldr	r3, [pc, #516]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 80074e0:	4b7e      	ldr	r3, [pc, #504]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	0f1b      	lsrs	r3, r3, #28
 80074e6:	f003 030f 	and.w	r3, r3, #15
 80074ea:	e006      	b.n	80074fa <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 80074ec:	4b7b      	ldr	r3, [pc, #492]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80074ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074f2:	041b      	lsls	r3, r3, #16
 80074f4:	0f1b      	lsrs	r3, r3, #28
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	4a7b      	ldr	r2, [pc, #492]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80074fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007500:	ee07 3a90 	vmov	s15, r3
 8007504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	ee07 3a90 	vmov	s15, r3
 800751c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007520:	ed97 6a02 	vldr	s12, [r7, #8]
 8007524:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007528:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007534:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007540:	e058      	b.n	80075f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	ee07 3a90 	vmov	s15, r3
 8007548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754c:	eddf 6a64 	vldr	s13, [pc, #400]	; 80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007554:	4b61      	ldr	r3, [pc, #388]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755c:	ee07 3a90 	vmov	s15, r3
 8007560:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007564:	ed97 6a02 	vldr	s12, [r7, #8]
 8007568:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800756c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007570:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007578:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800757c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007580:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007584:	e036      	b.n	80075f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007586:	4b55      	ldr	r3, [pc, #340]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d005      	beq.n	800759e <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8007592:	4b52      	ldr	r3, [pc, #328]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	0f1b      	lsrs	r3, r3, #28
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	e006      	b.n	80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800759e:	4b4f      	ldr	r3, [pc, #316]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075a4:	041b      	lsls	r3, r3, #16
 80075a6:	0f1b      	lsrs	r3, r3, #28
 80075a8:	f003 030f 	and.w	r3, r3, #15
 80075ac:	4a4e      	ldr	r2, [pc, #312]	; (80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80075ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	ee07 3a90 	vmov	s15, r3
 80075c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80075d6:	eddf 5a43 	vldr	s11, [pc, #268]	; 80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80075da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80075ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075f2:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80075f4:	4b39      	ldr	r3, [pc, #228]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d017      	beq.n	8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007600:	4b36      	ldr	r3, [pc, #216]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007604:	0a5b      	lsrs	r3, r3, #9
 8007606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007616:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800761a:	edd7 6a07 	vldr	s13, [r7, #28]
 800761e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007626:	ee17 2a90 	vmov	r2, s15
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	e002      	b.n	8007636 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007636:	4b29      	ldr	r3, [pc, #164]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d017      	beq.n	8007672 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007642:	4b26      	ldr	r3, [pc, #152]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007646:	0c1b      	lsrs	r3, r3, #16
 8007648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800764c:	ee07 3a90 	vmov	s15, r3
 8007650:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007658:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800765c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007668:	ee17 2a90 	vmov	r2, s15
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	605a      	str	r2, [r3, #4]
 8007670:	e002      	b.n	8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007678:	4b18      	ldr	r3, [pc, #96]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800767a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d017      	beq.n	80076b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007684:	4b15      	ldr	r3, [pc, #84]	; (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007688:	0e1b      	lsrs	r3, r3, #24
 800768a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800769a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800769e:	edd7 6a07 	vldr	s13, [r7, #28]
 80076a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076aa:	ee17 2a90 	vmov	r2, s15
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80076b2:	e00c      	b.n	80076ce <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	609a      	str	r2, [r3, #8]
}
 80076ba:	e008      	b.n	80076ce <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	609a      	str	r2, [r3, #8]
}
 80076ce:	bf00      	nop
 80076d0:	3724      	adds	r7, #36	; 0x24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	46020c00 	.word	0x46020c00
 80076e0:	4b742400 	.word	0x4b742400
 80076e4:	46000000 	.word	0x46000000
 80076e8:	08015974 	.word	0x08015974

080076ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08e      	sub	sp, #56	; 0x38
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80076f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076fa:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80076fe:	430b      	orrs	r3, r1
 8007700:	d145      	bne.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007702:	4ba7      	ldr	r3, [pc, #668]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800770c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800770e:	4ba4      	ldr	r3, [pc, #656]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b02      	cmp	r3, #2
 800771a:	d108      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007722:	d104      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007728:	637b      	str	r3, [r7, #52]	; 0x34
 800772a:	f001 b9b3 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800772e:	4b9c      	ldr	r3, [pc, #624]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800773c:	d114      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007744:	d110      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007746:	4b96      	ldr	r3, [pc, #600]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800774c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007754:	d103      	bne.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007756:	23fa      	movs	r3, #250	; 0xfa
 8007758:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800775a:	f001 b99b 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800775e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007762:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007764:	f001 b996 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007768:	4b8d      	ldr	r3, [pc, #564]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007774:	d107      	bne.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800777c:	d103      	bne.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800777e:	4b89      	ldr	r3, [pc, #548]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007780:	637b      	str	r3, [r7, #52]	; 0x34
 8007782:	f001 b987 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	637b      	str	r3, [r7, #52]	; 0x34
 800778a:	f001 b983 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800778e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007792:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007796:	430b      	orrs	r3, r1
 8007798:	d151      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800779a:	4b81      	ldr	r3, [pc, #516]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800779c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80077a0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80077a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	2b80      	cmp	r3, #128	; 0x80
 80077aa:	d035      	beq.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	2b80      	cmp	r3, #128	; 0x80
 80077b0:	d841      	bhi.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	2b60      	cmp	r3, #96	; 0x60
 80077b6:	d02a      	beq.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	2b60      	cmp	r3, #96	; 0x60
 80077bc:	d83b      	bhi.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	2b40      	cmp	r3, #64	; 0x40
 80077c2:	d009      	beq.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	2b40      	cmp	r3, #64	; 0x40
 80077c8:	d835      	bhi.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00c      	beq.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	2b20      	cmp	r3, #32
 80077d4:	d012      	beq.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80077d6:	e02e      	b.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff fb4d 	bl	8006e7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077e6:	f001 b955 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077ea:	f107 0318 	add.w	r3, r7, #24
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff fcac 	bl	800714c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077f8:	f001 b94c 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077fc:	f107 030c 	add.w	r3, r7, #12
 8007800:	4618      	mov	r0, r3
 8007802:	f7ff fe0b 	bl	800741c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800780a:	f001 b943 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800780e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007812:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007814:	f001 b93e 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007818:	4b61      	ldr	r3, [pc, #388]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007824:	d103      	bne.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007826:	4b60      	ldr	r3, [pc, #384]	; (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007828:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800782a:	f001 b933 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007832:	f001 b92f 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800783a:	f001 b92b 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800783e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007842:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007846:	430b      	orrs	r3, r1
 8007848:	d158      	bne.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800784a:	4b55      	ldr	r3, [pc, #340]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800784c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007854:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800785c:	d03b      	beq.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007864:	d846      	bhi.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800786c:	d02e      	beq.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007874:	d83e      	bhi.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800787c:	d00b      	beq.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007884:	d836      	bhi.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00d      	beq.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800788c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007892:	d012      	beq.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007894:	e02e      	b.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff faee 	bl	8006e7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078a4:	f001 b8f6 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078a8:	f107 0318 	add.w	r3, r7, #24
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff fc4d 	bl	800714c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078b6:	f001 b8ed 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ba:	f107 030c 	add.w	r3, r7, #12
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff fdac 	bl	800741c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078c8:	f001 b8e4 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80078cc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80078d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078d2:	f001 b8df 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078d6:	4b32      	ldr	r3, [pc, #200]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e2:	d103      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80078e4:	4b30      	ldr	r3, [pc, #192]	; (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80078e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80078e8:	f001 b8d4 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078f0:	f001 b8d0 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078f8:	f001 b8cc 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80078fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007900:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007904:	430b      	orrs	r3, r1
 8007906:	d126      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007908:	4b25      	ldr	r3, [pc, #148]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800790a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800790e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007912:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007914:	4b22      	ldr	r3, [pc, #136]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800791c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007920:	d106      	bne.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	2b00      	cmp	r3, #0
 8007926:	d103      	bne.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007928:	4b1f      	ldr	r3, [pc, #124]	; (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800792a:	637b      	str	r3, [r7, #52]	; 0x34
 800792c:	f001 b8b2 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007930:	4b1b      	ldr	r3, [pc, #108]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800793c:	d107      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007944:	d103      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007946:	4b19      	ldr	r3, [pc, #100]	; (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007948:	637b      	str	r3, [r7, #52]	; 0x34
 800794a:	f001 b8a3 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
 8007952:	f001 b89f 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800795a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800795e:	430b      	orrs	r3, r1
 8007960:	d16e      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007962:	4b0f      	ldr	r3, [pc, #60]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007968:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800796c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007974:	d03d      	beq.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800797c:	d85c      	bhi.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007984:	d014      	beq.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800798c:	d854      	bhi.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01f      	beq.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800799a:	d012      	beq.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800799c:	e04c      	b.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800799e:	bf00      	nop
 80079a0:	46020c00 	.word	0x46020c00
 80079a4:	0007a120 	.word	0x0007a120
 80079a8:	00f42400 	.word	0x00f42400
 80079ac:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff fa61 	bl	8006e7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80079ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079be:	f001 b869 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079c2:	f107 0318 	add.w	r3, r7, #24
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff fbc0 	bl	800714c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079d0:	f001 b860 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80079d4:	4ba7      	ldr	r3, [pc, #668]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079e0:	d103      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80079e2:	4ba5      	ldr	r3, [pc, #660]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079e4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079e6:	f001 b855 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079ee:	f001 b851 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80079f2:	4ba0      	ldr	r3, [pc, #640]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b20      	cmp	r3, #32
 80079fc:	d118      	bne.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079fe:	4b9d      	ldr	r3, [pc, #628]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007a0a:	4b9a      	ldr	r3, [pc, #616]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	0e1b      	lsrs	r3, r3, #24
 8007a10:	f003 030f 	and.w	r3, r3, #15
 8007a14:	e006      	b.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007a16:	4b97      	ldr	r3, [pc, #604]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a1c:	041b      	lsls	r3, r3, #16
 8007a1e:	0e1b      	lsrs	r3, r3, #24
 8007a20:	f003 030f 	and.w	r3, r3, #15
 8007a24:	4a95      	ldr	r2, [pc, #596]	; (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a2a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a2c:	f001 b832 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a34:	f001 b82e 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a3c:	f001 b82a 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a44:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	d17f      	bne.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007a4c:	4b89      	ldr	r3, [pc, #548]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a56:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d165      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007a5e:	4b85      	ldr	r3, [pc, #532]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a64:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007a68:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007a70:	d034      	beq.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007a78:	d853      	bhi.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a80:	d00b      	beq.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a88:	d84b      	bhi.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d016      	beq.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a96:	d009      	beq.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007a98:	e043      	b.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff f9ec 	bl	8006e7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007aa8:	f000 bff4 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aac:	f107 0318 	add.w	r3, r7, #24
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7ff fb4b 	bl	800714c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007aba:	f000 bfeb 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007abe:	4b6d      	ldr	r3, [pc, #436]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aca:	d103      	bne.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8007acc:	4b6a      	ldr	r3, [pc, #424]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007ace:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007ad0:	f000 bfe0 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007ad8:	f000 bfdc 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007adc:	4b65      	ldr	r3, [pc, #404]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d118      	bne.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ae8:	4b62      	ldr	r3, [pc, #392]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d005      	beq.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007af4:	4b5f      	ldr	r3, [pc, #380]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	0e1b      	lsrs	r3, r3, #24
 8007afa:	f003 030f 	and.w	r3, r3, #15
 8007afe:	e006      	b.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007b00:	4b5c      	ldr	r3, [pc, #368]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b06:	041b      	lsls	r3, r3, #16
 8007b08:	0e1b      	lsrs	r3, r3, #24
 8007b0a:	f003 030f 	and.w	r3, r3, #15
 8007b0e:	4a5b      	ldr	r2, [pc, #364]	; (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b14:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007b16:	f000 bfbd 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007b1e:	f000 bfb9 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007b26:	f000 bfb5 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b30:	d108      	bne.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff f9a0 	bl	8006e7c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b40:	f000 bfa8 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	637b      	str	r3, [r7, #52]	; 0x34
 8007b48:	f000 bfa4 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b50:	1e51      	subs	r1, r2, #1
 8007b52:	430b      	orrs	r3, r1
 8007b54:	d136      	bne.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007b56:	4b47      	ldr	r3, [pc, #284]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b5c:	f003 0303 	and.w	r3, r3, #3
 8007b60:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d104      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007b68:	f7fe fae2 	bl	8006130 <HAL_RCC_GetPCLK2Freq>
 8007b6c:	6378      	str	r0, [r7, #52]	; 0x34
 8007b6e:	f000 bf91 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d104      	bne.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b78:	f7fe f9a4 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8007b7c:	6378      	str	r0, [r7, #52]	; 0x34
 8007b7e:	f000 bf89 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007b82:	4b3c      	ldr	r3, [pc, #240]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b8e:	d106      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d103      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8007b96:	4b3a      	ldr	r3, [pc, #232]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007b98:	637b      	str	r3, [r7, #52]	; 0x34
 8007b9a:	f000 bf7b 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007b9e:	4b35      	ldr	r3, [pc, #212]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ba4:	f003 0302 	and.w	r3, r3, #2
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d107      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d104      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8007bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb8:	f000 bf6c 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc0:	f000 bf68 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bc8:	1e91      	subs	r1, r2, #2
 8007bca:	430b      	orrs	r3, r1
 8007bcc:	d136      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007bce:	4b29      	ldr	r3, [pc, #164]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bd4:	f003 030c 	and.w	r3, r3, #12
 8007bd8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d104      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007be0:	f7fe fa92 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 8007be4:	6378      	str	r0, [r7, #52]	; 0x34
 8007be6:	f000 bf55 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d104      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bf0:	f7fe f968 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8007bf4:	6378      	str	r0, [r7, #52]	; 0x34
 8007bf6:	f000 bf4d 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007bfa:	4b1e      	ldr	r3, [pc, #120]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c06:	d106      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	2b08      	cmp	r3, #8
 8007c0c:	d103      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8007c0e:	4b1c      	ldr	r3, [pc, #112]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007c10:	637b      	str	r3, [r7, #52]	; 0x34
 8007c12:	f000 bf3f 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007c16:	4b17      	ldr	r3, [pc, #92]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d107      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	2b0c      	cmp	r3, #12
 8007c28:	d104      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8007c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c30:	f000 bf30 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	637b      	str	r3, [r7, #52]	; 0x34
 8007c38:	f000 bf2c 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c40:	1f11      	subs	r1, r2, #4
 8007c42:	430b      	orrs	r3, r1
 8007c44:	d13f      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007c46:	4b0b      	ldr	r3, [pc, #44]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c50:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c58:	f7fe fa56 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 8007c5c:	6378      	str	r0, [r7, #52]	; 0x34
 8007c5e:	f000 bf19 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	2b10      	cmp	r3, #16
 8007c66:	d10d      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c68:	f7fe f92c 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8007c6c:	6378      	str	r0, [r7, #52]	; 0x34
 8007c6e:	f000 bf11 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007c72:	bf00      	nop
 8007c74:	46020c00 	.word	0x46020c00
 8007c78:	02dc6c00 	.word	0x02dc6c00
 8007c7c:	08015974 	.word	0x08015974
 8007c80:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007c84:	4ba6      	ldr	r3, [pc, #664]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c90:	d106      	bne.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8007c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c94:	2b20      	cmp	r3, #32
 8007c96:	d103      	bne.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007c98:	4ba2      	ldr	r3, [pc, #648]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c9c:	f000 befa 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007ca0:	4b9f      	ldr	r3, [pc, #636]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d107      	bne.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	2b30      	cmp	r3, #48	; 0x30
 8007cb2:	d104      	bne.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8007cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007cba:	f000 beeb 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc2:	f000 bee7 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cca:	f1a2 0108 	sub.w	r1, r2, #8
 8007cce:	430b      	orrs	r3, r1
 8007cd0:	d136      	bne.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007cd2:	4b93      	ldr	r3, [pc, #588]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cd8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cdc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d104      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007ce4:	f7fe fa10 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 8007ce8:	6378      	str	r0, [r7, #52]	; 0x34
 8007cea:	f000 bed3 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	2b40      	cmp	r3, #64	; 0x40
 8007cf2:	d104      	bne.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007cf4:	f7fe f8e6 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8007cf8:	6378      	str	r0, [r7, #52]	; 0x34
 8007cfa:	f000 becb 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007cfe:	4b88      	ldr	r3, [pc, #544]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d0a:	d106      	bne.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0e:	2b80      	cmp	r3, #128	; 0x80
 8007d10:	d103      	bne.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8007d12:	4b84      	ldr	r3, [pc, #528]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007d14:	637b      	str	r3, [r7, #52]	; 0x34
 8007d16:	f000 bebd 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007d1a:	4b81      	ldr	r3, [pc, #516]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d107      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d2c:	d104      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8007d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d32:	637b      	str	r3, [r7, #52]	; 0x34
 8007d34:	f000 beae 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d3c:	f000 beaa 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d44:	f1a2 0110 	sub.w	r1, r2, #16
 8007d48:	430b      	orrs	r3, r1
 8007d4a:	d139      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007d4c:	4b74      	ldr	r3, [pc, #464]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d56:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d104      	bne.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d5e:	f7fe f9d3 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 8007d62:	6378      	str	r0, [r7, #52]	; 0x34
 8007d64:	f000 be96 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d6e:	d104      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d70:	f7fe f8a8 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8007d74:	6378      	str	r0, [r7, #52]	; 0x34
 8007d76:	f000 be8d 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007d7a:	4b69      	ldr	r3, [pc, #420]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d86:	d107      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d8e:	d103      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007d90:	4b64      	ldr	r3, [pc, #400]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007d92:	637b      	str	r3, [r7, #52]	; 0x34
 8007d94:	f000 be7e 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007d98:	4b61      	ldr	r3, [pc, #388]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d108      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dac:	d104      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007db2:	637b      	str	r3, [r7, #52]	; 0x34
 8007db4:	f000 be6e 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	637b      	str	r3, [r7, #52]	; 0x34
 8007dbc:	f000 be6a 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc4:	f1a2 0120 	sub.w	r1, r2, #32
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	d158      	bne.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007dcc:	4b54      	ldr	r3, [pc, #336]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007dce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d104      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007dde:	f7fe f9bb 	bl	8006158 <HAL_RCC_GetPCLK3Freq>
 8007de2:	6378      	str	r0, [r7, #52]	; 0x34
 8007de4:	f000 be56 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d104      	bne.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007dee:	f7fe f869 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8007df2:	6378      	str	r0, [r7, #52]	; 0x34
 8007df4:	f000 be4e 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007df8:	4b49      	ldr	r3, [pc, #292]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e04:	d106      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d103      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8007e0c:	4b45      	ldr	r3, [pc, #276]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e10:	f000 be40 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007e14:	4b42      	ldr	r3, [pc, #264]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d107      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d104      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8007e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2e:	f000 be31 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007e32:	4b3b      	ldr	r3, [pc, #236]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b20      	cmp	r3, #32
 8007e3c:	d11b      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d118      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e44:	4b36      	ldr	r3, [pc, #216]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d005      	beq.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007e50:	4b33      	ldr	r3, [pc, #204]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	0e1b      	lsrs	r3, r3, #24
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	e006      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8007e5c:	4b30      	ldr	r3, [pc, #192]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e62:	041b      	lsls	r3, r3, #16
 8007e64:	0e1b      	lsrs	r3, r3, #24
 8007e66:	f003 030f 	and.w	r3, r3, #15
 8007e6a:	4a2f      	ldr	r2, [pc, #188]	; (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
 8007e72:	f000 be0f 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	637b      	str	r3, [r7, #52]	; 0x34
 8007e7a:	f000 be0b 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e82:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007e86:	430b      	orrs	r3, r1
 8007e88:	d172      	bne.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007e8a:	4b25      	ldr	r3, [pc, #148]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e90:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007e94:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9c:	d104      	bne.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e9e:	f7fe f811 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8007ea2:	6378      	str	r0, [r7, #52]	; 0x34
 8007ea4:	f000 bdf6 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eae:	d108      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eb0:	f107 0318 	add.w	r3, r7, #24
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7ff f949 	bl	800714c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ebe:	f000 bde9 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d104      	bne.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007ec8:	f7fe f904 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 8007ecc:	6378      	str	r0, [r7, #52]	; 0x34
 8007ece:	f000 bde1 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007ed8:	d128      	bne.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007eda:	4b11      	ldr	r3, [pc, #68]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0320 	and.w	r3, r3, #32
 8007ee2:	2b20      	cmp	r3, #32
 8007ee4:	d118      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ee6:	4b0e      	ldr	r3, [pc, #56]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	0e1b      	lsrs	r3, r3, #24
 8007ef8:	f003 030f 	and.w	r3, r3, #15
 8007efc:	e006      	b.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007efe:	4b08      	ldr	r3, [pc, #32]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f04:	041b      	lsls	r3, r3, #16
 8007f06:	0e1b      	lsrs	r3, r3, #24
 8007f08:	f003 030f 	and.w	r3, r3, #15
 8007f0c:	4a06      	ldr	r2, [pc, #24]	; (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f12:	637b      	str	r3, [r7, #52]	; 0x34
 8007f14:	f000 bdbe 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f1c:	f000 bdba 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007f20:	46020c00 	.word	0x46020c00
 8007f24:	00f42400 	.word	0x00f42400
 8007f28:	08015974 	.word	0x08015974
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007f2c:	4baf      	ldr	r3, [pc, #700]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f38:	d107      	bne.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f40:	d103      	bne.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8007f42:	4bab      	ldr	r3, [pc, #684]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007f44:	637b      	str	r3, [r7, #52]	; 0x34
 8007f46:	f000 bda5 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007f4a:	4ba8      	ldr	r3, [pc, #672]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f56:	d107      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f5e:	d103      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8007f60:	4ba3      	ldr	r3, [pc, #652]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007f62:	637b      	str	r3, [r7, #52]	; 0x34
 8007f64:	f000 bd96 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f6c:	f000 bd92 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f74:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007f78:	430b      	orrs	r3, r1
 8007f7a:	d158      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007f7c:	4b9b      	ldr	r3, [pc, #620]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007f7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	d84b      	bhi.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8007f8e:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8007f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f94:	08007fcd 	.word	0x08007fcd
 8007f98:	08007fa9 	.word	0x08007fa9
 8007f9c:	08007fbb 	.word	0x08007fbb
 8007fa0:	08007fd7 	.word	0x08007fd7
 8007fa4:	08007fe1 	.word	0x08007fe1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe ff65 	bl	8006e7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fb6:	f000 bd6d 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fba:	f107 030c 	add.w	r3, r7, #12
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff fa2c 	bl	800741c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fc8:	f000 bd64 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007fcc:	f7fe f882 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 8007fd0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007fd2:	f000 bd5f 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007fd6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007fda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fdc:	f000 bd5a 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007fe0:	4b82      	ldr	r3, [pc, #520]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0320 	and.w	r3, r3, #32
 8007fe8:	2b20      	cmp	r3, #32
 8007fea:	d118      	bne.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fec:	4b7f      	ldr	r3, [pc, #508]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d005      	beq.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8007ff8:	4b7c      	ldr	r3, [pc, #496]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	0e1b      	lsrs	r3, r3, #24
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	e006      	b.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008004:	4b79      	ldr	r3, [pc, #484]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008006:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800800a:	041b      	lsls	r3, r3, #16
 800800c:	0e1b      	lsrs	r3, r3, #24
 800800e:	f003 030f 	and.w	r3, r3, #15
 8008012:	4a78      	ldr	r2, [pc, #480]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800801a:	f000 bd3b 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800801e:	2300      	movs	r3, #0
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008022:	f000 bd37 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800802a:	f000 bd33 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800802e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008032:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8008036:	430b      	orrs	r3, r1
 8008038:	d167      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800803a:	4b6c      	ldr	r3, [pc, #432]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800803c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008040:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008044:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008048:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800804c:	d036      	beq.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008054:	d855      	bhi.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8008056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008058:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800805c:	d029      	beq.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008064:	d84d      	bhi.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800806c:	d013      	beq.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008074:	d845      	bhi.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	2b00      	cmp	r3, #0
 800807a:	d015      	beq.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008082:	d13e      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe fef7 	bl	8006e7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008092:	f000 bcff 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008096:	f107 030c 	add.w	r3, r7, #12
 800809a:	4618      	mov	r0, r3
 800809c:	f7ff f9be 	bl	800741c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080a4:	f000 bcf6 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80080a8:	f7fe f814 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 80080ac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80080ae:	f000 bcf1 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80080b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80080b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080b8:	f000 bcec 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80080bc:	4b4b      	ldr	r3, [pc, #300]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0320 	and.w	r3, r3, #32
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	d118      	bne.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080c8:	4b48      	ldr	r3, [pc, #288]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80080d4:	4b45      	ldr	r3, [pc, #276]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	0e1b      	lsrs	r3, r3, #24
 80080da:	f003 030f 	and.w	r3, r3, #15
 80080de:	e006      	b.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80080e0:	4b42      	ldr	r3, [pc, #264]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080e6:	041b      	lsls	r3, r3, #16
 80080e8:	0e1b      	lsrs	r3, r3, #24
 80080ea:	f003 030f 	and.w	r3, r3, #15
 80080ee:	4a41      	ldr	r2, [pc, #260]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80080f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80080f6:	f000 bccd 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080fe:	f000 bcc9 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008106:	f000 bcc5 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800810a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800810e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8008112:	430b      	orrs	r3, r1
 8008114:	d14c      	bne.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008116:	4b35      	ldr	r3, [pc, #212]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800811c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008120:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008124:	2b00      	cmp	r3, #0
 8008126:	d104      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008128:	f7fd ffee 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 800812c:	6378      	str	r0, [r7, #52]	; 0x34
 800812e:	f000 bcb1 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008138:	d104      	bne.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800813a:	f7fd fec3 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 800813e:	6378      	str	r0, [r7, #52]	; 0x34
 8008140:	f000 bca8 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008144:	4b29      	ldr	r3, [pc, #164]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800814c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008150:	d107      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008158:	d103      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800815a:	4b25      	ldr	r3, [pc, #148]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800815c:	637b      	str	r3, [r7, #52]	; 0x34
 800815e:	f000 bc99 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8008162:	4b22      	ldr	r3, [pc, #136]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b20      	cmp	r3, #32
 800816c:	d11c      	bne.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008174:	d118      	bne.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008176:	4b1d      	ldr	r3, [pc, #116]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d005      	beq.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8008182:	4b1a      	ldr	r3, [pc, #104]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	0e1b      	lsrs	r3, r3, #24
 8008188:	f003 030f 	and.w	r3, r3, #15
 800818c:	e006      	b.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800818e:	4b17      	ldr	r3, [pc, #92]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008190:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008194:	041b      	lsls	r3, r3, #16
 8008196:	0e1b      	lsrs	r3, r3, #24
 8008198:	f003 030f 	and.w	r3, r3, #15
 800819c:	4a15      	ldr	r2, [pc, #84]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800819e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081a2:	637b      	str	r3, [r7, #52]	; 0x34
 80081a4:	f000 bc76 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	637b      	str	r3, [r7, #52]	; 0x34
 80081ac:	f000 bc72 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80081b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081b4:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80081b8:	430b      	orrs	r3, r1
 80081ba:	d153      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80081bc:	4b0b      	ldr	r3, [pc, #44]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80081be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80081c6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d104      	bne.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80081ce:	f7fd ff9b 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 80081d2:	6378      	str	r0, [r7, #52]	; 0x34
 80081d4:	f000 bc5e 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081de:	d10b      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80081e0:	f7fd fe70 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 80081e4:	6378      	str	r0, [r7, #52]	; 0x34
 80081e6:	f000 bc55 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80081ea:	bf00      	nop
 80081ec:	46020c00 	.word	0x46020c00
 80081f0:	00f42400 	.word	0x00f42400
 80081f4:	08015974 	.word	0x08015974
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80081f8:	4ba1      	ldr	r3, [pc, #644]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008204:	d107      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800820c:	d103      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 800820e:	4b9d      	ldr	r3, [pc, #628]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008210:	637b      	str	r3, [r7, #52]	; 0x34
 8008212:	f000 bc3f 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8008216:	4b9a      	ldr	r3, [pc, #616]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b20      	cmp	r3, #32
 8008220:	d11c      	bne.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008228:	d118      	bne.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800822a:	4b95      	ldr	r3, [pc, #596]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d005      	beq.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8008236:	4b92      	ldr	r3, [pc, #584]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	0e1b      	lsrs	r3, r3, #24
 800823c:	f003 030f 	and.w	r3, r3, #15
 8008240:	e006      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8008242:	4b8f      	ldr	r3, [pc, #572]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008244:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008248:	041b      	lsls	r3, r3, #16
 800824a:	0e1b      	lsrs	r3, r3, #24
 800824c:	f003 030f 	and.w	r3, r3, #15
 8008250:	4a8d      	ldr	r2, [pc, #564]	; (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008256:	637b      	str	r3, [r7, #52]	; 0x34
 8008258:	f000 bc1c 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	637b      	str	r3, [r7, #52]	; 0x34
 8008260:	f000 bc18 	b.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8008264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008268:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800826c:	430b      	orrs	r3, r1
 800826e:	d151      	bne.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008270:	4b83      	ldr	r3, [pc, #524]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008276:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800827a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800827c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827e:	2bc0      	cmp	r3, #192	; 0xc0
 8008280:	d024      	beq.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8008282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008284:	2bc0      	cmp	r3, #192	; 0xc0
 8008286:	d842      	bhi.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	2b80      	cmp	r3, #128	; 0x80
 800828c:	d00d      	beq.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	2b80      	cmp	r3, #128	; 0x80
 8008292:	d83c      	bhi.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	2b40      	cmp	r3, #64	; 0x40
 800829e:	d011      	beq.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 80082a0:	e035      	b.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80082a2:	f7fd ff59 	bl	8006158 <HAL_RCC_GetPCLK3Freq>
 80082a6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80082a8:	e3f4      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082aa:	4b75      	ldr	r3, [pc, #468]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082b6:	d102      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 80082b8:	4b72      	ldr	r3, [pc, #456]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80082ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80082bc:	e3ea      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082c2:	e3e7      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80082c4:	f7fd fdfe 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 80082c8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80082ca:	e3e3      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80082cc:	4b6c      	ldr	r3, [pc, #432]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0320 	and.w	r3, r3, #32
 80082d4:	2b20      	cmp	r3, #32
 80082d6:	d117      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082d8:	4b69      	ldr	r3, [pc, #420]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80082e4:	4b66      	ldr	r3, [pc, #408]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	0e1b      	lsrs	r3, r3, #24
 80082ea:	f003 030f 	and.w	r3, r3, #15
 80082ee:	e006      	b.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80082f0:	4b63      	ldr	r3, [pc, #396]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082f6:	041b      	lsls	r3, r3, #16
 80082f8:	0e1b      	lsrs	r3, r3, #24
 80082fa:	f003 030f 	and.w	r3, r3, #15
 80082fe:	4a62      	ldr	r2, [pc, #392]	; (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008304:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008306:	e3c5      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800830c:	e3c2      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008312:	e3bf      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008318:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800831c:	430b      	orrs	r3, r1
 800831e:	d147      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008320:	4b57      	ldr	r3, [pc, #348]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008326:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800832a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	2b00      	cmp	r3, #0
 8008330:	d103      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008332:	f7fd fee9 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 8008336:	6378      	str	r0, [r7, #52]	; 0x34
 8008338:	e3ac      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008340:	d103      	bne.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008342:	f7fd fdbf 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8008346:	6378      	str	r0, [r7, #52]	; 0x34
 8008348:	e3a4      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800834a:	4b4d      	ldr	r3, [pc, #308]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008356:	d106      	bne.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8008358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800835e:	d102      	bne.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8008360:	4b48      	ldr	r3, [pc, #288]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008362:	637b      	str	r3, [r7, #52]	; 0x34
 8008364:	e396      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8008366:	4b46      	ldr	r3, [pc, #280]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b20      	cmp	r3, #32
 8008370:	d11b      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008378:	d117      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800837a:	4b41      	ldr	r3, [pc, #260]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d005      	beq.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8008386:	4b3e      	ldr	r3, [pc, #248]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	0e1b      	lsrs	r3, r3, #24
 800838c:	f003 030f 	and.w	r3, r3, #15
 8008390:	e006      	b.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8008392:	4b3b      	ldr	r3, [pc, #236]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008398:	041b      	lsls	r3, r3, #16
 800839a:	0e1b      	lsrs	r3, r3, #24
 800839c:	f003 030f 	and.w	r3, r3, #15
 80083a0:	4a39      	ldr	r2, [pc, #228]	; (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80083a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a6:	637b      	str	r3, [r7, #52]	; 0x34
 80083a8:	e374      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34
 80083ae:	e371      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80083b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083b4:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80083b8:	430b      	orrs	r3, r1
 80083ba:	d16a      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80083bc:	4b30      	ldr	r3, [pc, #192]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80083c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083c6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d120      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80083ce:	4b2c      	ldr	r3, [pc, #176]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	2b20      	cmp	r3, #32
 80083d8:	d117      	bne.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083da:	4b29      	ldr	r3, [pc, #164]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80083e6:	4b26      	ldr	r3, [pc, #152]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	0e1b      	lsrs	r3, r3, #24
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	e006      	b.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80083f2:	4b23      	ldr	r3, [pc, #140]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083f8:	041b      	lsls	r3, r3, #16
 80083fa:	0e1b      	lsrs	r3, r3, #24
 80083fc:	f003 030f 	and.w	r3, r3, #15
 8008400:	4a21      	ldr	r2, [pc, #132]	; (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008406:	637b      	str	r3, [r7, #52]	; 0x34
 8008408:	e344      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	637b      	str	r3, [r7, #52]	; 0x34
 800840e:	e341      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008410:	4b1b      	ldr	r3, [pc, #108]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008412:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800841a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800841e:	d112      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008426:	d10e      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008428:	4b15      	ldr	r3, [pc, #84]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800842a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800842e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008436:	d102      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8008438:	23fa      	movs	r3, #250	; 0xfa
 800843a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800843c:	e32a      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800843e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008442:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008444:	e326      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008446:	4b0e      	ldr	r3, [pc, #56]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800844e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008452:	d106      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8008454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800845a:	d102      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 800845c:	4b09      	ldr	r3, [pc, #36]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800845e:	637b      	str	r3, [r7, #52]	; 0x34
 8008460:	e318      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008462:	4b07      	ldr	r3, [pc, #28]	; (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008468:	f003 0302 	and.w	r3, r3, #2
 800846c:	2b02      	cmp	r3, #2
 800846e:	d10d      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008476:	d109      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8008478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800847c:	637b      	str	r3, [r7, #52]	; 0x34
 800847e:	e309      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008480:	46020c00 	.word	0x46020c00
 8008484:	00f42400 	.word	0x00f42400
 8008488:	08015974 	.word	0x08015974
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	637b      	str	r3, [r7, #52]	; 0x34
 8008490:	e300      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008496:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800849a:	430b      	orrs	r3, r1
 800849c:	d164      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800849e:	4ba2      	ldr	r3, [pc, #648]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80084a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80084a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80084a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d120      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80084b0:	4b9d      	ldr	r3, [pc, #628]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0320 	and.w	r3, r3, #32
 80084b8:	2b20      	cmp	r3, #32
 80084ba:	d117      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084bc:	4b9a      	ldr	r3, [pc, #616]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80084c8:	4b97      	ldr	r3, [pc, #604]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	0e1b      	lsrs	r3, r3, #24
 80084ce:	f003 030f 	and.w	r3, r3, #15
 80084d2:	e006      	b.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 80084d4:	4b94      	ldr	r3, [pc, #592]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80084d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084da:	041b      	lsls	r3, r3, #16
 80084dc:	0e1b      	lsrs	r3, r3, #24
 80084de:	f003 030f 	and.w	r3, r3, #15
 80084e2:	4a92      	ldr	r2, [pc, #584]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80084e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084e8:	637b      	str	r3, [r7, #52]	; 0x34
 80084ea:	e2d3      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	637b      	str	r3, [r7, #52]	; 0x34
 80084f0:	e2d0      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80084f2:	4b8d      	ldr	r3, [pc, #564]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80084f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008500:	d112      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008508:	d10e      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800850a:	4b87      	ldr	r3, [pc, #540]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800850c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008518:	d102      	bne.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800851a:	23fa      	movs	r3, #250	; 0xfa
 800851c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800851e:	e2b9      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008520:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008524:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008526:	e2b5      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008528:	4b7f      	ldr	r3, [pc, #508]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008534:	d106      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800853c:	d102      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800853e:	4b7c      	ldr	r3, [pc, #496]	; (8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008540:	637b      	str	r3, [r7, #52]	; 0x34
 8008542:	e2a7      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008544:	4b78      	ldr	r3, [pc, #480]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b02      	cmp	r3, #2
 8008550:	d107      	bne.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008558:	d103      	bne.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800855a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800855e:	637b      	str	r3, [r7, #52]	; 0x34
 8008560:	e298      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	637b      	str	r3, [r7, #52]	; 0x34
 8008566:	e295      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800856c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008570:	430b      	orrs	r3, r1
 8008572:	d147      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008574:	4b6c      	ldr	r3, [pc, #432]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800857a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800857e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	2b00      	cmp	r3, #0
 8008584:	d103      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008586:	f7fd fdbf 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 800858a:	6378      	str	r0, [r7, #52]	; 0x34
 800858c:	e282      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800858e:	4b66      	ldr	r3, [pc, #408]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800859c:	d112      	bne.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085a4:	d10e      	bne.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085a6:	4b60      	ldr	r3, [pc, #384]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80085a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085b4:	d102      	bne.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 80085b6:	23fa      	movs	r3, #250	; 0xfa
 80085b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085ba:	e26b      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80085bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80085c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085c2:	e267      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80085c4:	4b58      	ldr	r3, [pc, #352]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085d0:	d106      	bne.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085d8:	d102      	bne.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 80085da:	4b55      	ldr	r3, [pc, #340]	; (8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80085dc:	637b      	str	r3, [r7, #52]	; 0x34
 80085de:	e259      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80085e0:	4b51      	ldr	r3, [pc, #324]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80085e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085e6:	f003 0302 	and.w	r3, r3, #2
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d107      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 80085ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80085f4:	d103      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 80085f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085fa:	637b      	str	r3, [r7, #52]	; 0x34
 80085fc:	e24a      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	637b      	str	r3, [r7, #52]	; 0x34
 8008602:	e247      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008604:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008608:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800860c:	430b      	orrs	r3, r1
 800860e:	d12d      	bne.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008610:	4b45      	ldr	r3, [pc, #276]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008616:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800861a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800861c:	4b42      	ldr	r3, [pc, #264]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008624:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008628:	d105      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	2b00      	cmp	r3, #0
 800862e:	d102      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8008630:	4b3f      	ldr	r3, [pc, #252]	; (8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008632:	637b      	str	r3, [r7, #52]	; 0x34
 8008634:	e22e      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800863c:	d107      	bne.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800863e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe fc1a 	bl	8006e7c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	637b      	str	r3, [r7, #52]	; 0x34
 800864c:	e222      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008654:	d107      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008656:	f107 0318 	add.w	r3, r7, #24
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe fd76 	bl	800714c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	637b      	str	r3, [r7, #52]	; 0x34
 8008664:	e216      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008666:	2300      	movs	r3, #0
 8008668:	637b      	str	r3, [r7, #52]	; 0x34
 800866a:	e213      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800866c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008670:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8008674:	430b      	orrs	r3, r1
 8008676:	d15d      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008678:	4b2b      	ldr	r3, [pc, #172]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800867a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800867e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008682:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800868a:	d028      	beq.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800868c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008692:	d845      	bhi.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800869a:	d013      	beq.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086a2:	d83d      	bhi.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d004      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086b0:	d004      	beq.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80086b2:	e035      	b.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80086b4:	f7fd fd3c 	bl	8006130 <HAL_RCC_GetPCLK2Freq>
 80086b8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80086ba:	e1eb      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80086bc:	f7fd fc02 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 80086c0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80086c2:	e1e7      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086c4:	4b18      	ldr	r3, [pc, #96]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086d0:	d102      	bne.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80086d2:	4b17      	ldr	r3, [pc, #92]	; (8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80086d4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086d6:	e1dd      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086dc:	e1da      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80086de:	4b12      	ldr	r3, [pc, #72]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d117      	bne.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80086ea:	4b0f      	ldr	r3, [pc, #60]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d005      	beq.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 80086f6:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	0e1b      	lsrs	r3, r3, #24
 80086fc:	f003 030f 	and.w	r3, r3, #15
 8008700:	e006      	b.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8008702:	4b09      	ldr	r3, [pc, #36]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008708:	041b      	lsls	r3, r3, #16
 800870a:	0e1b      	lsrs	r3, r3, #24
 800870c:	f003 030f 	and.w	r3, r3, #15
 8008710:	4a06      	ldr	r2, [pc, #24]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008716:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008718:	e1bc      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800871a:	2300      	movs	r3, #0
 800871c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800871e:	e1b9      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008724:	e1b6      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008726:	bf00      	nop
 8008728:	46020c00 	.word	0x46020c00
 800872c:	08015974 	.word	0x08015974
 8008730:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008738:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800873c:	430b      	orrs	r3, r1
 800873e:	d156      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008740:	4ba5      	ldr	r3, [pc, #660]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008746:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800874a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800874c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008752:	d028      	beq.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8008754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008756:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800875a:	d845      	bhi.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008762:	d013      	beq.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8008764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800876a:	d83d      	bhi.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876e:	2b00      	cmp	r3, #0
 8008770:	d004      	beq.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008778:	d004      	beq.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800877a:	e035      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800877c:	f7fd fcc4 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 8008780:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008782:	e187      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008784:	f7fd fb9e 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8008788:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800878a:	e183      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800878c:	4b92      	ldr	r3, [pc, #584]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008798:	d102      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 800879a:	4b90      	ldr	r3, [pc, #576]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800879c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800879e:	e179      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087a4:	e176      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80087a6:	4b8c      	ldr	r3, [pc, #560]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0320 	and.w	r3, r3, #32
 80087ae:	2b20      	cmp	r3, #32
 80087b0:	d117      	bne.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80087b2:	4b89      	ldr	r3, [pc, #548]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d005      	beq.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 80087be:	4b86      	ldr	r3, [pc, #536]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	0e1b      	lsrs	r3, r3, #24
 80087c4:	f003 030f 	and.w	r3, r3, #15
 80087c8:	e006      	b.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 80087ca:	4b83      	ldr	r3, [pc, #524]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80087cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087d0:	041b      	lsls	r3, r3, #16
 80087d2:	0e1b      	lsrs	r3, r3, #24
 80087d4:	f003 030f 	and.w	r3, r3, #15
 80087d8:	4a81      	ldr	r2, [pc, #516]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80087da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087de:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087e0:	e158      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087e6:	e155      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087ec:	e152      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80087ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f2:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80087f6:	430b      	orrs	r3, r1
 80087f8:	d177      	bne.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80087fa:	4b77      	ldr	r3, [pc, #476]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80087fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008800:	f003 0318 	and.w	r3, r3, #24
 8008804:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	2b18      	cmp	r3, #24
 800880a:	d86b      	bhi.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 800880c:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008812:	bf00      	nop
 8008814:	08008879 	.word	0x08008879
 8008818:	080088e5 	.word	0x080088e5
 800881c:	080088e5 	.word	0x080088e5
 8008820:	080088e5 	.word	0x080088e5
 8008824:	080088e5 	.word	0x080088e5
 8008828:	080088e5 	.word	0x080088e5
 800882c:	080088e5 	.word	0x080088e5
 8008830:	080088e5 	.word	0x080088e5
 8008834:	08008881 	.word	0x08008881
 8008838:	080088e5 	.word	0x080088e5
 800883c:	080088e5 	.word	0x080088e5
 8008840:	080088e5 	.word	0x080088e5
 8008844:	080088e5 	.word	0x080088e5
 8008848:	080088e5 	.word	0x080088e5
 800884c:	080088e5 	.word	0x080088e5
 8008850:	080088e5 	.word	0x080088e5
 8008854:	08008889 	.word	0x08008889
 8008858:	080088e5 	.word	0x080088e5
 800885c:	080088e5 	.word	0x080088e5
 8008860:	080088e5 	.word	0x080088e5
 8008864:	080088e5 	.word	0x080088e5
 8008868:	080088e5 	.word	0x080088e5
 800886c:	080088e5 	.word	0x080088e5
 8008870:	080088e5 	.word	0x080088e5
 8008874:	080088a3 	.word	0x080088a3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008878:	f7fd fc6e 	bl	8006158 <HAL_RCC_GetPCLK3Freq>
 800887c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800887e:	e109      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008880:	f7fd fb20 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8008884:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008886:	e105      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008888:	4b53      	ldr	r3, [pc, #332]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008894:	d102      	bne.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8008896:	4b51      	ldr	r3, [pc, #324]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8008898:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800889a:	e0fb      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088a0:	e0f8      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80088a2:	4b4d      	ldr	r3, [pc, #308]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	d117      	bne.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80088ae:	4b4a      	ldr	r3, [pc, #296]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d005      	beq.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 80088ba:	4b47      	ldr	r3, [pc, #284]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	0e1b      	lsrs	r3, r3, #24
 80088c0:	f003 030f 	and.w	r3, r3, #15
 80088c4:	e006      	b.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80088c6:	4b44      	ldr	r3, [pc, #272]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088cc:	041b      	lsls	r3, r3, #16
 80088ce:	0e1b      	lsrs	r3, r3, #24
 80088d0:	f003 030f 	and.w	r3, r3, #15
 80088d4:	4a42      	ldr	r2, [pc, #264]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80088d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088da:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088dc:	e0da      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088e2:	e0d7      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088e8:	e0d4      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80088ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088ee:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80088f2:	430b      	orrs	r3, r1
 80088f4:	d155      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80088f6:	4b38      	ldr	r3, [pc, #224]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80088fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008900:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008908:	d013      	beq.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008910:	d844      	bhi.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008914:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008918:	d013      	beq.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008920:	d83c      	bhi.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	2b00      	cmp	r3, #0
 8008926:	d014      	beq.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800892e:	d014      	beq.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8008930:	e034      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008932:	f107 0318 	add.w	r3, r7, #24
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe fc08 	bl	800714c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008940:	e0a8      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fa98 	bl	8006e7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008950:	e0a0      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008952:	f7fd fab7 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8008956:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008958:	e09c      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800895a:	4b1f      	ldr	r3, [pc, #124]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0320 	and.w	r3, r3, #32
 8008962:	2b20      	cmp	r3, #32
 8008964:	d117      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008966:	4b1c      	ldr	r3, [pc, #112]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d005      	beq.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8008972:	4b19      	ldr	r3, [pc, #100]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	0e1b      	lsrs	r3, r3, #24
 8008978:	f003 030f 	and.w	r3, r3, #15
 800897c:	e006      	b.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800897e:	4b16      	ldr	r3, [pc, #88]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008984:	041b      	lsls	r3, r3, #16
 8008986:	0e1b      	lsrs	r3, r3, #24
 8008988:	f003 030f 	and.w	r3, r3, #15
 800898c:	4a14      	ldr	r2, [pc, #80]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800898e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008992:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008994:	e07e      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800899a:	e07b      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800899c:	2300      	movs	r3, #0
 800899e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089a0:	e078      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80089a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089a6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80089aa:	430b      	orrs	r3, r1
 80089ac:	d138      	bne.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80089ae:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80089b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80089b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089b8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80089ba:	4b07      	ldr	r3, [pc, #28]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80089bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089c0:	f003 0302 	and.w	r3, r3, #2
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d10d      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10a      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 80089ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089d2:	637b      	str	r3, [r7, #52]	; 0x34
 80089d4:	e05e      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80089d6:	bf00      	nop
 80089d8:	46020c00 	.word	0x46020c00
 80089dc:	00f42400 	.word	0x00f42400
 80089e0:	08015974 	.word	0x08015974
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80089e4:	4b2e      	ldr	r3, [pc, #184]	; (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80089e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089f2:	d112      	bne.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 80089f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089fa:	d10e      	bne.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80089fc:	4b28      	ldr	r3, [pc, #160]	; (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80089fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a0a:	d102      	bne.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8008a0c:	23fa      	movs	r3, #250	; 0xfa
 8008a0e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a10:	e040      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008a12:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008a16:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a18:	e03c      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a1e:	e039      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a24:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	d131      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008a2c:	4b1c      	ldr	r3, [pc, #112]	; (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008a2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008a32:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008a36:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008a38:	4b19      	ldr	r3, [pc, #100]	; (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a44:	d105      	bne.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d102      	bne.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8008a4c:	4b15      	ldr	r3, [pc, #84]	; (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8008a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a50:	e020      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008a52:	4b13      	ldr	r3, [pc, #76]	; (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a5e:	d106      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8008a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a66:	d102      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008a68:	4b0f      	ldr	r3, [pc, #60]	; (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8008a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a6c:	e012      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	; (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a7a:	d106      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a82:	d102      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8008a84:	4b09      	ldr	r3, [pc, #36]	; (8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8008a86:	637b      	str	r3, [r7, #52]	; 0x34
 8008a88:	e004      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a8e:	e001      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8008a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3738      	adds	r7, #56	; 0x38
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	46020c00 	.word	0x46020c00
 8008aa4:	02dc6c00 	.word	0x02dc6c00
 8008aa8:	016e3600 	.word	0x016e3600
 8008aac:	00f42400 	.word	0x00f42400

08008ab0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008ab8:	4b47      	ldr	r3, [pc, #284]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a46      	ldr	r2, [pc, #280]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008abe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ac2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ac4:	f7f8 ff52 	bl	800196c <HAL_GetTick>
 8008ac8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008aca:	e008      	b.n	8008ade <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008acc:	f7f8 ff4e 	bl	800196c <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d901      	bls.n	8008ade <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e077      	b.n	8008bce <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ade:	4b3e      	ldr	r3, [pc, #248]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1f0      	bne.n	8008acc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008aea:	4b3b      	ldr	r3, [pc, #236]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008af2:	f023 0303 	bic.w	r3, r3, #3
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	6811      	ldr	r1, [r2, #0]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	6852      	ldr	r2, [r2, #4]
 8008afe:	3a01      	subs	r2, #1
 8008b00:	0212      	lsls	r2, r2, #8
 8008b02:	430a      	orrs	r2, r1
 8008b04:	4934      	ldr	r1, [pc, #208]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008b0a:	4b33      	ldr	r3, [pc, #204]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b0e:	4b33      	ldr	r3, [pc, #204]	; (8008bdc <RCCEx_PLL2_Config+0x12c>)
 8008b10:	4013      	ands	r3, r2
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	6892      	ldr	r2, [r2, #8]
 8008b16:	3a01      	subs	r2, #1
 8008b18:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	68d2      	ldr	r2, [r2, #12]
 8008b20:	3a01      	subs	r2, #1
 8008b22:	0252      	lsls	r2, r2, #9
 8008b24:	b292      	uxth	r2, r2
 8008b26:	4311      	orrs	r1, r2
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	6912      	ldr	r2, [r2, #16]
 8008b2c:	3a01      	subs	r2, #1
 8008b2e:	0412      	lsls	r2, r2, #16
 8008b30:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008b34:	4311      	orrs	r1, r2
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	6952      	ldr	r2, [r2, #20]
 8008b3a:	3a01      	subs	r2, #1
 8008b3c:	0612      	lsls	r2, r2, #24
 8008b3e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008b42:	430a      	orrs	r2, r1
 8008b44:	4924      	ldr	r1, [pc, #144]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008b4a:	4b23      	ldr	r3, [pc, #140]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4e:	f023 020c 	bic.w	r2, r3, #12
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	4920      	ldr	r1, [pc, #128]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008b5c:	4b1e      	ldr	r3, [pc, #120]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	491c      	ldr	r1, [pc, #112]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008b6a:	4b1b      	ldr	r3, [pc, #108]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6e:	4a1a      	ldr	r2, [pc, #104]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008b70:	f023 0310 	bic.w	r3, r3, #16
 8008b74:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b76:	4b18      	ldr	r3, [pc, #96]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	69d2      	ldr	r2, [r2, #28]
 8008b86:	00d2      	lsls	r2, r2, #3
 8008b88:	4913      	ldr	r1, [pc, #76]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008b8e:	4b12      	ldr	r3, [pc, #72]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b92:	4a11      	ldr	r2, [pc, #68]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008b94:	f043 0310 	orr.w	r3, r3, #16
 8008b98:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008b9a:	4b0f      	ldr	r3, [pc, #60]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a0e      	ldr	r2, [pc, #56]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008ba0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ba4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ba6:	f7f8 fee1 	bl	800196c <HAL_GetTick>
 8008baa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bac:	e008      	b.n	8008bc0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008bae:	f7f8 fedd 	bl	800196c <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d901      	bls.n	8008bc0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e006      	b.n	8008bce <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bc0:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <RCCEx_PLL2_Config+0x128>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d0f0      	beq.n	8008bae <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0

}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	46020c00 	.word	0x46020c00
 8008bdc:	80800000 	.word	0x80800000

08008be0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008be8:	4b47      	ldr	r3, [pc, #284]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a46      	ldr	r2, [pc, #280]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bf2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008bf4:	f7f8 feba 	bl	800196c <HAL_GetTick>
 8008bf8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bfa:	e008      	b.n	8008c0e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008bfc:	f7f8 feb6 	bl	800196c <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d901      	bls.n	8008c0e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e077      	b.n	8008cfe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c0e:	4b3e      	ldr	r3, [pc, #248]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1f0      	bne.n	8008bfc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008c1a:	4b3b      	ldr	r3, [pc, #236]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008c22:	f023 0303 	bic.w	r3, r3, #3
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	6811      	ldr	r1, [r2, #0]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	6852      	ldr	r2, [r2, #4]
 8008c2e:	3a01      	subs	r2, #1
 8008c30:	0212      	lsls	r2, r2, #8
 8008c32:	430a      	orrs	r2, r1
 8008c34:	4934      	ldr	r1, [pc, #208]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008c36:	4313      	orrs	r3, r2
 8008c38:	630b      	str	r3, [r1, #48]	; 0x30
 8008c3a:	4b33      	ldr	r3, [pc, #204]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c3e:	4b33      	ldr	r3, [pc, #204]	; (8008d0c <RCCEx_PLL3_Config+0x12c>)
 8008c40:	4013      	ands	r3, r2
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	6892      	ldr	r2, [r2, #8]
 8008c46:	3a01      	subs	r2, #1
 8008c48:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	68d2      	ldr	r2, [r2, #12]
 8008c50:	3a01      	subs	r2, #1
 8008c52:	0252      	lsls	r2, r2, #9
 8008c54:	b292      	uxth	r2, r2
 8008c56:	4311      	orrs	r1, r2
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	6912      	ldr	r2, [r2, #16]
 8008c5c:	3a01      	subs	r2, #1
 8008c5e:	0412      	lsls	r2, r2, #16
 8008c60:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008c64:	4311      	orrs	r1, r2
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	6952      	ldr	r2, [r2, #20]
 8008c6a:	3a01      	subs	r2, #1
 8008c6c:	0612      	lsls	r2, r2, #24
 8008c6e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008c72:	430a      	orrs	r2, r1
 8008c74:	4924      	ldr	r1, [pc, #144]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008c7a:	4b23      	ldr	r3, [pc, #140]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7e:	f023 020c 	bic.w	r2, r3, #12
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	4920      	ldr	r1, [pc, #128]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008c8c:	4b1e      	ldr	r3, [pc, #120]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	491c      	ldr	r1, [pc, #112]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008c9a:	4b1b      	ldr	r3, [pc, #108]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9e:	4a1a      	ldr	r2, [pc, #104]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008ca0:	f023 0310 	bic.w	r3, r3, #16
 8008ca4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ca6:	4b18      	ldr	r3, [pc, #96]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	69d2      	ldr	r2, [r2, #28]
 8008cb6:	00d2      	lsls	r2, r2, #3
 8008cb8:	4913      	ldr	r1, [pc, #76]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008cbe:	4b12      	ldr	r3, [pc, #72]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc2:	4a11      	ldr	r2, [pc, #68]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008cc4:	f043 0310 	orr.w	r3, r3, #16
 8008cc8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008cca:	4b0f      	ldr	r3, [pc, #60]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a0e      	ldr	r2, [pc, #56]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cd4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008cd6:	f7f8 fe49 	bl	800196c <HAL_GetTick>
 8008cda:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cdc:	e008      	b.n	8008cf0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cde:	f7f8 fe45 	bl	800196c <HAL_GetTick>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d901      	bls.n	8008cf0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e006      	b.n	8008cfe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cf0:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <RCCEx_PLL3_Config+0x128>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d0f0      	beq.n	8008cde <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	46020c00 	.word	0x46020c00
 8008d0c:	80800000 	.word	0x80800000

08008d10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d071      	beq.n	8008e06 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d106      	bne.n	8008d3c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7f8 fb5c 	bl	80013f4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008d44:	4b32      	ldr	r3, [pc, #200]	; (8008e10 <HAL_RTC_Init+0x100>)
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f003 0310 	and.w	r3, r3, #16
 8008d4c:	2b10      	cmp	r3, #16
 8008d4e:	d051      	beq.n	8008df4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d50:	4b2f      	ldr	r3, [pc, #188]	; (8008e10 <HAL_RTC_Init+0x100>)
 8008d52:	22ca      	movs	r2, #202	; 0xca
 8008d54:	625a      	str	r2, [r3, #36]	; 0x24
 8008d56:	4b2e      	ldr	r3, [pc, #184]	; (8008e10 <HAL_RTC_Init+0x100>)
 8008d58:	2253      	movs	r2, #83	; 0x53
 8008d5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fa6d 	bl	800923c <RTC_EnterInitMode>
 8008d62:	4603      	mov	r3, r0
 8008d64:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d13f      	bne.n	8008dec <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008d6c:	4b28      	ldr	r3, [pc, #160]	; (8008e10 <HAL_RTC_Init+0x100>)
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	4a27      	ldr	r2, [pc, #156]	; (8008e10 <HAL_RTC_Init+0x100>)
 8008d72:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d7a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008d7c:	4b24      	ldr	r3, [pc, #144]	; (8008e10 <HAL_RTC_Init+0x100>)
 8008d7e:	699a      	ldr	r2, [r3, #24]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6859      	ldr	r1, [r3, #4]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	4319      	orrs	r1, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	430b      	orrs	r3, r1
 8008d90:	491f      	ldr	r1, [pc, #124]	; (8008e10 <HAL_RTC_Init+0x100>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	041b      	lsls	r3, r3, #16
 8008da0:	491b      	ldr	r1, [pc, #108]	; (8008e10 <HAL_RTC_Init+0x100>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008da6:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <HAL_RTC_Init+0x100>)
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db6:	430b      	orrs	r3, r1
 8008db8:	4915      	ldr	r1, [pc, #84]	; (8008e10 <HAL_RTC_Init+0x100>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fa78 	bl	80092b4 <RTC_ExitInitMode>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10e      	bne.n	8008dec <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008dce:	4b10      	ldr	r3, [pc, #64]	; (8008e10 <HAL_RTC_Init+0x100>)
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a19      	ldr	r1, [r3, #32]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	4319      	orrs	r1, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	430b      	orrs	r3, r1
 8008de6:	490a      	ldr	r1, [pc, #40]	; (8008e10 <HAL_RTC_Init+0x100>)
 8008de8:	4313      	orrs	r3, r2
 8008dea:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dec:	4b08      	ldr	r3, [pc, #32]	; (8008e10 <HAL_RTC_Init+0x100>)
 8008dee:	22ff      	movs	r2, #255	; 0xff
 8008df0:	625a      	str	r2, [r3, #36]	; 0x24
 8008df2:	e001      	b.n	8008df8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d103      	bne.n	8008e06 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	46007800 	.word	0x46007800

08008e14 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e14:	b590      	push	{r4, r7, lr}
 8008e16:	b087      	sub	sp, #28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d101      	bne.n	8008e2e <HAL_RTC_SetTime+0x1a>
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	e088      	b.n	8008f40 <HAL_RTC_SetTime+0x12c>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2202      	movs	r2, #2
 8008e3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e3e:	4b42      	ldr	r3, [pc, #264]	; (8008f48 <HAL_RTC_SetTime+0x134>)
 8008e40:	22ca      	movs	r2, #202	; 0xca
 8008e42:	625a      	str	r2, [r3, #36]	; 0x24
 8008e44:	4b40      	ldr	r3, [pc, #256]	; (8008f48 <HAL_RTC_SetTime+0x134>)
 8008e46:	2253      	movs	r2, #83	; 0x53
 8008e48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 f9f6 	bl	800923c <RTC_EnterInitMode>
 8008e50:	4603      	mov	r3, r0
 8008e52:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008e54:	7cfb      	ldrb	r3, [r7, #19]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d163      	bne.n	8008f22 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008e5a:	4b3b      	ldr	r3, [pc, #236]	; (8008f48 <HAL_RTC_SetTime+0x134>)
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e66:	d057      	beq.n	8008f18 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d125      	bne.n	8008eba <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008e6e:	4b36      	ldr	r3, [pc, #216]	; (8008f48 <HAL_RTC_SetTime+0x134>)
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d102      	bne.n	8008e80 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 fa53 	bl	8009330 <RTC_ByteToBcd2>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	785b      	ldrb	r3, [r3, #1]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fa4c 	bl	8009330 <RTC_ByteToBcd2>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e9c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	789b      	ldrb	r3, [r3, #2]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 fa44 	bl	8009330 <RTC_ByteToBcd2>
 8008ea8:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008eaa:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	78db      	ldrb	r3, [r3, #3]
 8008eb2:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	617b      	str	r3, [r7, #20]
 8008eb8:	e017      	b.n	8008eea <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008eba:	4b23      	ldr	r3, [pc, #140]	; (8008f48 <HAL_RTC_SetTime+0x134>)
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d102      	bne.n	8008ecc <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	785b      	ldrb	r3, [r3, #1]
 8008ed6:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008ed8:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ede:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	78db      	ldrb	r3, [r3, #3]
 8008ee4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8008eea:	4a17      	ldr	r2, [pc, #92]	; (8008f48 <HAL_RTC_SetTime+0x134>)
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008ef2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008ef6:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8008ef8:	4b13      	ldr	r3, [pc, #76]	; (8008f48 <HAL_RTC_SetTime+0x134>)
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	4a12      	ldr	r2, [pc, #72]	; (8008f48 <HAL_RTC_SetTime+0x134>)
 8008efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f02:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8008f04:	4b10      	ldr	r3, [pc, #64]	; (8008f48 <HAL_RTC_SetTime+0x134>)
 8008f06:	699a      	ldr	r2, [r3, #24]
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	68d9      	ldr	r1, [r3, #12]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	430b      	orrs	r3, r1
 8008f12:	490d      	ldr	r1, [pc, #52]	; (8008f48 <HAL_RTC_SetTime+0x134>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 f9cb 	bl	80092b4 <RTC_ExitInitMode>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f22:	4b09      	ldr	r3, [pc, #36]	; (8008f48 <HAL_RTC_SetTime+0x134>)
 8008f24:	22ff      	movs	r2, #255	; 0xff
 8008f26:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008f28:	7cfb      	ldrb	r3, [r7, #19]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d103      	bne.n	8008f36 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8008f3e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	371c      	adds	r7, #28
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd90      	pop	{r4, r7, pc}
 8008f48:	46007800 	.word	0x46007800

08008f4c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8008f58:	4b34      	ldr	r3, [pc, #208]	; (800902c <HAL_RTC_GetTime+0xe0>)
 8008f5a:	689a      	ldr	r2, [r3, #8]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008f60:	4b32      	ldr	r3, [pc, #200]	; (800902c <HAL_RTC_GetTime+0xe0>)
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f6c:	d04a      	beq.n	8009004 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8008f6e:	4b2f      	ldr	r3, [pc, #188]	; (800902c <HAL_RTC_GetTime+0xe0>)
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8008f7a:	4b2c      	ldr	r3, [pc, #176]	; (800902c <HAL_RTC_GetTime+0xe0>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008f82:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008f86:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	0c1b      	lsrs	r3, r3, #16
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	0a1b      	lsrs	r3, r3, #8
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	0d9b      	lsrs	r3, r3, #22
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d12a      	bne.n	8009022 <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 f9cd 	bl	8009370 <RTC_Bcd2ToByte>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	461a      	mov	r2, r3
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	785b      	ldrb	r3, [r3, #1]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 f9c4 	bl	8009370 <RTC_Bcd2ToByte>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	461a      	mov	r2, r3
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	789b      	ldrb	r3, [r3, #2]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 f9bb 	bl	8009370 <RTC_Bcd2ToByte>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	709a      	strb	r2, [r3, #2]
 8009002:	e00e      	b.n	8009022 <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2200      	movs	r2, #0
 8009008:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2200      	movs	r2, #0
 800900e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2200      	movs	r2, #0
 8009014:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2200      	movs	r2, #0
 800901a:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2200      	movs	r2, #0
 8009020:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3718      	adds	r7, #24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	46007800 	.word	0x46007800

08009030 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009030:	b590      	push	{r4, r7, lr}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009042:	2b01      	cmp	r3, #1
 8009044:	d101      	bne.n	800904a <HAL_RTC_SetDate+0x1a>
 8009046:	2302      	movs	r3, #2
 8009048:	e071      	b.n	800912e <HAL_RTC_SetDate+0xfe>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2202      	movs	r2, #2
 8009056:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10e      	bne.n	800907e <HAL_RTC_SetDate+0x4e>
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	785b      	ldrb	r3, [r3, #1]
 8009064:	f003 0310 	and.w	r3, r3, #16
 8009068:	2b00      	cmp	r3, #0
 800906a:	d008      	beq.n	800907e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	785b      	ldrb	r3, [r3, #1]
 8009070:	f023 0310 	bic.w	r3, r3, #16
 8009074:	b2db      	uxtb	r3, r3
 8009076:	330a      	adds	r3, #10
 8009078:	b2da      	uxtb	r2, r3
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d11c      	bne.n	80090be <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	78db      	ldrb	r3, [r3, #3]
 8009088:	4618      	mov	r0, r3
 800908a:	f000 f951 	bl	8009330 <RTC_ByteToBcd2>
 800908e:	4603      	mov	r3, r0
 8009090:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	785b      	ldrb	r3, [r3, #1]
 8009096:	4618      	mov	r0, r3
 8009098:	f000 f94a 	bl	8009330 <RTC_ByteToBcd2>
 800909c:	4603      	mov	r3, r0
 800909e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80090a0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	789b      	ldrb	r3, [r3, #2]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 f942 	bl	8009330 <RTC_ByteToBcd2>
 80090ac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80090ae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80090b8:	4313      	orrs	r3, r2
 80090ba:	617b      	str	r3, [r7, #20]
 80090bc:	e00e      	b.n	80090dc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	78db      	ldrb	r3, [r3, #3]
 80090c2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	785b      	ldrb	r3, [r3, #1]
 80090c8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80090ca:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80090d0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80090d8:	4313      	orrs	r3, r2
 80090da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090dc:	4b16      	ldr	r3, [pc, #88]	; (8009138 <HAL_RTC_SetDate+0x108>)
 80090de:	22ca      	movs	r2, #202	; 0xca
 80090e0:	625a      	str	r2, [r3, #36]	; 0x24
 80090e2:	4b15      	ldr	r3, [pc, #84]	; (8009138 <HAL_RTC_SetDate+0x108>)
 80090e4:	2253      	movs	r2, #83	; 0x53
 80090e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f000 f8a7 	bl	800923c <RTC_EnterInitMode>
 80090ee:	4603      	mov	r3, r0
 80090f0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80090f2:	7cfb      	ldrb	r3, [r7, #19]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10b      	bne.n	8009110 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80090f8:	4a0f      	ldr	r2, [pc, #60]	; (8009138 <HAL_RTC_SetDate+0x108>)
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009100:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009104:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 f8d4 	bl	80092b4 <RTC_ExitInitMode>
 800910c:	4603      	mov	r3, r0
 800910e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009110:	4b09      	ldr	r3, [pc, #36]	; (8009138 <HAL_RTC_SetDate+0x108>)
 8009112:	22ff      	movs	r2, #255	; 0xff
 8009114:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009116:	7cfb      	ldrb	r3, [r7, #19]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d103      	bne.n	8009124 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800912c:	7cfb      	ldrb	r3, [r7, #19]
}
 800912e:	4618      	mov	r0, r3
 8009130:	371c      	adds	r7, #28
 8009132:	46bd      	mov	sp, r7
 8009134:	bd90      	pop	{r4, r7, pc}
 8009136:	bf00      	nop
 8009138:	46007800 	.word	0x46007800

0800913c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8009148:	4b22      	ldr	r3, [pc, #136]	; (80091d4 <HAL_RTC_GetDate+0x98>)
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009150:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009154:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	0c1b      	lsrs	r3, r3, #16
 800915a:	b2da      	uxtb	r2, r3
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	0a1b      	lsrs	r3, r3, #8
 8009164:	b2db      	uxtb	r3, r3
 8009166:	f003 031f 	and.w	r3, r3, #31
 800916a:	b2da      	uxtb	r2, r3
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	b2db      	uxtb	r3, r3
 8009174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009178:	b2da      	uxtb	r2, r3
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	0b5b      	lsrs	r3, r3, #13
 8009182:	b2db      	uxtb	r3, r3
 8009184:	f003 0307 	and.w	r3, r3, #7
 8009188:	b2da      	uxtb	r2, r3
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d11a      	bne.n	80091ca <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	78db      	ldrb	r3, [r3, #3]
 8009198:	4618      	mov	r0, r3
 800919a:	f000 f8e9 	bl	8009370 <RTC_Bcd2ToByte>
 800919e:	4603      	mov	r3, r0
 80091a0:	461a      	mov	r2, r3
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	785b      	ldrb	r3, [r3, #1]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 f8e0 	bl	8009370 <RTC_Bcd2ToByte>
 80091b0:	4603      	mov	r3, r0
 80091b2:	461a      	mov	r2, r3
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	789b      	ldrb	r3, [r3, #2]
 80091bc:	4618      	mov	r0, r3
 80091be:	f000 f8d7 	bl	8009370 <RTC_Bcd2ToByte>
 80091c2:	4603      	mov	r3, r0
 80091c4:	461a      	mov	r2, r3
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	46007800 	.word	0x46007800

080091d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80091e0:	4b15      	ldr	r3, [pc, #84]	; (8009238 <HAL_RTC_WaitForSynchro+0x60>)
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	4a14      	ldr	r2, [pc, #80]	; (8009238 <HAL_RTC_WaitForSynchro+0x60>)
 80091e6:	f023 0320 	bic.w	r3, r3, #32
 80091ea:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80091ec:	f7f8 fbbe 	bl	800196c <HAL_GetTick>
 80091f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80091f2:	e013      	b.n	800921c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80091f4:	f7f8 fbba 	bl	800196c <HAL_GetTick>
 80091f8:	4602      	mov	r2, r0
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009202:	d90b      	bls.n	800921c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009204:	4b0c      	ldr	r3, [pc, #48]	; (8009238 <HAL_RTC_WaitForSynchro+0x60>)
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10c      	bne.n	800922a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2203      	movs	r2, #3
 8009214:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e008      	b.n	800922e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800921c:	4b06      	ldr	r3, [pc, #24]	; (8009238 <HAL_RTC_WaitForSynchro+0x60>)
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f003 0320 	and.w	r3, r3, #32
 8009224:	2b00      	cmp	r3, #0
 8009226:	d0e5      	beq.n	80091f4 <HAL_RTC_WaitForSynchro+0x1c>
 8009228:	e000      	b.n	800922c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800922a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	46007800 	.word	0x46007800

0800923c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009248:	4b19      	ldr	r3, [pc, #100]	; (80092b0 <RTC_EnterInitMode+0x74>)
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009250:	2b00      	cmp	r3, #0
 8009252:	d128      	bne.n	80092a6 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009254:	4b16      	ldr	r3, [pc, #88]	; (80092b0 <RTC_EnterInitMode+0x74>)
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	4a15      	ldr	r2, [pc, #84]	; (80092b0 <RTC_EnterInitMode+0x74>)
 800925a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800925e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009260:	f7f8 fb84 	bl	800196c <HAL_GetTick>
 8009264:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009266:	e013      	b.n	8009290 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009268:	f7f8 fb80 	bl	800196c <HAL_GetTick>
 800926c:	4602      	mov	r2, r0
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009276:	d90b      	bls.n	8009290 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009278:	4b0d      	ldr	r3, [pc, #52]	; (80092b0 <RTC_EnterInitMode+0x74>)
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10f      	bne.n	80092a4 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2203      	movs	r2, #3
 800928c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009290:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <RTC_EnterInitMode+0x74>)
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009298:	2b00      	cmp	r3, #0
 800929a:	d104      	bne.n	80092a6 <RTC_EnterInitMode+0x6a>
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d1e2      	bne.n	8009268 <RTC_EnterInitMode+0x2c>
 80092a2:	e000      	b.n	80092a6 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 80092a4:	bf00      	nop
        }
      }
    }
  }

  return status;
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	46007800 	.word	0x46007800

080092b4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092bc:	2300      	movs	r3, #0
 80092be:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80092c0:	4b1a      	ldr	r3, [pc, #104]	; (800932c <RTC_ExitInitMode+0x78>)
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	4a19      	ldr	r2, [pc, #100]	; (800932c <RTC_ExitInitMode+0x78>)
 80092c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092ca:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80092cc:	4b17      	ldr	r3, [pc, #92]	; (800932c <RTC_ExitInitMode+0x78>)
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	f003 0320 	and.w	r3, r3, #32
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10c      	bne.n	80092f2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7ff ff7d 	bl	80091d8 <HAL_RTC_WaitForSynchro>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d01e      	beq.n	8009322 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2203      	movs	r2, #3
 80092e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80092ec:	2303      	movs	r3, #3
 80092ee:	73fb      	strb	r3, [r7, #15]
 80092f0:	e017      	b.n	8009322 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80092f2:	4b0e      	ldr	r3, [pc, #56]	; (800932c <RTC_ExitInitMode+0x78>)
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	4a0d      	ldr	r2, [pc, #52]	; (800932c <RTC_ExitInitMode+0x78>)
 80092f8:	f023 0320 	bic.w	r3, r3, #32
 80092fc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7ff ff6a 	bl	80091d8 <HAL_RTC_WaitForSynchro>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d005      	beq.n	8009316 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2203      	movs	r2, #3
 800930e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009316:	4b05      	ldr	r3, [pc, #20]	; (800932c <RTC_ExitInitMode+0x78>)
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	4a04      	ldr	r2, [pc, #16]	; (800932c <RTC_ExitInitMode+0x78>)
 800931c:	f043 0320 	orr.w	r3, r3, #32
 8009320:	6193      	str	r3, [r2, #24]
  }
  return status;
 8009322:	7bfb      	ldrb	r3, [r7, #15]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	46007800 	.word	0x46007800

08009330 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	4603      	mov	r3, r0
 8009338:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800933a:	2300      	movs	r3, #0
 800933c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800933e:	79fb      	ldrb	r3, [r7, #7]
 8009340:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8009342:	e005      	b.n	8009350 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3301      	adds	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800934a:	7afb      	ldrb	r3, [r7, #11]
 800934c:	3b0a      	subs	r3, #10
 800934e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8009350:	7afb      	ldrb	r3, [r7, #11]
 8009352:	2b09      	cmp	r3, #9
 8009354:	d8f6      	bhi.n	8009344 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	b2db      	uxtb	r3, r3
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	b2da      	uxtb	r2, r3
 800935e:	7afb      	ldrb	r3, [r7, #11]
 8009360:	4313      	orrs	r3, r2
 8009362:	b2db      	uxtb	r3, r3
}
 8009364:	4618      	mov	r0, r3
 8009366:	3714      	adds	r7, #20
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	091b      	lsrs	r3, r3, #4
 800937e:	b2db      	uxtb	r3, r3
 8009380:	461a      	mov	r2, r3
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	b2da      	uxtb	r2, r3
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	f003 030f 	and.w	r3, r3, #15
 8009396:	b2db      	uxtb	r3, r3
 8009398:	4413      	add	r3, r2
 800939a:	b2db      	uxtb	r3, r3
}
 800939c:	4618      	mov	r0, r3
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d101      	bne.n	80093c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 80093c0:	2302      	movs	r3, #2
 80093c2:	e063      	b.n	800948c <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2202      	movs	r2, #2
 80093d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80093d4:	4b2f      	ldr	r3, [pc, #188]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093d6:	22ca      	movs	r2, #202	; 0xca
 80093d8:	625a      	str	r2, [r3, #36]	; 0x24
 80093da:	4b2e      	ldr	r3, [pc, #184]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093dc:	2253      	movs	r2, #83	; 0x53
 80093de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 80093e0:	4b2c      	ldr	r3, [pc, #176]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	4a2b      	ldr	r2, [pc, #172]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093ea:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80093ec:	4b29      	ldr	r3, [pc, #164]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093ee:	2204      	movs	r2, #4
 80093f0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80093f2:	4b28      	ldr	r3, [pc, #160]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d126      	bne.n	800944c <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
  {
    tickstart = HAL_GetTick();
 80093fe:	f7f8 fab5 	bl	800196c <HAL_GetTick>
 8009402:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009404:	e01a      	b.n	800943c <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009406:	f7f8 fab1 	bl	800196c <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009414:	d912      	bls.n	800943c <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009416:	4b1f      	ldr	r3, [pc, #124]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	f003 0304 	and.w	r3, r3, #4
 800941e:	2b00      	cmp	r3, #0
 8009420:	d113      	bne.n	800944a <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009422:	4b1c      	ldr	r3, [pc, #112]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009424:	22ff      	movs	r2, #255	; 0xff
 8009426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2203      	movs	r2, #3
 800942c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e027      	b.n	800948c <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800943c:	4b15      	ldr	r3, [pc, #84]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	f003 0304 	and.w	r3, r3, #4
 8009444:	2b00      	cmp	r3, #0
 8009446:	d0de      	beq.n	8009406 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
 8009448:	e000      	b.n	800944c <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
        }
        else
        {
          break;
 800944a:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	041a      	lsls	r2, r3, #16
 8009450:	4910      	ldr	r1, [pc, #64]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	4313      	orrs	r3, r2
 8009456:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8009458:	4b0e      	ldr	r3, [pc, #56]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	f023 0207 	bic.w	r2, r3, #7
 8009460:	490c      	ldr	r1, [pc, #48]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4313      	orrs	r3, r2
 8009466:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8009468:	4b0a      	ldr	r3, [pc, #40]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	4a09      	ldr	r2, [pc, #36]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800946e:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8009472:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009474:	4b07      	ldr	r3, [pc, #28]	; (8009494 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009476:	22ff      	movs	r2, #255	; 0xff
 8009478:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3718      	adds	r7, #24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	46007800 	.word	0x46007800

08009498 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d101      	bne.n	80094ae <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80094aa:	2302      	movs	r3, #2
 80094ac:	e046      	b.n	800953c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2202      	movs	r2, #2
 80094ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094be:	4b21      	ldr	r3, [pc, #132]	; (8009544 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80094c0:	22ca      	movs	r2, #202	; 0xca
 80094c2:	625a      	str	r2, [r3, #36]	; 0x24
 80094c4:	4b1f      	ldr	r3, [pc, #124]	; (8009544 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80094c6:	2253      	movs	r2, #83	; 0x53
 80094c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 80094ca:	4b1e      	ldr	r3, [pc, #120]	; (8009544 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80094d0:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 80094d4:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 80094d6:	f7f8 fa49 	bl	800196c <HAL_GetTick>
 80094da:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80094dc:	e01a      	b.n	8009514 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80094de:	f7f8 fa45 	bl	800196c <HAL_GetTick>
 80094e2:	4602      	mov	r2, r0
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094ec:	d912      	bls.n	8009514 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80094ee:	4b15      	ldr	r3, [pc, #84]	; (8009544 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f003 0304 	and.w	r3, r3, #4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d113      	bne.n	8009522 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094fa:	4b12      	ldr	r3, [pc, #72]	; (8009544 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 80094fc:	22ff      	movs	r2, #255	; 0xff
 80094fe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2203      	movs	r2, #3
 8009504:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e013      	b.n	800953c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009514:	4b0b      	ldr	r3, [pc, #44]	; (8009544 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f003 0304 	and.w	r3, r3, #4
 800951c:	2b00      	cmp	r3, #0
 800951e:	d0de      	beq.n	80094de <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
 8009520:	e000      	b.n	8009524 <HAL_RTCEx_DeactivateWakeUpTimer+0x8c>
      }
      else
      {
        break;
 8009522:	bf00      	nop
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009524:	4b07      	ldr	r3, [pc, #28]	; (8009544 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009526:	22ff      	movs	r2, #255	; 0xff
 8009528:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	46007800 	.word	0x46007800

08009548 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8009550:	4b09      	ldr	r3, [pc, #36]	; (8009578 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8009552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009554:	f003 0304 	and.w	r3, r3, #4
 8009558:	2b00      	cmp	r3, #0
 800955a:	d005      	beq.n	8009568 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 800955c:	4b06      	ldr	r3, [pc, #24]	; (8009578 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800955e:	2204      	movs	r2, #4
 8009560:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7f7 fe80 	bl	8001268 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009570:	bf00      	nop
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	46007800 	.word	0x46007800

0800957c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	4910      	ldr	r1, [pc, #64]	; (80095d0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009590:	4313      	orrs	r3, r2
 8009592:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	431a      	orrs	r2, r3
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	490c      	ldr	r1, [pc, #48]	; (80095d4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 80095a8:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	6919      	ldr	r1, [r3, #16]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	041b      	lsls	r3, r3, #16
 80095ba:	430b      	orrs	r3, r1
 80095bc:	4905      	ldr	r1, [pc, #20]	; (80095d4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80095be:	4313      	orrs	r3, r2
 80095c0:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	46007800 	.word	0x46007800
 80095d4:	46007c00 	.word	0x46007c00

080095d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d101      	bne.n	80095ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e0fb      	b.n	80097e2 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a7f      	ldr	r2, [pc, #508]	; (80097ec <HAL_SPI_Init+0x214>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d004      	beq.n	80095fe <HAL_SPI_Init+0x26>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a7d      	ldr	r2, [pc, #500]	; (80097f0 <HAL_SPI_Init+0x218>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	e000      	b.n	8009600 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80095fe:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a78      	ldr	r2, [pc, #480]	; (80097ec <HAL_SPI_Init+0x214>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d004      	beq.n	800961a <HAL_SPI_Init+0x42>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a76      	ldr	r2, [pc, #472]	; (80097f0 <HAL_SPI_Init+0x218>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d105      	bne.n	8009626 <HAL_SPI_Init+0x4e>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	2b0f      	cmp	r3, #15
 8009620:	d901      	bls.n	8009626 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e0dd      	b.n	80097e2 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fbd8 	bl	8009ddc <SPI_GetPacketSize>
 800962c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a6e      	ldr	r2, [pc, #440]	; (80097ec <HAL_SPI_Init+0x214>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d004      	beq.n	8009642 <HAL_SPI_Init+0x6a>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a6c      	ldr	r2, [pc, #432]	; (80097f0 <HAL_SPI_Init+0x218>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d102      	bne.n	8009648 <HAL_SPI_Init+0x70>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2b08      	cmp	r3, #8
 8009646:	d816      	bhi.n	8009676 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800964c:	4a69      	ldr	r2, [pc, #420]	; (80097f4 <HAL_SPI_Init+0x21c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d00e      	beq.n	8009670 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a68      	ldr	r2, [pc, #416]	; (80097f8 <HAL_SPI_Init+0x220>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d009      	beq.n	8009670 <HAL_SPI_Init+0x98>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a66      	ldr	r2, [pc, #408]	; (80097fc <HAL_SPI_Init+0x224>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d004      	beq.n	8009670 <HAL_SPI_Init+0x98>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a65      	ldr	r2, [pc, #404]	; (8009800 <HAL_SPI_Init+0x228>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d104      	bne.n	800967a <HAL_SPI_Init+0xa2>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2b10      	cmp	r3, #16
 8009674:	d901      	bls.n	800967a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e0b3      	b.n	80097e2 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	d106      	bne.n	8009694 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7f7 fefc 	bl	800148c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2202      	movs	r2, #2
 8009698:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 0201 	bic.w	r2, r2, #1
 80096aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80096b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80096c0:	d119      	bne.n	80096f6 <HAL_SPI_Init+0x11e>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096ca:	d103      	bne.n	80096d4 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d008      	beq.n	80096e6 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10c      	bne.n	80096f6 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80096e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096e4:	d107      	bne.n	80096f6 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80096f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00f      	beq.n	8009722 <HAL_SPI_Init+0x14a>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	2b06      	cmp	r3, #6
 8009708:	d90b      	bls.n	8009722 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	430a      	orrs	r2, r1
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	e007      	b.n	8009732 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009730:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	69da      	ldr	r2, [r3, #28]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800973a:	431a      	orrs	r2, r3
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	431a      	orrs	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009744:	ea42 0103 	orr.w	r1, r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	68da      	ldr	r2, [r3, #12]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	430a      	orrs	r2, r1
 8009752:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975c:	431a      	orrs	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009762:	431a      	orrs	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	431a      	orrs	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	431a      	orrs	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	695b      	ldr	r3, [r3, #20]
 8009774:	431a      	orrs	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	431a      	orrs	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	431a      	orrs	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009786:	431a      	orrs	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	431a      	orrs	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009792:	431a      	orrs	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009798:	431a      	orrs	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800979e:	ea42 0103 	orr.w	r1, r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00a      	beq.n	80097d0 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	430a      	orrs	r2, r1
 80097ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	46002000 	.word	0x46002000
 80097f0:	56002000 	.word	0x56002000
 80097f4:	40013000 	.word	0x40013000
 80097f8:	50013000 	.word	0x50013000
 80097fc:	40003800 	.word	0x40003800
 8009800:	50003800 	.word	0x50003800

08009804 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b08a      	sub	sp, #40	; 0x28
 8009808:	af02      	add	r7, sp, #8
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	4613      	mov	r3, r2
 8009812:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3320      	adds	r3, #32
 800981a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009826:	2b01      	cmp	r3, #1
 8009828:	d101      	bne.n	800982e <HAL_SPI_Transmit+0x2a>
 800982a:	2302      	movs	r3, #2
 800982c:	e203      	b.n	8009c36 <HAL_SPI_Transmit+0x432>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009836:	f7f8 f899 	bl	800196c <HAL_GetTick>
 800983a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b01      	cmp	r3, #1
 8009846:	d007      	beq.n	8009858 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009848:	2302      	movs	r3, #2
 800984a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8009854:	7efb      	ldrb	r3, [r7, #27]
 8009856:	e1ee      	b.n	8009c36 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <HAL_SPI_Transmit+0x60>
 800985e:	88fb      	ldrh	r3, [r7, #6]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d107      	bne.n	8009874 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8009870:	7efb      	ldrb	r3, [r7, #27]
 8009872:	e1e0      	b.n	8009c36 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2203      	movs	r2, #3
 8009878:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	88fa      	ldrh	r2, [r7, #6]
 800988e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	88fa      	ldrh	r2, [r7, #6]
 8009896:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80098c4:	d108      	bne.n	80098d8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	e009      	b.n	80098ec <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80098ea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	0c1b      	lsrs	r3, r3, #16
 80098f4:	041b      	lsls	r3, r3, #16
 80098f6:	88f9      	ldrh	r1, [r7, #6]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	6812      	ldr	r2, [r2, #0]
 80098fc:	430b      	orrs	r3, r1
 80098fe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f042 0201 	orr.w	r2, r2, #1
 800990e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10c      	bne.n	8009938 <HAL_SPI_Transmit+0x134>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009926:	d107      	bne.n	8009938 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009936:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	2b0f      	cmp	r3, #15
 800993e:	d95b      	bls.n	80099f8 <HAL_SPI_Transmit+0x1f4>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a8f      	ldr	r2, [pc, #572]	; (8009b84 <HAL_SPI_Transmit+0x380>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d04f      	beq.n	80099ea <HAL_SPI_Transmit+0x1e6>
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a8e      	ldr	r2, [pc, #568]	; (8009b88 <HAL_SPI_Transmit+0x384>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d04a      	beq.n	80099ea <HAL_SPI_Transmit+0x1e6>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a8c      	ldr	r2, [pc, #560]	; (8009b8c <HAL_SPI_Transmit+0x388>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d045      	beq.n	80099ea <HAL_SPI_Transmit+0x1e6>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a8b      	ldr	r2, [pc, #556]	; (8009b90 <HAL_SPI_Transmit+0x38c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d147      	bne.n	80099f8 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009968:	e03f      	b.n	80099ea <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	695b      	ldr	r3, [r3, #20]
 8009970:	f003 0302 	and.w	r3, r3, #2
 8009974:	2b02      	cmp	r3, #2
 8009976:	d114      	bne.n	80099a2 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6812      	ldr	r2, [r2, #0]
 8009982:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009988:	1d1a      	adds	r2, r3, #4
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009994:	b29b      	uxth	r3, r3
 8009996:	3b01      	subs	r3, #1
 8009998:	b29a      	uxth	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80099a0:	e023      	b.n	80099ea <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099a2:	f7f7 ffe3 	bl	800196c <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d803      	bhi.n	80099ba <HAL_SPI_Transmit+0x1b6>
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b8:	d102      	bne.n	80099c0 <HAL_SPI_Transmit+0x1bc>
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d114      	bne.n	80099ea <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 f93d 	bl	8009c40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80099e6:	2303      	movs	r3, #3
 80099e8:	e125      	b.n	8009c36 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1b9      	bne.n	800996a <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80099f6:	e0f8      	b.n	8009bea <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	2b07      	cmp	r3, #7
 80099fe:	f240 80ed 	bls.w	8009bdc <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009a02:	e05d      	b.n	8009ac0 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	f003 0302 	and.w	r3, r3, #2
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d132      	bne.n	8009a78 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d918      	bls.n	8009a50 <HAL_SPI_Transmit+0x24c>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d014      	beq.n	8009a50 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6812      	ldr	r2, [r2, #0]
 8009a30:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a36:	1d1a      	adds	r2, r3, #4
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	3b02      	subs	r3, #2
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009a4e:	e037      	b.n	8009ac0 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a54:	881a      	ldrh	r2, [r3, #0]
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a5e:	1c9a      	adds	r2, r3, #2
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009a76:	e023      	b.n	8009ac0 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a78:	f7f7 ff78 	bl	800196c <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d803      	bhi.n	8009a90 <HAL_SPI_Transmit+0x28c>
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8e:	d102      	bne.n	8009a96 <HAL_SPI_Transmit+0x292>
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d114      	bne.n	8009ac0 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f000 f8d2 	bl	8009c40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e0ba      	b.n	8009c36 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d19b      	bne.n	8009a04 <HAL_SPI_Transmit+0x200>
 8009acc:	e08d      	b.n	8009bea <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	f003 0302 	and.w	r3, r3, #2
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d15b      	bne.n	8009b94 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d918      	bls.n	8009b1a <HAL_SPI_Transmit+0x316>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aec:	2b40      	cmp	r3, #64	; 0x40
 8009aee:	d914      	bls.n	8009b1a <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6812      	ldr	r2, [r2, #0]
 8009afa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b00:	1d1a      	adds	r2, r3, #4
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	3b04      	subs	r3, #4
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009b18:	e060      	b.n	8009bdc <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d917      	bls.n	8009b56 <HAL_SPI_Transmit+0x352>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d013      	beq.n	8009b56 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b32:	881a      	ldrh	r2, [r3, #0]
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b3c:	1c9a      	adds	r2, r3, #2
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	3b02      	subs	r3, #2
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009b54:	e042      	b.n	8009bdc <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3320      	adds	r3, #32
 8009b60:	7812      	ldrb	r2, [r2, #0]
 8009b62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	3b01      	subs	r3, #1
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009b80:	e02c      	b.n	8009bdc <HAL_SPI_Transmit+0x3d8>
 8009b82:	bf00      	nop
 8009b84:	40013000 	.word	0x40013000
 8009b88:	50013000 	.word	0x50013000
 8009b8c:	40003800 	.word	0x40003800
 8009b90:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b94:	f7f7 feea 	bl	800196c <HAL_GetTick>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d803      	bhi.n	8009bac <HAL_SPI_Transmit+0x3a8>
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009baa:	d102      	bne.n	8009bb2 <HAL_SPI_Transmit+0x3ae>
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d114      	bne.n	8009bdc <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 f844 	bl	8009c40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e02c      	b.n	8009c36 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f47f af72 	bne.w	8009ace <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	2108      	movs	r1, #8
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f000 f8c3 	bl	8009d80 <SPI_WaitOnFlagUntilTimeout>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d007      	beq.n	8009c10 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c06:	f043 0220 	orr.w	r2, r3, #32
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 f815 	bl	8009c40 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e000      	b.n	8009c36 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8009c34:	7efb      	ldrb	r3, [r7, #27]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3720      	adds	r7, #32
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop

08009c40 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b085      	sub	sp, #20
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	699a      	ldr	r2, [r3, #24]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f042 0208 	orr.w	r2, r2, #8
 8009c5e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	699a      	ldr	r2, [r3, #24]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f042 0210 	orr.w	r2, r2, #16
 8009c6e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f022 0201 	bic.w	r2, r2, #1
 8009c7e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	6812      	ldr	r2, [r2, #0]
 8009c8a:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8009c8e:	f023 0303 	bic.w	r3, r3, #3
 8009c92:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	689a      	ldr	r2, [r3, #8]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009ca2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	d014      	beq.n	8009cda <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f003 0320 	and.w	r3, r3, #32
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00f      	beq.n	8009cda <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	699a      	ldr	r2, [r3, #24]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f042 0220 	orr.w	r2, r2, #32
 8009cd8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b03      	cmp	r3, #3
 8009ce4:	d014      	beq.n	8009d10 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00f      	beq.n	8009d10 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cf6:	f043 0204 	orr.w	r2, r3, #4
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	699a      	ldr	r2, [r3, #24]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d0e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00f      	beq.n	8009d3a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d20:	f043 0201 	orr.w	r2, r3, #1
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	699a      	ldr	r2, [r3, #24]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d38:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00f      	beq.n	8009d64 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d4a:	f043 0208 	orr.w	r2, r3, #8
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	699a      	ldr	r2, [r3, #24]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d62:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8009d74:	bf00      	nop
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	603b      	str	r3, [r7, #0]
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009d90:	e010      	b.n	8009db4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d92:	f7f7 fdeb 	bl	800196c <HAL_GetTick>
 8009d96:	4602      	mov	r2, r0
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d803      	bhi.n	8009daa <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da8:	d102      	bne.n	8009db0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e00f      	b.n	8009dd4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	695a      	ldr	r2, [r3, #20]
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	bf0c      	ite	eq
 8009dc4:	2301      	moveq	r3, #1
 8009dc6:	2300      	movne	r3, #0
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	461a      	mov	r2, r3
 8009dcc:	79fb      	ldrb	r3, [r7, #7]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d0df      	beq.n	8009d92 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009de8:	095b      	lsrs	r3, r3, #5
 8009dea:	3301      	adds	r3, #1
 8009dec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	3301      	adds	r3, #1
 8009df4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	3307      	adds	r3, #7
 8009dfa:	08db      	lsrs	r3, r3, #3
 8009dfc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	fb02 f303 	mul.w	r3, r2, r3
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d12e      	bne.n	8009e86 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d101      	bne.n	8009e36 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8009e32:	2302      	movs	r3, #2
 8009e34:	e028      	b.n	8009e88 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2202      	movs	r2, #2
 8009e42:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 0201 	bic.w	r2, r2, #1
 8009e54:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8009e62:	ea42 0103 	orr.w	r1, r2, r3
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	689a      	ldr	r2, [r3, #8]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	430a      	orrs	r2, r1
 8009e70:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	e000      	b.n	8009e88 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
  }
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e049      	b.n	8009f3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d106      	bne.n	8009ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f841 	bl	8009f42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	3304      	adds	r3, #4
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	f000 fa88 	bl	800a3e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009f4a:	bf00      	nop
 8009f4c:	370c      	adds	r7, #12
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
	...

08009f58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d001      	beq.n	8009f70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e072      	b.n	800a056 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2202      	movs	r2, #2
 8009f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68da      	ldr	r2, [r3, #12]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f042 0201 	orr.w	r2, r2, #1
 8009f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a35      	ldr	r2, [pc, #212]	; (800a064 <HAL_TIM_Base_Start_IT+0x10c>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d040      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0xbc>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a34      	ldr	r2, [pc, #208]	; (800a068 <HAL_TIM_Base_Start_IT+0x110>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d03b      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0xbc>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fa4:	d036      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0xbc>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fae:	d031      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0xbc>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a2d      	ldr	r2, [pc, #180]	; (800a06c <HAL_TIM_Base_Start_IT+0x114>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d02c      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0xbc>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a2c      	ldr	r2, [pc, #176]	; (800a070 <HAL_TIM_Base_Start_IT+0x118>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d027      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0xbc>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a2a      	ldr	r2, [pc, #168]	; (800a074 <HAL_TIM_Base_Start_IT+0x11c>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d022      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0xbc>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a29      	ldr	r2, [pc, #164]	; (800a078 <HAL_TIM_Base_Start_IT+0x120>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d01d      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0xbc>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a27      	ldr	r2, [pc, #156]	; (800a07c <HAL_TIM_Base_Start_IT+0x124>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d018      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0xbc>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a26      	ldr	r2, [pc, #152]	; (800a080 <HAL_TIM_Base_Start_IT+0x128>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d013      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0xbc>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a24      	ldr	r2, [pc, #144]	; (800a084 <HAL_TIM_Base_Start_IT+0x12c>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d00e      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0xbc>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a23      	ldr	r2, [pc, #140]	; (800a088 <HAL_TIM_Base_Start_IT+0x130>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d009      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0xbc>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a21      	ldr	r2, [pc, #132]	; (800a08c <HAL_TIM_Base_Start_IT+0x134>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d004      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0xbc>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a20      	ldr	r2, [pc, #128]	; (800a090 <HAL_TIM_Base_Start_IT+0x138>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d115      	bne.n	800a040 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	689a      	ldr	r2, [r3, #8]
 800a01a:	4b1e      	ldr	r3, [pc, #120]	; (800a094 <HAL_TIM_Base_Start_IT+0x13c>)
 800a01c:	4013      	ands	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2b06      	cmp	r3, #6
 800a024:	d015      	beq.n	800a052 <HAL_TIM_Base_Start_IT+0xfa>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a02c:	d011      	beq.n	800a052 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f042 0201 	orr.w	r2, r2, #1
 800a03c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a03e:	e008      	b.n	800a052 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f042 0201 	orr.w	r2, r2, #1
 800a04e:	601a      	str	r2, [r3, #0]
 800a050:	e000      	b.n	800a054 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3714      	adds	r7, #20
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	40012c00 	.word	0x40012c00
 800a068:	50012c00 	.word	0x50012c00
 800a06c:	40000400 	.word	0x40000400
 800a070:	50000400 	.word	0x50000400
 800a074:	40000800 	.word	0x40000800
 800a078:	50000800 	.word	0x50000800
 800a07c:	40000c00 	.word	0x40000c00
 800a080:	50000c00 	.word	0x50000c00
 800a084:	40013400 	.word	0x40013400
 800a088:	50013400 	.word	0x50013400
 800a08c:	40014000 	.word	0x40014000
 800a090:	50014000 	.word	0x50014000
 800a094:	00010007 	.word	0x00010007

0800a098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	f003 0302 	and.w	r3, r3, #2
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d122      	bne.n	800a0f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	f003 0302 	and.w	r3, r3, #2
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d11b      	bne.n	800a0f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f06f 0202 	mvn.w	r2, #2
 800a0c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	f003 0303 	and.w	r3, r3, #3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f965 	bl	800a3aa <HAL_TIM_IC_CaptureCallback>
 800a0e0:	e005      	b.n	800a0ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f957 	bl	800a396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f968 	bl	800a3be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	f003 0304 	and.w	r3, r3, #4
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d122      	bne.n	800a148 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	f003 0304 	and.w	r3, r3, #4
 800a10c:	2b04      	cmp	r3, #4
 800a10e:	d11b      	bne.n	800a148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f06f 0204 	mvn.w	r2, #4
 800a118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2202      	movs	r2, #2
 800a11e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d003      	beq.n	800a136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f93b 	bl	800a3aa <HAL_TIM_IC_CaptureCallback>
 800a134:	e005      	b.n	800a142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f92d 	bl	800a396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f93e 	bl	800a3be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	f003 0308 	and.w	r3, r3, #8
 800a152:	2b08      	cmp	r3, #8
 800a154:	d122      	bne.n	800a19c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	f003 0308 	and.w	r3, r3, #8
 800a160:	2b08      	cmp	r3, #8
 800a162:	d11b      	bne.n	800a19c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f06f 0208 	mvn.w	r2, #8
 800a16c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2204      	movs	r2, #4
 800a172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	69db      	ldr	r3, [r3, #28]
 800a17a:	f003 0303 	and.w	r3, r3, #3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f911 	bl	800a3aa <HAL_TIM_IC_CaptureCallback>
 800a188:	e005      	b.n	800a196 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f903 	bl	800a396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f914 	bl	800a3be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	f003 0310 	and.w	r3, r3, #16
 800a1a6:	2b10      	cmp	r3, #16
 800a1a8:	d122      	bne.n	800a1f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	f003 0310 	and.w	r3, r3, #16
 800a1b4:	2b10      	cmp	r3, #16
 800a1b6:	d11b      	bne.n	800a1f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f06f 0210 	mvn.w	r2, #16
 800a1c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2208      	movs	r2, #8
 800a1c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	69db      	ldr	r3, [r3, #28]
 800a1ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d003      	beq.n	800a1de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f8e7 	bl	800a3aa <HAL_TIM_IC_CaptureCallback>
 800a1dc:	e005      	b.n	800a1ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f8d9 	bl	800a396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f8ea 	bl	800a3be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	f003 0301 	and.w	r3, r3, #1
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d10e      	bne.n	800a21c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d107      	bne.n	800a21c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f06f 0201 	mvn.w	r2, #1
 800a214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7f7 f832 	bl	8001280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a226:	2b80      	cmp	r3, #128	; 0x80
 800a228:	d10e      	bne.n	800a248 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a234:	2b80      	cmp	r3, #128	; 0x80
 800a236:	d107      	bne.n	800a248 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f9d4 	bl	800a5f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a256:	d10e      	bne.n	800a276 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a262:	2b80      	cmp	r3, #128	; 0x80
 800a264:	d107      	bne.n	800a276 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a26e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f9c7 	bl	800a604 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a280:	2b40      	cmp	r3, #64	; 0x40
 800a282:	d10e      	bne.n	800a2a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28e:	2b40      	cmp	r3, #64	; 0x40
 800a290:	d107      	bne.n	800a2a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a29a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f898 	bl	800a3d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	f003 0320 	and.w	r3, r3, #32
 800a2ac:	2b20      	cmp	r3, #32
 800a2ae:	d10e      	bne.n	800a2ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	f003 0320 	and.w	r3, r3, #32
 800a2ba:	2b20      	cmp	r3, #32
 800a2bc:	d107      	bne.n	800a2ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f06f 0220 	mvn.w	r2, #32
 800a2c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f987 	bl	800a5dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2dc:	d10f      	bne.n	800a2fe <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2ec:	d107      	bne.n	800a2fe <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a2f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f98d 	bl	800a618 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a30c:	d10f      	bne.n	800a32e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a318:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a31c:	d107      	bne.n	800a32e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 f97f 	bl	800a62c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a33c:	d10f      	bne.n	800a35e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a34c:	d107      	bne.n	800a35e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f971 	bl	800a640 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a368:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a36c:	d10f      	bne.n	800a38e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a378:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a37c:	d107      	bne.n	800a38e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 f963 	bl	800a654 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a38e:	bf00      	nop
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a396:	b480      	push	{r7}
 800a398:	b083      	sub	sp, #12
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a39e:	bf00      	nop
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3b2:	bf00      	nop
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b083      	sub	sp, #12
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3c6:	bf00      	nop
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b083      	sub	sp, #12
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3da:	bf00      	nop
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
	...

0800a3e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a68      	ldr	r2, [pc, #416]	; (800a59c <TIM_Base_SetConfig+0x1b4>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d02b      	beq.n	800a458 <TIM_Base_SetConfig+0x70>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a67      	ldr	r2, [pc, #412]	; (800a5a0 <TIM_Base_SetConfig+0x1b8>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d027      	beq.n	800a458 <TIM_Base_SetConfig+0x70>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a40e:	d023      	beq.n	800a458 <TIM_Base_SetConfig+0x70>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a416:	d01f      	beq.n	800a458 <TIM_Base_SetConfig+0x70>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a62      	ldr	r2, [pc, #392]	; (800a5a4 <TIM_Base_SetConfig+0x1bc>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d01b      	beq.n	800a458 <TIM_Base_SetConfig+0x70>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a61      	ldr	r2, [pc, #388]	; (800a5a8 <TIM_Base_SetConfig+0x1c0>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d017      	beq.n	800a458 <TIM_Base_SetConfig+0x70>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a60      	ldr	r2, [pc, #384]	; (800a5ac <TIM_Base_SetConfig+0x1c4>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d013      	beq.n	800a458 <TIM_Base_SetConfig+0x70>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a5f      	ldr	r2, [pc, #380]	; (800a5b0 <TIM_Base_SetConfig+0x1c8>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d00f      	beq.n	800a458 <TIM_Base_SetConfig+0x70>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4a5e      	ldr	r2, [pc, #376]	; (800a5b4 <TIM_Base_SetConfig+0x1cc>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d00b      	beq.n	800a458 <TIM_Base_SetConfig+0x70>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a5d      	ldr	r2, [pc, #372]	; (800a5b8 <TIM_Base_SetConfig+0x1d0>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d007      	beq.n	800a458 <TIM_Base_SetConfig+0x70>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a5c      	ldr	r2, [pc, #368]	; (800a5bc <TIM_Base_SetConfig+0x1d4>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d003      	beq.n	800a458 <TIM_Base_SetConfig+0x70>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a5b      	ldr	r2, [pc, #364]	; (800a5c0 <TIM_Base_SetConfig+0x1d8>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d108      	bne.n	800a46a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a45e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	4313      	orrs	r3, r2
 800a468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a4b      	ldr	r2, [pc, #300]	; (800a59c <TIM_Base_SetConfig+0x1b4>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d043      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a4a      	ldr	r2, [pc, #296]	; (800a5a0 <TIM_Base_SetConfig+0x1b8>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d03f      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a480:	d03b      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a488:	d037      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a45      	ldr	r2, [pc, #276]	; (800a5a4 <TIM_Base_SetConfig+0x1bc>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d033      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a44      	ldr	r2, [pc, #272]	; (800a5a8 <TIM_Base_SetConfig+0x1c0>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d02f      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a43      	ldr	r2, [pc, #268]	; (800a5ac <TIM_Base_SetConfig+0x1c4>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d02b      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a42      	ldr	r2, [pc, #264]	; (800a5b0 <TIM_Base_SetConfig+0x1c8>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d027      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4a41      	ldr	r2, [pc, #260]	; (800a5b4 <TIM_Base_SetConfig+0x1cc>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d023      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a40      	ldr	r2, [pc, #256]	; (800a5b8 <TIM_Base_SetConfig+0x1d0>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d01f      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a3f      	ldr	r2, [pc, #252]	; (800a5bc <TIM_Base_SetConfig+0x1d4>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d01b      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a3e      	ldr	r2, [pc, #248]	; (800a5c0 <TIM_Base_SetConfig+0x1d8>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d017      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a3d      	ldr	r2, [pc, #244]	; (800a5c4 <TIM_Base_SetConfig+0x1dc>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d013      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a3c      	ldr	r2, [pc, #240]	; (800a5c8 <TIM_Base_SetConfig+0x1e0>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d00f      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a3b      	ldr	r2, [pc, #236]	; (800a5cc <TIM_Base_SetConfig+0x1e4>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d00b      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a3a      	ldr	r2, [pc, #232]	; (800a5d0 <TIM_Base_SetConfig+0x1e8>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d007      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a39      	ldr	r2, [pc, #228]	; (800a5d4 <TIM_Base_SetConfig+0x1ec>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d003      	beq.n	800a4fa <TIM_Base_SetConfig+0x112>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a38      	ldr	r2, [pc, #224]	; (800a5d8 <TIM_Base_SetConfig+0x1f0>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d108      	bne.n	800a50c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	4313      	orrs	r3, r2
 800a50a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	695b      	ldr	r3, [r3, #20]
 800a516:	4313      	orrs	r3, r2
 800a518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	689a      	ldr	r2, [r3, #8]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4a1a      	ldr	r2, [pc, #104]	; (800a59c <TIM_Base_SetConfig+0x1b4>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d023      	beq.n	800a580 <TIM_Base_SetConfig+0x198>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4a19      	ldr	r2, [pc, #100]	; (800a5a0 <TIM_Base_SetConfig+0x1b8>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d01f      	beq.n	800a580 <TIM_Base_SetConfig+0x198>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4a1e      	ldr	r2, [pc, #120]	; (800a5bc <TIM_Base_SetConfig+0x1d4>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d01b      	beq.n	800a580 <TIM_Base_SetConfig+0x198>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a1d      	ldr	r2, [pc, #116]	; (800a5c0 <TIM_Base_SetConfig+0x1d8>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d017      	beq.n	800a580 <TIM_Base_SetConfig+0x198>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a1c      	ldr	r2, [pc, #112]	; (800a5c4 <TIM_Base_SetConfig+0x1dc>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d013      	beq.n	800a580 <TIM_Base_SetConfig+0x198>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a1b      	ldr	r2, [pc, #108]	; (800a5c8 <TIM_Base_SetConfig+0x1e0>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d00f      	beq.n	800a580 <TIM_Base_SetConfig+0x198>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a1a      	ldr	r2, [pc, #104]	; (800a5cc <TIM_Base_SetConfig+0x1e4>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d00b      	beq.n	800a580 <TIM_Base_SetConfig+0x198>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a19      	ldr	r2, [pc, #100]	; (800a5d0 <TIM_Base_SetConfig+0x1e8>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d007      	beq.n	800a580 <TIM_Base_SetConfig+0x198>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a18      	ldr	r2, [pc, #96]	; (800a5d4 <TIM_Base_SetConfig+0x1ec>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d003      	beq.n	800a580 <TIM_Base_SetConfig+0x198>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a17      	ldr	r2, [pc, #92]	; (800a5d8 <TIM_Base_SetConfig+0x1f0>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d103      	bne.n	800a588 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	691a      	ldr	r2, [r3, #16]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	615a      	str	r2, [r3, #20]
}
 800a58e:	bf00      	nop
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	40012c00 	.word	0x40012c00
 800a5a0:	50012c00 	.word	0x50012c00
 800a5a4:	40000400 	.word	0x40000400
 800a5a8:	50000400 	.word	0x50000400
 800a5ac:	40000800 	.word	0x40000800
 800a5b0:	50000800 	.word	0x50000800
 800a5b4:	40000c00 	.word	0x40000c00
 800a5b8:	50000c00 	.word	0x50000c00
 800a5bc:	40013400 	.word	0x40013400
 800a5c0:	50013400 	.word	0x50013400
 800a5c4:	40014000 	.word	0x40014000
 800a5c8:	50014000 	.word	0x50014000
 800a5cc:	40014400 	.word	0x40014400
 800a5d0:	50014400 	.word	0x50014400
 800a5d4:	40014800 	.word	0x40014800
 800a5d8:	50014800 	.word	0x50014800

0800a5dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d101      	bne.n	800a67a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e042      	b.n	800a700 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a680:	2b00      	cmp	r3, #0
 800a682:	d106      	bne.n	800a692 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7f6 ff67 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2224      	movs	r2, #36	; 0x24
 800a696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f022 0201 	bic.w	r2, r2, #1
 800a6a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f8ca 	bl	800a844 <UART_SetConfig>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d101      	bne.n	800a6ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e022      	b.n	800a700 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fa60 	bl	800ab88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	689a      	ldr	r2, [r3, #8]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f042 0201 	orr.w	r2, r2, #1
 800a6f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fae7 	bl	800accc <UART_CheckIdleState>
 800a6fe:	4603      	mov	r3, r0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08a      	sub	sp, #40	; 0x28
 800a70c:	af02      	add	r7, sp, #8
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	603b      	str	r3, [r7, #0]
 800a714:	4613      	mov	r3, r2
 800a716:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a71e:	2b20      	cmp	r3, #32
 800a720:	f040 808b 	bne.w	800a83a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d002      	beq.n	800a730 <HAL_UART_Transmit+0x28>
 800a72a:	88fb      	ldrh	r3, [r7, #6]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d101      	bne.n	800a734 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e083      	b.n	800a83c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a73e:	2b80      	cmp	r3, #128	; 0x80
 800a740:	d107      	bne.n	800a752 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689a      	ldr	r2, [r3, #8]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a750:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2221      	movs	r2, #33	; 0x21
 800a75e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a762:	f7f7 f903 	bl	800196c <HAL_GetTick>
 800a766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	88fa      	ldrh	r2, [r7, #6]
 800a76c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	88fa      	ldrh	r2, [r7, #6]
 800a774:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a780:	d108      	bne.n	800a794 <HAL_UART_Transmit+0x8c>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d104      	bne.n	800a794 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a78a:	2300      	movs	r3, #0
 800a78c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	61bb      	str	r3, [r7, #24]
 800a792:	e003      	b.n	800a79c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a798:	2300      	movs	r3, #0
 800a79a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a79c:	e030      	b.n	800a800 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2180      	movs	r1, #128	; 0x80
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 fb39 	bl	800ae20 <UART_WaitOnFlagUntilTimeout>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d005      	beq.n	800a7c0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e03d      	b.n	800a83c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10b      	bne.n	800a7de <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	881b      	ldrh	r3, [r3, #0]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	3302      	adds	r3, #2
 800a7da:	61bb      	str	r3, [r7, #24]
 800a7dc:	e007      	b.n	800a7ee <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	781a      	ldrb	r2, [r3, #0]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a806:	b29b      	uxth	r3, r3
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1c8      	bne.n	800a79e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	2200      	movs	r2, #0
 800a814:	2140      	movs	r1, #64	; 0x40
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f000 fb02 	bl	800ae20 <UART_WaitOnFlagUntilTimeout>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d005      	beq.n	800a82e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2220      	movs	r2, #32
 800a826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a82a:	2303      	movs	r3, #3
 800a82c:	e006      	b.n	800a83c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2220      	movs	r2, #32
 800a832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	e000      	b.n	800a83c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a83a:	2302      	movs	r3, #2
  }
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3720      	adds	r7, #32
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a848:	b094      	sub	sp, #80	; 0x50
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	4b7e      	ldr	r3, [pc, #504]	; (800aa54 <UART_SetConfig+0x210>)
 800a85a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85e:	689a      	ldr	r2, [r3, #8]
 800a860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	431a      	orrs	r2, r3
 800a866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a868:	695b      	ldr	r3, [r3, #20]
 800a86a:	431a      	orrs	r2, r3
 800a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86e:	69db      	ldr	r3, [r3, #28]
 800a870:	4313      	orrs	r3, r2
 800a872:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4977      	ldr	r1, [pc, #476]	; (800aa58 <UART_SetConfig+0x214>)
 800a87c:	4019      	ands	r1, r3
 800a87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a884:	430b      	orrs	r3, r1
 800a886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a894:	68d9      	ldr	r1, [r3, #12]
 800a896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	ea40 0301 	orr.w	r3, r0, r1
 800a89e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	4b6a      	ldr	r3, [pc, #424]	; (800aa54 <UART_SetConfig+0x210>)
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d009      	beq.n	800a8c4 <UART_SetConfig+0x80>
 800a8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	4b69      	ldr	r3, [pc, #420]	; (800aa5c <UART_SetConfig+0x218>)
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d004      	beq.n	800a8c4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8bc:	6a1a      	ldr	r2, [r3, #32]
 800a8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a8ce:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8d8:	430b      	orrs	r3, r1
 800a8da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e2:	f023 000f 	bic.w	r0, r3, #15
 800a8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	ea40 0301 	orr.w	r3, r0, r1
 800a8f2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	4b59      	ldr	r3, [pc, #356]	; (800aa60 <UART_SetConfig+0x21c>)
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d102      	bne.n	800a904 <UART_SetConfig+0xc0>
 800a8fe:	2301      	movs	r3, #1
 800a900:	64bb      	str	r3, [r7, #72]	; 0x48
 800a902:	e029      	b.n	800a958 <UART_SetConfig+0x114>
 800a904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	4b56      	ldr	r3, [pc, #344]	; (800aa64 <UART_SetConfig+0x220>)
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d102      	bne.n	800a914 <UART_SetConfig+0xd0>
 800a90e:	2302      	movs	r3, #2
 800a910:	64bb      	str	r3, [r7, #72]	; 0x48
 800a912:	e021      	b.n	800a958 <UART_SetConfig+0x114>
 800a914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	4b53      	ldr	r3, [pc, #332]	; (800aa68 <UART_SetConfig+0x224>)
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d102      	bne.n	800a924 <UART_SetConfig+0xe0>
 800a91e:	2304      	movs	r3, #4
 800a920:	64bb      	str	r3, [r7, #72]	; 0x48
 800a922:	e019      	b.n	800a958 <UART_SetConfig+0x114>
 800a924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	4b50      	ldr	r3, [pc, #320]	; (800aa6c <UART_SetConfig+0x228>)
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d102      	bne.n	800a934 <UART_SetConfig+0xf0>
 800a92e:	2308      	movs	r3, #8
 800a930:	64bb      	str	r3, [r7, #72]	; 0x48
 800a932:	e011      	b.n	800a958 <UART_SetConfig+0x114>
 800a934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	4b4d      	ldr	r3, [pc, #308]	; (800aa70 <UART_SetConfig+0x22c>)
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d102      	bne.n	800a944 <UART_SetConfig+0x100>
 800a93e:	2310      	movs	r3, #16
 800a940:	64bb      	str	r3, [r7, #72]	; 0x48
 800a942:	e009      	b.n	800a958 <UART_SetConfig+0x114>
 800a944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	4b42      	ldr	r3, [pc, #264]	; (800aa54 <UART_SetConfig+0x210>)
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d102      	bne.n	800a954 <UART_SetConfig+0x110>
 800a94e:	2320      	movs	r3, #32
 800a950:	64bb      	str	r3, [r7, #72]	; 0x48
 800a952:	e001      	b.n	800a958 <UART_SetConfig+0x114>
 800a954:	2300      	movs	r3, #0
 800a956:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	4b3d      	ldr	r3, [pc, #244]	; (800aa54 <UART_SetConfig+0x210>)
 800a95e:	429a      	cmp	r2, r3
 800a960:	d005      	beq.n	800a96e <UART_SetConfig+0x12a>
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	4b3d      	ldr	r3, [pc, #244]	; (800aa5c <UART_SetConfig+0x218>)
 800a968:	429a      	cmp	r2, r3
 800a96a:	f040 8085 	bne.w	800aa78 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a96e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a970:	2200      	movs	r2, #0
 800a972:	623b      	str	r3, [r7, #32]
 800a974:	627a      	str	r2, [r7, #36]	; 0x24
 800a976:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a97a:	f7fc feb7 	bl	80076ec <HAL_RCCEx_GetPeriphCLKFreq>
 800a97e:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a982:	2b00      	cmp	r3, #0
 800a984:	f000 80e8 	beq.w	800ab58 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	4a39      	ldr	r2, [pc, #228]	; (800aa74 <UART_SetConfig+0x230>)
 800a98e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a992:	461a      	mov	r2, r3
 800a994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a996:	fbb3 f3f2 	udiv	r3, r3, r2
 800a99a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	005b      	lsls	r3, r3, #1
 800a9a4:	4413      	add	r3, r2
 800a9a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d305      	bcc.n	800a9b8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d903      	bls.n	800a9c0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a9be:	e048      	b.n	800aa52 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	61bb      	str	r3, [r7, #24]
 800a9c6:	61fa      	str	r2, [r7, #28]
 800a9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9cc:	4a29      	ldr	r2, [pc, #164]	; (800aa74 <UART_SetConfig+0x230>)
 800a9ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	613b      	str	r3, [r7, #16]
 800a9d8:	617a      	str	r2, [r7, #20]
 800a9da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a9de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a9e2:	f7f5 fd77 	bl	80004d4 <__aeabi_uldivmod>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	f04f 0200 	mov.w	r2, #0
 800a9f2:	f04f 0300 	mov.w	r3, #0
 800a9f6:	020b      	lsls	r3, r1, #8
 800a9f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a9fc:	0202      	lsls	r2, r0, #8
 800a9fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa00:	6849      	ldr	r1, [r1, #4]
 800aa02:	0849      	lsrs	r1, r1, #1
 800aa04:	2000      	movs	r0, #0
 800aa06:	460c      	mov	r4, r1
 800aa08:	4605      	mov	r5, r0
 800aa0a:	eb12 0804 	adds.w	r8, r2, r4
 800aa0e:	eb43 0905 	adc.w	r9, r3, r5
 800aa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	60bb      	str	r3, [r7, #8]
 800aa1a:	60fa      	str	r2, [r7, #12]
 800aa1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa20:	4640      	mov	r0, r8
 800aa22:	4649      	mov	r1, r9
 800aa24:	f7f5 fd56 	bl	80004d4 <__aeabi_uldivmod>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa36:	d308      	bcc.n	800aa4a <UART_SetConfig+0x206>
 800aa38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa3e:	d204      	bcs.n	800aa4a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa46:	60da      	str	r2, [r3, #12]
 800aa48:	e003      	b.n	800aa52 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800aa50:	e082      	b.n	800ab58 <UART_SetConfig+0x314>
 800aa52:	e081      	b.n	800ab58 <UART_SetConfig+0x314>
 800aa54:	46002400 	.word	0x46002400
 800aa58:	cfff69f3 	.word	0xcfff69f3
 800aa5c:	56002400 	.word	0x56002400
 800aa60:	40013800 	.word	0x40013800
 800aa64:	40004400 	.word	0x40004400
 800aa68:	40004800 	.word	0x40004800
 800aa6c:	40004c00 	.word	0x40004c00
 800aa70:	40005000 	.word	0x40005000
 800aa74:	08015a34 	.word	0x08015a34
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa80:	d13c      	bne.n	800aafc <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aa82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa84:	2200      	movs	r2, #0
 800aa86:	603b      	str	r3, [r7, #0]
 800aa88:	607a      	str	r2, [r7, #4]
 800aa8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa8e:	f7fc fe2d 	bl	80076ec <HAL_RCCEx_GetPeriphCLKFreq>
 800aa92:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d05e      	beq.n	800ab58 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9e:	4a39      	ldr	r2, [pc, #228]	; (800ab84 <UART_SetConfig+0x340>)
 800aaa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaa8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaac:	005a      	lsls	r2, r3, #1
 800aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	085b      	lsrs	r3, r3, #1
 800aab4:	441a      	add	r2, r3
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	fbb2 f3f3 	udiv	r3, r2, r3
 800aabe:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac2:	2b0f      	cmp	r3, #15
 800aac4:	d916      	bls.n	800aaf4 <UART_SetConfig+0x2b0>
 800aac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aacc:	d212      	bcs.n	800aaf4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	f023 030f 	bic.w	r3, r3, #15
 800aad6:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aada:	085b      	lsrs	r3, r3, #1
 800aadc:	b29b      	uxth	r3, r3
 800aade:	f003 0307 	and.w	r3, r3, #7
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aae6:	4313      	orrs	r3, r2
 800aae8:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800aaea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800aaf0:	60da      	str	r2, [r3, #12]
 800aaf2:	e031      	b.n	800ab58 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800aafa:	e02d      	b.n	800ab58 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aafc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aafe:	2200      	movs	r2, #0
 800ab00:	469a      	mov	sl, r3
 800ab02:	4693      	mov	fp, r2
 800ab04:	4650      	mov	r0, sl
 800ab06:	4659      	mov	r1, fp
 800ab08:	f7fc fdf0 	bl	80076ec <HAL_RCCEx_GetPeriphCLKFreq>
 800ab0c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800ab0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d021      	beq.n	800ab58 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	4a1a      	ldr	r2, [pc, #104]	; (800ab84 <UART_SetConfig+0x340>)
 800ab1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab22:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	085b      	lsrs	r3, r3, #1
 800ab2c:	441a      	add	r2, r3
 800ab2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab36:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab3a:	2b0f      	cmp	r3, #15
 800ab3c:	d909      	bls.n	800ab52 <UART_SetConfig+0x30e>
 800ab3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab44:	d205      	bcs.n	800ab52 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	60da      	str	r2, [r3, #12]
 800ab50:	e002      	b.n	800ab58 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab62:	2201      	movs	r2, #1
 800ab64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ab6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab70:	2200      	movs	r2, #0
 800ab72:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ab74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3750      	adds	r7, #80	; 0x50
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab82:	bf00      	nop
 800ab84:	08015a34 	.word	0x08015a34

0800ab88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab94:	f003 0301 	and.w	r3, r3, #1
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00a      	beq.n	800abb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	430a      	orrs	r2, r1
 800abb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb6:	f003 0302 	and.w	r3, r3, #2
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00a      	beq.n	800abd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	430a      	orrs	r2, r1
 800abd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd8:	f003 0304 	and.w	r3, r3, #4
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00a      	beq.n	800abf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	430a      	orrs	r2, r1
 800abf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfa:	f003 0308 	and.w	r3, r3, #8
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00a      	beq.n	800ac18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	430a      	orrs	r2, r1
 800ac16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac1c:	f003 0310 	and.w	r3, r3, #16
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00a      	beq.n	800ac3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	430a      	orrs	r2, r1
 800ac38:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	f003 0320 	and.w	r3, r3, #32
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00a      	beq.n	800ac5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	430a      	orrs	r2, r1
 800ac5a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d01a      	beq.n	800ac9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	430a      	orrs	r2, r1
 800ac7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac86:	d10a      	bne.n	800ac9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	430a      	orrs	r2, r1
 800ac9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00a      	beq.n	800acc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	430a      	orrs	r2, r1
 800acbe:	605a      	str	r2, [r3, #4]
  }
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b098      	sub	sp, #96	; 0x60
 800acd0:	af02      	add	r7, sp, #8
 800acd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800acdc:	f7f6 fe46 	bl	800196c <HAL_GetTick>
 800ace0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 0308 	and.w	r3, r3, #8
 800acec:	2b08      	cmp	r3, #8
 800acee:	d12f      	bne.n	800ad50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acf8:	2200      	movs	r2, #0
 800acfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f88e 	bl	800ae20 <UART_WaitOnFlagUntilTimeout>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d022      	beq.n	800ad50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad12:	e853 3f00 	ldrex	r3, [r3]
 800ad16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad1e:	653b      	str	r3, [r7, #80]	; 0x50
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	461a      	mov	r2, r3
 800ad26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad28:	647b      	str	r3, [r7, #68]	; 0x44
 800ad2a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad30:	e841 2300 	strex	r3, r2, [r1]
 800ad34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1e6      	bne.n	800ad0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2220      	movs	r2, #32
 800ad40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	e063      	b.n	800ae18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 0304 	and.w	r3, r3, #4
 800ad5a:	2b04      	cmp	r3, #4
 800ad5c:	d149      	bne.n	800adf2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad66:	2200      	movs	r2, #0
 800ad68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f857 	bl	800ae20 <UART_WaitOnFlagUntilTimeout>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d03c      	beq.n	800adf2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad80:	e853 3f00 	ldrex	r3, [r3]
 800ad84:	623b      	str	r3, [r7, #32]
   return(result);
 800ad86:	6a3b      	ldr	r3, [r7, #32]
 800ad88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad96:	633b      	str	r3, [r7, #48]	; 0x30
 800ad98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad9e:	e841 2300 	strex	r3, r2, [r1]
 800ada2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ada4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1e6      	bne.n	800ad78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	3308      	adds	r3, #8
 800adb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	e853 3f00 	ldrex	r3, [r3]
 800adb8:	60fb      	str	r3, [r7, #12]
   return(result);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f023 0301 	bic.w	r3, r3, #1
 800adc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3308      	adds	r3, #8
 800adc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adca:	61fa      	str	r2, [r7, #28]
 800adcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adce:	69b9      	ldr	r1, [r7, #24]
 800add0:	69fa      	ldr	r2, [r7, #28]
 800add2:	e841 2300 	strex	r3, r2, [r1]
 800add6:	617b      	str	r3, [r7, #20]
   return(result);
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1e5      	bne.n	800adaa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2220      	movs	r2, #32
 800ade2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adee:	2303      	movs	r3, #3
 800adf0:	e012      	b.n	800ae18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2220      	movs	r2, #32
 800adf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2220      	movs	r2, #32
 800adfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3758      	adds	r7, #88	; 0x58
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	603b      	str	r3, [r7, #0]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae30:	e049      	b.n	800aec6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae38:	d045      	beq.n	800aec6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae3a:	f7f6 fd97 	bl	800196c <HAL_GetTick>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	69ba      	ldr	r2, [r7, #24]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d302      	bcc.n	800ae50 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d101      	bne.n	800ae54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae50:	2303      	movs	r3, #3
 800ae52:	e048      	b.n	800aee6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 0304 	and.w	r3, r3, #4
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d031      	beq.n	800aec6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	69db      	ldr	r3, [r3, #28]
 800ae68:	f003 0308 	and.w	r3, r3, #8
 800ae6c:	2b08      	cmp	r3, #8
 800ae6e:	d110      	bne.n	800ae92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2208      	movs	r2, #8
 800ae76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f000 f838 	bl	800aeee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2208      	movs	r2, #8
 800ae82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e029      	b.n	800aee6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	69db      	ldr	r3, [r3, #28]
 800ae98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aea0:	d111      	bne.n	800aec6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aeaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f000 f81e 	bl	800aeee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800aec2:	2303      	movs	r3, #3
 800aec4:	e00f      	b.n	800aee6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	69da      	ldr	r2, [r3, #28]
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	4013      	ands	r3, r2
 800aed0:	68ba      	ldr	r2, [r7, #8]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	bf0c      	ite	eq
 800aed6:	2301      	moveq	r3, #1
 800aed8:	2300      	movne	r3, #0
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	461a      	mov	r2, r3
 800aede:	79fb      	ldrb	r3, [r7, #7]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d0a6      	beq.n	800ae32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aeee:	b480      	push	{r7}
 800aef0:	b095      	sub	sp, #84	; 0x54
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aefe:	e853 3f00 	ldrex	r3, [r3]
 800af02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	461a      	mov	r2, r3
 800af12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af14:	643b      	str	r3, [r7, #64]	; 0x40
 800af16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af1c:	e841 2300 	strex	r3, r2, [r1]
 800af20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1e6      	bne.n	800aef6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	3308      	adds	r3, #8
 800af2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	e853 3f00 	ldrex	r3, [r3]
 800af36:	61fb      	str	r3, [r7, #28]
   return(result);
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af3e:	f023 0301 	bic.w	r3, r3, #1
 800af42:	64bb      	str	r3, [r7, #72]	; 0x48
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	3308      	adds	r3, #8
 800af4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af54:	e841 2300 	strex	r3, r2, [r1]
 800af58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1e3      	bne.n	800af28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af64:	2b01      	cmp	r3, #1
 800af66:	d118      	bne.n	800af9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	e853 3f00 	ldrex	r3, [r3]
 800af74:	60bb      	str	r3, [r7, #8]
   return(result);
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	f023 0310 	bic.w	r3, r3, #16
 800af7c:	647b      	str	r3, [r7, #68]	; 0x44
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	461a      	mov	r2, r3
 800af84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af86:	61bb      	str	r3, [r7, #24]
 800af88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8a:	6979      	ldr	r1, [r7, #20]
 800af8c:	69ba      	ldr	r2, [r7, #24]
 800af8e:	e841 2300 	strex	r3, r2, [r1]
 800af92:	613b      	str	r3, [r7, #16]
   return(result);
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1e6      	bne.n	800af68 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2220      	movs	r2, #32
 800af9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	675a      	str	r2, [r3, #116]	; 0x74
}
 800afae:	bf00      	nop
 800afb0:	3754      	adds	r7, #84	; 0x54
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr

0800afba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800afba:	b480      	push	{r7}
 800afbc:	b085      	sub	sp, #20
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d101      	bne.n	800afd0 <HAL_UARTEx_DisableFifoMode+0x16>
 800afcc:	2302      	movs	r3, #2
 800afce:	e027      	b.n	800b020 <HAL_UARTEx_DisableFifoMode+0x66>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2224      	movs	r2, #36	; 0x24
 800afdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f022 0201 	bic.w	r2, r2, #1
 800aff6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800affe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2220      	movs	r2, #32
 800b012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3714      	adds	r7, #20
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d101      	bne.n	800b044 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b040:	2302      	movs	r3, #2
 800b042:	e02d      	b.n	800b0a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2224      	movs	r2, #36	; 0x24
 800b050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0201 	bic.w	r2, r2, #1
 800b06a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	430a      	orrs	r2, r1
 800b07e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 f84f 	bl	800b124 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2220      	movs	r2, #32
 800b092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d101      	bne.n	800b0c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0bc:	2302      	movs	r3, #2
 800b0be:	e02d      	b.n	800b11c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2224      	movs	r2, #36	; 0x24
 800b0cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f022 0201 	bic.w	r2, r2, #1
 800b0e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	683a      	ldr	r2, [r7, #0]
 800b0f8:	430a      	orrs	r2, r1
 800b0fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 f811 	bl	800b124 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2220      	movs	r2, #32
 800b10e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b130:	2b00      	cmp	r3, #0
 800b132:	d108      	bne.n	800b146 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b144:	e031      	b.n	800b1aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b146:	2308      	movs	r3, #8
 800b148:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b14a:	2308      	movs	r3, #8
 800b14c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	0e5b      	lsrs	r3, r3, #25
 800b156:	b2db      	uxtb	r3, r3
 800b158:	f003 0307 	and.w	r3, r3, #7
 800b15c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	0f5b      	lsrs	r3, r3, #29
 800b166:	b2db      	uxtb	r3, r3
 800b168:	f003 0307 	and.w	r3, r3, #7
 800b16c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b16e:	7bbb      	ldrb	r3, [r7, #14]
 800b170:	7b3a      	ldrb	r2, [r7, #12]
 800b172:	4911      	ldr	r1, [pc, #68]	; (800b1b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b174:	5c8a      	ldrb	r2, [r1, r2]
 800b176:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b17a:	7b3a      	ldrb	r2, [r7, #12]
 800b17c:	490f      	ldr	r1, [pc, #60]	; (800b1bc <UARTEx_SetNbDataToProcess+0x98>)
 800b17e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b180:	fb93 f3f2 	sdiv	r3, r3, r2
 800b184:	b29a      	uxth	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
 800b18e:	7b7a      	ldrb	r2, [r7, #13]
 800b190:	4909      	ldr	r1, [pc, #36]	; (800b1b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b192:	5c8a      	ldrb	r2, [r1, r2]
 800b194:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b198:	7b7a      	ldrb	r2, [r7, #13]
 800b19a:	4908      	ldr	r1, [pc, #32]	; (800b1bc <UARTEx_SetNbDataToProcess+0x98>)
 800b19c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b19e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b1aa:	bf00      	nop
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	08015a4c 	.word	0x08015a4c
 800b1bc:	08015a54 	.word	0x08015a54

0800b1c0 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b096      	sub	sp, #88	; 0x58
 800b1c4:	af02      	add	r7, sp, #8
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b1ce:	2234      	movs	r2, #52	; 0x34
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f009 fd3a 	bl	8014c4c <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	f023 0303 	bic.w	r3, r3, #3
 800b1de:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	f1a3 0208 	sub.w	r2, r3, #8
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2202      	movs	r2, #2
 800b20c:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b212:	697a      	ldr	r2, [r7, #20]
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	4413      	add	r3, r2
 800b218:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	3b04      	subs	r3, #4
 800b21e:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 800b228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b22a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b22c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	3b04      	subs	r3, #4
 800b232:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b244:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 800b246:	697a      	ldr	r2, [r7, #20]
 800b248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b24a:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	3304      	adds	r3, #4
 800b254:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b25c:	4a5d      	ldr	r2, [pc, #372]	; (800b3d4 <_tx_byte_pool_create+0x214>)
 800b25e:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b266:	f3ef 8310 	mrs	r3, PRIMASK
 800b26a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800b26e:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b270:	b672      	cpsid	i
#endif
    return(int_posture);
 800b272:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b274:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	4a57      	ldr	r2, [pc, #348]	; (800b3d8 <_tx_byte_pool_create+0x218>)
 800b27a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b27c:	4b57      	ldr	r3, [pc, #348]	; (800b3dc <_tx_byte_pool_create+0x21c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d109      	bne.n	800b298 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b284:	4a56      	ldr	r2, [pc, #344]	; (800b3e0 <_tx_byte_pool_create+0x220>)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	631a      	str	r2, [r3, #48]	; 0x30
 800b296:	e011      	b.n	800b2bc <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b298:	4b51      	ldr	r3, [pc, #324]	; (800b3e0 <_tx_byte_pool_create+0x220>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2b4:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2ba:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b2bc:	4b47      	ldr	r3, [pc, #284]	; (800b3dc <_tx_byte_pool_create+0x21c>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	4a46      	ldr	r2, [pc, #280]	; (800b3dc <_tx_byte_pool_create+0x21c>)
 800b2c4:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	68f9      	ldr	r1, [r7, #12]
 800b2d0:	2008      	movs	r0, #8
 800b2d2:	f002 fd6d 	bl	800ddb0 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 800b2d6:	4b43      	ldr	r3, [pc, #268]	; (800b3e4 <_tx_byte_pool_create+0x224>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d06c      	beq.n	800b3bc <_tx_byte_pool_create+0x1fc>
 800b2e2:	4b41      	ldr	r3, [pc, #260]	; (800b3e8 <_tx_byte_pool_create+0x228>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 0304 	and.w	r3, r3, #4
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d066      	beq.n	800b3bc <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b2ee:	f3ef 8305 	mrs	r3, IPSR
 800b2f2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b2f4:	69fa      	ldr	r2, [r7, #28]
 800b2f6:	4b3d      	ldr	r3, [pc, #244]	; (800b3ec <_tx_byte_pool_create+0x22c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2fe:	4b3c      	ldr	r3, [pc, #240]	; (800b3f0 <_tx_byte_pool_create+0x230>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	64bb      	str	r3, [r7, #72]	; 0x48
 800b304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b306:	2b00      	cmp	r3, #0
 800b308:	d10b      	bne.n	800b322 <_tx_byte_pool_create+0x162>
 800b30a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b314:	041a      	lsls	r2, r3, #16
 800b316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b318:	4313      	orrs	r3, r2
 800b31a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b31e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b320:	e00e      	b.n	800b340 <_tx_byte_pool_create+0x180>
 800b322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b324:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b328:	d205      	bcs.n	800b336 <_tx_byte_pool_create+0x176>
 800b32a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b32c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b32e:	f04f 33ff 	mov.w	r3, #4294967295
 800b332:	64bb      	str	r3, [r7, #72]	; 0x48
 800b334:	e004      	b.n	800b340 <_tx_byte_pool_create+0x180>
 800b336:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b33a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b33c:	2300      	movs	r3, #0
 800b33e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b344:	601a      	str	r2, [r3, #0]
 800b346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b34a:	605a      	str	r2, [r3, #4]
 800b34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34e:	2215      	movs	r2, #21
 800b350:	609a      	str	r2, [r3, #8]
 800b352:	4b28      	ldr	r3, [pc, #160]	; (800b3f4 <_tx_byte_pool_create+0x234>)
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b358:	60da      	str	r2, [r3, #12]
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35e:	611a      	str	r2, [r3, #16]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b364:	615a      	str	r2, [r3, #20]
 800b366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	619a      	str	r2, [r3, #24]
 800b36c:	f107 0214 	add.w	r2, r7, #20
 800b370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b372:	61da      	str	r2, [r3, #28]
 800b374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b376:	3320      	adds	r3, #32
 800b378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b37a:	4b1f      	ldr	r3, [pc, #124]	; (800b3f8 <_tx_byte_pool_create+0x238>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b380:	429a      	cmp	r2, r3
 800b382:	d314      	bcc.n	800b3ae <_tx_byte_pool_create+0x1ee>
 800b384:	4b1d      	ldr	r3, [pc, #116]	; (800b3fc <_tx_byte_pool_create+0x23c>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b38a:	4a16      	ldr	r2, [pc, #88]	; (800b3e4 <_tx_byte_pool_create+0x224>)
 800b38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38e:	6013      	str	r3, [r2, #0]
 800b390:	4b1b      	ldr	r3, [pc, #108]	; (800b400 <_tx_byte_pool_create+0x240>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b396:	621a      	str	r2, [r3, #32]
 800b398:	4b1a      	ldr	r3, [pc, #104]	; (800b404 <_tx_byte_pool_create+0x244>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00d      	beq.n	800b3bc <_tx_byte_pool_create+0x1fc>
 800b3a0:	4b18      	ldr	r3, [pc, #96]	; (800b404 <_tx_byte_pool_create+0x244>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a16      	ldr	r2, [pc, #88]	; (800b400 <_tx_byte_pool_create+0x240>)
 800b3a6:	6812      	ldr	r2, [r2, #0]
 800b3a8:	4610      	mov	r0, r2
 800b3aa:	4798      	blx	r3
 800b3ac:	e006      	b.n	800b3bc <_tx_byte_pool_create+0x1fc>
 800b3ae:	4a0d      	ldr	r2, [pc, #52]	; (800b3e4 <_tx_byte_pool_create+0x224>)
 800b3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b2:	6013      	str	r3, [r2, #0]
 800b3b4:	4b12      	ldr	r3, [pc, #72]	; (800b400 <_tx_byte_pool_create+0x240>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3ba:	621a      	str	r2, [r3, #32]
 800b3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3be:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	f383 8810 	msr	PRIMASK, r3
}
 800b3c6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3750      	adds	r7, #80	; 0x50
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	ffffeeee 	.word	0xffffeeee
 800b3d8:	42595445 	.word	0x42595445
 800b3dc:	20001678 	.word	0x20001678
 800b3e0:	20001674 	.word	0x20001674
 800b3e4:	20001ca0 	.word	0x20001ca0
 800b3e8:	20001ca4 	.word	0x20001ca4
 800b3ec:	2000000c 	.word	0x2000000c
 800b3f0:	20001684 	.word	0x20001684
 800b3f4:	e0001004 	.word	0xe0001004
 800b3f8:	20001c9c 	.word	0x20001c9c
 800b3fc:	20001c98 	.word	0x20001c98
 800b400:	20001c8c 	.word	0x20001c8c
 800b404:	20001ca8 	.word	0x20001ca8

0800b408 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 800b40c:	f002 fcaa 	bl	800dd64 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b410:	f001 fbe6 	bl	800cbe0 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b414:	f002 fa92 	bl	800d93c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b418:	4b12      	ldr	r3, [pc, #72]	; (800b464 <_tx_initialize_high_level+0x5c>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	601a      	str	r2, [r3, #0]
 800b41e:	4b12      	ldr	r3, [pc, #72]	; (800b468 <_tx_initialize_high_level+0x60>)
 800b420:	2200      	movs	r2, #0
 800b422:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b424:	4b11      	ldr	r3, [pc, #68]	; (800b46c <_tx_initialize_high_level+0x64>)
 800b426:	2200      	movs	r2, #0
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	4b11      	ldr	r3, [pc, #68]	; (800b470 <_tx_initialize_high_level+0x68>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b430:	4b10      	ldr	r3, [pc, #64]	; (800b474 <_tx_initialize_high_level+0x6c>)
 800b432:	2200      	movs	r2, #0
 800b434:	601a      	str	r2, [r3, #0]
 800b436:	4b10      	ldr	r3, [pc, #64]	; (800b478 <_tx_initialize_high_level+0x70>)
 800b438:	2200      	movs	r2, #0
 800b43a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b43c:	4b0f      	ldr	r3, [pc, #60]	; (800b47c <_tx_initialize_high_level+0x74>)
 800b43e:	2200      	movs	r2, #0
 800b440:	601a      	str	r2, [r3, #0]
 800b442:	4b0f      	ldr	r3, [pc, #60]	; (800b480 <_tx_initialize_high_level+0x78>)
 800b444:	2200      	movs	r2, #0
 800b446:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b448:	4b0e      	ldr	r3, [pc, #56]	; (800b484 <_tx_initialize_high_level+0x7c>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	601a      	str	r2, [r3, #0]
 800b44e:	4b0e      	ldr	r3, [pc, #56]	; (800b488 <_tx_initialize_high_level+0x80>)
 800b450:	2200      	movs	r2, #0
 800b452:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b454:	4b0d      	ldr	r3, [pc, #52]	; (800b48c <_tx_initialize_high_level+0x84>)
 800b456:	2200      	movs	r2, #0
 800b458:	601a      	str	r2, [r3, #0]
 800b45a:	4b0d      	ldr	r3, [pc, #52]	; (800b490 <_tx_initialize_high_level+0x88>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]
#endif
}
 800b460:	bf00      	nop
 800b462:	bd80      	pop	{r7, pc}
 800b464:	2000164c 	.word	0x2000164c
 800b468:	20001650 	.word	0x20001650
 800b46c:	20001654 	.word	0x20001654
 800b470:	20001658 	.word	0x20001658
 800b474:	2000165c 	.word	0x2000165c
 800b478:	20001660 	.word	0x20001660
 800b47c:	2000166c 	.word	0x2000166c
 800b480:	20001670 	.word	0x20001670
 800b484:	20001674 	.word	0x20001674
 800b488:	20001678 	.word	0x20001678
 800b48c:	20001664 	.word	0x20001664
 800b490:	20001668 	.word	0x20001668

0800b494 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b498:	4b10      	ldr	r3, [pc, #64]	; (800b4dc <_tx_initialize_kernel_enter+0x48>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800b4a0:	d00c      	beq.n	800b4bc <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b4a2:	4b0e      	ldr	r3, [pc, #56]	; (800b4dc <_tx_initialize_kernel_enter+0x48>)
 800b4a4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b4a8:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b4aa:	f7f4 fee5 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b4ae:	f7ff ffab 	bl	800b408 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b4b2:	4b0b      	ldr	r3, [pc, #44]	; (800b4e0 <_tx_initialize_kernel_enter+0x4c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	4a09      	ldr	r2, [pc, #36]	; (800b4e0 <_tx_initialize_kernel_enter+0x4c>)
 800b4ba:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b4bc:	4b07      	ldr	r3, [pc, #28]	; (800b4dc <_tx_initialize_kernel_enter+0x48>)
 800b4be:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b4c2:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b4c4:	4b07      	ldr	r3, [pc, #28]	; (800b4e4 <_tx_initialize_kernel_enter+0x50>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7f5 f993 	bl	80007f4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b4ce:	4b03      	ldr	r3, [pc, #12]	; (800b4dc <_tx_initialize_kernel_enter+0x48>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b4d4:	f7f4 ff0c 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b4d8:	bf00      	nop
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	2000000c 	.word	0x2000000c
 800b4e0:	2000171c 	.word	0x2000171c
 800b4e4:	2000167c 	.word	0x2000167c

0800b4e8 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b08e      	sub	sp, #56	; 0x38
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b4f6:	623b      	str	r3, [r7, #32]
    return(posture);
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b4fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b4fc:	b672      	cpsid	i
    return(int_posture);
 800b4fe:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800b500:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b506:	4a37      	ldr	r2, [pc, #220]	; (800b5e4 <_tx_queue_cleanup+0xfc>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d161      	bne.n	800b5d0 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	429a      	cmp	r2, r3
 800b516:	d15b      	bne.n	800b5d0 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b51c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	2b00      	cmp	r3, #0
 800b522:	d055      	beq.n	800b5d0 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800b524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a2f      	ldr	r2, [pc, #188]	; (800b5e8 <_tx_queue_cleanup+0x100>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d150      	bne.n	800b5d0 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b532:	2b00      	cmp	r3, #0
 800b534:	d04c      	beq.n	800b5d0 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800b53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b540:	1e5a      	subs	r2, r3, #1
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d103      	bne.n	800b55a <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b554:	2200      	movs	r2, #0
 800b556:	629a      	str	r2, [r3, #40]	; 0x28
 800b558:	e013      	b.n	800b582 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b55e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b564:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b570:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800b572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d102      	bne.n	800b582 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800b57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b580:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b586:	2b05      	cmp	r3, #5
 800b588:	d122      	bne.n	800b5d0 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d004      	beq.n	800b59c <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	220b      	movs	r2, #11
 800b596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b59a:	e003      	b.n	800b5a4 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	220a      	movs	r2, #10
 800b5a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b5a4:	4b11      	ldr	r3, [pc, #68]	; (800b5ec <_tx_queue_cleanup+0x104>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	4a10      	ldr	r2, [pc, #64]	; (800b5ec <_tx_queue_cleanup+0x104>)
 800b5ac:	6013      	str	r3, [r2, #0]
 800b5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	f383 8810 	msr	PRIMASK, r3
}
 800b5b8:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f001 fcd6 	bl	800cf6c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5c0:	f3ef 8310 	mrs	r3, PRIMASK
 800b5c4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b5c6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b5c8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5ca:	b672      	cpsid	i
    return(int_posture);
 800b5cc:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b5ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f383 8810 	msr	PRIMASK, r3
}
 800b5da:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b5dc:	bf00      	nop
 800b5de:	3738      	adds	r7, #56	; 0x38
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	0800b4e9 	.word	0x0800b4e9
 800b5e8:	51554555 	.word	0x51554555
 800b5ec:	2000171c 	.word	0x2000171c

0800b5f0 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b094      	sub	sp, #80	; 0x50
 800b5f4:	af02      	add	r7, sp, #8
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
 800b5fc:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800b5fe:	2238      	movs	r2, #56	; 0x38
 800b600:	2100      	movs	r1, #0
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f009 fb22 	bl	8014c4c <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b61a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b61e:	63fb      	str	r3, [r7, #60]	; 0x3c
    used_words =  capacity * message_size;
 800b620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	fb02 f303 	mul.w	r3, r2, r3
 800b628:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	683a      	ldr	r2, [r7, #0]
 800b62e:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	699a      	ldr	r2, [r3, #24]
 800b634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	441a      	add	r2, r3
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	683a      	ldr	r2, [r7, #0]
 800b648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b64e:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b654:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b656:	f3ef 8310 	mrs	r3, PRIMASK
 800b65a:	623b      	str	r3, [r7, #32]
    return(posture);
 800b65c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b65e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b660:	b672      	cpsid	i
    return(int_posture);
 800b662:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800b664:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	4a55      	ldr	r2, [pc, #340]	; (800b7c0 <_tx_queue_create+0x1d0>)
 800b66a:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800b66c:	4b55      	ldr	r3, [pc, #340]	; (800b7c4 <_tx_queue_create+0x1d4>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d109      	bne.n	800b688 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800b674:	4a54      	ldr	r2, [pc, #336]	; (800b7c8 <_tx_queue_create+0x1d8>)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	635a      	str	r2, [r3, #52]	; 0x34
 800b686:	e011      	b.n	800b6ac <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800b688:	4b4f      	ldr	r3, [pc, #316]	; (800b7c8 <_tx_queue_create+0x1d8>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	633b      	str	r3, [r7, #48]	; 0x30
        previous_queue =  next_queue -> tx_queue_created_previous;
 800b68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b692:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800b694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800b69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6a4:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800b6ac:	4b45      	ldr	r3, [pc, #276]	; (800b7c4 <_tx_queue_create+0x1d4>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	4a44      	ldr	r2, [pc, #272]	; (800b7c4 <_tx_queue_create+0x1d4>)
 800b6b4:	6013      	str	r3, [r2, #0]

    /* Optional queue create extended processing.  */
    TX_QUEUE_CREATE_EXTENSION(queue_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, name_ptr, queue_size, message_size)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	68f9      	ldr	r1, [r7, #12]
 800b6c0:	2003      	movs	r0, #3
 800b6c2:	f002 fb75 	bl	800ddb0 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_CREATE, queue_ptr, message_size, TX_POINTER_TO_ULONG_CONVERT(queue_start), queue_size, TX_TRACE_QUEUE_EVENTS)
 800b6c6:	4b41      	ldr	r3, [pc, #260]	; (800b7cc <_tx_queue_create+0x1dc>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d06b      	beq.n	800b7aa <_tx_queue_create+0x1ba>
 800b6d2:	4b3f      	ldr	r3, [pc, #252]	; (800b7d0 <_tx_queue_create+0x1e0>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d065      	beq.n	800b7aa <_tx_queue_create+0x1ba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b6de:	f3ef 8305 	mrs	r3, IPSR
 800b6e2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b6e4:	69ba      	ldr	r2, [r7, #24]
 800b6e6:	4b3b      	ldr	r3, [pc, #236]	; (800b7d4 <_tx_queue_create+0x1e4>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	627b      	str	r3, [r7, #36]	; 0x24
 800b6ee:	4b3a      	ldr	r3, [pc, #232]	; (800b7d8 <_tx_queue_create+0x1e8>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	643b      	str	r3, [r7, #64]	; 0x40
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d10b      	bne.n	800b712 <_tx_queue_create+0x122>
 800b6fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fe:	647b      	str	r3, [r7, #68]	; 0x44
 800b700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b704:	041a      	lsls	r2, r3, #16
 800b706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b708:	4313      	orrs	r3, r2
 800b70a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b70e:	647b      	str	r3, [r7, #68]	; 0x44
 800b710:	e00e      	b.n	800b730 <_tx_queue_create+0x140>
 800b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b714:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b718:	d205      	bcs.n	800b726 <_tx_queue_create+0x136>
 800b71a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b71c:	647b      	str	r3, [r7, #68]	; 0x44
 800b71e:	f04f 33ff 	mov.w	r3, #4294967295
 800b722:	643b      	str	r3, [r7, #64]	; 0x40
 800b724:	e004      	b.n	800b730 <_tx_queue_create+0x140>
 800b726:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b72a:	643b      	str	r3, [r7, #64]	; 0x40
 800b72c:	2300      	movs	r3, #0
 800b72e:	647b      	str	r3, [r7, #68]	; 0x44
 800b730:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b734:	601a      	str	r2, [r3, #0]
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b73a:	605a      	str	r2, [r3, #4]
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	223c      	movs	r2, #60	; 0x3c
 800b740:	609a      	str	r2, [r3, #8]
 800b742:	4b26      	ldr	r3, [pc, #152]	; (800b7dc <_tx_queue_create+0x1ec>)
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b748:	60da      	str	r2, [r3, #12]
 800b74a:	68fa      	ldr	r2, [r7, #12]
 800b74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74e:	611a      	str	r2, [r3, #16]
 800b750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	615a      	str	r2, [r3, #20]
 800b756:	683a      	ldr	r2, [r7, #0]
 800b758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75a:	619a      	str	r2, [r3, #24]
 800b75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b760:	61da      	str	r2, [r3, #28]
 800b762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b764:	3320      	adds	r3, #32
 800b766:	62bb      	str	r3, [r7, #40]	; 0x28
 800b768:	4b1d      	ldr	r3, [pc, #116]	; (800b7e0 <_tx_queue_create+0x1f0>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b76e:	429a      	cmp	r2, r3
 800b770:	d314      	bcc.n	800b79c <_tx_queue_create+0x1ac>
 800b772:	4b1c      	ldr	r3, [pc, #112]	; (800b7e4 <_tx_queue_create+0x1f4>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	62bb      	str	r3, [r7, #40]	; 0x28
 800b778:	4a14      	ldr	r2, [pc, #80]	; (800b7cc <_tx_queue_create+0x1dc>)
 800b77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77c:	6013      	str	r3, [r2, #0]
 800b77e:	4b1a      	ldr	r3, [pc, #104]	; (800b7e8 <_tx_queue_create+0x1f8>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b784:	621a      	str	r2, [r3, #32]
 800b786:	4b19      	ldr	r3, [pc, #100]	; (800b7ec <_tx_queue_create+0x1fc>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00d      	beq.n	800b7aa <_tx_queue_create+0x1ba>
 800b78e:	4b17      	ldr	r3, [pc, #92]	; (800b7ec <_tx_queue_create+0x1fc>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a15      	ldr	r2, [pc, #84]	; (800b7e8 <_tx_queue_create+0x1f8>)
 800b794:	6812      	ldr	r2, [r2, #0]
 800b796:	4610      	mov	r0, r2
 800b798:	4798      	blx	r3
 800b79a:	e006      	b.n	800b7aa <_tx_queue_create+0x1ba>
 800b79c:	4a0b      	ldr	r2, [pc, #44]	; (800b7cc <_tx_queue_create+0x1dc>)
 800b79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a0:	6013      	str	r3, [r2, #0]
 800b7a2:	4b11      	ldr	r3, [pc, #68]	; (800b7e8 <_tx_queue_create+0x1f8>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7a8:	621a      	str	r2, [r3, #32]
 800b7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	f383 8810 	msr	PRIMASK, r3
}
 800b7b4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3748      	adds	r7, #72	; 0x48
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	51554555 	.word	0x51554555
 800b7c4:	20001658 	.word	0x20001658
 800b7c8:	20001654 	.word	0x20001654
 800b7cc:	20001ca0 	.word	0x20001ca0
 800b7d0:	20001ca4 	.word	0x20001ca4
 800b7d4:	2000000c 	.word	0x2000000c
 800b7d8:	20001684 	.word	0x20001684
 800b7dc:	e0001004 	.word	0xe0001004
 800b7e0:	20001c9c 	.word	0x20001c9c
 800b7e4:	20001c98 	.word	0x20001c98
 800b7e8:	20001c8c 	.word	0x20001c8c
 800b7ec:	20001ca8 	.word	0x20001ca8

0800b7f0 <_tx_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_flush(TX_QUEUE *queue_ptr)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b094      	sub	sp, #80	; 0x50
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
UINT            suspended_count;
TX_THREAD       *thread_ptr;


    /* Initialize the suspended count and list.  */
    suspended_count =  TX_NO_SUSPENSIONS;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	64bb      	str	r3, [r7, #72]	; 0x48
    suspension_list =  TX_NULL;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b800:	f3ef 8310 	mrs	r3, PRIMASK
 800b804:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b808:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b80a:	b672      	cpsid	i
    return(int_posture);
 800b80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to reset various queue parameters.  */
    TX_DISABLE
 800b80e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_FLUSH, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), 0, 0, TX_TRACE_QUEUE_EVENTS)
 800b810:	4b76      	ldr	r3, [pc, #472]	; (800b9ec <_tx_queue_flush+0x1fc>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	63bb      	str	r3, [r7, #56]	; 0x38
 800b816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d06c      	beq.n	800b8f6 <_tx_queue_flush+0x106>
 800b81c:	4b74      	ldr	r3, [pc, #464]	; (800b9f0 <_tx_queue_flush+0x200>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b824:	2b00      	cmp	r3, #0
 800b826:	d066      	beq.n	800b8f6 <_tx_queue_flush+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b828:	f3ef 8305 	mrs	r3, IPSR
 800b82c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800b82e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b830:	4b70      	ldr	r3, [pc, #448]	; (800b9f4 <_tx_queue_flush+0x204>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4313      	orrs	r3, r2
 800b836:	637b      	str	r3, [r7, #52]	; 0x34
 800b838:	4b6f      	ldr	r3, [pc, #444]	; (800b9f8 <_tx_queue_flush+0x208>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	643b      	str	r3, [r7, #64]	; 0x40
 800b83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10b      	bne.n	800b85c <_tx_queue_flush+0x6c>
 800b844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b848:	647b      	str	r3, [r7, #68]	; 0x44
 800b84a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b84e:	041a      	lsls	r2, r3, #16
 800b850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b852:	4313      	orrs	r3, r2
 800b854:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b858:	647b      	str	r3, [r7, #68]	; 0x44
 800b85a:	e00e      	b.n	800b87a <_tx_queue_flush+0x8a>
 800b85c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b85e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b862:	d205      	bcs.n	800b870 <_tx_queue_flush+0x80>
 800b864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b866:	647b      	str	r3, [r7, #68]	; 0x44
 800b868:	f04f 33ff 	mov.w	r3, #4294967295
 800b86c:	643b      	str	r3, [r7, #64]	; 0x40
 800b86e:	e004      	b.n	800b87a <_tx_queue_flush+0x8a>
 800b870:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b874:	643b      	str	r3, [r7, #64]	; 0x40
 800b876:	2300      	movs	r3, #0
 800b878:	647b      	str	r3, [r7, #68]	; 0x44
 800b87a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87e:	601a      	str	r2, [r3, #0]
 800b880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b884:	605a      	str	r2, [r3, #4]
 800b886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b888:	223e      	movs	r2, #62	; 0x3e
 800b88a:	609a      	str	r2, [r3, #8]
 800b88c:	4b5b      	ldr	r3, [pc, #364]	; (800b9fc <_tx_queue_flush+0x20c>)
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b892:	60da      	str	r2, [r3, #12]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b898:	611a      	str	r2, [r3, #16]
 800b89a:	f107 0208 	add.w	r2, r7, #8
 800b89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a0:	615a      	str	r2, [r3, #20]
 800b8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	619a      	str	r2, [r3, #24]
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	61da      	str	r2, [r3, #28]
 800b8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b0:	3320      	adds	r3, #32
 800b8b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8b4:	4b52      	ldr	r3, [pc, #328]	; (800ba00 <_tx_queue_flush+0x210>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d314      	bcc.n	800b8e8 <_tx_queue_flush+0xf8>
 800b8be:	4b51      	ldr	r3, [pc, #324]	; (800ba04 <_tx_queue_flush+0x214>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8c4:	4a49      	ldr	r2, [pc, #292]	; (800b9ec <_tx_queue_flush+0x1fc>)
 800b8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c8:	6013      	str	r3, [r2, #0]
 800b8ca:	4b4f      	ldr	r3, [pc, #316]	; (800ba08 <_tx_queue_flush+0x218>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8d0:	621a      	str	r2, [r3, #32]
 800b8d2:	4b4e      	ldr	r3, [pc, #312]	; (800ba0c <_tx_queue_flush+0x21c>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00d      	beq.n	800b8f6 <_tx_queue_flush+0x106>
 800b8da:	4b4c      	ldr	r3, [pc, #304]	; (800ba0c <_tx_queue_flush+0x21c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a4a      	ldr	r2, [pc, #296]	; (800ba08 <_tx_queue_flush+0x218>)
 800b8e0:	6812      	ldr	r2, [r2, #0]
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	4798      	blx	r3
 800b8e6:	e006      	b.n	800b8f6 <_tx_queue_flush+0x106>
 800b8e8:	4a40      	ldr	r2, [pc, #256]	; (800b9ec <_tx_queue_flush+0x1fc>)
 800b8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	4b46      	ldr	r3, [pc, #280]	; (800ba08 <_tx_queue_flush+0x218>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8f4:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_FLUSH_INSERT

    /* Determine if there is something on the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d023      	beq.n	800b946 <_tx_queue_flush+0x156>
    {

        /* Yes, there is something in the queue.  */

        /* Reset the queue parameters to erase all of the queued messages.  */
        queue_ptr -> tx_queue_enqueued =           TX_NO_MESSAGES;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	611a      	str	r2, [r3, #16]
        queue_ptr -> tx_queue_available_storage =  queue_ptr -> tx_queue_capacity;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	68da      	ldr	r2, [r3, #12]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	615a      	str	r2, [r3, #20]
        queue_ptr -> tx_queue_read =               queue_ptr -> tx_queue_start;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	699a      	ldr	r2, [r3, #24]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	621a      	str	r2, [r3, #32]
        queue_ptr -> tx_queue_write =              queue_ptr -> tx_queue_start;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	699a      	ldr	r2, [r3, #24]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Now determine if there are any threads suspended on a full queue.  */
        if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b920:	2b00      	cmp	r3, #0
 800b922:	d010      	beq.n	800b946 <_tx_queue_flush+0x156>

            /* Yes, there are threads suspended on this queue, they must be
               resumed!  */

            /* Copy the information into temporary variables.  */
            suspension_list =  queue_ptr -> tx_queue_suspension_list;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b928:	64fb      	str	r3, [r7, #76]	; 0x4c
            suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92e:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the queue variables.  */
            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	629a      	str	r2, [r3, #40]	; 0x28
            queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b93c:	4b34      	ldr	r3, [pc, #208]	; (800ba10 <_tx_queue_flush+0x220>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	3301      	adds	r3, #1
 800b942:	4a33      	ldr	r2, [pc, #204]	; (800ba10 <_tx_queue_flush+0x220>)
 800b944:	6013      	str	r3, [r2, #0]
 800b946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b948:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	f383 8810 	msr	PRIMASK, r3
}
 800b950:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    if (suspended_count != TX_NO_SUSPENSIONS)
 800b952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b954:	2b00      	cmp	r3, #0
 800b956:	d044      	beq.n	800b9e2 <_tx_queue_flush+0x1f2>
    {

        /* Pickup the thread to resume.  */
        thread_ptr =  suspension_list;
 800b958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b95a:	60bb      	str	r3, [r7, #8]
        while (suspended_count != ((ULONG) 0))
 800b95c:	e027      	b.n	800b9ae <_tx_queue_flush+0x1be>
        {

            /* Decrement the suspension count.  */
            suspended_count--;
 800b95e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b960:	3b01      	subs	r3, #1
 800b962:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Check for a NULL thread pointer.  */
            if (thread_ptr == TX_NULL)
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d025      	beq.n	800b9b6 <_tx_queue_flush+0x1c6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b96a:	f3ef 8310 	mrs	r3, PRIMASK
 800b96e:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b970:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b972:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b974:	b672      	cpsid	i
    return(int_posture);
 800b976:	69bb      	ldr	r3, [r7, #24]
            }

            /* Resume the next suspended thread.  */

            /* Lockout interrupts.  */
            TX_DISABLE
 800b978:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2200      	movs	r2, #0
 800b97e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set the return status in the thread to TX_SUCCESS.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	2200      	movs	r2, #0
 800b984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b98c:	60bb      	str	r3, [r7, #8]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800b98e:	4b20      	ldr	r3, [pc, #128]	; (800ba10 <_tx_queue_flush+0x220>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	3301      	adds	r3, #1
 800b994:	4a1e      	ldr	r2, [pc, #120]	; (800ba10 <_tx_queue_flush+0x220>)
 800b996:	6013      	str	r3, [r2, #0]
 800b998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b99a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	f383 8810 	msr	PRIMASK, r3
}
 800b9a2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f001 fadf 	bl	800cf6c <_tx_thread_system_resume>
        while (suspended_count != ((ULONG) 0))
 800b9ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1d4      	bne.n	800b95e <_tx_queue_flush+0x16e>
 800b9b4:	e000      	b.n	800b9b8 <_tx_queue_flush+0x1c8>
                break;
 800b9b6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9b8:	f3ef 8310 	mrs	r3, PRIMASK
 800b9bc:	613b      	str	r3, [r7, #16]
    return(posture);
 800b9be:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800b9c0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9c2:	b672      	cpsid	i
    return(int_posture);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
#endif
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800b9c6:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Restore previous preempt posture.  */
        _tx_thread_preempt_disable--;
 800b9c8:	4b11      	ldr	r3, [pc, #68]	; (800ba10 <_tx_queue_flush+0x220>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	4a10      	ldr	r2, [pc, #64]	; (800ba10 <_tx_queue_flush+0x220>)
 800b9d0:	6013      	str	r3, [r2, #0]
 800b9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f383 8810 	msr	PRIMASK, r3
}
 800b9dc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b9de:	f001 fa8b 	bl	800cef8 <_tx_thread_system_preempt_check>
    }

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3750      	adds	r7, #80	; 0x50
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	20001ca0 	.word	0x20001ca0
 800b9f0:	20001ca4 	.word	0x20001ca4
 800b9f4:	2000000c 	.word	0x2000000c
 800b9f8:	20001684 	.word	0x20001684
 800b9fc:	e0001004 	.word	0xe0001004
 800ba00:	20001c9c 	.word	0x20001c9c
 800ba04:	20001c98 	.word	0x20001c98
 800ba08:	20001c8c 	.word	0x20001c8c
 800ba0c:	20001ca8 	.word	0x20001ca8
 800ba10:	2000171c 	.word	0x2000171c

0800ba14 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b09a      	sub	sp, #104	; 0x68
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800ba20:	2300      	movs	r3, #0
 800ba22:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba24:	f3ef 8310 	mrs	r3, PRIMASK
 800ba28:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800ba2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba2e:	b672      	cpsid	i
    return(int_posture);
 800ba30:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800ba32:	64fb      	str	r3, [r7, #76]	; 0x4c
    queue_ptr -> tx_queue_performance_messages_received_count++;

#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_RECEIVE, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(destination_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800ba34:	4b77      	ldr	r3, [pc, #476]	; (800bc14 <_tx_queue_receive+0x200>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d06c      	beq.n	800bb1a <_tx_queue_receive+0x106>
 800ba40:	4b75      	ldr	r3, [pc, #468]	; (800bc18 <_tx_queue_receive+0x204>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d066      	beq.n	800bb1a <_tx_queue_receive+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ba4c:	f3ef 8305 	mrs	r3, IPSR
 800ba50:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800ba52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba54:	4b71      	ldr	r3, [pc, #452]	; (800bc1c <_tx_queue_receive+0x208>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	647b      	str	r3, [r7, #68]	; 0x44
 800ba5c:	4b70      	ldr	r3, [pc, #448]	; (800bc20 <_tx_queue_receive+0x20c>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	653b      	str	r3, [r7, #80]	; 0x50
 800ba62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10b      	bne.n	800ba80 <_tx_queue_receive+0x6c>
 800ba68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6c:	657b      	str	r3, [r7, #84]	; 0x54
 800ba6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba72:	041a      	lsls	r2, r3, #16
 800ba74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba76:	4313      	orrs	r3, r2
 800ba78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba7c:	657b      	str	r3, [r7, #84]	; 0x54
 800ba7e:	e00e      	b.n	800ba9e <_tx_queue_receive+0x8a>
 800ba80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba82:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ba86:	d205      	bcs.n	800ba94 <_tx_queue_receive+0x80>
 800ba88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba8a:	657b      	str	r3, [r7, #84]	; 0x54
 800ba8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba90:	653b      	str	r3, [r7, #80]	; 0x50
 800ba92:	e004      	b.n	800ba9e <_tx_queue_receive+0x8a>
 800ba94:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800ba98:	653b      	str	r3, [r7, #80]	; 0x50
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	657b      	str	r3, [r7, #84]	; 0x54
 800ba9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800baa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baa2:	601a      	str	r2, [r3, #0]
 800baa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baa6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800baa8:	605a      	str	r2, [r3, #4]
 800baaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baac:	2244      	movs	r2, #68	; 0x44
 800baae:	609a      	str	r2, [r3, #8]
 800bab0:	4b5c      	ldr	r3, [pc, #368]	; (800bc24 <_tx_queue_receive+0x210>)
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bab6:	60da      	str	r2, [r3, #12]
 800bab8:	68fa      	ldr	r2, [r7, #12]
 800baba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800babc:	611a      	str	r2, [r3, #16]
 800babe:	68ba      	ldr	r2, [r7, #8]
 800bac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bac2:	615a      	str	r2, [r3, #20]
 800bac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	619a      	str	r2, [r3, #24]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	691a      	ldr	r2, [r3, #16]
 800bace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bad0:	61da      	str	r2, [r3, #28]
 800bad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bad4:	3320      	adds	r3, #32
 800bad6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bad8:	4b53      	ldr	r3, [pc, #332]	; (800bc28 <_tx_queue_receive+0x214>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bade:	429a      	cmp	r2, r3
 800bae0:	d314      	bcc.n	800bb0c <_tx_queue_receive+0xf8>
 800bae2:	4b52      	ldr	r3, [pc, #328]	; (800bc2c <_tx_queue_receive+0x218>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bae8:	4a4a      	ldr	r2, [pc, #296]	; (800bc14 <_tx_queue_receive+0x200>)
 800baea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baec:	6013      	str	r3, [r2, #0]
 800baee:	4b50      	ldr	r3, [pc, #320]	; (800bc30 <_tx_queue_receive+0x21c>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800baf4:	621a      	str	r2, [r3, #32]
 800baf6:	4b4f      	ldr	r3, [pc, #316]	; (800bc34 <_tx_queue_receive+0x220>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00d      	beq.n	800bb1a <_tx_queue_receive+0x106>
 800bafe:	4b4d      	ldr	r3, [pc, #308]	; (800bc34 <_tx_queue_receive+0x220>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a4b      	ldr	r2, [pc, #300]	; (800bc30 <_tx_queue_receive+0x21c>)
 800bb04:	6812      	ldr	r2, [r2, #0]
 800bb06:	4610      	mov	r0, r2
 800bb08:	4798      	blx	r3
 800bb0a:	e006      	b.n	800bb1a <_tx_queue_receive+0x106>
 800bb0c:	4a41      	ldr	r2, [pc, #260]	; (800bc14 <_tx_queue_receive+0x200>)
 800bb0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb10:	6013      	str	r3, [r2, #0]
 800bb12:	4b47      	ldr	r3, [pc, #284]	; (800bc30 <_tx_queue_receive+0x21c>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb18:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f000 8149 	beq.w	800bdbc <_tx_queue_receive+0x3a8>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800bb2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d13c      	bne.n	800bbaa <_tx_queue_receive+0x196>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6a1b      	ldr	r3, [r3, #32]
 800bb34:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bb40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb42:	1d13      	adds	r3, r2, #4
 800bb44:	667b      	str	r3, [r7, #100]	; 0x64
 800bb46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb48:	1d19      	adds	r1, r3, #4
 800bb4a:	6639      	str	r1, [r7, #96]	; 0x60
 800bb4c:	6812      	ldr	r2, [r2, #0]
 800bb4e:	601a      	str	r2, [r3, #0]
 800bb50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d90e      	bls.n	800bb74 <_tx_queue_receive+0x160>
 800bb56:	e007      	b.n	800bb68 <_tx_queue_receive+0x154>
 800bb58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb5a:	1d13      	adds	r3, r2, #4
 800bb5c:	667b      	str	r3, [r7, #100]	; 0x64
 800bb5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb60:	1d19      	adds	r1, r3, #4
 800bb62:	6639      	str	r1, [r7, #96]	; 0x60
 800bb64:	6812      	ldr	r2, [r2, #0]
 800bb66:	601a      	str	r2, [r3, #0]
 800bb68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1f1      	bne.n	800bb58 <_tx_queue_receive+0x144>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d102      	bne.n	800bb84 <_tx_queue_receive+0x170>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	667b      	str	r3, [r7, #100]	; 0x64
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb88:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	695b      	ldr	r3, [r3, #20]
 800bb8e:	1c5a      	adds	r2, r3, #1
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	1e5a      	subs	r2, r3, #1
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	611a      	str	r2, [r3, #16]
 800bb9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bba0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba4:	f383 8810 	msr	PRIMASK, r3
}
 800bba8:	e176      	b.n	800be98 <_tx_queue_receive+0x484>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbae:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800bbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d166      	bne.n	800bc88 <_tx_queue_receive+0x274>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bbba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbbe:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bbca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bbcc:	1d13      	adds	r3, r2, #4
 800bbce:	667b      	str	r3, [r7, #100]	; 0x64
 800bbd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbd2:	1d19      	adds	r1, r3, #4
 800bbd4:	6639      	str	r1, [r7, #96]	; 0x60
 800bbd6:	6812      	ldr	r2, [r2, #0]
 800bbd8:	601a      	str	r2, [r3, #0]
 800bbda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d90e      	bls.n	800bbfe <_tx_queue_receive+0x1ea>
 800bbe0:	e007      	b.n	800bbf2 <_tx_queue_receive+0x1de>
 800bbe2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bbe4:	1d13      	adds	r3, r2, #4
 800bbe6:	667b      	str	r3, [r7, #100]	; 0x64
 800bbe8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbea:	1d19      	adds	r1, r3, #4
 800bbec:	6639      	str	r1, [r7, #96]	; 0x60
 800bbee:	6812      	ldr	r2, [r2, #0]
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d1f1      	bne.n	800bbe2 <_tx_queue_receive+0x1ce>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800bbfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc00:	3b01      	subs	r3, #1
 800bc02:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bc04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d116      	bne.n	800bc38 <_tx_queue_receive+0x224>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	629a      	str	r2, [r3, #40]	; 0x28
 800bc10:	e021      	b.n	800bc56 <_tx_queue_receive+0x242>
 800bc12:	bf00      	nop
 800bc14:	20001ca0 	.word	0x20001ca0
 800bc18:	20001ca4 	.word	0x20001ca4
 800bc1c:	2000000c 	.word	0x2000000c
 800bc20:	20001684 	.word	0x20001684
 800bc24:	e0001004 	.word	0xe0001004
 800bc28:	20001c9c 	.word	0x20001c9c
 800bc2c:	20001c98 	.word	0x20001c98
 800bc30:	20001c8c 	.word	0x20001c8c
 800bc34:	20001ca8 	.word	0x20001ca8
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bc38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc3c:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc42:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800bc44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc48:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800bc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc4e:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800bc50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc54:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc5a:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bc5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc5e:	2200      	movs	r2, #0
 800bc60:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bc62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc64:	2200      	movs	r2, #0
 800bc66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bc6a:	4b8e      	ldr	r3, [pc, #568]	; (800bea4 <_tx_queue_receive+0x490>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	4a8c      	ldr	r2, [pc, #560]	; (800bea4 <_tx_queue_receive+0x490>)
 800bc72:	6013      	str	r3, [r2, #0]
 800bc74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc76:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc78:	6a3b      	ldr	r3, [r7, #32]
 800bc7a:	f383 8810 	msr	PRIMASK, r3
}
 800bc7e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800bc80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc82:	f001 f973 	bl	800cf6c <_tx_thread_system_resume>
 800bc86:	e107      	b.n	800be98 <_tx_queue_receive+0x484>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6a1b      	ldr	r3, [r3, #32]
 800bc8c:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bc98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc9a:	1d13      	adds	r3, r2, #4
 800bc9c:	667b      	str	r3, [r7, #100]	; 0x64
 800bc9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bca0:	1d19      	adds	r1, r3, #4
 800bca2:	6639      	str	r1, [r7, #96]	; 0x60
 800bca4:	6812      	ldr	r2, [r2, #0]
 800bca6:	601a      	str	r2, [r3, #0]
 800bca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d90e      	bls.n	800bccc <_tx_queue_receive+0x2b8>
 800bcae:	e007      	b.n	800bcc0 <_tx_queue_receive+0x2ac>
 800bcb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcb2:	1d13      	adds	r3, r2, #4
 800bcb4:	667b      	str	r3, [r7, #100]	; 0x64
 800bcb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcb8:	1d19      	adds	r1, r3, #4
 800bcba:	6639      	str	r1, [r7, #96]	; 0x60
 800bcbc:	6812      	ldr	r2, [r2, #0]
 800bcbe:	601a      	str	r2, [r3, #0]
 800bcc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d1f1      	bne.n	800bcb0 <_tx_queue_receive+0x29c>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	69db      	ldr	r3, [r3, #28]
 800bcd0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d102      	bne.n	800bcdc <_tx_queue_receive+0x2c8>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	667b      	str	r3, [r7, #100]	; 0x64
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bce0:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800bce2:	4b70      	ldr	r3, [pc, #448]	; (800bea4 <_tx_queue_receive+0x490>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3301      	adds	r3, #1
 800bce8:	4a6e      	ldr	r2, [pc, #440]	; (800bea4 <_tx_queue_receive+0x490>)
 800bcea:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800bcec:	4b6d      	ldr	r3, [pc, #436]	; (800bea4 <_tx_queue_receive+0x490>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	4a6c      	ldr	r2, [pc, #432]	; (800bea4 <_tx_queue_receive+0x490>)
 800bcf4:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bcf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcfa:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  queue_ptr -> tx_queue_write;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd00:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bd08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd0a:	1d13      	adds	r3, r2, #4
 800bd0c:	667b      	str	r3, [r7, #100]	; 0x64
 800bd0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd10:	1d19      	adds	r1, r3, #4
 800bd12:	6639      	str	r1, [r7, #96]	; 0x60
 800bd14:	6812      	ldr	r2, [r2, #0]
 800bd16:	601a      	str	r2, [r3, #0]
 800bd18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d90e      	bls.n	800bd3c <_tx_queue_receive+0x328>
 800bd1e:	e007      	b.n	800bd30 <_tx_queue_receive+0x31c>
 800bd20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd22:	1d13      	adds	r3, r2, #4
 800bd24:	667b      	str	r3, [r7, #100]	; 0x64
 800bd26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd28:	1d19      	adds	r1, r3, #4
 800bd2a:	6639      	str	r1, [r7, #96]	; 0x60
 800bd2c:	6812      	ldr	r2, [r2, #0]
 800bd2e:	601a      	str	r2, [r3, #0]
 800bd30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd32:	3b01      	subs	r3, #1
 800bd34:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1f1      	bne.n	800bd20 <_tx_queue_receive+0x30c>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	69db      	ldr	r3, [r3, #28]
 800bd40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d102      	bne.n	800bd4c <_tx_queue_receive+0x338>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	663b      	str	r3, [r7, #96]	; 0x60
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd50:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd56:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800bd58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bd5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d103      	bne.n	800bd6c <_tx_queue_receive+0x358>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	629a      	str	r2, [r3, #40]	; 0x28
 800bd6a:	e00e      	b.n	800bd8a <_tx_queue_receive+0x376>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bd6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd70:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd76:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd7c:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd82:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800bd84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd88:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd8e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bd90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd92:	2200      	movs	r2, #0
 800bd94:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bd96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bd9e:	4b41      	ldr	r3, [pc, #260]	; (800bea4 <_tx_queue_receive+0x490>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3301      	adds	r3, #1
 800bda4:	4a3f      	ldr	r2, [pc, #252]	; (800bea4 <_tx_queue_receive+0x490>)
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdaa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	f383 8810 	msr	PRIMASK, r3
}
 800bdb2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800bdb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bdb6:	f001 f8d9 	bl	800cf6c <_tx_thread_system_resume>
 800bdba:	e06d      	b.n	800be98 <_tx_queue_receive+0x484>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d062      	beq.n	800be88 <_tx_queue_receive+0x474>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800bdc2:	4b38      	ldr	r3, [pc, #224]	; (800bea4 <_tx_queue_receive+0x490>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d008      	beq.n	800bddc <_tx_queue_receive+0x3c8>
 800bdca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdcc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	f383 8810 	msr	PRIMASK, r3
}
 800bdd4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800bdd6:	230a      	movs	r3, #10
 800bdd8:	65bb      	str	r3, [r7, #88]	; 0x58
 800bdda:	e05d      	b.n	800be98 <_tx_queue_receive+0x484>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bddc:	4b32      	ldr	r3, [pc, #200]	; (800bea8 <_tx_queue_receive+0x494>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800bde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde4:	4a31      	ldr	r2, [pc, #196]	; (800beac <_tx_queue_receive+0x498>)
 800bde6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800bde8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdea:	68fa      	ldr	r2, [r7, #12]
 800bdec:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800bdee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800bdf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800bdfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800be02:	1c5a      	adds	r2, r3, #1
 800be04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be06:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800be0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d109      	bne.n	800be24 <_tx_queue_receive+0x410>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be14:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800be16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be1a:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800be1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be20:	675a      	str	r2, [r3, #116]	; 0x74
 800be22:	e011      	b.n	800be48 <_tx_queue_receive+0x434>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be28:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800be2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be2e:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800be30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be34:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800be36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be3a:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800be3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be40:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800be42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be46:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800be48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be4a:	1c5a      	adds	r2, r3, #1
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800be50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be52:	2205      	movs	r2, #5
 800be54:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800be56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be58:	2201      	movs	r2, #1
 800be5a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800be5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800be62:	4b10      	ldr	r3, [pc, #64]	; (800bea4 <_tx_queue_receive+0x490>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3301      	adds	r3, #1
 800be68:	4a0e      	ldr	r2, [pc, #56]	; (800bea4 <_tx_queue_receive+0x490>)
 800be6a:	6013      	str	r3, [r2, #0]
 800be6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be6e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	f383 8810 	msr	PRIMASK, r3
}
 800be76:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800be78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be7a:	f001 fa31 	bl	800d2e0 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800be7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be84:	65bb      	str	r3, [r7, #88]	; 0x58
 800be86:	e007      	b.n	800be98 <_tx_queue_receive+0x484>
 800be88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be8a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	f383 8810 	msr	PRIMASK, r3
}
 800be92:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800be94:	230a      	movs	r3, #10
 800be96:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800be98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3768      	adds	r7, #104	; 0x68
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	2000171c 	.word	0x2000171c
 800bea8:	20001684 	.word	0x20001684
 800beac:	0800b4e9 	.word	0x0800b4e9

0800beb0 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b09a      	sub	sp, #104	; 0x68
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800bebc:	2300      	movs	r3, #0
 800bebe:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bec0:	f3ef 8310 	mrs	r3, PRIMASK
 800bec4:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800bec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800bec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800beca:	b672      	cpsid	i
    return(int_posture);
 800becc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800bece:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Increment the number of messages sent to this queue.  */
    queue_ptr -> tx_queue_performance_messages_sent_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_SEND, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(source_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800bed0:	4b7a      	ldr	r3, [pc, #488]	; (800c0bc <_tx_queue_send+0x20c>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d06c      	beq.n	800bfb6 <_tx_queue_send+0x106>
 800bedc:	4b78      	ldr	r3, [pc, #480]	; (800c0c0 <_tx_queue_send+0x210>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d066      	beq.n	800bfb6 <_tx_queue_send+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bee8:	f3ef 8305 	mrs	r3, IPSR
 800beec:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800beee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bef0:	4b74      	ldr	r3, [pc, #464]	; (800c0c4 <_tx_queue_send+0x214>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	647b      	str	r3, [r7, #68]	; 0x44
 800bef8:	4b73      	ldr	r3, [pc, #460]	; (800c0c8 <_tx_queue_send+0x218>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	653b      	str	r3, [r7, #80]	; 0x50
 800befe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10b      	bne.n	800bf1c <_tx_queue_send+0x6c>
 800bf04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf08:	657b      	str	r3, [r7, #84]	; 0x54
 800bf0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf0e:	041a      	lsls	r2, r3, #16
 800bf10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf12:	4313      	orrs	r3, r2
 800bf14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf18:	657b      	str	r3, [r7, #84]	; 0x54
 800bf1a:	e00e      	b.n	800bf3a <_tx_queue_send+0x8a>
 800bf1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf1e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bf22:	d205      	bcs.n	800bf30 <_tx_queue_send+0x80>
 800bf24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf26:	657b      	str	r3, [r7, #84]	; 0x54
 800bf28:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2c:	653b      	str	r3, [r7, #80]	; 0x50
 800bf2e:	e004      	b.n	800bf3a <_tx_queue_send+0x8a>
 800bf30:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800bf34:	653b      	str	r3, [r7, #80]	; 0x50
 800bf36:	2300      	movs	r3, #0
 800bf38:	657b      	str	r3, [r7, #84]	; 0x54
 800bf3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf3e:	601a      	str	r2, [r3, #0]
 800bf40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf44:	605a      	str	r2, [r3, #4]
 800bf46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf48:	2245      	movs	r2, #69	; 0x45
 800bf4a:	609a      	str	r2, [r3, #8]
 800bf4c:	4b5f      	ldr	r3, [pc, #380]	; (800c0cc <_tx_queue_send+0x21c>)
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf52:	60da      	str	r2, [r3, #12]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf58:	611a      	str	r2, [r3, #16]
 800bf5a:	68ba      	ldr	r2, [r7, #8]
 800bf5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf5e:	615a      	str	r2, [r3, #20]
 800bf60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	619a      	str	r2, [r3, #24]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	691a      	ldr	r2, [r3, #16]
 800bf6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf6c:	61da      	str	r2, [r3, #28]
 800bf6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf70:	3320      	adds	r3, #32
 800bf72:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf74:	4b56      	ldr	r3, [pc, #344]	; (800c0d0 <_tx_queue_send+0x220>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d314      	bcc.n	800bfa8 <_tx_queue_send+0xf8>
 800bf7e:	4b55      	ldr	r3, [pc, #340]	; (800c0d4 <_tx_queue_send+0x224>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf84:	4a4d      	ldr	r2, [pc, #308]	; (800c0bc <_tx_queue_send+0x20c>)
 800bf86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf88:	6013      	str	r3, [r2, #0]
 800bf8a:	4b53      	ldr	r3, [pc, #332]	; (800c0d8 <_tx_queue_send+0x228>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf90:	621a      	str	r2, [r3, #32]
 800bf92:	4b52      	ldr	r3, [pc, #328]	; (800c0dc <_tx_queue_send+0x22c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00d      	beq.n	800bfb6 <_tx_queue_send+0x106>
 800bf9a:	4b50      	ldr	r3, [pc, #320]	; (800c0dc <_tx_queue_send+0x22c>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4a4e      	ldr	r2, [pc, #312]	; (800c0d8 <_tx_queue_send+0x228>)
 800bfa0:	6812      	ldr	r2, [r2, #0]
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	4798      	blx	r3
 800bfa6:	e006      	b.n	800bfb6 <_tx_queue_send+0x106>
 800bfa8:	4a44      	ldr	r2, [pc, #272]	; (800c0bc <_tx_queue_send+0x20c>)
 800bfaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfac:	6013      	str	r3, [r2, #0]
 800bfae:	4b4a      	ldr	r3, [pc, #296]	; (800c0d8 <_tx_queue_send+0x228>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfb4:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfba:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f000 80ae 	beq.w	800c122 <_tx_queue_send+0x272>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800bfc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d13c      	bne.n	800c046 <_tx_queue_send+0x196>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	695b      	ldr	r3, [r3, #20]
 800bfd0:	1e5a      	subs	r2, r3, #1
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	1c5a      	adds	r2, r3, #1
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  queue_ptr -> tx_queue_write;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe8:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bff0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bff2:	1d13      	adds	r3, r2, #4
 800bff4:	667b      	str	r3, [r7, #100]	; 0x64
 800bff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bff8:	1d19      	adds	r1, r3, #4
 800bffa:	6639      	str	r1, [r7, #96]	; 0x60
 800bffc:	6812      	ldr	r2, [r2, #0]
 800bffe:	601a      	str	r2, [r3, #0]
 800c000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c002:	2b01      	cmp	r3, #1
 800c004:	d90e      	bls.n	800c024 <_tx_queue_send+0x174>
 800c006:	e007      	b.n	800c018 <_tx_queue_send+0x168>
 800c008:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c00a:	1d13      	adds	r3, r2, #4
 800c00c:	667b      	str	r3, [r7, #100]	; 0x64
 800c00e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c010:	1d19      	adds	r1, r3, #4
 800c012:	6639      	str	r1, [r7, #96]	; 0x60
 800c014:	6812      	ldr	r2, [r2, #0]
 800c016:	601a      	str	r2, [r3, #0]
 800c018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c01a:	3b01      	subs	r3, #1
 800c01c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c01e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1f1      	bne.n	800c008 <_tx_queue_send+0x158>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	69db      	ldr	r3, [r3, #28]
 800c028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d102      	bne.n	800c034 <_tx_queue_send+0x184>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	699b      	ldr	r3, [r3, #24]
 800c032:	663b      	str	r3, [r7, #96]	; 0x60
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c038:	625a      	str	r2, [r3, #36]	; 0x24
 800c03a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c03c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c040:	f383 8810 	msr	PRIMASK, r3
}
 800c044:	e0db      	b.n	800c1fe <_tx_queue_send+0x34e>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c04a:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800c04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c04e:	3b01      	subs	r3, #1
 800c050:	643b      	str	r3, [r7, #64]	; 0x40
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c054:	2b00      	cmp	r3, #0
 800c056:	d103      	bne.n	800c060 <_tx_queue_send+0x1b0>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2200      	movs	r2, #0
 800c05c:	629a      	str	r2, [r3, #40]	; 0x28
 800c05e:	e012      	b.n	800c086 <_tx_queue_send+0x1d6>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800c060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c062:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800c068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c06a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c06c:	63bb      	str	r3, [r7, #56]	; 0x38
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c072:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c078:	637b      	str	r3, [r7, #52]	; 0x34
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c07e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800c080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c084:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c08a:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c08e:	2200      	movs	r2, #0
 800c090:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800c096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c09a:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c0a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c0a4:	1d13      	adds	r3, r2, #4
 800c0a6:	667b      	str	r3, [r7, #100]	; 0x64
 800c0a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0aa:	1d19      	adds	r1, r3, #4
 800c0ac:	6639      	str	r1, [r7, #96]	; 0x60
 800c0ae:	6812      	ldr	r2, [r2, #0]
 800c0b0:	601a      	str	r2, [r3, #0]
 800c0b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d921      	bls.n	800c0fc <_tx_queue_send+0x24c>
 800c0b8:	e01a      	b.n	800c0f0 <_tx_queue_send+0x240>
 800c0ba:	bf00      	nop
 800c0bc:	20001ca0 	.word	0x20001ca0
 800c0c0:	20001ca4 	.word	0x20001ca4
 800c0c4:	2000000c 	.word	0x2000000c
 800c0c8:	20001684 	.word	0x20001684
 800c0cc:	e0001004 	.word	0xe0001004
 800c0d0:	20001c9c 	.word	0x20001c9c
 800c0d4:	20001c98 	.word	0x20001c98
 800c0d8:	20001c8c 	.word	0x20001c8c
 800c0dc:	20001ca8 	.word	0x20001ca8
 800c0e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c0e2:	1d13      	adds	r3, r2, #4
 800c0e4:	667b      	str	r3, [r7, #100]	; 0x64
 800c0e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0e8:	1d19      	adds	r1, r3, #4
 800c0ea:	6639      	str	r1, [r7, #96]	; 0x60
 800c0ec:	6812      	ldr	r2, [r2, #0]
 800c0ee:	601a      	str	r2, [r3, #0]
 800c0f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c0f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1f1      	bne.n	800c0e0 <_tx_queue_send+0x230>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0fe:	2200      	movs	r2, #0
 800c100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c104:	4b40      	ldr	r3, [pc, #256]	; (800c208 <_tx_queue_send+0x358>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	3301      	adds	r3, #1
 800c10a:	4a3f      	ldr	r2, [pc, #252]	; (800c208 <_tx_queue_send+0x358>)
 800c10c:	6013      	str	r3, [r2, #0]
 800c10e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c110:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c112:	6a3b      	ldr	r3, [r7, #32]
 800c114:	f383 8810 	msr	PRIMASK, r3
}
 800c118:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800c11a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c11c:	f000 ff26 	bl	800cf6c <_tx_thread_system_resume>
 800c120:	e06d      	b.n	800c1fe <_tx_queue_send+0x34e>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d062      	beq.n	800c1ee <_tx_queue_send+0x33e>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c128:	4b37      	ldr	r3, [pc, #220]	; (800c208 <_tx_queue_send+0x358>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d008      	beq.n	800c142 <_tx_queue_send+0x292>
 800c130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c132:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	f383 8810 	msr	PRIMASK, r3
}
 800c13a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800c13c:	230b      	movs	r3, #11
 800c13e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c140:	e05d      	b.n	800c1fe <_tx_queue_send+0x34e>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c142:	4b32      	ldr	r3, [pc, #200]	; (800c20c <_tx_queue_send+0x35c>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800c148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c14a:	4a31      	ldr	r2, [pc, #196]	; (800c210 <_tx_queue_send+0x360>)
 800c14c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800c14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800c154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c156:	68ba      	ldr	r2, [r7, #8]
 800c158:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800c15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c15c:	2200      	movs	r2, #0
 800c15e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c164:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c168:	1c5a      	adds	r2, r3, #1
 800c16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c16c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c172:	2b00      	cmp	r3, #0
 800c174:	d109      	bne.n	800c18a <_tx_queue_send+0x2da>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c17a:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c17e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c180:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c186:	675a      	str	r2, [r3, #116]	; 0x74
 800c188:	e011      	b.n	800c1ae <_tx_queue_send+0x2fe>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c18e:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c194:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c19a:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c19e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1a0:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1a6:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1ac:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800c1ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1b0:	1c5a      	adds	r2, r3, #1
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800c1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1b8:	2205      	movs	r2, #5
 800c1ba:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1be:	2201      	movs	r2, #1
 800c1c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c1c8:	4b0f      	ldr	r3, [pc, #60]	; (800c208 <_tx_queue_send+0x358>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	4a0e      	ldr	r2, [pc, #56]	; (800c208 <_tx_queue_send+0x358>)
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	f383 8810 	msr	PRIMASK, r3
}
 800c1dc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c1de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c1e0:	f001 f87e 	bl	800d2e0 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1ea:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1ec:	e007      	b.n	800c1fe <_tx_queue_send+0x34e>
 800c1ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1f0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	f383 8810 	msr	PRIMASK, r3
}
 800c1f8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800c1fa:	230b      	movs	r3, #11
 800c1fc:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800c1fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800c200:	4618      	mov	r0, r3
 800c202:	3768      	adds	r7, #104	; 0x68
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	2000171c 	.word	0x2000171c
 800c20c:	20001684 	.word	0x20001684
 800c210:	0800b4e9 	.word	0x0800b4e9

0800c214 <_tx_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b092      	sub	sp, #72	; 0x48
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c21e:	2300      	movs	r3, #0
 800c220:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c222:	f3ef 8310 	mrs	r3, PRIMASK
 800c226:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c228:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c22a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c22c:	b672      	cpsid	i
    return(int_posture);
 800c22e:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800c230:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of puts on this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_put_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CEILING_PUT, semaphore_ptr, semaphore_ptr -> tx_semaphore_count, semaphore_ptr -> tx_semaphore_suspended_count, ceiling, TX_TRACE_SEMAPHORE_EVENTS)
 800c232:	4b67      	ldr	r3, [pc, #412]	; (800c3d0 <_tx_semaphore_ceiling_put+0x1bc>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	637b      	str	r3, [r7, #52]	; 0x34
 800c238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d06d      	beq.n	800c31a <_tx_semaphore_ceiling_put+0x106>
 800c23e:	4b65      	ldr	r3, [pc, #404]	; (800c3d4 <_tx_semaphore_ceiling_put+0x1c0>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c246:	2b00      	cmp	r3, #0
 800c248:	d067      	beq.n	800c31a <_tx_semaphore_ceiling_put+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c24a:	f3ef 8305 	mrs	r3, IPSR
 800c24e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	4b61      	ldr	r3, [pc, #388]	; (800c3d8 <_tx_semaphore_ceiling_put+0x1c4>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4313      	orrs	r3, r2
 800c258:	633b      	str	r3, [r7, #48]	; 0x30
 800c25a:	4b60      	ldr	r3, [pc, #384]	; (800c3dc <_tx_semaphore_ceiling_put+0x1c8>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c262:	2b00      	cmp	r3, #0
 800c264:	d10b      	bne.n	800c27e <_tx_semaphore_ceiling_put+0x6a>
 800c266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26a:	643b      	str	r3, [r7, #64]	; 0x40
 800c26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c270:	041a      	lsls	r2, r3, #16
 800c272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c274:	4313      	orrs	r3, r2
 800c276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c27a:	643b      	str	r3, [r7, #64]	; 0x40
 800c27c:	e00e      	b.n	800c29c <_tx_semaphore_ceiling_put+0x88>
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c284:	d205      	bcs.n	800c292 <_tx_semaphore_ceiling_put+0x7e>
 800c286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c288:	643b      	str	r3, [r7, #64]	; 0x40
 800c28a:	f04f 33ff 	mov.w	r3, #4294967295
 800c28e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c290:	e004      	b.n	800c29c <_tx_semaphore_ceiling_put+0x88>
 800c292:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c296:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c298:	2300      	movs	r3, #0
 800c29a:	643b      	str	r3, [r7, #64]	; 0x40
 800c29c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a0:	601a      	str	r2, [r3, #0]
 800c2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2a6:	605a      	str	r2, [r3, #4]
 800c2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2aa:	2250      	movs	r2, #80	; 0x50
 800c2ac:	609a      	str	r2, [r3, #8]
 800c2ae:	4b4c      	ldr	r3, [pc, #304]	; (800c3e0 <_tx_semaphore_ceiling_put+0x1cc>)
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b4:	60da      	str	r2, [r3, #12]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ba:	611a      	str	r2, [r3, #16]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	689a      	ldr	r2, [r3, #8]
 800c2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c2:	615a      	str	r2, [r3, #20]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	691a      	ldr	r2, [r3, #16]
 800c2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ca:	619a      	str	r2, [r3, #24]
 800c2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	61da      	str	r2, [r3, #28]
 800c2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d4:	3320      	adds	r3, #32
 800c2d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c2d8:	4b42      	ldr	r3, [pc, #264]	; (800c3e4 <_tx_semaphore_ceiling_put+0x1d0>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d314      	bcc.n	800c30c <_tx_semaphore_ceiling_put+0xf8>
 800c2e2:	4b41      	ldr	r3, [pc, #260]	; (800c3e8 <_tx_semaphore_ceiling_put+0x1d4>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	637b      	str	r3, [r7, #52]	; 0x34
 800c2e8:	4a39      	ldr	r2, [pc, #228]	; (800c3d0 <_tx_semaphore_ceiling_put+0x1bc>)
 800c2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ec:	6013      	str	r3, [r2, #0]
 800c2ee:	4b3f      	ldr	r3, [pc, #252]	; (800c3ec <_tx_semaphore_ceiling_put+0x1d8>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2f4:	621a      	str	r2, [r3, #32]
 800c2f6:	4b3e      	ldr	r3, [pc, #248]	; (800c3f0 <_tx_semaphore_ceiling_put+0x1dc>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00d      	beq.n	800c31a <_tx_semaphore_ceiling_put+0x106>
 800c2fe:	4b3c      	ldr	r3, [pc, #240]	; (800c3f0 <_tx_semaphore_ceiling_put+0x1dc>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a3a      	ldr	r2, [pc, #232]	; (800c3ec <_tx_semaphore_ceiling_put+0x1d8>)
 800c304:	6812      	ldr	r2, [r2, #0]
 800c306:	4610      	mov	r0, r2
 800c308:	4798      	blx	r3
 800c30a:	e006      	b.n	800c31a <_tx_semaphore_ceiling_put+0x106>
 800c30c:	4a30      	ldr	r2, [pc, #192]	; (800c3d0 <_tx_semaphore_ceiling_put+0x1bc>)
 800c30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c310:	6013      	str	r3, [r2, #0]
 800c312:	4b36      	ldr	r3, [pc, #216]	; (800c3ec <_tx_semaphore_ceiling_put+0x1d8>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c318:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_CEILING_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	691b      	ldr	r3, [r3, #16]
 800c31e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800c320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c322:	2b00      	cmp	r3, #0
 800c324:	d11b      	bne.n	800c35e <_tx_semaphore_ceiling_put+0x14a>
    {

        /* Determine if the ceiling has been exceeded.  */
        if (semaphore_ptr -> tx_semaphore_count >= ceiling)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d808      	bhi.n	800c342 <_tx_semaphore_ceiling_put+0x12e>
 800c330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c332:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	f383 8810 	msr	PRIMASK, r3
}
 800c33a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Return an error.  */
            status =  TX_CEILING_EXCEEDED;
 800c33c:	2321      	movs	r3, #33	; 0x21
 800c33e:	647b      	str	r3, [r7, #68]	; 0x44
 800c340:	e041      	b.n	800c3c6 <_tx_semaphore_ceiling_put+0x1b2>
        }
        else
        {

            /* Increment the semaphore count.  */
            semaphore_ptr -> tx_semaphore_count++;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	689b      	ldr	r3, [r3, #8]
 800c346:	1c5a      	adds	r2, r3, #1
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	609a      	str	r2, [r3, #8]
 800c34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f383 8810 	msr	PRIMASK, r3
}
 800c356:	bf00      	nop
                (semaphore_put_notify)(semaphore_ptr);
            }
#endif

            /* Return successful completion status.  */
            status =  TX_SUCCESS;
 800c358:	2300      	movs	r3, #0
 800c35a:	647b      	str	r3, [r7, #68]	; 0x44
 800c35c:	e033      	b.n	800c3c6 <_tx_semaphore_ceiling_put+0x1b2>
    {

        /* Remove the suspended thread from the list.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	62bb      	str	r3, [r7, #40]	; 0x28

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800c364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c366:	3b01      	subs	r3, #1
 800c368:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d103      	bne.n	800c378 <_tx_semaphore_ceiling_put+0x164>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	60da      	str	r2, [r3, #12]
 800c376:	e00e      	b.n	800c396 <_tx_semaphore_ceiling_put+0x182>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800c378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c37c:	627b      	str	r3, [r7, #36]	; 0x24
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c382:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c388:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38c:	6a3a      	ldr	r2, [r7, #32]
 800c38e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c390:	6a3b      	ldr	r3, [r7, #32]
 800c392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c394:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c39a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39e:	2200      	movs	r2, #0
 800c3a0:	669a      	str	r2, [r3, #104]	; 0x68

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800c3aa:	4b12      	ldr	r3, [pc, #72]	; (800c3f4 <_tx_semaphore_ceiling_put+0x1e0>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	4a10      	ldr	r2, [pc, #64]	; (800c3f4 <_tx_semaphore_ceiling_put+0x1e0>)
 800c3b2:	6013      	str	r3, [r2, #0]
 800c3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	f383 8810 	msr	PRIMASK, r3
}
 800c3be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c3c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3c2:	f000 fdd3 	bl	800cf6c <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(status);
 800c3c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3748      	adds	r7, #72	; 0x48
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	20001ca0 	.word	0x20001ca0
 800c3d4:	20001ca4 	.word	0x20001ca4
 800c3d8:	2000000c 	.word	0x2000000c
 800c3dc:	20001684 	.word	0x20001684
 800c3e0:	e0001004 	.word	0xe0001004
 800c3e4:	20001c9c 	.word	0x20001c9c
 800c3e8:	20001c98 	.word	0x20001c98
 800c3ec:	20001c8c 	.word	0x20001c8c
 800c3f0:	20001ca8 	.word	0x20001ca8
 800c3f4:	2000171c 	.word	0x2000171c

0800c3f8 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b08e      	sub	sp, #56	; 0x38
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c402:	f3ef 8310 	mrs	r3, PRIMASK
 800c406:	623b      	str	r3, [r7, #32]
    return(posture);
 800c408:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c40a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c40c:	b672      	cpsid	i
    return(int_posture);
 800c40e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800c410:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c416:	4a33      	ldr	r2, [pc, #204]	; (800c4e4 <_tx_semaphore_cleanup+0xec>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d158      	bne.n	800c4ce <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	429a      	cmp	r2, r3
 800c426:	d152      	bne.n	800c4ce <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c42c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	2b00      	cmp	r3, #0
 800c432:	d04c      	beq.n	800c4ce <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800c434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a2b      	ldr	r2, [pc, #172]	; (800c4e8 <_tx_semaphore_cleanup+0xf0>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d147      	bne.n	800c4ce <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800c43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c440:	691b      	ldr	r3, [r3, #16]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d043      	beq.n	800c4ce <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800c44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	1e5a      	subs	r2, r3, #1
 800c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c454:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c458:	691b      	ldr	r3, [r3, #16]
 800c45a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d103      	bne.n	800c46a <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c464:	2200      	movs	r2, #0
 800c466:	60da      	str	r2, [r3, #12]
 800c468:	e013      	b.n	800c492 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c46e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c474:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c47a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c480:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800c482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d102      	bne.n	800c492 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c490:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c496:	2b06      	cmp	r3, #6
 800c498:	d119      	bne.n	800c4ce <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	220d      	movs	r2, #13
 800c49e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c4a2:	4b12      	ldr	r3, [pc, #72]	; (800c4ec <_tx_semaphore_cleanup+0xf4>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	4a10      	ldr	r2, [pc, #64]	; (800c4ec <_tx_semaphore_cleanup+0xf4>)
 800c4aa:	6013      	str	r3, [r2, #0]
 800c4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	f383 8810 	msr	PRIMASK, r3
}
 800c4b6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 fd57 	bl	800cf6c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c4be:	f3ef 8310 	mrs	r3, PRIMASK
 800c4c2:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c4c4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c4c6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c4c8:	b672      	cpsid	i
    return(int_posture);
 800c4ca:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c4cc:	637b      	str	r3, [r7, #52]	; 0x34
 800c4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4d0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f383 8810 	msr	PRIMASK, r3
}
 800c4d8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c4da:	bf00      	nop
 800c4dc:	3738      	adds	r7, #56	; 0x38
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	0800c3f9 	.word	0x0800c3f9
 800c4e8:	53454d41 	.word	0x53454d41
 800c4ec:	2000171c 	.word	0x2000171c

0800c4f0 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b092      	sub	sp, #72	; 0x48
 800c4f4:	af02      	add	r7, sp, #8
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800c4fc:	221c      	movs	r2, #28
 800c4fe:	2100      	movs	r1, #0
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f008 fba3 	bl	8014c4c <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	68ba      	ldr	r2, [r7, #8]
 800c50a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c512:	f3ef 8310 	mrs	r3, PRIMASK
 800c516:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c51a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c51c:	b672      	cpsid	i
    return(int_posture);
 800c51e:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800c520:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	4a56      	ldr	r2, [pc, #344]	; (800c680 <_tx_semaphore_create+0x190>)
 800c526:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800c528:	4b56      	ldr	r3, [pc, #344]	; (800c684 <_tx_semaphore_create+0x194>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d109      	bne.n	800c544 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800c530:	4a55      	ldr	r2, [pc, #340]	; (800c688 <_tx_semaphore_create+0x198>)
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	619a      	str	r2, [r3, #24]
 800c542:	e011      	b.n	800c568 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800c544:	4b50      	ldr	r3, [pc, #320]	; (800c688 <_tx_semaphore_create+0x198>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	617b      	str	r3, [r7, #20]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800c556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c560:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800c562:	697a      	ldr	r2, [r7, #20]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800c568:	4b46      	ldr	r3, [pc, #280]	; (800c684 <_tx_semaphore_create+0x194>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	3301      	adds	r3, #1
 800c56e:	4a45      	ldr	r2, [pc, #276]	; (800c684 <_tx_semaphore_create+0x194>)
 800c570:	6013      	str	r3, [r2, #0]

    /* Optional semaphore create extended processing.  */
    TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, name_ptr, initial_count, 0)
 800c572:	2300      	movs	r3, #0
 800c574:	9300      	str	r3, [sp, #0]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	68f9      	ldr	r1, [r7, #12]
 800c57c:	2004      	movs	r0, #4
 800c57e:	f001 fc17 	bl	800ddb0 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CREATE, semaphore_ptr, initial_count, TX_POINTER_TO_ULONG_CONVERT(&next_semaphore), 0, TX_TRACE_SEMAPHORE_EVENTS)
 800c582:	4b42      	ldr	r3, [pc, #264]	; (800c68c <_tx_semaphore_create+0x19c>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d06c      	beq.n	800c668 <_tx_semaphore_create+0x178>
 800c58e:	4b40      	ldr	r3, [pc, #256]	; (800c690 <_tx_semaphore_create+0x1a0>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c596:	2b00      	cmp	r3, #0
 800c598:	d066      	beq.n	800c668 <_tx_semaphore_create+0x178>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c59a:	f3ef 8305 	mrs	r3, IPSR
 800c59e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c5a0:	69fa      	ldr	r2, [r7, #28]
 800c5a2:	4b3c      	ldr	r3, [pc, #240]	; (800c694 <_tx_semaphore_create+0x1a4>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5aa:	4b3b      	ldr	r3, [pc, #236]	; (800c698 <_tx_semaphore_create+0x1a8>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d10b      	bne.n	800c5ce <_tx_semaphore_create+0xde>
 800c5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5c0:	041a      	lsls	r2, r3, #16
 800c5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5cc:	e00e      	b.n	800c5ec <_tx_semaphore_create+0xfc>
 800c5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c5d4:	d205      	bcs.n	800c5e2 <_tx_semaphore_create+0xf2>
 800c5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5da:	f04f 33ff 	mov.w	r3, #4294967295
 800c5de:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5e0:	e004      	b.n	800c5ec <_tx_semaphore_create+0xfc>
 800c5e2:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c5e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f0:	601a      	str	r2, [r3, #0]
 800c5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5f6:	605a      	str	r2, [r3, #4]
 800c5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fa:	2251      	movs	r2, #81	; 0x51
 800c5fc:	609a      	str	r2, [r3, #8]
 800c5fe:	4b27      	ldr	r3, [pc, #156]	; (800c69c <_tx_semaphore_create+0x1ac>)
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c604:	60da      	str	r2, [r3, #12]
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60a:	611a      	str	r2, [r3, #16]
 800c60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	615a      	str	r2, [r3, #20]
 800c612:	f107 0214 	add.w	r2, r7, #20
 800c616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c618:	619a      	str	r2, [r3, #24]
 800c61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61c:	2200      	movs	r2, #0
 800c61e:	61da      	str	r2, [r3, #28]
 800c620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c622:	3320      	adds	r3, #32
 800c624:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c626:	4b1e      	ldr	r3, [pc, #120]	; (800c6a0 <_tx_semaphore_create+0x1b0>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d314      	bcc.n	800c65a <_tx_semaphore_create+0x16a>
 800c630:	4b1c      	ldr	r3, [pc, #112]	; (800c6a4 <_tx_semaphore_create+0x1b4>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c636:	4a15      	ldr	r2, [pc, #84]	; (800c68c <_tx_semaphore_create+0x19c>)
 800c638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63a:	6013      	str	r3, [r2, #0]
 800c63c:	4b1a      	ldr	r3, [pc, #104]	; (800c6a8 <_tx_semaphore_create+0x1b8>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c642:	621a      	str	r2, [r3, #32]
 800c644:	4b19      	ldr	r3, [pc, #100]	; (800c6ac <_tx_semaphore_create+0x1bc>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00d      	beq.n	800c668 <_tx_semaphore_create+0x178>
 800c64c:	4b17      	ldr	r3, [pc, #92]	; (800c6ac <_tx_semaphore_create+0x1bc>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a15      	ldr	r2, [pc, #84]	; (800c6a8 <_tx_semaphore_create+0x1b8>)
 800c652:	6812      	ldr	r2, [r2, #0]
 800c654:	4610      	mov	r0, r2
 800c656:	4798      	blx	r3
 800c658:	e006      	b.n	800c668 <_tx_semaphore_create+0x178>
 800c65a:	4a0c      	ldr	r2, [pc, #48]	; (800c68c <_tx_semaphore_create+0x19c>)
 800c65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65e:	6013      	str	r3, [r2, #0]
 800c660:	4b11      	ldr	r3, [pc, #68]	; (800c6a8 <_tx_semaphore_create+0x1b8>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c666:	621a      	str	r2, [r3, #32]
 800c668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c66a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	f383 8810 	msr	PRIMASK, r3
}
 800c672:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3740      	adds	r7, #64	; 0x40
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	53454d41 	.word	0x53454d41
 800c684:	20001650 	.word	0x20001650
 800c688:	2000164c 	.word	0x2000164c
 800c68c:	20001ca0 	.word	0x20001ca0
 800c690:	20001ca4 	.word	0x20001ca4
 800c694:	2000000c 	.word	0x2000000c
 800c698:	20001684 	.word	0x20001684
 800c69c:	e0001004 	.word	0xe0001004
 800c6a0:	20001c9c 	.word	0x20001c9c
 800c6a4:	20001c98 	.word	0x20001c98
 800c6a8:	20001c8c 	.word	0x20001c8c
 800c6ac:	20001ca8 	.word	0x20001ca8

0800c6b0 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b092      	sub	sp, #72	; 0x48
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c6be:	f3ef 8310 	mrs	r3, PRIMASK
 800c6c2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c6c6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c6c8:	b672      	cpsid	i
    return(int_posture);
 800c6ca:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800c6cc:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of attempts to get this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_get_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_GET, semaphore_ptr, wait_option, semaphore_ptr -> tx_semaphore_count, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_SEMAPHORE_EVENTS)
 800c6ce:	4b78      	ldr	r3, [pc, #480]	; (800c8b0 <_tx_semaphore_get+0x200>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d06d      	beq.n	800c7b6 <_tx_semaphore_get+0x106>
 800c6da:	4b76      	ldr	r3, [pc, #472]	; (800c8b4 <_tx_semaphore_get+0x204>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d067      	beq.n	800c7b6 <_tx_semaphore_get+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c6e6:	f3ef 8305 	mrs	r3, IPSR
 800c6ea:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c6ec:	69fa      	ldr	r2, [r7, #28]
 800c6ee:	4b72      	ldr	r3, [pc, #456]	; (800c8b8 <_tx_semaphore_get+0x208>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	633b      	str	r3, [r7, #48]	; 0x30
 800c6f6:	4b71      	ldr	r3, [pc, #452]	; (800c8bc <_tx_semaphore_get+0x20c>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d10b      	bne.n	800c71a <_tx_semaphore_get+0x6a>
 800c702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c706:	643b      	str	r3, [r7, #64]	; 0x40
 800c708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c70a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c70c:	041a      	lsls	r2, r3, #16
 800c70e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c710:	4313      	orrs	r3, r2
 800c712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c716:	643b      	str	r3, [r7, #64]	; 0x40
 800c718:	e00e      	b.n	800c738 <_tx_semaphore_get+0x88>
 800c71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c720:	d205      	bcs.n	800c72e <_tx_semaphore_get+0x7e>
 800c722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c724:	643b      	str	r3, [r7, #64]	; 0x40
 800c726:	f04f 33ff 	mov.w	r3, #4294967295
 800c72a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c72c:	e004      	b.n	800c738 <_tx_semaphore_get+0x88>
 800c72e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c732:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c734:	2300      	movs	r3, #0
 800c736:	643b      	str	r3, [r7, #64]	; 0x40
 800c738:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c742:	605a      	str	r2, [r3, #4]
 800c744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c746:	2253      	movs	r2, #83	; 0x53
 800c748:	609a      	str	r2, [r3, #8]
 800c74a:	4b5d      	ldr	r3, [pc, #372]	; (800c8c0 <_tx_semaphore_get+0x210>)
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c750:	60da      	str	r2, [r3, #12]
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c756:	611a      	str	r2, [r3, #16]
 800c758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	615a      	str	r2, [r3, #20]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	689a      	ldr	r2, [r3, #8]
 800c762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c764:	619a      	str	r2, [r3, #24]
 800c766:	f107 0208 	add.w	r2, r7, #8
 800c76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c76c:	61da      	str	r2, [r3, #28]
 800c76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c770:	3320      	adds	r3, #32
 800c772:	637b      	str	r3, [r7, #52]	; 0x34
 800c774:	4b53      	ldr	r3, [pc, #332]	; (800c8c4 <_tx_semaphore_get+0x214>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d314      	bcc.n	800c7a8 <_tx_semaphore_get+0xf8>
 800c77e:	4b52      	ldr	r3, [pc, #328]	; (800c8c8 <_tx_semaphore_get+0x218>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	637b      	str	r3, [r7, #52]	; 0x34
 800c784:	4a4a      	ldr	r2, [pc, #296]	; (800c8b0 <_tx_semaphore_get+0x200>)
 800c786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c788:	6013      	str	r3, [r2, #0]
 800c78a:	4b50      	ldr	r3, [pc, #320]	; (800c8cc <_tx_semaphore_get+0x21c>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c790:	621a      	str	r2, [r3, #32]
 800c792:	4b4f      	ldr	r3, [pc, #316]	; (800c8d0 <_tx_semaphore_get+0x220>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00d      	beq.n	800c7b6 <_tx_semaphore_get+0x106>
 800c79a:	4b4d      	ldr	r3, [pc, #308]	; (800c8d0 <_tx_semaphore_get+0x220>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a4b      	ldr	r2, [pc, #300]	; (800c8cc <_tx_semaphore_get+0x21c>)
 800c7a0:	6812      	ldr	r2, [r2, #0]
 800c7a2:	4610      	mov	r0, r2
 800c7a4:	4798      	blx	r3
 800c7a6:	e006      	b.n	800c7b6 <_tx_semaphore_get+0x106>
 800c7a8:	4a41      	ldr	r2, [pc, #260]	; (800c8b0 <_tx_semaphore_get+0x200>)
 800c7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ac:	6013      	str	r3, [r2, #0]
 800c7ae:	4b47      	ldr	r3, [pc, #284]	; (800c8cc <_tx_semaphore_get+0x21c>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7b4:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00a      	beq.n	800c7d4 <_tx_semaphore_get+0x124>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	1e5a      	subs	r2, r3, #1
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	609a      	str	r2, [r3, #8]
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ca:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	f383 8810 	msr	PRIMASK, r3
}
 800c7d2:	e068      	b.n	800c8a6 <_tx_semaphore_get+0x1f6>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d05d      	beq.n	800c896 <_tx_semaphore_get+0x1e6>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c7da:	4b3e      	ldr	r3, [pc, #248]	; (800c8d4 <_tx_semaphore_get+0x224>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d008      	beq.n	800c7f4 <_tx_semaphore_get+0x144>
 800c7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f383 8810 	msr	PRIMASK, r3
}
 800c7ec:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800c7ee:	230d      	movs	r3, #13
 800c7f0:	647b      	str	r3, [r7, #68]	; 0x44
 800c7f2:	e058      	b.n	800c8a6 <_tx_semaphore_get+0x1f6>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c7f4:	4b31      	ldr	r3, [pc, #196]	; (800c8bc <_tx_semaphore_get+0x20c>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	60bb      	str	r3, [r7, #8]

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	4a36      	ldr	r2, [pc, #216]	; (800c8d8 <_tx_semaphore_get+0x228>)
 800c7fe:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c80c:	3201      	adds	r2, #1
 800c80e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	691b      	ldr	r3, [r3, #16]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d109      	bne.n	800c82e <_tx_semaphore_get+0x17e>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	68ba      	ldr	r2, [r7, #8]
 800c824:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	68ba      	ldr	r2, [r7, #8]
 800c82a:	675a      	str	r2, [r3, #116]	; 0x74
 800c82c:	e011      	b.n	800c852 <_tx_semaphore_get+0x1a2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c838:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c83e:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c844:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84a:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c850:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	691b      	ldr	r3, [r3, #16]
 800c856:	1c5a      	adds	r2, r3, #1
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	2206      	movs	r2, #6
 800c860:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	2201      	movs	r2, #1
 800c866:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	683a      	ldr	r2, [r7, #0]
 800c86c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c86e:	4b19      	ldr	r3, [pc, #100]	; (800c8d4 <_tx_semaphore_get+0x224>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	3301      	adds	r3, #1
 800c874:	4a17      	ldr	r2, [pc, #92]	; (800c8d4 <_tx_semaphore_get+0x224>)
 800c876:	6013      	str	r3, [r2, #0]
 800c878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	f383 8810 	msr	PRIMASK, r3
}
 800c882:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	4618      	mov	r0, r3
 800c888:	f000 fd2a 	bl	800d2e0 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c892:	647b      	str	r3, [r7, #68]	; 0x44
 800c894:	e007      	b.n	800c8a6 <_tx_semaphore_get+0x1f6>
 800c896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c898:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f383 8810 	msr	PRIMASK, r3
}
 800c8a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800c8a2:	230d      	movs	r3, #13
 800c8a4:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800c8a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3748      	adds	r7, #72	; 0x48
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	20001ca0 	.word	0x20001ca0
 800c8b4:	20001ca4 	.word	0x20001ca4
 800c8b8:	2000000c 	.word	0x2000000c
 800c8bc:	20001684 	.word	0x20001684
 800c8c0:	e0001004 	.word	0xe0001004
 800c8c4:	20001c9c 	.word	0x20001c9c
 800c8c8:	20001c98 	.word	0x20001c98
 800c8cc:	20001c8c 	.word	0x20001c8c
 800c8d0:	20001ca8 	.word	0x20001ca8
 800c8d4:	2000171c 	.word	0x2000171c
 800c8d8:	0800c3f9 	.word	0x0800c3f9

0800c8dc <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b09a      	sub	sp, #104	; 0x68
 800c8e0:	af02      	add	r7, sp, #8
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	607a      	str	r2, [r7, #4]
 800c8e8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800c8ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c8f0:	21ef      	movs	r1, #239	; 0xef
 800c8f2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c8f4:	f008 f9aa 	bl	8014c4c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800c8f8:	22b0      	movs	r2, #176	; 0xb0
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f008 f9a5 	bl	8014c4c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	683a      	ldr	r2, [r7, #0]
 800c912:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c918:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c91e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c924:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c92a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c932:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c938:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2220      	movs	r2, #32
 800c93e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800c942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c944:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800c946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c948:	3b01      	subs	r3, #1
 800c94a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c94c:	4413      	add	r3, r2
 800c94e:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c954:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800c956:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d007      	beq.n	800c96e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2200      	movs	r2, #0
 800c962:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2200      	movs	r2, #0
 800c968:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800c96c:	e006      	b.n	800c97c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c972:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c978:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2203      	movs	r2, #3
 800c980:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	4a86      	ldr	r2, [pc, #536]	; (800cba0 <_tx_thread_create+0x2c4>)
 800c986:	655a      	str	r2, [r3, #84]	; 0x54
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800c98e:	4985      	ldr	r1, [pc, #532]	; (800cba4 <_tx_thread_create+0x2c8>)
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f7f3 fd1b 	bl	80003cc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c996:	f3ef 8310 	mrs	r3, PRIMASK
 800c99a:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800c99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800c99e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800c9a0:	b672      	cpsid	i
    return(int_posture);
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800c9a4:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	4a7f      	ldr	r2, [pc, #508]	; (800cba8 <_tx_thread_create+0x2cc>)
 800c9aa:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800c9ac:	4b7f      	ldr	r3, [pc, #508]	; (800cbac <_tx_thread_create+0x2d0>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10b      	bne.n	800c9cc <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800c9b4:	4a7e      	ldr	r2, [pc, #504]	; (800cbb0 <_tx_thread_create+0x2d4>)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	68fa      	ldr	r2, [r7, #12]
 800c9c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800c9ca:	e016      	b.n	800c9fa <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800c9cc:	4b78      	ldr	r3, [pc, #480]	; (800cbb0 <_tx_thread_create+0x2d4>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 800c9d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9d8:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800c9da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800c9e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800c9fa:	4b6c      	ldr	r3, [pc, #432]	; (800cbac <_tx_thread_create+0x2d0>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	4a6a      	ldr	r2, [pc, #424]	; (800cbac <_tx_thread_create+0x2d0>)
 800ca02:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 800ca04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca08:	9300      	str	r3, [sp, #0]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	68f9      	ldr	r1, [r7, #12]
 800ca10:	2001      	movs	r0, #1
 800ca12:	f001 f9cd 	bl	800ddb0 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 800ca16:	4b67      	ldr	r3, [pc, #412]	; (800cbb4 <_tx_thread_create+0x2d8>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d06b      	beq.n	800cafa <_tx_thread_create+0x21e>
 800ca22:	4b65      	ldr	r3, [pc, #404]	; (800cbb8 <_tx_thread_create+0x2dc>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d065      	beq.n	800cafa <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ca2e:	f3ef 8305 	mrs	r3, IPSR
 800ca32:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800ca34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca36:	4b61      	ldr	r3, [pc, #388]	; (800cbbc <_tx_thread_create+0x2e0>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca3e:	4b60      	ldr	r3, [pc, #384]	; (800cbc0 <_tx_thread_create+0x2e4>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	653b      	str	r3, [r7, #80]	; 0x50
 800ca44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10b      	bne.n	800ca62 <_tx_thread_create+0x186>
 800ca4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4e:	657b      	str	r3, [r7, #84]	; 0x54
 800ca50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca54:	041a      	lsls	r2, r3, #16
 800ca56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca5e:	657b      	str	r3, [r7, #84]	; 0x54
 800ca60:	e00e      	b.n	800ca80 <_tx_thread_create+0x1a4>
 800ca62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca64:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ca68:	d205      	bcs.n	800ca76 <_tx_thread_create+0x19a>
 800ca6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca6c:	657b      	str	r3, [r7, #84]	; 0x54
 800ca6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca72:	653b      	str	r3, [r7, #80]	; 0x50
 800ca74:	e004      	b.n	800ca80 <_tx_thread_create+0x1a4>
 800ca76:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800ca7a:	653b      	str	r3, [r7, #80]	; 0x50
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	657b      	str	r3, [r7, #84]	; 0x54
 800ca80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca84:	601a      	str	r2, [r3, #0]
 800ca86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca8a:	605a      	str	r2, [r3, #4]
 800ca8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca8e:	2264      	movs	r2, #100	; 0x64
 800ca90:	609a      	str	r2, [r3, #8]
 800ca92:	4b4c      	ldr	r3, [pc, #304]	; (800cbc4 <_tx_thread_create+0x2e8>)
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca98:	60da      	str	r2, [r3, #12]
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca9e:	611a      	str	r2, [r3, #16]
 800caa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800caa4:	615a      	str	r2, [r3, #20]
 800caa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800caa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caaa:	619a      	str	r2, [r3, #24]
 800caac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cab0:	61da      	str	r2, [r3, #28]
 800cab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cab4:	3320      	adds	r3, #32
 800cab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cab8:	4b43      	ldr	r3, [pc, #268]	; (800cbc8 <_tx_thread_create+0x2ec>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d314      	bcc.n	800caec <_tx_thread_create+0x210>
 800cac2:	4b42      	ldr	r3, [pc, #264]	; (800cbcc <_tx_thread_create+0x2f0>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cac8:	4a3a      	ldr	r2, [pc, #232]	; (800cbb4 <_tx_thread_create+0x2d8>)
 800caca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cacc:	6013      	str	r3, [r2, #0]
 800cace:	4b40      	ldr	r3, [pc, #256]	; (800cbd0 <_tx_thread_create+0x2f4>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cad4:	621a      	str	r2, [r3, #32]
 800cad6:	4b3f      	ldr	r3, [pc, #252]	; (800cbd4 <_tx_thread_create+0x2f8>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00d      	beq.n	800cafa <_tx_thread_create+0x21e>
 800cade:	4b3d      	ldr	r3, [pc, #244]	; (800cbd4 <_tx_thread_create+0x2f8>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a3b      	ldr	r2, [pc, #236]	; (800cbd0 <_tx_thread_create+0x2f4>)
 800cae4:	6812      	ldr	r2, [r2, #0]
 800cae6:	4610      	mov	r0, r2
 800cae8:	4798      	blx	r3
 800caea:	e006      	b.n	800cafa <_tx_thread_create+0x21e>
 800caec:	4a31      	ldr	r2, [pc, #196]	; (800cbb4 <_tx_thread_create+0x2d8>)
 800caee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caf0:	6013      	str	r3, [r2, #0]
 800caf2:	4b37      	ldr	r3, [pc, #220]	; (800cbd0 <_tx_thread_create+0x2f4>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800caf8:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cafa:	4b37      	ldr	r3, [pc, #220]	; (800cbd8 <_tx_thread_create+0x2fc>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	3301      	adds	r3, #1
 800cb00:	4a35      	ldr	r2, [pc, #212]	; (800cbd8 <_tx_thread_create+0x2fc>)
 800cb02:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800cb04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d129      	bne.n	800cb5e <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cb0a:	f3ef 8305 	mrs	r3, IPSR
 800cb0e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800cb10:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800cb12:	4b2a      	ldr	r3, [pc, #168]	; (800cbbc <_tx_thread_create+0x2e0>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cb1c:	d30d      	bcc.n	800cb3a <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800cb1e:	4b2f      	ldr	r3, [pc, #188]	; (800cbdc <_tx_thread_create+0x300>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800cb24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d009      	beq.n	800cb3e <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800cb2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb2e:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800cb30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb36:	63da      	str	r2, [r3, #60]	; 0x3c
 800cb38:	e001      	b.n	800cb3e <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb40:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb44:	f383 8810 	msr	PRIMASK, r3
}
 800cb48:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f000 fa0e 	bl	800cf6c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800cb50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d01e      	beq.n	800cb94 <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800cb56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb5a:	63da      	str	r2, [r3, #60]	; 0x3c
 800cb5c:	e01a      	b.n	800cb94 <_tx_thread_create+0x2b8>
 800cb5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb60:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f383 8810 	msr	PRIMASK, r3
}
 800cb68:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb6a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb6e:	61fb      	str	r3, [r7, #28]
    return(posture);
 800cb70:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800cb72:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb74:	b672      	cpsid	i
    return(int_posture);
 800cb76:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800cb78:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800cb7a:	4b17      	ldr	r3, [pc, #92]	; (800cbd8 <_tx_thread_create+0x2fc>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	4a15      	ldr	r2, [pc, #84]	; (800cbd8 <_tx_thread_create+0x2fc>)
 800cb82:	6013      	str	r3, [r2, #0]
 800cb84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb86:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb88:	6a3b      	ldr	r3, [r7, #32]
 800cb8a:	f383 8810 	msr	PRIMASK, r3
}
 800cb8e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cb90:	f000 f9b2 	bl	800cef8 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800cb94:	2300      	movs	r3, #0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3760      	adds	r7, #96	; 0x60
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	0800d881 	.word	0x0800d881
 800cba4:	0800cc5d 	.word	0x0800cc5d
 800cba8:	54485244 	.word	0x54485244
 800cbac:	20001690 	.word	0x20001690
 800cbb0:	2000168c 	.word	0x2000168c
 800cbb4:	20001ca0 	.word	0x20001ca0
 800cbb8:	20001ca4 	.word	0x20001ca4
 800cbbc:	2000000c 	.word	0x2000000c
 800cbc0:	20001684 	.word	0x20001684
 800cbc4:	e0001004 	.word	0xe0001004
 800cbc8:	20001c9c 	.word	0x20001c9c
 800cbcc:	20001c98 	.word	0x20001c98
 800cbd0:	20001c8c 	.word	0x20001c8c
 800cbd4:	20001ca8 	.word	0x20001ca8
 800cbd8:	2000171c 	.word	0x2000171c
 800cbdc:	20001688 	.word	0x20001688

0800cbe0 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800cbe4:	4b13      	ldr	r3, [pc, #76]	; (800cc34 <_tx_thread_initialize+0x54>)
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800cbea:	4b13      	ldr	r3, [pc, #76]	; (800cc38 <_tx_thread_initialize+0x58>)
 800cbec:	2200      	movs	r2, #0
 800cbee:	601a      	str	r2, [r3, #0]
 800cbf0:	4b12      	ldr	r3, [pc, #72]	; (800cc3c <_tx_thread_initialize+0x5c>)
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cbf6:	4b12      	ldr	r3, [pc, #72]	; (800cc40 <_tx_thread_initialize+0x60>)
 800cbf8:	2220      	movs	r2, #32
 800cbfa:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800cbfc:	2280      	movs	r2, #128	; 0x80
 800cbfe:	2100      	movs	r1, #0
 800cc00:	4810      	ldr	r0, [pc, #64]	; (800cc44 <_tx_thread_initialize+0x64>)
 800cc02:	f008 f823 	bl	8014c4c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800cc06:	4b10      	ldr	r3, [pc, #64]	; (800cc48 <_tx_thread_initialize+0x68>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800cc0c:	4b0f      	ldr	r3, [pc, #60]	; (800cc4c <_tx_thread_initialize+0x6c>)
 800cc0e:	2200      	movs	r2, #0
 800cc10:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800cc12:	4b0f      	ldr	r3, [pc, #60]	; (800cc50 <_tx_thread_initialize+0x70>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800cc18:	4b0e      	ldr	r3, [pc, #56]	; (800cc54 <_tx_thread_initialize+0x74>)
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 800cc1e:	4b0e      	ldr	r3, [pc, #56]	; (800cc58 <_tx_thread_initialize+0x78>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 800cc26:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 800cc2a:	4a0b      	ldr	r2, [pc, #44]	; (800cc58 <_tx_thread_initialize+0x78>)
 800cc2c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800cc2e:	bf00      	nop
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20001684 	.word	0x20001684
 800cc38:	20001688 	.word	0x20001688
 800cc3c:	20001694 	.word	0x20001694
 800cc40:	20001698 	.word	0x20001698
 800cc44:	2000169c 	.word	0x2000169c
 800cc48:	2000168c 	.word	0x2000168c
 800cc4c:	20001690 	.word	0x20001690
 800cc50:	2000171c 	.word	0x2000171c
 800cc54:	20001720 	.word	0x20001720
 800cc58:	20001724 	.word	0x20001724

0800cc5c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b088      	sub	sp, #32
 800cc60:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cc62:	4b21      	ldr	r3, [pc, #132]	; (800cce8 <_tx_thread_shell_entry+0x8c>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc6c:	69fa      	ldr	r2, [r7, #28]
 800cc6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cc70:	4610      	mov	r0, r2
 800cc72:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800cc74:	4b1d      	ldr	r3, [pc, #116]	; (800ccec <_tx_thread_shell_entry+0x90>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d003      	beq.n	800cc84 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800cc7c:	4b1b      	ldr	r3, [pc, #108]	; (800ccec <_tx_thread_shell_entry+0x90>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	69f8      	ldr	r0, [r7, #28]
 800cc82:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc84:	f3ef 8310 	mrs	r3, PRIMASK
 800cc88:	607b      	str	r3, [r7, #4]
    return(posture);
 800cc8a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800cc8c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc8e:	b672      	cpsid	i
    return(int_posture);
 800cc90:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800cc92:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	2201      	movs	r2, #1
 800cc98:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	2200      	movs	r2, #0
 800cca4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cca6:	4b12      	ldr	r3, [pc, #72]	; (800ccf0 <_tx_thread_shell_entry+0x94>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	4a10      	ldr	r2, [pc, #64]	; (800ccf0 <_tx_thread_shell_entry+0x94>)
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	f383 8810 	msr	PRIMASK, r3
}
 800ccba:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800ccbc:	f3ef 8314 	mrs	r3, CONTROL
 800ccc0:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800ccc2:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800ccc4:	617b      	str	r3, [r7, #20]
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	f023 0304 	bic.w	r3, r3, #4
 800cccc:	617b      	str	r3, [r7, #20]
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	f383 8814 	msr	CONTROL, r3
}
 800ccd8:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800ccda:	69f8      	ldr	r0, [r7, #28]
 800ccdc:	f000 fb00 	bl	800d2e0 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800cce0:	bf00      	nop
 800cce2:	3720      	adds	r7, #32
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	20001684 	.word	0x20001684
 800ccec:	20001720 	.word	0x20001720
 800ccf0:	2000171c 	.word	0x2000171c

0800ccf4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b094      	sub	sp, #80	; 0x50
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ccfc:	f3ef 8310 	mrs	r3, PRIMASK
 800cd00:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800cd02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800cd04:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800cd06:	b672      	cpsid	i
    return(int_posture);
 800cd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800cd0a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cd0c:	4b6f      	ldr	r3, [pc, #444]	; (800cecc <_tx_thread_sleep+0x1d8>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800cd12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d108      	bne.n	800cd2a <_tx_thread_sleep+0x36>
 800cd18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1e:	f383 8810 	msr	PRIMASK, r3
}
 800cd22:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cd24:	2313      	movs	r3, #19
 800cd26:	60fb      	str	r3, [r7, #12]
 800cd28:	e0ca      	b.n	800cec0 <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cd2a:	f3ef 8305 	mrs	r3, IPSR
 800cd2e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800cd30:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cd32:	4b67      	ldr	r3, [pc, #412]	; (800ced0 <_tx_thread_sleep+0x1dc>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4313      	orrs	r3, r2
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d008      	beq.n	800cd4e <_tx_thread_sleep+0x5a>
 800cd3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd3e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd42:	f383 8810 	msr	PRIMASK, r3
}
 800cd46:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cd48:	2313      	movs	r3, #19
 800cd4a:	60fb      	str	r3, [r7, #12]
 800cd4c:	e0b8      	b.n	800cec0 <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800cd4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd50:	4a60      	ldr	r2, [pc, #384]	; (800ced4 <_tx_thread_sleep+0x1e0>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d108      	bne.n	800cd68 <_tx_thread_sleep+0x74>
 800cd56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd58:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd5a:	6a3b      	ldr	r3, [r7, #32]
 800cd5c:	f383 8810 	msr	PRIMASK, r3
}
 800cd60:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cd62:	2313      	movs	r3, #19
 800cd64:	60fb      	str	r3, [r7, #12]
 800cd66:	e0ab      	b.n	800cec0 <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d108      	bne.n	800cd80 <_tx_thread_sleep+0x8c>
 800cd6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd70:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	f383 8810 	msr	PRIMASK, r3
}
 800cd78:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	60fb      	str	r3, [r7, #12]
 800cd7e:	e09f      	b.n	800cec0 <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800cd80:	4b55      	ldr	r3, [pc, #340]	; (800ced8 <_tx_thread_sleep+0x1e4>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d008      	beq.n	800cd9a <_tx_thread_sleep+0xa6>
 800cd88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd8a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd8c:	69bb      	ldr	r3, [r7, #24]
 800cd8e:	f383 8810 	msr	PRIMASK, r3
}
 800cd92:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800cd94:	2313      	movs	r3, #19
 800cd96:	60fb      	str	r3, [r7, #12]
 800cd98:	e092      	b.n	800cec0 <_tx_thread_sleep+0x1cc>
        }
        else
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 800cd9a:	4b50      	ldr	r3, [pc, #320]	; (800cedc <_tx_thread_sleep+0x1e8>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d06d      	beq.n	800ce82 <_tx_thread_sleep+0x18e>
 800cda6:	4b4e      	ldr	r3, [pc, #312]	; (800cee0 <_tx_thread_sleep+0x1ec>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d067      	beq.n	800ce82 <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cdb2:	f3ef 8305 	mrs	r3, IPSR
 800cdb6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cdb8:	697a      	ldr	r2, [r7, #20]
 800cdba:	4b45      	ldr	r3, [pc, #276]	; (800ced0 <_tx_thread_sleep+0x1dc>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdc2:	4b42      	ldr	r3, [pc, #264]	; (800cecc <_tx_thread_sleep+0x1d8>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	64bb      	str	r3, [r7, #72]	; 0x48
 800cdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10b      	bne.n	800cde6 <_tx_thread_sleep+0xf2>
 800cdce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cdd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdd8:	041a      	lsls	r2, r3, #16
 800cdda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cddc:	4313      	orrs	r3, r2
 800cdde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cde2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cde4:	e00e      	b.n	800ce04 <_tx_thread_sleep+0x110>
 800cde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cdec:	d205      	bcs.n	800cdfa <_tx_thread_sleep+0x106>
 800cdee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cdf2:	f04f 33ff 	mov.w	r3, #4294967295
 800cdf6:	64bb      	str	r3, [r7, #72]	; 0x48
 800cdf8:	e004      	b.n	800ce04 <_tx_thread_sleep+0x110>
 800cdfa:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cdfe:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce00:	2300      	movs	r3, #0
 800ce02:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce08:	601a      	str	r2, [r3, #0]
 800ce0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ce0e:	605a      	str	r2, [r3, #4]
 800ce10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce12:	2270      	movs	r2, #112	; 0x70
 800ce14:	609a      	str	r2, [r3, #8]
 800ce16:	4b33      	ldr	r3, [pc, #204]	; (800cee4 <_tx_thread_sleep+0x1f0>)
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce1c:	60da      	str	r2, [r3, #12]
 800ce1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	611a      	str	r2, [r3, #16]
 800ce24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce2a:	615a      	str	r2, [r3, #20]
 800ce2c:	f107 020c 	add.w	r2, r7, #12
 800ce30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce32:	619a      	str	r2, [r3, #24]
 800ce34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce36:	2200      	movs	r2, #0
 800ce38:	61da      	str	r2, [r3, #28]
 800ce3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce3c:	3320      	adds	r3, #32
 800ce3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce40:	4b29      	ldr	r3, [pc, #164]	; (800cee8 <_tx_thread_sleep+0x1f4>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d314      	bcc.n	800ce74 <_tx_thread_sleep+0x180>
 800ce4a:	4b28      	ldr	r3, [pc, #160]	; (800ceec <_tx_thread_sleep+0x1f8>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce50:	4a22      	ldr	r2, [pc, #136]	; (800cedc <_tx_thread_sleep+0x1e8>)
 800ce52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce54:	6013      	str	r3, [r2, #0]
 800ce56:	4b26      	ldr	r3, [pc, #152]	; (800cef0 <_tx_thread_sleep+0x1fc>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce5c:	621a      	str	r2, [r3, #32]
 800ce5e:	4b25      	ldr	r3, [pc, #148]	; (800cef4 <_tx_thread_sleep+0x200>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d00d      	beq.n	800ce82 <_tx_thread_sleep+0x18e>
 800ce66:	4b23      	ldr	r3, [pc, #140]	; (800cef4 <_tx_thread_sleep+0x200>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a21      	ldr	r2, [pc, #132]	; (800cef0 <_tx_thread_sleep+0x1fc>)
 800ce6c:	6812      	ldr	r2, [r2, #0]
 800ce6e:	4610      	mov	r0, r2
 800ce70:	4798      	blx	r3
 800ce72:	e006      	b.n	800ce82 <_tx_thread_sleep+0x18e>
 800ce74:	4a19      	ldr	r2, [pc, #100]	; (800cedc <_tx_thread_sleep+0x1e8>)
 800ce76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce78:	6013      	str	r3, [r2, #0]
 800ce7a:	4b1d      	ldr	r3, [pc, #116]	; (800cef0 <_tx_thread_sleep+0x1fc>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce80:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800ce82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce84:	2204      	movs	r2, #4
 800ce86:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ce88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800ce8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce90:	2200      	movs	r2, #0
 800ce92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800ce96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800ce9c:	4b0e      	ldr	r3, [pc, #56]	; (800ced8 <_tx_thread_sleep+0x1e4>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	3301      	adds	r3, #1
 800cea2:	4a0d      	ldr	r2, [pc, #52]	; (800ced8 <_tx_thread_sleep+0x1e4>)
 800cea4:	6013      	str	r3, [r2, #0]
 800cea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cea8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	f383 8810 	msr	PRIMASK, r3
}
 800ceb0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800ceb2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ceb4:	f000 fa14 	bl	800d2e0 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800ceb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cebe:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Return completion status.  */
    return(status);
 800cec0:	68fb      	ldr	r3, [r7, #12]
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3750      	adds	r7, #80	; 0x50
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	20001684 	.word	0x20001684
 800ced0:	2000000c 	.word	0x2000000c
 800ced4:	200017cc 	.word	0x200017cc
 800ced8:	2000171c 	.word	0x2000171c
 800cedc:	20001ca0 	.word	0x20001ca0
 800cee0:	20001ca4 	.word	0x20001ca4
 800cee4:	e0001004 	.word	0xe0001004
 800cee8:	20001c9c 	.word	0x20001c9c
 800ceec:	20001c98 	.word	0x20001c98
 800cef0:	20001c8c 	.word	0x20001c8c
 800cef4:	20001ca8 	.word	0x20001ca8

0800cef8 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b089      	sub	sp, #36	; 0x24
 800cefc:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800cefe:	4b17      	ldr	r3, [pc, #92]	; (800cf5c <_tx_thread_system_preempt_check+0x64>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d121      	bne.n	800cf4e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800cf0a:	4b15      	ldr	r3, [pc, #84]	; (800cf60 <_tx_thread_system_preempt_check+0x68>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800cf10:	4b14      	ldr	r3, [pc, #80]	; (800cf64 <_tx_thread_system_preempt_check+0x6c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800cf16:	69ba      	ldr	r2, [r7, #24]
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d017      	beq.n	800cf4e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800cf1e:	4b12      	ldr	r3, [pc, #72]	; (800cf68 <_tx_thread_system_preempt_check+0x70>)
 800cf20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf24:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf26:	f3ef 8305 	mrs	r3, IPSR
 800cf2a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800cf2c:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d10c      	bne.n	800cf4c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf32:	f3ef 8310 	mrs	r3, PRIMASK
 800cf36:	60fb      	str	r3, [r7, #12]
    return(posture);
 800cf38:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800cf3a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800cf3c:	b662      	cpsie	i
}
 800cf3e:	bf00      	nop
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f383 8810 	msr	PRIMASK, r3
}
 800cf4a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800cf4c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800cf4e:	bf00      	nop
 800cf50:	3724      	adds	r7, #36	; 0x24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop
 800cf5c:	2000171c 	.word	0x2000171c
 800cf60:	20001684 	.word	0x20001684
 800cf64:	20001688 	.word	0x20001688
 800cf68:	e000ed04 	.word	0xe000ed04

0800cf6c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b09e      	sub	sp, #120	; 0x78
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800cf74:	2300      	movs	r3, #0
 800cf76:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf78:	f3ef 8310 	mrs	r3, PRIMASK
 800cf7c:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800cf7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800cf80:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf82:	b672      	cpsid	i
    return(int_posture);
 800cf84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800cf86:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d005      	beq.n	800cf9c <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	334c      	adds	r3, #76	; 0x4c
 800cf94:	4618      	mov	r0, r3
 800cf96:	f000 fdaf 	bl	800daf8 <_tx_timer_system_deactivate>
 800cf9a:	e002      	b.n	800cfa2 <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 800cfa2:	4b8b      	ldr	r3, [pc, #556]	; (800d1d0 <_tx_thread_system_resume+0x264>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800cfa8:	4b89      	ldr	r3, [pc, #548]	; (800d1d0 <_tx_thread_system_resume+0x264>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	663b      	str	r3, [r7, #96]	; 0x60
 800cfae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d06f      	beq.n	800d094 <_tx_thread_system_resume+0x128>
 800cfb4:	4b87      	ldr	r3, [pc, #540]	; (800d1d4 <_tx_thread_system_resume+0x268>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f003 0301 	and.w	r3, r3, #1
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d069      	beq.n	800d094 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cfc0:	f3ef 8305 	mrs	r3, IPSR
 800cfc4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 800cfc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfc8:	4b83      	ldr	r3, [pc, #524]	; (800d1d8 <_tx_thread_system_resume+0x26c>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfd0:	4b82      	ldr	r3, [pc, #520]	; (800d1dc <_tx_thread_system_resume+0x270>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cfd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d10b      	bne.n	800cff4 <_tx_thread_system_resume+0x88>
 800cfdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe0:	673b      	str	r3, [r7, #112]	; 0x70
 800cfe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfe6:	041a      	lsls	r2, r3, #16
 800cfe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfea:	4313      	orrs	r3, r2
 800cfec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cff0:	673b      	str	r3, [r7, #112]	; 0x70
 800cff2:	e00e      	b.n	800d012 <_tx_thread_system_resume+0xa6>
 800cff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cff6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cffa:	d205      	bcs.n	800d008 <_tx_thread_system_resume+0x9c>
 800cffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cffe:	673b      	str	r3, [r7, #112]	; 0x70
 800d000:	f04f 33ff 	mov.w	r3, #4294967295
 800d004:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d006:	e004      	b.n	800d012 <_tx_thread_system_resume+0xa6>
 800d008:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d00c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d00e:	2300      	movs	r3, #0
 800d010:	673b      	str	r3, [r7, #112]	; 0x70
 800d012:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d016:	601a      	str	r2, [r3, #0]
 800d018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d01a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d01c:	605a      	str	r2, [r3, #4]
 800d01e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d020:	2201      	movs	r2, #1
 800d022:	609a      	str	r2, [r3, #8]
 800d024:	4b6e      	ldr	r3, [pc, #440]	; (800d1e0 <_tx_thread_system_resume+0x274>)
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d02a:	60da      	str	r2, [r3, #12]
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d030:	611a      	str	r2, [r3, #16]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d038:	615a      	str	r2, [r3, #20]
 800d03a:	f107 020c 	add.w	r2, r7, #12
 800d03e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d040:	619a      	str	r2, [r3, #24]
 800d042:	4b68      	ldr	r3, [pc, #416]	; (800d1e4 <_tx_thread_system_resume+0x278>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	461a      	mov	r2, r3
 800d048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d04a:	61da      	str	r2, [r3, #28]
 800d04c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d04e:	3320      	adds	r3, #32
 800d050:	663b      	str	r3, [r7, #96]	; 0x60
 800d052:	4b65      	ldr	r3, [pc, #404]	; (800d1e8 <_tx_thread_system_resume+0x27c>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d058:	429a      	cmp	r2, r3
 800d05a:	d314      	bcc.n	800d086 <_tx_thread_system_resume+0x11a>
 800d05c:	4b63      	ldr	r3, [pc, #396]	; (800d1ec <_tx_thread_system_resume+0x280>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	663b      	str	r3, [r7, #96]	; 0x60
 800d062:	4a5b      	ldr	r2, [pc, #364]	; (800d1d0 <_tx_thread_system_resume+0x264>)
 800d064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d066:	6013      	str	r3, [r2, #0]
 800d068:	4b61      	ldr	r3, [pc, #388]	; (800d1f0 <_tx_thread_system_resume+0x284>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d06e:	621a      	str	r2, [r3, #32]
 800d070:	4b60      	ldr	r3, [pc, #384]	; (800d1f4 <_tx_thread_system_resume+0x288>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d00d      	beq.n	800d094 <_tx_thread_system_resume+0x128>
 800d078:	4b5e      	ldr	r3, [pc, #376]	; (800d1f4 <_tx_thread_system_resume+0x288>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a5c      	ldr	r2, [pc, #368]	; (800d1f0 <_tx_thread_system_resume+0x284>)
 800d07e:	6812      	ldr	r2, [r2, #0]
 800d080:	4610      	mov	r0, r2
 800d082:	4798      	blx	r3
 800d084:	e006      	b.n	800d094 <_tx_thread_system_resume+0x128>
 800d086:	4a52      	ldr	r2, [pc, #328]	; (800d1d0 <_tx_thread_system_resume+0x264>)
 800d088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d08a:	6013      	str	r3, [r2, #0]
 800d08c:	4b58      	ldr	r3, [pc, #352]	; (800d1f0 <_tx_thread_system_resume+0x284>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d092:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 800d094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d096:	2b00      	cmp	r3, #0
 800d098:	d002      	beq.n	800d0a0 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d09a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d0a0:	4b55      	ldr	r3, [pc, #340]	; (800d1f8 <_tx_thread_system_resume+0x28c>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	3b01      	subs	r3, #1
 800d0a6:	4a54      	ldr	r2, [pc, #336]	; (800d1f8 <_tx_thread_system_resume+0x28c>)
 800d0a8:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	f040 80b3 	bne.w	800d21a <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f000 80c7 	beq.w	800d24c <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f040 80a2 	bne.w	800d20c <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d2:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800d0d4:	4a49      	ldr	r2, [pc, #292]	; (800d1fc <_tx_thread_system_resume+0x290>)
 800d0d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0dc:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 800d0de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d164      	bne.n	800d1ae <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800d0e4:	4945      	ldr	r1, [pc, #276]	; (800d1fc <_tx_thread_system_resume+0x290>)
 800d0e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d102:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d104:	4b3e      	ldr	r3, [pc, #248]	; (800d200 <_tx_thread_system_resume+0x294>)
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d10a:	4313      	orrs	r3, r2
 800d10c:	4a3c      	ldr	r2, [pc, #240]	; (800d200 <_tx_thread_system_resume+0x294>)
 800d10e:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d110:	4b3c      	ldr	r3, [pc, #240]	; (800d204 <_tx_thread_system_resume+0x298>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d116:	429a      	cmp	r2, r3
 800d118:	f080 8098 	bcs.w	800d24c <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d11c:	4a39      	ldr	r2, [pc, #228]	; (800d204 <_tx_thread_system_resume+0x298>)
 800d11e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d120:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d122:	4b30      	ldr	r3, [pc, #192]	; (800d1e4 <_tx_thread_system_resume+0x278>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d103      	bne.n	800d136 <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d12e:	4a2d      	ldr	r2, [pc, #180]	; (800d1e4 <_tx_thread_system_resume+0x278>)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6013      	str	r3, [r2, #0]
 800d134:	e08a      	b.n	800d24c <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d13a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d13c:	429a      	cmp	r2, r3
 800d13e:	f080 8085 	bcs.w	800d24c <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d142:	4a28      	ldr	r2, [pc, #160]	; (800d1e4 <_tx_thread_system_resume+0x278>)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 800d148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d009      	beq.n	800d162 <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d14e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d154:	429a      	cmp	r2, r3
 800d156:	d104      	bne.n	800d162 <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d158:	4b22      	ldr	r3, [pc, #136]	; (800d1e4 <_tx_thread_system_resume+0x278>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	461a      	mov	r2, r3
 800d15e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d160:	61da      	str	r2, [r3, #28]
 800d162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d164:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d168:	f383 8810 	msr	PRIMASK, r3
}
 800d16c:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d16e:	4b22      	ldr	r3, [pc, #136]	; (800d1f8 <_tx_thread_system_resume+0x28c>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 800d174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d176:	2b00      	cmp	r3, #0
 800d178:	f040 80a1 	bne.w	800d2be <_tx_thread_system_resume+0x352>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d17c:	4b22      	ldr	r3, [pc, #136]	; (800d208 <_tx_thread_system_resume+0x29c>)
 800d17e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d182:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d184:	f3ef 8305 	mrs	r3, IPSR
 800d188:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (_tx_ipsr_get() == 0)
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f040 8098 	bne.w	800d2c2 <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d192:	f3ef 8310 	mrs	r3, PRIMASK
 800d196:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 800d19a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d19c:	b662      	cpsie	i
}
 800d19e:	bf00      	nop
 800d1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	f383 8810 	msr	PRIMASK, r3
}
 800d1aa:	bf00      	nop
}
 800d1ac:	e089      	b.n	800d2c2 <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800d1ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b2:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800d1b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800d1ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1c4:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d1ca:	621a      	str	r2, [r3, #32]
 800d1cc:	e03e      	b.n	800d24c <_tx_thread_system_resume+0x2e0>
 800d1ce:	bf00      	nop
 800d1d0:	20001ca0 	.word	0x20001ca0
 800d1d4:	20001ca4 	.word	0x20001ca4
 800d1d8:	2000000c 	.word	0x2000000c
 800d1dc:	20001684 	.word	0x20001684
 800d1e0:	e0001004 	.word	0xe0001004
 800d1e4:	20001688 	.word	0x20001688
 800d1e8:	20001c9c 	.word	0x20001c9c
 800d1ec:	20001c98 	.word	0x20001c98
 800d1f0:	20001c8c 	.word	0x20001c8c
 800d1f4:	20001ca8 	.word	0x20001ca8
 800d1f8:	2000171c 	.word	0x2000171c
 800d1fc:	2000169c 	.word	0x2000169c
 800d200:	20001694 	.word	0x20001694
 800d204:	20001698 	.word	0x20001698
 800d208:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2203      	movs	r2, #3
 800d216:	631a      	str	r2, [r3, #48]	; 0x30
 800d218:	e018      	b.n	800d24c <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d014      	beq.n	800d24c <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d226:	2b02      	cmp	r3, #2
 800d228:	d010      	beq.n	800d24c <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d106      	bne.n	800d240 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	631a      	str	r2, [r3, #48]	; 0x30
 800d23e:	e005      	b.n	800d24c <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2203      	movs	r2, #3
 800d24a:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 800d24c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d009      	beq.n	800d266 <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d258:	429a      	cmp	r2, r3
 800d25a:	d104      	bne.n	800d266 <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d25c:	4b1c      	ldr	r3, [pc, #112]	; (800d2d0 <_tx_thread_system_resume+0x364>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	461a      	mov	r2, r3
 800d262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d264:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d266:	4b1b      	ldr	r3, [pc, #108]	; (800d2d4 <_tx_thread_system_resume+0x368>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	647b      	str	r3, [r7, #68]	; 0x44
 800d26c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d26e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	f383 8810 	msr	PRIMASK, r3
}
 800d276:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d278:	4b15      	ldr	r3, [pc, #84]	; (800d2d0 <_tx_thread_system_resume+0x364>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d27e:	429a      	cmp	r2, r3
 800d280:	d022      	beq.n	800d2c8 <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d282:	4b15      	ldr	r3, [pc, #84]	; (800d2d8 <_tx_thread_system_resume+0x36c>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 800d288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d11c      	bne.n	800d2c8 <_tx_thread_system_resume+0x35c>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d28e:	4b13      	ldr	r3, [pc, #76]	; (800d2dc <_tx_thread_system_resume+0x370>)
 800d290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d294:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d296:	f3ef 8305 	mrs	r3, IPSR
 800d29a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d29c:	69fb      	ldr	r3, [r7, #28]
    if (_tx_ipsr_get() == 0)
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d111      	bne.n	800d2c6 <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d2a2:	f3ef 8310 	mrs	r3, PRIMASK
 800d2a6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d2a8:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 800d2aa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d2ac:	b662      	cpsie	i
}
 800d2ae:	bf00      	nop
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	f383 8810 	msr	PRIMASK, r3
}
 800d2ba:	bf00      	nop
}
 800d2bc:	e003      	b.n	800d2c6 <_tx_thread_system_resume+0x35a>
                                return;
 800d2be:	bf00      	nop
 800d2c0:	e002      	b.n	800d2c8 <_tx_thread_system_resume+0x35c>
 800d2c2:	bf00      	nop
 800d2c4:	e000      	b.n	800d2c8 <_tx_thread_system_resume+0x35c>
 800d2c6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800d2c8:	3778      	adds	r7, #120	; 0x78
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	20001688 	.word	0x20001688
 800d2d4:	20001684 	.word	0x20001684
 800d2d8:	2000171c 	.word	0x2000171c
 800d2dc:	e000ed04 	.word	0xe000ed04

0800d2e0 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b0a4      	sub	sp, #144	; 0x90
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d2ee:	4b98      	ldr	r3, [pc, #608]	; (800d550 <_tx_thread_system_suspend+0x270>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d2f6:	f3ef 8310 	mrs	r3, PRIMASK
 800d2fa:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 800d2fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 800d2fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d300:	b672      	cpsid	i
    return(int_posture);
 800d302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d304:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d112      	bne.n	800d336 <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d314:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800d316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d008      	beq.n	800d32e <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800d31c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d322:	d004      	beq.n	800d32e <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	334c      	adds	r3, #76	; 0x4c
 800d328:	4618      	mov	r0, r3
 800d32a:	f000 fb83 	bl	800da34 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	69db      	ldr	r3, [r3, #28]
 800d332:	4a88      	ldr	r2, [pc, #544]	; (800d554 <_tx_thread_system_suspend+0x274>)
 800d334:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d336:	4b88      	ldr	r3, [pc, #544]	; (800d558 <_tx_thread_system_suspend+0x278>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	3b01      	subs	r3, #1
 800d33c:	4a86      	ldr	r2, [pc, #536]	; (800d558 <_tx_thread_system_suspend+0x278>)
 800d33e:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d344:	2b01      	cmp	r3, #1
 800d346:	f040 817d 	bne.w	800d644 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 800d34a:	4b84      	ldr	r3, [pc, #528]	; (800d55c <_tx_thread_system_suspend+0x27c>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d350:	4b82      	ldr	r3, [pc, #520]	; (800d55c <_tx_thread_system_suspend+0x27c>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	673b      	str	r3, [r7, #112]	; 0x70
 800d356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d07c      	beq.n	800d456 <_tx_thread_system_suspend+0x176>
 800d35c:	4b80      	ldr	r3, [pc, #512]	; (800d560 <_tx_thread_system_suspend+0x280>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f003 0301 	and.w	r3, r3, #1
 800d364:	2b00      	cmp	r3, #0
 800d366:	d076      	beq.n	800d456 <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d368:	f3ef 8305 	mrs	r3, IPSR
 800d36c:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800d36e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d370:	4b7c      	ldr	r3, [pc, #496]	; (800d564 <_tx_thread_system_suspend+0x284>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4313      	orrs	r3, r2
 800d376:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d378:	4b75      	ldr	r3, [pc, #468]	; (800d550 <_tx_thread_system_suspend+0x270>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d382:	2b00      	cmp	r3, #0
 800d384:	d110      	bne.n	800d3a8 <_tx_thread_system_suspend+0xc8>
 800d386:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d396:	041a      	lsls	r2, r3, #16
 800d398:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d39c:	4313      	orrs	r3, r2
 800d39e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d3a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d3a6:	e013      	b.n	800d3d0 <_tx_thread_system_suspend+0xf0>
 800d3a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3aa:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d3ae:	d208      	bcs.n	800d3c2 <_tx_thread_system_suspend+0xe2>
 800d3b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d3b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d3c0:	e006      	b.n	800d3d0 <_tx_thread_system_suspend+0xf0>
 800d3c2:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d3c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d3d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d3d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3d6:	601a      	str	r2, [r3, #0]
 800d3d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d3de:	605a      	str	r2, [r3, #4]
 800d3e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3e2:	2202      	movs	r2, #2
 800d3e4:	609a      	str	r2, [r3, #8]
 800d3e6:	4b60      	ldr	r3, [pc, #384]	; (800d568 <_tx_thread_system_suspend+0x288>)
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3ec:	60da      	str	r2, [r3, #12]
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3f2:	611a      	str	r2, [r3, #16]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3fa:	615a      	str	r2, [r3, #20]
 800d3fc:	f107 0208 	add.w	r2, r7, #8
 800d400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d402:	619a      	str	r2, [r3, #24]
 800d404:	4b59      	ldr	r3, [pc, #356]	; (800d56c <_tx_thread_system_suspend+0x28c>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	461a      	mov	r2, r3
 800d40a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d40c:	61da      	str	r2, [r3, #28]
 800d40e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d410:	3320      	adds	r3, #32
 800d412:	673b      	str	r3, [r7, #112]	; 0x70
 800d414:	4b56      	ldr	r3, [pc, #344]	; (800d570 <_tx_thread_system_suspend+0x290>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d314      	bcc.n	800d448 <_tx_thread_system_suspend+0x168>
 800d41e:	4b55      	ldr	r3, [pc, #340]	; (800d574 <_tx_thread_system_suspend+0x294>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	673b      	str	r3, [r7, #112]	; 0x70
 800d424:	4a4d      	ldr	r2, [pc, #308]	; (800d55c <_tx_thread_system_suspend+0x27c>)
 800d426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d428:	6013      	str	r3, [r2, #0]
 800d42a:	4b53      	ldr	r3, [pc, #332]	; (800d578 <_tx_thread_system_suspend+0x298>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d430:	621a      	str	r2, [r3, #32]
 800d432:	4b52      	ldr	r3, [pc, #328]	; (800d57c <_tx_thread_system_suspend+0x29c>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00d      	beq.n	800d456 <_tx_thread_system_suspend+0x176>
 800d43a:	4b50      	ldr	r3, [pc, #320]	; (800d57c <_tx_thread_system_suspend+0x29c>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4a4e      	ldr	r2, [pc, #312]	; (800d578 <_tx_thread_system_suspend+0x298>)
 800d440:	6812      	ldr	r2, [r2, #0]
 800d442:	4610      	mov	r0, r2
 800d444:	4798      	blx	r3
 800d446:	e006      	b.n	800d456 <_tx_thread_system_suspend+0x176>
 800d448:	4a44      	ldr	r2, [pc, #272]	; (800d55c <_tx_thread_system_suspend+0x27c>)
 800d44a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d44c:	6013      	str	r3, [r2, #0]
 800d44e:	4b4a      	ldr	r3, [pc, #296]	; (800d578 <_tx_thread_system_suspend+0x298>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d454:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 800d456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d003      	beq.n	800d464 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d45c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d46e:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6a1b      	ldr	r3, [r3, #32]
 800d474:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800d476:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d016      	beq.n	800d4ac <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d482:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800d484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d486:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d488:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800d48a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d48c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d48e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	4a3b      	ldr	r2, [pc, #236]	; (800d580 <_tx_thread_system_suspend+0x2a0>)
 800d494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	f040 8085 	bne.w	800d5aa <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	4937      	ldr	r1, [pc, #220]	; (800d580 <_tx_thread_system_suspend+0x2a0>)
 800d4a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d4a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d4aa:	e07e      	b.n	800d5aa <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	4a34      	ldr	r2, [pc, #208]	; (800d580 <_tx_thread_system_suspend+0x2a0>)
 800d4b0:	2100      	movs	r1, #0
 800d4b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d4be:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800d4c0:	4b30      	ldr	r3, [pc, #192]	; (800d584 <_tx_thread_system_suspend+0x2a4>)
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4c6:	43db      	mvns	r3, r3
 800d4c8:	4013      	ands	r3, r2
 800d4ca:	4a2e      	ldr	r2, [pc, #184]	; (800d584 <_tx_thread_system_suspend+0x2a4>)
 800d4cc:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800d4d2:	4b2c      	ldr	r3, [pc, #176]	; (800d584 <_tx_thread_system_suspend+0x2a4>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800d4d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d158      	bne.n	800d590 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d4de:	4b2a      	ldr	r3, [pc, #168]	; (800d588 <_tx_thread_system_suspend+0x2a8>)
 800d4e0:	2220      	movs	r2, #32
 800d4e2:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800d4e4:	4b21      	ldr	r3, [pc, #132]	; (800d56c <_tx_thread_system_suspend+0x28c>)
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 800d4ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d008      	beq.n	800d502 <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d4f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d102      	bne.n	800d502 <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 800d4fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4fe:	2200      	movs	r2, #0
 800d500:	61da      	str	r2, [r3, #28]
 800d502:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d504:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d508:	f383 8810 	msr	PRIMASK, r3
}
 800d50c:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d50e:	4b12      	ldr	r3, [pc, #72]	; (800d558 <_tx_thread_system_suspend+0x278>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 800d514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d516:	2b00      	cmp	r3, #0
 800d518:	f040 80bf 	bne.w	800d69a <_tx_thread_system_suspend+0x3ba>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d51c:	4b1b      	ldr	r3, [pc, #108]	; (800d58c <_tx_thread_system_suspend+0x2ac>)
 800d51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d522:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d524:	f3ef 8305 	mrs	r3, IPSR
 800d528:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800d52a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d10c      	bne.n	800d54a <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d530:	f3ef 8310 	mrs	r3, PRIMASK
 800d534:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800d536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800d538:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d53a:	b662      	cpsie	i
}
 800d53c:	bf00      	nop
 800d53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d540:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d544:	f383 8810 	msr	PRIMASK, r3
}
 800d548:	bf00      	nop
}
 800d54a:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800d54c:	e0a5      	b.n	800d69a <_tx_thread_system_suspend+0x3ba>
 800d54e:	bf00      	nop
 800d550:	20001684 	.word	0x20001684
 800d554:	20001c88 	.word	0x20001c88
 800d558:	2000171c 	.word	0x2000171c
 800d55c:	20001ca0 	.word	0x20001ca0
 800d560:	20001ca4 	.word	0x20001ca4
 800d564:	2000000c 	.word	0x2000000c
 800d568:	e0001004 	.word	0xe0001004
 800d56c:	20001688 	.word	0x20001688
 800d570:	20001c9c 	.word	0x20001c9c
 800d574:	20001c98 	.word	0x20001c98
 800d578:	20001c8c 	.word	0x20001c8c
 800d57c:	20001ca8 	.word	0x20001ca8
 800d580:	2000169c 	.word	0x2000169c
 800d584:	20001694 	.word	0x20001694
 800d588:	20001698 	.word	0x20001698
 800d58c:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800d590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d592:	fa93 f3a3 	rbit	r3, r3
 800d596:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d59a:	fab3 f383 	clz	r3, r3
 800d59e:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800d5a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5a4:	4413      	add	r3, r2
 800d5a6:	4a41      	ldr	r2, [pc, #260]	; (800d6ac <_tx_thread_system_suspend+0x3cc>)
 800d5a8:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800d5aa:	4b41      	ldr	r3, [pc, #260]	; (800d6b0 <_tx_thread_system_suspend+0x3d0>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d139      	bne.n	800d628 <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d5b4:	4b3d      	ldr	r3, [pc, #244]	; (800d6ac <_tx_thread_system_suspend+0x3cc>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a3e      	ldr	r2, [pc, #248]	; (800d6b4 <_tx_thread_system_suspend+0x3d4>)
 800d5ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5be:	4a3c      	ldr	r2, [pc, #240]	; (800d6b0 <_tx_thread_system_suspend+0x3d0>)
 800d5c0:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 800d5c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d00a      	beq.n	800d5de <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d5c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d104      	bne.n	800d5de <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d5d4:	4b36      	ldr	r3, [pc, #216]	; (800d6b0 <_tx_thread_system_suspend+0x3d0>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	461a      	mov	r2, r3
 800d5da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5dc:	61da      	str	r2, [r3, #28]
 800d5de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5e0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e4:	f383 8810 	msr	PRIMASK, r3
}
 800d5e8:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d5ea:	4b33      	ldr	r3, [pc, #204]	; (800d6b8 <_tx_thread_system_suspend+0x3d8>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 800d5f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d153      	bne.n	800d69e <_tx_thread_system_suspend+0x3be>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d5f6:	4b31      	ldr	r3, [pc, #196]	; (800d6bc <_tx_thread_system_suspend+0x3dc>)
 800d5f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5fc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d5fe:	f3ef 8305 	mrs	r3, IPSR
 800d602:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800d604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800d606:	2b00      	cmp	r3, #0
 800d608:	d10c      	bne.n	800d624 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d60a:	f3ef 8310 	mrs	r3, PRIMASK
 800d60e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d610:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800d612:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d614:	b662      	cpsie	i
}
 800d616:	bf00      	nop
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d61c:	6a3b      	ldr	r3, [r7, #32]
 800d61e:	f383 8810 	msr	PRIMASK, r3
}
 800d622:	bf00      	nop
}
 800d624:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800d626:	e03a      	b.n	800d69e <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 800d628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00a      	beq.n	800d644 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d62e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d636:	429a      	cmp	r2, r3
 800d638:	d104      	bne.n	800d644 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d63a:	4b1d      	ldr	r3, [pc, #116]	; (800d6b0 <_tx_thread_system_suspend+0x3d0>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	461a      	mov	r2, r3
 800d640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d642:	61da      	str	r2, [r3, #28]
 800d644:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d646:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	f383 8810 	msr	PRIMASK, r3
}
 800d64e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d650:	4b17      	ldr	r3, [pc, #92]	; (800d6b0 <_tx_thread_system_suspend+0x3d0>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d658:	429a      	cmp	r2, r3
 800d65a:	d022      	beq.n	800d6a2 <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d65c:	4b16      	ldr	r3, [pc, #88]	; (800d6b8 <_tx_thread_system_suspend+0x3d8>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 800d662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d664:	2b00      	cmp	r3, #0
 800d666:	d11c      	bne.n	800d6a2 <_tx_thread_system_suspend+0x3c2>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d668:	4b14      	ldr	r3, [pc, #80]	; (800d6bc <_tx_thread_system_suspend+0x3dc>)
 800d66a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d66e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d670:	f3ef 8305 	mrs	r3, IPSR
 800d674:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d676:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10c      	bne.n	800d696 <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d67c:	f3ef 8310 	mrs	r3, PRIMASK
 800d680:	617b      	str	r3, [r7, #20]
    return(posture);
 800d682:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800d684:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d686:	b662      	cpsie	i
}
 800d688:	bf00      	nop
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f383 8810 	msr	PRIMASK, r3
}
 800d694:	bf00      	nop
}
 800d696:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800d698:	e003      	b.n	800d6a2 <_tx_thread_system_suspend+0x3c2>
                return;
 800d69a:	bf00      	nop
 800d69c:	e002      	b.n	800d6a4 <_tx_thread_system_suspend+0x3c4>
            return;
 800d69e:	bf00      	nop
 800d6a0:	e000      	b.n	800d6a4 <_tx_thread_system_suspend+0x3c4>
    return;
 800d6a2:	bf00      	nop
}
 800d6a4:	3790      	adds	r7, #144	; 0x90
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	20001698 	.word	0x20001698
 800d6b0:	20001688 	.word	0x20001688
 800d6b4:	2000169c 	.word	0x2000169c
 800d6b8:	2000171c 	.word	0x2000171c
 800d6bc:	e000ed04 	.word	0xe000ed04

0800d6c0 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b08e      	sub	sp, #56	; 0x38
 800d6c4:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d6c6:	4b5f      	ldr	r3, [pc, #380]	; (800d844 <_tx_thread_time_slice+0x184>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d6cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d6d0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d6d2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d6d4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d6d6:	b672      	cpsid	i
    return(int_posture);
 800d6d8:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800d6da:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d6dc:	4b5a      	ldr	r3, [pc, #360]	; (800d848 <_tx_thread_time_slice+0x188>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d024      	beq.n	800d732 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d120      	bne.n	800d732 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	69d2      	ldr	r2, [r2, #28]
 800d6f6:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	699b      	ldr	r3, [r3, #24]
 800d6fc:	4a53      	ldr	r2, [pc, #332]	; (800d84c <_tx_thread_time_slice+0x18c>)
 800d6fe:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6a1a      	ldr	r2, [r3, #32]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	429a      	cmp	r2, r3
 800d708:	d013      	beq.n	800d732 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d712:	429a      	cmp	r2, r3
 800d714:	d10d      	bne.n	800d732 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d71c:	6a12      	ldr	r2, [r2, #32]
 800d71e:	494c      	ldr	r1, [pc, #304]	; (800d850 <_tx_thread_time_slice+0x190>)
 800d720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d724:	4b4b      	ldr	r3, [pc, #300]	; (800d854 <_tx_thread_time_slice+0x194>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4a49      	ldr	r2, [pc, #292]	; (800d850 <_tx_thread_time_slice+0x190>)
 800d72a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d72e:	4a4a      	ldr	r2, [pc, #296]	; (800d858 <_tx_thread_time_slice+0x198>)
 800d730:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d732:	f3ef 8305 	mrs	r3, IPSR
 800d736:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d738:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 800d73a:	4b48      	ldr	r3, [pc, #288]	; (800d85c <_tx_thread_time_slice+0x19c>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4313      	orrs	r3, r2
 800d740:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 800d742:	4b47      	ldr	r3, [pc, #284]	; (800d860 <_tx_thread_time_slice+0x1a0>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d748:	4b46      	ldr	r3, [pc, #280]	; (800d864 <_tx_thread_time_slice+0x1a4>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	623b      	str	r3, [r7, #32]
 800d74e:	6a3b      	ldr	r3, [r7, #32]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d06d      	beq.n	800d830 <_tx_thread_time_slice+0x170>
 800d754:	4b44      	ldr	r3, [pc, #272]	; (800d868 <_tx_thread_time_slice+0x1a8>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f003 0301 	and.w	r3, r3, #1
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d067      	beq.n	800d830 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d760:	f3ef 8305 	mrs	r3, IPSR
 800d764:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	4b3c      	ldr	r3, [pc, #240]	; (800d85c <_tx_thread_time_slice+0x19c>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4313      	orrs	r3, r2
 800d76e:	61fb      	str	r3, [r7, #28]
 800d770:	4b34      	ldr	r3, [pc, #208]	; (800d844 <_tx_thread_time_slice+0x184>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	633b      	str	r3, [r7, #48]	; 0x30
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d10b      	bne.n	800d794 <_tx_thread_time_slice+0xd4>
 800d77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d780:	637b      	str	r3, [r7, #52]	; 0x34
 800d782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d786:	041a      	lsls	r2, r3, #16
 800d788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d78a:	4313      	orrs	r3, r2
 800d78c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d790:	637b      	str	r3, [r7, #52]	; 0x34
 800d792:	e00e      	b.n	800d7b2 <_tx_thread_time_slice+0xf2>
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d79a:	d205      	bcs.n	800d7a8 <_tx_thread_time_slice+0xe8>
 800d79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79e:	637b      	str	r3, [r7, #52]	; 0x34
 800d7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d7a4:	633b      	str	r3, [r7, #48]	; 0x30
 800d7a6:	e004      	b.n	800d7b2 <_tx_thread_time_slice+0xf2>
 800d7a8:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d7ac:	633b      	str	r3, [r7, #48]	; 0x30
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	637b      	str	r3, [r7, #52]	; 0x34
 800d7b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7b4:	6a3b      	ldr	r3, [r7, #32]
 800d7b6:	601a      	str	r2, [r3, #0]
 800d7b8:	6a3b      	ldr	r3, [r7, #32]
 800d7ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7bc:	605a      	str	r2, [r3, #4]
 800d7be:	6a3b      	ldr	r3, [r7, #32]
 800d7c0:	2205      	movs	r2, #5
 800d7c2:	609a      	str	r2, [r3, #8]
 800d7c4:	4b29      	ldr	r3, [pc, #164]	; (800d86c <_tx_thread_time_slice+0x1ac>)
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	6a3b      	ldr	r3, [r7, #32]
 800d7ca:	60da      	str	r2, [r3, #12]
 800d7cc:	4b22      	ldr	r3, [pc, #136]	; (800d858 <_tx_thread_time_slice+0x198>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	6a3b      	ldr	r3, [r7, #32]
 800d7d4:	611a      	str	r2, [r3, #16]
 800d7d6:	6a3b      	ldr	r3, [r7, #32]
 800d7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7da:	615a      	str	r2, [r3, #20]
 800d7dc:	6a3b      	ldr	r3, [r7, #32]
 800d7de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7e0:	619a      	str	r2, [r3, #24]
 800d7e2:	1d3a      	adds	r2, r7, #4
 800d7e4:	6a3b      	ldr	r3, [r7, #32]
 800d7e6:	61da      	str	r2, [r3, #28]
 800d7e8:	6a3b      	ldr	r3, [r7, #32]
 800d7ea:	3320      	adds	r3, #32
 800d7ec:	623b      	str	r3, [r7, #32]
 800d7ee:	4b20      	ldr	r3, [pc, #128]	; (800d870 <_tx_thread_time_slice+0x1b0>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	6a3a      	ldr	r2, [r7, #32]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d314      	bcc.n	800d822 <_tx_thread_time_slice+0x162>
 800d7f8:	4b1e      	ldr	r3, [pc, #120]	; (800d874 <_tx_thread_time_slice+0x1b4>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	623b      	str	r3, [r7, #32]
 800d7fe:	4a19      	ldr	r2, [pc, #100]	; (800d864 <_tx_thread_time_slice+0x1a4>)
 800d800:	6a3b      	ldr	r3, [r7, #32]
 800d802:	6013      	str	r3, [r2, #0]
 800d804:	4b1c      	ldr	r3, [pc, #112]	; (800d878 <_tx_thread_time_slice+0x1b8>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	6a3a      	ldr	r2, [r7, #32]
 800d80a:	621a      	str	r2, [r3, #32]
 800d80c:	4b1b      	ldr	r3, [pc, #108]	; (800d87c <_tx_thread_time_slice+0x1bc>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d00d      	beq.n	800d830 <_tx_thread_time_slice+0x170>
 800d814:	4b19      	ldr	r3, [pc, #100]	; (800d87c <_tx_thread_time_slice+0x1bc>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4a17      	ldr	r2, [pc, #92]	; (800d878 <_tx_thread_time_slice+0x1b8>)
 800d81a:	6812      	ldr	r2, [r2, #0]
 800d81c:	4610      	mov	r0, r2
 800d81e:	4798      	blx	r3
 800d820:	e006      	b.n	800d830 <_tx_thread_time_slice+0x170>
 800d822:	4a10      	ldr	r2, [pc, #64]	; (800d864 <_tx_thread_time_slice+0x1a4>)
 800d824:	6a3b      	ldr	r3, [r7, #32]
 800d826:	6013      	str	r3, [r2, #0]
 800d828:	4b13      	ldr	r3, [pc, #76]	; (800d878 <_tx_thread_time_slice+0x1b8>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	6a3a      	ldr	r2, [r7, #32]
 800d82e:	621a      	str	r2, [r3, #32]
 800d830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d832:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	f383 8810 	msr	PRIMASK, r3
}
 800d83a:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800d83c:	bf00      	nop
 800d83e:	3738      	adds	r7, #56	; 0x38
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	20001684 	.word	0x20001684
 800d848:	2000172c 	.word	0x2000172c
 800d84c:	20001c88 	.word	0x20001c88
 800d850:	2000169c 	.word	0x2000169c
 800d854:	20001698 	.word	0x20001698
 800d858:	20001688 	.word	0x20001688
 800d85c:	2000000c 	.word	0x2000000c
 800d860:	2000171c 	.word	0x2000171c
 800d864:	20001ca0 	.word	0x20001ca0
 800d868:	20001ca4 	.word	0x20001ca4
 800d86c:	e0001004 	.word	0xe0001004
 800d870:	20001c9c 	.word	0x20001c9c
 800d874:	20001c98 	.word	0x20001c98
 800d878:	20001c8c 	.word	0x20001c8c
 800d87c:	20001ca8 	.word	0x20001ca8

0800d880 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b08a      	sub	sp, #40	; 0x28
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d88c:	f3ef 8310 	mrs	r3, PRIMASK
 800d890:	617b      	str	r3, [r7, #20]
    return(posture);
 800d892:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d894:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d896:	b672      	cpsid	i
    return(int_posture);
 800d898:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800d89a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8a0:	2b04      	cmp	r3, #4
 800d8a2:	d10e      	bne.n	800d8c2 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800d8a4:	4b13      	ldr	r3, [pc, #76]	; (800d8f4 <_tx_thread_timeout+0x74>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	4a12      	ldr	r2, [pc, #72]	; (800d8f4 <_tx_thread_timeout+0x74>)
 800d8ac:	6013      	str	r3, [r2, #0]
 800d8ae:	6a3b      	ldr	r3, [r7, #32]
 800d8b0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f383 8810 	msr	PRIMASK, r3
}
 800d8b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d8ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8bc:	f7ff fb56 	bl	800cf6c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800d8c0:	e013      	b.n	800d8ea <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8c6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800d8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d8ce:	61bb      	str	r3, [r7, #24]
 800d8d0:	6a3b      	ldr	r3, [r7, #32]
 800d8d2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	f383 8810 	msr	PRIMASK, r3
}
 800d8da:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800d8dc:	69fb      	ldr	r3, [r7, #28]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d003      	beq.n	800d8ea <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	69b9      	ldr	r1, [r7, #24]
 800d8e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8e8:	4798      	blx	r3
}
 800d8ea:	bf00      	nop
 800d8ec:	3728      	adds	r7, #40	; 0x28
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	2000171c 	.word	0x2000171c

0800d8f8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d8fe:	f3ef 8310 	mrs	r3, PRIMASK
 800d902:	607b      	str	r3, [r7, #4]
    return(posture);
 800d904:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800d906:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d908:	b672      	cpsid	i
    return(int_posture);
 800d90a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800d90c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800d90e:	4b09      	ldr	r3, [pc, #36]	; (800d934 <_tx_timer_expiration_process+0x3c>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	3301      	adds	r3, #1
 800d914:	4a07      	ldr	r2, [pc, #28]	; (800d934 <_tx_timer_expiration_process+0x3c>)
 800d916:	6013      	str	r3, [r2, #0]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	f383 8810 	msr	PRIMASK, r3
}
 800d922:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800d924:	4804      	ldr	r0, [pc, #16]	; (800d938 <_tx_timer_expiration_process+0x40>)
 800d926:	f7ff fb21 	bl	800cf6c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800d92a:	bf00      	nop
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	2000171c 	.word	0x2000171c
 800d938:	200017cc 	.word	0x200017cc

0800d93c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800d93c:	b590      	push	{r4, r7, lr}
 800d93e:	b089      	sub	sp, #36	; 0x24
 800d940:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800d942:	4b28      	ldr	r3, [pc, #160]	; (800d9e4 <_tx_timer_initialize+0xa8>)
 800d944:	2200      	movs	r2, #0
 800d946:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800d948:	4b27      	ldr	r3, [pc, #156]	; (800d9e8 <_tx_timer_initialize+0xac>)
 800d94a:	2200      	movs	r2, #0
 800d94c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d94e:	4b27      	ldr	r3, [pc, #156]	; (800d9ec <_tx_timer_initialize+0xb0>)
 800d950:	2200      	movs	r2, #0
 800d952:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800d954:	4b26      	ldr	r3, [pc, #152]	; (800d9f0 <_tx_timer_initialize+0xb4>)
 800d956:	2200      	movs	r2, #0
 800d958:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800d95a:	4b26      	ldr	r3, [pc, #152]	; (800d9f4 <_tx_timer_initialize+0xb8>)
 800d95c:	2200      	movs	r2, #0
 800d95e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800d960:	2280      	movs	r2, #128	; 0x80
 800d962:	2100      	movs	r1, #0
 800d964:	4824      	ldr	r0, [pc, #144]	; (800d9f8 <_tx_timer_initialize+0xbc>)
 800d966:	f007 f971 	bl	8014c4c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800d96a:	4b24      	ldr	r3, [pc, #144]	; (800d9fc <_tx_timer_initialize+0xc0>)
 800d96c:	4a22      	ldr	r2, [pc, #136]	; (800d9f8 <_tx_timer_initialize+0xbc>)
 800d96e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800d970:	4b23      	ldr	r3, [pc, #140]	; (800da00 <_tx_timer_initialize+0xc4>)
 800d972:	4a21      	ldr	r2, [pc, #132]	; (800d9f8 <_tx_timer_initialize+0xbc>)
 800d974:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800d976:	4b23      	ldr	r3, [pc, #140]	; (800da04 <_tx_timer_initialize+0xc8>)
 800d978:	4a23      	ldr	r2, [pc, #140]	; (800da08 <_tx_timer_initialize+0xcc>)
 800d97a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800d97c:	4b21      	ldr	r3, [pc, #132]	; (800da04 <_tx_timer_initialize+0xc8>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	3304      	adds	r3, #4
 800d982:	4a20      	ldr	r2, [pc, #128]	; (800da04 <_tx_timer_initialize+0xc8>)
 800d984:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800d986:	4b21      	ldr	r3, [pc, #132]	; (800da0c <_tx_timer_initialize+0xd0>)
 800d988:	4a21      	ldr	r2, [pc, #132]	; (800da10 <_tx_timer_initialize+0xd4>)
 800d98a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800d98c:	4b21      	ldr	r3, [pc, #132]	; (800da14 <_tx_timer_initialize+0xd8>)
 800d98e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d992:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800d994:	4b20      	ldr	r3, [pc, #128]	; (800da18 <_tx_timer_initialize+0xdc>)
 800d996:	2200      	movs	r2, #0
 800d998:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800d99a:	4b1c      	ldr	r3, [pc, #112]	; (800da0c <_tx_timer_initialize+0xd0>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a1d      	ldr	r2, [pc, #116]	; (800da14 <_tx_timer_initialize+0xd8>)
 800d9a0:	6812      	ldr	r2, [r2, #0]
 800d9a2:	491d      	ldr	r1, [pc, #116]	; (800da18 <_tx_timer_initialize+0xdc>)
 800d9a4:	6809      	ldr	r1, [r1, #0]
 800d9a6:	481c      	ldr	r0, [pc, #112]	; (800da18 <_tx_timer_initialize+0xdc>)
 800d9a8:	6800      	ldr	r0, [r0, #0]
 800d9aa:	2400      	movs	r4, #0
 800d9ac:	9405      	str	r4, [sp, #20]
 800d9ae:	2400      	movs	r4, #0
 800d9b0:	9404      	str	r4, [sp, #16]
 800d9b2:	9003      	str	r0, [sp, #12]
 800d9b4:	9102      	str	r1, [sp, #8]
 800d9b6:	9201      	str	r2, [sp, #4]
 800d9b8:	9300      	str	r3, [sp, #0]
 800d9ba:	4b18      	ldr	r3, [pc, #96]	; (800da1c <_tx_timer_initialize+0xe0>)
 800d9bc:	4a18      	ldr	r2, [pc, #96]	; (800da20 <_tx_timer_initialize+0xe4>)
 800d9be:	4919      	ldr	r1, [pc, #100]	; (800da24 <_tx_timer_initialize+0xe8>)
 800d9c0:	4819      	ldr	r0, [pc, #100]	; (800da28 <_tx_timer_initialize+0xec>)
 800d9c2:	f7fe ff8b 	bl	800c8dc <_tx_thread_create>
 800d9c6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d1e5      	bne.n	800d99a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800d9ce:	4b17      	ldr	r3, [pc, #92]	; (800da2c <_tx_timer_initialize+0xf0>)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800d9d4:	4b16      	ldr	r3, [pc, #88]	; (800da30 <_tx_timer_initialize+0xf4>)
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800d9da:	bf00      	nop
 800d9dc:	370c      	adds	r7, #12
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd90      	pop	{r4, r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	20001728 	.word	0x20001728
 800d9e8:	20001c88 	.word	0x20001c88
 800d9ec:	2000172c 	.word	0x2000172c
 800d9f0:	200017bc 	.word	0x200017bc
 800d9f4:	200017c8 	.word	0x200017c8
 800d9f8:	20001730 	.word	0x20001730
 800d9fc:	200017b0 	.word	0x200017b0
 800da00:	200017b8 	.word	0x200017b8
 800da04:	200017b4 	.word	0x200017b4
 800da08:	200017ac 	.word	0x200017ac
 800da0c:	2000187c 	.word	0x2000187c
 800da10:	20001888 	.word	0x20001888
 800da14:	20001880 	.word	0x20001880
 800da18:	20001884 	.word	0x20001884
 800da1c:	4154494d 	.word	0x4154494d
 800da20:	0800db69 	.word	0x0800db69
 800da24:	08015740 	.word	0x08015740
 800da28:	200017cc 	.word	0x200017cc
 800da2c:	200017c0 	.word	0x200017c0
 800da30:	200017c4 	.word	0x200017c4

0800da34 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800da34:	b480      	push	{r7}
 800da36:	b089      	sub	sp, #36	; 0x24
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d04a      	beq.n	800dade <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4e:	d046      	beq.n	800dade <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	699b      	ldr	r3, [r3, #24]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d142      	bne.n	800dade <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	2b20      	cmp	r3, #32
 800da5c:	d902      	bls.n	800da64 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800da5e:	231f      	movs	r3, #31
 800da60:	61bb      	str	r3, [r7, #24]
 800da62:	e002      	b.n	800da6a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	3b01      	subs	r3, #1
 800da68:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800da6a:	4b20      	ldr	r3, [pc, #128]	; (800daec <_tx_timer_system_activate+0xb8>)
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	69bb      	ldr	r3, [r7, #24]
 800da70:	009b      	lsls	r3, r3, #2
 800da72:	4413      	add	r3, r2
 800da74:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800da76:	4b1e      	ldr	r3, [pc, #120]	; (800daf0 <_tx_timer_system_activate+0xbc>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	69fa      	ldr	r2, [r7, #28]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d30b      	bcc.n	800da98 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800da80:	4b1b      	ldr	r3, [pc, #108]	; (800daf0 <_tx_timer_system_activate+0xbc>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	69fa      	ldr	r2, [r7, #28]
 800da86:	1ad3      	subs	r3, r2, r3
 800da88:	109b      	asrs	r3, r3, #2
 800da8a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800da8c:	4b19      	ldr	r3, [pc, #100]	; (800daf4 <_tx_timer_system_activate+0xc0>)
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	4413      	add	r3, r2
 800da96:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d109      	bne.n	800dab4 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	601a      	str	r2, [r3, #0]
 800dab2:	e011      	b.n	800dad8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	695b      	ldr	r3, [r3, #20]
 800dabe:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	68fa      	ldr	r2, [r7, #12]
 800dad0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	68ba      	ldr	r2, [r7, #8]
 800dad6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	69fa      	ldr	r2, [r7, #28]
 800dadc:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800dade:	bf00      	nop
 800dae0:	3724      	adds	r7, #36	; 0x24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop
 800daec:	200017b8 	.word	0x200017b8
 800daf0:	200017b4 	.word	0x200017b4
 800daf4:	200017b0 	.word	0x200017b0

0800daf8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b087      	sub	sp, #28
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	699b      	ldr	r3, [r3, #24]
 800db04:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d026      	beq.n	800db5a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	691b      	ldr	r3, [r3, #16]
 800db10:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	429a      	cmp	r2, r3
 800db18:	d108      	bne.n	800db2c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	429a      	cmp	r2, r3
 800db22:	d117      	bne.n	800db54 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	2200      	movs	r2, #0
 800db28:	601a      	str	r2, [r3, #0]
 800db2a:	e013      	b.n	800db54 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	695b      	ldr	r3, [r3, #20]
 800db30:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	68fa      	ldr	r2, [r7, #12]
 800db36:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	693a      	ldr	r2, [r7, #16]
 800db3c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	429a      	cmp	r2, r3
 800db46:	d105      	bne.n	800db54 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	697a      	ldr	r2, [r7, #20]
 800db4c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	693a      	ldr	r2, [r7, #16]
 800db52:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	619a      	str	r2, [r3, #24]
    }
}
 800db5a:	bf00      	nop
 800db5c:	371c      	adds	r7, #28
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr
	...

0800db68 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b098      	sub	sp, #96	; 0x60
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800db70:	2300      	movs	r3, #0
 800db72:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	4a73      	ldr	r2, [pc, #460]	; (800dd44 <_tx_timer_thread_entry+0x1dc>)
 800db78:	4293      	cmp	r3, r2
 800db7a:	f040 80de 	bne.w	800dd3a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db7e:	f3ef 8310 	mrs	r3, PRIMASK
 800db82:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800db84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800db86:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800db88:	b672      	cpsid	i
    return(int_posture);
 800db8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800db8c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800db8e:	4b6e      	ldr	r3, [pc, #440]	; (800dd48 <_tx_timer_thread_entry+0x1e0>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d003      	beq.n	800dba4 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f107 020c 	add.w	r2, r7, #12
 800dba2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800dba4:	4b68      	ldr	r3, [pc, #416]	; (800dd48 <_tx_timer_thread_entry+0x1e0>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800dbac:	4b66      	ldr	r3, [pc, #408]	; (800dd48 <_tx_timer_thread_entry+0x1e0>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	3304      	adds	r3, #4
 800dbb2:	4a65      	ldr	r2, [pc, #404]	; (800dd48 <_tx_timer_thread_entry+0x1e0>)
 800dbb4:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800dbb6:	4b64      	ldr	r3, [pc, #400]	; (800dd48 <_tx_timer_thread_entry+0x1e0>)
 800dbb8:	681a      	ldr	r2, [r3, #0]
 800dbba:	4b64      	ldr	r3, [pc, #400]	; (800dd4c <_tx_timer_thread_entry+0x1e4>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d103      	bne.n	800dbca <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800dbc2:	4b63      	ldr	r3, [pc, #396]	; (800dd50 <_tx_timer_thread_entry+0x1e8>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4a60      	ldr	r2, [pc, #384]	; (800dd48 <_tx_timer_thread_entry+0x1e0>)
 800dbc8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800dbca:	4b62      	ldr	r3, [pc, #392]	; (800dd54 <_tx_timer_thread_entry+0x1ec>)
 800dbcc:	2200      	movs	r2, #0
 800dbce:	601a      	str	r2, [r3, #0]
 800dbd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbd2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd6:	f383 8810 	msr	PRIMASK, r3
}
 800dbda:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dbdc:	f3ef 8310 	mrs	r3, PRIMASK
 800dbe0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800dbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800dbe4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800dbe6:	b672      	cpsid	i
    return(int_posture);
 800dbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800dbea:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800dbec:	e07f      	b.n	800dcee <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	691b      	ldr	r3, [r3, #16]
 800dbf6:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800dbfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dbfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d102      	bne.n	800dc0a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800dc04:	2300      	movs	r3, #0
 800dc06:	60fb      	str	r3, [r7, #12]
 800dc08:	e00e      	b.n	800dc28 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800dc0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc0c:	695b      	ldr	r3, [r3, #20]
 800dc0e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dc10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc14:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800dc16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc1a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800dc1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc1e:	f107 020c 	add.w	r2, r7, #12
 800dc22:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800dc24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc26:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800dc28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2b20      	cmp	r3, #32
 800dc2e:	d911      	bls.n	800dc54 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800dc30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800dc38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc3a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800dc40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc42:	f107 0208 	add.w	r2, r7, #8
 800dc46:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800dc48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc4c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800dc4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc50:	60bb      	str	r3, [r7, #8]
 800dc52:	e01a      	b.n	800dc8a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800dc54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800dc5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc5c:	68db      	ldr	r3, [r3, #12]
 800dc5e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800dc60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc62:	685a      	ldr	r2, [r3, #4]
 800dc64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc66:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800dc68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d009      	beq.n	800dc84 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800dc70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc72:	f107 0208 	add.w	r2, r7, #8
 800dc76:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800dc78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc7c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800dc7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc80:	60bb      	str	r3, [r7, #8]
 800dc82:	e002      	b.n	800dc8a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800dc84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc86:	2200      	movs	r2, #0
 800dc88:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800dc8a:	4a33      	ldr	r2, [pc, #204]	; (800dd58 <_tx_timer_thread_entry+0x1f0>)
 800dc8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc8e:	6013      	str	r3, [r2, #0]
 800dc90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc92:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc96:	f383 8810 	msr	PRIMASK, r3
}
 800dc9a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800dc9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d002      	beq.n	800dca8 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800dca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dca4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dca6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dca8:	f3ef 8310 	mrs	r3, PRIMASK
 800dcac:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800dcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800dcb0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800dcb2:	b672      	cpsid	i
    return(int_posture);
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800dcb6:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800dcb8:	4b27      	ldr	r3, [pc, #156]	; (800dd58 <_tx_timer_thread_entry+0x1f0>)
 800dcba:	2200      	movs	r2, #0
 800dcbc:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d105      	bne.n	800dcd2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800dcc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcc8:	2200      	movs	r2, #0
 800dcca:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800dccc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dcce:	f7ff feb1 	bl	800da34 <_tx_timer_system_activate>
 800dcd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcd4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	f383 8810 	msr	PRIMASK, r3
}
 800dcdc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dcde:	f3ef 8310 	mrs	r3, PRIMASK
 800dce2:	623b      	str	r3, [r7, #32]
    return(posture);
 800dce4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800dce6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dce8:	b672      	cpsid	i
    return(int_posture);
 800dcea:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800dcec:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f47f af7c 	bne.w	800dbee <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800dcf6:	4b17      	ldr	r3, [pc, #92]	; (800dd54 <_tx_timer_thread_entry+0x1ec>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d116      	bne.n	800dd2c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800dcfe:	4b17      	ldr	r3, [pc, #92]	; (800dd5c <_tx_timer_thread_entry+0x1f4>)
 800dd00:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800dd02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd04:	2203      	movs	r2, #3
 800dd06:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800dd08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800dd0e:	4b14      	ldr	r3, [pc, #80]	; (800dd60 <_tx_timer_thread_entry+0x1f8>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	3301      	adds	r3, #1
 800dd14:	4a12      	ldr	r2, [pc, #72]	; (800dd60 <_tx_timer_thread_entry+0x1f8>)
 800dd16:	6013      	str	r3, [r2, #0]
 800dd18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd1a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	f383 8810 	msr	PRIMASK, r3
}
 800dd22:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800dd24:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dd26:	f7ff fadb 	bl	800d2e0 <_tx_thread_system_suspend>
 800dd2a:	e728      	b.n	800db7e <_tx_timer_thread_entry+0x16>
 800dd2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd2e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	f383 8810 	msr	PRIMASK, r3
}
 800dd36:	bf00      	nop
            TX_DISABLE
 800dd38:	e721      	b.n	800db7e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800dd3a:	bf00      	nop
 800dd3c:	3760      	adds	r7, #96	; 0x60
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	4154494d 	.word	0x4154494d
 800dd48:	200017b8 	.word	0x200017b8
 800dd4c:	200017b4 	.word	0x200017b4
 800dd50:	200017b0 	.word	0x200017b0
 800dd54:	200017bc 	.word	0x200017bc
 800dd58:	200017c8 	.word	0x200017c8
 800dd5c:	200017cc 	.word	0x200017cc
 800dd60:	2000171c 	.word	0x2000171c

0800dd64 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 800dd64:	b480      	push	{r7}
 800dd66:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 800dd68:	4b0b      	ldr	r3, [pc, #44]	; (800dd98 <_tx_trace_initialize+0x34>)
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 800dd6e:	4b0b      	ldr	r3, [pc, #44]	; (800dd9c <_tx_trace_initialize+0x38>)
 800dd70:	2200      	movs	r2, #0
 800dd72:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 800dd74:	4b0a      	ldr	r3, [pc, #40]	; (800dda0 <_tx_trace_initialize+0x3c>)
 800dd76:	2200      	movs	r2, #0
 800dd78:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 800dd7a:	4b0a      	ldr	r3, [pc, #40]	; (800dda4 <_tx_trace_initialize+0x40>)
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 800dd80:	4b09      	ldr	r3, [pc, #36]	; (800dda8 <_tx_trace_initialize+0x44>)
 800dd82:	2200      	movs	r2, #0
 800dd84:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 800dd86:	4b09      	ldr	r3, [pc, #36]	; (800ddac <_tx_trace_initialize+0x48>)
 800dd88:	2200      	movs	r2, #0
 800dd8a:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 800dd8c:	bf00      	nop
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop
 800dd98:	20001c8c 	.word	0x20001c8c
 800dd9c:	20001c90 	.word	0x20001c90
 800dda0:	20001c94 	.word	0x20001c94
 800dda4:	20001c98 	.word	0x20001c98
 800dda8:	20001c9c 	.word	0x20001c9c
 800ddac:	20001ca0 	.word	0x20001ca0

0800ddb0 <_tx_trace_object_register>:
/*                                            check for null name,        */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b08d      	sub	sp, #52	; 0x34
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60b9      	str	r1, [r7, #8]
 800ddb8:	607a      	str	r2, [r7, #4]
 800ddba:	603b      	str	r3, [r7, #0]
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 800ddc0:	4b6f      	ldr	r3, [pc, #444]	; (800df80 <_tx_trace_object_register+0x1d0>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f000 80d5 	beq.w	800df74 <_tx_trace_object_register+0x1c4>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 800ddca:	4b6e      	ldr	r3, [pc, #440]	; (800df84 <_tx_trace_object_register+0x1d4>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 800ddd0:	4b6d      	ldr	r3, [pc, #436]	; (800df88 <_tx_trace_object_register+0x1d8>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f000 80cd 	beq.w	800df74 <_tx_trace_object_register+0x1c4>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 800ddda:	6a3b      	ldr	r3, [r7, #32]
 800dddc:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 800ddde:	2300      	movs	r3, #0
 800dde0:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 800dde2:	4b6a      	ldr	r3, [pc, #424]	; (800df8c <_tx_trace_object_register+0x1dc>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800dde8:	4b65      	ldr	r3, [pc, #404]	; (800df80 <_tx_trace_object_register+0x1d0>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 800ddee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddf0:	4613      	mov	r3, r2
 800ddf2:	005b      	lsls	r3, r3, #1
 800ddf4:	4413      	add	r3, r2
 800ddf6:	011b      	lsls	r3, r3, #4
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d103      	bne.n	800de14 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800de0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0e:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800de10:	2301      	movs	r3, #1
 800de12:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	685a      	ldr	r2, [r3, #4]
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d103      	bne.n	800de26 <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800de1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de20:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800de22:	2301      	movs	r3, #1
 800de24:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 800de26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d02d      	beq.n	800de88 <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 800de2c:	69bb      	ldr	r3, [r7, #24]
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	2b01      	cmp	r3, #1
 800de32:	d11a      	bne.n	800de6a <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 800de34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de36:	6a3b      	ldr	r3, [r7, #32]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d102      	bne.n	800de42 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 800de3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800de40:	e013      	b.n	800de6a <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800de42:	4b4f      	ldr	r3, [pc, #316]	; (800df80 <_tx_trace_object_register+0x1d0>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800de48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de4a:	4613      	mov	r3, r2
 800de4c:	005b      	lsls	r3, r3, #1
 800de4e:	4413      	add	r3, r2
 800de50:	011b      	lsls	r3, r3, #4
 800de52:	461a      	mov	r2, r3
 800de54:	69fb      	ldr	r3, [r7, #28]
 800de56:	4413      	add	r3, r2
 800de58:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	785b      	ldrb	r3, [r3, #1]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d001      	beq.n	800de6a <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 800de66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de68:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 800de6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6c:	3301      	adds	r3, #1
 800de6e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 800de70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de72:	6a3b      	ldr	r3, [r7, #32]
 800de74:	429a      	cmp	r2, r3
 800de76:	d301      	bcc.n	800de7c <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 800de78:	2300      	movs	r3, #0
 800de7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 800de7c:	4b43      	ldr	r3, [pc, #268]	; (800df8c <_tx_trace_object_register+0x1dc>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de82:	429a      	cmp	r2, r3
 800de84:	d1b0      	bne.n	800dde8 <_tx_trace_object_register+0x38>
 800de86:	e000      	b.n	800de8a <_tx_trace_object_register+0xda>
                    break;
 800de88:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 800de8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de8c:	6a3b      	ldr	r3, [r7, #32]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d270      	bcs.n	800df74 <_tx_trace_object_register+0x1c4>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 800de92:	4b3d      	ldr	r3, [pc, #244]	; (800df88 <_tx_trace_object_register+0x1d8>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	3b01      	subs	r3, #1
 800de98:	4a3b      	ldr	r2, [pc, #236]	; (800df88 <_tx_trace_object_register+0x1d8>)
 800de9a:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 800de9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9e:	3301      	adds	r3, #1
 800dea0:	6a3a      	ldr	r2, [r7, #32]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d904      	bls.n	800deb0 <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 800dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea8:	3301      	adds	r3, #1
 800deaa:	4a38      	ldr	r2, [pc, #224]	; (800df8c <_tx_trace_object_register+0x1dc>)
 800deac:	6013      	str	r3, [r2, #0]
 800deae:	e002      	b.n	800deb6 <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 800deb0:	4b36      	ldr	r3, [pc, #216]	; (800df8c <_tx_trace_object_register+0x1dc>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800deb6:	4b32      	ldr	r3, [pc, #200]	; (800df80 <_tx_trace_object_register+0x1d0>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800debc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800debe:	4613      	mov	r3, r2
 800dec0:	005b      	lsls	r3, r3, #1
 800dec2:	4413      	add	r3, r2
 800dec4:	011b      	lsls	r3, r3, #4
 800dec6:	461a      	mov	r2, r3
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	4413      	add	r3, r2
 800decc:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	2200      	movs	r2, #0
 800ded6:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	7bfa      	ldrb	r2, [r7, #15]
 800dedc:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 800dede:	68ba      	ldr	r2, [r7, #8]
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	683a      	ldr	r2, [r7, #0]
 800dee8:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800deee:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800def0:	2300      	movs	r3, #0
 800def2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800def4:	e017      	b.n	800df26 <_tx_trace_object_register+0x176>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 800defa:	69fa      	ldr	r2, [r7, #28]
 800defc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defe:	4413      	add	r3, r2
 800df00:	61fb      	str	r3, [r7, #28]

                    /* Determine if object_name (work_ptr) is null.  */
                    if (work_ptr == TX_NULL)
 800df02:	69fb      	ldr	r3, [r7, #28]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d012      	beq.n	800df2e <_tx_trace_object_register+0x17e>
                    {
                        break;
                    }

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	7819      	ldrb	r1, [r3, #0]
 800df0c:	69ba      	ldr	r2, [r7, #24]
 800df0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df10:	4413      	add	r3, r2
 800df12:	3310      	adds	r3, #16
 800df14:	460a      	mov	r2, r1
 800df16:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d008      	beq.n	800df32 <_tx_trace_object_register+0x182>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800df20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df22:	3301      	adds	r3, #1
 800df24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df28:	2b1e      	cmp	r3, #30
 800df2a:	d9e4      	bls.n	800def6 <_tx_trace_object_register+0x146>
 800df2c:	e002      	b.n	800df34 <_tx_trace_object_register+0x184>
                        break;
 800df2e:	bf00      	nop
 800df30:	e000      	b.n	800df34 <_tx_trace_object_register+0x184>
                    {
                        break;
 800df32:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 800df34:	69ba      	ldr	r2, [r7, #24]
 800df36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df38:	4413      	add	r3, r2
 800df3a:	3310      	adds	r3, #16
 800df3c:	2200      	movs	r2, #0
 800df3e:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 800df40:	7bfb      	ldrb	r3, [r7, #15]
 800df42:	2b01      	cmp	r3, #1
 800df44:	d110      	bne.n	800df68 <_tx_trace_object_register+0x1b8>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df4e:	0a1b      	lsrs	r3, r3, #8
 800df50:	b2db      	uxtb	r3, r3
 800df52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df56:	b2da      	uxtb	r2, r3
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df60:	b2da      	uxtb	r2, r3
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 800df66:	e005      	b.n	800df74 <_tx_trace_object_register+0x1c4>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	2200      	movs	r2, #0
 800df6c:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	2200      	movs	r2, #0
 800df72:	70da      	strb	r2, [r3, #3]
}
 800df74:	bf00      	nop
 800df76:	3734      	adds	r7, #52	; 0x34
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr
 800df80:	20001c90 	.word	0x20001c90
 800df84:	20001cac 	.word	0x20001cac
 800df88:	20001cb0 	.word	0x20001cb0
 800df8c:	20001cb4 	.word	0x20001cb4

0800df90 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b092      	sub	sp, #72	; 0x48
 800df94:	af00      	add	r7, sp, #0
 800df96:	60f8      	str	r0, [r7, #12]
 800df98:	60b9      	str	r1, [r7, #8]
 800df9a:	607a      	str	r2, [r7, #4]
 800df9c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d102      	bne.n	800dfae <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800dfa8:	2302      	movs	r3, #2
 800dfaa:	647b      	str	r3, [r7, #68]	; 0x44
 800dfac:	e075      	b.n	800e09a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800dfae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfb0:	2b34      	cmp	r3, #52	; 0x34
 800dfb2:	d002      	beq.n	800dfba <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800dfb4:	2302      	movs	r3, #2
 800dfb6:	647b      	str	r3, [r7, #68]	; 0x44
 800dfb8:	e06f      	b.n	800e09a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dfba:	f3ef 8310 	mrs	r3, PRIMASK
 800dfbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800dfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800dfc2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800dfc4:	b672      	cpsid	i
    return(int_posture);
 800dfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800dfc8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800dfca:	4b3b      	ldr	r3, [pc, #236]	; (800e0b8 <_txe_byte_pool_create+0x128>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	3301      	adds	r3, #1
 800dfd0:	4a39      	ldr	r2, [pc, #228]	; (800e0b8 <_txe_byte_pool_create+0x128>)
 800dfd2:	6013      	str	r3, [r2, #0]
 800dfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfda:	f383 8810 	msr	PRIMASK, r3
}
 800dfde:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800dfe0:	4b36      	ldr	r3, [pc, #216]	; (800e0bc <_txe_byte_pool_create+0x12c>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	643b      	str	r3, [r7, #64]	; 0x40
 800dfea:	e009      	b.n	800e000 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800dfec:	68fa      	ldr	r2, [r7, #12]
 800dfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d00b      	beq.n	800e00c <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800dff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800dffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dffc:	3301      	adds	r3, #1
 800dffe:	643b      	str	r3, [r7, #64]	; 0x40
 800e000:	4b2f      	ldr	r3, [pc, #188]	; (800e0c0 <_txe_byte_pool_create+0x130>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e006:	429a      	cmp	r2, r3
 800e008:	d3f0      	bcc.n	800dfec <_txe_byte_pool_create+0x5c>
 800e00a:	e000      	b.n	800e00e <_txe_byte_pool_create+0x7e>
                break;
 800e00c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e00e:	f3ef 8310 	mrs	r3, PRIMASK
 800e012:	623b      	str	r3, [r7, #32]
    return(posture);
 800e014:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e016:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e018:	b672      	cpsid	i
    return(int_posture);
 800e01a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e01c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e01e:	4b26      	ldr	r3, [pc, #152]	; (800e0b8 <_txe_byte_pool_create+0x128>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	3b01      	subs	r3, #1
 800e024:	4a24      	ldr	r2, [pc, #144]	; (800e0b8 <_txe_byte_pool_create+0x128>)
 800e026:	6013      	str	r3, [r2, #0]
 800e028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02e:	f383 8810 	msr	PRIMASK, r3
}
 800e032:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e034:	f7fe ff60 	bl	800cef8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d102      	bne.n	800e046 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800e040:	2302      	movs	r3, #2
 800e042:	647b      	str	r3, [r7, #68]	; 0x44
 800e044:	e029      	b.n	800e09a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d102      	bne.n	800e052 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800e04c:	2303      	movs	r3, #3
 800e04e:	647b      	str	r3, [r7, #68]	; 0x44
 800e050:	e023      	b.n	800e09a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	2b63      	cmp	r3, #99	; 0x63
 800e056:	d802      	bhi.n	800e05e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800e058:	2305      	movs	r3, #5
 800e05a:	647b      	str	r3, [r7, #68]	; 0x44
 800e05c:	e01d      	b.n	800e09a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e05e:	4b19      	ldr	r3, [pc, #100]	; (800e0c4 <_txe_byte_pool_create+0x134>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e066:	4a18      	ldr	r2, [pc, #96]	; (800e0c8 <_txe_byte_pool_create+0x138>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d101      	bne.n	800e070 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e06c:	2313      	movs	r3, #19
 800e06e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e070:	f3ef 8305 	mrs	r3, IPSR
 800e074:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e076:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e078:	4b14      	ldr	r3, [pc, #80]	; (800e0cc <_txe_byte_pool_create+0x13c>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4313      	orrs	r3, r2
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d00b      	beq.n	800e09a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e082:	f3ef 8305 	mrs	r3, IPSR
 800e086:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e088:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e08a:	4b10      	ldr	r3, [pc, #64]	; (800e0cc <_txe_byte_pool_create+0x13c>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4313      	orrs	r3, r2
 800e090:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e094:	d201      	bcs.n	800e09a <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e096:	2313      	movs	r3, #19
 800e098:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e09a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d106      	bne.n	800e0ae <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	68b9      	ldr	r1, [r7, #8]
 800e0a6:	68f8      	ldr	r0, [r7, #12]
 800e0a8:	f7fd f88a 	bl	800b1c0 <_tx_byte_pool_create>
 800e0ac:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e0ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3748      	adds	r7, #72	; 0x48
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	2000171c 	.word	0x2000171c
 800e0bc:	20001674 	.word	0x20001674
 800e0c0:	20001678 	.word	0x20001678
 800e0c4:	20001684 	.word	0x20001684
 800e0c8:	200017cc 	.word	0x200017cc
 800e0cc:	2000000c 	.word	0x2000000c

0800e0d0 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b094      	sub	sp, #80	; 0x50
 800e0d4:	af02      	add	r7, sp, #8
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	60b9      	str	r1, [r7, #8]
 800e0da:	607a      	str	r2, [r7, #4]
 800e0dc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d102      	bne.n	800e0ee <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e0e8:	2309      	movs	r3, #9
 800e0ea:	647b      	str	r3, [r7, #68]	; 0x44
 800e0ec:	e083      	b.n	800e1f6 <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800e0ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0f0:	2b38      	cmp	r3, #56	; 0x38
 800e0f2:	d002      	beq.n	800e0fa <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e0f4:	2309      	movs	r3, #9
 800e0f6:	647b      	str	r3, [r7, #68]	; 0x44
 800e0f8:	e07d      	b.n	800e1f6 <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e0fa:	f3ef 8310 	mrs	r3, PRIMASK
 800e0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e102:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e104:	b672      	cpsid	i
    return(int_posture);
 800e106:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e108:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e10a:	4b43      	ldr	r3, [pc, #268]	; (800e218 <_txe_queue_create+0x148>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	3301      	adds	r3, #1
 800e110:	4a41      	ldr	r2, [pc, #260]	; (800e218 <_txe_queue_create+0x148>)
 800e112:	6013      	str	r3, [r2, #0]
 800e114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e116:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11a:	f383 8810 	msr	PRIMASK, r3
}
 800e11e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800e120:	4b3e      	ldr	r3, [pc, #248]	; (800e21c <_txe_queue_create+0x14c>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e126:	2300      	movs	r3, #0
 800e128:	643b      	str	r3, [r7, #64]	; 0x40
 800e12a:	e009      	b.n	800e140 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e130:	429a      	cmp	r2, r3
 800e132:	d00b      	beq.n	800e14c <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800e134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e138:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e13a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e13c:	3301      	adds	r3, #1
 800e13e:	643b      	str	r3, [r7, #64]	; 0x40
 800e140:	4b37      	ldr	r3, [pc, #220]	; (800e220 <_txe_queue_create+0x150>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e146:	429a      	cmp	r2, r3
 800e148:	d3f0      	bcc.n	800e12c <_txe_queue_create+0x5c>
 800e14a:	e000      	b.n	800e14e <_txe_queue_create+0x7e>
                break;
 800e14c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e14e:	f3ef 8310 	mrs	r3, PRIMASK
 800e152:	623b      	str	r3, [r7, #32]
    return(posture);
 800e154:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e156:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e158:	b672      	cpsid	i
    return(int_posture);
 800e15a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e15c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e15e:	4b2e      	ldr	r3, [pc, #184]	; (800e218 <_txe_queue_create+0x148>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	3b01      	subs	r3, #1
 800e164:	4a2c      	ldr	r2, [pc, #176]	; (800e218 <_txe_queue_create+0x148>)
 800e166:	6013      	str	r3, [r2, #0]
 800e168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16e:	f383 8810 	msr	PRIMASK, r3
}
 800e172:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e174:	f7fe fec0 	bl	800cef8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d102      	bne.n	800e186 <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800e180:	2309      	movs	r3, #9
 800e182:	647b      	str	r3, [r7, #68]	; 0x44
 800e184:	e037      	b.n	800e1f6 <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d102      	bne.n	800e192 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800e18c:	2303      	movs	r3, #3
 800e18e:	647b      	str	r3, [r7, #68]	; 0x44
 800e190:	e031      	b.n	800e1f6 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d102      	bne.n	800e19e <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e198:	2305      	movs	r3, #5
 800e19a:	647b      	str	r3, [r7, #68]	; 0x44
 800e19c:	e02b      	b.n	800e1f6 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2b10      	cmp	r3, #16
 800e1a2:	d902      	bls.n	800e1aa <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e1a4:	2305      	movs	r3, #5
 800e1a6:	647b      	str	r3, [r7, #68]	; 0x44
 800e1a8:	e025      	b.n	800e1f6 <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800e1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1ac:	089b      	lsrs	r3, r3, #2
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d902      	bls.n	800e1ba <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800e1b4:	2305      	movs	r3, #5
 800e1b6:	647b      	str	r3, [r7, #68]	; 0x44
 800e1b8:	e01d      	b.n	800e1f6 <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e1ba:	4b1a      	ldr	r3, [pc, #104]	; (800e224 <_txe_queue_create+0x154>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c2:	4a19      	ldr	r2, [pc, #100]	; (800e228 <_txe_queue_create+0x158>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d101      	bne.n	800e1cc <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e1c8:	2313      	movs	r3, #19
 800e1ca:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e1cc:	f3ef 8305 	mrs	r3, IPSR
 800e1d0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e1d2:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e1d4:	4b15      	ldr	r3, [pc, #84]	; (800e22c <_txe_queue_create+0x15c>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00b      	beq.n	800e1f6 <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e1de:	f3ef 8305 	mrs	r3, IPSR
 800e1e2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e1e4:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e1e6:	4b11      	ldr	r3, [pc, #68]	; (800e22c <_txe_queue_create+0x15c>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e1f0:	d201      	bcs.n	800e1f6 <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e1f2:	2313      	movs	r3, #19
 800e1f4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e1f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d108      	bne.n	800e20e <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800e1fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1fe:	9300      	str	r3, [sp, #0]
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	68b9      	ldr	r1, [r7, #8]
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f7fd f9f2 	bl	800b5f0 <_tx_queue_create>
 800e20c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e20e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e210:	4618      	mov	r0, r3
 800e212:	3748      	adds	r7, #72	; 0x48
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	2000171c 	.word	0x2000171c
 800e21c:	20001654 	.word	0x20001654
 800e220:	20001658 	.word	0x20001658
 800e224:	20001684 	.word	0x20001684
 800e228:	200017cc 	.word	0x200017cc
 800e22c:	2000000c 	.word	0x2000000c

0800e230 <_txe_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d102      	bne.n	800e244 <_txe_queue_flush+0x14>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e23e:	2309      	movs	r3, #9
 800e240:	60fb      	str	r3, [r7, #12]
 800e242:	e00b      	b.n	800e25c <_txe_queue_flush+0x2c>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a07      	ldr	r2, [pc, #28]	; (800e268 <_txe_queue_flush+0x38>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d002      	beq.n	800e254 <_txe_queue_flush+0x24>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e24e:	2309      	movs	r3, #9
 800e250:	60fb      	str	r3, [r7, #12]
 800e252:	e003      	b.n	800e25c <_txe_queue_flush+0x2c>
    }
    else
    {

        /* Call actual queue flush function.  */
        status =  _tx_queue_flush(queue_ptr);
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f7fd facb 	bl	800b7f0 <_tx_queue_flush>
 800e25a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e25c:	68fb      	ldr	r3, [r7, #12]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	51554555 	.word	0x51554555

0800e26c <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b088      	sub	sp, #32
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e278:	2300      	movs	r3, #0
 800e27a:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d102      	bne.n	800e288 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e282:	2309      	movs	r3, #9
 800e284:	61fb      	str	r3, [r7, #28]
 800e286:	e025      	b.n	800e2d4 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a18      	ldr	r2, [pc, #96]	; (800e2f0 <_txe_queue_receive+0x84>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d002      	beq.n	800e298 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e292:	2309      	movs	r3, #9
 800e294:	61fb      	str	r3, [r7, #28]
 800e296:	e01d      	b.n	800e2d4 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d102      	bne.n	800e2a4 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e29e:	2303      	movs	r3, #3
 800e2a0:	61fb      	str	r3, [r7, #28]
 800e2a2:	e017      	b.n	800e2d4 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d014      	beq.n	800e2d4 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e2aa:	f3ef 8305 	mrs	r3, IPSR
 800e2ae:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e2b0:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e2b2:	4b10      	ldr	r3, [pc, #64]	; (800e2f4 <_txe_queue_receive+0x88>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d002      	beq.n	800e2c2 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e2bc:	2304      	movs	r3, #4
 800e2be:	61fb      	str	r3, [r7, #28]
 800e2c0:	e008      	b.n	800e2d4 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e2c2:	4b0d      	ldr	r3, [pc, #52]	; (800e2f8 <_txe_queue_receive+0x8c>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	4a0c      	ldr	r2, [pc, #48]	; (800e2fc <_txe_queue_receive+0x90>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d101      	bne.n	800e2d4 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e2d0:	2304      	movs	r3, #4
 800e2d2:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d105      	bne.n	800e2e6 <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800e2da:	687a      	ldr	r2, [r7, #4]
 800e2dc:	68b9      	ldr	r1, [r7, #8]
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f7fd fb98 	bl	800ba14 <_tx_queue_receive>
 800e2e4:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e2e6:	69fb      	ldr	r3, [r7, #28]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3720      	adds	r7, #32
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	51554555 	.word	0x51554555
 800e2f4:	2000000c 	.word	0x2000000c
 800e2f8:	20001684 	.word	0x20001684
 800e2fc:	200017cc 	.word	0x200017cc

0800e300 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b088      	sub	sp, #32
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e30c:	2300      	movs	r3, #0
 800e30e:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d102      	bne.n	800e31c <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e316:	2309      	movs	r3, #9
 800e318:	61fb      	str	r3, [r7, #28]
 800e31a:	e025      	b.n	800e368 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4a18      	ldr	r2, [pc, #96]	; (800e384 <_txe_queue_send+0x84>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d002      	beq.n	800e32c <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e326:	2309      	movs	r3, #9
 800e328:	61fb      	str	r3, [r7, #28]
 800e32a:	e01d      	b.n	800e368 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d102      	bne.n	800e338 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e332:	2303      	movs	r3, #3
 800e334:	61fb      	str	r3, [r7, #28]
 800e336:	e017      	b.n	800e368 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d014      	beq.n	800e368 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e33e:	f3ef 8305 	mrs	r3, IPSR
 800e342:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e344:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e346:	4b10      	ldr	r3, [pc, #64]	; (800e388 <_txe_queue_send+0x88>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4313      	orrs	r3, r2
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d002      	beq.n	800e356 <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e350:	2304      	movs	r3, #4
 800e352:	61fb      	str	r3, [r7, #28]
 800e354:	e008      	b.n	800e368 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e356:	4b0d      	ldr	r3, [pc, #52]	; (800e38c <_txe_queue_send+0x8c>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e35c:	69bb      	ldr	r3, [r7, #24]
 800e35e:	4a0c      	ldr	r2, [pc, #48]	; (800e390 <_txe_queue_send+0x90>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d101      	bne.n	800e368 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e364:	2304      	movs	r3, #4
 800e366:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e368:	69fb      	ldr	r3, [r7, #28]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d105      	bne.n	800e37a <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	68b9      	ldr	r1, [r7, #8]
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f7fd fd9c 	bl	800beb0 <_tx_queue_send>
 800e378:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e37a:	69fb      	ldr	r3, [r7, #28]
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3720      	adds	r7, #32
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	51554555 	.word	0x51554555
 800e388:	2000000c 	.word	0x2000000c
 800e38c:	20001684 	.word	0x20001684
 800e390:	200017cc 	.word	0x200017cc

0800e394 <_txe_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d102      	bne.n	800e3aa <_txe_semaphore_ceiling_put+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e3a4:	230c      	movs	r3, #12
 800e3a6:	60fb      	str	r3, [r7, #12]
 800e3a8:	e012      	b.n	800e3d0 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4a0b      	ldr	r2, [pc, #44]	; (800e3dc <_txe_semaphore_ceiling_put+0x48>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d002      	beq.n	800e3ba <_txe_semaphore_ceiling_put+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e3b4:	230c      	movs	r3, #12
 800e3b6:	60fb      	str	r3, [r7, #12]
 800e3b8:	e00a      	b.n	800e3d0 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Determine if the ceiling is valid - must be greater than 1.  */
    else if (ceiling == ((ULONG) 0))
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d102      	bne.n	800e3c6 <_txe_semaphore_ceiling_put+0x32>
    {

        /* Invalid ceiling, return error.  */
        status =  TX_INVALID_CEILING;
 800e3c0:	2322      	movs	r3, #34	; 0x22
 800e3c2:	60fb      	str	r3, [r7, #12]
 800e3c4:	e004      	b.n	800e3d0 <_txe_semaphore_ceiling_put+0x3c>
    }
    else
    {

        /* Call actual semaphore ceiling put function.  */
        status =  _tx_semaphore_ceiling_put(semaphore_ptr, ceiling);
 800e3c6:	6839      	ldr	r1, [r7, #0]
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f7fd ff23 	bl	800c214 <_tx_semaphore_ceiling_put>
 800e3ce:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	53454d41 	.word	0x53454d41

0800e3e0 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b092      	sub	sp, #72	; 0x48
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	60f8      	str	r0, [r7, #12]
 800e3e8:	60b9      	str	r1, [r7, #8]
 800e3ea:	607a      	str	r2, [r7, #4]
 800e3ec:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d102      	bne.n	800e3fe <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e3f8:	230c      	movs	r3, #12
 800e3fa:	647b      	str	r3, [r7, #68]	; 0x44
 800e3fc:	e054      	b.n	800e4a8 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	2b1c      	cmp	r3, #28
 800e402:	d002      	beq.n	800e40a <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e404:	230c      	movs	r3, #12
 800e406:	647b      	str	r3, [r7, #68]	; 0x44
 800e408:	e04e      	b.n	800e4a8 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e40a:	f3ef 8310 	mrs	r3, PRIMASK
 800e40e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e412:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e414:	b672      	cpsid	i
    return(int_posture);
 800e416:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e418:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e41a:	4b36      	ldr	r3, [pc, #216]	; (800e4f4 <_txe_semaphore_create+0x114>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3301      	adds	r3, #1
 800e420:	4a34      	ldr	r2, [pc, #208]	; (800e4f4 <_txe_semaphore_create+0x114>)
 800e422:	6013      	str	r3, [r2, #0]
 800e424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e426:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42a:	f383 8810 	msr	PRIMASK, r3
}
 800e42e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800e430:	4b31      	ldr	r3, [pc, #196]	; (800e4f8 <_txe_semaphore_create+0x118>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e436:	2300      	movs	r3, #0
 800e438:	643b      	str	r3, [r7, #64]	; 0x40
 800e43a:	e009      	b.n	800e450 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e440:	429a      	cmp	r2, r3
 800e442:	d00b      	beq.n	800e45c <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800e444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e446:	695b      	ldr	r3, [r3, #20]
 800e448:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e44a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e44c:	3301      	adds	r3, #1
 800e44e:	643b      	str	r3, [r7, #64]	; 0x40
 800e450:	4b2a      	ldr	r3, [pc, #168]	; (800e4fc <_txe_semaphore_create+0x11c>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e456:	429a      	cmp	r2, r3
 800e458:	d3f0      	bcc.n	800e43c <_txe_semaphore_create+0x5c>
 800e45a:	e000      	b.n	800e45e <_txe_semaphore_create+0x7e>
                break;
 800e45c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e45e:	f3ef 8310 	mrs	r3, PRIMASK
 800e462:	623b      	str	r3, [r7, #32]
    return(posture);
 800e464:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e466:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e468:	b672      	cpsid	i
    return(int_posture);
 800e46a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e46c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e46e:	4b21      	ldr	r3, [pc, #132]	; (800e4f4 <_txe_semaphore_create+0x114>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	3b01      	subs	r3, #1
 800e474:	4a1f      	ldr	r2, [pc, #124]	; (800e4f4 <_txe_semaphore_create+0x114>)
 800e476:	6013      	str	r3, [r2, #0]
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47e:	f383 8810 	msr	PRIMASK, r3
}
 800e482:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e484:	f7fe fd38 	bl	800cef8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d102      	bne.n	800e496 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800e490:	230c      	movs	r3, #12
 800e492:	647b      	str	r3, [r7, #68]	; 0x44
 800e494:	e008      	b.n	800e4a8 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e496:	4b1a      	ldr	r3, [pc, #104]	; (800e500 <_txe_semaphore_create+0x120>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e49e:	4a19      	ldr	r2, [pc, #100]	; (800e504 <_txe_semaphore_create+0x124>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d101      	bne.n	800e4a8 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e4a4:	2313      	movs	r3, #19
 800e4a6:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e4a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d114      	bne.n	800e4d8 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e4ae:	f3ef 8305 	mrs	r3, IPSR
 800e4b2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e4b4:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e4b6:	4b14      	ldr	r3, [pc, #80]	; (800e508 <_txe_semaphore_create+0x128>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00b      	beq.n	800e4d8 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e4c0:	f3ef 8305 	mrs	r3, IPSR
 800e4c4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e4c6:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e4c8:	4b0f      	ldr	r3, [pc, #60]	; (800e508 <_txe_semaphore_create+0x128>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e4d2:	d201      	bcs.n	800e4d8 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e4d4:	2313      	movs	r3, #19
 800e4d6:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e4d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d105      	bne.n	800e4ea <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	68b9      	ldr	r1, [r7, #8]
 800e4e2:	68f8      	ldr	r0, [r7, #12]
 800e4e4:	f7fe f804 	bl	800c4f0 <_tx_semaphore_create>
 800e4e8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e4ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3748      	adds	r7, #72	; 0x48
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	2000171c 	.word	0x2000171c
 800e4f8:	2000164c 	.word	0x2000164c
 800e4fc:	20001650 	.word	0x20001650
 800e500:	20001684 	.word	0x20001684
 800e504:	200017cc 	.word	0x200017cc
 800e508:	2000000c 	.word	0x2000000c

0800e50c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b086      	sub	sp, #24
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e516:	2300      	movs	r3, #0
 800e518:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d102      	bne.n	800e526 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e520:	230c      	movs	r3, #12
 800e522:	617b      	str	r3, [r7, #20]
 800e524:	e01f      	b.n	800e566 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a15      	ldr	r2, [pc, #84]	; (800e580 <_txe_semaphore_get+0x74>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d002      	beq.n	800e536 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e530:	230c      	movs	r3, #12
 800e532:	617b      	str	r3, [r7, #20]
 800e534:	e017      	b.n	800e566 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d014      	beq.n	800e566 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e53c:	f3ef 8305 	mrs	r3, IPSR
 800e540:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e542:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e544:	4b0f      	ldr	r3, [pc, #60]	; (800e584 <_txe_semaphore_get+0x78>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4313      	orrs	r3, r2
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d002      	beq.n	800e554 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e54e:	2304      	movs	r3, #4
 800e550:	617b      	str	r3, [r7, #20]
 800e552:	e008      	b.n	800e566 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e554:	4b0c      	ldr	r3, [pc, #48]	; (800e588 <_txe_semaphore_get+0x7c>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	4a0b      	ldr	r2, [pc, #44]	; (800e58c <_txe_semaphore_get+0x80>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d101      	bne.n	800e566 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e562:	2304      	movs	r3, #4
 800e564:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d104      	bne.n	800e576 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800e56c:	6839      	ldr	r1, [r7, #0]
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7fe f89e 	bl	800c6b0 <_tx_semaphore_get>
 800e574:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800e576:	697b      	ldr	r3, [r7, #20]
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3718      	adds	r7, #24
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	53454d41 	.word	0x53454d41
 800e584:	2000000c 	.word	0x2000000c
 800e588:	20001684 	.word	0x20001684
 800e58c:	200017cc 	.word	0x200017cc

0800e590 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b09a      	sub	sp, #104	; 0x68
 800e594:	af06      	add	r7, sp, #24
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	60b9      	str	r1, [r7, #8]
 800e59a:	607a      	str	r2, [r7, #4]
 800e59c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d102      	bne.n	800e5ae <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e5a8:	230e      	movs	r3, #14
 800e5aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5ac:	e0bb      	b.n	800e726 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800e5ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e5b0:	2bb0      	cmp	r3, #176	; 0xb0
 800e5b2:	d002      	beq.n	800e5ba <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e5b4:	230e      	movs	r3, #14
 800e5b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5b8:	e0b5      	b.n	800e726 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e5ba:	f3ef 8310 	mrs	r3, PRIMASK
 800e5be:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e5c2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e5c4:	b672      	cpsid	i
    return(int_posture);
 800e5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e5c8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e5ca:	4b64      	ldr	r3, [pc, #400]	; (800e75c <_txe_thread_create+0x1cc>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	4a62      	ldr	r2, [pc, #392]	; (800e75c <_txe_thread_create+0x1cc>)
 800e5d2:	6013      	str	r3, [r2, #0]
 800e5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5da:	f383 8810 	msr	PRIMASK, r3
}
 800e5de:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800e5e4:	4b5e      	ldr	r3, [pc, #376]	; (800e760 <_txe_thread_create+0x1d0>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800e5ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5ec:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e5ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5f0:	3b01      	subs	r3, #1
 800e5f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5f4:	4413      	add	r3, r2
 800e5f6:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800e5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fa:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	647b      	str	r3, [r7, #68]	; 0x44
 800e600:	e02b      	b.n	800e65a <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e606:	429a      	cmp	r2, r3
 800e608:	d101      	bne.n	800e60e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800e60a:	2301      	movs	r3, #1
 800e60c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800e60e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e610:	2b01      	cmp	r3, #1
 800e612:	d028      	beq.n	800e666 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800e614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d308      	bcc.n	800e630 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800e61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e620:	691b      	ldr	r3, [r3, #16]
 800e622:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e624:	429a      	cmp	r2, r3
 800e626:	d203      	bcs.n	800e630 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e628:	2300      	movs	r3, #0
 800e62a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e62c:	2301      	movs	r3, #1
 800e62e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e636:	429a      	cmp	r2, r3
 800e638:	d308      	bcc.n	800e64c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800e63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e63c:	691b      	ldr	r3, [r3, #16]
 800e63e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e640:	429a      	cmp	r2, r3
 800e642:	d203      	bcs.n	800e64c <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e644:	2300      	movs	r3, #0
 800e646:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e648:	2301      	movs	r3, #1
 800e64a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800e64c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e652:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e656:	3301      	adds	r3, #1
 800e658:	647b      	str	r3, [r7, #68]	; 0x44
 800e65a:	4b42      	ldr	r3, [pc, #264]	; (800e764 <_txe_thread_create+0x1d4>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e660:	429a      	cmp	r2, r3
 800e662:	d3ce      	bcc.n	800e602 <_txe_thread_create+0x72>
 800e664:	e000      	b.n	800e668 <_txe_thread_create+0xd8>
                break;
 800e666:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e668:	f3ef 8310 	mrs	r3, PRIMASK
 800e66c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e66e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e670:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e672:	b672      	cpsid	i
    return(int_posture);
 800e674:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e676:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e678:	4b38      	ldr	r3, [pc, #224]	; (800e75c <_txe_thread_create+0x1cc>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	4a37      	ldr	r2, [pc, #220]	; (800e75c <_txe_thread_create+0x1cc>)
 800e680:	6013      	str	r3, [r2, #0]
 800e682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e684:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e686:	6a3b      	ldr	r3, [r7, #32]
 800e688:	f383 8810 	msr	PRIMASK, r3
}
 800e68c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e68e:	f7fe fc33 	bl	800cef8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e696:	429a      	cmp	r2, r3
 800e698:	d102      	bne.n	800e6a0 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800e69a:	230e      	movs	r3, #14
 800e69c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e69e:	e042      	b.n	800e726 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800e6a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d102      	bne.n	800e6ac <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e6a6:	2303      	movs	r3, #3
 800e6a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6aa:	e03c      	b.n	800e726 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d102      	bne.n	800e6b8 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e6b2:	2303      	movs	r3, #3
 800e6b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6b6:	e036      	b.n	800e726 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800e6b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6ba:	2bc7      	cmp	r3, #199	; 0xc7
 800e6bc:	d802      	bhi.n	800e6c4 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800e6be:	2305      	movs	r3, #5
 800e6c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6c2:	e030      	b.n	800e726 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800e6c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6c6:	2b1f      	cmp	r3, #31
 800e6c8:	d902      	bls.n	800e6d0 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800e6ca:	230f      	movs	r3, #15
 800e6cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6ce:	e02a      	b.n	800e726 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800e6d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e6d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d902      	bls.n	800e6de <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800e6d8:	2318      	movs	r3, #24
 800e6da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6dc:	e023      	b.n	800e726 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800e6de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d902      	bls.n	800e6ea <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800e6e4:	2310      	movs	r3, #16
 800e6e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6e8:	e01d      	b.n	800e726 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800e6ea:	4b1f      	ldr	r3, [pc, #124]	; (800e768 <_txe_thread_create+0x1d8>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800e6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f2:	4a1e      	ldr	r2, [pc, #120]	; (800e76c <_txe_thread_create+0x1dc>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d101      	bne.n	800e6fc <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e6f8:	2313      	movs	r3, #19
 800e6fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e6fc:	f3ef 8305 	mrs	r3, IPSR
 800e700:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e702:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e704:	4b1a      	ldr	r3, [pc, #104]	; (800e770 <_txe_thread_create+0x1e0>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4313      	orrs	r3, r2
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00b      	beq.n	800e726 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e70e:	f3ef 8305 	mrs	r3, IPSR
 800e712:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e714:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e716:	4b16      	ldr	r3, [pc, #88]	; (800e770 <_txe_thread_create+0x1e0>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4313      	orrs	r3, r2
 800e71c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e720:	d201      	bcs.n	800e726 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e722:	2313      	movs	r3, #19
 800e724:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d112      	bne.n	800e752 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e72c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e72e:	9305      	str	r3, [sp, #20]
 800e730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e732:	9304      	str	r3, [sp, #16]
 800e734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e736:	9303      	str	r3, [sp, #12]
 800e738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e73a:	9302      	str	r3, [sp, #8]
 800e73c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e73e:	9301      	str	r3, [sp, #4]
 800e740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	68b9      	ldr	r1, [r7, #8]
 800e74a:	68f8      	ldr	r0, [r7, #12]
 800e74c:	f7fe f8c6 	bl	800c8dc <_tx_thread_create>
 800e750:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800e752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800e754:	4618      	mov	r0, r3
 800e756:	3750      	adds	r7, #80	; 0x50
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	2000171c 	.word	0x2000171c
 800e760:	2000168c 	.word	0x2000168c
 800e764:	20001690 	.word	0x20001690
 800e768:	20001684 	.word	0x20001684
 800e76c:	200017cc 	.word	0x200017cc
 800e770:	2000000c 	.word	0x2000000c

0800e774 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b086      	sub	sp, #24
 800e778:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e77a:	f3ef 8310 	mrs	r3, PRIMASK
 800e77e:	60fb      	str	r3, [r7, #12]
    return(posture);
 800e780:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800e782:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e784:	b672      	cpsid	i
    return(int_posture);
 800e786:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 800e788:	613b      	str	r3, [r7, #16]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 800e78a:	463b      	mov	r3, r7
 800e78c:	4618      	mov	r0, r3
 800e78e:	f000 f83d 	bl	800e80c <tx_timer_get_next>
 800e792:	6178      	str	r0, [r7, #20]
            a low power clock needs to be set up.
    */

#ifndef TX_LOW_POWER_TICKLESS
    /* We still want to keep track of time in low power mode. */
    if (timers_active == TX_FALSE)
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d104      	bne.n	800e7a4 <tx_low_power_enter+0x30>
    {
        /* Set the next expiration to 0xFFFFFFF, an indication that the timer sleeps for
           maximum amount of time the HW supports.*/
        tx_low_power_next_expiration = 0xFFFFFFFF;
 800e79a:	f04f 33ff 	mov.w	r3, #4294967295
 800e79e:	603b      	str	r3, [r7, #0]
        timers_active = TX_TRUE;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	617b      	str	r3, [r7, #20]
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d103      	bne.n	800e7b2 <tx_low_power_enter+0x3e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7f2 f8af 	bl	8000910 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 800e7b2:	4b07      	ldr	r3, [pc, #28]	; (800e7d0 <tx_low_power_enter+0x5c>)
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	601a      	str	r2, [r3, #0]
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f383 8810 	msr	PRIMASK, r3
}
 800e7c2:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 800e7c4:	f7f2 f8ce 	bl	8000964 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 800e7c8:	bf00      	nop
 800e7ca:	3718      	adds	r7, #24
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	20001cb8 	.word	0x20001cb8

0800e7d4 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 800e7da:	4b0b      	ldr	r3, [pc, #44]	; (800e808 <tx_low_power_exit+0x34>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d00d      	beq.n	800e7fe <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 800e7e2:	4b09      	ldr	r3, [pc, #36]	; (800e808 <tx_low_power_exit+0x34>)
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 800e7e8:	f7f2 f8ca 	bl	8000980 <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 800e7ec:	f7f2 f8d6 	bl	800099c <App_ThreadX_LowPower_Timer_Adjust>
 800e7f0:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d002      	beq.n	800e7fe <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f000 f86f 	bl	800e8dc <tx_time_increment>
        }
    }
}
 800e7fe:	bf00      	nop
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	20001cb8 	.word	0x20001cb8

0800e80c <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b08d      	sub	sp, #52	; 0x34
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 800e814:	f04f 33ff 	mov.w	r3, #4294967295
 800e818:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e81a:	f3ef 8310 	mrs	r3, PRIMASK
 800e81e:	617b      	str	r3, [r7, #20]
    return(posture);
 800e820:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e822:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e824:	b672      	cpsid	i
    return(int_posture);
 800e826:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 800e828:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 800e82a:	4b29      	ldr	r3, [pc, #164]	; (800e8d0 <tx_timer_get_next+0xc4>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800e830:	2300      	movs	r3, #0
 800e832:	627b      	str	r3, [r7, #36]	; 0x24
 800e834:	e02f      	b.n	800e896 <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 800e836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d01d      	beq.n	800e87a <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800e83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b20      	cmp	r3, #32
 800e84a:	d906      	bls.n	800e85a <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 800e84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e852:	4413      	add	r3, r2
 800e854:	3b20      	subs	r3, #32
 800e856:	623b      	str	r3, [r7, #32]
 800e858:	e001      	b.n	800e85e <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 800e85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85c:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 800e85e:	69fa      	ldr	r2, [r7, #28]
 800e860:	6a3b      	ldr	r3, [r7, #32]
 800e862:	429a      	cmp	r2, r3
 800e864:	d901      	bls.n	800e86a <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 800e866:	6a3b      	ldr	r3, [r7, #32]
 800e868:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800e86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86c:	691b      	ldr	r3, [r3, #16]
 800e86e:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 800e870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e876:	429a      	cmp	r2, r3
 800e878:	d1e4      	bne.n	800e844 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 800e87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87c:	3304      	adds	r3, #4
 800e87e:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 800e880:	4b14      	ldr	r3, [pc, #80]	; (800e8d4 <tx_timer_get_next+0xc8>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e886:	429a      	cmp	r2, r3
 800e888:	d302      	bcc.n	800e890 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800e88a:	4b13      	ldr	r3, [pc, #76]	; (800e8d8 <tx_timer_get_next+0xcc>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	3301      	adds	r3, #1
 800e894:	627b      	str	r3, [r7, #36]	; 0x24
 800e896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e898:	2b1f      	cmp	r3, #31
 800e89a:	d9cc      	bls.n	800e836 <tx_timer_get_next+0x2a>
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f383 8810 	msr	PRIMASK, r3
}
 800e8a6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 800e8a8:	69fb      	ldr	r3, [r7, #28]
 800e8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ae:	d004      	beq.n	800e8ba <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	69fa      	ldr	r2, [r7, #28]
 800e8b4:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	e003      	b.n	800e8c2 <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 800e8c0:	2300      	movs	r3, #0
    }
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3734      	adds	r7, #52	; 0x34
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr
 800e8ce:	bf00      	nop
 800e8d0:	200017b8 	.word	0x200017b8
 800e8d4:	200017b4 	.word	0x200017b4
 800e8d8:	200017b0 	.word	0x200017b0

0800e8dc <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b08a      	sub	sp, #40	; 0x28
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	f000 809b 	beq.w	800ea22 <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e8ec:	f3ef 8310 	mrs	r3, PRIMASK
 800e8f0:	613b      	str	r3, [r7, #16]
    return(posture);
 800e8f2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e8f4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e8f6:	b672      	cpsid	i
    return(int_posture);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800e8fa:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 800e8fc:	4b4b      	ldr	r3, [pc, #300]	; (800ea2c <tx_time_increment+0x150>)
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	4413      	add	r3, r2
 800e904:	4a49      	ldr	r2, [pc, #292]	; (800ea2c <tx_time_increment+0x150>)
 800e906:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 800e908:	4b49      	ldr	r3, [pc, #292]	; (800ea30 <tx_time_increment+0x154>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00e      	beq.n	800e92e <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 800e910:	4b47      	ldr	r3, [pc, #284]	; (800ea30 <tx_time_increment+0x154>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	429a      	cmp	r2, r3
 800e918:	d206      	bcs.n	800e928 <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800e91a:	4b45      	ldr	r3, [pc, #276]	; (800ea30 <tx_time_increment+0x154>)
 800e91c:	681a      	ldr	r2, [r3, #0]
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	4a43      	ldr	r2, [pc, #268]	; (800ea30 <tx_time_increment+0x154>)
 800e924:	6013      	str	r3, [r2, #0]
 800e926:	e002      	b.n	800e92e <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 800e928:	4b41      	ldr	r3, [pc, #260]	; (800ea30 <tx_time_increment+0x154>)
 800e92a:	2201      	movs	r2, #1
 800e92c:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800e92e:	4b41      	ldr	r3, [pc, #260]	; (800ea34 <tx_time_increment+0x158>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 800e934:	2300      	movs	r3, #0
 800e936:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800e938:	2300      	movs	r3, #0
 800e93a:	627b      	str	r3, [r7, #36]	; 0x24
 800e93c:	e046      	b.n	800e9cc <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800e93e:	6a3b      	ldr	r3, [r7, #32]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d034      	beq.n	800e9b0 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800e946:	6a3b      	ldr	r3, [r7, #32]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b20      	cmp	r3, #32
 800e952:	d908      	bls.n	800e966 <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95a:	4413      	add	r3, r2
 800e95c:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	601a      	str	r2, [r3, #0]
 800e964:	e003      	b.n	800e96e <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 800e966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e968:	1c5a      	adds	r2, r3, #1
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	691b      	ldr	r3, [r3, #16]
 800e972:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 800e974:	6a3b      	ldr	r3, [r7, #32]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	69fa      	ldr	r2, [r7, #28]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d1e6      	bne.n	800e94c <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800e97e:	6a3b      	ldr	r3, [r7, #32]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	695b      	ldr	r3, [r3, #20]
 800e984:	2200      	movs	r2, #0
 800e986:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 800e988:	69bb      	ldr	r3, [r7, #24]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d103      	bne.n	800e996 <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 800e98e:	6a3b      	ldr	r3, [r7, #32]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	61bb      	str	r3, [r7, #24]
 800e994:	e009      	b.n	800e9aa <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	695b      	ldr	r3, [r3, #20]
 800e99a:	6a3a      	ldr	r2, [r7, #32]
 800e99c:	6812      	ldr	r2, [r2, #0]
 800e99e:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 800e9a0:	6a3b      	ldr	r3, [r7, #32]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	695a      	ldr	r2, [r3, #20]
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 800e9aa:	6a3b      	ldr	r3, [r7, #32]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 800e9b0:	6a3b      	ldr	r3, [r7, #32]
 800e9b2:	3304      	adds	r3, #4
 800e9b4:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 800e9b6:	4b20      	ldr	r3, [pc, #128]	; (800ea38 <tx_time_increment+0x15c>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	6a3a      	ldr	r2, [r7, #32]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d302      	bcc.n	800e9c6 <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800e9c0:	4b1e      	ldr	r3, [pc, #120]	; (800ea3c <tx_time_increment+0x160>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800e9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	627b      	str	r3, [r7, #36]	; 0x24
 800e9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ce:	2b1f      	cmp	r3, #31
 800e9d0:	d9b5      	bls.n	800e93e <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 800e9d2:	4b1a      	ldr	r3, [pc, #104]	; (800ea3c <tx_time_increment+0x160>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a17      	ldr	r2, [pc, #92]	; (800ea34 <tx_time_increment+0x158>)
 800e9d8:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 800e9da:	e019      	b.n	800ea10 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 800e9dc:	69bb      	ldr	r3, [r7, #24]
 800e9de:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	691b      	ldr	r3, [r3, #16]
 800e9e4:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d206      	bcs.n	800e9fe <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	1ad2      	subs	r2, r2, r3
 800e9f8:	69fb      	ldr	r3, [r7, #28]
 800e9fa:	601a      	str	r2, [r3, #0]
 800e9fc:	e002      	b.n	800ea04 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 800e9fe:	69fb      	ldr	r3, [r7, #28]
 800ea00:	2201      	movs	r2, #1
 800ea02:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 800ea04:	69fb      	ldr	r3, [r7, #28]
 800ea06:	2200      	movs	r2, #0
 800ea08:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 800ea0a:	69f8      	ldr	r0, [r7, #28]
 800ea0c:	f7ff f812 	bl	800da34 <_tx_timer_system_activate>
    while (temp_list_head)
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d1e2      	bne.n	800e9dc <tx_time_increment+0x100>
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	f383 8810 	msr	PRIMASK, r3
}
 800ea20:	e000      	b.n	800ea24 <tx_time_increment+0x148>
        return;
 800ea22:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800ea24:	3728      	adds	r7, #40	; 0x28
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	20001728 	.word	0x20001728
 800ea30:	20001c88 	.word	0x20001c88
 800ea34:	200017b8 	.word	0x200017b8
 800ea38:	200017b4 	.word	0x200017b4
 800ea3c:	200017b0 	.word	0x200017b0

0800ea40 <fm_calendar_get>:
 * usa.
 * @param None
 * @retval None
 */
void fm_calendar_get()
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	af00      	add	r7, sp, #0
     *     __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
     *     HAL_RTC_WaitForSynchro(&hrtc);
     *     __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
     */

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800ea44:	2200      	movs	r2, #0
 800ea46:	4905      	ldr	r1, [pc, #20]	; (800ea5c <fm_calendar_get+0x1c>)
 800ea48:	4805      	ldr	r0, [pc, #20]	; (800ea60 <fm_calendar_get+0x20>)
 800ea4a:	f7fa fa7f 	bl	8008f4c <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800ea4e:	2200      	movs	r2, #0
 800ea50:	4904      	ldr	r1, [pc, #16]	; (800ea64 <fm_calendar_get+0x24>)
 800ea52:	4803      	ldr	r0, [pc, #12]	; (800ea60 <fm_calendar_get+0x20>)
 800ea54:	f7fa fb72 	bl	800913c <HAL_RTC_GetDate>
}
 800ea58:	bf00      	nop
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	20001cbc 	.word	0x20001cbc
 800ea60:	200014a4 	.word	0x200014a4
 800ea64:	20001cd0 	.word	0x20001cd0

0800ea68 <fm_calendar_get_hour>:
 * @brief Función que lee la hora desde el RTC y la devuelve como parámetro.
 * @param None
 * @retval Hora leida del calendario.
 */
int fm_calendar_get_hour()
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ea6c:	f7ff ffe8 	bl	800ea40 <fm_calendar_get>
    return (sTime.Hours);
 800ea70:	4b01      	ldr	r3, [pc, #4]	; (800ea78 <fm_calendar_get_hour+0x10>)
 800ea72:	781b      	ldrb	r3, [r3, #0]
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	20001cbc 	.word	0x20001cbc

0800ea7c <fm_calendar_get_minute>:
 * parámetro.
 * @param None
 * @retval Minutos leidos del calendario.
 */
int fm_calendar_get_minute()
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ea80:	f7ff ffde 	bl	800ea40 <fm_calendar_get>
    return (sTime.Minutes);
 800ea84:	4b01      	ldr	r3, [pc, #4]	; (800ea8c <fm_calendar_get_minute+0x10>)
 800ea86:	785b      	ldrb	r3, [r3, #1]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	20001cbc 	.word	0x20001cbc

0800ea90 <fm_calendar_get_second>:
 * parámetro.
 * @param None
 * @retval Segundos leidos del calendario.
 */
int fm_calendar_get_second()
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ea94:	f7ff ffd4 	bl	800ea40 <fm_calendar_get>
    return (sTime.Seconds);
 800ea98:	4b01      	ldr	r3, [pc, #4]	; (800eaa0 <fm_calendar_get_second+0x10>)
 800ea9a:	789b      	ldrb	r3, [r3, #2]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	20001cbc 	.word	0x20001cbc

0800eaa4 <fm_calendar_get_day>:
 * @brief Función que lee el día desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Día leido del calendario.
 */
int fm_calendar_get_day()
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800eaa8:	f7ff ffca 	bl	800ea40 <fm_calendar_get>
    return (sDate.Date);
 800eaac:	4b01      	ldr	r3, [pc, #4]	; (800eab4 <fm_calendar_get_day+0x10>)
 800eaae:	789b      	ldrb	r3, [r3, #2]
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	20001cd0 	.word	0x20001cd0

0800eab8 <fm_calendar_get_month>:
 * @brief Función que lee el mes desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Mes leida del calendario.
 */
int fm_calendar_get_month()
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800eabc:	f7ff ffc0 	bl	800ea40 <fm_calendar_get>
    return (sDate.Month);
 800eac0:	4b01      	ldr	r3, [pc, #4]	; (800eac8 <fm_calendar_get_month+0x10>)
 800eac2:	785b      	ldrb	r3, [r3, #1]
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	20001cd0 	.word	0x20001cd0

0800eacc <fm_calendar_get_year>:
 * @brief Función que lee el año desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Año leido del calendario.
 */
int fm_calendar_get_year()
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ead0:	f7ff ffb6 	bl	800ea40 <fm_calendar_get>
    return (sDate.Year);
 800ead4:	4b01      	ldr	r3, [pc, #4]	; (800eadc <fm_calendar_get_year+0x10>)
 800ead6:	78db      	ldrb	r3, [r3, #3]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	20001cd0 	.word	0x20001cd0

0800eae0 <fm_calendar_format_time>:
 * fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_time()
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b088      	sub	sp, #32
 800eae4:	af02      	add	r7, sp, #8
    int  time_int = 0;
 800eae6:	2300      	movs	r3, #0
 800eae8:	617b      	str	r3, [r7, #20]
    char time_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800eaea:	f7ff ffa9 	bl	800ea40 <fm_calendar_get>
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800eaee:	4b0d      	ldr	r3, [pc, #52]	; (800eb24 <fm_calendar_format_time+0x44>)
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	4b0b      	ldr	r3, [pc, #44]	; (800eb24 <fm_calendar_format_time+0x44>)
 800eaf6:	785b      	ldrb	r3, [r3, #1]
 800eaf8:	4619      	mov	r1, r3
    sTime.Seconds);
 800eafa:	4b0a      	ldr	r3, [pc, #40]	; (800eb24 <fm_calendar_format_time+0x44>)
 800eafc:	789b      	ldrb	r3, [r3, #2]
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800eafe:	4638      	mov	r0, r7
 800eb00:	9300      	str	r3, [sp, #0]
 800eb02:	460b      	mov	r3, r1
 800eb04:	4908      	ldr	r1, [pc, #32]	; (800eb28 <fm_calendar_format_time+0x48>)
 800eb06:	f006 f8dd 	bl	8014cc4 <siprintf>
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */

    time_int = atoi(time_arr);
 800eb0a:	463b      	mov	r3, r7
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f006 f86f 	bl	8014bf0 <atoi>
 800eb12:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_time(time_int);
 800eb14:	6978      	ldr	r0, [r7, #20]
 800eb16:	f000 f9dd 	bl	800eed4 <fm_factory_modify_fp_time>
}
 800eb1a:	bf00      	nop
 800eb1c:	3718      	adds	r7, #24
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	20001cbc 	.word	0x20001cbc
 800eb28:	08015754 	.word	0x08015754

0800eb2c <fm_calendar_format_date>:
 * en fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_date()
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b088      	sub	sp, #32
 800eb30:	af02      	add	r7, sp, #8
    int  date_int = 0;
 800eb32:	2300      	movs	r3, #0
 800eb34:	617b      	str	r3, [r7, #20]
    char date_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800eb36:	f7ff ff83 	bl	800ea40 <fm_calendar_get>
    sprintf(date_arr, "%02d%02d20%02d", sDate.Date, sDate.Month, sDate.Year);
 800eb3a:	4b0d      	ldr	r3, [pc, #52]	; (800eb70 <fm_calendar_format_date+0x44>)
 800eb3c:	789b      	ldrb	r3, [r3, #2]
 800eb3e:	461a      	mov	r2, r3
 800eb40:	4b0b      	ldr	r3, [pc, #44]	; (800eb70 <fm_calendar_format_date+0x44>)
 800eb42:	785b      	ldrb	r3, [r3, #1]
 800eb44:	4619      	mov	r1, r3
 800eb46:	4b0a      	ldr	r3, [pc, #40]	; (800eb70 <fm_calendar_format_date+0x44>)
 800eb48:	78db      	ldrb	r3, [r3, #3]
 800eb4a:	4638      	mov	r0, r7
 800eb4c:	9300      	str	r3, [sp, #0]
 800eb4e:	460b      	mov	r3, r1
 800eb50:	4908      	ldr	r1, [pc, #32]	; (800eb74 <fm_calendar_format_date+0x48>)
 800eb52:	f006 f8b7 	bl	8014cc4 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    date_int = atoi(date_arr);
 800eb56:	463b      	mov	r3, r7
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f006 f849 	bl	8014bf0 <atoi>
 800eb5e:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_date(date_int);
 800eb60:	6978      	ldr	r0, [r7, #20]
 800eb62:	f000 f9a7 	bl	800eeb4 <fm_factory_modify_fp_date>
}
 800eb66:	bf00      	nop
 800eb68:	3718      	adds	r7, #24
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	20001cd0 	.word	0x20001cd0
 800eb74:	08015764 	.word	0x08015764

0800eb78 <fm_debug_msg_uart>:
 * @param Mensaje a transmitir y su longitud.
 * @retval None
 *
 */
void fm_debug_msg_uart(const uint8_t *p_msg, uint8_t len)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	460b      	mov	r3, r1
 800eb82:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret = HAL_BUSY;
 800eb84:	2302      	movs	r3, #2
 800eb86:	73fb      	strb	r3, [r7, #15]
     * ejecutada en otro hilo. La siguiente implementación no es buena porque
     * bloquea puede bloquear al sistema, una mejor solucion seria bloquear
     * por un corto tiempo, aun mejor seria implementar algo con RTOS.
     *
     */
    while (ret == HAL_BUSY)
 800eb88:	e008      	b.n	800eb9c <fm_debug_msg_uart+0x24>
    {
        ret = HAL_UART_Transmit(&huart2, p_msg, len, DELAY_DEFAULT);
 800eb8a:	78fb      	ldrb	r3, [r7, #3]
 800eb8c:	b29a      	uxth	r2, r3
 800eb8e:	230a      	movs	r3, #10
 800eb90:	6879      	ldr	r1, [r7, #4]
 800eb92:	4806      	ldr	r0, [pc, #24]	; (800ebac <fm_debug_msg_uart+0x34>)
 800eb94:	f7fb fdb8 	bl	800a708 <HAL_UART_Transmit>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	73fb      	strb	r3, [r7, #15]
    while (ret == HAL_BUSY)
 800eb9c:	7bfb      	ldrb	r3, [r7, #15]
 800eb9e:	2b02      	cmp	r3, #2
 800eba0:	d0f3      	beq.n	800eb8a <fm_debug_msg_uart+0x12>
    }

}
 800eba2:	bf00      	nop
 800eba4:	bf00      	nop
 800eba6:	3710      	adds	r7, #16
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	20001564 	.word	0x20001564

0800ebb0 <fm_factory_get_acm>:
 * @brief Función que devuelve el parámetro ACM almacenado en fm_factory.
 * @param None
 * @retval Parámetro ACM como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_acm()
{
 800ebb0:	b4b0      	push	{r4, r5, r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
    return (acm_config);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	4a07      	ldr	r2, [pc, #28]	; (800ebd8 <fm_factory_get_acm+0x28>)
 800ebbc:	461c      	mov	r4, r3
 800ebbe:	4615      	mov	r5, r2
 800ebc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebc4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ebc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bcb0      	pop	{r4, r5, r7}
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	20000030 	.word	0x20000030

0800ebdc <fm_factory_get_ttl>:
 * @brief Función que devuelve el parámetro TTL almacenado en fm_factory.
 * @param None
 * @retval Parámetro TTL como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_ttl()
{
 800ebdc:	b4b0      	push	{r4, r5, r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
    return (ttl_config);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	4a07      	ldr	r2, [pc, #28]	; (800ec04 <fm_factory_get_ttl+0x28>)
 800ebe8:	461c      	mov	r4, r3
 800ebea:	4615      	mov	r5, r2
 800ebec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebf0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ebf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bcb0      	pop	{r4, r5, r7}
 800ec00:	4770      	bx	lr
 800ec02:	bf00      	nop
 800ec04:	20000010 	.word	0x20000010

0800ec08 <fm_factory_get_rate>:
 * @brief Función que devuelve el parámetro RATE almacenado en fm_factory.
 * @param None
 * @retval Parámetro RATE como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_rate()
{
 800ec08:	b4b0      	push	{r4, r5, r7}
 800ec0a:	b083      	sub	sp, #12
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
    return (rate_config);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	4a07      	ldr	r2, [pc, #28]	; (800ec30 <fm_factory_get_rate+0x28>)
 800ec14:	461c      	mov	r4, r3
 800ec16:	4615      	mov	r5, r2
 800ec18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ec20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	370c      	adds	r7, #12
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bcb0      	pop	{r4, r5, r7}
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop
 800ec30:	20000050 	.word	0x20000050

0800ec34 <fm_factory_get_temp>:
 * fm_factory.
 * @param None
 * @retval Temperatura interna del micro como estructura de tipo fmc_temp_t.
 */
fmc_temp_t fm_factory_get_temp()
{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
    return (temperature_config);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	4a05      	ldr	r2, [pc, #20]	; (800ec54 <fm_factory_get_temp+0x20>)
 800ec40:	ca07      	ldmia	r2, {r0, r1, r2}
 800ec42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	370c      	adds	r7, #12
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr
 800ec52:	bf00      	nop
 800ec54:	20000070 	.word	0x20000070

0800ec58 <fm_factory_get_units_tim>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_tim()
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
    return (units_digits_tim);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	4a05      	ldr	r2, [pc, #20]	; (800ec78 <fm_factory_get_units_tim+0x20>)
 800ec64:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec68:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	370c      	adds	r7, #12
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr
 800ec78:	20000094 	.word	0x20000094

0800ec7c <fm_factory_get_units_vol>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_vol()
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b083      	sub	sp, #12
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
    return (units_digits_vol);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	4a05      	ldr	r2, [pc, #20]	; (800ec9c <fm_factory_get_units_vol+0x20>)
 800ec88:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec8c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	370c      	adds	r7, #12
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr
 800ec9c:	2000009c 	.word	0x2000009c

0800eca0 <fm_factory_get_k_factor>:
 * @brief Función que devuelve el factor K almacenado en fm_factory.
 * @param None
 * @retval Factor K.
 */
fmc_fp_t fm_factory_get_k_factor(sel_k k_sel)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b083      	sub	sp, #12
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	460b      	mov	r3, r1
 800ecaa:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t k_selected;
    if(k_sel == K_FACTOR)
 800ecac:	78fb      	ldrb	r3, [r7, #3]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d106      	bne.n	800ecc0 <fm_factory_get_k_factor+0x20>
    {
        k_selected = k_factor_config;
 800ecb2:	4b22      	ldr	r3, [pc, #136]	; (800ed3c <fm_factory_get_k_factor+0x9c>)
 800ecb4:	4a22      	ldr	r2, [pc, #136]	; (800ed40 <fm_factory_get_k_factor+0xa0>)
 800ecb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ecba:	e883 0003 	stmia.w	r3, {r0, r1}
 800ecbe:	e030      	b.n	800ed22 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_1)
 800ecc0:	78fb      	ldrb	r3, [r7, #3]
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d106      	bne.n	800ecd4 <fm_factory_get_k_factor+0x34>
    {
        k_selected = k_lin_1_config;
 800ecc6:	4b1d      	ldr	r3, [pc, #116]	; (800ed3c <fm_factory_get_k_factor+0x9c>)
 800ecc8:	4a1e      	ldr	r2, [pc, #120]	; (800ed44 <fm_factory_get_k_factor+0xa4>)
 800ecca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ecce:	e883 0003 	stmia.w	r3, {r0, r1}
 800ecd2:	e026      	b.n	800ed22 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_2)
 800ecd4:	78fb      	ldrb	r3, [r7, #3]
 800ecd6:	2b02      	cmp	r3, #2
 800ecd8:	d106      	bne.n	800ece8 <fm_factory_get_k_factor+0x48>
    {
        k_selected = k_lin_2_config;
 800ecda:	4b18      	ldr	r3, [pc, #96]	; (800ed3c <fm_factory_get_k_factor+0x9c>)
 800ecdc:	4a1a      	ldr	r2, [pc, #104]	; (800ed48 <fm_factory_get_k_factor+0xa8>)
 800ecde:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ece2:	e883 0003 	stmia.w	r3, {r0, r1}
 800ece6:	e01c      	b.n	800ed22 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_3)
 800ece8:	78fb      	ldrb	r3, [r7, #3]
 800ecea:	2b03      	cmp	r3, #3
 800ecec:	d106      	bne.n	800ecfc <fm_factory_get_k_factor+0x5c>
    {
        k_selected = k_lin_3_config;
 800ecee:	4b13      	ldr	r3, [pc, #76]	; (800ed3c <fm_factory_get_k_factor+0x9c>)
 800ecf0:	4a16      	ldr	r2, [pc, #88]	; (800ed4c <fm_factory_get_k_factor+0xac>)
 800ecf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ecf6:	e883 0003 	stmia.w	r3, {r0, r1}
 800ecfa:	e012      	b.n	800ed22 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_4)
 800ecfc:	78fb      	ldrb	r3, [r7, #3]
 800ecfe:	2b04      	cmp	r3, #4
 800ed00:	d106      	bne.n	800ed10 <fm_factory_get_k_factor+0x70>
    {
        k_selected = k_lin_4_config;
 800ed02:	4b0e      	ldr	r3, [pc, #56]	; (800ed3c <fm_factory_get_k_factor+0x9c>)
 800ed04:	4a12      	ldr	r2, [pc, #72]	; (800ed50 <fm_factory_get_k_factor+0xb0>)
 800ed06:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed0a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed0e:	e008      	b.n	800ed22 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_5)
 800ed10:	78fb      	ldrb	r3, [r7, #3]
 800ed12:	2b05      	cmp	r3, #5
 800ed14:	d105      	bne.n	800ed22 <fm_factory_get_k_factor+0x82>
    {
        k_selected = k_lin_5_config;
 800ed16:	4b09      	ldr	r3, [pc, #36]	; (800ed3c <fm_factory_get_k_factor+0x9c>)
 800ed18:	4a0e      	ldr	r2, [pc, #56]	; (800ed54 <fm_factory_get_k_factor+0xb4>)
 800ed1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed1e:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (k_selected);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	4a05      	ldr	r2, [pc, #20]	; (800ed3c <fm_factory_get_k_factor+0x9c>)
 800ed26:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed2a:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	370c      	adds	r7, #12
 800ed32:	46bd      	mov	sp, r7
 800ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed38:	4770      	bx	lr
 800ed3a:	bf00      	nop
 800ed3c:	20001cec 	.word	0x20001cec
 800ed40:	200000f4 	.word	0x200000f4
 800ed44:	200000cc 	.word	0x200000cc
 800ed48:	200000d4 	.word	0x200000d4
 800ed4c:	200000dc 	.word	0x200000dc
 800ed50:	200000e4 	.word	0x200000e4
 800ed54:	200000ec 	.word	0x200000ec

0800ed58 <fm_factory_get_frec_lin>:

fmc_fp_t fm_factory_get_frec_lin(sel_k k_sel)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b083      	sub	sp, #12
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	460b      	mov	r3, r1
 800ed62:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t frec_lin_selected;

    if(k_sel == K_LIN_1)
 800ed64:	78fb      	ldrb	r3, [r7, #3]
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d106      	bne.n	800ed78 <fm_factory_get_frec_lin+0x20>
    {
        frec_lin_selected = frec_lin_1;
 800ed6a:	4b1d      	ldr	r3, [pc, #116]	; (800ede0 <fm_factory_get_frec_lin+0x88>)
 800ed6c:	4a1d      	ldr	r2, [pc, #116]	; (800ede4 <fm_factory_get_frec_lin+0x8c>)
 800ed6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed72:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed76:	e026      	b.n	800edc6 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_2)
 800ed78:	78fb      	ldrb	r3, [r7, #3]
 800ed7a:	2b02      	cmp	r3, #2
 800ed7c:	d106      	bne.n	800ed8c <fm_factory_get_frec_lin+0x34>
    {
        frec_lin_selected = frec_lin_2;
 800ed7e:	4b18      	ldr	r3, [pc, #96]	; (800ede0 <fm_factory_get_frec_lin+0x88>)
 800ed80:	4a19      	ldr	r2, [pc, #100]	; (800ede8 <fm_factory_get_frec_lin+0x90>)
 800ed82:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed86:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed8a:	e01c      	b.n	800edc6 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_3)
 800ed8c:	78fb      	ldrb	r3, [r7, #3]
 800ed8e:	2b03      	cmp	r3, #3
 800ed90:	d106      	bne.n	800eda0 <fm_factory_get_frec_lin+0x48>
    {
        frec_lin_selected = frec_lin_3;
 800ed92:	4b13      	ldr	r3, [pc, #76]	; (800ede0 <fm_factory_get_frec_lin+0x88>)
 800ed94:	4a15      	ldr	r2, [pc, #84]	; (800edec <fm_factory_get_frec_lin+0x94>)
 800ed96:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed9a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed9e:	e012      	b.n	800edc6 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_4)
 800eda0:	78fb      	ldrb	r3, [r7, #3]
 800eda2:	2b04      	cmp	r3, #4
 800eda4:	d106      	bne.n	800edb4 <fm_factory_get_frec_lin+0x5c>
    {
        frec_lin_selected = frec_lin_4;
 800eda6:	4b0e      	ldr	r3, [pc, #56]	; (800ede0 <fm_factory_get_frec_lin+0x88>)
 800eda8:	4a11      	ldr	r2, [pc, #68]	; (800edf0 <fm_factory_get_frec_lin+0x98>)
 800edaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800edae:	e883 0003 	stmia.w	r3, {r0, r1}
 800edb2:	e008      	b.n	800edc6 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_5)
 800edb4:	78fb      	ldrb	r3, [r7, #3]
 800edb6:	2b05      	cmp	r3, #5
 800edb8:	d105      	bne.n	800edc6 <fm_factory_get_frec_lin+0x6e>
    {
        frec_lin_selected = frec_lin_5;
 800edba:	4b09      	ldr	r3, [pc, #36]	; (800ede0 <fm_factory_get_frec_lin+0x88>)
 800edbc:	4a0d      	ldr	r2, [pc, #52]	; (800edf4 <fm_factory_get_frec_lin+0x9c>)
 800edbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800edc2:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (frec_lin_selected);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4a05      	ldr	r2, [pc, #20]	; (800ede0 <fm_factory_get_frec_lin+0x88>)
 800edca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800edce:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	370c      	adds	r7, #12
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	20001cf4 	.word	0x20001cf4
 800ede4:	200000a4 	.word	0x200000a4
 800ede8:	200000ac 	.word	0x200000ac
 800edec:	200000b4 	.word	0x200000b4
 800edf0:	200000bc 	.word	0x200000bc
 800edf4:	200000c4 	.word	0x200000c4

0800edf8 <fm_factory_get_date_time>:
 * @param None
 * @retval Hora, minutos, segundos, día, mes y año almacenados en
 * date_time_config.
 */
fmc_date_time_t fm_factory_get_date_time()
{
 800edf8:	b4b0      	push	{r4, r5, r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
    return(date_time_config);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4a07      	ldr	r2, [pc, #28]	; (800ee20 <fm_factory_get_date_time+0x28>)
 800ee04:	461c      	mov	r4, r3
 800ee06:	4615      	mov	r5, r2
 800ee08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ee10:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	370c      	adds	r7, #12
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bcb0      	pop	{r4, r5, r7}
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop
 800ee20:	2000007c 	.word	0x2000007c

0800ee24 <fm_factory_get_fp_date>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha.
 */
fmc_fp_t fm_factory_get_fp_date()
{
 800ee24:	b480      	push	{r7}
 800ee26:	b083      	sub	sp, #12
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
    return(date_user);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	4a05      	ldr	r2, [pc, #20]	; (800ee44 <fm_factory_get_fp_date+0x20>)
 800ee30:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee34:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	370c      	adds	r7, #12
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr
 800ee44:	20000104 	.word	0x20000104

0800ee48 <fm_factory_get_fp_time>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora.
 */
fmc_fp_t fm_factory_get_fp_time()
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b083      	sub	sp, #12
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
    return(time_user);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	4a05      	ldr	r2, [pc, #20]	; (800ee68 <fm_factory_get_fp_time+0x20>)
 800ee54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee58:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr
 800ee68:	200000fc 	.word	0x200000fc

0800ee6c <fm_factory_get_fp_date_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha congelada.
 */
fmc_fp_t fm_factory_get_fp_date_conf()
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
    return(date_config);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	4a05      	ldr	r2, [pc, #20]	; (800ee8c <fm_factory_get_fp_date_conf+0x20>)
 800ee78:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee7c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	370c      	adds	r7, #12
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr
 800ee8c:	20000114 	.word	0x20000114

0800ee90 <fm_factory_get_fp_time_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora congelada.
 */
fmc_fp_t fm_factory_get_fp_time_conf()
{
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
    return(time_config);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	4a05      	ldr	r2, [pc, #20]	; (800eeb0 <fm_factory_get_fp_time_conf+0x20>)
 800ee9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eea0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	370c      	adds	r7, #12
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr
 800eeb0:	2000010c 	.word	0x2000010c

0800eeb4 <fm_factory_modify_fp_date>:
 * fijo.
 * @param Fecha a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_date(int date)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
    date_user.num = date;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a04      	ldr	r2, [pc, #16]	; (800eed0 <fm_factory_modify_fp_date+0x1c>)
 800eec0:	6013      	str	r3, [r2, #0]
}
 800eec2:	bf00      	nop
 800eec4:	370c      	adds	r7, #12
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	20000104 	.word	0x20000104

0800eed4 <fm_factory_modify_fp_time>:
 * fijo.
 * @param Hora a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_time(int time)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
    time_user.num = time;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	4a04      	ldr	r2, [pc, #16]	; (800eef0 <fm_factory_modify_fp_time+0x1c>)
 800eee0:	6013      	str	r3, [r2, #0]
}
 800eee2:	bf00      	nop
 800eee4:	370c      	adds	r7, #12
 800eee6:	46bd      	mov	sp, r7
 800eee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeec:	4770      	bx	lr
 800eeee:	bf00      	nop
 800eef0:	200000fc 	.word	0x200000fc

0800eef4 <fm_factory_modify_date>:
 * fijo.
 * @param día, mes y año leídos del calendario.
 * @retval None
 */
void fm_factory_modify_date(int mod_day, int mod_month, int mod_year)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
    date_time_config.day = mod_day;
 800ef00:	4a0f      	ldr	r2, [pc, #60]	; (800ef40 <fm_factory_modify_date+0x4c>)
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	6013      	str	r3, [r2, #0]
    date_time_config.month = mod_month;
 800ef06:	4a0e      	ldr	r2, [pc, #56]	; (800ef40 <fm_factory_modify_date+0x4c>)
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	6053      	str	r3, [r2, #4]
    date_time_config.year = mod_year;
 800ef0c:	4a0c      	ldr	r2, [pc, #48]	; (800ef40 <fm_factory_modify_date+0x4c>)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6093      	str	r3, [r2, #8]

    date_config.num = mod_day * 1000000 + mod_month * 10000 + 2000 + mod_year;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	4a0b      	ldr	r2, [pc, #44]	; (800ef44 <fm_factory_modify_date+0x50>)
 800ef16:	fb03 f202 	mul.w	r2, r3, r2
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	f242 7110 	movw	r1, #10000	; 0x2710
 800ef20:	fb01 f303 	mul.w	r3, r1, r3
 800ef24:	4413      	add	r3, r2
 800ef26:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	461a      	mov	r2, r3
 800ef30:	4b05      	ldr	r3, [pc, #20]	; (800ef48 <fm_factory_modify_date+0x54>)
 800ef32:	601a      	str	r2, [r3, #0]
}
 800ef34:	bf00      	nop
 800ef36:	3714      	adds	r7, #20
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr
 800ef40:	2000007c 	.word	0x2000007c
 800ef44:	000f4240 	.word	0x000f4240
 800ef48:	20000114 	.word	0x20000114

0800ef4c <fm_factory_modify_time>:
 * fijo.
 * @param Hora, minutos y segundos leídos del calendario.
 * @retval None
 */
void fm_factory_modify_time(int mod_hour, int mod_minute, int mod_second)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b085      	sub	sp, #20
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	607a      	str	r2, [r7, #4]
    date_time_config.hour = mod_hour;
 800ef58:	4a0e      	ldr	r2, [pc, #56]	; (800ef94 <fm_factory_modify_time+0x48>)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	60d3      	str	r3, [r2, #12]
    date_time_config.minute = mod_minute;
 800ef5e:	4a0d      	ldr	r2, [pc, #52]	; (800ef94 <fm_factory_modify_time+0x48>)
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	6113      	str	r3, [r2, #16]
    date_time_config.second = mod_second;
 800ef64:	4a0b      	ldr	r2, [pc, #44]	; (800ef94 <fm_factory_modify_time+0x48>)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6153      	str	r3, [r2, #20]

    time_config.num = mod_hour * 10000 + mod_minute * 100 + mod_second;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f242 7210 	movw	r2, #10000	; 0x2710
 800ef70:	fb03 f202 	mul.w	r2, r3, r2
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	2164      	movs	r1, #100	; 0x64
 800ef78:	fb01 f303 	mul.w	r3, r1, r3
 800ef7c:	441a      	add	r2, r3
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4413      	add	r3, r2
 800ef82:	461a      	mov	r2, r3
 800ef84:	4b04      	ldr	r3, [pc, #16]	; (800ef98 <fm_factory_modify_time+0x4c>)
 800ef86:	601a      	str	r2, [r3, #0]
}
 800ef88:	bf00      	nop
 800ef8a:	3714      	adds	r7, #20
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr
 800ef94:	2000007c 	.word	0x2000007c
 800ef98:	2000010c 	.word	0x2000010c

0800ef9c <fm_factory_modify_k_factor_add>:
 * @brief Función que suma uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_add(sel_digit_t digit_k)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	4603      	mov	r3, r0
 800efa4:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800efa6:	2300      	movs	r3, #0
 800efa8:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800efaa:	f000 facd 	bl	800f548 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] < VAL_9)
 800efae:	79fb      	ldrb	r3, [r7, #7]
 800efb0:	f1c3 0307 	rsb	r3, r3, #7
 800efb4:	4a17      	ldr	r2, [pc, #92]	; (800f014 <fm_factory_modify_k_factor_add+0x78>)
 800efb6:	5cd3      	ldrb	r3, [r2, r3]
 800efb8:	2b08      	cmp	r3, #8
 800efba:	d809      	bhi.n	800efd0 <fm_factory_modify_k_factor_add+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]++;
 800efbc:	79fb      	ldrb	r3, [r7, #7]
 800efbe:	f1c3 0307 	rsb	r3, r3, #7
 800efc2:	4a14      	ldr	r2, [pc, #80]	; (800f014 <fm_factory_modify_k_factor_add+0x78>)
 800efc4:	5cd2      	ldrb	r2, [r2, r3]
 800efc6:	3201      	adds	r2, #1
 800efc8:	b2d1      	uxtb	r1, r2
 800efca:	4a12      	ldr	r2, [pc, #72]	; (800f014 <fm_factory_modify_k_factor_add+0x78>)
 800efcc:	54d1      	strb	r1, [r2, r3]
 800efce:	e005      	b.n	800efdc <fm_factory_modify_k_factor_add+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_0;
 800efd0:	79fb      	ldrb	r3, [r7, #7]
 800efd2:	f1c3 0307 	rsb	r3, r3, #7
 800efd6:	4a0f      	ldr	r2, [pc, #60]	; (800f014 <fm_factory_modify_k_factor_add+0x78>)
 800efd8:	2100      	movs	r1, #0
 800efda:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800efdc:	2300      	movs	r3, #0
 800efde:	60bb      	str	r3, [r7, #8]
 800efe0:	e00e      	b.n	800f000 <fm_factory_modify_k_factor_add+0x64>
    {
        k_new_num = (k_new_num * 10) + k_array[i];
 800efe2:	68fa      	ldr	r2, [r7, #12]
 800efe4:	4613      	mov	r3, r2
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	4413      	add	r3, r2
 800efea:	005b      	lsls	r3, r3, #1
 800efec:	4619      	mov	r1, r3
 800efee:	4a09      	ldr	r2, [pc, #36]	; (800f014 <fm_factory_modify_k_factor_add+0x78>)
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	4413      	add	r3, r2
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	440b      	add	r3, r1
 800eff8:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	3301      	adds	r3, #1
 800effe:	60bb      	str	r3, [r7, #8]
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	2b07      	cmp	r3, #7
 800f004:	dded      	ble.n	800efe2 <fm_factory_modify_k_factor_add+0x46>
    }

    k_factor_config.num = k_new_num;
 800f006:	4a04      	ldr	r2, [pc, #16]	; (800f018 <fm_factory_modify_k_factor_add+0x7c>)
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6013      	str	r3, [r2, #0]
}
 800f00c:	bf00      	nop
 800f00e:	3710      	adds	r7, #16
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	20001cd4 	.word	0x20001cd4
 800f018:	200000f4 	.word	0x200000f4

0800f01c <fm_factory_modify_k_factor_subs>:
 * @brief Función que resta uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_subs(sel_digit_t digit_k)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	4603      	mov	r3, r0
 800f024:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800f026:	2300      	movs	r3, #0
 800f028:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800f02a:	f000 fa8d 	bl	800f548 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] > VAL_0)
 800f02e:	79fb      	ldrb	r3, [r7, #7]
 800f030:	f1c3 0307 	rsb	r3, r3, #7
 800f034:	4a17      	ldr	r2, [pc, #92]	; (800f094 <fm_factory_modify_k_factor_subs+0x78>)
 800f036:	5cd3      	ldrb	r3, [r2, r3]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d009      	beq.n	800f050 <fm_factory_modify_k_factor_subs+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]--;
 800f03c:	79fb      	ldrb	r3, [r7, #7]
 800f03e:	f1c3 0307 	rsb	r3, r3, #7
 800f042:	4a14      	ldr	r2, [pc, #80]	; (800f094 <fm_factory_modify_k_factor_subs+0x78>)
 800f044:	5cd2      	ldrb	r2, [r2, r3]
 800f046:	3a01      	subs	r2, #1
 800f048:	b2d1      	uxtb	r1, r2
 800f04a:	4a12      	ldr	r2, [pc, #72]	; (800f094 <fm_factory_modify_k_factor_subs+0x78>)
 800f04c:	54d1      	strb	r1, [r2, r3]
 800f04e:	e005      	b.n	800f05c <fm_factory_modify_k_factor_subs+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_9;
 800f050:	79fb      	ldrb	r3, [r7, #7]
 800f052:	f1c3 0307 	rsb	r3, r3, #7
 800f056:	4a0f      	ldr	r2, [pc, #60]	; (800f094 <fm_factory_modify_k_factor_subs+0x78>)
 800f058:	2109      	movs	r1, #9
 800f05a:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f05c:	2300      	movs	r3, #0
 800f05e:	60bb      	str	r3, [r7, #8]
 800f060:	e00e      	b.n	800f080 <fm_factory_modify_k_factor_subs+0x64>
    {
        k_new_num = (k_new_num * 10) + k_array[i];
 800f062:	68fa      	ldr	r2, [r7, #12]
 800f064:	4613      	mov	r3, r2
 800f066:	009b      	lsls	r3, r3, #2
 800f068:	4413      	add	r3, r2
 800f06a:	005b      	lsls	r3, r3, #1
 800f06c:	4619      	mov	r1, r3
 800f06e:	4a09      	ldr	r2, [pc, #36]	; (800f094 <fm_factory_modify_k_factor_subs+0x78>)
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	4413      	add	r3, r2
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	440b      	add	r3, r1
 800f078:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	3301      	adds	r3, #1
 800f07e:	60bb      	str	r3, [r7, #8]
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	2b07      	cmp	r3, #7
 800f084:	dded      	ble.n	800f062 <fm_factory_modify_k_factor_subs+0x46>
    }

    k_factor_config.num = k_new_num;
 800f086:	4a04      	ldr	r2, [pc, #16]	; (800f098 <fm_factory_modify_k_factor_subs+0x7c>)
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	6013      	str	r3, [r2, #0]
}
 800f08c:	bf00      	nop
 800f08e:	3710      	adds	r7, #16
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}
 800f094:	20001cd4 	.word	0x20001cd4
 800f098:	200000f4 	.word	0x200000f4

0800f09c <fm_factory_modify_k_lin_add>:

void fm_factory_modify_k_lin_add(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b086      	sub	sp, #24
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	460a      	mov	r2, r1
 800f0a6:	71fb      	strb	r3, [r7, #7]
 800f0a8:	4613      	mov	r3, r2
 800f0aa:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f0b4:	79bb      	ldrb	r3, [r7, #6]
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f000 fa82 	bl	800f5c0 <fm_factory_separate_k_lin_and_frec>
    if(digit_k_lin <= DIG_LIN_7)
 800f0bc:	79fb      	ldrb	r3, [r7, #7]
 800f0be:	2b07      	cmp	r3, #7
 800f0c0:	d84e      	bhi.n	800f160 <fm_factory_modify_k_lin_add+0xc4>
    {
        if(k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] < VAL_9)
 800f0c2:	79fb      	ldrb	r3, [r7, #7]
 800f0c4:	f1c3 0307 	rsb	r3, r3, #7
 800f0c8:	4a5e      	ldr	r2, [pc, #376]	; (800f244 <fm_factory_modify_k_lin_add+0x1a8>)
 800f0ca:	5cd3      	ldrb	r3, [r2, r3]
 800f0cc:	2b08      	cmp	r3, #8
 800f0ce:	d809      	bhi.n	800f0e4 <fm_factory_modify_k_lin_add+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]++;
 800f0d0:	79fb      	ldrb	r3, [r7, #7]
 800f0d2:	f1c3 0307 	rsb	r3, r3, #7
 800f0d6:	4a5b      	ldr	r2, [pc, #364]	; (800f244 <fm_factory_modify_k_lin_add+0x1a8>)
 800f0d8:	5cd2      	ldrb	r2, [r2, r3]
 800f0da:	3201      	adds	r2, #1
 800f0dc:	b2d1      	uxtb	r1, r2
 800f0de:	4a59      	ldr	r2, [pc, #356]	; (800f244 <fm_factory_modify_k_lin_add+0x1a8>)
 800f0e0:	54d1      	strb	r1, [r2, r3]
 800f0e2:	e005      	b.n	800f0f0 <fm_factory_modify_k_lin_add+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_0;
 800f0e4:	79fb      	ldrb	r3, [r7, #7]
 800f0e6:	f1c3 0307 	rsb	r3, r3, #7
 800f0ea:	4a56      	ldr	r2, [pc, #344]	; (800f244 <fm_factory_modify_k_lin_add+0x1a8>)
 800f0ec:	2100      	movs	r1, #0
 800f0ee:	54d1      	strb	r1, [r2, r3]
        }

        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	60fb      	str	r3, [r7, #12]
 800f0f4:	e00e      	b.n	800f114 <fm_factory_modify_k_lin_add+0x78>
        {
            k_lin_new_num = (k_lin_new_num * 10) + k_lin_array[i];
 800f0f6:	697a      	ldr	r2, [r7, #20]
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	4413      	add	r3, r2
 800f0fe:	005b      	lsls	r3, r3, #1
 800f100:	4619      	mov	r1, r3
 800f102:	4a50      	ldr	r2, [pc, #320]	; (800f244 <fm_factory_modify_k_lin_add+0x1a8>)
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	4413      	add	r3, r2
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	440b      	add	r3, r1
 800f10c:	617b      	str	r3, [r7, #20]
        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	3301      	adds	r3, #1
 800f112:	60fb      	str	r3, [r7, #12]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2b07      	cmp	r3, #7
 800f118:	dded      	ble.n	800f0f6 <fm_factory_modify_k_lin_add+0x5a>
        }

        if(k_sel == K_LIN_1)
 800f11a:	79bb      	ldrb	r3, [r7, #6]
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d103      	bne.n	800f128 <fm_factory_modify_k_lin_add+0x8c>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f120:	4a49      	ldr	r2, [pc, #292]	; (800f248 <fm_factory_modify_k_lin_add+0x1ac>)
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	6013      	str	r3, [r2, #0]
        else if(k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f126:	e089      	b.n	800f23c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_2)
 800f128:	79bb      	ldrb	r3, [r7, #6]
 800f12a:	2b02      	cmp	r3, #2
 800f12c:	d103      	bne.n	800f136 <fm_factory_modify_k_lin_add+0x9a>
            k_lin_2_config.num = k_lin_new_num;
 800f12e:	4a47      	ldr	r2, [pc, #284]	; (800f24c <fm_factory_modify_k_lin_add+0x1b0>)
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	6013      	str	r3, [r2, #0]
}
 800f134:	e082      	b.n	800f23c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_3)
 800f136:	79bb      	ldrb	r3, [r7, #6]
 800f138:	2b03      	cmp	r3, #3
 800f13a:	d103      	bne.n	800f144 <fm_factory_modify_k_lin_add+0xa8>
            k_lin_3_config.num = k_lin_new_num;
 800f13c:	4a44      	ldr	r2, [pc, #272]	; (800f250 <fm_factory_modify_k_lin_add+0x1b4>)
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	6013      	str	r3, [r2, #0]
}
 800f142:	e07b      	b.n	800f23c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_4)
 800f144:	79bb      	ldrb	r3, [r7, #6]
 800f146:	2b04      	cmp	r3, #4
 800f148:	d103      	bne.n	800f152 <fm_factory_modify_k_lin_add+0xb6>
            k_lin_4_config.num = k_lin_new_num;
 800f14a:	4a42      	ldr	r2, [pc, #264]	; (800f254 <fm_factory_modify_k_lin_add+0x1b8>)
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	6013      	str	r3, [r2, #0]
}
 800f150:	e074      	b.n	800f23c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_5)
 800f152:	79bb      	ldrb	r3, [r7, #6]
 800f154:	2b05      	cmp	r3, #5
 800f156:	d171      	bne.n	800f23c <fm_factory_modify_k_lin_add+0x1a0>
            k_lin_5_config.num = k_lin_new_num;
 800f158:	4a3f      	ldr	r2, [pc, #252]	; (800f258 <fm_factory_modify_k_lin_add+0x1bc>)
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	6013      	str	r3, [r2, #0]
}
 800f15e:	e06d      	b.n	800f23c <fm_factory_modify_k_lin_add+0x1a0>
    else if(digit_k_lin > DIG_LIN_7)
 800f160:	79fb      	ldrb	r3, [r7, #7]
 800f162:	2b07      	cmp	r3, #7
 800f164:	d96a      	bls.n	800f23c <fm_factory_modify_k_lin_add+0x1a0>
        if(LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f166:	79fb      	ldrb	r3, [r7, #7]
 800f168:	f1c3 030e 	rsb	r3, r3, #14
 800f16c:	2b03      	cmp	r3, #3
 800f16e:	d017      	beq.n	800f1a0 <fm_factory_modify_k_lin_add+0x104>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_9)
 800f170:	79fb      	ldrb	r3, [r7, #7]
 800f172:	f1c3 030e 	rsb	r3, r3, #14
 800f176:	4a39      	ldr	r2, [pc, #228]	; (800f25c <fm_factory_modify_k_lin_add+0x1c0>)
 800f178:	5cd3      	ldrb	r3, [r2, r3]
 800f17a:	2b08      	cmp	r3, #8
 800f17c:	d809      	bhi.n	800f192 <fm_factory_modify_k_lin_add+0xf6>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f17e:	79fb      	ldrb	r3, [r7, #7]
 800f180:	f1c3 030e 	rsb	r3, r3, #14
 800f184:	4a35      	ldr	r2, [pc, #212]	; (800f25c <fm_factory_modify_k_lin_add+0x1c0>)
 800f186:	5cd2      	ldrb	r2, [r2, r3]
 800f188:	3201      	adds	r2, #1
 800f18a:	b2d1      	uxtb	r1, r2
 800f18c:	4a33      	ldr	r2, [pc, #204]	; (800f25c <fm_factory_modify_k_lin_add+0x1c0>)
 800f18e:	54d1      	strb	r1, [r2, r3]
 800f190:	e01d      	b.n	800f1ce <fm_factory_modify_k_lin_add+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f192:	79fb      	ldrb	r3, [r7, #7]
 800f194:	f1c3 030e 	rsb	r3, r3, #14
 800f198:	4a30      	ldr	r2, [pc, #192]	; (800f25c <fm_factory_modify_k_lin_add+0x1c0>)
 800f19a:	2100      	movs	r1, #0
 800f19c:	54d1      	strb	r1, [r2, r3]
 800f19e:	e016      	b.n	800f1ce <fm_factory_modify_k_lin_add+0x132>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_1)
 800f1a0:	79fb      	ldrb	r3, [r7, #7]
 800f1a2:	f1c3 030e 	rsb	r3, r3, #14
 800f1a6:	4a2d      	ldr	r2, [pc, #180]	; (800f25c <fm_factory_modify_k_lin_add+0x1c0>)
 800f1a8:	5cd3      	ldrb	r3, [r2, r3]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d109      	bne.n	800f1c2 <fm_factory_modify_k_lin_add+0x126>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f1ae:	79fb      	ldrb	r3, [r7, #7]
 800f1b0:	f1c3 030e 	rsb	r3, r3, #14
 800f1b4:	4a29      	ldr	r2, [pc, #164]	; (800f25c <fm_factory_modify_k_lin_add+0x1c0>)
 800f1b6:	5cd2      	ldrb	r2, [r2, r3]
 800f1b8:	3201      	adds	r2, #1
 800f1ba:	b2d1      	uxtb	r1, r2
 800f1bc:	4a27      	ldr	r2, [pc, #156]	; (800f25c <fm_factory_modify_k_lin_add+0x1c0>)
 800f1be:	54d1      	strb	r1, [r2, r3]
 800f1c0:	e005      	b.n	800f1ce <fm_factory_modify_k_lin_add+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f1c2:	79fb      	ldrb	r3, [r7, #7]
 800f1c4:	f1c3 030e 	rsb	r3, r3, #14
 800f1c8:	4a24      	ldr	r2, [pc, #144]	; (800f25c <fm_factory_modify_k_lin_add+0x1c0>)
 800f1ca:	2100      	movs	r1, #0
 800f1cc:	54d1      	strb	r1, [r2, r3]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	60bb      	str	r3, [r7, #8]
 800f1d2:	e00e      	b.n	800f1f2 <fm_factory_modify_k_lin_add+0x156>
            frec_lin_new_num = (frec_lin_new_num * 10) + frec_array[j];
 800f1d4:	693a      	ldr	r2, [r7, #16]
 800f1d6:	4613      	mov	r3, r2
 800f1d8:	009b      	lsls	r3, r3, #2
 800f1da:	4413      	add	r3, r2
 800f1dc:	005b      	lsls	r3, r3, #1
 800f1de:	4619      	mov	r1, r3
 800f1e0:	4a1e      	ldr	r2, [pc, #120]	; (800f25c <fm_factory_modify_k_lin_add+0x1c0>)
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	440b      	add	r3, r1
 800f1ea:	613b      	str	r3, [r7, #16]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	60bb      	str	r3, [r7, #8]
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	2b06      	cmp	r3, #6
 800f1f6:	dded      	ble.n	800f1d4 <fm_factory_modify_k_lin_add+0x138>
        if(k_sel == K_LIN_1)
 800f1f8:	79bb      	ldrb	r3, [r7, #6]
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d103      	bne.n	800f206 <fm_factory_modify_k_lin_add+0x16a>
            frec_lin_1.num = frec_lin_new_num;
 800f1fe:	4a18      	ldr	r2, [pc, #96]	; (800f260 <fm_factory_modify_k_lin_add+0x1c4>)
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	6013      	str	r3, [r2, #0]
}
 800f204:	e01a      	b.n	800f23c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_2)
 800f206:	79bb      	ldrb	r3, [r7, #6]
 800f208:	2b02      	cmp	r3, #2
 800f20a:	d103      	bne.n	800f214 <fm_factory_modify_k_lin_add+0x178>
            frec_lin_2.num = frec_lin_new_num;
 800f20c:	4a15      	ldr	r2, [pc, #84]	; (800f264 <fm_factory_modify_k_lin_add+0x1c8>)
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	6013      	str	r3, [r2, #0]
}
 800f212:	e013      	b.n	800f23c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_3)
 800f214:	79bb      	ldrb	r3, [r7, #6]
 800f216:	2b03      	cmp	r3, #3
 800f218:	d103      	bne.n	800f222 <fm_factory_modify_k_lin_add+0x186>
            frec_lin_3.num = frec_lin_new_num;
 800f21a:	4a13      	ldr	r2, [pc, #76]	; (800f268 <fm_factory_modify_k_lin_add+0x1cc>)
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	6013      	str	r3, [r2, #0]
}
 800f220:	e00c      	b.n	800f23c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_4)
 800f222:	79bb      	ldrb	r3, [r7, #6]
 800f224:	2b04      	cmp	r3, #4
 800f226:	d103      	bne.n	800f230 <fm_factory_modify_k_lin_add+0x194>
            frec_lin_4.num = frec_lin_new_num;
 800f228:	4a10      	ldr	r2, [pc, #64]	; (800f26c <fm_factory_modify_k_lin_add+0x1d0>)
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	6013      	str	r3, [r2, #0]
}
 800f22e:	e005      	b.n	800f23c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_5)
 800f230:	79bb      	ldrb	r3, [r7, #6]
 800f232:	2b05      	cmp	r3, #5
 800f234:	d102      	bne.n	800f23c <fm_factory_modify_k_lin_add+0x1a0>
            frec_lin_5.num = frec_lin_new_num;
 800f236:	4a0e      	ldr	r2, [pc, #56]	; (800f270 <fm_factory_modify_k_lin_add+0x1d4>)
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	6013      	str	r3, [r2, #0]
}
 800f23c:	bf00      	nop
 800f23e:	3718      	adds	r7, #24
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	20001cdc 	.word	0x20001cdc
 800f248:	200000cc 	.word	0x200000cc
 800f24c:	200000d4 	.word	0x200000d4
 800f250:	200000dc 	.word	0x200000dc
 800f254:	200000e4 	.word	0x200000e4
 800f258:	200000ec 	.word	0x200000ec
 800f25c:	20001ce4 	.word	0x20001ce4
 800f260:	200000a4 	.word	0x200000a4
 800f264:	200000ac 	.word	0x200000ac
 800f268:	200000b4 	.word	0x200000b4
 800f26c:	200000bc 	.word	0x200000bc
 800f270:	200000c4 	.word	0x200000c4

0800f274 <fm_factory_modify_k_lin_subs>:

void fm_factory_modify_k_lin_subs(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b086      	sub	sp, #24
 800f278:	af00      	add	r7, sp, #0
 800f27a:	4603      	mov	r3, r0
 800f27c:	460a      	mov	r2, r1
 800f27e:	71fb      	strb	r3, [r7, #7]
 800f280:	4613      	mov	r3, r2
 800f282:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f284:	2300      	movs	r3, #0
 800f286:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f288:	2300      	movs	r3, #0
 800f28a:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f28c:	79bb      	ldrb	r3, [r7, #6]
 800f28e:	4618      	mov	r0, r3
 800f290:	f000 f996 	bl	800f5c0 <fm_factory_separate_k_lin_and_frec>
    if(digit_k_lin <= DIG_LIN_7)
 800f294:	79fb      	ldrb	r3, [r7, #7]
 800f296:	2b07      	cmp	r3, #7
 800f298:	d84e      	bhi.n	800f338 <fm_factory_modify_k_lin_subs+0xc4>
    {
        if(k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] > VAL_0)
 800f29a:	79fb      	ldrb	r3, [r7, #7]
 800f29c:	f1c3 0307 	rsb	r3, r3, #7
 800f2a0:	4a5e      	ldr	r2, [pc, #376]	; (800f41c <fm_factory_modify_k_lin_subs+0x1a8>)
 800f2a2:	5cd3      	ldrb	r3, [r2, r3]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d009      	beq.n	800f2bc <fm_factory_modify_k_lin_subs+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]--;
 800f2a8:	79fb      	ldrb	r3, [r7, #7]
 800f2aa:	f1c3 0307 	rsb	r3, r3, #7
 800f2ae:	4a5b      	ldr	r2, [pc, #364]	; (800f41c <fm_factory_modify_k_lin_subs+0x1a8>)
 800f2b0:	5cd2      	ldrb	r2, [r2, r3]
 800f2b2:	3a01      	subs	r2, #1
 800f2b4:	b2d1      	uxtb	r1, r2
 800f2b6:	4a59      	ldr	r2, [pc, #356]	; (800f41c <fm_factory_modify_k_lin_subs+0x1a8>)
 800f2b8:	54d1      	strb	r1, [r2, r3]
 800f2ba:	e005      	b.n	800f2c8 <fm_factory_modify_k_lin_subs+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_9;
 800f2bc:	79fb      	ldrb	r3, [r7, #7]
 800f2be:	f1c3 0307 	rsb	r3, r3, #7
 800f2c2:	4a56      	ldr	r2, [pc, #344]	; (800f41c <fm_factory_modify_k_lin_subs+0x1a8>)
 800f2c4:	2109      	movs	r1, #9
 800f2c6:	54d1      	strb	r1, [r2, r3]
        }

        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	60fb      	str	r3, [r7, #12]
 800f2cc:	e00e      	b.n	800f2ec <fm_factory_modify_k_lin_subs+0x78>
        {
            k_lin_new_num = (k_lin_new_num * 10) + k_lin_array[i];
 800f2ce:	697a      	ldr	r2, [r7, #20]
 800f2d0:	4613      	mov	r3, r2
 800f2d2:	009b      	lsls	r3, r3, #2
 800f2d4:	4413      	add	r3, r2
 800f2d6:	005b      	lsls	r3, r3, #1
 800f2d8:	4619      	mov	r1, r3
 800f2da:	4a50      	ldr	r2, [pc, #320]	; (800f41c <fm_factory_modify_k_lin_subs+0x1a8>)
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	4413      	add	r3, r2
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	440b      	add	r3, r1
 800f2e4:	617b      	str	r3, [r7, #20]
        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	60fb      	str	r3, [r7, #12]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2b07      	cmp	r3, #7
 800f2f0:	dded      	ble.n	800f2ce <fm_factory_modify_k_lin_subs+0x5a>
        }

        if(k_sel == K_LIN_1)
 800f2f2:	79bb      	ldrb	r3, [r7, #6]
 800f2f4:	2b01      	cmp	r3, #1
 800f2f6:	d103      	bne.n	800f300 <fm_factory_modify_k_lin_subs+0x8c>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f2f8:	4a49      	ldr	r2, [pc, #292]	; (800f420 <fm_factory_modify_k_lin_subs+0x1ac>)
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	6013      	str	r3, [r2, #0]
        else if(k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f2fe:	e089      	b.n	800f414 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_2)
 800f300:	79bb      	ldrb	r3, [r7, #6]
 800f302:	2b02      	cmp	r3, #2
 800f304:	d103      	bne.n	800f30e <fm_factory_modify_k_lin_subs+0x9a>
            k_lin_2_config.num = k_lin_new_num;
 800f306:	4a47      	ldr	r2, [pc, #284]	; (800f424 <fm_factory_modify_k_lin_subs+0x1b0>)
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	6013      	str	r3, [r2, #0]
}
 800f30c:	e082      	b.n	800f414 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_3)
 800f30e:	79bb      	ldrb	r3, [r7, #6]
 800f310:	2b03      	cmp	r3, #3
 800f312:	d103      	bne.n	800f31c <fm_factory_modify_k_lin_subs+0xa8>
            k_lin_3_config.num = k_lin_new_num;
 800f314:	4a44      	ldr	r2, [pc, #272]	; (800f428 <fm_factory_modify_k_lin_subs+0x1b4>)
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	6013      	str	r3, [r2, #0]
}
 800f31a:	e07b      	b.n	800f414 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_4)
 800f31c:	79bb      	ldrb	r3, [r7, #6]
 800f31e:	2b04      	cmp	r3, #4
 800f320:	d103      	bne.n	800f32a <fm_factory_modify_k_lin_subs+0xb6>
            k_lin_4_config.num = k_lin_new_num;
 800f322:	4a42      	ldr	r2, [pc, #264]	; (800f42c <fm_factory_modify_k_lin_subs+0x1b8>)
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	6013      	str	r3, [r2, #0]
}
 800f328:	e074      	b.n	800f414 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_5)
 800f32a:	79bb      	ldrb	r3, [r7, #6]
 800f32c:	2b05      	cmp	r3, #5
 800f32e:	d171      	bne.n	800f414 <fm_factory_modify_k_lin_subs+0x1a0>
            k_lin_5_config.num = k_lin_new_num;
 800f330:	4a3f      	ldr	r2, [pc, #252]	; (800f430 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	6013      	str	r3, [r2, #0]
}
 800f336:	e06d      	b.n	800f414 <fm_factory_modify_k_lin_subs+0x1a0>
    else if(digit_k_lin > DIG_LIN_7)
 800f338:	79fb      	ldrb	r3, [r7, #7]
 800f33a:	2b07      	cmp	r3, #7
 800f33c:	d96a      	bls.n	800f414 <fm_factory_modify_k_lin_subs+0x1a0>
        if(LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f33e:	79fb      	ldrb	r3, [r7, #7]
 800f340:	f1c3 030e 	rsb	r3, r3, #14
 800f344:	2b03      	cmp	r3, #3
 800f346:	d017      	beq.n	800f378 <fm_factory_modify_k_lin_subs+0x104>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f348:	79fb      	ldrb	r3, [r7, #7]
 800f34a:	f1c3 030e 	rsb	r3, r3, #14
 800f34e:	4a39      	ldr	r2, [pc, #228]	; (800f434 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f350:	5cd3      	ldrb	r3, [r2, r3]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d009      	beq.n	800f36a <fm_factory_modify_k_lin_subs+0xf6>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f356:	79fb      	ldrb	r3, [r7, #7]
 800f358:	f1c3 030e 	rsb	r3, r3, #14
 800f35c:	4a35      	ldr	r2, [pc, #212]	; (800f434 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f35e:	5cd2      	ldrb	r2, [r2, r3]
 800f360:	3a01      	subs	r2, #1
 800f362:	b2d1      	uxtb	r1, r2
 800f364:	4a33      	ldr	r2, [pc, #204]	; (800f434 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f366:	54d1      	strb	r1, [r2, r3]
 800f368:	e01d      	b.n	800f3a6 <fm_factory_modify_k_lin_subs+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_9;
 800f36a:	79fb      	ldrb	r3, [r7, #7]
 800f36c:	f1c3 030e 	rsb	r3, r3, #14
 800f370:	4a30      	ldr	r2, [pc, #192]	; (800f434 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f372:	2109      	movs	r1, #9
 800f374:	54d1      	strb	r1, [r2, r3]
 800f376:	e016      	b.n	800f3a6 <fm_factory_modify_k_lin_subs+0x132>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f378:	79fb      	ldrb	r3, [r7, #7]
 800f37a:	f1c3 030e 	rsb	r3, r3, #14
 800f37e:	4a2d      	ldr	r2, [pc, #180]	; (800f434 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f380:	5cd3      	ldrb	r3, [r2, r3]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d009      	beq.n	800f39a <fm_factory_modify_k_lin_subs+0x126>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f386:	79fb      	ldrb	r3, [r7, #7]
 800f388:	f1c3 030e 	rsb	r3, r3, #14
 800f38c:	4a29      	ldr	r2, [pc, #164]	; (800f434 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f38e:	5cd2      	ldrb	r2, [r2, r3]
 800f390:	3a01      	subs	r2, #1
 800f392:	b2d1      	uxtb	r1, r2
 800f394:	4a27      	ldr	r2, [pc, #156]	; (800f434 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f396:	54d1      	strb	r1, [r2, r3]
 800f398:	e005      	b.n	800f3a6 <fm_factory_modify_k_lin_subs+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_1;
 800f39a:	79fb      	ldrb	r3, [r7, #7]
 800f39c:	f1c3 030e 	rsb	r3, r3, #14
 800f3a0:	4a24      	ldr	r2, [pc, #144]	; (800f434 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f3a2:	2101      	movs	r1, #1
 800f3a4:	54d1      	strb	r1, [r2, r3]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	60bb      	str	r3, [r7, #8]
 800f3aa:	e00e      	b.n	800f3ca <fm_factory_modify_k_lin_subs+0x156>
            frec_lin_new_num = (frec_lin_new_num * 10) + frec_array[j];
 800f3ac:	693a      	ldr	r2, [r7, #16]
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	4413      	add	r3, r2
 800f3b4:	005b      	lsls	r3, r3, #1
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	4a1e      	ldr	r2, [pc, #120]	; (800f434 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	4413      	add	r3, r2
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	440b      	add	r3, r1
 800f3c2:	613b      	str	r3, [r7, #16]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	60bb      	str	r3, [r7, #8]
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	2b06      	cmp	r3, #6
 800f3ce:	dded      	ble.n	800f3ac <fm_factory_modify_k_lin_subs+0x138>
        if(k_sel == K_LIN_1)
 800f3d0:	79bb      	ldrb	r3, [r7, #6]
 800f3d2:	2b01      	cmp	r3, #1
 800f3d4:	d103      	bne.n	800f3de <fm_factory_modify_k_lin_subs+0x16a>
            frec_lin_1.num = frec_lin_new_num;
 800f3d6:	4a18      	ldr	r2, [pc, #96]	; (800f438 <fm_factory_modify_k_lin_subs+0x1c4>)
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	6013      	str	r3, [r2, #0]
}
 800f3dc:	e01a      	b.n	800f414 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_2)
 800f3de:	79bb      	ldrb	r3, [r7, #6]
 800f3e0:	2b02      	cmp	r3, #2
 800f3e2:	d103      	bne.n	800f3ec <fm_factory_modify_k_lin_subs+0x178>
            frec_lin_2.num = frec_lin_new_num;
 800f3e4:	4a15      	ldr	r2, [pc, #84]	; (800f43c <fm_factory_modify_k_lin_subs+0x1c8>)
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	6013      	str	r3, [r2, #0]
}
 800f3ea:	e013      	b.n	800f414 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_3)
 800f3ec:	79bb      	ldrb	r3, [r7, #6]
 800f3ee:	2b03      	cmp	r3, #3
 800f3f0:	d103      	bne.n	800f3fa <fm_factory_modify_k_lin_subs+0x186>
            frec_lin_3.num = frec_lin_new_num;
 800f3f2:	4a13      	ldr	r2, [pc, #76]	; (800f440 <fm_factory_modify_k_lin_subs+0x1cc>)
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	6013      	str	r3, [r2, #0]
}
 800f3f8:	e00c      	b.n	800f414 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_4)
 800f3fa:	79bb      	ldrb	r3, [r7, #6]
 800f3fc:	2b04      	cmp	r3, #4
 800f3fe:	d103      	bne.n	800f408 <fm_factory_modify_k_lin_subs+0x194>
            frec_lin_4.num = frec_lin_new_num;
 800f400:	4a10      	ldr	r2, [pc, #64]	; (800f444 <fm_factory_modify_k_lin_subs+0x1d0>)
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	6013      	str	r3, [r2, #0]
}
 800f406:	e005      	b.n	800f414 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_5)
 800f408:	79bb      	ldrb	r3, [r7, #6]
 800f40a:	2b05      	cmp	r3, #5
 800f40c:	d102      	bne.n	800f414 <fm_factory_modify_k_lin_subs+0x1a0>
            frec_lin_5.num = frec_lin_new_num;
 800f40e:	4a0e      	ldr	r2, [pc, #56]	; (800f448 <fm_factory_modify_k_lin_subs+0x1d4>)
 800f410:	693b      	ldr	r3, [r7, #16]
 800f412:	6013      	str	r3, [r2, #0]
}
 800f414:	bf00      	nop
 800f416:	3718      	adds	r7, #24
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	20001cdc 	.word	0x20001cdc
 800f420:	200000cc 	.word	0x200000cc
 800f424:	200000d4 	.word	0x200000d4
 800f428:	200000dc 	.word	0x200000dc
 800f42c:	200000e4 	.word	0x200000e4
 800f430:	200000ec 	.word	0x200000ec
 800f434:	20001ce4 	.word	0x20001ce4
 800f438:	200000a4 	.word	0x200000a4
 800f43c:	200000ac 	.word	0x200000ac
 800f440:	200000b4 	.word	0x200000b4
 800f444:	200000bc 	.word	0x200000bc
 800f448:	200000c4 	.word	0x200000c4

0800f44c <fm_factory_modify_res_acm_ttl>:
 * @param Resoluciones de fabrica, y de los parámetros ACM y TTL.
 * @retval None
 */
void fm_factory_modify_res_acm_ttl(sel_resolution_t units_res,
sel_resolution_t acm_res, sel_resolution_t ttl_res)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	4603      	mov	r3, r0
 800f454:	71fb      	strb	r3, [r7, #7]
 800f456:	460b      	mov	r3, r1
 800f458:	71bb      	strb	r3, [r7, #6]
 800f45a:	4613      	mov	r3, r2
 800f45c:	717b      	strb	r3, [r7, #5]
    units_digits_vol.res = units_res;
 800f45e:	4a07      	ldr	r2, [pc, #28]	; (800f47c <fm_factory_modify_res_acm_ttl+0x30>)
 800f460:	79fb      	ldrb	r3, [r7, #7]
 800f462:	7113      	strb	r3, [r2, #4]
    acm_config.volume.res = acm_res;
 800f464:	4a06      	ldr	r2, [pc, #24]	; (800f480 <fm_factory_modify_res_acm_ttl+0x34>)
 800f466:	79bb      	ldrb	r3, [r7, #6]
 800f468:	7313      	strb	r3, [r2, #12]
    ttl_config.volume.res = ttl_res;
 800f46a:	4a06      	ldr	r2, [pc, #24]	; (800f484 <fm_factory_modify_res_acm_ttl+0x38>)
 800f46c:	797b      	ldrb	r3, [r7, #5]
 800f46e:	7313      	strb	r3, [r2, #12]
}
 800f470:	bf00      	nop
 800f472:	370c      	adds	r7, #12
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr
 800f47c:	2000009c 	.word	0x2000009c
 800f480:	20000030 	.word	0x20000030
 800f484:	20000010 	.word	0x20000010

0800f488 <fm_factory_modify_res_rate>:
 * @param Resolución de fabrica, y del parámetro rate.
 * @retval None
 */
void fm_factory_modify_res_rate(sel_resolution_t units_res,
sel_resolution_t rate_res)
{
 800f488:	b480      	push	{r7}
 800f48a:	b083      	sub	sp, #12
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	4603      	mov	r3, r0
 800f490:	460a      	mov	r2, r1
 800f492:	71fb      	strb	r3, [r7, #7]
 800f494:	4613      	mov	r3, r2
 800f496:	71bb      	strb	r3, [r7, #6]
    units_digits_tim.res = units_res;
 800f498:	4a05      	ldr	r2, [pc, #20]	; (800f4b0 <fm_factory_modify_res_rate+0x28>)
 800f49a:	79fb      	ldrb	r3, [r7, #7]
 800f49c:	7113      	strb	r3, [r2, #4]
    rate_config.volume.res = rate_res;
 800f49e:	4a05      	ldr	r2, [pc, #20]	; (800f4b4 <fm_factory_modify_res_rate+0x2c>)
 800f4a0:	79bb      	ldrb	r3, [r7, #6]
 800f4a2:	7313      	strb	r3, [r2, #12]
}
 800f4a4:	bf00      	nop
 800f4a6:	370c      	adds	r7, #12
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr
 800f4b0:	20000094 	.word	0x20000094
 800f4b4:	20000050 	.word	0x20000050

0800f4b8 <fm_factory_modify_time_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_time_units(fmc_unit_time_t time_units)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b083      	sub	sp, #12
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	4603      	mov	r3, r0
 800f4c0:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_time = time_units;
 800f4c2:	4a07      	ldr	r2, [pc, #28]	; (800f4e0 <fm_factory_modify_time_units+0x28>)
 800f4c4:	79fb      	ldrb	r3, [r7, #7]
 800f4c6:	7653      	strb	r3, [r2, #25]
    ttl_config.unit_time = time_units;
 800f4c8:	4a06      	ldr	r2, [pc, #24]	; (800f4e4 <fm_factory_modify_time_units+0x2c>)
 800f4ca:	79fb      	ldrb	r3, [r7, #7]
 800f4cc:	7653      	strb	r3, [r2, #25]
    rate_config.unit_time = time_units;
 800f4ce:	4a06      	ldr	r2, [pc, #24]	; (800f4e8 <fm_factory_modify_time_units+0x30>)
 800f4d0:	79fb      	ldrb	r3, [r7, #7]
 800f4d2:	7653      	strb	r3, [r2, #25]
}
 800f4d4:	bf00      	nop
 800f4d6:	370c      	adds	r7, #12
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr
 800f4e0:	20000030 	.word	0x20000030
 800f4e4:	20000010 	.word	0x20000010
 800f4e8:	20000050 	.word	0x20000050

0800f4ec <fm_factory_modify_volume_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_volume_units(fmc_unit_volume_t volume_units)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_volume = volume_units;
 800f4f6:	4a07      	ldr	r2, [pc, #28]	; (800f514 <fm_factory_modify_volume_units+0x28>)
 800f4f8:	79fb      	ldrb	r3, [r7, #7]
 800f4fa:	7613      	strb	r3, [r2, #24]
    ttl_config.unit_volume = volume_units;
 800f4fc:	4a06      	ldr	r2, [pc, #24]	; (800f518 <fm_factory_modify_volume_units+0x2c>)
 800f4fe:	79fb      	ldrb	r3, [r7, #7]
 800f500:	7613      	strb	r3, [r2, #24]
    rate_config.unit_volume = volume_units;
 800f502:	4a06      	ldr	r2, [pc, #24]	; (800f51c <fm_factory_modify_volume_units+0x30>)
 800f504:	79fb      	ldrb	r3, [r7, #7]
 800f506:	7613      	strb	r3, [r2, #24]
}
 800f508:	bf00      	nop
 800f50a:	370c      	adds	r7, #12
 800f50c:	46bd      	mov	sp, r7
 800f50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f512:	4770      	bx	lr
 800f514:	20000030 	.word	0x20000030
 800f518:	20000010 	.word	0x20000010
 800f51c:	20000050 	.word	0x20000050

0800f520 <fm_factory_reset_acm>:

void fm_factory_reset_acm()
{
 800f520:	b480      	push	{r7}
 800f522:	af00      	add	r7, sp, #0
    acm_config.pulse = 0;
 800f524:	4907      	ldr	r1, [pc, #28]	; (800f544 <fm_factory_reset_acm+0x24>)
 800f526:	f04f 0200 	mov.w	r2, #0
 800f52a:	f04f 0300 	mov.w	r3, #0
 800f52e:	e9c1 2300 	strd	r2, r3, [r1]
    acm_config.volume.num = 0;
 800f532:	4b04      	ldr	r3, [pc, #16]	; (800f544 <fm_factory_reset_acm+0x24>)
 800f534:	2200      	movs	r2, #0
 800f536:	609a      	str	r2, [r3, #8]
}
 800f538:	bf00      	nop
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr
 800f542:	bf00      	nop
 800f544:	20000030 	.word	0x20000030

0800f548 <fm_factory_separate_k_factor>:
 * global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_factor()
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b084      	sub	sp, #16
 800f54c:	af00      	add	r7, sp, #0
    uint32_t k_num;
    int i = 7;
 800f54e:	2307      	movs	r3, #7
 800f550:	60bb      	str	r3, [r7, #8]
    k_num = fm_factory_get_k_factor(K_FACTOR).num;
 800f552:	463b      	mov	r3, r7
 800f554:	2100      	movs	r1, #0
 800f556:	4618      	mov	r0, r3
 800f558:	f7ff fba2 	bl	800eca0 <fm_factory_get_k_factor>
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	60fb      	str	r3, [r7, #12]

    while (i >= 0)
 800f560:	e021      	b.n	800f5a6 <fm_factory_separate_k_factor+0x5e>
    {
        if (k_num > 0)
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d016      	beq.n	800f596 <fm_factory_separate_k_factor+0x4e>
        {
            k_array[i] = k_num % 10;
 800f568:	68f9      	ldr	r1, [r7, #12]
 800f56a:	4b13      	ldr	r3, [pc, #76]	; (800f5b8 <fm_factory_separate_k_factor+0x70>)
 800f56c:	fba3 2301 	umull	r2, r3, r3, r1
 800f570:	08da      	lsrs	r2, r3, #3
 800f572:	4613      	mov	r3, r2
 800f574:	009b      	lsls	r3, r3, #2
 800f576:	4413      	add	r3, r2
 800f578:	005b      	lsls	r3, r3, #1
 800f57a:	1aca      	subs	r2, r1, r3
 800f57c:	b2d1      	uxtb	r1, r2
 800f57e:	4a0f      	ldr	r2, [pc, #60]	; (800f5bc <fm_factory_separate_k_factor+0x74>)
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	4413      	add	r3, r2
 800f584:	460a      	mov	r2, r1
 800f586:	701a      	strb	r2, [r3, #0]
            k_num /= 10;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	4a0b      	ldr	r2, [pc, #44]	; (800f5b8 <fm_factory_separate_k_factor+0x70>)
 800f58c:	fba2 2303 	umull	r2, r3, r2, r3
 800f590:	08db      	lsrs	r3, r3, #3
 800f592:	60fb      	str	r3, [r7, #12]
 800f594:	e004      	b.n	800f5a0 <fm_factory_separate_k_factor+0x58>
        }
        else
        {
            k_array[i] = 0;
 800f596:	4a09      	ldr	r2, [pc, #36]	; (800f5bc <fm_factory_separate_k_factor+0x74>)
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	4413      	add	r3, r2
 800f59c:	2200      	movs	r2, #0
 800f59e:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	3b01      	subs	r3, #1
 800f5a4:	60bb      	str	r3, [r7, #8]
    while (i >= 0)
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	dada      	bge.n	800f562 <fm_factory_separate_k_factor+0x1a>
    }
}
 800f5ac:	bf00      	nop
 800f5ae:	bf00      	nop
 800f5b0:	3710      	adds	r7, #16
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	cccccccd 	.word	0xcccccccd
 800f5bc:	20001cd4 	.word	0x20001cd4

0800f5c0 <fm_factory_separate_k_lin_and_frec>:

void fm_factory_separate_k_lin_and_frec(sel_k k_sel)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b08a      	sub	sp, #40	; 0x28
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	71fb      	strb	r3, [r7, #7]
    uint32_t k_lin_num;
    uint32_t frec_num;

    int i = 7; //Contador que funciona solo en el while de esta función.
 800f5ca:	2307      	movs	r3, #7
 800f5cc:	61fb      	str	r3, [r7, #28]
    int j = 6; //Contador que funciona solo en el while de esta función.
 800f5ce:	2306      	movs	r3, #6
 800f5d0:	61bb      	str	r3, [r7, #24]
    k_lin_num = fm_factory_get_k_factor(k_sel).num;
 800f5d2:	f107 0308 	add.w	r3, r7, #8
 800f5d6:	79fa      	ldrb	r2, [r7, #7]
 800f5d8:	4611      	mov	r1, r2
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7ff fb60 	bl	800eca0 <fm_factory_get_k_factor>
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	627b      	str	r3, [r7, #36]	; 0x24
    frec_num = fm_factory_get_frec_lin(k_sel).num;
 800f5e4:	f107 0310 	add.w	r3, r7, #16
 800f5e8:	79fa      	ldrb	r2, [r7, #7]
 800f5ea:	4611      	mov	r1, r2
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7ff fbb3 	bl	800ed58 <fm_factory_get_frec_lin>
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	623b      	str	r3, [r7, #32]

    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800f5f6:	e021      	b.n	800f63c <fm_factory_separate_k_lin_and_frec+0x7c>
    {
        if (k_lin_num > 0)
 800f5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d016      	beq.n	800f62c <fm_factory_separate_k_lin_and_frec+0x6c>
        {
            k_lin_array[i] = k_lin_num % 10;
 800f5fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f600:	4b25      	ldr	r3, [pc, #148]	; (800f698 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f602:	fba3 2301 	umull	r2, r3, r3, r1
 800f606:	08da      	lsrs	r2, r3, #3
 800f608:	4613      	mov	r3, r2
 800f60a:	009b      	lsls	r3, r3, #2
 800f60c:	4413      	add	r3, r2
 800f60e:	005b      	lsls	r3, r3, #1
 800f610:	1aca      	subs	r2, r1, r3
 800f612:	b2d1      	uxtb	r1, r2
 800f614:	4a21      	ldr	r2, [pc, #132]	; (800f69c <fm_factory_separate_k_lin_and_frec+0xdc>)
 800f616:	69fb      	ldr	r3, [r7, #28]
 800f618:	4413      	add	r3, r2
 800f61a:	460a      	mov	r2, r1
 800f61c:	701a      	strb	r2, [r3, #0]
            k_lin_num /= 10;
 800f61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f620:	4a1d      	ldr	r2, [pc, #116]	; (800f698 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f622:	fba2 2303 	umull	r2, r3, r2, r3
 800f626:	08db      	lsrs	r3, r3, #3
 800f628:	627b      	str	r3, [r7, #36]	; 0x24
 800f62a:	e004      	b.n	800f636 <fm_factory_separate_k_lin_and_frec+0x76>
        }
        else
        {
            k_lin_array[i] = 0;
 800f62c:	4a1b      	ldr	r2, [pc, #108]	; (800f69c <fm_factory_separate_k_lin_and_frec+0xdc>)
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	4413      	add	r3, r2
 800f632:	2200      	movs	r2, #0
 800f634:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800f636:	69fb      	ldr	r3, [r7, #28]
 800f638:	3b01      	subs	r3, #1
 800f63a:	61fb      	str	r3, [r7, #28]
    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800f63c:	69fb      	ldr	r3, [r7, #28]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	dada      	bge.n	800f5f8 <fm_factory_separate_k_lin_and_frec+0x38>
    }

    while(j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800f642:	e021      	b.n	800f688 <fm_factory_separate_k_lin_and_frec+0xc8>
    {
        if(frec_num > 0)
 800f644:	6a3b      	ldr	r3, [r7, #32]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d016      	beq.n	800f678 <fm_factory_separate_k_lin_and_frec+0xb8>
        {
            frec_array[j] = frec_num % 10;
 800f64a:	6a39      	ldr	r1, [r7, #32]
 800f64c:	4b12      	ldr	r3, [pc, #72]	; (800f698 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f64e:	fba3 2301 	umull	r2, r3, r3, r1
 800f652:	08da      	lsrs	r2, r3, #3
 800f654:	4613      	mov	r3, r2
 800f656:	009b      	lsls	r3, r3, #2
 800f658:	4413      	add	r3, r2
 800f65a:	005b      	lsls	r3, r3, #1
 800f65c:	1aca      	subs	r2, r1, r3
 800f65e:	b2d1      	uxtb	r1, r2
 800f660:	4a0f      	ldr	r2, [pc, #60]	; (800f6a0 <fm_factory_separate_k_lin_and_frec+0xe0>)
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	4413      	add	r3, r2
 800f666:	460a      	mov	r2, r1
 800f668:	701a      	strb	r2, [r3, #0]
            frec_num /= 10;
 800f66a:	6a3b      	ldr	r3, [r7, #32]
 800f66c:	4a0a      	ldr	r2, [pc, #40]	; (800f698 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f66e:	fba2 2303 	umull	r2, r3, r2, r3
 800f672:	08db      	lsrs	r3, r3, #3
 800f674:	623b      	str	r3, [r7, #32]
 800f676:	e004      	b.n	800f682 <fm_factory_separate_k_lin_and_frec+0xc2>
        }
        else
        {
            frec_array[j] = 0;
 800f678:	4a09      	ldr	r2, [pc, #36]	; (800f6a0 <fm_factory_separate_k_lin_and_frec+0xe0>)
 800f67a:	69bb      	ldr	r3, [r7, #24]
 800f67c:	4413      	add	r3, r2
 800f67e:	2200      	movs	r2, #0
 800f680:	701a      	strb	r2, [r3, #0]
        }
        j--;
 800f682:	69bb      	ldr	r3, [r7, #24]
 800f684:	3b01      	subs	r3, #1
 800f686:	61bb      	str	r3, [r7, #24]
    while(j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800f688:	69bb      	ldr	r3, [r7, #24]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	dada      	bge.n	800f644 <fm_factory_separate_k_lin_and_frec+0x84>
    }
}
 800f68e:	bf00      	nop
 800f690:	bf00      	nop
 800f692:	3728      	adds	r7, #40	; 0x28
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	cccccccd 	.word	0xcccccccd
 800f69c:	20001cdc 	.word	0x20001cdc
 800f6a0:	20001ce4 	.word	0x20001ce4

0800f6a4 <HAL_GPIO_EXTI_Rising_Callback>:
// Private function bodies.

// Interrupts

void HAL_GPIO_EXTI_Rising_Callback(uint16_t gpio_pin) // @suppress("Name convention for function")
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	80fb      	strh	r3, [r7, #6]
    /*
     * Deshabilito interrupciones para evitar rebotes de los botones, hasta que
     * la tarea task_debounce termine su ejecución y se bloquee.
     */
    HAL_NVIC_DisableIRQ(EXTI10_IRQn);
 800f6ae:	2015      	movs	r0, #21
 800f6b0:	f7f4 fc5a 	bl	8003f68 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI11_IRQn);
 800f6b4:	2016      	movs	r0, #22
 800f6b6:	f7f4 fc57 	bl	8003f68 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI12_IRQn);
 800f6ba:	2017      	movs	r0, #23
 800f6bc:	f7f4 fc54 	bl	8003f68 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI13_IRQn);
 800f6c0:	2018      	movs	r0, #24
 800f6c2:	f7f4 fc51 	bl	8003f68 <HAL_NVIC_DisableIRQ>
    fm_event_t event_now;

    /*
     * Compruebo qué botón fue el presionado.
     */
    switch (gpio_pin)
 800f6c6:	88fb      	ldrh	r3, [r7, #6]
 800f6c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f6cc:	d018      	beq.n	800f700 <HAL_GPIO_EXTI_Rising_Callback+0x5c>
 800f6ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f6d2:	dc18      	bgt.n	800f706 <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800f6d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6d8:	d00f      	beq.n	800f6fa <HAL_GPIO_EXTI_Rising_Callback+0x56>
 800f6da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6de:	dc12      	bgt.n	800f706 <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800f6e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6e4:	d003      	beq.n	800f6ee <HAL_GPIO_EXTI_Rising_Callback+0x4a>
 800f6e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6ea:	d003      	beq.n	800f6f4 <HAL_GPIO_EXTI_Rising_Callback+0x50>
        break;
        case KEY_ESC:
            event_now = EVENT_KEY_ESC;
        break;
        default:
        break;
 800f6ec:	e00b      	b.n	800f706 <HAL_GPIO_EXTI_Rising_Callback+0x62>
            event_now = EVENT_KEY_UP;
 800f6ee:	2302      	movs	r3, #2
 800f6f0:	73fb      	strb	r3, [r7, #15]
        break;
 800f6f2:	e009      	b.n	800f708 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_DOWN;
 800f6f4:	2303      	movs	r3, #3
 800f6f6:	73fb      	strb	r3, [r7, #15]
        break;
 800f6f8:	e006      	b.n	800f708 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ENTER;
 800f6fa:	2304      	movs	r3, #4
 800f6fc:	73fb      	strb	r3, [r7, #15]
        break;
 800f6fe:	e003      	b.n	800f708 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ESC;
 800f700:	2305      	movs	r3, #5
 800f702:	73fb      	strb	r3, [r7, #15]
        break;
 800f704:	e000      	b.n	800f708 <HAL_GPIO_EXTI_Rising_Callback+0x64>
        break;
 800f706:	bf00      	nop
    /*
     * Pongo el nombre del botón presionado en la cola de eventos y libero el
     * semáforo de la tarea task_debounce, para que esta se bloquee durante el
     * tiempo necesario para que no haya rebotes de los botones.
     */
    tx_queue_send(&event_queue_ptr,&event_now,TX_NO_WAIT);
 800f708:	f107 030f 	add.w	r3, r7, #15
 800f70c:	2200      	movs	r2, #0
 800f70e:	4619      	mov	r1, r3
 800f710:	4805      	ldr	r0, [pc, #20]	; (800f728 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 800f712:	f7fe fdf5 	bl	800e300 <_txe_queue_send>
    tx_semaphore_ceiling_put(&debounce_semaphore_ptr, 1);
 800f716:	2101      	movs	r1, #1
 800f718:	4804      	ldr	r0, [pc, #16]	; (800f72c <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 800f71a:	f7fe fe3b 	bl	800e394 <_txe_semaphore_ceiling_put>
}
 800f71e:	bf00      	nop
 800f720:	3710      	adds	r7, #16
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	20001388 	.word	0x20001388
 800f72c:	2000136c 	.word	0x2000136c

0800f730 <fm_lcd_acm_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_rate()
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b0b8      	sub	sp, #224	; 0xe0
 800f734:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800f736:	f107 0318 	add.w	r3, r7, #24
 800f73a:	4618      	mov	r0, r3
 800f73c:	f005 f914 	bl	8014968 <fmc_get_acm>
 800f740:	2314      	movs	r3, #20
 800f742:	9301      	str	r3, [sp, #4]
 800f744:	1d3b      	adds	r3, r7, #4
 800f746:	9300      	str	r3, [sp, #0]
 800f748:	2309      	movs	r3, #9
 800f74a:	2220      	movs	r2, #32
 800f74c:	f107 0120 	add.w	r1, r7, #32
 800f750:	c903      	ldmia	r1, {r0, r1}
 800f752:	f000 fa13 	bl	800fb7c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800f756:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f75a:	4618      	mov	r0, r3
 800f75c:	f005 f904 	bl	8014968 <fmc_get_acm>
 800f760:	1d3a      	adds	r2, r7, #4
 800f762:	2314      	movs	r3, #20
 800f764:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f768:	c903      	ldmia	r1, {r0, r1}
 800f76a:	f000 f9c3 	bl	800faf4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f76e:	1d3b      	adds	r3, r7, #4
 800f770:	2100      	movs	r1, #0
 800f772:	4618      	mov	r0, r3
 800f774:	f000 fbf4 	bl	800ff60 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800f778:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f77c:	4618      	mov	r0, r3
 800f77e:	f005 f959 	bl	8014a34 <fmc_get_rate>
 800f782:	2314      	movs	r3, #20
 800f784:	9301      	str	r3, [sp, #4]
 800f786:	1d3b      	adds	r3, r7, #4
 800f788:	9300      	str	r3, [sp, #0]
 800f78a:	2308      	movs	r3, #8
 800f78c:	2220      	movs	r2, #32
 800f78e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f792:	c903      	ldmia	r1, {r0, r1}
 800f794:	f000 f9f2 	bl	800fb7c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800f798:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f79c:	4618      	mov	r0, r3
 800f79e:	f005 f949 	bl	8014a34 <fmc_get_rate>
 800f7a2:	1d3a      	adds	r2, r7, #4
 800f7a4:	2314      	movs	r3, #20
 800f7a6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800f7aa:	c903      	ldmia	r1, {r0, r1}
 800f7ac:	f000 f9a2 	bl	800faf4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800f7b0:	1d3b      	adds	r3, r7, #4
 800f7b2:	2101      	movs	r1, #1
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f000 fbd3 	bl	800ff60 <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	2006      	movs	r0, #6
 800f7be:	f001 ff35 	bl	801162c <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800f7c2:	2100      	movs	r1, #0
 800f7c4:	2002      	movs	r0, #2
 800f7c6:	f001 ff31 	bl	801162c <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800f7ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f005 f8ca 	bl	8014968 <fmc_get_acm>
 800f7d4:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800f7d8:	2100      	movs	r1, #0
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f002 fae6 	bl	8011dac <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	2007      	movs	r0, #7
 800f7e4:	f001 ff22 	bl	801162c <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_acm().unit_time, 0x0);
 800f7e8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f005 f8bb 	bl	8014968 <fmc_get_acm>
 800f7f2:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800f7f6:	2100      	movs	r1, #0
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f002 fa95 	bl	8011d28 <lcd_set_time_unit>
}
 800f7fe:	bf00      	nop
 800f800:	37d8      	adds	r7, #216	; 0xd8
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}

0800f806 <fm_lcd_acm_temp>:
 * de forma personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_temp()
{
 800f806:	b580      	push	{r7, lr}
 800f808:	b0a2      	sub	sp, #136	; 0x88
 800f80a:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800f80c:	f107 0318 	add.w	r3, r7, #24
 800f810:	4618      	mov	r0, r3
 800f812:	f005 f8a9 	bl	8014968 <fmc_get_acm>
 800f816:	2314      	movs	r3, #20
 800f818:	9301      	str	r3, [sp, #4]
 800f81a:	1d3b      	adds	r3, r7, #4
 800f81c:	9300      	str	r3, [sp, #0]
 800f81e:	2309      	movs	r3, #9
 800f820:	2220      	movs	r2, #32
 800f822:	f107 0120 	add.w	r1, r7, #32
 800f826:	c903      	ldmia	r1, {r0, r1}
 800f828:	f000 f9a8 	bl	800fb7c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800f82c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f830:	4618      	mov	r0, r3
 800f832:	f005 f899 	bl	8014968 <fmc_get_acm>
 800f836:	1d3a      	adds	r2, r7, #4
 800f838:	2314      	movs	r3, #20
 800f83a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f83e:	c903      	ldmia	r1, {r0, r1}
 800f840:	f000 f958 	bl	800faf4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f844:	1d3b      	adds	r3, r7, #4
 800f846:	2100      	movs	r1, #0
 800f848:	4618      	mov	r0, r3
 800f84a:	f000 fb89 	bl	800ff60 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_stm32_temp().temperature, ' ', LINE_1_DIGITS,
 800f84e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f852:	4618      	mov	r0, r3
 800f854:	f005 f8c8 	bl	80149e8 <fmc_get_stm32_temp>
 800f858:	2314      	movs	r3, #20
 800f85a:	9301      	str	r3, [sp, #4]
 800f85c:	1d3b      	adds	r3, r7, #4
 800f85e:	9300      	str	r3, [sp, #0]
 800f860:	2308      	movs	r3, #8
 800f862:	2220      	movs	r2, #32
 800f864:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800f868:	c903      	ldmia	r1, {r0, r1}
 800f86a:	f000 f987 	bl	800fb7c <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_stm32_temp().temperature, lcd_msg,
 800f86e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f872:	4618      	mov	r0, r3
 800f874:	f005 f8b8 	bl	80149e8 <fmc_get_stm32_temp>
 800f878:	1d3a      	adds	r2, r7, #4
 800f87a:	2314      	movs	r3, #20
 800f87c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800f880:	c903      	ldmia	r1, {r0, r1}
 800f882:	f000 f937 	bl	800faf4 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800f886:	1d3b      	adds	r3, r7, #4
 800f888:	2101      	movs	r1, #1
 800f88a:	4618      	mov	r0, r3
 800f88c:	f000 fb68 	bl	800ff60 <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800f890:	2100      	movs	r1, #0
 800f892:	2006      	movs	r0, #6
 800f894:	f001 feca 	bl	801162c <lcd_set_symbol>
    lcd_set_vol_unit(fmc_get_stm32_temp().unit_volume_temp, 0x0);
 800f898:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f89c:	4618      	mov	r0, r3
 800f89e:	f005 f8a3 	bl	80149e8 <fmc_get_stm32_temp>
 800f8a2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f8a6:	2100      	movs	r1, #0
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f002 fa7f 	bl	8011dac <lcd_set_vol_unit>
}
 800f8ae:	bf00      	nop
 800f8b0:	3780      	adds	r7, #128	; 0x80
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <fm_lcd_clear>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void fm_lcd_clear()
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800f8ba:	f000 fd69 	bl	8010390 <lcd_clear_all>
}
 800f8be:	bf00      	nop
 800f8c0:	bd80      	pop	{r7, pc}
	...

0800f8c4 <fm_lcd_date_hour>:
 * @param Hora y fecha a imprimir.
 * @retval None
 */
void fm_lcd_date_hour(user_or_configuration_t configuration,
fm_event_t event_id, sel_date_time_field_t field)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b090      	sub	sp, #64	; 0x40
 800f8c8:	af02      	add	r7, sp, #8
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	73fb      	strb	r3, [r7, #15]
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	73bb      	strb	r3, [r7, #14]
 800f8d2:	4613      	mov	r3, r2
 800f8d4:	737b      	strb	r3, [r7, #13]
    char lcd_msg[PCF8553_DATA_SIZE];

    /*
     * Se comprueba si se está en el menú de configuración o de usuario.
     */
    if(configuration)
 800f8d6:	7bfb      	ldrb	r3, [r7, #15]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d00a      	beq.n	800f8f2 <fm_lcd_date_hour+0x2e>
    {
        date_to_str = fm_factory_get_fp_date_conf();
 800f8dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7ff fac3 	bl	800ee6c <fm_factory_get_fp_date_conf>
        time_to_str = fm_factory_get_fp_time_conf();
 800f8e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7ff fad0 	bl	800ee90 <fm_factory_get_fp_time_conf>
 800f8f0:	e019      	b.n	800f926 <fm_lcd_date_hour+0x62>
    }
    else
    {
        fm_calendar_format_date();
 800f8f2:	f7ff f91b 	bl	800eb2c <fm_calendar_format_date>
        fm_calendar_format_time();
 800f8f6:	f7ff f8f3 	bl	800eae0 <fm_calendar_format_time>

        date_to_str = fm_factory_get_fp_date();
 800f8fa:	463b      	mov	r3, r7
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7ff fa91 	bl	800ee24 <fm_factory_get_fp_date>
 800f902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f906:	463a      	mov	r2, r7
 800f908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f90c:	e883 0003 	stmia.w	r3, {r0, r1}
        time_to_str = fm_factory_get_fp_time();
 800f910:	463b      	mov	r3, r7
 800f912:	4618      	mov	r0, r3
 800f914:	f7ff fa98 	bl	800ee48 <fm_factory_get_fp_time>
 800f918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f91c:	463a      	mov	r2, r7
 800f91e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f922:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    fm_lcd_fp_to_str(date_to_str, '0', LINE_0_DIGITS, lcd_msg,
 800f926:	2314      	movs	r3, #20
 800f928:	9301      	str	r3, [sp, #4]
 800f92a:	f107 0314 	add.w	r3, r7, #20
 800f92e:	9300      	str	r3, [sp, #0]
 800f930:	2309      	movs	r3, #9
 800f932:	2230      	movs	r2, #48	; 0x30
 800f934:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f938:	c903      	ldmia	r1, {r0, r1}
 800f93a:	f000 f91f 	bl	800fb7c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f93e:	f107 0314 	add.w	r3, r7, #20
 800f942:	2100      	movs	r1, #0
 800f944:	4618      	mov	r0, r3
 800f946:	f000 fb0b 	bl	800ff60 <fm_lcd_puts>
    lcd_set_point(HIGH_ROW, PNT_1);
 800f94a:	2101      	movs	r1, #1
 800f94c:	2000      	movs	r0, #0
 800f94e:	f001 fdc1 	bl	80114d4 <lcd_set_point>
    lcd_set_point(HIGH_ROW, PNT_3);
 800f952:	2103      	movs	r1, #3
 800f954:	2000      	movs	r0, #0
 800f956:	f001 fdbd 	bl	80114d4 <lcd_set_point>

    fm_lcd_fp_to_str(time_to_str, '0', LINE_1_DIGITS, lcd_msg,
 800f95a:	2314      	movs	r3, #20
 800f95c:	9301      	str	r3, [sp, #4]
 800f95e:	f107 0314 	add.w	r3, r7, #20
 800f962:	9300      	str	r3, [sp, #0]
 800f964:	2308      	movs	r3, #8
 800f966:	2230      	movs	r2, #48	; 0x30
 800f968:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f96c:	c903      	ldmia	r1, {r0, r1}
 800f96e:	f000 f905 	bl	800fb7c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800f972:	f107 0314 	add.w	r3, r7, #20
 800f976:	2101      	movs	r1, #1
 800f978:	4618      	mov	r0, r3
 800f97a:	f000 faf1 	bl	800ff60 <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800f97e:	2101      	movs	r1, #1
 800f980:	2000      	movs	r0, #0
 800f982:	f000 fd2d 	bl	80103e0 <lcd_clear_digit>
    lcd_set_point(LOW_ROW, PNT_2);
 800f986:	2102      	movs	r1, #2
 800f988:	2001      	movs	r0, #1
 800f98a:	f001 fda3 	bl	80114d4 <lcd_set_point>
    lcd_set_point(LOW_ROW, PNT_4);
 800f98e:	2104      	movs	r1, #4
 800f990:	2001      	movs	r0, #1
 800f992:	f001 fd9f 	bl	80114d4 <lcd_set_point>

    if(configuration)
 800f996:	7bfb      	ldrb	r3, [r7, #15]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d07e      	beq.n	800fa9a <fm_lcd_date_hour+0x1d6>
    {
        if(event_id == EVENT_KEY_ENTER ||
 800f99c:	7bbb      	ldrb	r3, [r7, #14]
 800f99e:	2b04      	cmp	r3, #4
 800f9a0:	d006      	beq.n	800f9b0 <fm_lcd_date_hour+0xec>
        (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800f9a2:	4b40      	ldr	r3, [pc, #256]	; (800faa4 <fm_lcd_date_hour+0x1e0>)
 800f9a4:	781b      	ldrb	r3, [r3, #0]
        if(event_id == EVENT_KEY_ENTER ||
 800f9a6:	2b04      	cmp	r3, #4
 800f9a8:	d106      	bne.n	800f9b8 <fm_lcd_date_hour+0xf4>
        (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800f9aa:	7bbb      	ldrb	r3, [r7, #14]
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	d103      	bne.n	800f9b8 <fm_lcd_date_hour+0xf4>
        {
            blink = 1;
 800f9b0:	4b3d      	ldr	r3, [pc, #244]	; (800faa8 <fm_lcd_date_hour+0x1e4>)
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	601a      	str	r2, [r3, #0]
 800f9b6:	e016      	b.n	800f9e6 <fm_lcd_date_hour+0x122>
        }
        else if(event_id == EVENT_KEY_DOWN ||
 800f9b8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ba:	2b03      	cmp	r3, #3
 800f9bc:	d010      	beq.n	800f9e0 <fm_lcd_date_hour+0x11c>
        (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800f9be:	4b39      	ldr	r3, [pc, #228]	; (800faa4 <fm_lcd_date_hour+0x1e0>)
 800f9c0:	781b      	ldrb	r3, [r3, #0]
        else if(event_id == EVENT_KEY_DOWN ||
 800f9c2:	2b03      	cmp	r3, #3
 800f9c4:	d102      	bne.n	800f9cc <fm_lcd_date_hour+0x108>
        (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800f9c6:	7bbb      	ldrb	r3, [r7, #14]
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d009      	beq.n	800f9e0 <fm_lcd_date_hour+0x11c>
 800f9cc:	7bbb      	ldrb	r3, [r7, #14]
 800f9ce:	2b02      	cmp	r3, #2
 800f9d0:	d006      	beq.n	800f9e0 <fm_lcd_date_hour+0x11c>
        event_id == EVENT_KEY_UP ||
        (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800f9d2:	4b34      	ldr	r3, [pc, #208]	; (800faa4 <fm_lcd_date_hour+0x1e0>)
 800f9d4:	781b      	ldrb	r3, [r3, #0]
        event_id == EVENT_KEY_UP ||
 800f9d6:	2b02      	cmp	r3, #2
 800f9d8:	d105      	bne.n	800f9e6 <fm_lcd_date_hour+0x122>
        (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800f9da:	7bbb      	ldrb	r3, [r7, #14]
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d102      	bne.n	800f9e6 <fm_lcd_date_hour+0x122>
        {
            blink = 0;
 800f9e0:	4b31      	ldr	r3, [pc, #196]	; (800faa8 <fm_lcd_date_hour+0x1e4>)
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	601a      	str	r2, [r3, #0]
        }

        if(blink == 1)
 800f9e6:	4b30      	ldr	r3, [pc, #192]	; (800faa8 <fm_lcd_date_hour+0x1e4>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d152      	bne.n	800fa94 <fm_lcd_date_hour+0x1d0>
        {
            if(field == DAY)
 800f9ee:	7b7b      	ldrb	r3, [r7, #13]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d108      	bne.n	800fa06 <fm_lcd_date_hour+0x142>
            {
                lcd_clear_digit(DIGIT_1, HIGH_ROW);
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	2001      	movs	r0, #1
 800f9f8:	f000 fcf2 	bl	80103e0 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_0, HIGH_ROW);
 800f9fc:	2100      	movs	r1, #0
 800f9fe:	2000      	movs	r0, #0
 800fa00:	f000 fcee 	bl	80103e0 <lcd_clear_digit>
 800fa04:	e042      	b.n	800fa8c <fm_lcd_date_hour+0x1c8>
            }
            else if(field == MONTH)
 800fa06:	7b7b      	ldrb	r3, [r7, #13]
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	d108      	bne.n	800fa1e <fm_lcd_date_hour+0x15a>
            {
                lcd_clear_digit(DIGIT_3, HIGH_ROW);
 800fa0c:	2100      	movs	r1, #0
 800fa0e:	2003      	movs	r0, #3
 800fa10:	f000 fce6 	bl	80103e0 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_2, HIGH_ROW);
 800fa14:	2100      	movs	r1, #0
 800fa16:	2002      	movs	r0, #2
 800fa18:	f000 fce2 	bl	80103e0 <lcd_clear_digit>
 800fa1c:	e036      	b.n	800fa8c <fm_lcd_date_hour+0x1c8>
            }
            else if(field == YEAR)
 800fa1e:	7b7b      	ldrb	r3, [r7, #13]
 800fa20:	2b02      	cmp	r3, #2
 800fa22:	d110      	bne.n	800fa46 <fm_lcd_date_hour+0x182>
            {
                lcd_clear_digit(DIGIT_7, HIGH_ROW);
 800fa24:	2100      	movs	r1, #0
 800fa26:	2007      	movs	r0, #7
 800fa28:	f000 fcda 	bl	80103e0 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_6, HIGH_ROW);
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	2006      	movs	r0, #6
 800fa30:	f000 fcd6 	bl	80103e0 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, HIGH_ROW);
 800fa34:	2100      	movs	r1, #0
 800fa36:	2005      	movs	r0, #5
 800fa38:	f000 fcd2 	bl	80103e0 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_4, HIGH_ROW);
 800fa3c:	2100      	movs	r1, #0
 800fa3e:	2004      	movs	r0, #4
 800fa40:	f000 fcce 	bl	80103e0 <lcd_clear_digit>
 800fa44:	e022      	b.n	800fa8c <fm_lcd_date_hour+0x1c8>
            }
            else if(field == HOUR)
 800fa46:	7b7b      	ldrb	r3, [r7, #13]
 800fa48:	2b03      	cmp	r3, #3
 800fa4a:	d108      	bne.n	800fa5e <fm_lcd_date_hour+0x19a>
            {
                lcd_clear_digit(DIGIT_2, LOW_ROW);
 800fa4c:	2101      	movs	r1, #1
 800fa4e:	2002      	movs	r0, #2
 800fa50:	f000 fcc6 	bl	80103e0 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_1, LOW_ROW);
 800fa54:	2101      	movs	r1, #1
 800fa56:	2001      	movs	r0, #1
 800fa58:	f000 fcc2 	bl	80103e0 <lcd_clear_digit>
 800fa5c:	e016      	b.n	800fa8c <fm_lcd_date_hour+0x1c8>
            }
            else if(field == MINUTE)
 800fa5e:	7b7b      	ldrb	r3, [r7, #13]
 800fa60:	2b04      	cmp	r3, #4
 800fa62:	d108      	bne.n	800fa76 <fm_lcd_date_hour+0x1b2>
            {
                lcd_clear_digit(DIGIT_4, LOW_ROW);
 800fa64:	2101      	movs	r1, #1
 800fa66:	2004      	movs	r0, #4
 800fa68:	f000 fcba 	bl	80103e0 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_3, LOW_ROW);
 800fa6c:	2101      	movs	r1, #1
 800fa6e:	2003      	movs	r0, #3
 800fa70:	f000 fcb6 	bl	80103e0 <lcd_clear_digit>
 800fa74:	e00a      	b.n	800fa8c <fm_lcd_date_hour+0x1c8>
            }
            else if(field == SECOND)
 800fa76:	7b7b      	ldrb	r3, [r7, #13]
 800fa78:	2b05      	cmp	r3, #5
 800fa7a:	d107      	bne.n	800fa8c <fm_lcd_date_hour+0x1c8>
            {
                lcd_clear_digit(DIGIT_6, LOW_ROW);
 800fa7c:	2101      	movs	r1, #1
 800fa7e:	2006      	movs	r0, #6
 800fa80:	f000 fcae 	bl	80103e0 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, LOW_ROW);
 800fa84:	2101      	movs	r1, #1
 800fa86:	2005      	movs	r0, #5
 800fa88:	f000 fcaa 	bl	80103e0 <lcd_clear_digit>
            }

            blink = 0;
 800fa8c:	4b06      	ldr	r3, [pc, #24]	; (800faa8 <fm_lcd_date_hour+0x1e4>)
 800fa8e:	2200      	movs	r2, #0
 800fa90:	601a      	str	r2, [r3, #0]
        else
        {
            blink = 1;
        }
    }
}
 800fa92:	e002      	b.n	800fa9a <fm_lcd_date_hour+0x1d6>
            blink = 1;
 800fa94:	4b04      	ldr	r3, [pc, #16]	; (800faa8 <fm_lcd_date_hour+0x1e4>)
 800fa96:	2201      	movs	r2, #1
 800fa98:	601a      	str	r2, [r3, #0]
}
 800fa9a:	bf00      	nop
 800fa9c:	3738      	adds	r7, #56	; 0x38
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	20001dbb 	.word	0x20001dbb
 800faa8:	2000011c 	.word	0x2000011c

0800faac <fm_lcd_format_number_in_line>:
 * @param Enumeracion rows_t de lcd.h
 * @retval arreglo con la información formateada tipo char.
 */
void fm_lcd_format_number_in_line(rows_t line, uint32_t data, char *p_str,
int length)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b084      	sub	sp, #16
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	60b9      	str	r1, [r7, #8]
 800fab4:	607a      	str	r2, [r7, #4]
 800fab6:	603b      	str	r3, [r7, #0]
 800fab8:	4603      	mov	r3, r0
 800faba:	73fb      	strb	r3, [r7, #15]
    if (line == HIGH_ROW)
 800fabc:	7bfb      	ldrb	r3, [r7, #15]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d106      	bne.n	800fad0 <fm_lcd_format_number_in_line+0x24>
    {
        snprintf(p_str, length, "%8lu", data);
 800fac2:	6839      	ldr	r1, [r7, #0]
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	4a09      	ldr	r2, [pc, #36]	; (800faec <fm_lcd_format_number_in_line+0x40>)
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f005 f8c7 	bl	8014c5c <sniprintf>
    }
    else if (line == LOW_ROW)
    {
        snprintf(p_str, length, "%7lu", data);
    }
}
 800face:	e008      	b.n	800fae2 <fm_lcd_format_number_in_line+0x36>
    else if (line == LOW_ROW)
 800fad0:	7bfb      	ldrb	r3, [r7, #15]
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	d105      	bne.n	800fae2 <fm_lcd_format_number_in_line+0x36>
        snprintf(p_str, length, "%7lu", data);
 800fad6:	6839      	ldr	r1, [r7, #0]
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	4a05      	ldr	r2, [pc, #20]	; (800faf0 <fm_lcd_format_number_in_line+0x44>)
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f005 f8bd 	bl	8014c5c <sniprintf>
}
 800fae2:	bf00      	nop
 800fae4:	3710      	adds	r7, #16
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
 800faea:	bf00      	nop
 800faec:	08015774 	.word	0x08015774
 800faf0:	0801577c 	.word	0x0801577c

0800faf4 <fm_lcd_fp_add_dot>:
 * @param str_size tamaño del string.
 * @retval int.
 *
 */
int fm_lcd_fp_add_dot(fmc_fp_t fp, char *p_str, int str_size)
{
 800faf4:	b590      	push	{r4, r7, lr}
 800faf6:	b087      	sub	sp, #28
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	f107 0408 	add.w	r4, r7, #8
 800fafe:	e884 0003 	stmia.w	r4, {r0, r1}
 800fb02:	607a      	str	r2, [r7, #4]
 800fb04:	603b      	str	r3, [r7, #0]
    int idx_now;

    /*
     * Si la resolución asignada por el usuario es 0, no hay nada que hacer.
     */
    if (fp.res == 0)
 800fb06:	7b3b      	ldrb	r3, [r7, #12]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d101      	bne.n	800fb10 <fm_lcd_fp_add_dot+0x1c>
    {
        return (0);
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	e031      	b.n	800fb74 <fm_lcd_fp_add_dot+0x80>
    }

    idx_now = strlen(p_str); //Como indice apunta a terminador nulo.
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7f0 fcd7 	bl	80004c4 <strlen>
 800fb16:	4603      	mov	r3, r0
 800fb18:	617b      	str	r3, [r7, #20]

    /*
     * Chequeo de contorno para ver si entra el punto o no.
     */

    if ((idx_now + 1 + 1) >= str_size)
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	3302      	adds	r3, #2
 800fb1e:	683a      	ldr	r2, [r7, #0]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	dc02      	bgt.n	800fb2a <fm_lcd_fp_add_dot+0x36>
    {
        return (-1);
 800fb24:	f04f 33ff 	mov.w	r3, #4294967295
 800fb28:	e024      	b.n	800fb74 <fm_lcd_fp_add_dot+0x80>
    }

    idx_end = idx_now - fp.res; //Como índice apunta a donde debe ir el '.'
 800fb2a:	7b3b      	ldrb	r3, [r7, #12]
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	1a9b      	subs	r3, r3, r2
 800fb32:	613b      	str	r3, [r7, #16]

    /*
     * Desplazo posiciones en el arreglo hasta llegar a la posición donde debe
     * ir ubicado el '.'
     */
    while (idx_now != idx_end)
 800fb34:	e00b      	b.n	800fb4e <fm_lcd_fp_add_dot+0x5a>
    {
        p_str[idx_now + 1] = p_str[idx_now];
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	687a      	ldr	r2, [r7, #4]
 800fb3a:	441a      	add	r2, r3
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	6879      	ldr	r1, [r7, #4]
 800fb42:	440b      	add	r3, r1
 800fb44:	7812      	ldrb	r2, [r2, #0]
 800fb46:	701a      	strb	r2, [r3, #0]
        idx_now--;
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	617b      	str	r3, [r7, #20]
    while (idx_now != idx_end)
 800fb4e:	697a      	ldr	r2, [r7, #20]
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d1ef      	bne.n	800fb36 <fm_lcd_fp_add_dot+0x42>
    }
    p_str[idx_now + 1] = p_str[idx_now];
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	687a      	ldr	r2, [r7, #4]
 800fb5a:	441a      	add	r2, r3
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	3301      	adds	r3, #1
 800fb60:	6879      	ldr	r1, [r7, #4]
 800fb62:	440b      	add	r3, r1
 800fb64:	7812      	ldrb	r2, [r2, #0]
 800fb66:	701a      	strb	r2, [r3, #0]
    p_str[idx_now] = '.';
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	687a      	ldr	r2, [r7, #4]
 800fb6c:	4413      	add	r3, r2
 800fb6e:	222e      	movs	r2, #46	; 0x2e
 800fb70:	701a      	strb	r2, [r3, #0]

    return (0);
 800fb72:	2300      	movs	r3, #0
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	371c      	adds	r7, #28
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd90      	pop	{r4, r7, pc}

0800fb7c <fm_lcd_fp_to_str>:
 * @param str_size tamaño del string.
 * @retval int.
 */
int fm_lcd_fp_to_str(fmc_fp_t fp, char leading_char, int str_width, char *p_str,
int str_size)
{
 800fb7c:	b490      	push	{r4, r7}
 800fb7e:	b088      	sub	sp, #32
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	f107 0408 	add.w	r4, r7, #8
 800fb86:	e884 0003 	stmia.w	r4, {r0, r1}
 800fb8a:	603b      	str	r3, [r7, #0]
 800fb8c:	4613      	mov	r3, r2
 800fb8e:	71fb      	strb	r3, [r7, #7]
    int idx_1 = 0;
 800fb90:	2300      	movs	r3, #0
 800fb92:	61fb      	str	r3, [r7, #28]
    /*
     * Este es el unico chequeo de contorno. Verifica que el tamaño del string
     * no sea menor a PCF8553_DATA_SIZE, calculado como suficiente para operar
     * con las líneas del lcd.
     */
    if (str_size < PCF8553_DATA_SIZE)
 800fb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb96:	2b13      	cmp	r3, #19
 800fb98:	dc02      	bgt.n	800fba0 <fm_lcd_fp_to_str+0x24>
    {
        return (-1);
 800fb9a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb9e:	e086      	b.n	800fcae <fm_lcd_fp_to_str+0x132>
    }

    /*
     * Esta linea es necesaria para representa bien a num = 0
     */
    p_str[idx_1] = fp.num % 10 + '0';
 800fba0:	68b9      	ldr	r1, [r7, #8]
 800fba2:	4b45      	ldr	r3, [pc, #276]	; (800fcb8 <fm_lcd_fp_to_str+0x13c>)
 800fba4:	fba3 2301 	umull	r2, r3, r3, r1
 800fba8:	08da      	lsrs	r2, r3, #3
 800fbaa:	4613      	mov	r3, r2
 800fbac:	009b      	lsls	r3, r3, #2
 800fbae:	4413      	add	r3, r2
 800fbb0:	005b      	lsls	r3, r3, #1
 800fbb2:	1aca      	subs	r2, r1, r3
 800fbb4:	b2d2      	uxtb	r2, r2
 800fbb6:	69fb      	ldr	r3, [r7, #28]
 800fbb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fbba:	440b      	add	r3, r1
 800fbbc:	3230      	adds	r2, #48	; 0x30
 800fbbe:	b2d2      	uxtb	r2, r2
 800fbc0:	701a      	strb	r2, [r3, #0]

    uint32_t num_aux = fp.num;
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	617b      	str	r3, [r7, #20]

    /*
     * Almaceno el número de atrás para adelante hasta que llegar al primer
     * dígito inclusive
     */
    while (fp.num / 10)
 800fbc6:	e019      	b.n	800fbfc <fm_lcd_fp_to_str+0x80>
    {
        idx_1++;
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	3301      	adds	r3, #1
 800fbcc:	61fb      	str	r3, [r7, #28]
        fp.num /= 10;
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	4a39      	ldr	r2, [pc, #228]	; (800fcb8 <fm_lcd_fp_to_str+0x13c>)
 800fbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800fbd6:	08db      	lsrs	r3, r3, #3
 800fbd8:	60bb      	str	r3, [r7, #8]
        p_str[idx_1] = fp.num % 10 + '0';
 800fbda:	68b9      	ldr	r1, [r7, #8]
 800fbdc:	4b36      	ldr	r3, [pc, #216]	; (800fcb8 <fm_lcd_fp_to_str+0x13c>)
 800fbde:	fba3 2301 	umull	r2, r3, r3, r1
 800fbe2:	08da      	lsrs	r2, r3, #3
 800fbe4:	4613      	mov	r3, r2
 800fbe6:	009b      	lsls	r3, r3, #2
 800fbe8:	4413      	add	r3, r2
 800fbea:	005b      	lsls	r3, r3, #1
 800fbec:	1aca      	subs	r2, r1, r3
 800fbee:	b2d2      	uxtb	r2, r2
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fbf4:	440b      	add	r3, r1
 800fbf6:	3230      	adds	r2, #48	; 0x30
 800fbf8:	b2d2      	uxtb	r2, r2
 800fbfa:	701a      	strb	r2, [r3, #0]
    while (fp.num / 10)
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	2b09      	cmp	r3, #9
 800fc00:	d8e2      	bhi.n	800fbc8 <fm_lcd_fp_to_str+0x4c>

    /*
     * Si se midió 0 pulsos, se rellena con 0 hasta pasar el punto y asi se
     * mantiene la resolución deseada.
     */
    if (num_aux == 0)
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d119      	bne.n	800fc3c <fm_lcd_fp_to_str+0xc0>
    {
        while (idx_1 < fp.res)
 800fc08:	e013      	b.n	800fc32 <fm_lcd_fp_to_str+0xb6>
        {
            idx_1++;
 800fc0a:	69fb      	ldr	r3, [r7, #28]
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = fp.num % 10 + '0';
 800fc10:	68b9      	ldr	r1, [r7, #8]
 800fc12:	4b29      	ldr	r3, [pc, #164]	; (800fcb8 <fm_lcd_fp_to_str+0x13c>)
 800fc14:	fba3 2301 	umull	r2, r3, r3, r1
 800fc18:	08da      	lsrs	r2, r3, #3
 800fc1a:	4613      	mov	r3, r2
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	4413      	add	r3, r2
 800fc20:	005b      	lsls	r3, r3, #1
 800fc22:	1aca      	subs	r2, r1, r3
 800fc24:	b2d2      	uxtb	r2, r2
 800fc26:	69fb      	ldr	r3, [r7, #28]
 800fc28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc2a:	440b      	add	r3, r1
 800fc2c:	3230      	adds	r2, #48	; 0x30
 800fc2e:	b2d2      	uxtb	r2, r2
 800fc30:	701a      	strb	r2, [r3, #0]
        while (idx_1 < fp.res)
 800fc32:	7b3b      	ldrb	r3, [r7, #12]
 800fc34:	461a      	mov	r2, r3
 800fc36:	69fb      	ldr	r3, [r7, #28]
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	dbe6      	blt.n	800fc0a <fm_lcd_fp_to_str+0x8e>

    /*
     * Si el caracter a completar no es 0, se lo debe agregar al final del
     * arreglo hasta completar el largo de la linea (7 u 8 caracteres + \0).
     */
    if (leading_char)
 800fc3c:	79fb      	ldrb	r3, [r7, #7]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d00d      	beq.n	800fc5e <fm_lcd_fp_to_str+0xe2>
    {
        while (idx_1 < str_width - 1)
 800fc42:	e007      	b.n	800fc54 <fm_lcd_fp_to_str+0xd8>
        {
            idx_1++;
 800fc44:	69fb      	ldr	r3, [r7, #28]
 800fc46:	3301      	adds	r3, #1
 800fc48:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = leading_char;
 800fc4a:	69fb      	ldr	r3, [r7, #28]
 800fc4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc4e:	4413      	add	r3, r2
 800fc50:	79fa      	ldrb	r2, [r7, #7]
 800fc52:	701a      	strb	r2, [r3, #0]
        while (idx_1 < str_width - 1)
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	3b01      	subs	r3, #1
 800fc58:	69fa      	ldr	r2, [r7, #28]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	dbf2      	blt.n	800fc44 <fm_lcd_fp_to_str+0xc8>
        }
    }
    p_str[idx_1] = '\0';
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc62:	4413      	add	r3, r2
 800fc64:	2200      	movs	r2, #0
 800fc66:	701a      	strb	r2, [r3, #0]
    idx_1--;
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	3b01      	subs	r3, #1
 800fc6c:	61fb      	str	r3, [r7, #28]

    /*
     *Esta sección da vuelta el arreglo ya que se completó al revés.
     */
    int idx_2 = 0;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	61bb      	str	r3, [r7, #24]
    char ch_temp;

    while (idx_1 > idx_2)
 800fc72:	e017      	b.n	800fca4 <fm_lcd_fp_to_str+0x128>
    {
        ch_temp = p_str[idx_1];
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc78:	4413      	add	r3, r2
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	74fb      	strb	r3, [r7, #19]
        p_str[idx_1] = p_str[idx_2];
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc82:	441a      	add	r2, r3
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc88:	440b      	add	r3, r1
 800fc8a:	7812      	ldrb	r2, [r2, #0]
 800fc8c:	701a      	strb	r2, [r3, #0]
        p_str[idx_2] = ch_temp;
 800fc8e:	69bb      	ldr	r3, [r7, #24]
 800fc90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc92:	4413      	add	r3, r2
 800fc94:	7cfa      	ldrb	r2, [r7, #19]
 800fc96:	701a      	strb	r2, [r3, #0]
        idx_1--;
 800fc98:	69fb      	ldr	r3, [r7, #28]
 800fc9a:	3b01      	subs	r3, #1
 800fc9c:	61fb      	str	r3, [r7, #28]
        idx_2++;
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	3301      	adds	r3, #1
 800fca2:	61bb      	str	r3, [r7, #24]
    while (idx_1 > idx_2)
 800fca4:	69fa      	ldr	r2, [r7, #28]
 800fca6:	69bb      	ldr	r3, [r7, #24]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	dce3      	bgt.n	800fc74 <fm_lcd_fp_to_str+0xf8>
    }

    return (0);
 800fcac:	2300      	movs	r3, #0
}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3720      	adds	r7, #32
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bc90      	pop	{r4, r7}
 800fcb6:	4770      	bx	lr
 800fcb8:	cccccccd 	.word	0xcccccccd

0800fcbc <fm_lcd_init>:
 * @brief Es la primera instrucción a llamar para usar el lcd.
 * @param  None
 * @retval None
 */
void fm_lcd_init()
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800fcc0:	f000 fb66 	bl	8010390 <lcd_clear_all>
    lcd_init();
 800fcc4:	f001 f9fc 	bl	80110c0 <lcd_init>
}
 800fcc8:	bf00      	nop
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <fm_lcd_k_factor>:
 * configuración del factor de calibración K.
 * @param  None
 * @retval None
 */
void fm_lcd_k_factor(fm_event_t event_id, sel_digit_t digit_modify)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b08e      	sub	sp, #56	; 0x38
 800fcd0:	af02      	add	r7, sp, #8
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	460a      	mov	r2, r1
 800fcd6:	71fb      	strb	r3, [r7, #7]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(K_FACTOR), '0',
 800fcdc:	f107 0320 	add.w	r3, r7, #32
 800fce0:	2100      	movs	r1, #0
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7fe ffdc 	bl	800eca0 <fm_factory_get_k_factor>
 800fce8:	2314      	movs	r3, #20
 800fcea:	9301      	str	r3, [sp, #4]
 800fcec:	f107 030c 	add.w	r3, r7, #12
 800fcf0:	9300      	str	r3, [sp, #0]
 800fcf2:	2309      	movs	r3, #9
 800fcf4:	2230      	movs	r2, #48	; 0x30
 800fcf6:	f107 0120 	add.w	r1, r7, #32
 800fcfa:	c903      	ldmia	r1, {r0, r1}
 800fcfc:	f7ff ff3e 	bl	800fb7c <fm_lcd_fp_to_str>
    LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(K_FACTOR), lcd_msg,
 800fd00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd04:	2100      	movs	r1, #0
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fe ffca 	bl	800eca0 <fm_factory_get_k_factor>
 800fd0c:	f107 020c 	add.w	r2, r7, #12
 800fd10:	2314      	movs	r3, #20
 800fd12:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fd16:	c903      	ldmia	r1, {r0, r1}
 800fd18:	f7ff feec 	bl	800faf4 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fd1c:	f107 030c 	add.w	r3, r7, #12
 800fd20:	2100      	movs	r1, #0
 800fd22:	4618      	mov	r0, r3
 800fd24:	f000 f91c 	bl	800ff60 <fm_lcd_puts>

    if(event_id == EVENT_KEY_ENTER ||
 800fd28:	79fb      	ldrb	r3, [r7, #7]
 800fd2a:	2b04      	cmp	r3, #4
 800fd2c:	d006      	beq.n	800fd3c <fm_lcd_k_factor+0x70>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fd2e:	4b1e      	ldr	r3, [pc, #120]	; (800fda8 <fm_lcd_k_factor+0xdc>)
 800fd30:	781b      	ldrb	r3, [r3, #0]
    if(event_id == EVENT_KEY_ENTER ||
 800fd32:	2b04      	cmp	r3, #4
 800fd34:	d106      	bne.n	800fd44 <fm_lcd_k_factor+0x78>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fd36:	79fb      	ldrb	r3, [r7, #7]
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d103      	bne.n	800fd44 <fm_lcd_k_factor+0x78>
    {
        blink = 1;
 800fd3c:	4b1b      	ldr	r3, [pc, #108]	; (800fdac <fm_lcd_k_factor+0xe0>)
 800fd3e:	2201      	movs	r2, #1
 800fd40:	601a      	str	r2, [r3, #0]
 800fd42:	e016      	b.n	800fd72 <fm_lcd_k_factor+0xa6>
    }
    else if(event_id == EVENT_KEY_DOWN ||
 800fd44:	79fb      	ldrb	r3, [r7, #7]
 800fd46:	2b03      	cmp	r3, #3
 800fd48:	d010      	beq.n	800fd6c <fm_lcd_k_factor+0xa0>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fd4a:	4b17      	ldr	r3, [pc, #92]	; (800fda8 <fm_lcd_k_factor+0xdc>)
 800fd4c:	781b      	ldrb	r3, [r3, #0]
    else if(event_id == EVENT_KEY_DOWN ||
 800fd4e:	2b03      	cmp	r3, #3
 800fd50:	d102      	bne.n	800fd58 <fm_lcd_k_factor+0x8c>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fd52:	79fb      	ldrb	r3, [r7, #7]
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d009      	beq.n	800fd6c <fm_lcd_k_factor+0xa0>
 800fd58:	79fb      	ldrb	r3, [r7, #7]
 800fd5a:	2b02      	cmp	r3, #2
 800fd5c:	d006      	beq.n	800fd6c <fm_lcd_k_factor+0xa0>
    event_id == EVENT_KEY_UP ||
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fd5e:	4b12      	ldr	r3, [pc, #72]	; (800fda8 <fm_lcd_k_factor+0xdc>)
 800fd60:	781b      	ldrb	r3, [r3, #0]
    event_id == EVENT_KEY_UP ||
 800fd62:	2b02      	cmp	r3, #2
 800fd64:	d105      	bne.n	800fd72 <fm_lcd_k_factor+0xa6>
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fd66:	79fb      	ldrb	r3, [r7, #7]
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d102      	bne.n	800fd72 <fm_lcd_k_factor+0xa6>
    {
        blink = 0;
 800fd6c:	4b0f      	ldr	r3, [pc, #60]	; (800fdac <fm_lcd_k_factor+0xe0>)
 800fd6e:	2200      	movs	r2, #0
 800fd70:	601a      	str	r2, [r3, #0]
    }

    if(blink == 1)
 800fd72:	4b0e      	ldr	r3, [pc, #56]	; (800fdac <fm_lcd_k_factor+0xe0>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d10b      	bne.n	800fd92 <fm_lcd_k_factor+0xc6>
    {
        lcd_clear_digit(DIG_7 - digit_modify, HIGH_ROW);
 800fd7a:	79bb      	ldrb	r3, [r7, #6]
 800fd7c:	f1c3 0307 	rsb	r3, r3, #7
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	2100      	movs	r1, #0
 800fd84:	4618      	mov	r0, r3
 800fd86:	f000 fb2b 	bl	80103e0 <lcd_clear_digit>
        blink = 0;
 800fd8a:	4b08      	ldr	r3, [pc, #32]	; (800fdac <fm_lcd_k_factor+0xe0>)
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	601a      	str	r2, [r3, #0]
 800fd90:	e002      	b.n	800fd98 <fm_lcd_k_factor+0xcc>
    }
    else
    {
        blink = 1;
 800fd92:	4b06      	ldr	r3, [pc, #24]	; (800fdac <fm_lcd_k_factor+0xe0>)
 800fd94:	2201      	movs	r2, #1
 800fd96:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(K, 0x00);
 800fd98:	2100      	movs	r1, #0
 800fd9a:	200b      	movs	r0, #11
 800fd9c:	f001 fc46 	bl	801162c <lcd_set_symbol>
}
 800fda0:	bf00      	nop
 800fda2:	3730      	adds	r7, #48	; 0x30
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	20001dbb 	.word	0x20001dbb
 800fdac:	2000011c 	.word	0x2000011c

0800fdb0 <fm_lcd_k_lin>:

void fm_lcd_k_lin(sel_k k_sel, fm_event_t event_id, sel_digit_k_lin_t digit_lin_modify)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b090      	sub	sp, #64	; 0x40
 800fdb4:	af02      	add	r7, sp, #8
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	71fb      	strb	r3, [r7, #7]
 800fdba:	460b      	mov	r3, r1
 800fdbc:	71bb      	strb	r3, [r7, #6]
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	717b      	strb	r3, [r7, #5]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(k_sel), '0', LINE_0_DIGITS,
 800fdc2:	f107 0320 	add.w	r3, r7, #32
 800fdc6:	79fa      	ldrb	r2, [r7, #7]
 800fdc8:	4611      	mov	r1, r2
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7fe ff68 	bl	800eca0 <fm_factory_get_k_factor>
 800fdd0:	2314      	movs	r3, #20
 800fdd2:	9301      	str	r3, [sp, #4]
 800fdd4:	f107 030c 	add.w	r3, r7, #12
 800fdd8:	9300      	str	r3, [sp, #0]
 800fdda:	2309      	movs	r3, #9
 800fddc:	2230      	movs	r2, #48	; 0x30
 800fdde:	f107 0120 	add.w	r1, r7, #32
 800fde2:	c903      	ldmia	r1, {r0, r1}
 800fde4:	f7ff feca 	bl	800fb7c <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(k_sel), lcd_msg,
 800fde8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fdec:	79fa      	ldrb	r2, [r7, #7]
 800fdee:	4611      	mov	r1, r2
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7fe ff55 	bl	800eca0 <fm_factory_get_k_factor>
 800fdf6:	f107 020c 	add.w	r2, r7, #12
 800fdfa:	2314      	movs	r3, #20
 800fdfc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fe00:	c903      	ldmia	r1, {r0, r1}
 800fe02:	f7ff fe77 	bl	800faf4 <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fe06:	f107 030c 	add.w	r3, r7, #12
 800fe0a:	2100      	movs	r1, #0
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f000 f8a7 	bl	800ff60 <fm_lcd_puts>

    fm_lcd_fp_to_str(fm_factory_get_frec_lin(k_sel), '0', LINE_1_DIGITS,
 800fe12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fe16:	79fa      	ldrb	r2, [r7, #7]
 800fe18:	4611      	mov	r1, r2
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7fe ff9c 	bl	800ed58 <fm_factory_get_frec_lin>
 800fe20:	2314      	movs	r3, #20
 800fe22:	9301      	str	r3, [sp, #4]
 800fe24:	f107 030c 	add.w	r3, r7, #12
 800fe28:	9300      	str	r3, [sp, #0]
 800fe2a:	2308      	movs	r3, #8
 800fe2c:	2230      	movs	r2, #48	; 0x30
 800fe2e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fe32:	c903      	ldmia	r1, {r0, r1}
 800fe34:	f7ff fea2 	bl	800fb7c <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fe38:	f107 030c 	add.w	r3, r7, #12
 800fe3c:	2101      	movs	r1, #1
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f000 f88e 	bl	800ff60 <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800fe44:	2101      	movs	r1, #1
 800fe46:	2000      	movs	r0, #0
 800fe48:	f000 faca 	bl	80103e0 <lcd_clear_digit>
    lcd_clear_digit(DIGIT_1, LOW_ROW);
 800fe4c:	2101      	movs	r1, #1
 800fe4e:	2001      	movs	r0, #1
 800fe50:	f000 fac6 	bl	80103e0 <lcd_clear_digit>
    lcd_clear_digit(DIGIT_2, LOW_ROW);
 800fe54:	2101      	movs	r1, #1
 800fe56:	2002      	movs	r0, #2
 800fe58:	f000 fac2 	bl	80103e0 <lcd_clear_digit>

    if(event_id == EVENT_KEY_ENTER ||
 800fe5c:	79bb      	ldrb	r3, [r7, #6]
 800fe5e:	2b04      	cmp	r3, #4
 800fe60:	d006      	beq.n	800fe70 <fm_lcd_k_lin+0xc0>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fe62:	4b3d      	ldr	r3, [pc, #244]	; (800ff58 <fm_lcd_k_lin+0x1a8>)
 800fe64:	781b      	ldrb	r3, [r3, #0]
    if(event_id == EVENT_KEY_ENTER ||
 800fe66:	2b04      	cmp	r3, #4
 800fe68:	d106      	bne.n	800fe78 <fm_lcd_k_lin+0xc8>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fe6a:	79bb      	ldrb	r3, [r7, #6]
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	d103      	bne.n	800fe78 <fm_lcd_k_lin+0xc8>
    {
        blink = 1;
 800fe70:	4b3a      	ldr	r3, [pc, #232]	; (800ff5c <fm_lcd_k_lin+0x1ac>)
 800fe72:	2201      	movs	r2, #1
 800fe74:	601a      	str	r2, [r3, #0]
 800fe76:	e016      	b.n	800fea6 <fm_lcd_k_lin+0xf6>
    }
    else if(event_id == EVENT_KEY_DOWN ||
 800fe78:	79bb      	ldrb	r3, [r7, #6]
 800fe7a:	2b03      	cmp	r3, #3
 800fe7c:	d010      	beq.n	800fea0 <fm_lcd_k_lin+0xf0>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fe7e:	4b36      	ldr	r3, [pc, #216]	; (800ff58 <fm_lcd_k_lin+0x1a8>)
 800fe80:	781b      	ldrb	r3, [r3, #0]
    else if(event_id == EVENT_KEY_DOWN ||
 800fe82:	2b03      	cmp	r3, #3
 800fe84:	d102      	bne.n	800fe8c <fm_lcd_k_lin+0xdc>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fe86:	79bb      	ldrb	r3, [r7, #6]
 800fe88:	2b01      	cmp	r3, #1
 800fe8a:	d009      	beq.n	800fea0 <fm_lcd_k_lin+0xf0>
 800fe8c:	79bb      	ldrb	r3, [r7, #6]
 800fe8e:	2b02      	cmp	r3, #2
 800fe90:	d006      	beq.n	800fea0 <fm_lcd_k_lin+0xf0>
    event_id == EVENT_KEY_UP ||
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fe92:	4b31      	ldr	r3, [pc, #196]	; (800ff58 <fm_lcd_k_lin+0x1a8>)
 800fe94:	781b      	ldrb	r3, [r3, #0]
    event_id == EVENT_KEY_UP ||
 800fe96:	2b02      	cmp	r3, #2
 800fe98:	d105      	bne.n	800fea6 <fm_lcd_k_lin+0xf6>
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fe9a:	79bb      	ldrb	r3, [r7, #6]
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	d102      	bne.n	800fea6 <fm_lcd_k_lin+0xf6>
    {
        blink = 0;
 800fea0:	4b2e      	ldr	r3, [pc, #184]	; (800ff5c <fm_lcd_k_lin+0x1ac>)
 800fea2:	2200      	movs	r2, #0
 800fea4:	601a      	str	r2, [r3, #0]
    }

    if(digit_lin_modify <= DIG_LIN_7)
 800fea6:	797b      	ldrb	r3, [r7, #5]
 800fea8:	2b07      	cmp	r3, #7
 800feaa:	d813      	bhi.n	800fed4 <fm_lcd_k_lin+0x124>
    {
        if(blink == 1)
 800feac:	4b2b      	ldr	r3, [pc, #172]	; (800ff5c <fm_lcd_k_lin+0x1ac>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	d10b      	bne.n	800fecc <fm_lcd_k_lin+0x11c>
        {
            lcd_clear_digit(DIG_LIN_7 - digit_lin_modify, HIGH_ROW);
 800feb4:	797b      	ldrb	r3, [r7, #5]
 800feb6:	f1c3 0307 	rsb	r3, r3, #7
 800feba:	b2db      	uxtb	r3, r3
 800febc:	2100      	movs	r1, #0
 800febe:	4618      	mov	r0, r3
 800fec0:	f000 fa8e 	bl	80103e0 <lcd_clear_digit>
            blink = 0;
 800fec4:	4b25      	ldr	r3, [pc, #148]	; (800ff5c <fm_lcd_k_lin+0x1ac>)
 800fec6:	2200      	movs	r2, #0
 800fec8:	601a      	str	r2, [r3, #0]
 800feca:	e016      	b.n	800fefa <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 800fecc:	4b23      	ldr	r3, [pc, #140]	; (800ff5c <fm_lcd_k_lin+0x1ac>)
 800fece:	2201      	movs	r2, #1
 800fed0:	601a      	str	r2, [r3, #0]
 800fed2:	e012      	b.n	800fefa <fm_lcd_k_lin+0x14a>
        }
    }
    else
    {
        if(blink == 1)
 800fed4:	4b21      	ldr	r3, [pc, #132]	; (800ff5c <fm_lcd_k_lin+0x1ac>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2b01      	cmp	r3, #1
 800feda:	d10b      	bne.n	800fef4 <fm_lcd_k_lin+0x144>
        {
            lcd_clear_digit(DIG_LIN_6 - digit_lin_modify + DIG_LIN_8, LOW_ROW);
 800fedc:	797b      	ldrb	r3, [r7, #5]
 800fede:	f1c3 030e 	rsb	r3, r3, #14
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	2101      	movs	r1, #1
 800fee6:	4618      	mov	r0, r3
 800fee8:	f000 fa7a 	bl	80103e0 <lcd_clear_digit>
            blink = 0;
 800feec:	4b1b      	ldr	r3, [pc, #108]	; (800ff5c <fm_lcd_k_lin+0x1ac>)
 800feee:	2200      	movs	r2, #0
 800fef0:	601a      	str	r2, [r3, #0]
 800fef2:	e002      	b.n	800fefa <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 800fef4:	4b19      	ldr	r3, [pc, #100]	; (800ff5c <fm_lcd_k_lin+0x1ac>)
 800fef6:	2201      	movs	r2, #1
 800fef8:	601a      	str	r2, [r3, #0]
        }
    }

    lcd_set_symbol(F, 0x00);
 800fefa:	2100      	movs	r1, #0
 800fefc:	2010      	movs	r0, #16
 800fefe:	f001 fb95 	bl	801162c <lcd_set_symbol>
    if(k_sel == K_LIN_1)
 800ff02:	79fb      	ldrb	r3, [r7, #7]
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d103      	bne.n	800ff10 <fm_lcd_k_lin+0x160>
    {
        lcd_set_symbol(LIN_1, 0x00);
 800ff08:	2100      	movs	r1, #0
 800ff0a:	2011      	movs	r0, #17
 800ff0c:	f001 fb8e 	bl	801162c <lcd_set_symbol>
    }
    if(k_sel == K_LIN_2)
 800ff10:	79fb      	ldrb	r3, [r7, #7]
 800ff12:	2b02      	cmp	r3, #2
 800ff14:	d103      	bne.n	800ff1e <fm_lcd_k_lin+0x16e>
    {
        lcd_set_symbol(LIN_2, 0x00);
 800ff16:	2100      	movs	r1, #0
 800ff18:	2012      	movs	r0, #18
 800ff1a:	f001 fb87 	bl	801162c <lcd_set_symbol>
    }
    if(k_sel == K_LIN_3)
 800ff1e:	79fb      	ldrb	r3, [r7, #7]
 800ff20:	2b03      	cmp	r3, #3
 800ff22:	d103      	bne.n	800ff2c <fm_lcd_k_lin+0x17c>
    {
        lcd_set_symbol(LIN_3, 0x00);
 800ff24:	2100      	movs	r1, #0
 800ff26:	2013      	movs	r0, #19
 800ff28:	f001 fb80 	bl	801162c <lcd_set_symbol>
    }
    if(k_sel == K_LIN_4)
 800ff2c:	79fb      	ldrb	r3, [r7, #7]
 800ff2e:	2b04      	cmp	r3, #4
 800ff30:	d103      	bne.n	800ff3a <fm_lcd_k_lin+0x18a>
    {
        lcd_set_symbol(LIN_4, 0x00);
 800ff32:	2100      	movs	r1, #0
 800ff34:	2014      	movs	r0, #20
 800ff36:	f001 fb79 	bl	801162c <lcd_set_symbol>
    }
    if(k_sel == K_LIN_5)
 800ff3a:	79fb      	ldrb	r3, [r7, #7]
 800ff3c:	2b05      	cmp	r3, #5
 800ff3e:	d103      	bne.n	800ff48 <fm_lcd_k_lin+0x198>
    {
        lcd_set_symbol(LIN_5, 0x00);
 800ff40:	2100      	movs	r1, #0
 800ff42:	2015      	movs	r0, #21
 800ff44:	f001 fb72 	bl	801162c <lcd_set_symbol>
    }
    lcd_set_symbol(HZ,0x00);
 800ff48:	2100      	movs	r1, #0
 800ff4a:	2016      	movs	r0, #22
 800ff4c:	f001 fb6e 	bl	801162c <lcd_set_symbol>
}
 800ff50:	bf00      	nop
 800ff52:	3738      	adds	r7, #56	; 0x38
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	20001dbb 	.word	0x20001dbb
 800ff5c:	2000011c 	.word	0x2000011c

0800ff60 <fm_lcd_puts>:
 * @param Arreglo a imprimir.
 * @param Fila donde se coloca el arreglo a imprimir.
 * @retval None
 */
void fm_lcd_puts(const char *c, const rows_t row)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b084      	sub	sp, #16
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	460b      	mov	r3, r1
 800ff6a:	70fb      	strb	r3, [r7, #3]
    uint8_t col = 0;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	73fb      	strb	r3, [r7, #15]
    uint8_t col_limit;

    if (row == 0)
 800ff70:	78fb      	ldrb	r3, [r7, #3]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d102      	bne.n	800ff7c <fm_lcd_puts+0x1c>
    {
        col_limit = LINE_0_DIGITS - 1;
 800ff76:	2308      	movs	r3, #8
 800ff78:	73bb      	strb	r3, [r7, #14]
 800ff7a:	e026      	b.n	800ffca <fm_lcd_puts+0x6a>
    }
    else
    {
        col_limit = LINE_1_DIGITS - 1;
 800ff7c:	2307      	movs	r3, #7
 800ff7e:	73bb      	strb	r3, [r7, #14]
    }

    while ((*c) && (col < col_limit))
 800ff80:	e023      	b.n	800ffca <fm_lcd_puts+0x6a>
    {
        if (((*c >= '0') && (*c <= '9')) || (*c == ' ') || (*c == '.'))
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	781b      	ldrb	r3, [r3, #0]
 800ff86:	2b2f      	cmp	r3, #47	; 0x2f
 800ff88:	d903      	bls.n	800ff92 <fm_lcd_puts+0x32>
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	2b39      	cmp	r3, #57	; 0x39
 800ff90:	d907      	bls.n	800ffa2 <fm_lcd_puts+0x42>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	2b20      	cmp	r3, #32
 800ff98:	d003      	beq.n	800ffa2 <fm_lcd_puts+0x42>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	2b2e      	cmp	r3, #46	; 0x2e
 800ffa0:	d106      	bne.n	800ffb0 <fm_lcd_puts+0x50>
        {
            lcd_put_char(*c, col, row);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	78fa      	ldrb	r2, [r7, #3]
 800ffa8:	7bf9      	ldrb	r1, [r7, #15]
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f001 f88e 	bl	80110cc <lcd_put_char>
        }
        col++;
 800ffb0:	7bfb      	ldrb	r3, [r7, #15]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	73fb      	strb	r3, [r7, #15]
        c++;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	3301      	adds	r3, #1
 800ffba:	607b      	str	r3, [r7, #4]
        if (*c == '.')
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	2b2e      	cmp	r3, #46	; 0x2e
 800ffc2:	d102      	bne.n	800ffca <fm_lcd_puts+0x6a>
        {
            col--;
 800ffc4:	7bfb      	ldrb	r3, [r7, #15]
 800ffc6:	3b01      	subs	r3, #1
 800ffc8:	73fb      	strb	r3, [r7, #15]
    while ((*c) && (col < col_limit))
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d003      	beq.n	800ffda <fm_lcd_puts+0x7a>
 800ffd2:	7bfa      	ldrb	r2, [r7, #15]
 800ffd4:	7bbb      	ldrb	r3, [r7, #14]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d3d3      	bcc.n	800ff82 <fm_lcd_puts+0x22>
        }
    }
}
 800ffda:	bf00      	nop
 800ffdc:	3710      	adds	r7, #16
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}

0800ffe2 <fm_lcd_refresh>:
 * la librería de mas bajo nivel 'lcd.h'.
 * @param  None
 * @retval None
 */
void fm_lcd_refresh()
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	af00      	add	r7, sp, #0
    lcd_refresh();
 800ffe6:	f001 fa6f 	bl	80114c8 <lcd_refresh>
}
 800ffea:	bf00      	nop
 800ffec:	bd80      	pop	{r7, pc}

0800ffee <fm_lcd_ttl_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_ttl_rate()
{
 800ffee:	b580      	push	{r7, lr}
 800fff0:	b0b8      	sub	sp, #224	; 0xe0
 800fff2:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_ttl().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800fff4:	f107 0318 	add.w	r3, r7, #24
 800fff8:	4618      	mov	r0, r3
 800fffa:	f004 fd5b 	bl	8014ab4 <fmc_get_ttl>
 800fffe:	2314      	movs	r3, #20
 8010000:	9301      	str	r3, [sp, #4]
 8010002:	1d3b      	adds	r3, r7, #4
 8010004:	9300      	str	r3, [sp, #0]
 8010006:	2309      	movs	r3, #9
 8010008:	2220      	movs	r2, #32
 801000a:	f107 0120 	add.w	r1, r7, #32
 801000e:	c903      	ldmia	r1, {r0, r1}
 8010010:	f7ff fdb4 	bl	800fb7c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_ttl().volume, lcd_msg, sizeof(lcd_msg));
 8010014:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010018:	4618      	mov	r0, r3
 801001a:	f004 fd4b 	bl	8014ab4 <fmc_get_ttl>
 801001e:	1d3a      	adds	r2, r7, #4
 8010020:	2314      	movs	r3, #20
 8010022:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010026:	c903      	ldmia	r1, {r0, r1}
 8010028:	f7ff fd64 	bl	800faf4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 801002c:	1d3b      	adds	r3, r7, #4
 801002e:	2100      	movs	r1, #0
 8010030:	4618      	mov	r0, r3
 8010032:	f7ff ff95 	bl	800ff60 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 8010036:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801003a:	4618      	mov	r0, r3
 801003c:	f004 fcfa 	bl	8014a34 <fmc_get_rate>
 8010040:	2314      	movs	r3, #20
 8010042:	9301      	str	r3, [sp, #4]
 8010044:	1d3b      	adds	r3, r7, #4
 8010046:	9300      	str	r3, [sp, #0]
 8010048:	2308      	movs	r3, #8
 801004a:	2220      	movs	r2, #32
 801004c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8010050:	c903      	ldmia	r1, {r0, r1}
 8010052:	f7ff fd93 	bl	800fb7c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 8010056:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801005a:	4618      	mov	r0, r3
 801005c:	f004 fcea 	bl	8014a34 <fmc_get_rate>
 8010060:	1d3a      	adds	r2, r7, #4
 8010062:	2314      	movs	r3, #20
 8010064:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8010068:	c903      	ldmia	r1, {r0, r1}
 801006a:	f7ff fd43 	bl	800faf4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 801006e:	1d3b      	adds	r3, r7, #4
 8010070:	2101      	movs	r1, #1
 8010072:	4618      	mov	r0, r3
 8010074:	f7ff ff74 	bl	800ff60 <fm_lcd_puts>

    lcd_set_symbol(TTL, 0x0);
 8010078:	2100      	movs	r1, #0
 801007a:	2005      	movs	r0, #5
 801007c:	f001 fad6 	bl	801162c <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 8010080:	2100      	movs	r1, #0
 8010082:	2002      	movs	r0, #2
 8010084:	f001 fad2 	bl	801162c <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_ttl().unit_volume, 0x0);
 8010088:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801008c:	4618      	mov	r0, r3
 801008e:	f004 fd11 	bl	8014ab4 <fmc_get_ttl>
 8010092:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8010096:	2100      	movs	r1, #0
 8010098:	4618      	mov	r0, r3
 801009a:	f001 fe87 	bl	8011dac <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 801009e:	2100      	movs	r1, #0
 80100a0:	2007      	movs	r0, #7
 80100a2:	f001 fac3 	bl	801162c <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_ttl().unit_time, 0x0);
 80100a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80100aa:	4618      	mov	r0, r3
 80100ac:	f004 fd02 	bl	8014ab4 <fmc_get_ttl>
 80100b0:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 80100b4:	2100      	movs	r1, #0
 80100b6:	4618      	mov	r0, r3
 80100b8:	f001 fe36 	bl	8011d28 <lcd_set_time_unit>
}
 80100bc:	bf00      	nop
 80100be:	37d8      	adds	r7, #216	; 0xd8
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <fm_lcd_units_tim>:
 * configuración de unidades tiempo y la resolución del factor RATE.
 * @param  None
 * @retval None
 */
void fm_lcd_units_tim(fm_event_t event_id)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b0a6      	sub	sp, #152	; 0x98
 80100c8:	af02      	add	r7, sp, #8
 80100ca:	4603      	mov	r3, r0
 80100cc:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_tim(), '0', LINE_1_DIGITS, lcd_msg,
 80100ce:	f107 0320 	add.w	r3, r7, #32
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7fe fdc0 	bl	800ec58 <fm_factory_get_units_tim>
 80100d8:	2314      	movs	r3, #20
 80100da:	9301      	str	r3, [sp, #4]
 80100dc:	f107 030c 	add.w	r3, r7, #12
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	2308      	movs	r3, #8
 80100e4:	2230      	movs	r2, #48	; 0x30
 80100e6:	f107 0120 	add.w	r1, r7, #32
 80100ea:	c903      	ldmia	r1, {r0, r1}
 80100ec:	f7ff fd46 	bl	800fb7c <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_tim(), lcd_msg, sizeof(lcd_msg));
 80100f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7fe fdaf 	bl	800ec58 <fm_factory_get_units_tim>
 80100fa:	f107 020c 	add.w	r2, r7, #12
 80100fe:	2314      	movs	r3, #20
 8010100:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010104:	c903      	ldmia	r1, {r0, r1}
 8010106:	f7ff fcf5 	bl	800faf4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 801010a:	f107 030c 	add.w	r3, r7, #12
 801010e:	2101      	movs	r1, #1
 8010110:	4618      	mov	r0, r3
 8010112:	f7ff ff25 	bl	800ff60 <fm_lcd_puts>

    if(event_id != EVENT_LCD_REFRESH ||
 8010116:	79fb      	ldrb	r3, [r7, #7]
 8010118:	2b01      	cmp	r3, #1
 801011a:	d106      	bne.n	801012a <fm_lcd_units_tim+0x66>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 801011c:	4b35      	ldr	r3, [pc, #212]	; (80101f4 <fm_lcd_units_tim+0x130>)
 801011e:	781b      	ldrb	r3, [r3, #0]
    if(event_id != EVENT_LCD_REFRESH ||
 8010120:	2b01      	cmp	r3, #1
 8010122:	d005      	beq.n	8010130 <fm_lcd_units_tim+0x6c>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 8010124:	79fb      	ldrb	r3, [r7, #7]
 8010126:	2b01      	cmp	r3, #1
 8010128:	d102      	bne.n	8010130 <fm_lcd_units_tim+0x6c>
    {
        blink = 0;
 801012a:	4b33      	ldr	r3, [pc, #204]	; (80101f8 <fm_lcd_units_tim+0x134>)
 801012c:	2200      	movs	r2, #0
 801012e:	601a      	str	r2, [r3, #0]
    }

    if(blink == 1)
 8010130:	4b31      	ldr	r3, [pc, #196]	; (80101f8 <fm_lcd_units_tim+0x134>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b01      	cmp	r3, #1
 8010136:	d146      	bne.n	80101c6 <fm_lcd_units_tim+0x102>
    {
        if(fm_factory_get_units_tim().res == 1)
 8010138:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801013c:	4618      	mov	r0, r3
 801013e:	f7fe fd8b 	bl	800ec58 <fm_factory_get_units_tim>
 8010142:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010146:	2b01      	cmp	r3, #1
 8010148:	d109      	bne.n	801015e <fm_lcd_units_tim+0x9a>
        {
            resolution_modify = PNT_5;
 801014a:	2305      	movs	r3, #5
 801014c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 8010150:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010154:	4619      	mov	r1, r3
 8010156:	2001      	movs	r0, #1
 8010158:	f000 fc80 	bl	8010a5c <lcd_clear_point>
 801015c:	e024      	b.n	80101a8 <fm_lcd_units_tim+0xe4>
        }
        else if(fm_factory_get_units_tim().res == 2)
 801015e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010162:	4618      	mov	r0, r3
 8010164:	f7fe fd78 	bl	800ec58 <fm_factory_get_units_tim>
 8010168:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801016c:	2b02      	cmp	r3, #2
 801016e:	d109      	bne.n	8010184 <fm_lcd_units_tim+0xc0>
        {
            resolution_modify = PNT_4;
 8010170:	2304      	movs	r3, #4
 8010172:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 8010176:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801017a:	4619      	mov	r1, r3
 801017c:	2001      	movs	r0, #1
 801017e:	f000 fc6d 	bl	8010a5c <lcd_clear_point>
 8010182:	e011      	b.n	80101a8 <fm_lcd_units_tim+0xe4>
        }
        else if(fm_factory_get_units_tim().res == 3)
 8010184:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010188:	4618      	mov	r0, r3
 801018a:	f7fe fd65 	bl	800ec58 <fm_factory_get_units_tim>
 801018e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8010192:	2b03      	cmp	r3, #3
 8010194:	d108      	bne.n	80101a8 <fm_lcd_units_tim+0xe4>
        {
            resolution_modify = PNT_3;
 8010196:	2303      	movs	r3, #3
 8010198:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 801019c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80101a0:	4619      	mov	r1, r3
 80101a2:	2001      	movs	r0, #1
 80101a4:	f000 fc5a 	bl	8010a5c <lcd_clear_point>
        }

        lcd_clear_time_unit(fmc_get_rate().unit_time, 0x0);
 80101a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80101ac:	4618      	mov	r0, r3
 80101ae:	f004 fc41 	bl	8014a34 <fmc_get_rate>
 80101b2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80101b6:	2100      	movs	r1, #0
 80101b8:	4618      	mov	r0, r3
 80101ba:	f000 fcfb 	bl	8010bb4 <lcd_clear_time_unit>

        blink = 0;
 80101be:	4b0e      	ldr	r3, [pc, #56]	; (80101f8 <fm_lcd_units_tim+0x134>)
 80101c0:	2200      	movs	r2, #0
 80101c2:	601a      	str	r2, [r3, #0]
 80101c4:	e00d      	b.n	80101e2 <fm_lcd_units_tim+0x11e>
    }
    else
    {
        lcd_set_time_unit(fmc_get_rate().unit_time, 0x0);
 80101c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80101ca:	4618      	mov	r0, r3
 80101cc:	f004 fc32 	bl	8014a34 <fmc_get_rate>
 80101d0:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80101d4:	2100      	movs	r1, #0
 80101d6:	4618      	mov	r0, r3
 80101d8:	f001 fda6 	bl	8011d28 <lcd_set_time_unit>
        blink = 1;
 80101dc:	4b06      	ldr	r3, [pc, #24]	; (80101f8 <fm_lcd_units_tim+0x134>)
 80101de:	2201      	movs	r2, #1
 80101e0:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(RATE, 0x00);
 80101e2:	2100      	movs	r1, #0
 80101e4:	2002      	movs	r0, #2
 80101e6:	f001 fa21 	bl	801162c <lcd_set_symbol>
}
 80101ea:	bf00      	nop
 80101ec:	3790      	adds	r7, #144	; 0x90
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	20001dbb 	.word	0x20001dbb
 80101f8:	2000011c 	.word	0x2000011c

080101fc <fm_lcd_units_vol>:
 * TTL.
 * @param  None
 * @retval None
 */
void fm_lcd_units_vol(fm_event_t event_id)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b0a6      	sub	sp, #152	; 0x98
 8010200:	af02      	add	r7, sp, #8
 8010202:	4603      	mov	r3, r0
 8010204:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_vol(), '0', LINE_0_DIGITS,
 8010206:	f107 0320 	add.w	r3, r7, #32
 801020a:	4618      	mov	r0, r3
 801020c:	f7fe fd36 	bl	800ec7c <fm_factory_get_units_vol>
 8010210:	2314      	movs	r3, #20
 8010212:	9301      	str	r3, [sp, #4]
 8010214:	f107 030c 	add.w	r3, r7, #12
 8010218:	9300      	str	r3, [sp, #0]
 801021a:	2309      	movs	r3, #9
 801021c:	2230      	movs	r2, #48	; 0x30
 801021e:	f107 0120 	add.w	r1, r7, #32
 8010222:	c903      	ldmia	r1, {r0, r1}
 8010224:	f7ff fcaa 	bl	800fb7c <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_vol(), lcd_msg, sizeof(lcd_msg));
 8010228:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801022c:	4618      	mov	r0, r3
 801022e:	f7fe fd25 	bl	800ec7c <fm_factory_get_units_vol>
 8010232:	f107 020c 	add.w	r2, r7, #12
 8010236:	2314      	movs	r3, #20
 8010238:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801023c:	c903      	ldmia	r1, {r0, r1}
 801023e:	f7ff fc59 	bl	800faf4 <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 8010242:	f107 030c 	add.w	r3, r7, #12
 8010246:	2100      	movs	r1, #0
 8010248:	4618      	mov	r0, r3
 801024a:	f7ff fe89 	bl	800ff60 <fm_lcd_puts>

    if(event_id != EVENT_LCD_REFRESH ||
 801024e:	79fb      	ldrb	r3, [r7, #7]
 8010250:	2b01      	cmp	r3, #1
 8010252:	d106      	bne.n	8010262 <fm_lcd_units_vol+0x66>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 8010254:	4b37      	ldr	r3, [pc, #220]	; (8010334 <fm_lcd_units_vol+0x138>)
 8010256:	781b      	ldrb	r3, [r3, #0]
    if(event_id != EVENT_LCD_REFRESH ||
 8010258:	2b01      	cmp	r3, #1
 801025a:	d005      	beq.n	8010268 <fm_lcd_units_vol+0x6c>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 801025c:	79fb      	ldrb	r3, [r7, #7]
 801025e:	2b01      	cmp	r3, #1
 8010260:	d102      	bne.n	8010268 <fm_lcd_units_vol+0x6c>
    {
        blink = 0;
 8010262:	4b35      	ldr	r3, [pc, #212]	; (8010338 <fm_lcd_units_vol+0x13c>)
 8010264:	2200      	movs	r2, #0
 8010266:	601a      	str	r2, [r3, #0]
    }

    if(blink == 1)
 8010268:	4b33      	ldr	r3, [pc, #204]	; (8010338 <fm_lcd_units_vol+0x13c>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	2b01      	cmp	r3, #1
 801026e:	d146      	bne.n	80102fe <fm_lcd_units_vol+0x102>
    {
        if(fm_factory_get_units_vol().res == 1)
 8010270:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010274:	4618      	mov	r0, r3
 8010276:	f7fe fd01 	bl	800ec7c <fm_factory_get_units_vol>
 801027a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801027e:	2b01      	cmp	r3, #1
 8010280:	d109      	bne.n	8010296 <fm_lcd_units_vol+0x9a>
        {
            resolution_modify = PNT_6;
 8010282:	2306      	movs	r3, #6
 8010284:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 8010288:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801028c:	4619      	mov	r1, r3
 801028e:	2000      	movs	r0, #0
 8010290:	f000 fbe4 	bl	8010a5c <lcd_clear_point>
 8010294:	e024      	b.n	80102e0 <fm_lcd_units_vol+0xe4>
        }
        else if(fm_factory_get_units_vol().res == 2)
 8010296:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801029a:	4618      	mov	r0, r3
 801029c:	f7fe fcee 	bl	800ec7c <fm_factory_get_units_vol>
 80102a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80102a4:	2b02      	cmp	r3, #2
 80102a6:	d109      	bne.n	80102bc <fm_lcd_units_vol+0xc0>
        {
            resolution_modify = PNT_5;
 80102a8:	2305      	movs	r3, #5
 80102aa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 80102ae:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80102b2:	4619      	mov	r1, r3
 80102b4:	2000      	movs	r0, #0
 80102b6:	f000 fbd1 	bl	8010a5c <lcd_clear_point>
 80102ba:	e011      	b.n	80102e0 <fm_lcd_units_vol+0xe4>
        }
        else if(fm_factory_get_units_vol().res == 3)
 80102bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7fe fcdb 	bl	800ec7c <fm_factory_get_units_vol>
 80102c6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80102ca:	2b03      	cmp	r3, #3
 80102cc:	d108      	bne.n	80102e0 <fm_lcd_units_vol+0xe4>
        {
            resolution_modify = PNT_4;
 80102ce:	2304      	movs	r3, #4
 80102d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 80102d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80102d8:	4619      	mov	r1, r3
 80102da:	2000      	movs	r0, #0
 80102dc:	f000 fbbe 	bl	8010a5c <lcd_clear_point>
        }

        lcd_clear_vol_unit(fmc_get_acm().unit_volume, 0x0);
 80102e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80102e4:	4618      	mov	r0, r3
 80102e6:	f004 fb3f 	bl	8014968 <fmc_get_acm>
 80102ea:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80102ee:	2100      	movs	r1, #0
 80102f0:	4618      	mov	r0, r3
 80102f2:	f000 fca1 	bl	8010c38 <lcd_clear_vol_unit>

        blink = 0;
 80102f6:	4b10      	ldr	r3, [pc, #64]	; (8010338 <fm_lcd_units_vol+0x13c>)
 80102f8:	2200      	movs	r2, #0
 80102fa:	601a      	str	r2, [r3, #0]
 80102fc:	e00d      	b.n	801031a <fm_lcd_units_vol+0x11e>
    }
    else
    {
        lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 80102fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010302:	4618      	mov	r0, r3
 8010304:	f004 fb30 	bl	8014968 <fmc_get_acm>
 8010308:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801030c:	2100      	movs	r1, #0
 801030e:	4618      	mov	r0, r3
 8010310:	f001 fd4c 	bl	8011dac <lcd_set_vol_unit>
        blink = 1;
 8010314:	4b08      	ldr	r3, [pc, #32]	; (8010338 <fm_lcd_units_vol+0x13c>)
 8010316:	2201      	movs	r2, #1
 8010318:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(ACM, 0x00);
 801031a:	2100      	movs	r1, #0
 801031c:	2006      	movs	r0, #6
 801031e:	f001 f985 	bl	801162c <lcd_set_symbol>
    lcd_set_symbol(TTL, 0x00);
 8010322:	2100      	movs	r1, #0
 8010324:	2005      	movs	r0, #5
 8010326:	f001 f981 	bl	801162c <lcd_set_symbol>
}
 801032a:	bf00      	nop
 801032c:	3790      	adds	r7, #144	; 0x90
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	20001dbb 	.word	0x20001dbb
 8010338:	2000011c 	.word	0x2000011c

0801033c <fm_lcd_version>:
 * según las opciones que se elijan.
 * @param puntos de la fila inferior a imprimir, de tipo point_t.
 * @retval None
 */
void fm_lcd_version(point_t low_point1, point_t low_point2)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b086      	sub	sp, #24
 8010340:	af00      	add	r7, sp, #0
 8010342:	4603      	mov	r3, r0
 8010344:	460a      	mov	r2, r1
 8010346:	71fb      	strb	r3, [r7, #7]
 8010348:	4613      	mov	r3, r2
 801034a:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[MSG_LENGTH];

    fm_lcd_format_number_in_line(LOW_ROW, fm_version_get(), lcd_msg,
 801034c:	f004 faf2 	bl	8014934 <fm_version_get>
 8010350:	4601      	mov	r1, r0
 8010352:	f107 020c 	add.w	r2, r7, #12
 8010356:	230c      	movs	r3, #12
 8010358:	2001      	movs	r0, #1
 801035a:	f7ff fba7 	bl	800faac <fm_lcd_format_number_in_line>
    MSG_LENGTH);
    fm_lcd_puts(lcd_msg, LOW_ROW);
 801035e:	f107 030c 	add.w	r3, r7, #12
 8010362:	2101      	movs	r1, #1
 8010364:	4618      	mov	r0, r3
 8010366:	f7ff fdfb 	bl	800ff60 <fm_lcd_puts>
    lcd_set_point(LOW_ROW, low_point1);
 801036a:	79fb      	ldrb	r3, [r7, #7]
 801036c:	4619      	mov	r1, r3
 801036e:	2001      	movs	r0, #1
 8010370:	f001 f8b0 	bl	80114d4 <lcd_set_point>
    lcd_set_point(LOW_ROW, low_point2);
 8010374:	79bb      	ldrb	r3, [r7, #6]
 8010376:	4619      	mov	r1, r3
 8010378:	2001      	movs	r0, #1
 801037a:	f001 f8ab 	bl	80114d4 <lcd_set_point>

    lcd_set_symbol(VE, 0x0);
 801037e:	2100      	movs	r1, #0
 8010380:	2009      	movs	r0, #9
 8010382:	f001 f953 	bl	801162c <lcd_set_symbol>
}
 8010386:	bf00      	nop
 8010388:	3718      	adds	r7, #24
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
	...

08010390 <lcd_clear_all>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void lcd_clear_all()
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
    pcf8553_clear_buff();
 8010396:	f002 f873 	bl	8012480 <pcf8553_clear_buff>
     * Limpia el buffer intermedio de los números que aparecen en las filas HIGH
     * y LOW de la pantalla LCD. No es muy eficiente si se pretende usar al
     * refrescar la pantalla cada x tiempo, pero será necesario usarla por el
     * momento al pasar de una pantalla a otra.
     */
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 801039a:	2300      	movs	r3, #0
 801039c:	607b      	str	r3, [r7, #4]
 801039e:	e013      	b.n	80103c8 <lcd_clear_all+0x38>
    {
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 80103a0:	2300      	movs	r3, #0
 80103a2:	603b      	str	r3, [r7, #0]
 80103a4:	e00a      	b.n	80103bc <lcd_clear_all+0x2c>
        {
            g_buf[cont_buff_row][cont_buff_col] = 0;
 80103a6:	4a0d      	ldr	r2, [pc, #52]	; (80103dc <lcd_clear_all+0x4c>)
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	00db      	lsls	r3, r3, #3
 80103ac:	441a      	add	r2, r3
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	4413      	add	r3, r2
 80103b2:	2200      	movs	r2, #0
 80103b4:	701a      	strb	r2, [r3, #0]
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	3301      	adds	r3, #1
 80103ba:	603b      	str	r3, [r7, #0]
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	2b07      	cmp	r3, #7
 80103c0:	ddf1      	ble.n	80103a6 <lcd_clear_all+0x16>
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	3301      	adds	r3, #1
 80103c6:	607b      	str	r3, [r7, #4]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2b01      	cmp	r3, #1
 80103cc:	dde8      	ble.n	80103a0 <lcd_clear_all+0x10>
        }
    }

    pcf8553_write_all(NONE_SEGMENTS);
 80103ce:	2000      	movs	r0, #0
 80103d0:	f002 f8e6 	bl	80125a0 <pcf8553_write_all>
}
 80103d4:	bf00      	nop
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	20001cfc 	.word	0x20001cfc

080103e0 <lcd_clear_digit>:

void lcd_clear_digit(screen_digits_t digit, rows_t line)
{
 80103e0:	b480      	push	{r7}
 80103e2:	b083      	sub	sp, #12
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	4603      	mov	r3, r0
 80103e8:	460a      	mov	r2, r1
 80103ea:	71fb      	strb	r3, [r7, #7]
 80103ec:	4613      	mov	r3, r2
 80103ee:	71bb      	strb	r3, [r7, #6]
    if(line == HIGH_ROW)
 80103f0:	79bb      	ldrb	r3, [r7, #6]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	f040 81aa 	bne.w	801074c <lcd_clear_digit+0x36c>
    {
        switch(digit)
 80103f8:	79fb      	ldrb	r3, [r7, #7]
 80103fa:	2b07      	cmp	r3, #7
 80103fc:	f200 8320 	bhi.w	8010a40 <lcd_clear_digit+0x660>
 8010400:	a201      	add	r2, pc, #4	; (adr r2, 8010408 <lcd_clear_digit+0x28>)
 8010402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010406:	bf00      	nop
 8010408:	08010429 	.word	0x08010429
 801040c:	0801048d 	.word	0x0801048d
 8010410:	080104f1 	.word	0x080104f1
 8010414:	08010555 	.word	0x08010555
 8010418:	080105b9 	.word	0x080105b9
 801041c:	0801061d 	.word	0x0801061d
 8010420:	08010685 	.word	0x08010685
 8010424:	080106e9 	.word	0x080106e9
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_7);
 8010428:	4b95      	ldr	r3, [pc, #596]	; (8010680 <lcd_clear_digit+0x2a0>)
 801042a:	7b1b      	ldrb	r3, [r3, #12]
 801042c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010430:	b2da      	uxtb	r2, r3
 8010432:	4b93      	ldr	r3, [pc, #588]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010434:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_6);
 8010436:	4b92      	ldr	r3, [pc, #584]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010438:	7b1b      	ldrb	r3, [r3, #12]
 801043a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801043e:	b2da      	uxtb	r2, r3
 8010440:	4b8f      	ldr	r3, [pc, #572]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010442:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_7);
 8010444:	4b8e      	ldr	r3, [pc, #568]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010446:	7c5b      	ldrb	r3, [r3, #17]
 8010448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801044c:	b2da      	uxtb	r2, r3
 801044e:	4b8c      	ldr	r3, [pc, #560]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010450:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_6);
 8010452:	4b8b      	ldr	r3, [pc, #556]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010454:	7c5b      	ldrb	r3, [r3, #17]
 8010456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801045a:	b2da      	uxtb	r2, r3
 801045c:	4b88      	ldr	r3, [pc, #544]	; (8010680 <lcd_clear_digit+0x2a0>)
 801045e:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_6);
 8010460:	4b87      	ldr	r3, [pc, #540]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010462:	789b      	ldrb	r3, [r3, #2]
 8010464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010468:	b2da      	uxtb	r2, r3
 801046a:	4b85      	ldr	r3, [pc, #532]	; (8010680 <lcd_clear_digit+0x2a0>)
 801046c:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_7);
 801046e:	4b84      	ldr	r3, [pc, #528]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010470:	789b      	ldrb	r3, [r3, #2]
 8010472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010476:	b2da      	uxtb	r2, r3
 8010478:	4b81      	ldr	r3, [pc, #516]	; (8010680 <lcd_clear_digit+0x2a0>)
 801047a:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_6);
 801047c:	4b80      	ldr	r3, [pc, #512]	; (8010680 <lcd_clear_digit+0x2a0>)
 801047e:	79db      	ldrb	r3, [r3, #7]
 8010480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010484:	b2da      	uxtb	r2, r3
 8010486:	4b7e      	ldr	r3, [pc, #504]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010488:	71da      	strb	r2, [r3, #7]
            break;
 801048a:	e2de      	b.n	8010a4a <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_13] &= ~(1 << BIT_1);
 801048c:	4b7c      	ldr	r3, [pc, #496]	; (8010680 <lcd_clear_digit+0x2a0>)
 801048e:	7b5b      	ldrb	r3, [r3, #13]
 8010490:	f023 0302 	bic.w	r3, r3, #2
 8010494:	b2da      	uxtb	r2, r3
 8010496:	4b7a      	ldr	r3, [pc, #488]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010498:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_0);
 801049a:	4b79      	ldr	r3, [pc, #484]	; (8010680 <lcd_clear_digit+0x2a0>)
 801049c:	7b5b      	ldrb	r3, [r3, #13]
 801049e:	f023 0301 	bic.w	r3, r3, #1
 80104a2:	b2da      	uxtb	r2, r3
 80104a4:	4b76      	ldr	r3, [pc, #472]	; (8010680 <lcd_clear_digit+0x2a0>)
 80104a6:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_1);
 80104a8:	4b75      	ldr	r3, [pc, #468]	; (8010680 <lcd_clear_digit+0x2a0>)
 80104aa:	7c9b      	ldrb	r3, [r3, #18]
 80104ac:	f023 0302 	bic.w	r3, r3, #2
 80104b0:	b2da      	uxtb	r2, r3
 80104b2:	4b73      	ldr	r3, [pc, #460]	; (8010680 <lcd_clear_digit+0x2a0>)
 80104b4:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_0);
 80104b6:	4b72      	ldr	r3, [pc, #456]	; (8010680 <lcd_clear_digit+0x2a0>)
 80104b8:	7c9b      	ldrb	r3, [r3, #18]
 80104ba:	f023 0301 	bic.w	r3, r3, #1
 80104be:	b2da      	uxtb	r2, r3
 80104c0:	4b6f      	ldr	r3, [pc, #444]	; (8010680 <lcd_clear_digit+0x2a0>)
 80104c2:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_0);
 80104c4:	4b6e      	ldr	r3, [pc, #440]	; (8010680 <lcd_clear_digit+0x2a0>)
 80104c6:	78db      	ldrb	r3, [r3, #3]
 80104c8:	f023 0301 	bic.w	r3, r3, #1
 80104cc:	b2da      	uxtb	r2, r3
 80104ce:	4b6c      	ldr	r3, [pc, #432]	; (8010680 <lcd_clear_digit+0x2a0>)
 80104d0:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_1);
 80104d2:	4b6b      	ldr	r3, [pc, #428]	; (8010680 <lcd_clear_digit+0x2a0>)
 80104d4:	78db      	ldrb	r3, [r3, #3]
 80104d6:	f023 0302 	bic.w	r3, r3, #2
 80104da:	b2da      	uxtb	r2, r3
 80104dc:	4b68      	ldr	r3, [pc, #416]	; (8010680 <lcd_clear_digit+0x2a0>)
 80104de:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_0);
 80104e0:	4b67      	ldr	r3, [pc, #412]	; (8010680 <lcd_clear_digit+0x2a0>)
 80104e2:	7a1b      	ldrb	r3, [r3, #8]
 80104e4:	f023 0301 	bic.w	r3, r3, #1
 80104e8:	b2da      	uxtb	r2, r3
 80104ea:	4b65      	ldr	r3, [pc, #404]	; (8010680 <lcd_clear_digit+0x2a0>)
 80104ec:	721a      	strb	r2, [r3, #8]
            break;
 80104ee:	e2ac      	b.n	8010a4a <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_13] &= ~(1 << BIT_3);
 80104f0:	4b63      	ldr	r3, [pc, #396]	; (8010680 <lcd_clear_digit+0x2a0>)
 80104f2:	7b5b      	ldrb	r3, [r3, #13]
 80104f4:	f023 0308 	bic.w	r3, r3, #8
 80104f8:	b2da      	uxtb	r2, r3
 80104fa:	4b61      	ldr	r3, [pc, #388]	; (8010680 <lcd_clear_digit+0x2a0>)
 80104fc:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_2);
 80104fe:	4b60      	ldr	r3, [pc, #384]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010500:	7b5b      	ldrb	r3, [r3, #13]
 8010502:	f023 0304 	bic.w	r3, r3, #4
 8010506:	b2da      	uxtb	r2, r3
 8010508:	4b5d      	ldr	r3, [pc, #372]	; (8010680 <lcd_clear_digit+0x2a0>)
 801050a:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_3);
 801050c:	4b5c      	ldr	r3, [pc, #368]	; (8010680 <lcd_clear_digit+0x2a0>)
 801050e:	7c9b      	ldrb	r3, [r3, #18]
 8010510:	f023 0308 	bic.w	r3, r3, #8
 8010514:	b2da      	uxtb	r2, r3
 8010516:	4b5a      	ldr	r3, [pc, #360]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010518:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_2);
 801051a:	4b59      	ldr	r3, [pc, #356]	; (8010680 <lcd_clear_digit+0x2a0>)
 801051c:	7c9b      	ldrb	r3, [r3, #18]
 801051e:	f023 0304 	bic.w	r3, r3, #4
 8010522:	b2da      	uxtb	r2, r3
 8010524:	4b56      	ldr	r3, [pc, #344]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010526:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_2);
 8010528:	4b55      	ldr	r3, [pc, #340]	; (8010680 <lcd_clear_digit+0x2a0>)
 801052a:	78db      	ldrb	r3, [r3, #3]
 801052c:	f023 0304 	bic.w	r3, r3, #4
 8010530:	b2da      	uxtb	r2, r3
 8010532:	4b53      	ldr	r3, [pc, #332]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010534:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_3);
 8010536:	4b52      	ldr	r3, [pc, #328]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010538:	78db      	ldrb	r3, [r3, #3]
 801053a:	f023 0308 	bic.w	r3, r3, #8
 801053e:	b2da      	uxtb	r2, r3
 8010540:	4b4f      	ldr	r3, [pc, #316]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010542:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_2);
 8010544:	4b4e      	ldr	r3, [pc, #312]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010546:	7a1b      	ldrb	r3, [r3, #8]
 8010548:	f023 0304 	bic.w	r3, r3, #4
 801054c:	b2da      	uxtb	r2, r3
 801054e:	4b4c      	ldr	r3, [pc, #304]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010550:	721a      	strb	r2, [r3, #8]
            break;
 8010552:	e27a      	b.n	8010a4a <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_13] &= ~(1 << BIT_5);
 8010554:	4b4a      	ldr	r3, [pc, #296]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010556:	7b5b      	ldrb	r3, [r3, #13]
 8010558:	f023 0320 	bic.w	r3, r3, #32
 801055c:	b2da      	uxtb	r2, r3
 801055e:	4b48      	ldr	r3, [pc, #288]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010560:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_4);
 8010562:	4b47      	ldr	r3, [pc, #284]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010564:	7b5b      	ldrb	r3, [r3, #13]
 8010566:	f023 0310 	bic.w	r3, r3, #16
 801056a:	b2da      	uxtb	r2, r3
 801056c:	4b44      	ldr	r3, [pc, #272]	; (8010680 <lcd_clear_digit+0x2a0>)
 801056e:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_5);
 8010570:	4b43      	ldr	r3, [pc, #268]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010572:	7c9b      	ldrb	r3, [r3, #18]
 8010574:	f023 0320 	bic.w	r3, r3, #32
 8010578:	b2da      	uxtb	r2, r3
 801057a:	4b41      	ldr	r3, [pc, #260]	; (8010680 <lcd_clear_digit+0x2a0>)
 801057c:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_4);
 801057e:	4b40      	ldr	r3, [pc, #256]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010580:	7c9b      	ldrb	r3, [r3, #18]
 8010582:	f023 0310 	bic.w	r3, r3, #16
 8010586:	b2da      	uxtb	r2, r3
 8010588:	4b3d      	ldr	r3, [pc, #244]	; (8010680 <lcd_clear_digit+0x2a0>)
 801058a:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_4);
 801058c:	4b3c      	ldr	r3, [pc, #240]	; (8010680 <lcd_clear_digit+0x2a0>)
 801058e:	78db      	ldrb	r3, [r3, #3]
 8010590:	f023 0310 	bic.w	r3, r3, #16
 8010594:	b2da      	uxtb	r2, r3
 8010596:	4b3a      	ldr	r3, [pc, #232]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010598:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_5);
 801059a:	4b39      	ldr	r3, [pc, #228]	; (8010680 <lcd_clear_digit+0x2a0>)
 801059c:	78db      	ldrb	r3, [r3, #3]
 801059e:	f023 0320 	bic.w	r3, r3, #32
 80105a2:	b2da      	uxtb	r2, r3
 80105a4:	4b36      	ldr	r3, [pc, #216]	; (8010680 <lcd_clear_digit+0x2a0>)
 80105a6:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_4);
 80105a8:	4b35      	ldr	r3, [pc, #212]	; (8010680 <lcd_clear_digit+0x2a0>)
 80105aa:	7a1b      	ldrb	r3, [r3, #8]
 80105ac:	f023 0310 	bic.w	r3, r3, #16
 80105b0:	b2da      	uxtb	r2, r3
 80105b2:	4b33      	ldr	r3, [pc, #204]	; (8010680 <lcd_clear_digit+0x2a0>)
 80105b4:	721a      	strb	r2, [r3, #8]
            break;
 80105b6:	e248      	b.n	8010a4a <lcd_clear_digit+0x66a>
            case DIGIT_4:
                g_lcd_map[REG_13] &= ~(1 << BIT_7);
 80105b8:	4b31      	ldr	r3, [pc, #196]	; (8010680 <lcd_clear_digit+0x2a0>)
 80105ba:	7b5b      	ldrb	r3, [r3, #13]
 80105bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105c0:	b2da      	uxtb	r2, r3
 80105c2:	4b2f      	ldr	r3, [pc, #188]	; (8010680 <lcd_clear_digit+0x2a0>)
 80105c4:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_6);
 80105c6:	4b2e      	ldr	r3, [pc, #184]	; (8010680 <lcd_clear_digit+0x2a0>)
 80105c8:	7b5b      	ldrb	r3, [r3, #13]
 80105ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105ce:	b2da      	uxtb	r2, r3
 80105d0:	4b2b      	ldr	r3, [pc, #172]	; (8010680 <lcd_clear_digit+0x2a0>)
 80105d2:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_7);
 80105d4:	4b2a      	ldr	r3, [pc, #168]	; (8010680 <lcd_clear_digit+0x2a0>)
 80105d6:	7c9b      	ldrb	r3, [r3, #18]
 80105d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105dc:	b2da      	uxtb	r2, r3
 80105de:	4b28      	ldr	r3, [pc, #160]	; (8010680 <lcd_clear_digit+0x2a0>)
 80105e0:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_6);
 80105e2:	4b27      	ldr	r3, [pc, #156]	; (8010680 <lcd_clear_digit+0x2a0>)
 80105e4:	7c9b      	ldrb	r3, [r3, #18]
 80105e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105ea:	b2da      	uxtb	r2, r3
 80105ec:	4b24      	ldr	r3, [pc, #144]	; (8010680 <lcd_clear_digit+0x2a0>)
 80105ee:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_6);
 80105f0:	4b23      	ldr	r3, [pc, #140]	; (8010680 <lcd_clear_digit+0x2a0>)
 80105f2:	78db      	ldrb	r3, [r3, #3]
 80105f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105f8:	b2da      	uxtb	r2, r3
 80105fa:	4b21      	ldr	r3, [pc, #132]	; (8010680 <lcd_clear_digit+0x2a0>)
 80105fc:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_7);
 80105fe:	4b20      	ldr	r3, [pc, #128]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010600:	78db      	ldrb	r3, [r3, #3]
 8010602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010606:	b2da      	uxtb	r2, r3
 8010608:	4b1d      	ldr	r3, [pc, #116]	; (8010680 <lcd_clear_digit+0x2a0>)
 801060a:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_6);
 801060c:	4b1c      	ldr	r3, [pc, #112]	; (8010680 <lcd_clear_digit+0x2a0>)
 801060e:	7a1b      	ldrb	r3, [r3, #8]
 8010610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010614:	b2da      	uxtb	r2, r3
 8010616:	4b1a      	ldr	r3, [pc, #104]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010618:	721a      	strb	r2, [r3, #8]
            break;
 801061a:	e216      	b.n	8010a4a <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_14] &= ~(1 << BIT_1);
 801061c:	4b18      	ldr	r3, [pc, #96]	; (8010680 <lcd_clear_digit+0x2a0>)
 801061e:	7b9b      	ldrb	r3, [r3, #14]
 8010620:	f023 0302 	bic.w	r3, r3, #2
 8010624:	b2da      	uxtb	r2, r3
 8010626:	4b16      	ldr	r3, [pc, #88]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010628:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_0);
 801062a:	4b15      	ldr	r3, [pc, #84]	; (8010680 <lcd_clear_digit+0x2a0>)
 801062c:	7b9b      	ldrb	r3, [r3, #14]
 801062e:	f023 0301 	bic.w	r3, r3, #1
 8010632:	b2da      	uxtb	r2, r3
 8010634:	4b12      	ldr	r3, [pc, #72]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010636:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_1);
 8010638:	4b11      	ldr	r3, [pc, #68]	; (8010680 <lcd_clear_digit+0x2a0>)
 801063a:	7cdb      	ldrb	r3, [r3, #19]
 801063c:	f023 0302 	bic.w	r3, r3, #2
 8010640:	b2da      	uxtb	r2, r3
 8010642:	4b0f      	ldr	r3, [pc, #60]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010644:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_0);
 8010646:	4b0e      	ldr	r3, [pc, #56]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010648:	7cdb      	ldrb	r3, [r3, #19]
 801064a:	f023 0301 	bic.w	r3, r3, #1
 801064e:	b2da      	uxtb	r2, r3
 8010650:	4b0b      	ldr	r3, [pc, #44]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010652:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_0);
 8010654:	4b0a      	ldr	r3, [pc, #40]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010656:	791b      	ldrb	r3, [r3, #4]
 8010658:	f023 0301 	bic.w	r3, r3, #1
 801065c:	b2da      	uxtb	r2, r3
 801065e:	4b08      	ldr	r3, [pc, #32]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010660:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_1);
 8010662:	4b07      	ldr	r3, [pc, #28]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010664:	791b      	ldrb	r3, [r3, #4]
 8010666:	f023 0302 	bic.w	r3, r3, #2
 801066a:	b2da      	uxtb	r2, r3
 801066c:	4b04      	ldr	r3, [pc, #16]	; (8010680 <lcd_clear_digit+0x2a0>)
 801066e:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_0);
 8010670:	4b03      	ldr	r3, [pc, #12]	; (8010680 <lcd_clear_digit+0x2a0>)
 8010672:	7a5b      	ldrb	r3, [r3, #9]
 8010674:	f023 0301 	bic.w	r3, r3, #1
 8010678:	b2da      	uxtb	r2, r3
 801067a:	4b01      	ldr	r3, [pc, #4]	; (8010680 <lcd_clear_digit+0x2a0>)
 801067c:	725a      	strb	r2, [r3, #9]
            break;
 801067e:	e1e4      	b.n	8010a4a <lcd_clear_digit+0x66a>
 8010680:	20001da0 	.word	0x20001da0
            case DIGIT_6:
                g_lcd_map[REG_14] &= ~(1 << BIT_3);
 8010684:	4ba2      	ldr	r3, [pc, #648]	; (8010910 <lcd_clear_digit+0x530>)
 8010686:	7b9b      	ldrb	r3, [r3, #14]
 8010688:	f023 0308 	bic.w	r3, r3, #8
 801068c:	b2da      	uxtb	r2, r3
 801068e:	4ba0      	ldr	r3, [pc, #640]	; (8010910 <lcd_clear_digit+0x530>)
 8010690:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_2);
 8010692:	4b9f      	ldr	r3, [pc, #636]	; (8010910 <lcd_clear_digit+0x530>)
 8010694:	7b9b      	ldrb	r3, [r3, #14]
 8010696:	f023 0304 	bic.w	r3, r3, #4
 801069a:	b2da      	uxtb	r2, r3
 801069c:	4b9c      	ldr	r3, [pc, #624]	; (8010910 <lcd_clear_digit+0x530>)
 801069e:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_3);
 80106a0:	4b9b      	ldr	r3, [pc, #620]	; (8010910 <lcd_clear_digit+0x530>)
 80106a2:	7cdb      	ldrb	r3, [r3, #19]
 80106a4:	f023 0308 	bic.w	r3, r3, #8
 80106a8:	b2da      	uxtb	r2, r3
 80106aa:	4b99      	ldr	r3, [pc, #612]	; (8010910 <lcd_clear_digit+0x530>)
 80106ac:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_2);
 80106ae:	4b98      	ldr	r3, [pc, #608]	; (8010910 <lcd_clear_digit+0x530>)
 80106b0:	7cdb      	ldrb	r3, [r3, #19]
 80106b2:	f023 0304 	bic.w	r3, r3, #4
 80106b6:	b2da      	uxtb	r2, r3
 80106b8:	4b95      	ldr	r3, [pc, #596]	; (8010910 <lcd_clear_digit+0x530>)
 80106ba:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_2);
 80106bc:	4b94      	ldr	r3, [pc, #592]	; (8010910 <lcd_clear_digit+0x530>)
 80106be:	791b      	ldrb	r3, [r3, #4]
 80106c0:	f023 0304 	bic.w	r3, r3, #4
 80106c4:	b2da      	uxtb	r2, r3
 80106c6:	4b92      	ldr	r3, [pc, #584]	; (8010910 <lcd_clear_digit+0x530>)
 80106c8:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_3);
 80106ca:	4b91      	ldr	r3, [pc, #580]	; (8010910 <lcd_clear_digit+0x530>)
 80106cc:	791b      	ldrb	r3, [r3, #4]
 80106ce:	f023 0308 	bic.w	r3, r3, #8
 80106d2:	b2da      	uxtb	r2, r3
 80106d4:	4b8e      	ldr	r3, [pc, #568]	; (8010910 <lcd_clear_digit+0x530>)
 80106d6:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_2);
 80106d8:	4b8d      	ldr	r3, [pc, #564]	; (8010910 <lcd_clear_digit+0x530>)
 80106da:	7a5b      	ldrb	r3, [r3, #9]
 80106dc:	f023 0304 	bic.w	r3, r3, #4
 80106e0:	b2da      	uxtb	r2, r3
 80106e2:	4b8b      	ldr	r3, [pc, #556]	; (8010910 <lcd_clear_digit+0x530>)
 80106e4:	725a      	strb	r2, [r3, #9]
            break;
 80106e6:	e1b0      	b.n	8010a4a <lcd_clear_digit+0x66a>
            case DIGIT_7:
                g_lcd_map[REG_14] &= ~(1 << BIT_5);
 80106e8:	4b89      	ldr	r3, [pc, #548]	; (8010910 <lcd_clear_digit+0x530>)
 80106ea:	7b9b      	ldrb	r3, [r3, #14]
 80106ec:	f023 0320 	bic.w	r3, r3, #32
 80106f0:	b2da      	uxtb	r2, r3
 80106f2:	4b87      	ldr	r3, [pc, #540]	; (8010910 <lcd_clear_digit+0x530>)
 80106f4:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_4);
 80106f6:	4b86      	ldr	r3, [pc, #536]	; (8010910 <lcd_clear_digit+0x530>)
 80106f8:	7b9b      	ldrb	r3, [r3, #14]
 80106fa:	f023 0310 	bic.w	r3, r3, #16
 80106fe:	b2da      	uxtb	r2, r3
 8010700:	4b83      	ldr	r3, [pc, #524]	; (8010910 <lcd_clear_digit+0x530>)
 8010702:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_5);
 8010704:	4b82      	ldr	r3, [pc, #520]	; (8010910 <lcd_clear_digit+0x530>)
 8010706:	7cdb      	ldrb	r3, [r3, #19]
 8010708:	f023 0320 	bic.w	r3, r3, #32
 801070c:	b2da      	uxtb	r2, r3
 801070e:	4b80      	ldr	r3, [pc, #512]	; (8010910 <lcd_clear_digit+0x530>)
 8010710:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_4);
 8010712:	4b7f      	ldr	r3, [pc, #508]	; (8010910 <lcd_clear_digit+0x530>)
 8010714:	7cdb      	ldrb	r3, [r3, #19]
 8010716:	f023 0310 	bic.w	r3, r3, #16
 801071a:	b2da      	uxtb	r2, r3
 801071c:	4b7c      	ldr	r3, [pc, #496]	; (8010910 <lcd_clear_digit+0x530>)
 801071e:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_4);
 8010720:	4b7b      	ldr	r3, [pc, #492]	; (8010910 <lcd_clear_digit+0x530>)
 8010722:	791b      	ldrb	r3, [r3, #4]
 8010724:	f023 0310 	bic.w	r3, r3, #16
 8010728:	b2da      	uxtb	r2, r3
 801072a:	4b79      	ldr	r3, [pc, #484]	; (8010910 <lcd_clear_digit+0x530>)
 801072c:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_5);
 801072e:	4b78      	ldr	r3, [pc, #480]	; (8010910 <lcd_clear_digit+0x530>)
 8010730:	791b      	ldrb	r3, [r3, #4]
 8010732:	f023 0320 	bic.w	r3, r3, #32
 8010736:	b2da      	uxtb	r2, r3
 8010738:	4b75      	ldr	r3, [pc, #468]	; (8010910 <lcd_clear_digit+0x530>)
 801073a:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_4);
 801073c:	4b74      	ldr	r3, [pc, #464]	; (8010910 <lcd_clear_digit+0x530>)
 801073e:	7a5b      	ldrb	r3, [r3, #9]
 8010740:	f023 0310 	bic.w	r3, r3, #16
 8010744:	b2da      	uxtb	r2, r3
 8010746:	4b72      	ldr	r3, [pc, #456]	; (8010910 <lcd_clear_digit+0x530>)
 8010748:	725a      	strb	r2, [r3, #9]
            break;
 801074a:	e17e      	b.n	8010a4a <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
    else if(line == LOW_ROW)
 801074c:	79bb      	ldrb	r3, [r7, #6]
 801074e:	2b01      	cmp	r3, #1
 8010750:	f040 8178 	bne.w	8010a44 <lcd_clear_digit+0x664>
    {
        switch(digit)
 8010754:	79fb      	ldrb	r3, [r7, #7]
 8010756:	2b06      	cmp	r3, #6
 8010758:	f200 8176 	bhi.w	8010a48 <lcd_clear_digit+0x668>
 801075c:	a201      	add	r2, pc, #4	; (adr r2, 8010764 <lcd_clear_digit+0x384>)
 801075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010762:	bf00      	nop
 8010764:	08010781 	.word	0x08010781
 8010768:	080107e5 	.word	0x080107e5
 801076c:	08010849 	.word	0x08010849
 8010770:	080108ad 	.word	0x080108ad
 8010774:	08010915 	.word	0x08010915
 8010778:	08010979 	.word	0x08010979
 801077c:	080109dd 	.word	0x080109dd
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_2);
 8010780:	4b63      	ldr	r3, [pc, #396]	; (8010910 <lcd_clear_digit+0x530>)
 8010782:	7b1b      	ldrb	r3, [r3, #12]
 8010784:	f023 0304 	bic.w	r3, r3, #4
 8010788:	b2da      	uxtb	r2, r3
 801078a:	4b61      	ldr	r3, [pc, #388]	; (8010910 <lcd_clear_digit+0x530>)
 801078c:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_3);
 801078e:	4b60      	ldr	r3, [pc, #384]	; (8010910 <lcd_clear_digit+0x530>)
 8010790:	7b1b      	ldrb	r3, [r3, #12]
 8010792:	f023 0308 	bic.w	r3, r3, #8
 8010796:	b2da      	uxtb	r2, r3
 8010798:	4b5d      	ldr	r3, [pc, #372]	; (8010910 <lcd_clear_digit+0x530>)
 801079a:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_2);
 801079c:	4b5c      	ldr	r3, [pc, #368]	; (8010910 <lcd_clear_digit+0x530>)
 801079e:	7c5b      	ldrb	r3, [r3, #17]
 80107a0:	f023 0304 	bic.w	r3, r3, #4
 80107a4:	b2da      	uxtb	r2, r3
 80107a6:	4b5a      	ldr	r3, [pc, #360]	; (8010910 <lcd_clear_digit+0x530>)
 80107a8:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_3);
 80107aa:	4b59      	ldr	r3, [pc, #356]	; (8010910 <lcd_clear_digit+0x530>)
 80107ac:	7c5b      	ldrb	r3, [r3, #17]
 80107ae:	f023 0308 	bic.w	r3, r3, #8
 80107b2:	b2da      	uxtb	r2, r3
 80107b4:	4b56      	ldr	r3, [pc, #344]	; (8010910 <lcd_clear_digit+0x530>)
 80107b6:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_2);
 80107b8:	4b55      	ldr	r3, [pc, #340]	; (8010910 <lcd_clear_digit+0x530>)
 80107ba:	789b      	ldrb	r3, [r3, #2]
 80107bc:	f023 0304 	bic.w	r3, r3, #4
 80107c0:	b2da      	uxtb	r2, r3
 80107c2:	4b53      	ldr	r3, [pc, #332]	; (8010910 <lcd_clear_digit+0x530>)
 80107c4:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_3);
 80107c6:	4b52      	ldr	r3, [pc, #328]	; (8010910 <lcd_clear_digit+0x530>)
 80107c8:	789b      	ldrb	r3, [r3, #2]
 80107ca:	f023 0308 	bic.w	r3, r3, #8
 80107ce:	b2da      	uxtb	r2, r3
 80107d0:	4b4f      	ldr	r3, [pc, #316]	; (8010910 <lcd_clear_digit+0x530>)
 80107d2:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_3);
 80107d4:	4b4e      	ldr	r3, [pc, #312]	; (8010910 <lcd_clear_digit+0x530>)
 80107d6:	79db      	ldrb	r3, [r3, #7]
 80107d8:	f023 0308 	bic.w	r3, r3, #8
 80107dc:	b2da      	uxtb	r2, r3
 80107de:	4b4c      	ldr	r3, [pc, #304]	; (8010910 <lcd_clear_digit+0x530>)
 80107e0:	71da      	strb	r2, [r3, #7]
            break;
 80107e2:	e132      	b.n	8010a4a <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_12] &= ~(1 << BIT_0);
 80107e4:	4b4a      	ldr	r3, [pc, #296]	; (8010910 <lcd_clear_digit+0x530>)
 80107e6:	7b1b      	ldrb	r3, [r3, #12]
 80107e8:	f023 0301 	bic.w	r3, r3, #1
 80107ec:	b2da      	uxtb	r2, r3
 80107ee:	4b48      	ldr	r3, [pc, #288]	; (8010910 <lcd_clear_digit+0x530>)
 80107f0:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_1);
 80107f2:	4b47      	ldr	r3, [pc, #284]	; (8010910 <lcd_clear_digit+0x530>)
 80107f4:	7b1b      	ldrb	r3, [r3, #12]
 80107f6:	f023 0302 	bic.w	r3, r3, #2
 80107fa:	b2da      	uxtb	r2, r3
 80107fc:	4b44      	ldr	r3, [pc, #272]	; (8010910 <lcd_clear_digit+0x530>)
 80107fe:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_0);
 8010800:	4b43      	ldr	r3, [pc, #268]	; (8010910 <lcd_clear_digit+0x530>)
 8010802:	7c5b      	ldrb	r3, [r3, #17]
 8010804:	f023 0301 	bic.w	r3, r3, #1
 8010808:	b2da      	uxtb	r2, r3
 801080a:	4b41      	ldr	r3, [pc, #260]	; (8010910 <lcd_clear_digit+0x530>)
 801080c:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_1);
 801080e:	4b40      	ldr	r3, [pc, #256]	; (8010910 <lcd_clear_digit+0x530>)
 8010810:	7c5b      	ldrb	r3, [r3, #17]
 8010812:	f023 0302 	bic.w	r3, r3, #2
 8010816:	b2da      	uxtb	r2, r3
 8010818:	4b3d      	ldr	r3, [pc, #244]	; (8010910 <lcd_clear_digit+0x530>)
 801081a:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_0);
 801081c:	4b3c      	ldr	r3, [pc, #240]	; (8010910 <lcd_clear_digit+0x530>)
 801081e:	789b      	ldrb	r3, [r3, #2]
 8010820:	f023 0301 	bic.w	r3, r3, #1
 8010824:	b2da      	uxtb	r2, r3
 8010826:	4b3a      	ldr	r3, [pc, #232]	; (8010910 <lcd_clear_digit+0x530>)
 8010828:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_1);
 801082a:	4b39      	ldr	r3, [pc, #228]	; (8010910 <lcd_clear_digit+0x530>)
 801082c:	789b      	ldrb	r3, [r3, #2]
 801082e:	f023 0302 	bic.w	r3, r3, #2
 8010832:	b2da      	uxtb	r2, r3
 8010834:	4b36      	ldr	r3, [pc, #216]	; (8010910 <lcd_clear_digit+0x530>)
 8010836:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_1);
 8010838:	4b35      	ldr	r3, [pc, #212]	; (8010910 <lcd_clear_digit+0x530>)
 801083a:	79db      	ldrb	r3, [r3, #7]
 801083c:	f023 0302 	bic.w	r3, r3, #2
 8010840:	b2da      	uxtb	r2, r3
 8010842:	4b33      	ldr	r3, [pc, #204]	; (8010910 <lcd_clear_digit+0x530>)
 8010844:	71da      	strb	r2, [r3, #7]
            break;
 8010846:	e100      	b.n	8010a4a <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_11] &= ~(1 << BIT_6);
 8010848:	4b31      	ldr	r3, [pc, #196]	; (8010910 <lcd_clear_digit+0x530>)
 801084a:	7adb      	ldrb	r3, [r3, #11]
 801084c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010850:	b2da      	uxtb	r2, r3
 8010852:	4b2f      	ldr	r3, [pc, #188]	; (8010910 <lcd_clear_digit+0x530>)
 8010854:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_7);
 8010856:	4b2e      	ldr	r3, [pc, #184]	; (8010910 <lcd_clear_digit+0x530>)
 8010858:	7adb      	ldrb	r3, [r3, #11]
 801085a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801085e:	b2da      	uxtb	r2, r3
 8010860:	4b2b      	ldr	r3, [pc, #172]	; (8010910 <lcd_clear_digit+0x530>)
 8010862:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_6);
 8010864:	4b2a      	ldr	r3, [pc, #168]	; (8010910 <lcd_clear_digit+0x530>)
 8010866:	7c1b      	ldrb	r3, [r3, #16]
 8010868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801086c:	b2da      	uxtb	r2, r3
 801086e:	4b28      	ldr	r3, [pc, #160]	; (8010910 <lcd_clear_digit+0x530>)
 8010870:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_7);
 8010872:	4b27      	ldr	r3, [pc, #156]	; (8010910 <lcd_clear_digit+0x530>)
 8010874:	7c1b      	ldrb	r3, [r3, #16]
 8010876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801087a:	b2da      	uxtb	r2, r3
 801087c:	4b24      	ldr	r3, [pc, #144]	; (8010910 <lcd_clear_digit+0x530>)
 801087e:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_6);
 8010880:	4b23      	ldr	r3, [pc, #140]	; (8010910 <lcd_clear_digit+0x530>)
 8010882:	785b      	ldrb	r3, [r3, #1]
 8010884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010888:	b2da      	uxtb	r2, r3
 801088a:	4b21      	ldr	r3, [pc, #132]	; (8010910 <lcd_clear_digit+0x530>)
 801088c:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_7);
 801088e:	4b20      	ldr	r3, [pc, #128]	; (8010910 <lcd_clear_digit+0x530>)
 8010890:	785b      	ldrb	r3, [r3, #1]
 8010892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010896:	b2da      	uxtb	r2, r3
 8010898:	4b1d      	ldr	r3, [pc, #116]	; (8010910 <lcd_clear_digit+0x530>)
 801089a:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_7);
 801089c:	4b1c      	ldr	r3, [pc, #112]	; (8010910 <lcd_clear_digit+0x530>)
 801089e:	799b      	ldrb	r3, [r3, #6]
 80108a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108a4:	b2da      	uxtb	r2, r3
 80108a6:	4b1a      	ldr	r3, [pc, #104]	; (8010910 <lcd_clear_digit+0x530>)
 80108a8:	719a      	strb	r2, [r3, #6]
            break;
 80108aa:	e0ce      	b.n	8010a4a <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_11] &= ~(1 << BIT_4);
 80108ac:	4b18      	ldr	r3, [pc, #96]	; (8010910 <lcd_clear_digit+0x530>)
 80108ae:	7adb      	ldrb	r3, [r3, #11]
 80108b0:	f023 0310 	bic.w	r3, r3, #16
 80108b4:	b2da      	uxtb	r2, r3
 80108b6:	4b16      	ldr	r3, [pc, #88]	; (8010910 <lcd_clear_digit+0x530>)
 80108b8:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_5);
 80108ba:	4b15      	ldr	r3, [pc, #84]	; (8010910 <lcd_clear_digit+0x530>)
 80108bc:	7adb      	ldrb	r3, [r3, #11]
 80108be:	f023 0320 	bic.w	r3, r3, #32
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	4b12      	ldr	r3, [pc, #72]	; (8010910 <lcd_clear_digit+0x530>)
 80108c6:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_4);
 80108c8:	4b11      	ldr	r3, [pc, #68]	; (8010910 <lcd_clear_digit+0x530>)
 80108ca:	7c1b      	ldrb	r3, [r3, #16]
 80108cc:	f023 0310 	bic.w	r3, r3, #16
 80108d0:	b2da      	uxtb	r2, r3
 80108d2:	4b0f      	ldr	r3, [pc, #60]	; (8010910 <lcd_clear_digit+0x530>)
 80108d4:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_5);
 80108d6:	4b0e      	ldr	r3, [pc, #56]	; (8010910 <lcd_clear_digit+0x530>)
 80108d8:	7c1b      	ldrb	r3, [r3, #16]
 80108da:	f023 0320 	bic.w	r3, r3, #32
 80108de:	b2da      	uxtb	r2, r3
 80108e0:	4b0b      	ldr	r3, [pc, #44]	; (8010910 <lcd_clear_digit+0x530>)
 80108e2:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_4);
 80108e4:	4b0a      	ldr	r3, [pc, #40]	; (8010910 <lcd_clear_digit+0x530>)
 80108e6:	785b      	ldrb	r3, [r3, #1]
 80108e8:	f023 0310 	bic.w	r3, r3, #16
 80108ec:	b2da      	uxtb	r2, r3
 80108ee:	4b08      	ldr	r3, [pc, #32]	; (8010910 <lcd_clear_digit+0x530>)
 80108f0:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_5);
 80108f2:	4b07      	ldr	r3, [pc, #28]	; (8010910 <lcd_clear_digit+0x530>)
 80108f4:	785b      	ldrb	r3, [r3, #1]
 80108f6:	f023 0320 	bic.w	r3, r3, #32
 80108fa:	b2da      	uxtb	r2, r3
 80108fc:	4b04      	ldr	r3, [pc, #16]	; (8010910 <lcd_clear_digit+0x530>)
 80108fe:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_5);
 8010900:	4b03      	ldr	r3, [pc, #12]	; (8010910 <lcd_clear_digit+0x530>)
 8010902:	799b      	ldrb	r3, [r3, #6]
 8010904:	f023 0320 	bic.w	r3, r3, #32
 8010908:	b2da      	uxtb	r2, r3
 801090a:	4b01      	ldr	r3, [pc, #4]	; (8010910 <lcd_clear_digit+0x530>)
 801090c:	719a      	strb	r2, [r3, #6]
            break;
 801090e:	e09c      	b.n	8010a4a <lcd_clear_digit+0x66a>
 8010910:	20001da0 	.word	0x20001da0
            case DIGIT_4:
                g_lcd_map[REG_11] &= ~(1 << BIT_2);
 8010914:	4b50      	ldr	r3, [pc, #320]	; (8010a58 <lcd_clear_digit+0x678>)
 8010916:	7adb      	ldrb	r3, [r3, #11]
 8010918:	f023 0304 	bic.w	r3, r3, #4
 801091c:	b2da      	uxtb	r2, r3
 801091e:	4b4e      	ldr	r3, [pc, #312]	; (8010a58 <lcd_clear_digit+0x678>)
 8010920:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_3);
 8010922:	4b4d      	ldr	r3, [pc, #308]	; (8010a58 <lcd_clear_digit+0x678>)
 8010924:	7adb      	ldrb	r3, [r3, #11]
 8010926:	f023 0308 	bic.w	r3, r3, #8
 801092a:	b2da      	uxtb	r2, r3
 801092c:	4b4a      	ldr	r3, [pc, #296]	; (8010a58 <lcd_clear_digit+0x678>)
 801092e:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_2);
 8010930:	4b49      	ldr	r3, [pc, #292]	; (8010a58 <lcd_clear_digit+0x678>)
 8010932:	7c1b      	ldrb	r3, [r3, #16]
 8010934:	f023 0304 	bic.w	r3, r3, #4
 8010938:	b2da      	uxtb	r2, r3
 801093a:	4b47      	ldr	r3, [pc, #284]	; (8010a58 <lcd_clear_digit+0x678>)
 801093c:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_3);
 801093e:	4b46      	ldr	r3, [pc, #280]	; (8010a58 <lcd_clear_digit+0x678>)
 8010940:	7c1b      	ldrb	r3, [r3, #16]
 8010942:	f023 0308 	bic.w	r3, r3, #8
 8010946:	b2da      	uxtb	r2, r3
 8010948:	4b43      	ldr	r3, [pc, #268]	; (8010a58 <lcd_clear_digit+0x678>)
 801094a:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_2);
 801094c:	4b42      	ldr	r3, [pc, #264]	; (8010a58 <lcd_clear_digit+0x678>)
 801094e:	785b      	ldrb	r3, [r3, #1]
 8010950:	f023 0304 	bic.w	r3, r3, #4
 8010954:	b2da      	uxtb	r2, r3
 8010956:	4b40      	ldr	r3, [pc, #256]	; (8010a58 <lcd_clear_digit+0x678>)
 8010958:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_3);
 801095a:	4b3f      	ldr	r3, [pc, #252]	; (8010a58 <lcd_clear_digit+0x678>)
 801095c:	785b      	ldrb	r3, [r3, #1]
 801095e:	f023 0308 	bic.w	r3, r3, #8
 8010962:	b2da      	uxtb	r2, r3
 8010964:	4b3c      	ldr	r3, [pc, #240]	; (8010a58 <lcd_clear_digit+0x678>)
 8010966:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_3);
 8010968:	4b3b      	ldr	r3, [pc, #236]	; (8010a58 <lcd_clear_digit+0x678>)
 801096a:	799b      	ldrb	r3, [r3, #6]
 801096c:	f023 0308 	bic.w	r3, r3, #8
 8010970:	b2da      	uxtb	r2, r3
 8010972:	4b39      	ldr	r3, [pc, #228]	; (8010a58 <lcd_clear_digit+0x678>)
 8010974:	719a      	strb	r2, [r3, #6]
            break;
 8010976:	e068      	b.n	8010a4a <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_11] &= ~(1 << BIT_0);
 8010978:	4b37      	ldr	r3, [pc, #220]	; (8010a58 <lcd_clear_digit+0x678>)
 801097a:	7adb      	ldrb	r3, [r3, #11]
 801097c:	f023 0301 	bic.w	r3, r3, #1
 8010980:	b2da      	uxtb	r2, r3
 8010982:	4b35      	ldr	r3, [pc, #212]	; (8010a58 <lcd_clear_digit+0x678>)
 8010984:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_1);
 8010986:	4b34      	ldr	r3, [pc, #208]	; (8010a58 <lcd_clear_digit+0x678>)
 8010988:	7adb      	ldrb	r3, [r3, #11]
 801098a:	f023 0302 	bic.w	r3, r3, #2
 801098e:	b2da      	uxtb	r2, r3
 8010990:	4b31      	ldr	r3, [pc, #196]	; (8010a58 <lcd_clear_digit+0x678>)
 8010992:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_0);
 8010994:	4b30      	ldr	r3, [pc, #192]	; (8010a58 <lcd_clear_digit+0x678>)
 8010996:	7c1b      	ldrb	r3, [r3, #16]
 8010998:	f023 0301 	bic.w	r3, r3, #1
 801099c:	b2da      	uxtb	r2, r3
 801099e:	4b2e      	ldr	r3, [pc, #184]	; (8010a58 <lcd_clear_digit+0x678>)
 80109a0:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_1);
 80109a2:	4b2d      	ldr	r3, [pc, #180]	; (8010a58 <lcd_clear_digit+0x678>)
 80109a4:	7c1b      	ldrb	r3, [r3, #16]
 80109a6:	f023 0302 	bic.w	r3, r3, #2
 80109aa:	b2da      	uxtb	r2, r3
 80109ac:	4b2a      	ldr	r3, [pc, #168]	; (8010a58 <lcd_clear_digit+0x678>)
 80109ae:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_0);
 80109b0:	4b29      	ldr	r3, [pc, #164]	; (8010a58 <lcd_clear_digit+0x678>)
 80109b2:	785b      	ldrb	r3, [r3, #1]
 80109b4:	f023 0301 	bic.w	r3, r3, #1
 80109b8:	b2da      	uxtb	r2, r3
 80109ba:	4b27      	ldr	r3, [pc, #156]	; (8010a58 <lcd_clear_digit+0x678>)
 80109bc:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_1);
 80109be:	4b26      	ldr	r3, [pc, #152]	; (8010a58 <lcd_clear_digit+0x678>)
 80109c0:	785b      	ldrb	r3, [r3, #1]
 80109c2:	f023 0302 	bic.w	r3, r3, #2
 80109c6:	b2da      	uxtb	r2, r3
 80109c8:	4b23      	ldr	r3, [pc, #140]	; (8010a58 <lcd_clear_digit+0x678>)
 80109ca:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_1);
 80109cc:	4b22      	ldr	r3, [pc, #136]	; (8010a58 <lcd_clear_digit+0x678>)
 80109ce:	799b      	ldrb	r3, [r3, #6]
 80109d0:	f023 0302 	bic.w	r3, r3, #2
 80109d4:	b2da      	uxtb	r2, r3
 80109d6:	4b20      	ldr	r3, [pc, #128]	; (8010a58 <lcd_clear_digit+0x678>)
 80109d8:	719a      	strb	r2, [r3, #6]
            break;
 80109da:	e036      	b.n	8010a4a <lcd_clear_digit+0x66a>
            case DIGIT_6:
                g_lcd_map[REG_10] &= ~(1 << BIT_6);
 80109dc:	4b1e      	ldr	r3, [pc, #120]	; (8010a58 <lcd_clear_digit+0x678>)
 80109de:	7a9b      	ldrb	r3, [r3, #10]
 80109e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109e4:	b2da      	uxtb	r2, r3
 80109e6:	4b1c      	ldr	r3, [pc, #112]	; (8010a58 <lcd_clear_digit+0x678>)
 80109e8:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_10] &= ~(1 << BIT_7);
 80109ea:	4b1b      	ldr	r3, [pc, #108]	; (8010a58 <lcd_clear_digit+0x678>)
 80109ec:	7a9b      	ldrb	r3, [r3, #10]
 80109ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109f2:	b2da      	uxtb	r2, r3
 80109f4:	4b18      	ldr	r3, [pc, #96]	; (8010a58 <lcd_clear_digit+0x678>)
 80109f6:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_15] &= ~(1 << BIT_6);
 80109f8:	4b17      	ldr	r3, [pc, #92]	; (8010a58 <lcd_clear_digit+0x678>)
 80109fa:	7bdb      	ldrb	r3, [r3, #15]
 80109fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a00:	b2da      	uxtb	r2, r3
 8010a02:	4b15      	ldr	r3, [pc, #84]	; (8010a58 <lcd_clear_digit+0x678>)
 8010a04:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_15] &= ~(1 << BIT_7);
 8010a06:	4b14      	ldr	r3, [pc, #80]	; (8010a58 <lcd_clear_digit+0x678>)
 8010a08:	7bdb      	ldrb	r3, [r3, #15]
 8010a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a0e:	b2da      	uxtb	r2, r3
 8010a10:	4b11      	ldr	r3, [pc, #68]	; (8010a58 <lcd_clear_digit+0x678>)
 8010a12:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_0] &= ~(1 << BIT_6);
 8010a14:	4b10      	ldr	r3, [pc, #64]	; (8010a58 <lcd_clear_digit+0x678>)
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a1c:	b2da      	uxtb	r2, r3
 8010a1e:	4b0e      	ldr	r3, [pc, #56]	; (8010a58 <lcd_clear_digit+0x678>)
 8010a20:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_0] &= ~(1 << BIT_7);
 8010a22:	4b0d      	ldr	r3, [pc, #52]	; (8010a58 <lcd_clear_digit+0x678>)
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a2a:	b2da      	uxtb	r2, r3
 8010a2c:	4b0a      	ldr	r3, [pc, #40]	; (8010a58 <lcd_clear_digit+0x678>)
 8010a2e:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_5] &= ~(1 << BIT_7);
 8010a30:	4b09      	ldr	r3, [pc, #36]	; (8010a58 <lcd_clear_digit+0x678>)
 8010a32:	795b      	ldrb	r3, [r3, #5]
 8010a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a38:	b2da      	uxtb	r2, r3
 8010a3a:	4b07      	ldr	r3, [pc, #28]	; (8010a58 <lcd_clear_digit+0x678>)
 8010a3c:	715a      	strb	r2, [r3, #5]
            break;
 8010a3e:	e004      	b.n	8010a4a <lcd_clear_digit+0x66a>
            break;
 8010a40:	bf00      	nop
 8010a42:	e002      	b.n	8010a4a <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
 8010a44:	bf00      	nop
 8010a46:	e000      	b.n	8010a4a <lcd_clear_digit+0x66a>
            break;
 8010a48:	bf00      	nop
}
 8010a4a:	bf00      	nop
 8010a4c:	370c      	adds	r7, #12
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop
 8010a58:	20001da0 	.word	0x20001da0

08010a5c <lcd_clear_point>:
 * pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_clear_point(rows_t line, point_t point)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	4603      	mov	r3, r0
 8010a64:	460a      	mov	r2, r1
 8010a66:	71fb      	strb	r3, [r7, #7]
 8010a68:	4613      	mov	r3, r2
 8010a6a:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8010a6c:	79fb      	ldrb	r3, [r7, #7]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d14c      	bne.n	8010b0c <lcd_clear_point+0xb0>
    {
        switch (point)
 8010a72:	79bb      	ldrb	r3, [r7, #6]
 8010a74:	2b06      	cmp	r3, #6
 8010a76:	f200 808f 	bhi.w	8010b98 <lcd_clear_point+0x13c>
 8010a7a:	a201      	add	r2, pc, #4	; (adr r2, 8010a80 <lcd_clear_point+0x24>)
 8010a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a80:	08010a9d 	.word	0x08010a9d
 8010a84:	08010aad 	.word	0x08010aad
 8010a88:	08010abd 	.word	0x08010abd
 8010a8c:	08010acd 	.word	0x08010acd
 8010a90:	08010add 	.word	0x08010add
 8010a94:	08010aed 	.word	0x08010aed
 8010a98:	08010afd 	.word	0x08010afd
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_7);
 8010a9c:	4b44      	ldr	r3, [pc, #272]	; (8010bb0 <lcd_clear_point+0x154>)
 8010a9e:	79db      	ldrb	r3, [r3, #7]
 8010aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010aa4:	b2da      	uxtb	r2, r3
 8010aa6:	4b42      	ldr	r3, [pc, #264]	; (8010bb0 <lcd_clear_point+0x154>)
 8010aa8:	71da      	strb	r2, [r3, #7]
            break;
 8010aaa:	e07a      	b.n	8010ba2 <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] &= ~(1 << BIT_1);
 8010aac:	4b40      	ldr	r3, [pc, #256]	; (8010bb0 <lcd_clear_point+0x154>)
 8010aae:	7a1b      	ldrb	r3, [r3, #8]
 8010ab0:	f023 0302 	bic.w	r3, r3, #2
 8010ab4:	b2da      	uxtb	r2, r3
 8010ab6:	4b3e      	ldr	r3, [pc, #248]	; (8010bb0 <lcd_clear_point+0x154>)
 8010ab8:	721a      	strb	r2, [r3, #8]
            break;
 8010aba:	e072      	b.n	8010ba2 <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] &= ~(1 << BIT_3);
 8010abc:	4b3c      	ldr	r3, [pc, #240]	; (8010bb0 <lcd_clear_point+0x154>)
 8010abe:	7a1b      	ldrb	r3, [r3, #8]
 8010ac0:	f023 0308 	bic.w	r3, r3, #8
 8010ac4:	b2da      	uxtb	r2, r3
 8010ac6:	4b3a      	ldr	r3, [pc, #232]	; (8010bb0 <lcd_clear_point+0x154>)
 8010ac8:	721a      	strb	r2, [r3, #8]
            break;
 8010aca:	e06a      	b.n	8010ba2 <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] &= ~(1 << BIT_5);
 8010acc:	4b38      	ldr	r3, [pc, #224]	; (8010bb0 <lcd_clear_point+0x154>)
 8010ace:	7a1b      	ldrb	r3, [r3, #8]
 8010ad0:	f023 0320 	bic.w	r3, r3, #32
 8010ad4:	b2da      	uxtb	r2, r3
 8010ad6:	4b36      	ldr	r3, [pc, #216]	; (8010bb0 <lcd_clear_point+0x154>)
 8010ad8:	721a      	strb	r2, [r3, #8]
            break;
 8010ada:	e062      	b.n	8010ba2 <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] &= ~(1 << BIT_7);
 8010adc:	4b34      	ldr	r3, [pc, #208]	; (8010bb0 <lcd_clear_point+0x154>)
 8010ade:	7a1b      	ldrb	r3, [r3, #8]
 8010ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ae4:	b2da      	uxtb	r2, r3
 8010ae6:	4b32      	ldr	r3, [pc, #200]	; (8010bb0 <lcd_clear_point+0x154>)
 8010ae8:	721a      	strb	r2, [r3, #8]
            break;
 8010aea:	e05a      	b.n	8010ba2 <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] &= ~(1 << BIT_1);
 8010aec:	4b30      	ldr	r3, [pc, #192]	; (8010bb0 <lcd_clear_point+0x154>)
 8010aee:	7a5b      	ldrb	r3, [r3, #9]
 8010af0:	f023 0302 	bic.w	r3, r3, #2
 8010af4:	b2da      	uxtb	r2, r3
 8010af6:	4b2e      	ldr	r3, [pc, #184]	; (8010bb0 <lcd_clear_point+0x154>)
 8010af8:	725a      	strb	r2, [r3, #9]
            break;
 8010afa:	e052      	b.n	8010ba2 <lcd_clear_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] &= ~(1 << BIT_3);
 8010afc:	4b2c      	ldr	r3, [pc, #176]	; (8010bb0 <lcd_clear_point+0x154>)
 8010afe:	7a5b      	ldrb	r3, [r3, #9]
 8010b00:	f023 0308 	bic.w	r3, r3, #8
 8010b04:	b2da      	uxtb	r2, r3
 8010b06:	4b2a      	ldr	r3, [pc, #168]	; (8010bb0 <lcd_clear_point+0x154>)
 8010b08:	725a      	strb	r2, [r3, #9]
            break;
 8010b0a:	e04a      	b.n	8010ba2 <lcd_clear_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8010b0c:	79fb      	ldrb	r3, [r7, #7]
 8010b0e:	2b01      	cmp	r3, #1
 8010b10:	d144      	bne.n	8010b9c <lcd_clear_point+0x140>
    {
        switch (point)
 8010b12:	79bb      	ldrb	r3, [r7, #6]
 8010b14:	2b05      	cmp	r3, #5
 8010b16:	d843      	bhi.n	8010ba0 <lcd_clear_point+0x144>
 8010b18:	a201      	add	r2, pc, #4	; (adr r2, 8010b20 <lcd_clear_point+0xc4>)
 8010b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b1e:	bf00      	nop
 8010b20:	08010b39 	.word	0x08010b39
 8010b24:	08010b49 	.word	0x08010b49
 8010b28:	08010b59 	.word	0x08010b59
 8010b2c:	08010b69 	.word	0x08010b69
 8010b30:	08010b79 	.word	0x08010b79
 8010b34:	08010b89 	.word	0x08010b89
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_2);
 8010b38:	4b1d      	ldr	r3, [pc, #116]	; (8010bb0 <lcd_clear_point+0x154>)
 8010b3a:	79db      	ldrb	r3, [r3, #7]
 8010b3c:	f023 0304 	bic.w	r3, r3, #4
 8010b40:	b2da      	uxtb	r2, r3
 8010b42:	4b1b      	ldr	r3, [pc, #108]	; (8010bb0 <lcd_clear_point+0x154>)
 8010b44:	71da      	strb	r2, [r3, #7]
            break;
 8010b46:	e02c      	b.n	8010ba2 <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] &= ~(1 << BIT_0);
 8010b48:	4b19      	ldr	r3, [pc, #100]	; (8010bb0 <lcd_clear_point+0x154>)
 8010b4a:	79db      	ldrb	r3, [r3, #7]
 8010b4c:	f023 0301 	bic.w	r3, r3, #1
 8010b50:	b2da      	uxtb	r2, r3
 8010b52:	4b17      	ldr	r3, [pc, #92]	; (8010bb0 <lcd_clear_point+0x154>)
 8010b54:	71da      	strb	r2, [r3, #7]
            break;
 8010b56:	e024      	b.n	8010ba2 <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] &= ~(1 << BIT_6);
 8010b58:	4b15      	ldr	r3, [pc, #84]	; (8010bb0 <lcd_clear_point+0x154>)
 8010b5a:	799b      	ldrb	r3, [r3, #6]
 8010b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b60:	b2da      	uxtb	r2, r3
 8010b62:	4b13      	ldr	r3, [pc, #76]	; (8010bb0 <lcd_clear_point+0x154>)
 8010b64:	719a      	strb	r2, [r3, #6]
            break;
 8010b66:	e01c      	b.n	8010ba2 <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] &= ~(1 << BIT_4);
 8010b68:	4b11      	ldr	r3, [pc, #68]	; (8010bb0 <lcd_clear_point+0x154>)
 8010b6a:	799b      	ldrb	r3, [r3, #6]
 8010b6c:	f023 0310 	bic.w	r3, r3, #16
 8010b70:	b2da      	uxtb	r2, r3
 8010b72:	4b0f      	ldr	r3, [pc, #60]	; (8010bb0 <lcd_clear_point+0x154>)
 8010b74:	719a      	strb	r2, [r3, #6]
            break;
 8010b76:	e014      	b.n	8010ba2 <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] &= ~(1 << BIT_2);
 8010b78:	4b0d      	ldr	r3, [pc, #52]	; (8010bb0 <lcd_clear_point+0x154>)
 8010b7a:	799b      	ldrb	r3, [r3, #6]
 8010b7c:	f023 0304 	bic.w	r3, r3, #4
 8010b80:	b2da      	uxtb	r2, r3
 8010b82:	4b0b      	ldr	r3, [pc, #44]	; (8010bb0 <lcd_clear_point+0x154>)
 8010b84:	719a      	strb	r2, [r3, #6]
            break;
 8010b86:	e00c      	b.n	8010ba2 <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] &= ~(1 << BIT_0);
 8010b88:	4b09      	ldr	r3, [pc, #36]	; (8010bb0 <lcd_clear_point+0x154>)
 8010b8a:	799b      	ldrb	r3, [r3, #6]
 8010b8c:	f023 0301 	bic.w	r3, r3, #1
 8010b90:	b2da      	uxtb	r2, r3
 8010b92:	4b07      	ldr	r3, [pc, #28]	; (8010bb0 <lcd_clear_point+0x154>)
 8010b94:	719a      	strb	r2, [r3, #6]
            break;
 8010b96:	e004      	b.n	8010ba2 <lcd_clear_point+0x146>
            break;
 8010b98:	bf00      	nop
 8010b9a:	e002      	b.n	8010ba2 <lcd_clear_point+0x146>
            default:
            break;
        }
    }
 8010b9c:	bf00      	nop
 8010b9e:	e000      	b.n	8010ba2 <lcd_clear_point+0x146>
            break;
 8010ba0:	bf00      	nop
}
 8010ba2:	bf00      	nop
 8010ba4:	370c      	adds	r7, #12
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr
 8010bae:	bf00      	nop
 8010bb0:	20001da0 	.word	0x20001da0

08010bb4 <lcd_clear_time_unit>:

    pcf8553_blink(blink_speed);
}

void lcd_clear_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b082      	sub	sp, #8
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	4603      	mov	r3, r0
 8010bbc:	460a      	mov	r2, r1
 8010bbe:	71fb      	strb	r3, [r7, #7]
 8010bc0:	4613      	mov	r3, r2
 8010bc2:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8010bc4:	79fb      	ldrb	r3, [r7, #7]
 8010bc6:	2b03      	cmp	r3, #3
 8010bc8:	d82a      	bhi.n	8010c20 <lcd_clear_time_unit+0x6c>
 8010bca:	a201      	add	r2, pc, #4	; (adr r2, 8010bd0 <lcd_clear_time_unit+0x1c>)
 8010bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bd0:	08010be1 	.word	0x08010be1
 8010bd4:	08010bf1 	.word	0x08010bf1
 8010bd8:	08010c01 	.word	0x08010c01
 8010bdc:	08010c11 	.word	0x08010c11
    {
        case H:
            g_lcd_map[REG_5] &= ~(1 << BIT_6);
 8010be0:	4b14      	ldr	r3, [pc, #80]	; (8010c34 <lcd_clear_time_unit+0x80>)
 8010be2:	795b      	ldrb	r3, [r3, #5]
 8010be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010be8:	b2da      	uxtb	r2, r3
 8010bea:	4b12      	ldr	r3, [pc, #72]	; (8010c34 <lcd_clear_time_unit+0x80>)
 8010bec:	715a      	strb	r2, [r3, #5]
        break;
 8010bee:	e018      	b.n	8010c22 <lcd_clear_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] &= ~(1 << BIT_5);
 8010bf0:	4b10      	ldr	r3, [pc, #64]	; (8010c34 <lcd_clear_time_unit+0x80>)
 8010bf2:	7a5b      	ldrb	r3, [r3, #9]
 8010bf4:	f023 0320 	bic.w	r3, r3, #32
 8010bf8:	b2da      	uxtb	r2, r3
 8010bfa:	4b0e      	ldr	r3, [pc, #56]	; (8010c34 <lcd_clear_time_unit+0x80>)
 8010bfc:	725a      	strb	r2, [r3, #9]
        break;
 8010bfe:	e010      	b.n	8010c22 <lcd_clear_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] &= ~(1 << BIT_5);
 8010c00:	4b0c      	ldr	r3, [pc, #48]	; (8010c34 <lcd_clear_time_unit+0x80>)
 8010c02:	7a9b      	ldrb	r3, [r3, #10]
 8010c04:	f023 0320 	bic.w	r3, r3, #32
 8010c08:	b2da      	uxtb	r2, r3
 8010c0a:	4b0a      	ldr	r3, [pc, #40]	; (8010c34 <lcd_clear_time_unit+0x80>)
 8010c0c:	729a      	strb	r2, [r3, #10]
        break;
 8010c0e:	e008      	b.n	8010c22 <lcd_clear_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] &= ~(1 << BIT_7);
 8010c10:	4b08      	ldr	r3, [pc, #32]	; (8010c34 <lcd_clear_time_unit+0x80>)
 8010c12:	7a5b      	ldrb	r3, [r3, #9]
 8010c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c18:	b2da      	uxtb	r2, r3
 8010c1a:	4b06      	ldr	r3, [pc, #24]	; (8010c34 <lcd_clear_time_unit+0x80>)
 8010c1c:	725a      	strb	r2, [r3, #9]
        break;
 8010c1e:	e000      	b.n	8010c22 <lcd_clear_time_unit+0x6e>
        default:
        break;
 8010c20:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8010c22:	79bb      	ldrb	r3, [r7, #6]
 8010c24:	4618      	mov	r0, r3
 8010c26:	f001 fbff 	bl	8012428 <pcf8553_blink>
}
 8010c2a:	bf00      	nop
 8010c2c:	3708      	adds	r7, #8
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	20001da0 	.word	0x20001da0

08010c38 <lcd_clear_vol_unit>:

void lcd_clear_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	4603      	mov	r3, r0
 8010c40:	460a      	mov	r2, r1
 8010c42:	71fb      	strb	r3, [r7, #7]
 8010c44:	4613      	mov	r3, r2
 8010c46:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8010c48:	79fb      	ldrb	r3, [r7, #7]
 8010c4a:	2b07      	cmp	r3, #7
 8010c4c:	f200 822c 	bhi.w	80110a8 <lcd_clear_vol_unit+0x470>
 8010c50:	a201      	add	r2, pc, #4	; (adr r2, 8010c58 <lcd_clear_vol_unit+0x20>)
 8010c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c56:	bf00      	nop
 8010c58:	08010c79 	.word	0x08010c79
 8010c5c:	08010d6b 	.word	0x08010d6b
 8010c60:	08010e15 	.word	0x08010e15
 8010c64:	08010ccf 	.word	0x08010ccf
 8010c68:	08010f6f 	.word	0x08010f6f
 8010c6c:	08010ea9 	.word	0x08010ea9
 8010c70:	08010fef 	.word	0x08010fef
 8010c74:	0801106f 	.word	0x0801106f
    {
        case LT:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010c78:	4b8a      	ldr	r3, [pc, #552]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010c7a:	7bdb      	ldrb	r3, [r3, #15]
 8010c7c:	f023 0320 	bic.w	r3, r3, #32
 8010c80:	b2da      	uxtb	r2, r3
 8010c82:	4b88      	ldr	r3, [pc, #544]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010c84:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010c86:	4b87      	ldr	r3, [pc, #540]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	f023 0320 	bic.w	r3, r3, #32
 8010c8e:	b2da      	uxtb	r2, r3
 8010c90:	4b84      	ldr	r3, [pc, #528]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010c92:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8010c94:	4b83      	ldr	r3, [pc, #524]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010c96:	795b      	ldrb	r3, [r3, #5]
 8010c98:	f023 0320 	bic.w	r3, r3, #32
 8010c9c:	b2da      	uxtb	r2, r3
 8010c9e:	4b81      	ldr	r3, [pc, #516]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010ca0:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010ca2:	4b80      	ldr	r3, [pc, #512]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010ca4:	7b9b      	ldrb	r3, [r3, #14]
 8010ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010caa:	b2da      	uxtb	r2, r3
 8010cac:	4b7d      	ldr	r3, [pc, #500]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010cae:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] &= ~(1 << BIT_0);
 8010cb0:	4b7c      	ldr	r3, [pc, #496]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010cb2:	7a9b      	ldrb	r3, [r3, #10]
 8010cb4:	f023 0301 	bic.w	r3, r3, #1
 8010cb8:	b2da      	uxtb	r2, r3
 8010cba:	4b7a      	ldr	r3, [pc, #488]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010cbc:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] &= ~(1 << BIT_6);
 8010cbe:	4b79      	ldr	r3, [pc, #484]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010cc0:	7a5b      	ldrb	r3, [r3, #9]
 8010cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010cc6:	b2da      	uxtb	r2, r3
 8010cc8:	4b76      	ldr	r3, [pc, #472]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010cca:	725a      	strb	r2, [r3, #9]
        break;
 8010ccc:	e1ed      	b.n	80110aa <lcd_clear_vol_unit+0x472>
        case KG:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010cce:	4b75      	ldr	r3, [pc, #468]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010cd0:	7bdb      	ldrb	r3, [r3, #15]
 8010cd2:	f023 0320 	bic.w	r3, r3, #32
 8010cd6:	b2da      	uxtb	r2, r3
 8010cd8:	4b72      	ldr	r3, [pc, #456]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010cda:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010cdc:	4b71      	ldr	r3, [pc, #452]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010cde:	7bdb      	ldrb	r3, [r3, #15]
 8010ce0:	f023 0310 	bic.w	r3, r3, #16
 8010ce4:	b2da      	uxtb	r2, r3
 8010ce6:	4b6f      	ldr	r3, [pc, #444]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010ce8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8010cea:	4b6e      	ldr	r3, [pc, #440]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010cec:	7bdb      	ldrb	r3, [r3, #15]
 8010cee:	f023 0304 	bic.w	r3, r3, #4
 8010cf2:	b2da      	uxtb	r2, r3
 8010cf4:	4b6b      	ldr	r3, [pc, #428]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010cf6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010cf8:	4b6a      	ldr	r3, [pc, #424]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010cfa:	781b      	ldrb	r3, [r3, #0]
 8010cfc:	f023 0320 	bic.w	r3, r3, #32
 8010d00:	b2da      	uxtb	r2, r3
 8010d02:	4b68      	ldr	r3, [pc, #416]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d04:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_4);
 8010d06:	4b67      	ldr	r3, [pc, #412]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d08:	795b      	ldrb	r3, [r3, #5]
 8010d0a:	f023 0310 	bic.w	r3, r3, #16
 8010d0e:	b2da      	uxtb	r2, r3
 8010d10:	4b64      	ldr	r3, [pc, #400]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d12:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010d14:	4b63      	ldr	r3, [pc, #396]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d16:	7b9b      	ldrb	r3, [r3, #14]
 8010d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	4b61      	ldr	r3, [pc, #388]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d20:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010d22:	4b60      	ldr	r3, [pc, #384]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d24:	7bdb      	ldrb	r3, [r3, #15]
 8010d26:	f023 0302 	bic.w	r3, r3, #2
 8010d2a:	b2da      	uxtb	r2, r3
 8010d2c:	4b5d      	ldr	r3, [pc, #372]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d2e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010d30:	4b5c      	ldr	r3, [pc, #368]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d32:	781b      	ldrb	r3, [r3, #0]
 8010d34:	f023 0301 	bic.w	r3, r3, #1
 8010d38:	b2da      	uxtb	r2, r3
 8010d3a:	4b5a      	ldr	r3, [pc, #360]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d3c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010d3e:	4b59      	ldr	r3, [pc, #356]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d40:	781b      	ldrb	r3, [r3, #0]
 8010d42:	f023 0302 	bic.w	r3, r3, #2
 8010d46:	b2da      	uxtb	r2, r3
 8010d48:	4b56      	ldr	r3, [pc, #344]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d4a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 8010d4c:	4b55      	ldr	r3, [pc, #340]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d4e:	791b      	ldrb	r3, [r3, #4]
 8010d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d54:	b2da      	uxtb	r2, r3
 8010d56:	4b53      	ldr	r3, [pc, #332]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d58:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010d5a:	4b52      	ldr	r3, [pc, #328]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d5c:	795b      	ldrb	r3, [r3, #5]
 8010d5e:	f023 0302 	bic.w	r3, r3, #2
 8010d62:	b2da      	uxtb	r2, r3
 8010d64:	4b4f      	ldr	r3, [pc, #316]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d66:	715a      	strb	r2, [r3, #5]
        break;
 8010d68:	e19f      	b.n	80110aa <lcd_clear_vol_unit+0x472>
        case M3:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010d6a:	4b4e      	ldr	r3, [pc, #312]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d6c:	7bdb      	ldrb	r3, [r3, #15]
 8010d6e:	f023 0320 	bic.w	r3, r3, #32
 8010d72:	b2da      	uxtb	r2, r3
 8010d74:	4b4b      	ldr	r3, [pc, #300]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d76:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 8010d78:	4b4a      	ldr	r3, [pc, #296]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d7a:	7a9b      	ldrb	r3, [r3, #10]
 8010d7c:	f023 0304 	bic.w	r3, r3, #4
 8010d80:	b2da      	uxtb	r2, r3
 8010d82:	4b48      	ldr	r3, [pc, #288]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d84:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010d86:	4b47      	ldr	r3, [pc, #284]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d88:	7bdb      	ldrb	r3, [r3, #15]
 8010d8a:	f023 0310 	bic.w	r3, r3, #16
 8010d8e:	b2da      	uxtb	r2, r3
 8010d90:	4b44      	ldr	r3, [pc, #272]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d92:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010d94:	4b43      	ldr	r3, [pc, #268]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010d96:	7bdb      	ldrb	r3, [r3, #15]
 8010d98:	f023 0308 	bic.w	r3, r3, #8
 8010d9c:	b2da      	uxtb	r2, r3
 8010d9e:	4b41      	ldr	r3, [pc, #260]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010da0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010da2:	4b40      	ldr	r3, [pc, #256]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010da4:	781b      	ldrb	r3, [r3, #0]
 8010da6:	f023 0320 	bic.w	r3, r3, #32
 8010daa:	b2da      	uxtb	r2, r3
 8010dac:	4b3d      	ldr	r3, [pc, #244]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010dae:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8010db0:	4b3c      	ldr	r3, [pc, #240]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	f023 0308 	bic.w	r3, r3, #8
 8010db8:	b2da      	uxtb	r2, r3
 8010dba:	4b3a      	ldr	r3, [pc, #232]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010dbc:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010dbe:	4b39      	ldr	r3, [pc, #228]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010dc0:	7b9b      	ldrb	r3, [r3, #14]
 8010dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dc6:	b2da      	uxtb	r2, r3
 8010dc8:	4b36      	ldr	r3, [pc, #216]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010dca:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 8010dcc:	4b35      	ldr	r3, [pc, #212]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010dce:	7cdb      	ldrb	r3, [r3, #19]
 8010dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dd4:	b2da      	uxtb	r2, r3
 8010dd6:	4b33      	ldr	r3, [pc, #204]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010dd8:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8010dda:	4b32      	ldr	r3, [pc, #200]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010ddc:	7cdb      	ldrb	r3, [r3, #19]
 8010dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010de2:	b2da      	uxtb	r2, r3
 8010de4:	4b2f      	ldr	r3, [pc, #188]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010de6:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010de8:	4b2e      	ldr	r3, [pc, #184]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	f023 0301 	bic.w	r3, r3, #1
 8010df0:	b2da      	uxtb	r2, r3
 8010df2:	4b2c      	ldr	r3, [pc, #176]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010df4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 8010df6:	4b2b      	ldr	r3, [pc, #172]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010df8:	791b      	ldrb	r3, [r3, #4]
 8010dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dfe:	b2da      	uxtb	r2, r3
 8010e00:	4b28      	ldr	r3, [pc, #160]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e02:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010e04:	4b27      	ldr	r3, [pc, #156]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e06:	795b      	ldrb	r3, [r3, #5]
 8010e08:	f023 0302 	bic.w	r3, r3, #2
 8010e0c:	b2da      	uxtb	r2, r3
 8010e0e:	4b25      	ldr	r3, [pc, #148]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e10:	715a      	strb	r2, [r3, #5]
        break;
 8010e12:	e14a      	b.n	80110aa <lcd_clear_vol_unit+0x472>
        case MC:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010e14:	4b23      	ldr	r3, [pc, #140]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e16:	7bdb      	ldrb	r3, [r3, #15]
 8010e18:	f023 0320 	bic.w	r3, r3, #32
 8010e1c:	b2da      	uxtb	r2, r3
 8010e1e:	4b21      	ldr	r3, [pc, #132]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e20:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 8010e22:	4b20      	ldr	r3, [pc, #128]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e24:	7a9b      	ldrb	r3, [r3, #10]
 8010e26:	f023 0304 	bic.w	r3, r3, #4
 8010e2a:	b2da      	uxtb	r2, r3
 8010e2c:	4b1d      	ldr	r3, [pc, #116]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e2e:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010e30:	4b1c      	ldr	r3, [pc, #112]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e32:	7bdb      	ldrb	r3, [r3, #15]
 8010e34:	f023 0310 	bic.w	r3, r3, #16
 8010e38:	b2da      	uxtb	r2, r3
 8010e3a:	4b1a      	ldr	r3, [pc, #104]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e3c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010e3e:	4b19      	ldr	r3, [pc, #100]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e40:	7bdb      	ldrb	r3, [r3, #15]
 8010e42:	f023 0308 	bic.w	r3, r3, #8
 8010e46:	b2da      	uxtb	r2, r3
 8010e48:	4b16      	ldr	r3, [pc, #88]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e4a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  &= ~(1 << BIT_5);
 8010e4c:	4b15      	ldr	r3, [pc, #84]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	f023 0320 	bic.w	r3, r3, #32
 8010e54:	b2da      	uxtb	r2, r3
 8010e56:	4b13      	ldr	r3, [pc, #76]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e58:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0]  &= ~(1 << BIT_3);
 8010e5a:	4b12      	ldr	r3, [pc, #72]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e5c:	781b      	ldrb	r3, [r3, #0]
 8010e5e:	f023 0308 	bic.w	r3, r3, #8
 8010e62:	b2da      	uxtb	r2, r3
 8010e64:	4b0f      	ldr	r3, [pc, #60]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e66:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010e68:	4b0e      	ldr	r3, [pc, #56]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e6a:	7b9b      	ldrb	r3, [r3, #14]
 8010e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e70:	b2da      	uxtb	r2, r3
 8010e72:	4b0c      	ldr	r3, [pc, #48]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e74:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010e76:	4b0b      	ldr	r3, [pc, #44]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e78:	7bdb      	ldrb	r3, [r3, #15]
 8010e7a:	f023 0302 	bic.w	r3, r3, #2
 8010e7e:	b2da      	uxtb	r2, r3
 8010e80:	4b08      	ldr	r3, [pc, #32]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e82:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  &= ~(1 << BIT_1);
 8010e84:	4b07      	ldr	r3, [pc, #28]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	f023 0302 	bic.w	r3, r3, #2
 8010e8c:	b2da      	uxtb	r2, r3
 8010e8e:	4b05      	ldr	r3, [pc, #20]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e90:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5]  &= ~(1 << BIT_1);
 8010e92:	4b04      	ldr	r3, [pc, #16]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e94:	795b      	ldrb	r3, [r3, #5]
 8010e96:	f023 0302 	bic.w	r3, r3, #2
 8010e9a:	b2da      	uxtb	r2, r3
 8010e9c:	4b01      	ldr	r3, [pc, #4]	; (8010ea4 <lcd_clear_vol_unit+0x26c>)
 8010e9e:	715a      	strb	r2, [r3, #5]
        break;
 8010ea0:	e103      	b.n	80110aa <lcd_clear_vol_unit+0x472>
 8010ea2:	bf00      	nop
 8010ea4:	20001da0 	.word	0x20001da0
        case BR:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8010ea8:	4b84      	ldr	r3, [pc, #528]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010eaa:	7a9b      	ldrb	r3, [r3, #10]
 8010eac:	f023 0308 	bic.w	r3, r3, #8
 8010eb0:	b2da      	uxtb	r2, r3
 8010eb2:	4b82      	ldr	r3, [pc, #520]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010eb4:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] &= ~(1 << BIT_4);
 8010eb6:	4b81      	ldr	r3, [pc, #516]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010eb8:	7a9b      	ldrb	r3, [r3, #10]
 8010eba:	f023 0310 	bic.w	r3, r3, #16
 8010ebe:	b2da      	uxtb	r2, r3
 8010ec0:	4b7e      	ldr	r3, [pc, #504]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010ec2:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010ec4:	4b7d      	ldr	r3, [pc, #500]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010ec6:	7bdb      	ldrb	r3, [r3, #15]
 8010ec8:	f023 0308 	bic.w	r3, r3, #8
 8010ecc:	b2da      	uxtb	r2, r3
 8010ece:	4b7b      	ldr	r3, [pc, #492]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010ed0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8010ed2:	4b7a      	ldr	r3, [pc, #488]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	f023 0310 	bic.w	r3, r3, #16
 8010eda:	b2da      	uxtb	r2, r3
 8010edc:	4b77      	ldr	r3, [pc, #476]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010ede:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_2);
 8010ee0:	4b76      	ldr	r3, [pc, #472]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010ee2:	795b      	ldrb	r3, [r3, #5]
 8010ee4:	f023 0304 	bic.w	r3, r3, #4
 8010ee8:	b2da      	uxtb	r2, r3
 8010eea:	4b74      	ldr	r3, [pc, #464]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010eec:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8010eee:	4b73      	ldr	r3, [pc, #460]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	f023 0308 	bic.w	r3, r3, #8
 8010ef6:	b2da      	uxtb	r2, r3
 8010ef8:	4b70      	ldr	r3, [pc, #448]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010efa:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8010efc:	4b6f      	ldr	r3, [pc, #444]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010efe:	795b      	ldrb	r3, [r3, #5]
 8010f00:	f023 0320 	bic.w	r3, r3, #32
 8010f04:	b2da      	uxtb	r2, r3
 8010f06:	4b6d      	ldr	r3, [pc, #436]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f08:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010f0a:	4b6c      	ldr	r3, [pc, #432]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f0c:	7b9b      	ldrb	r3, [r3, #14]
 8010f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f12:	b2da      	uxtb	r2, r3
 8010f14:	4b69      	ldr	r3, [pc, #420]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f16:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010f18:	4b68      	ldr	r3, [pc, #416]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f1a:	7bdb      	ldrb	r3, [r3, #15]
 8010f1c:	f023 0302 	bic.w	r3, r3, #2
 8010f20:	b2da      	uxtb	r2, r3
 8010f22:	4b66      	ldr	r3, [pc, #408]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f24:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 8010f26:	4b65      	ldr	r3, [pc, #404]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f28:	7cdb      	ldrb	r3, [r3, #19]
 8010f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f2e:	b2da      	uxtb	r2, r3
 8010f30:	4b62      	ldr	r3, [pc, #392]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f32:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8010f34:	4b61      	ldr	r3, [pc, #388]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f36:	7cdb      	ldrb	r3, [r3, #19]
 8010f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f3c:	b2da      	uxtb	r2, r3
 8010f3e:	4b5f      	ldr	r3, [pc, #380]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f40:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010f42:	4b5e      	ldr	r3, [pc, #376]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	f023 0301 	bic.w	r3, r3, #1
 8010f4a:	b2da      	uxtb	r2, r3
 8010f4c:	4b5b      	ldr	r3, [pc, #364]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f4e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010f50:	4b5a      	ldr	r3, [pc, #360]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	f023 0302 	bic.w	r3, r3, #2
 8010f58:	b2da      	uxtb	r2, r3
 8010f5a:	4b58      	ldr	r3, [pc, #352]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f5c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_0);
 8010f5e:	4b57      	ldr	r3, [pc, #348]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f60:	795b      	ldrb	r3, [r3, #5]
 8010f62:	f023 0301 	bic.w	r3, r3, #1
 8010f66:	b2da      	uxtb	r2, r3
 8010f68:	4b54      	ldr	r3, [pc, #336]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f6a:	715a      	strb	r2, [r3, #5]
        break;
 8010f6c:	e09d      	b.n	80110aa <lcd_clear_vol_unit+0x472>
        case GL:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8010f6e:	4b53      	ldr	r3, [pc, #332]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f70:	7a9b      	ldrb	r3, [r3, #10]
 8010f72:	f023 0308 	bic.w	r3, r3, #8
 8010f76:	b2da      	uxtb	r2, r3
 8010f78:	4b50      	ldr	r3, [pc, #320]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f7a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010f7c:	4b4f      	ldr	r3, [pc, #316]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f7e:	7bdb      	ldrb	r3, [r3, #15]
 8010f80:	f023 0320 	bic.w	r3, r3, #32
 8010f84:	b2da      	uxtb	r2, r3
 8010f86:	4b4d      	ldr	r3, [pc, #308]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f88:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8010f8a:	4b4c      	ldr	r3, [pc, #304]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f8c:	781b      	ldrb	r3, [r3, #0]
 8010f8e:	f023 0310 	bic.w	r3, r3, #16
 8010f92:	b2da      	uxtb	r2, r3
 8010f94:	4b49      	ldr	r3, [pc, #292]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f96:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010f98:	4b48      	ldr	r3, [pc, #288]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	f023 0320 	bic.w	r3, r3, #32
 8010fa0:	b2da      	uxtb	r2, r3
 8010fa2:	4b46      	ldr	r3, [pc, #280]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010fa4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8010fa6:	4b45      	ldr	r3, [pc, #276]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	f023 0308 	bic.w	r3, r3, #8
 8010fae:	b2da      	uxtb	r2, r3
 8010fb0:	4b42      	ldr	r3, [pc, #264]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010fb2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8010fb4:	4b41      	ldr	r3, [pc, #260]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010fb6:	795b      	ldrb	r3, [r3, #5]
 8010fb8:	f023 0320 	bic.w	r3, r3, #32
 8010fbc:	b2da      	uxtb	r2, r3
 8010fbe:	4b3f      	ldr	r3, [pc, #252]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010fc0:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010fc2:	4b3e      	ldr	r3, [pc, #248]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010fc4:	7bdb      	ldrb	r3, [r3, #15]
 8010fc6:	f023 0302 	bic.w	r3, r3, #2
 8010fca:	b2da      	uxtb	r2, r3
 8010fcc:	4b3b      	ldr	r3, [pc, #236]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010fce:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010fd0:	4b3a      	ldr	r3, [pc, #232]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	f023 0302 	bic.w	r3, r3, #2
 8010fd8:	b2da      	uxtb	r2, r3
 8010fda:	4b38      	ldr	r3, [pc, #224]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010fdc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010fde:	4b37      	ldr	r3, [pc, #220]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010fe0:	795b      	ldrb	r3, [r3, #5]
 8010fe2:	f023 0302 	bic.w	r3, r3, #2
 8010fe6:	b2da      	uxtb	r2, r3
 8010fe8:	4b34      	ldr	r3, [pc, #208]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010fea:	715a      	strb	r2, [r3, #5]
        break;
 8010fec:	e05d      	b.n	80110aa <lcd_clear_vol_unit+0x472>
        case CELSIUS:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8010fee:	4b33      	ldr	r3, [pc, #204]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010ff0:	7a9b      	ldrb	r3, [r3, #10]
 8010ff2:	f023 0308 	bic.w	r3, r3, #8
 8010ff6:	b2da      	uxtb	r2, r3
 8010ff8:	4b30      	ldr	r3, [pc, #192]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010ffa:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010ffc:	4b2f      	ldr	r3, [pc, #188]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8010ffe:	7bdb      	ldrb	r3, [r3, #15]
 8011000:	f023 0320 	bic.w	r3, r3, #32
 8011004:	b2da      	uxtb	r2, r3
 8011006:	4b2d      	ldr	r3, [pc, #180]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8011008:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 801100a:	4b2c      	ldr	r3, [pc, #176]	; (80110bc <lcd_clear_vol_unit+0x484>)
 801100c:	7bdb      	ldrb	r3, [r3, #15]
 801100e:	f023 0308 	bic.w	r3, r3, #8
 8011012:	b2da      	uxtb	r2, r3
 8011014:	4b29      	ldr	r3, [pc, #164]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8011016:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8011018:	4b28      	ldr	r3, [pc, #160]	; (80110bc <lcd_clear_vol_unit+0x484>)
 801101a:	7bdb      	ldrb	r3, [r3, #15]
 801101c:	f023 0304 	bic.w	r3, r3, #4
 8011020:	b2da      	uxtb	r2, r3
 8011022:	4b26      	ldr	r3, [pc, #152]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8011024:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8011026:	4b25      	ldr	r3, [pc, #148]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8011028:	781b      	ldrb	r3, [r3, #0]
 801102a:	f023 0310 	bic.w	r3, r3, #16
 801102e:	b2da      	uxtb	r2, r3
 8011030:	4b22      	ldr	r3, [pc, #136]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8011032:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8011034:	4b21      	ldr	r3, [pc, #132]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8011036:	7b9b      	ldrb	r3, [r3, #14]
 8011038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801103c:	b2da      	uxtb	r2, r3
 801103e:	4b1f      	ldr	r3, [pc, #124]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8011040:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8011042:	4b1e      	ldr	r3, [pc, #120]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8011044:	7bdb      	ldrb	r3, [r3, #15]
 8011046:	f023 0302 	bic.w	r3, r3, #2
 801104a:	b2da      	uxtb	r2, r3
 801104c:	4b1b      	ldr	r3, [pc, #108]	; (80110bc <lcd_clear_vol_unit+0x484>)
 801104e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8011050:	4b1a      	ldr	r3, [pc, #104]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8011052:	781b      	ldrb	r3, [r3, #0]
 8011054:	f023 0302 	bic.w	r3, r3, #2
 8011058:	b2da      	uxtb	r2, r3
 801105a:	4b18      	ldr	r3, [pc, #96]	; (80110bc <lcd_clear_vol_unit+0x484>)
 801105c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 801105e:	4b17      	ldr	r3, [pc, #92]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8011060:	795b      	ldrb	r3, [r3, #5]
 8011062:	f023 0302 	bic.w	r3, r3, #2
 8011066:	b2da      	uxtb	r2, r3
 8011068:	4b14      	ldr	r3, [pc, #80]	; (80110bc <lcd_clear_vol_unit+0x484>)
 801106a:	715a      	strb	r2, [r3, #5]
        break;
 801106c:	e01d      	b.n	80110aa <lcd_clear_vol_unit+0x472>
        case NOTHING:
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 801106e:	4b13      	ldr	r3, [pc, #76]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8011070:	7bdb      	ldrb	r3, [r3, #15]
 8011072:	f023 0304 	bic.w	r3, r3, #4
 8011076:	b2da      	uxtb	r2, r3
 8011078:	4b10      	ldr	r3, [pc, #64]	; (80110bc <lcd_clear_vol_unit+0x484>)
 801107a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 801107c:	4b0f      	ldr	r3, [pc, #60]	; (80110bc <lcd_clear_vol_unit+0x484>)
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	f023 0310 	bic.w	r3, r3, #16
 8011084:	b2da      	uxtb	r2, r3
 8011086:	4b0d      	ldr	r3, [pc, #52]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8011088:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 801108a:	4b0c      	ldr	r3, [pc, #48]	; (80110bc <lcd_clear_vol_unit+0x484>)
 801108c:	7cdb      	ldrb	r3, [r3, #19]
 801108e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011092:	b2da      	uxtb	r2, r3
 8011094:	4b09      	ldr	r3, [pc, #36]	; (80110bc <lcd_clear_vol_unit+0x484>)
 8011096:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8011098:	4b08      	ldr	r3, [pc, #32]	; (80110bc <lcd_clear_vol_unit+0x484>)
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	f023 0301 	bic.w	r3, r3, #1
 80110a0:	b2da      	uxtb	r2, r3
 80110a2:	4b06      	ldr	r3, [pc, #24]	; (80110bc <lcd_clear_vol_unit+0x484>)
 80110a4:	701a      	strb	r2, [r3, #0]
        break;
 80110a6:	e000      	b.n	80110aa <lcd_clear_vol_unit+0x472>
        default:
        break;
 80110a8:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 80110aa:	79bb      	ldrb	r3, [r7, #6]
 80110ac:	4618      	mov	r0, r3
 80110ae:	f001 f9bb 	bl	8012428 <pcf8553_blink>
}
 80110b2:	bf00      	nop
 80110b4:	3708      	adds	r7, #8
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}
 80110ba:	bf00      	nop
 80110bc:	20001da0 	.word	0x20001da0

080110c0 <lcd_init>:
 * borrándola.
 * @param  None
 * @retval None
 */
void lcd_init()
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	af00      	add	r7, sp, #0
    pcf8553_init();
 80110c4:	f001 fa22 	bl	801250c <pcf8553_init>
}
 80110c8:	bf00      	nop
 80110ca:	bd80      	pop	{r7, pc}

080110cc <lcd_put_char>:
 * elegida.
 * @param caracter a escribir tipo char, columna y fila de tipo uint8_t
 * @retval None
 */
void lcd_put_char(char c, uint8_t col, uint8_t row)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b082      	sub	sp, #8
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	4603      	mov	r3, r0
 80110d4:	71fb      	strb	r3, [r7, #7]
 80110d6:	460b      	mov	r3, r1
 80110d8:	71bb      	strb	r3, [r7, #6]
 80110da:	4613      	mov	r3, r2
 80110dc:	717b      	strb	r3, [r7, #5]
    g_row = row + 1;
 80110de:	797b      	ldrb	r3, [r7, #5]
 80110e0:	3301      	adds	r3, #1
 80110e2:	b2da      	uxtb	r2, r3
 80110e4:	4bde      	ldr	r3, [pc, #888]	; (8011460 <lcd_put_char+0x394>)
 80110e6:	701a      	strb	r2, [r3, #0]
     *
     * No se activa esta funcionalidad si se está en el menú de configuración,
     * debido a que entra en conflicto con la funcionalidad del parpadeo de los
     * campos a modificar.
     */
    if(in_configuration == 0)
 80110e8:	4bde      	ldr	r3, [pc, #888]	; (8011464 <lcd_put_char+0x398>)
 80110ea:	781b      	ldrb	r3, [r3, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d10a      	bne.n	8011106 <lcd_put_char+0x3a>
    {
        if (g_buf[row][col] == c)
 80110f0:	797a      	ldrb	r2, [r7, #5]
 80110f2:	79bb      	ldrb	r3, [r7, #6]
 80110f4:	49dc      	ldr	r1, [pc, #880]	; (8011468 <lcd_put_char+0x39c>)
 80110f6:	00d2      	lsls	r2, r2, #3
 80110f8:	440a      	add	r2, r1
 80110fa:	4413      	add	r3, r2
 80110fc:	781b      	ldrb	r3, [r3, #0]
 80110fe:	79fa      	ldrb	r2, [r7, #7]
 8011100:	429a      	cmp	r2, r3
 8011102:	f000 81d6 	beq.w	80114b2 <lcd_put_char+0x3e6>
        {
            return;
        }
    }

    g_buf[row][col] = c;
 8011106:	797a      	ldrb	r2, [r7, #5]
 8011108:	79bb      	ldrb	r3, [r7, #6]
 801110a:	49d7      	ldr	r1, [pc, #860]	; (8011468 <lcd_put_char+0x39c>)
 801110c:	00d2      	lsls	r2, r2, #3
 801110e:	440a      	add	r2, r1
 8011110:	4413      	add	r3, r2
 8011112:	79fa      	ldrb	r2, [r7, #7]
 8011114:	701a      	strb	r2, [r3, #0]

    switch (row)
 8011116:	797b      	ldrb	r3, [r7, #5]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d002      	beq.n	8011122 <lcd_put_char+0x56>
 801111c:	2b01      	cmp	r3, #1
 801111e:	d008      	beq.n	8011132 <lcd_put_char+0x66>
                return;
            }

        break;
        default:
            return;
 8011120:	e1ce      	b.n	80114c0 <lcd_put_char+0x3f4>
            if (col < LINE_0_DIGITS - 1)
 8011122:	79bb      	ldrb	r3, [r7, #6]
 8011124:	2b07      	cmp	r3, #7
 8011126:	f200 81c6 	bhi.w	80114b6 <lcd_put_char+0x3ea>
                g_col = col;
 801112a:	4ad0      	ldr	r2, [pc, #832]	; (801146c <lcd_put_char+0x3a0>)
 801112c:	79bb      	ldrb	r3, [r7, #6]
 801112e:	7013      	strb	r3, [r2, #0]
        break;
 8011130:	e00a      	b.n	8011148 <lcd_put_char+0x7c>
            if (col < LINE_1_DIGITS - 1)
 8011132:	79bb      	ldrb	r3, [r7, #6]
 8011134:	2b06      	cmp	r3, #6
 8011136:	f200 81c0 	bhi.w	80114ba <lcd_put_char+0x3ee>
                g_col = 6 - col; // @suppress("Avoid magic numbers")
 801113a:	79bb      	ldrb	r3, [r7, #6]
 801113c:	f1c3 0306 	rsb	r3, r3, #6
 8011140:	b2da      	uxtb	r2, r3
 8011142:	4bca      	ldr	r3, [pc, #808]	; (801146c <lcd_put_char+0x3a0>)
 8011144:	701a      	strb	r2, [r3, #0]
        break;
 8011146:	bf00      	nop
        break;
    }

    switch (c)
 8011148:	79fb      	ldrb	r3, [r7, #7]
 801114a:	3b20      	subs	r3, #32
 801114c:	2b19      	cmp	r3, #25
 801114e:	f200 81b6 	bhi.w	80114be <lcd_put_char+0x3f2>
 8011152:	a201      	add	r2, pc, #4	; (adr r2, 8011158 <lcd_put_char+0x8c>)
 8011154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011158:	080111c1 	.word	0x080111c1
 801115c:	080114bf 	.word	0x080114bf
 8011160:	080114bf 	.word	0x080114bf
 8011164:	080114bf 	.word	0x080114bf
 8011168:	080114bf 	.word	0x080114bf
 801116c:	080114bf 	.word	0x080114bf
 8011170:	080114bf 	.word	0x080114bf
 8011174:	080114bf 	.word	0x080114bf
 8011178:	080114bf 	.word	0x080114bf
 801117c:	080114bf 	.word	0x080114bf
 8011180:	080114bf 	.word	0x080114bf
 8011184:	080114bf 	.word	0x080114bf
 8011188:	080114bf 	.word	0x080114bf
 801118c:	080114bf 	.word	0x080114bf
 8011190:	08011203 	.word	0x08011203
 8011194:	080114bf 	.word	0x080114bf
 8011198:	0801120d 	.word	0x0801120d
 801119c:	0801124f 	.word	0x0801124f
 80111a0:	08011291 	.word	0x08011291
 80111a4:	080112d3 	.word	0x080112d3
 80111a8:	08011315 	.word	0x08011315
 80111ac:	08011357 	.word	0x08011357
 80111b0:	08011399 	.word	0x08011399
 80111b4:	080113db 	.word	0x080113db
 80111b8:	0801141d 	.word	0x0801141d
 80111bc:	08011471 	.word	0x08011471
    {
        case ' ':
            lcd_write_line(SEG_A, 0);
 80111c0:	2100      	movs	r1, #0
 80111c2:	2000      	movs	r0, #0
 80111c4:	f001 f836 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80111c8:	2100      	movs	r1, #0
 80111ca:	2001      	movs	r0, #1
 80111cc:	f001 f832 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 80111d0:	2100      	movs	r1, #0
 80111d2:	2002      	movs	r0, #2
 80111d4:	f001 f82e 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 80111d8:	2100      	movs	r1, #0
 80111da:	2003      	movs	r0, #3
 80111dc:	f001 f82a 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 80111e0:	2100      	movs	r1, #0
 80111e2:	2004      	movs	r0, #4
 80111e4:	f001 f826 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 80111e8:	2100      	movs	r1, #0
 80111ea:	2005      	movs	r0, #5
 80111ec:	f001 f822 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 80111f0:	2100      	movs	r1, #0
 80111f2:	2006      	movs	r0, #6
 80111f4:	f001 f81e 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80111f8:	2100      	movs	r1, #0
 80111fa:	2007      	movs	r0, #7
 80111fc:	f001 f81a 	bl	8012234 <lcd_write_line>
        break;
 8011200:	e15e      	b.n	80114c0 <lcd_put_char+0x3f4>
        case '.':
            lcd_write_line(SEG_H, 1);
 8011202:	2101      	movs	r1, #1
 8011204:	2007      	movs	r0, #7
 8011206:	f001 f815 	bl	8012234 <lcd_write_line>
        break;
 801120a:	e159      	b.n	80114c0 <lcd_put_char+0x3f4>
        case '0':
            lcd_write_line(SEG_A, 1);
 801120c:	2101      	movs	r1, #1
 801120e:	2000      	movs	r0, #0
 8011210:	f001 f810 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011214:	2101      	movs	r1, #1
 8011216:	2001      	movs	r0, #1
 8011218:	f001 f80c 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801121c:	2101      	movs	r1, #1
 801121e:	2002      	movs	r0, #2
 8011220:	f001 f808 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011224:	2100      	movs	r1, #0
 8011226:	2003      	movs	r0, #3
 8011228:	f001 f804 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 801122c:	2101      	movs	r1, #1
 801122e:	2004      	movs	r0, #4
 8011230:	f001 f800 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011234:	2101      	movs	r1, #1
 8011236:	2005      	movs	r0, #5
 8011238:	f000 fffc 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801123c:	2101      	movs	r1, #1
 801123e:	2006      	movs	r0, #6
 8011240:	f000 fff8 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011244:	2100      	movs	r1, #0
 8011246:	2007      	movs	r0, #7
 8011248:	f000 fff4 	bl	8012234 <lcd_write_line>
        break;
 801124c:	e138      	b.n	80114c0 <lcd_put_char+0x3f4>
        case '1':
            lcd_write_line(SEG_A, 0);
 801124e:	2100      	movs	r1, #0
 8011250:	2000      	movs	r0, #0
 8011252:	f000 ffef 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011256:	2100      	movs	r1, #0
 8011258:	2001      	movs	r0, #1
 801125a:	f000 ffeb 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801125e:	2101      	movs	r1, #1
 8011260:	2002      	movs	r0, #2
 8011262:	f000 ffe7 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011266:	2100      	movs	r1, #0
 8011268:	2003      	movs	r0, #3
 801126a:	f000 ffe3 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801126e:	2100      	movs	r1, #0
 8011270:	2004      	movs	r0, #4
 8011272:	f000 ffdf 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011276:	2101      	movs	r1, #1
 8011278:	2005      	movs	r0, #5
 801127a:	f000 ffdb 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 801127e:	2100      	movs	r1, #0
 8011280:	2006      	movs	r0, #6
 8011282:	f000 ffd7 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011286:	2100      	movs	r1, #0
 8011288:	2007      	movs	r0, #7
 801128a:	f000 ffd3 	bl	8012234 <lcd_write_line>
        break;
 801128e:	e117      	b.n	80114c0 <lcd_put_char+0x3f4>
        case '2':
            lcd_write_line(SEG_A, 1);
 8011290:	2101      	movs	r1, #1
 8011292:	2000      	movs	r0, #0
 8011294:	f000 ffce 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011298:	2101      	movs	r1, #1
 801129a:	2001      	movs	r0, #1
 801129c:	f000 ffca 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 80112a0:	2100      	movs	r1, #0
 80112a2:	2002      	movs	r0, #2
 80112a4:	f000 ffc6 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80112a8:	2101      	movs	r1, #1
 80112aa:	2003      	movs	r0, #3
 80112ac:	f000 ffc2 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 80112b0:	2100      	movs	r1, #0
 80112b2:	2004      	movs	r0, #4
 80112b4:	f000 ffbe 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80112b8:	2101      	movs	r1, #1
 80112ba:	2005      	movs	r0, #5
 80112bc:	f000 ffba 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80112c0:	2101      	movs	r1, #1
 80112c2:	2006      	movs	r0, #6
 80112c4:	f000 ffb6 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80112c8:	2100      	movs	r1, #0
 80112ca:	2007      	movs	r0, #7
 80112cc:	f000 ffb2 	bl	8012234 <lcd_write_line>
        break;
 80112d0:	e0f6      	b.n	80114c0 <lcd_put_char+0x3f4>
        case '3':
            lcd_write_line(SEG_A, 1);
 80112d2:	2101      	movs	r1, #1
 80112d4:	2000      	movs	r0, #0
 80112d6:	f000 ffad 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80112da:	2100      	movs	r1, #0
 80112dc:	2001      	movs	r0, #1
 80112de:	f000 ffa9 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80112e2:	2101      	movs	r1, #1
 80112e4:	2002      	movs	r0, #2
 80112e6:	f000 ffa5 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80112ea:	2101      	movs	r1, #1
 80112ec:	2003      	movs	r0, #3
 80112ee:	f000 ffa1 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 80112f2:	2100      	movs	r1, #0
 80112f4:	2004      	movs	r0, #4
 80112f6:	f000 ff9d 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80112fa:	2101      	movs	r1, #1
 80112fc:	2005      	movs	r0, #5
 80112fe:	f000 ff99 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011302:	2101      	movs	r1, #1
 8011304:	2006      	movs	r0, #6
 8011306:	f000 ff95 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801130a:	2100      	movs	r1, #0
 801130c:	2007      	movs	r0, #7
 801130e:	f000 ff91 	bl	8012234 <lcd_write_line>
        break;
 8011312:	e0d5      	b.n	80114c0 <lcd_put_char+0x3f4>
        case '4':
            lcd_write_line(SEG_A, 0);
 8011314:	2100      	movs	r1, #0
 8011316:	2000      	movs	r0, #0
 8011318:	f000 ff8c 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 801131c:	2100      	movs	r1, #0
 801131e:	2001      	movs	r0, #1
 8011320:	f000 ff88 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011324:	2101      	movs	r1, #1
 8011326:	2002      	movs	r0, #2
 8011328:	f000 ff84 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 801132c:	2101      	movs	r1, #1
 801132e:	2003      	movs	r0, #3
 8011330:	f000 ff80 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011334:	2101      	movs	r1, #1
 8011336:	2004      	movs	r0, #4
 8011338:	f000 ff7c 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 801133c:	2101      	movs	r1, #1
 801133e:	2005      	movs	r0, #5
 8011340:	f000 ff78 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 8011344:	2100      	movs	r1, #0
 8011346:	2006      	movs	r0, #6
 8011348:	f000 ff74 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801134c:	2100      	movs	r1, #0
 801134e:	2007      	movs	r0, #7
 8011350:	f000 ff70 	bl	8012234 <lcd_write_line>
        break;
 8011354:	e0b4      	b.n	80114c0 <lcd_put_char+0x3f4>
        case '5':
            lcd_write_line(SEG_A, 1);
 8011356:	2101      	movs	r1, #1
 8011358:	2000      	movs	r0, #0
 801135a:	f000 ff6b 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 801135e:	2100      	movs	r1, #0
 8011360:	2001      	movs	r0, #1
 8011362:	f000 ff67 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011366:	2101      	movs	r1, #1
 8011368:	2002      	movs	r0, #2
 801136a:	f000 ff63 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 801136e:	2101      	movs	r1, #1
 8011370:	2003      	movs	r0, #3
 8011372:	f000 ff5f 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011376:	2101      	movs	r1, #1
 8011378:	2004      	movs	r0, #4
 801137a:	f000 ff5b 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 801137e:	2100      	movs	r1, #0
 8011380:	2005      	movs	r0, #5
 8011382:	f000 ff57 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011386:	2101      	movs	r1, #1
 8011388:	2006      	movs	r0, #6
 801138a:	f000 ff53 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801138e:	2100      	movs	r1, #0
 8011390:	2007      	movs	r0, #7
 8011392:	f000 ff4f 	bl	8012234 <lcd_write_line>
        break;
 8011396:	e093      	b.n	80114c0 <lcd_put_char+0x3f4>
        case '6':
            lcd_write_line(SEG_A, 1);
 8011398:	2101      	movs	r1, #1
 801139a:	2000      	movs	r0, #0
 801139c:	f000 ff4a 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80113a0:	2101      	movs	r1, #1
 80113a2:	2001      	movs	r0, #1
 80113a4:	f000 ff46 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80113a8:	2101      	movs	r1, #1
 80113aa:	2002      	movs	r0, #2
 80113ac:	f000 ff42 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80113b0:	2101      	movs	r1, #1
 80113b2:	2003      	movs	r0, #3
 80113b4:	f000 ff3e 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80113b8:	2101      	movs	r1, #1
 80113ba:	2004      	movs	r0, #4
 80113bc:	f000 ff3a 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 80113c0:	2100      	movs	r1, #0
 80113c2:	2005      	movs	r0, #5
 80113c4:	f000 ff36 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80113c8:	2101      	movs	r1, #1
 80113ca:	2006      	movs	r0, #6
 80113cc:	f000 ff32 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80113d0:	2100      	movs	r1, #0
 80113d2:	2007      	movs	r0, #7
 80113d4:	f000 ff2e 	bl	8012234 <lcd_write_line>
        break;
 80113d8:	e072      	b.n	80114c0 <lcd_put_char+0x3f4>
        case '7':
            lcd_write_line(SEG_A, 0);
 80113da:	2100      	movs	r1, #0
 80113dc:	2000      	movs	r0, #0
 80113de:	f000 ff29 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80113e2:	2100      	movs	r1, #0
 80113e4:	2001      	movs	r0, #1
 80113e6:	f000 ff25 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80113ea:	2101      	movs	r1, #1
 80113ec:	2002      	movs	r0, #2
 80113ee:	f000 ff21 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 80113f2:	2100      	movs	r1, #0
 80113f4:	2003      	movs	r0, #3
 80113f6:	f000 ff1d 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 80113fa:	2100      	movs	r1, #0
 80113fc:	2004      	movs	r0, #4
 80113fe:	f000 ff19 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011402:	2101      	movs	r1, #1
 8011404:	2005      	movs	r0, #5
 8011406:	f000 ff15 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801140a:	2101      	movs	r1, #1
 801140c:	2006      	movs	r0, #6
 801140e:	f000 ff11 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011412:	2100      	movs	r1, #0
 8011414:	2007      	movs	r0, #7
 8011416:	f000 ff0d 	bl	8012234 <lcd_write_line>
        break;
 801141a:	e051      	b.n	80114c0 <lcd_put_char+0x3f4>
        case '8':
            lcd_write_line(SEG_A, 1);
 801141c:	2101      	movs	r1, #1
 801141e:	2000      	movs	r0, #0
 8011420:	f000 ff08 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011424:	2101      	movs	r1, #1
 8011426:	2001      	movs	r0, #1
 8011428:	f000 ff04 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801142c:	2101      	movs	r1, #1
 801142e:	2002      	movs	r0, #2
 8011430:	f000 ff00 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011434:	2101      	movs	r1, #1
 8011436:	2003      	movs	r0, #3
 8011438:	f000 fefc 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 801143c:	2101      	movs	r1, #1
 801143e:	2004      	movs	r0, #4
 8011440:	f000 fef8 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011444:	2101      	movs	r1, #1
 8011446:	2005      	movs	r0, #5
 8011448:	f000 fef4 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801144c:	2101      	movs	r1, #1
 801144e:	2006      	movs	r0, #6
 8011450:	f000 fef0 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011454:	2100      	movs	r1, #0
 8011456:	2007      	movs	r0, #7
 8011458:	f000 feec 	bl	8012234 <lcd_write_line>
        break;
 801145c:	e030      	b.n	80114c0 <lcd_put_char+0x3f4>
 801145e:	bf00      	nop
 8011460:	20001d0d 	.word	0x20001d0d
 8011464:	20001dbc 	.word	0x20001dbc
 8011468:	20001cfc 	.word	0x20001cfc
 801146c:	20001d0c 	.word	0x20001d0c
        case '9':
            lcd_write_line(SEG_A, 0);
 8011470:	2100      	movs	r1, #0
 8011472:	2000      	movs	r0, #0
 8011474:	f000 fede 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011478:	2100      	movs	r1, #0
 801147a:	2001      	movs	r0, #1
 801147c:	f000 feda 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011480:	2101      	movs	r1, #1
 8011482:	2002      	movs	r0, #2
 8011484:	f000 fed6 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011488:	2101      	movs	r1, #1
 801148a:	2003      	movs	r0, #3
 801148c:	f000 fed2 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011490:	2101      	movs	r1, #1
 8011492:	2004      	movs	r0, #4
 8011494:	f000 fece 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011498:	2101      	movs	r1, #1
 801149a:	2005      	movs	r0, #5
 801149c:	f000 feca 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80114a0:	2101      	movs	r1, #1
 80114a2:	2006      	movs	r0, #6
 80114a4:	f000 fec6 	bl	8012234 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80114a8:	2100      	movs	r1, #0
 80114aa:	2007      	movs	r0, #7
 80114ac:	f000 fec2 	bl	8012234 <lcd_write_line>
        break;
 80114b0:	e006      	b.n	80114c0 <lcd_put_char+0x3f4>
            return;
 80114b2:	bf00      	nop
 80114b4:	e004      	b.n	80114c0 <lcd_put_char+0x3f4>
                return;
 80114b6:	bf00      	nop
 80114b8:	e002      	b.n	80114c0 <lcd_put_char+0x3f4>
                return;
 80114ba:	bf00      	nop
 80114bc:	e000      	b.n	80114c0 <lcd_put_char+0x3f4>
        default:
        break;
 80114be:	bf00      	nop
    }
}
 80114c0:	3708      	adds	r7, #8
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}
 80114c6:	bf00      	nop

080114c8 <lcd_refresh>:
 * enviar en dicho buffer y luego escribir todo junto.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_refresh()
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	af00      	add	r7, sp, #0
    pcf8553_dump();
 80114cc:	f000 fff2 	bl	80124b4 <pcf8553_dump>
}
 80114d0:	bf00      	nop
 80114d2:	bd80      	pop	{r7, pc}

080114d4 <lcd_set_point>:
 * @brief Función que escribe un punto en específico en la pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_set_point(rows_t line, point_t point)
{
 80114d4:	b480      	push	{r7}
 80114d6:	b083      	sub	sp, #12
 80114d8:	af00      	add	r7, sp, #0
 80114da:	4603      	mov	r3, r0
 80114dc:	460a      	mov	r2, r1
 80114de:	71fb      	strb	r3, [r7, #7]
 80114e0:	4613      	mov	r3, r2
 80114e2:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 80114e4:	79fb      	ldrb	r3, [r7, #7]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d14c      	bne.n	8011584 <lcd_set_point+0xb0>
    {
        switch (point)
 80114ea:	79bb      	ldrb	r3, [r7, #6]
 80114ec:	2b06      	cmp	r3, #6
 80114ee:	f200 808f 	bhi.w	8011610 <lcd_set_point+0x13c>
 80114f2:	a201      	add	r2, pc, #4	; (adr r2, 80114f8 <lcd_set_point+0x24>)
 80114f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114f8:	08011515 	.word	0x08011515
 80114fc:	08011525 	.word	0x08011525
 8011500:	08011535 	.word	0x08011535
 8011504:	08011545 	.word	0x08011545
 8011508:	08011555 	.word	0x08011555
 801150c:	08011565 	.word	0x08011565
 8011510:	08011575 	.word	0x08011575
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_7);
 8011514:	4b44      	ldr	r3, [pc, #272]	; (8011628 <lcd_set_point+0x154>)
 8011516:	79db      	ldrb	r3, [r3, #7]
 8011518:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801151c:	b2da      	uxtb	r2, r3
 801151e:	4b42      	ldr	r3, [pc, #264]	; (8011628 <lcd_set_point+0x154>)
 8011520:	71da      	strb	r2, [r3, #7]
            break;
 8011522:	e07a      	b.n	801161a <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] |= (1 << BIT_1);
 8011524:	4b40      	ldr	r3, [pc, #256]	; (8011628 <lcd_set_point+0x154>)
 8011526:	7a1b      	ldrb	r3, [r3, #8]
 8011528:	f043 0302 	orr.w	r3, r3, #2
 801152c:	b2da      	uxtb	r2, r3
 801152e:	4b3e      	ldr	r3, [pc, #248]	; (8011628 <lcd_set_point+0x154>)
 8011530:	721a      	strb	r2, [r3, #8]
            break;
 8011532:	e072      	b.n	801161a <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] |= (1 << BIT_3);
 8011534:	4b3c      	ldr	r3, [pc, #240]	; (8011628 <lcd_set_point+0x154>)
 8011536:	7a1b      	ldrb	r3, [r3, #8]
 8011538:	f043 0308 	orr.w	r3, r3, #8
 801153c:	b2da      	uxtb	r2, r3
 801153e:	4b3a      	ldr	r3, [pc, #232]	; (8011628 <lcd_set_point+0x154>)
 8011540:	721a      	strb	r2, [r3, #8]
            break;
 8011542:	e06a      	b.n	801161a <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] |= (1 << BIT_5);
 8011544:	4b38      	ldr	r3, [pc, #224]	; (8011628 <lcd_set_point+0x154>)
 8011546:	7a1b      	ldrb	r3, [r3, #8]
 8011548:	f043 0320 	orr.w	r3, r3, #32
 801154c:	b2da      	uxtb	r2, r3
 801154e:	4b36      	ldr	r3, [pc, #216]	; (8011628 <lcd_set_point+0x154>)
 8011550:	721a      	strb	r2, [r3, #8]
            break;
 8011552:	e062      	b.n	801161a <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] |= (1 << BIT_7);
 8011554:	4b34      	ldr	r3, [pc, #208]	; (8011628 <lcd_set_point+0x154>)
 8011556:	7a1b      	ldrb	r3, [r3, #8]
 8011558:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801155c:	b2da      	uxtb	r2, r3
 801155e:	4b32      	ldr	r3, [pc, #200]	; (8011628 <lcd_set_point+0x154>)
 8011560:	721a      	strb	r2, [r3, #8]
            break;
 8011562:	e05a      	b.n	801161a <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] |= (1 << BIT_1);
 8011564:	4b30      	ldr	r3, [pc, #192]	; (8011628 <lcd_set_point+0x154>)
 8011566:	7a5b      	ldrb	r3, [r3, #9]
 8011568:	f043 0302 	orr.w	r3, r3, #2
 801156c:	b2da      	uxtb	r2, r3
 801156e:	4b2e      	ldr	r3, [pc, #184]	; (8011628 <lcd_set_point+0x154>)
 8011570:	725a      	strb	r2, [r3, #9]
            break;
 8011572:	e052      	b.n	801161a <lcd_set_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] |= (1 << BIT_3);
 8011574:	4b2c      	ldr	r3, [pc, #176]	; (8011628 <lcd_set_point+0x154>)
 8011576:	7a5b      	ldrb	r3, [r3, #9]
 8011578:	f043 0308 	orr.w	r3, r3, #8
 801157c:	b2da      	uxtb	r2, r3
 801157e:	4b2a      	ldr	r3, [pc, #168]	; (8011628 <lcd_set_point+0x154>)
 8011580:	725a      	strb	r2, [r3, #9]
            break;
 8011582:	e04a      	b.n	801161a <lcd_set_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8011584:	79fb      	ldrb	r3, [r7, #7]
 8011586:	2b01      	cmp	r3, #1
 8011588:	d144      	bne.n	8011614 <lcd_set_point+0x140>
    {
        switch (point)
 801158a:	79bb      	ldrb	r3, [r7, #6]
 801158c:	2b05      	cmp	r3, #5
 801158e:	d843      	bhi.n	8011618 <lcd_set_point+0x144>
 8011590:	a201      	add	r2, pc, #4	; (adr r2, 8011598 <lcd_set_point+0xc4>)
 8011592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011596:	bf00      	nop
 8011598:	080115b1 	.word	0x080115b1
 801159c:	080115c1 	.word	0x080115c1
 80115a0:	080115d1 	.word	0x080115d1
 80115a4:	080115e1 	.word	0x080115e1
 80115a8:	080115f1 	.word	0x080115f1
 80115ac:	08011601 	.word	0x08011601
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_2);
 80115b0:	4b1d      	ldr	r3, [pc, #116]	; (8011628 <lcd_set_point+0x154>)
 80115b2:	79db      	ldrb	r3, [r3, #7]
 80115b4:	f043 0304 	orr.w	r3, r3, #4
 80115b8:	b2da      	uxtb	r2, r3
 80115ba:	4b1b      	ldr	r3, [pc, #108]	; (8011628 <lcd_set_point+0x154>)
 80115bc:	71da      	strb	r2, [r3, #7]
            break;
 80115be:	e02c      	b.n	801161a <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] |= (1 << BIT_0);
 80115c0:	4b19      	ldr	r3, [pc, #100]	; (8011628 <lcd_set_point+0x154>)
 80115c2:	79db      	ldrb	r3, [r3, #7]
 80115c4:	f043 0301 	orr.w	r3, r3, #1
 80115c8:	b2da      	uxtb	r2, r3
 80115ca:	4b17      	ldr	r3, [pc, #92]	; (8011628 <lcd_set_point+0x154>)
 80115cc:	71da      	strb	r2, [r3, #7]
            break;
 80115ce:	e024      	b.n	801161a <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] |= (1 << BIT_6);
 80115d0:	4b15      	ldr	r3, [pc, #84]	; (8011628 <lcd_set_point+0x154>)
 80115d2:	799b      	ldrb	r3, [r3, #6]
 80115d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115d8:	b2da      	uxtb	r2, r3
 80115da:	4b13      	ldr	r3, [pc, #76]	; (8011628 <lcd_set_point+0x154>)
 80115dc:	719a      	strb	r2, [r3, #6]
            break;
 80115de:	e01c      	b.n	801161a <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] |= (1 << BIT_4);
 80115e0:	4b11      	ldr	r3, [pc, #68]	; (8011628 <lcd_set_point+0x154>)
 80115e2:	799b      	ldrb	r3, [r3, #6]
 80115e4:	f043 0310 	orr.w	r3, r3, #16
 80115e8:	b2da      	uxtb	r2, r3
 80115ea:	4b0f      	ldr	r3, [pc, #60]	; (8011628 <lcd_set_point+0x154>)
 80115ec:	719a      	strb	r2, [r3, #6]
            break;
 80115ee:	e014      	b.n	801161a <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] |= (1 << BIT_2);
 80115f0:	4b0d      	ldr	r3, [pc, #52]	; (8011628 <lcd_set_point+0x154>)
 80115f2:	799b      	ldrb	r3, [r3, #6]
 80115f4:	f043 0304 	orr.w	r3, r3, #4
 80115f8:	b2da      	uxtb	r2, r3
 80115fa:	4b0b      	ldr	r3, [pc, #44]	; (8011628 <lcd_set_point+0x154>)
 80115fc:	719a      	strb	r2, [r3, #6]
            break;
 80115fe:	e00c      	b.n	801161a <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] |= (1 << BIT_0);
 8011600:	4b09      	ldr	r3, [pc, #36]	; (8011628 <lcd_set_point+0x154>)
 8011602:	799b      	ldrb	r3, [r3, #6]
 8011604:	f043 0301 	orr.w	r3, r3, #1
 8011608:	b2da      	uxtb	r2, r3
 801160a:	4b07      	ldr	r3, [pc, #28]	; (8011628 <lcd_set_point+0x154>)
 801160c:	719a      	strb	r2, [r3, #6]
            break;
 801160e:	e004      	b.n	801161a <lcd_set_point+0x146>
            break;
 8011610:	bf00      	nop
 8011612:	e002      	b.n	801161a <lcd_set_point+0x146>
            default:
            break;
        }
    }
 8011614:	bf00      	nop
 8011616:	e000      	b.n	801161a <lcd_set_point+0x146>
            break;
 8011618:	bf00      	nop
}
 801161a:	bf00      	nop
 801161c:	370c      	adds	r7, #12
 801161e:	46bd      	mov	sp, r7
 8011620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011624:	4770      	bx	lr
 8011626:	bf00      	nop
 8011628:	20001da0 	.word	0x20001da0

0801162c <lcd_set_symbol>:
 * @brief Función que escribe un símbolo en específico en la pantalla.
 * @param Enumeraciones symbols_t y blink_t de lcd.h
 * @retval None
 */
void lcd_set_symbol(symbols_t symbol, blink_t blink_speed)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b082      	sub	sp, #8
 8011630:	af00      	add	r7, sp, #0
 8011632:	4603      	mov	r3, r0
 8011634:	460a      	mov	r2, r1
 8011636:	71fb      	strb	r3, [r7, #7]
 8011638:	4613      	mov	r3, r2
 801163a:	71bb      	strb	r3, [r7, #6]
    switch (symbol)
 801163c:	79fb      	ldrb	r3, [r7, #7]
 801163e:	2b16      	cmp	r3, #22
 8011640:	f200 8366 	bhi.w	8011d10 <lcd_set_symbol+0x6e4>
 8011644:	a201      	add	r2, pc, #4	; (adr r2, 801164c <lcd_set_symbol+0x20>)
 8011646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801164a:	bf00      	nop
 801164c:	080116b9 	.word	0x080116b9
 8011650:	080116a9 	.word	0x080116a9
 8011654:	080116d9 	.word	0x080116d9
 8011658:	080116e9 	.word	0x080116e9
 801165c:	080116c9 	.word	0x080116c9
 8011660:	08011719 	.word	0x08011719
 8011664:	08011709 	.word	0x08011709
 8011668:	08011729 	.word	0x08011729
 801166c:	080116f9 	.word	0x080116f9
 8011670:	08011739 	.word	0x08011739
 8011674:	080117c7 	.word	0x080117c7
 8011678:	080118f5 	.word	0x080118f5
 801167c:	0801193d 	.word	0x0801193d
 8011680:	080119cb 	.word	0x080119cb
 8011684:	08011a2f 	.word	0x08011a2f
 8011688:	08011a93 	.word	0x08011a93
 801168c:	08011af7 	.word	0x08011af7
 8011690:	08011b31 	.word	0x08011b31
 8011694:	08011b55 	.word	0x08011b55
 8011698:	08011b9d 	.word	0x08011b9d
 801169c:	08011be5 	.word	0x08011be5
 80116a0:	08011c1f 	.word	0x08011c1f
 80116a4:	08011c67 	.word	0x08011c67
    {
        case POWER:
            g_lcd_map[REG_2] |= (1 << BIT_5);
 80116a8:	4b91      	ldr	r3, [pc, #580]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80116aa:	789b      	ldrb	r3, [r3, #2]
 80116ac:	f043 0320 	orr.w	r3, r3, #32
 80116b0:	b2da      	uxtb	r2, r3
 80116b2:	4b8f      	ldr	r3, [pc, #572]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80116b4:	709a      	strb	r2, [r3, #2]
        break;
 80116b6:	e32c      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case BATTERY:
            g_lcd_map[REG_7] |= (1 << BIT_5);
 80116b8:	4b8d      	ldr	r3, [pc, #564]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80116ba:	79db      	ldrb	r3, [r3, #7]
 80116bc:	f043 0320 	orr.w	r3, r3, #32
 80116c0:	b2da      	uxtb	r2, r3
 80116c2:	4b8b      	ldr	r3, [pc, #556]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80116c4:	71da      	strb	r2, [r3, #7]
        break;
 80116c6:	e324      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case BATCH:
            g_lcd_map[REG_12] |= (1 << BIT_5);
 80116c8:	4b89      	ldr	r3, [pc, #548]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80116ca:	7b1b      	ldrb	r3, [r3, #12]
 80116cc:	f043 0320 	orr.w	r3, r3, #32
 80116d0:	b2da      	uxtb	r2, r3
 80116d2:	4b87      	ldr	r3, [pc, #540]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80116d4:	731a      	strb	r2, [r3, #12]
        break;
 80116d6:	e31c      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case RATE:
            g_lcd_map[REG_17] |= (1 << BIT_5);
 80116d8:	4b85      	ldr	r3, [pc, #532]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80116da:	7c5b      	ldrb	r3, [r3, #17]
 80116dc:	f043 0320 	orr.w	r3, r3, #32
 80116e0:	b2da      	uxtb	r2, r3
 80116e2:	4b83      	ldr	r3, [pc, #524]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80116e4:	745a      	strb	r2, [r3, #17]
        break;
 80116e6:	e314      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case E:
            g_lcd_map[REG_2] |= (1 << BIT_4);
 80116e8:	4b81      	ldr	r3, [pc, #516]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80116ea:	789b      	ldrb	r3, [r3, #2]
 80116ec:	f043 0310 	orr.w	r3, r3, #16
 80116f0:	b2da      	uxtb	r2, r3
 80116f2:	4b7f      	ldr	r3, [pc, #508]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80116f4:	709a      	strb	r2, [r3, #2]
        break;
 80116f6:	e30c      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case POINT:
            g_lcd_map[REG_7] |= (1 << BIT_4);
 80116f8:	4b7d      	ldr	r3, [pc, #500]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80116fa:	79db      	ldrb	r3, [r3, #7]
 80116fc:	f043 0310 	orr.w	r3, r3, #16
 8011700:	b2da      	uxtb	r2, r3
 8011702:	4b7b      	ldr	r3, [pc, #492]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011704:	71da      	strb	r2, [r3, #7]
        break;
 8011706:	e304      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case ACM:
            g_lcd_map[REG_12] |= (1 << BIT_4);
 8011708:	4b79      	ldr	r3, [pc, #484]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801170a:	7b1b      	ldrb	r3, [r3, #12]
 801170c:	f043 0310 	orr.w	r3, r3, #16
 8011710:	b2da      	uxtb	r2, r3
 8011712:	4b77      	ldr	r3, [pc, #476]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011714:	731a      	strb	r2, [r3, #12]
        break;
 8011716:	e2fc      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case TTL:
            g_lcd_map[REG_17] |= (1 << BIT_4);
 8011718:	4b75      	ldr	r3, [pc, #468]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801171a:	7c5b      	ldrb	r3, [r3, #17]
 801171c:	f043 0310 	orr.w	r3, r3, #16
 8011720:	b2da      	uxtb	r2, r3
 8011722:	4b73      	ldr	r3, [pc, #460]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011724:	745a      	strb	r2, [r3, #17]
        break;
 8011726:	e2f4      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case BACKSLASH:
            g_lcd_map[REG_10] |= (1 << BIT_1);
 8011728:	4b71      	ldr	r3, [pc, #452]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801172a:	7a9b      	ldrb	r3, [r3, #10]
 801172c:	f043 0302 	orr.w	r3, r3, #2
 8011730:	b2da      	uxtb	r2, r3
 8011732:	4b6f      	ldr	r3, [pc, #444]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011734:	729a      	strb	r2, [r3, #10]
        break;
 8011736:	e2ec      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case VE:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011738:	4b6d      	ldr	r3, [pc, #436]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801173a:	7bdb      	ldrb	r3, [r3, #15]
 801173c:	f043 0320 	orr.w	r3, r3, #32
 8011740:	b2da      	uxtb	r2, r3
 8011742:	4b6b      	ldr	r3, [pc, #428]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011744:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011746:	4b6a      	ldr	r3, [pc, #424]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011748:	7bdb      	ldrb	r3, [r3, #15]
 801174a:	f043 0310 	orr.w	r3, r3, #16
 801174e:	b2da      	uxtb	r2, r3
 8011750:	4b67      	ldr	r3, [pc, #412]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011752:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011754:	4b66      	ldr	r3, [pc, #408]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011756:	781b      	ldrb	r3, [r3, #0]
 8011758:	f043 0320 	orr.w	r3, r3, #32
 801175c:	b2da      	uxtb	r2, r3
 801175e:	4b64      	ldr	r3, [pc, #400]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011760:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_2);
 8011762:	4b63      	ldr	r3, [pc, #396]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	f043 0304 	orr.w	r3, r3, #4
 801176a:	b2da      	uxtb	r2, r3
 801176c:	4b60      	ldr	r3, [pc, #384]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801176e:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011770:	4b5f      	ldr	r3, [pc, #380]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011772:	7b9b      	ldrb	r3, [r3, #14]
 8011774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011778:	b2da      	uxtb	r2, r3
 801177a:	4b5d      	ldr	r3, [pc, #372]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801177c:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 801177e:	4b5c      	ldr	r3, [pc, #368]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011780:	7bdb      	ldrb	r3, [r3, #15]
 8011782:	f043 0302 	orr.w	r3, r3, #2
 8011786:	b2da      	uxtb	r2, r3
 8011788:	4b59      	ldr	r3, [pc, #356]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801178a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 801178c:	4b58      	ldr	r3, [pc, #352]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801178e:	7cdb      	ldrb	r3, [r3, #19]
 8011790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011794:	b2da      	uxtb	r2, r3
 8011796:	4b56      	ldr	r3, [pc, #344]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011798:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 801179a:	4b55      	ldr	r3, [pc, #340]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801179c:	781b      	ldrb	r3, [r3, #0]
 801179e:	f043 0301 	orr.w	r3, r3, #1
 80117a2:	b2da      	uxtb	r2, r3
 80117a4:	4b52      	ldr	r3, [pc, #328]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80117a6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80117a8:	4b51      	ldr	r3, [pc, #324]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80117aa:	781b      	ldrb	r3, [r3, #0]
 80117ac:	f043 0302 	orr.w	r3, r3, #2
 80117b0:	b2da      	uxtb	r2, r3
 80117b2:	4b4f      	ldr	r3, [pc, #316]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80117b4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 80117b6:	4b4e      	ldr	r3, [pc, #312]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80117b8:	795b      	ldrb	r3, [r3, #5]
 80117ba:	f043 0302 	orr.w	r3, r3, #2
 80117be:	b2da      	uxtb	r2, r3
 80117c0:	4b4b      	ldr	r3, [pc, #300]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80117c2:	715a      	strb	r2, [r3, #5]
        break;
 80117c4:	e2a5      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case PASS:
            g_lcd_map[REG_13] |= (1 << BIT_1);
 80117c6:	4b4a      	ldr	r3, [pc, #296]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80117c8:	7b5b      	ldrb	r3, [r3, #13]
 80117ca:	f043 0302 	orr.w	r3, r3, #2
 80117ce:	b2da      	uxtb	r2, r3
 80117d0:	4b47      	ldr	r3, [pc, #284]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80117d2:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_0);
 80117d4:	4b46      	ldr	r3, [pc, #280]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80117d6:	7b5b      	ldrb	r3, [r3, #13]
 80117d8:	f043 0301 	orr.w	r3, r3, #1
 80117dc:	b2da      	uxtb	r2, r3
 80117de:	4b44      	ldr	r3, [pc, #272]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80117e0:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_1);
 80117e2:	4b43      	ldr	r3, [pc, #268]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80117e4:	7c9b      	ldrb	r3, [r3, #18]
 80117e6:	f043 0302 	orr.w	r3, r3, #2
 80117ea:	b2da      	uxtb	r2, r3
 80117ec:	4b40      	ldr	r3, [pc, #256]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80117ee:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_0);
 80117f0:	4b3f      	ldr	r3, [pc, #252]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80117f2:	7c9b      	ldrb	r3, [r3, #18]
 80117f4:	f043 0301 	orr.w	r3, r3, #1
 80117f8:	b2da      	uxtb	r2, r3
 80117fa:	4b3d      	ldr	r3, [pc, #244]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80117fc:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_0);
 80117fe:	4b3c      	ldr	r3, [pc, #240]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011800:	78db      	ldrb	r3, [r3, #3]
 8011802:	f043 0301 	orr.w	r3, r3, #1
 8011806:	b2da      	uxtb	r2, r3
 8011808:	4b39      	ldr	r3, [pc, #228]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801180a:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_3);
 801180c:	4b38      	ldr	r3, [pc, #224]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801180e:	7b5b      	ldrb	r3, [r3, #13]
 8011810:	f043 0308 	orr.w	r3, r3, #8
 8011814:	b2da      	uxtb	r2, r3
 8011816:	4b36      	ldr	r3, [pc, #216]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011818:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_2);
 801181a:	4b35      	ldr	r3, [pc, #212]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801181c:	7b5b      	ldrb	r3, [r3, #13]
 801181e:	f043 0304 	orr.w	r3, r3, #4
 8011822:	b2da      	uxtb	r2, r3
 8011824:	4b32      	ldr	r3, [pc, #200]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011826:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_3);
 8011828:	4b31      	ldr	r3, [pc, #196]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801182a:	7c9b      	ldrb	r3, [r3, #18]
 801182c:	f043 0308 	orr.w	r3, r3, #8
 8011830:	b2da      	uxtb	r2, r3
 8011832:	4b2f      	ldr	r3, [pc, #188]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011834:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_2);
 8011836:	4b2e      	ldr	r3, [pc, #184]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011838:	7c9b      	ldrb	r3, [r3, #18]
 801183a:	f043 0304 	orr.w	r3, r3, #4
 801183e:	b2da      	uxtb	r2, r3
 8011840:	4b2b      	ldr	r3, [pc, #172]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011842:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_2);
 8011844:	4b2a      	ldr	r3, [pc, #168]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011846:	78db      	ldrb	r3, [r3, #3]
 8011848:	f043 0304 	orr.w	r3, r3, #4
 801184c:	b2da      	uxtb	r2, r3
 801184e:	4b28      	ldr	r3, [pc, #160]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011850:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_3] |= (1 << BIT_3);
 8011852:	4b27      	ldr	r3, [pc, #156]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011854:	78db      	ldrb	r3, [r3, #3]
 8011856:	f043 0308 	orr.w	r3, r3, #8
 801185a:	b2da      	uxtb	r2, r3
 801185c:	4b24      	ldr	r3, [pc, #144]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801185e:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_5);
 8011860:	4b23      	ldr	r3, [pc, #140]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011862:	7b5b      	ldrb	r3, [r3, #13]
 8011864:	f043 0320 	orr.w	r3, r3, #32
 8011868:	b2da      	uxtb	r2, r3
 801186a:	4b21      	ldr	r3, [pc, #132]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801186c:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_4);
 801186e:	4b20      	ldr	r3, [pc, #128]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011870:	7b5b      	ldrb	r3, [r3, #13]
 8011872:	f043 0310 	orr.w	r3, r3, #16
 8011876:	b2da      	uxtb	r2, r3
 8011878:	4b1d      	ldr	r3, [pc, #116]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801187a:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_4);
 801187c:	4b1c      	ldr	r3, [pc, #112]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801187e:	7c9b      	ldrb	r3, [r3, #18]
 8011880:	f043 0310 	orr.w	r3, r3, #16
 8011884:	b2da      	uxtb	r2, r3
 8011886:	4b1a      	ldr	r3, [pc, #104]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011888:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_5);
 801188a:	4b19      	ldr	r3, [pc, #100]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801188c:	78db      	ldrb	r3, [r3, #3]
 801188e:	f043 0320 	orr.w	r3, r3, #32
 8011892:	b2da      	uxtb	r2, r3
 8011894:	4b16      	ldr	r3, [pc, #88]	; (80118f0 <lcd_set_symbol+0x2c4>)
 8011896:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_4);
 8011898:	4b15      	ldr	r3, [pc, #84]	; (80118f0 <lcd_set_symbol+0x2c4>)
 801189a:	7a1b      	ldrb	r3, [r3, #8]
 801189c:	f043 0310 	orr.w	r3, r3, #16
 80118a0:	b2da      	uxtb	r2, r3
 80118a2:	4b13      	ldr	r3, [pc, #76]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80118a4:	721a      	strb	r2, [r3, #8]

            g_lcd_map[REG_13] |= (1 << BIT_7);
 80118a6:	4b12      	ldr	r3, [pc, #72]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80118a8:	7b5b      	ldrb	r3, [r3, #13]
 80118aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80118ae:	b2da      	uxtb	r2, r3
 80118b0:	4b0f      	ldr	r3, [pc, #60]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80118b2:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_6);
 80118b4:	4b0e      	ldr	r3, [pc, #56]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80118b6:	7b5b      	ldrb	r3, [r3, #13]
 80118b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118bc:	b2da      	uxtb	r2, r3
 80118be:	4b0c      	ldr	r3, [pc, #48]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80118c0:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_6);
 80118c2:	4b0b      	ldr	r3, [pc, #44]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80118c4:	7c9b      	ldrb	r3, [r3, #18]
 80118c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ca:	b2da      	uxtb	r2, r3
 80118cc:	4b08      	ldr	r3, [pc, #32]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80118ce:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_7);
 80118d0:	4b07      	ldr	r3, [pc, #28]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80118d2:	78db      	ldrb	r3, [r3, #3]
 80118d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80118d8:	b2da      	uxtb	r2, r3
 80118da:	4b05      	ldr	r3, [pc, #20]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80118dc:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_6);
 80118de:	4b04      	ldr	r3, [pc, #16]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80118e0:	7a1b      	ldrb	r3, [r3, #8]
 80118e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118e6:	b2da      	uxtb	r2, r3
 80118e8:	4b01      	ldr	r3, [pc, #4]	; (80118f0 <lcd_set_symbol+0x2c4>)
 80118ea:	721a      	strb	r2, [r3, #8]

        break;
 80118ec:	e211      	b.n	8011d12 <lcd_set_symbol+0x6e6>
 80118ee:	bf00      	nop
 80118f0:	20001da0 	.word	0x20001da0
        case K:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80118f4:	4b96      	ldr	r3, [pc, #600]	; (8011b50 <lcd_set_symbol+0x524>)
 80118f6:	7bdb      	ldrb	r3, [r3, #15]
 80118f8:	f043 0320 	orr.w	r3, r3, #32
 80118fc:	b2da      	uxtb	r2, r3
 80118fe:	4b94      	ldr	r3, [pc, #592]	; (8011b50 <lcd_set_symbol+0x524>)
 8011900:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011902:	4b93      	ldr	r3, [pc, #588]	; (8011b50 <lcd_set_symbol+0x524>)
 8011904:	7bdb      	ldrb	r3, [r3, #15]
 8011906:	f043 0310 	orr.w	r3, r3, #16
 801190a:	b2da      	uxtb	r2, r3
 801190c:	4b90      	ldr	r3, [pc, #576]	; (8011b50 <lcd_set_symbol+0x524>)
 801190e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011910:	4b8f      	ldr	r3, [pc, #572]	; (8011b50 <lcd_set_symbol+0x524>)
 8011912:	7bdb      	ldrb	r3, [r3, #15]
 8011914:	f043 0304 	orr.w	r3, r3, #4
 8011918:	b2da      	uxtb	r2, r3
 801191a:	4b8d      	ldr	r3, [pc, #564]	; (8011b50 <lcd_set_symbol+0x524>)
 801191c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 801191e:	4b8c      	ldr	r3, [pc, #560]	; (8011b50 <lcd_set_symbol+0x524>)
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	f043 0320 	orr.w	r3, r3, #32
 8011926:	b2da      	uxtb	r2, r3
 8011928:	4b89      	ldr	r3, [pc, #548]	; (8011b50 <lcd_set_symbol+0x524>)
 801192a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 801192c:	4b88      	ldr	r3, [pc, #544]	; (8011b50 <lcd_set_symbol+0x524>)
 801192e:	795b      	ldrb	r3, [r3, #5]
 8011930:	f043 0310 	orr.w	r3, r3, #16
 8011934:	b2da      	uxtb	r2, r3
 8011936:	4b86      	ldr	r3, [pc, #536]	; (8011b50 <lcd_set_symbol+0x524>)
 8011938:	715a      	strb	r2, [r3, #5]
        break;
 801193a:	e1ea      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case KO:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 801193c:	4b84      	ldr	r3, [pc, #528]	; (8011b50 <lcd_set_symbol+0x524>)
 801193e:	7bdb      	ldrb	r3, [r3, #15]
 8011940:	f043 0320 	orr.w	r3, r3, #32
 8011944:	b2da      	uxtb	r2, r3
 8011946:	4b82      	ldr	r3, [pc, #520]	; (8011b50 <lcd_set_symbol+0x524>)
 8011948:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 801194a:	4b81      	ldr	r3, [pc, #516]	; (8011b50 <lcd_set_symbol+0x524>)
 801194c:	7bdb      	ldrb	r3, [r3, #15]
 801194e:	f043 0310 	orr.w	r3, r3, #16
 8011952:	b2da      	uxtb	r2, r3
 8011954:	4b7e      	ldr	r3, [pc, #504]	; (8011b50 <lcd_set_symbol+0x524>)
 8011956:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011958:	4b7d      	ldr	r3, [pc, #500]	; (8011b50 <lcd_set_symbol+0x524>)
 801195a:	7bdb      	ldrb	r3, [r3, #15]
 801195c:	f043 0304 	orr.w	r3, r3, #4
 8011960:	b2da      	uxtb	r2, r3
 8011962:	4b7b      	ldr	r3, [pc, #492]	; (8011b50 <lcd_set_symbol+0x524>)
 8011964:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011966:	4b7a      	ldr	r3, [pc, #488]	; (8011b50 <lcd_set_symbol+0x524>)
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	f043 0320 	orr.w	r3, r3, #32
 801196e:	b2da      	uxtb	r2, r3
 8011970:	4b77      	ldr	r3, [pc, #476]	; (8011b50 <lcd_set_symbol+0x524>)
 8011972:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011974:	4b76      	ldr	r3, [pc, #472]	; (8011b50 <lcd_set_symbol+0x524>)
 8011976:	795b      	ldrb	r3, [r3, #5]
 8011978:	f043 0310 	orr.w	r3, r3, #16
 801197c:	b2da      	uxtb	r2, r3
 801197e:	4b74      	ldr	r3, [pc, #464]	; (8011b50 <lcd_set_symbol+0x524>)
 8011980:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011982:	4b73      	ldr	r3, [pc, #460]	; (8011b50 <lcd_set_symbol+0x524>)
 8011984:	7cdb      	ldrb	r3, [r3, #19]
 8011986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801198a:	b2da      	uxtb	r2, r3
 801198c:	4b70      	ldr	r3, [pc, #448]	; (8011b50 <lcd_set_symbol+0x524>)
 801198e:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011990:	4b6f      	ldr	r3, [pc, #444]	; (8011b50 <lcd_set_symbol+0x524>)
 8011992:	781b      	ldrb	r3, [r3, #0]
 8011994:	f043 0301 	orr.w	r3, r3, #1
 8011998:	b2da      	uxtb	r2, r3
 801199a:	4b6d      	ldr	r3, [pc, #436]	; (8011b50 <lcd_set_symbol+0x524>)
 801199c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 801199e:	4b6c      	ldr	r3, [pc, #432]	; (8011b50 <lcd_set_symbol+0x524>)
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	f043 0302 	orr.w	r3, r3, #2
 80119a6:	b2da      	uxtb	r2, r3
 80119a8:	4b69      	ldr	r3, [pc, #420]	; (8011b50 <lcd_set_symbol+0x524>)
 80119aa:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 80119ac:	4b68      	ldr	r3, [pc, #416]	; (8011b50 <lcd_set_symbol+0x524>)
 80119ae:	791b      	ldrb	r3, [r3, #4]
 80119b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80119b4:	b2da      	uxtb	r2, r3
 80119b6:	4b66      	ldr	r3, [pc, #408]	; (8011b50 <lcd_set_symbol+0x524>)
 80119b8:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 80119ba:	4b65      	ldr	r3, [pc, #404]	; (8011b50 <lcd_set_symbol+0x524>)
 80119bc:	795b      	ldrb	r3, [r3, #5]
 80119be:	f043 0302 	orr.w	r3, r3, #2
 80119c2:	b2da      	uxtb	r2, r3
 80119c4:	4b62      	ldr	r3, [pc, #392]	; (8011b50 <lcd_set_symbol+0x524>)
 80119c6:	715a      	strb	r2, [r3, #5]
        break;
 80119c8:	e1a3      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case PASS1:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 80119ca:	4b61      	ldr	r3, [pc, #388]	; (8011b50 <lcd_set_symbol+0x524>)
 80119cc:	7b1b      	ldrb	r3, [r3, #12]
 80119ce:	f043 0301 	orr.w	r3, r3, #1
 80119d2:	b2da      	uxtb	r2, r3
 80119d4:	4b5e      	ldr	r3, [pc, #376]	; (8011b50 <lcd_set_symbol+0x524>)
 80119d6:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 80119d8:	4b5d      	ldr	r3, [pc, #372]	; (8011b50 <lcd_set_symbol+0x524>)
 80119da:	7b1b      	ldrb	r3, [r3, #12]
 80119dc:	f043 0302 	orr.w	r3, r3, #2
 80119e0:	b2da      	uxtb	r2, r3
 80119e2:	4b5b      	ldr	r3, [pc, #364]	; (8011b50 <lcd_set_symbol+0x524>)
 80119e4:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 80119e6:	4b5a      	ldr	r3, [pc, #360]	; (8011b50 <lcd_set_symbol+0x524>)
 80119e8:	7c5b      	ldrb	r3, [r3, #17]
 80119ea:	f043 0301 	orr.w	r3, r3, #1
 80119ee:	b2da      	uxtb	r2, r3
 80119f0:	4b57      	ldr	r3, [pc, #348]	; (8011b50 <lcd_set_symbol+0x524>)
 80119f2:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 80119f4:	4b56      	ldr	r3, [pc, #344]	; (8011b50 <lcd_set_symbol+0x524>)
 80119f6:	7c5b      	ldrb	r3, [r3, #17]
 80119f8:	f043 0302 	orr.w	r3, r3, #2
 80119fc:	b2da      	uxtb	r2, r3
 80119fe:	4b54      	ldr	r3, [pc, #336]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a00:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 8011a02:	4b53      	ldr	r3, [pc, #332]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a04:	789b      	ldrb	r3, [r3, #2]
 8011a06:	f043 0302 	orr.w	r3, r3, #2
 8011a0a:	b2da      	uxtb	r2, r3
 8011a0c:	4b50      	ldr	r3, [pc, #320]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a0e:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 8011a10:	4b4f      	ldr	r3, [pc, #316]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a12:	789b      	ldrb	r3, [r3, #2]
 8011a14:	f043 0301 	orr.w	r3, r3, #1
 8011a18:	b2da      	uxtb	r2, r3
 8011a1a:	4b4d      	ldr	r3, [pc, #308]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a1c:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 8011a1e:	4b4c      	ldr	r3, [pc, #304]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a20:	79db      	ldrb	r3, [r3, #7]
 8011a22:	f043 0302 	orr.w	r3, r3, #2
 8011a26:	b2da      	uxtb	r2, r3
 8011a28:	4b49      	ldr	r3, [pc, #292]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a2a:	71da      	strb	r2, [r3, #7]
        break;
 8011a2c:	e171      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case PASS2:
            g_lcd_map[REG_11] |= (1 << BIT_6);
 8011a2e:	4b48      	ldr	r3, [pc, #288]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a30:	7adb      	ldrb	r3, [r3, #11]
 8011a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a36:	b2da      	uxtb	r2, r3
 8011a38:	4b45      	ldr	r3, [pc, #276]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a3a:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_7);
 8011a3c:	4b44      	ldr	r3, [pc, #272]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a3e:	7adb      	ldrb	r3, [r3, #11]
 8011a40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a44:	b2da      	uxtb	r2, r3
 8011a46:	4b42      	ldr	r3, [pc, #264]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a48:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_6);
 8011a4a:	4b41      	ldr	r3, [pc, #260]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a4c:	7c1b      	ldrb	r3, [r3, #16]
 8011a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a52:	b2da      	uxtb	r2, r3
 8011a54:	4b3e      	ldr	r3, [pc, #248]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a56:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_7);
 8011a58:	4b3d      	ldr	r3, [pc, #244]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a5a:	7c1b      	ldrb	r3, [r3, #16]
 8011a5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a60:	b2da      	uxtb	r2, r3
 8011a62:	4b3b      	ldr	r3, [pc, #236]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a64:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_7);
 8011a66:	4b3a      	ldr	r3, [pc, #232]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a68:	785b      	ldrb	r3, [r3, #1]
 8011a6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a6e:	b2da      	uxtb	r2, r3
 8011a70:	4b37      	ldr	r3, [pc, #220]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a72:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_6);
 8011a74:	4b36      	ldr	r3, [pc, #216]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a76:	785b      	ldrb	r3, [r3, #1]
 8011a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a7c:	b2da      	uxtb	r2, r3
 8011a7e:	4b34      	ldr	r3, [pc, #208]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a80:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_7);
 8011a82:	4b33      	ldr	r3, [pc, #204]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a84:	799b      	ldrb	r3, [r3, #6]
 8011a86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a8a:	b2da      	uxtb	r2, r3
 8011a8c:	4b30      	ldr	r3, [pc, #192]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a8e:	719a      	strb	r2, [r3, #6]
        break;
 8011a90:	e13f      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case PASS3:
            g_lcd_map[REG_11] |= (1 << BIT_4);
 8011a92:	4b2f      	ldr	r3, [pc, #188]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a94:	7adb      	ldrb	r3, [r3, #11]
 8011a96:	f043 0310 	orr.w	r3, r3, #16
 8011a9a:	b2da      	uxtb	r2, r3
 8011a9c:	4b2c      	ldr	r3, [pc, #176]	; (8011b50 <lcd_set_symbol+0x524>)
 8011a9e:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_5);
 8011aa0:	4b2b      	ldr	r3, [pc, #172]	; (8011b50 <lcd_set_symbol+0x524>)
 8011aa2:	7adb      	ldrb	r3, [r3, #11]
 8011aa4:	f043 0320 	orr.w	r3, r3, #32
 8011aa8:	b2da      	uxtb	r2, r3
 8011aaa:	4b29      	ldr	r3, [pc, #164]	; (8011b50 <lcd_set_symbol+0x524>)
 8011aac:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_4);
 8011aae:	4b28      	ldr	r3, [pc, #160]	; (8011b50 <lcd_set_symbol+0x524>)
 8011ab0:	7c1b      	ldrb	r3, [r3, #16]
 8011ab2:	f043 0310 	orr.w	r3, r3, #16
 8011ab6:	b2da      	uxtb	r2, r3
 8011ab8:	4b25      	ldr	r3, [pc, #148]	; (8011b50 <lcd_set_symbol+0x524>)
 8011aba:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_5);
 8011abc:	4b24      	ldr	r3, [pc, #144]	; (8011b50 <lcd_set_symbol+0x524>)
 8011abe:	7c1b      	ldrb	r3, [r3, #16]
 8011ac0:	f043 0320 	orr.w	r3, r3, #32
 8011ac4:	b2da      	uxtb	r2, r3
 8011ac6:	4b22      	ldr	r3, [pc, #136]	; (8011b50 <lcd_set_symbol+0x524>)
 8011ac8:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_5);
 8011aca:	4b21      	ldr	r3, [pc, #132]	; (8011b50 <lcd_set_symbol+0x524>)
 8011acc:	785b      	ldrb	r3, [r3, #1]
 8011ace:	f043 0320 	orr.w	r3, r3, #32
 8011ad2:	b2da      	uxtb	r2, r3
 8011ad4:	4b1e      	ldr	r3, [pc, #120]	; (8011b50 <lcd_set_symbol+0x524>)
 8011ad6:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_4);
 8011ad8:	4b1d      	ldr	r3, [pc, #116]	; (8011b50 <lcd_set_symbol+0x524>)
 8011ada:	785b      	ldrb	r3, [r3, #1]
 8011adc:	f043 0310 	orr.w	r3, r3, #16
 8011ae0:	b2da      	uxtb	r2, r3
 8011ae2:	4b1b      	ldr	r3, [pc, #108]	; (8011b50 <lcd_set_symbol+0x524>)
 8011ae4:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_5);
 8011ae6:	4b1a      	ldr	r3, [pc, #104]	; (8011b50 <lcd_set_symbol+0x524>)
 8011ae8:	799b      	ldrb	r3, [r3, #6]
 8011aea:	f043 0320 	orr.w	r3, r3, #32
 8011aee:	b2da      	uxtb	r2, r3
 8011af0:	4b17      	ldr	r3, [pc, #92]	; (8011b50 <lcd_set_symbol+0x524>)
 8011af2:	719a      	strb	r2, [r3, #6]
        break;
 8011af4:	e10d      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case F:
            g_lcd_map[REG_12] |= (1 << BIT_2);
 8011af6:	4b16      	ldr	r3, [pc, #88]	; (8011b50 <lcd_set_symbol+0x524>)
 8011af8:	7b1b      	ldrb	r3, [r3, #12]
 8011afa:	f043 0304 	orr.w	r3, r3, #4
 8011afe:	b2da      	uxtb	r2, r3
 8011b00:	4b13      	ldr	r3, [pc, #76]	; (8011b50 <lcd_set_symbol+0x524>)
 8011b02:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_3);
 8011b04:	4b12      	ldr	r3, [pc, #72]	; (8011b50 <lcd_set_symbol+0x524>)
 8011b06:	7b1b      	ldrb	r3, [r3, #12]
 8011b08:	f043 0308 	orr.w	r3, r3, #8
 8011b0c:	b2da      	uxtb	r2, r3
 8011b0e:	4b10      	ldr	r3, [pc, #64]	; (8011b50 <lcd_set_symbol+0x524>)
 8011b10:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_3);
 8011b12:	4b0f      	ldr	r3, [pc, #60]	; (8011b50 <lcd_set_symbol+0x524>)
 8011b14:	7c5b      	ldrb	r3, [r3, #17]
 8011b16:	f043 0308 	orr.w	r3, r3, #8
 8011b1a:	b2da      	uxtb	r2, r3
 8011b1c:	4b0c      	ldr	r3, [pc, #48]	; (8011b50 <lcd_set_symbol+0x524>)
 8011b1e:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2]  |= (1 << BIT_3);
 8011b20:	4b0b      	ldr	r3, [pc, #44]	; (8011b50 <lcd_set_symbol+0x524>)
 8011b22:	789b      	ldrb	r3, [r3, #2]
 8011b24:	f043 0308 	orr.w	r3, r3, #8
 8011b28:	b2da      	uxtb	r2, r3
 8011b2a:	4b09      	ldr	r3, [pc, #36]	; (8011b50 <lcd_set_symbol+0x524>)
 8011b2c:	709a      	strb	r2, [r3, #2]
        break;
 8011b2e:	e0f0      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case LIN_1:
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011b30:	4b07      	ldr	r3, [pc, #28]	; (8011b50 <lcd_set_symbol+0x524>)
 8011b32:	7c5b      	ldrb	r3, [r3, #17]
 8011b34:	f043 0301 	orr.w	r3, r3, #1
 8011b38:	b2da      	uxtb	r2, r3
 8011b3a:	4b05      	ldr	r3, [pc, #20]	; (8011b50 <lcd_set_symbol+0x524>)
 8011b3c:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2]  |= (1 << BIT_0);
 8011b3e:	4b04      	ldr	r3, [pc, #16]	; (8011b50 <lcd_set_symbol+0x524>)
 8011b40:	789b      	ldrb	r3, [r3, #2]
 8011b42:	f043 0301 	orr.w	r3, r3, #1
 8011b46:	b2da      	uxtb	r2, r3
 8011b48:	4b01      	ldr	r3, [pc, #4]	; (8011b50 <lcd_set_symbol+0x524>)
 8011b4a:	709a      	strb	r2, [r3, #2]
        break;
 8011b4c:	e0e1      	b.n	8011d12 <lcd_set_symbol+0x6e6>
 8011b4e:	bf00      	nop
 8011b50:	20001da0 	.word	0x20001da0
        case LIN_2:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011b54:	4b73      	ldr	r3, [pc, #460]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011b56:	7b1b      	ldrb	r3, [r3, #12]
 8011b58:	f043 0301 	orr.w	r3, r3, #1
 8011b5c:	b2da      	uxtb	r2, r3
 8011b5e:	4b71      	ldr	r3, [pc, #452]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011b60:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011b62:	4b70      	ldr	r3, [pc, #448]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011b64:	7c5b      	ldrb	r3, [r3, #17]
 8011b66:	f043 0301 	orr.w	r3, r3, #1
 8011b6a:	b2da      	uxtb	r2, r3
 8011b6c:	4b6d      	ldr	r3, [pc, #436]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011b6e:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011b70:	4b6c      	ldr	r3, [pc, #432]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011b72:	7c5b      	ldrb	r3, [r3, #17]
 8011b74:	f043 0302 	orr.w	r3, r3, #2
 8011b78:	b2da      	uxtb	r2, r3
 8011b7a:	4b6a      	ldr	r3, [pc, #424]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011b7c:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2]  |= (1 << BIT_1);
 8011b7e:	4b69      	ldr	r3, [pc, #420]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011b80:	789b      	ldrb	r3, [r3, #2]
 8011b82:	f043 0302 	orr.w	r3, r3, #2
 8011b86:	b2da      	uxtb	r2, r3
 8011b88:	4b66      	ldr	r3, [pc, #408]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011b8a:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7]  |= (1 << BIT_1);
 8011b8c:	4b65      	ldr	r3, [pc, #404]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011b8e:	79db      	ldrb	r3, [r3, #7]
 8011b90:	f043 0302 	orr.w	r3, r3, #2
 8011b94:	b2da      	uxtb	r2, r3
 8011b96:	4b63      	ldr	r3, [pc, #396]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011b98:	71da      	strb	r2, [r3, #7]
        break;
 8011b9a:	e0ba      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case LIN_3:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011b9c:	4b61      	ldr	r3, [pc, #388]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011b9e:	7b1b      	ldrb	r3, [r3, #12]
 8011ba0:	f043 0301 	orr.w	r3, r3, #1
 8011ba4:	b2da      	uxtb	r2, r3
 8011ba6:	4b5f      	ldr	r3, [pc, #380]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011ba8:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011baa:	4b5e      	ldr	r3, [pc, #376]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011bac:	7c5b      	ldrb	r3, [r3, #17]
 8011bae:	f043 0301 	orr.w	r3, r3, #1
 8011bb2:	b2da      	uxtb	r2, r3
 8011bb4:	4b5b      	ldr	r3, [pc, #364]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011bb6:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011bb8:	4b5a      	ldr	r3, [pc, #360]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011bba:	7c5b      	ldrb	r3, [r3, #17]
 8011bbc:	f043 0302 	orr.w	r3, r3, #2
 8011bc0:	b2da      	uxtb	r2, r3
 8011bc2:	4b58      	ldr	r3, [pc, #352]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011bc4:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2]  |= (1 << BIT_0);
 8011bc6:	4b57      	ldr	r3, [pc, #348]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011bc8:	789b      	ldrb	r3, [r3, #2]
 8011bca:	f043 0301 	orr.w	r3, r3, #1
 8011bce:	b2da      	uxtb	r2, r3
 8011bd0:	4b54      	ldr	r3, [pc, #336]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011bd2:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7]  |= (1 << BIT_1);
 8011bd4:	4b53      	ldr	r3, [pc, #332]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011bd6:	79db      	ldrb	r3, [r3, #7]
 8011bd8:	f043 0302 	orr.w	r3, r3, #2
 8011bdc:	b2da      	uxtb	r2, r3
 8011bde:	4b51      	ldr	r3, [pc, #324]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011be0:	71da      	strb	r2, [r3, #7]
        break;
 8011be2:	e096      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case LIN_4:
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011be4:	4b4f      	ldr	r3, [pc, #316]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011be6:	7b1b      	ldrb	r3, [r3, #12]
 8011be8:	f043 0302 	orr.w	r3, r3, #2
 8011bec:	b2da      	uxtb	r2, r3
 8011bee:	4b4d      	ldr	r3, [pc, #308]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011bf0:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 8011bf2:	4b4c      	ldr	r3, [pc, #304]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011bf4:	7c5b      	ldrb	r3, [r3, #17]
 8011bf6:	f043 0301 	orr.w	r3, r3, #1
 8011bfa:	b2da      	uxtb	r2, r3
 8011bfc:	4b49      	ldr	r3, [pc, #292]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011bfe:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011c00:	4b48      	ldr	r3, [pc, #288]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c02:	7c5b      	ldrb	r3, [r3, #17]
 8011c04:	f043 0302 	orr.w	r3, r3, #2
 8011c08:	b2da      	uxtb	r2, r3
 8011c0a:	4b46      	ldr	r3, [pc, #280]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c0c:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2]  |= (1 << BIT_0);
 8011c0e:	4b45      	ldr	r3, [pc, #276]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c10:	789b      	ldrb	r3, [r3, #2]
 8011c12:	f043 0301 	orr.w	r3, r3, #1
 8011c16:	b2da      	uxtb	r2, r3
 8011c18:	4b42      	ldr	r3, [pc, #264]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c1a:	709a      	strb	r2, [r3, #2]
        break;
 8011c1c:	e079      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case LIN_5:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011c1e:	4b41      	ldr	r3, [pc, #260]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c20:	7b1b      	ldrb	r3, [r3, #12]
 8011c22:	f043 0301 	orr.w	r3, r3, #1
 8011c26:	b2da      	uxtb	r2, r3
 8011c28:	4b3e      	ldr	r3, [pc, #248]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c2a:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011c2c:	4b3d      	ldr	r3, [pc, #244]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c2e:	7b1b      	ldrb	r3, [r3, #12]
 8011c30:	f043 0302 	orr.w	r3, r3, #2
 8011c34:	b2da      	uxtb	r2, r3
 8011c36:	4b3b      	ldr	r3, [pc, #236]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c38:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 8011c3a:	4b3a      	ldr	r3, [pc, #232]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c3c:	7c5b      	ldrb	r3, [r3, #17]
 8011c3e:	f043 0302 	orr.w	r3, r3, #2
 8011c42:	b2da      	uxtb	r2, r3
 8011c44:	4b37      	ldr	r3, [pc, #220]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c46:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2]  |= (1 << BIT_0);
 8011c48:	4b36      	ldr	r3, [pc, #216]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c4a:	789b      	ldrb	r3, [r3, #2]
 8011c4c:	f043 0301 	orr.w	r3, r3, #1
 8011c50:	b2da      	uxtb	r2, r3
 8011c52:	4b34      	ldr	r3, [pc, #208]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c54:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7]  |= (1 << BIT_1);
 8011c56:	4b33      	ldr	r3, [pc, #204]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c58:	79db      	ldrb	r3, [r3, #7]
 8011c5a:	f043 0302 	orr.w	r3, r3, #2
 8011c5e:	b2da      	uxtb	r2, r3
 8011c60:	4b30      	ldr	r3, [pc, #192]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c62:	71da      	strb	r2, [r3, #7]
        break;
 8011c64:	e055      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        case HZ:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011c66:	4b2f      	ldr	r3, [pc, #188]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c68:	7bdb      	ldrb	r3, [r3, #15]
 8011c6a:	f043 0320 	orr.w	r3, r3, #32
 8011c6e:	b2da      	uxtb	r2, r3
 8011c70:	4b2c      	ldr	r3, [pc, #176]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c72:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8011c74:	4b2b      	ldr	r3, [pc, #172]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c76:	7bdb      	ldrb	r3, [r3, #15]
 8011c78:	f043 0308 	orr.w	r3, r3, #8
 8011c7c:	b2da      	uxtb	r2, r3
 8011c7e:	4b29      	ldr	r3, [pc, #164]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c80:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011c82:	4b28      	ldr	r3, [pc, #160]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c84:	7bdb      	ldrb	r3, [r3, #15]
 8011c86:	f043 0304 	orr.w	r3, r3, #4
 8011c8a:	b2da      	uxtb	r2, r3
 8011c8c:	4b25      	ldr	r3, [pc, #148]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c8e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  |= (1 << BIT_4);
 8011c90:	4b24      	ldr	r3, [pc, #144]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c92:	781b      	ldrb	r3, [r3, #0]
 8011c94:	f043 0310 	orr.w	r3, r3, #16
 8011c98:	b2da      	uxtb	r2, r3
 8011c9a:	4b22      	ldr	r3, [pc, #136]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011c9c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0]  |= (1 << BIT_5);
 8011c9e:	4b21      	ldr	r3, [pc, #132]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011ca0:	781b      	ldrb	r3, [r3, #0]
 8011ca2:	f043 0320 	orr.w	r3, r3, #32
 8011ca6:	b2da      	uxtb	r2, r3
 8011ca8:	4b1e      	ldr	r3, [pc, #120]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011caa:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0]  |= (1 << BIT_3);
 8011cac:	4b1d      	ldr	r3, [pc, #116]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011cae:	781b      	ldrb	r3, [r3, #0]
 8011cb0:	f043 0308 	orr.w	r3, r3, #8
 8011cb4:	b2da      	uxtb	r2, r3
 8011cb6:	4b1b      	ldr	r3, [pc, #108]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011cb8:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011cba:	4b1a      	ldr	r3, [pc, #104]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011cbc:	7b9b      	ldrb	r3, [r3, #14]
 8011cbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011cc2:	b2da      	uxtb	r2, r3
 8011cc4:	4b17      	ldr	r3, [pc, #92]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011cc6:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_0);
 8011cc8:	4b16      	ldr	r3, [pc, #88]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011cca:	7bdb      	ldrb	r3, [r3, #15]
 8011ccc:	f043 0301 	orr.w	r3, r3, #1
 8011cd0:	b2da      	uxtb	r2, r3
 8011cd2:	4b14      	ldr	r3, [pc, #80]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011cd4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011cd6:	4b13      	ldr	r3, [pc, #76]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011cd8:	7cdb      	ldrb	r3, [r3, #19]
 8011cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cde:	b2da      	uxtb	r2, r3
 8011ce0:	4b10      	ldr	r3, [pc, #64]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011ce2:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 8011ce4:	4b0f      	ldr	r3, [pc, #60]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011ce6:	781b      	ldrb	r3, [r3, #0]
 8011ce8:	f043 0301 	orr.w	r3, r3, #1
 8011cec:	b2da      	uxtb	r2, r3
 8011cee:	4b0d      	ldr	r3, [pc, #52]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011cf0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4]  |= (1 << BIT_6);
 8011cf2:	4b0c      	ldr	r3, [pc, #48]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011cf4:	791b      	ldrb	r3, [r3, #4]
 8011cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cfa:	b2da      	uxtb	r2, r3
 8011cfc:	4b09      	ldr	r3, [pc, #36]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011cfe:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 8011d00:	4b08      	ldr	r3, [pc, #32]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011d02:	795b      	ldrb	r3, [r3, #5]
 8011d04:	f043 0302 	orr.w	r3, r3, #2
 8011d08:	b2da      	uxtb	r2, r3
 8011d0a:	4b06      	ldr	r3, [pc, #24]	; (8011d24 <lcd_set_symbol+0x6f8>)
 8011d0c:	715a      	strb	r2, [r3, #5]
        break;
 8011d0e:	e000      	b.n	8011d12 <lcd_set_symbol+0x6e6>
        default:
        break;
 8011d10:	bf00      	nop
    }

    pcf8553_blink(blink_speed);
 8011d12:	79bb      	ldrb	r3, [r7, #6]
 8011d14:	4618      	mov	r0, r3
 8011d16:	f000 fb87 	bl	8012428 <pcf8553_blink>
}
 8011d1a:	bf00      	nop
 8011d1c:	3708      	adds	r7, #8
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
 8011d22:	bf00      	nop
 8011d24:	20001da0 	.word	0x20001da0

08011d28 <lcd_set_time_unit>:
 * pantalla LCD custom.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	4603      	mov	r3, r0
 8011d30:	460a      	mov	r2, r1
 8011d32:	71fb      	strb	r3, [r7, #7]
 8011d34:	4613      	mov	r3, r2
 8011d36:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8011d38:	79fb      	ldrb	r3, [r7, #7]
 8011d3a:	2b03      	cmp	r3, #3
 8011d3c:	d82a      	bhi.n	8011d94 <lcd_set_time_unit+0x6c>
 8011d3e:	a201      	add	r2, pc, #4	; (adr r2, 8011d44 <lcd_set_time_unit+0x1c>)
 8011d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d44:	08011d55 	.word	0x08011d55
 8011d48:	08011d65 	.word	0x08011d65
 8011d4c:	08011d75 	.word	0x08011d75
 8011d50:	08011d85 	.word	0x08011d85
    {
        case H:
            g_lcd_map[REG_5] |= (1 << BIT_6);
 8011d54:	4b14      	ldr	r3, [pc, #80]	; (8011da8 <lcd_set_time_unit+0x80>)
 8011d56:	795b      	ldrb	r3, [r3, #5]
 8011d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d5c:	b2da      	uxtb	r2, r3
 8011d5e:	4b12      	ldr	r3, [pc, #72]	; (8011da8 <lcd_set_time_unit+0x80>)
 8011d60:	715a      	strb	r2, [r3, #5]
        break;
 8011d62:	e018      	b.n	8011d96 <lcd_set_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] |= (1 << BIT_5);
 8011d64:	4b10      	ldr	r3, [pc, #64]	; (8011da8 <lcd_set_time_unit+0x80>)
 8011d66:	7a5b      	ldrb	r3, [r3, #9]
 8011d68:	f043 0320 	orr.w	r3, r3, #32
 8011d6c:	b2da      	uxtb	r2, r3
 8011d6e:	4b0e      	ldr	r3, [pc, #56]	; (8011da8 <lcd_set_time_unit+0x80>)
 8011d70:	725a      	strb	r2, [r3, #9]
        break;
 8011d72:	e010      	b.n	8011d96 <lcd_set_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] |= (1 << BIT_5);
 8011d74:	4b0c      	ldr	r3, [pc, #48]	; (8011da8 <lcd_set_time_unit+0x80>)
 8011d76:	7a9b      	ldrb	r3, [r3, #10]
 8011d78:	f043 0320 	orr.w	r3, r3, #32
 8011d7c:	b2da      	uxtb	r2, r3
 8011d7e:	4b0a      	ldr	r3, [pc, #40]	; (8011da8 <lcd_set_time_unit+0x80>)
 8011d80:	729a      	strb	r2, [r3, #10]
        break;
 8011d82:	e008      	b.n	8011d96 <lcd_set_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] |= (1 << BIT_7);
 8011d84:	4b08      	ldr	r3, [pc, #32]	; (8011da8 <lcd_set_time_unit+0x80>)
 8011d86:	7a5b      	ldrb	r3, [r3, #9]
 8011d88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d8c:	b2da      	uxtb	r2, r3
 8011d8e:	4b06      	ldr	r3, [pc, #24]	; (8011da8 <lcd_set_time_unit+0x80>)
 8011d90:	725a      	strb	r2, [r3, #9]
        break;
 8011d92:	e000      	b.n	8011d96 <lcd_set_time_unit+0x6e>
        default:
        break;
 8011d94:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8011d96:	79bb      	ldrb	r3, [r7, #6]
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f000 fb45 	bl	8012428 <pcf8553_blink>
}
 8011d9e:	bf00      	nop
 8011da0:	3708      	adds	r7, #8
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	20001da0 	.word	0x20001da0

08011dac <lcd_set_vol_unit>:
 * @brief Función que imprime la unidad de volumen a utilizar.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b082      	sub	sp, #8
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	4603      	mov	r3, r0
 8011db4:	460a      	mov	r2, r1
 8011db6:	71fb      	strb	r3, [r7, #7]
 8011db8:	4613      	mov	r3, r2
 8011dba:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8011dbc:	79fb      	ldrb	r3, [r7, #7]
 8011dbe:	2b07      	cmp	r3, #7
 8011dc0:	f200 822c 	bhi.w	801221c <lcd_set_vol_unit+0x470>
 8011dc4:	a201      	add	r2, pc, #4	; (adr r2, 8011dcc <lcd_set_vol_unit+0x20>)
 8011dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dca:	bf00      	nop
 8011dcc:	08011ded 	.word	0x08011ded
 8011dd0:	08011edf 	.word	0x08011edf
 8011dd4:	08011f89 	.word	0x08011f89
 8011dd8:	08011e43 	.word	0x08011e43
 8011ddc:	080120e3 	.word	0x080120e3
 8011de0:	0801201d 	.word	0x0801201d
 8011de4:	08012163 	.word	0x08012163
 8011de8:	080121e3 	.word	0x080121e3
    {
        case LT:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011dec:	4b8a      	ldr	r3, [pc, #552]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011dee:	7bdb      	ldrb	r3, [r3, #15]
 8011df0:	f043 0320 	orr.w	r3, r3, #32
 8011df4:	b2da      	uxtb	r2, r3
 8011df6:	4b88      	ldr	r3, [pc, #544]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011df8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011dfa:	4b87      	ldr	r3, [pc, #540]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011dfc:	781b      	ldrb	r3, [r3, #0]
 8011dfe:	f043 0320 	orr.w	r3, r3, #32
 8011e02:	b2da      	uxtb	r2, r3
 8011e04:	4b84      	ldr	r3, [pc, #528]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e06:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8011e08:	4b83      	ldr	r3, [pc, #524]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e0a:	795b      	ldrb	r3, [r3, #5]
 8011e0c:	f043 0320 	orr.w	r3, r3, #32
 8011e10:	b2da      	uxtb	r2, r3
 8011e12:	4b81      	ldr	r3, [pc, #516]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e14:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011e16:	4b80      	ldr	r3, [pc, #512]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e18:	7b9b      	ldrb	r3, [r3, #14]
 8011e1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e1e:	b2da      	uxtb	r2, r3
 8011e20:	4b7d      	ldr	r3, [pc, #500]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e22:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] |= (1 << BIT_0);
 8011e24:	4b7c      	ldr	r3, [pc, #496]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e26:	7a9b      	ldrb	r3, [r3, #10]
 8011e28:	f043 0301 	orr.w	r3, r3, #1
 8011e2c:	b2da      	uxtb	r2, r3
 8011e2e:	4b7a      	ldr	r3, [pc, #488]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e30:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] |= (1 << BIT_6);
 8011e32:	4b79      	ldr	r3, [pc, #484]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e34:	7a5b      	ldrb	r3, [r3, #9]
 8011e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e3a:	b2da      	uxtb	r2, r3
 8011e3c:	4b76      	ldr	r3, [pc, #472]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e3e:	725a      	strb	r2, [r3, #9]
        break;
 8011e40:	e1ed      	b.n	801221e <lcd_set_vol_unit+0x472>
        case KG:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011e42:	4b75      	ldr	r3, [pc, #468]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e44:	7bdb      	ldrb	r3, [r3, #15]
 8011e46:	f043 0320 	orr.w	r3, r3, #32
 8011e4a:	b2da      	uxtb	r2, r3
 8011e4c:	4b72      	ldr	r3, [pc, #456]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e4e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011e50:	4b71      	ldr	r3, [pc, #452]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e52:	7bdb      	ldrb	r3, [r3, #15]
 8011e54:	f043 0310 	orr.w	r3, r3, #16
 8011e58:	b2da      	uxtb	r2, r3
 8011e5a:	4b6f      	ldr	r3, [pc, #444]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e5c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011e5e:	4b6e      	ldr	r3, [pc, #440]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e60:	7bdb      	ldrb	r3, [r3, #15]
 8011e62:	f043 0304 	orr.w	r3, r3, #4
 8011e66:	b2da      	uxtb	r2, r3
 8011e68:	4b6b      	ldr	r3, [pc, #428]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e6a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011e6c:	4b6a      	ldr	r3, [pc, #424]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e6e:	781b      	ldrb	r3, [r3, #0]
 8011e70:	f043 0320 	orr.w	r3, r3, #32
 8011e74:	b2da      	uxtb	r2, r3
 8011e76:	4b68      	ldr	r3, [pc, #416]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e78:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011e7a:	4b67      	ldr	r3, [pc, #412]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e7c:	795b      	ldrb	r3, [r3, #5]
 8011e7e:	f043 0310 	orr.w	r3, r3, #16
 8011e82:	b2da      	uxtb	r2, r3
 8011e84:	4b64      	ldr	r3, [pc, #400]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e86:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011e88:	4b63      	ldr	r3, [pc, #396]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e8a:	7b9b      	ldrb	r3, [r3, #14]
 8011e8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e90:	b2da      	uxtb	r2, r3
 8011e92:	4b61      	ldr	r3, [pc, #388]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e94:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011e96:	4b60      	ldr	r3, [pc, #384]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011e98:	7bdb      	ldrb	r3, [r3, #15]
 8011e9a:	f043 0302 	orr.w	r3, r3, #2
 8011e9e:	b2da      	uxtb	r2, r3
 8011ea0:	4b5d      	ldr	r3, [pc, #372]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011ea2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011ea4:	4b5c      	ldr	r3, [pc, #368]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	f043 0301 	orr.w	r3, r3, #1
 8011eac:	b2da      	uxtb	r2, r3
 8011eae:	4b5a      	ldr	r3, [pc, #360]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011eb0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011eb2:	4b59      	ldr	r3, [pc, #356]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	f043 0302 	orr.w	r3, r3, #2
 8011eba:	b2da      	uxtb	r2, r3
 8011ebc:	4b56      	ldr	r3, [pc, #344]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011ebe:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011ec0:	4b55      	ldr	r3, [pc, #340]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011ec2:	791b      	ldrb	r3, [r3, #4]
 8011ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ec8:	b2da      	uxtb	r2, r3
 8011eca:	4b53      	ldr	r3, [pc, #332]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011ecc:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011ece:	4b52      	ldr	r3, [pc, #328]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011ed0:	795b      	ldrb	r3, [r3, #5]
 8011ed2:	f043 0302 	orr.w	r3, r3, #2
 8011ed6:	b2da      	uxtb	r2, r3
 8011ed8:	4b4f      	ldr	r3, [pc, #316]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011eda:	715a      	strb	r2, [r3, #5]
        break;
 8011edc:	e19f      	b.n	801221e <lcd_set_vol_unit+0x472>
        case M3:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011ede:	4b4e      	ldr	r3, [pc, #312]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011ee0:	7bdb      	ldrb	r3, [r3, #15]
 8011ee2:	f043 0320 	orr.w	r3, r3, #32
 8011ee6:	b2da      	uxtb	r2, r3
 8011ee8:	4b4b      	ldr	r3, [pc, #300]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011eea:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 8011eec:	4b4a      	ldr	r3, [pc, #296]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011eee:	7a9b      	ldrb	r3, [r3, #10]
 8011ef0:	f043 0304 	orr.w	r3, r3, #4
 8011ef4:	b2da      	uxtb	r2, r3
 8011ef6:	4b48      	ldr	r3, [pc, #288]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011ef8:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011efa:	4b47      	ldr	r3, [pc, #284]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011efc:	7bdb      	ldrb	r3, [r3, #15]
 8011efe:	f043 0310 	orr.w	r3, r3, #16
 8011f02:	b2da      	uxtb	r2, r3
 8011f04:	4b44      	ldr	r3, [pc, #272]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f06:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8011f08:	4b43      	ldr	r3, [pc, #268]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f0a:	7bdb      	ldrb	r3, [r3, #15]
 8011f0c:	f043 0308 	orr.w	r3, r3, #8
 8011f10:	b2da      	uxtb	r2, r3
 8011f12:	4b41      	ldr	r3, [pc, #260]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f14:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011f16:	4b40      	ldr	r3, [pc, #256]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	f043 0320 	orr.w	r3, r3, #32
 8011f1e:	b2da      	uxtb	r2, r3
 8011f20:	4b3d      	ldr	r3, [pc, #244]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f22:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8011f24:	4b3c      	ldr	r3, [pc, #240]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	f043 0308 	orr.w	r3, r3, #8
 8011f2c:	b2da      	uxtb	r2, r3
 8011f2e:	4b3a      	ldr	r3, [pc, #232]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f30:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011f32:	4b39      	ldr	r3, [pc, #228]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f34:	7b9b      	ldrb	r3, [r3, #14]
 8011f36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011f3a:	b2da      	uxtb	r2, r3
 8011f3c:	4b36      	ldr	r3, [pc, #216]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f3e:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 8011f40:	4b35      	ldr	r3, [pc, #212]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f42:	7cdb      	ldrb	r3, [r3, #19]
 8011f44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011f48:	b2da      	uxtb	r2, r3
 8011f4a:	4b33      	ldr	r3, [pc, #204]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f4c:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011f4e:	4b32      	ldr	r3, [pc, #200]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f50:	7cdb      	ldrb	r3, [r3, #19]
 8011f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f56:	b2da      	uxtb	r2, r3
 8011f58:	4b2f      	ldr	r3, [pc, #188]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f5a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011f5c:	4b2e      	ldr	r3, [pc, #184]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f5e:	781b      	ldrb	r3, [r3, #0]
 8011f60:	f043 0301 	orr.w	r3, r3, #1
 8011f64:	b2da      	uxtb	r2, r3
 8011f66:	4b2c      	ldr	r3, [pc, #176]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f68:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011f6a:	4b2b      	ldr	r3, [pc, #172]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f6c:	791b      	ldrb	r3, [r3, #4]
 8011f6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011f72:	b2da      	uxtb	r2, r3
 8011f74:	4b28      	ldr	r3, [pc, #160]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f76:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011f78:	4b27      	ldr	r3, [pc, #156]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f7a:	795b      	ldrb	r3, [r3, #5]
 8011f7c:	f043 0302 	orr.w	r3, r3, #2
 8011f80:	b2da      	uxtb	r2, r3
 8011f82:	4b25      	ldr	r3, [pc, #148]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f84:	715a      	strb	r2, [r3, #5]
        break;
 8011f86:	e14a      	b.n	801221e <lcd_set_vol_unit+0x472>
        case MC:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011f88:	4b23      	ldr	r3, [pc, #140]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f8a:	7bdb      	ldrb	r3, [r3, #15]
 8011f8c:	f043 0320 	orr.w	r3, r3, #32
 8011f90:	b2da      	uxtb	r2, r3
 8011f92:	4b21      	ldr	r3, [pc, #132]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f94:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 8011f96:	4b20      	ldr	r3, [pc, #128]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011f98:	7a9b      	ldrb	r3, [r3, #10]
 8011f9a:	f043 0304 	orr.w	r3, r3, #4
 8011f9e:	b2da      	uxtb	r2, r3
 8011fa0:	4b1d      	ldr	r3, [pc, #116]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011fa2:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011fa4:	4b1c      	ldr	r3, [pc, #112]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011fa6:	7bdb      	ldrb	r3, [r3, #15]
 8011fa8:	f043 0310 	orr.w	r3, r3, #16
 8011fac:	b2da      	uxtb	r2, r3
 8011fae:	4b1a      	ldr	r3, [pc, #104]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011fb0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8011fb2:	4b19      	ldr	r3, [pc, #100]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011fb4:	7bdb      	ldrb	r3, [r3, #15]
 8011fb6:	f043 0308 	orr.w	r3, r3, #8
 8011fba:	b2da      	uxtb	r2, r3
 8011fbc:	4b16      	ldr	r3, [pc, #88]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011fbe:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011fc0:	4b15      	ldr	r3, [pc, #84]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011fc2:	781b      	ldrb	r3, [r3, #0]
 8011fc4:	f043 0320 	orr.w	r3, r3, #32
 8011fc8:	b2da      	uxtb	r2, r3
 8011fca:	4b13      	ldr	r3, [pc, #76]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011fcc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8011fce:	4b12      	ldr	r3, [pc, #72]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	f043 0308 	orr.w	r3, r3, #8
 8011fd6:	b2da      	uxtb	r2, r3
 8011fd8:	4b0f      	ldr	r3, [pc, #60]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011fda:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011fdc:	4b0e      	ldr	r3, [pc, #56]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011fde:	7b9b      	ldrb	r3, [r3, #14]
 8011fe0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011fe4:	b2da      	uxtb	r2, r3
 8011fe6:	4b0c      	ldr	r3, [pc, #48]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011fe8:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011fea:	4b0b      	ldr	r3, [pc, #44]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011fec:	7bdb      	ldrb	r3, [r3, #15]
 8011fee:	f043 0302 	orr.w	r3, r3, #2
 8011ff2:	b2da      	uxtb	r2, r3
 8011ff4:	4b08      	ldr	r3, [pc, #32]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011ff6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  |= (1 << BIT_1);
 8011ff8:	4b07      	ldr	r3, [pc, #28]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	f043 0302 	orr.w	r3, r3, #2
 8012000:	b2da      	uxtb	r2, r3
 8012002:	4b05      	ldr	r3, [pc, #20]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8012004:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 8012006:	4b04      	ldr	r3, [pc, #16]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8012008:	795b      	ldrb	r3, [r3, #5]
 801200a:	f043 0302 	orr.w	r3, r3, #2
 801200e:	b2da      	uxtb	r2, r3
 8012010:	4b01      	ldr	r3, [pc, #4]	; (8012018 <lcd_set_vol_unit+0x26c>)
 8012012:	715a      	strb	r2, [r3, #5]
        break;
 8012014:	e103      	b.n	801221e <lcd_set_vol_unit+0x472>
 8012016:	bf00      	nop
 8012018:	20001da0 	.word	0x20001da0
        case BR:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 801201c:	4b84      	ldr	r3, [pc, #528]	; (8012230 <lcd_set_vol_unit+0x484>)
 801201e:	7a9b      	ldrb	r3, [r3, #10]
 8012020:	f043 0308 	orr.w	r3, r3, #8
 8012024:	b2da      	uxtb	r2, r3
 8012026:	4b82      	ldr	r3, [pc, #520]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012028:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] |= (1 << BIT_4);
 801202a:	4b81      	ldr	r3, [pc, #516]	; (8012230 <lcd_set_vol_unit+0x484>)
 801202c:	7a9b      	ldrb	r3, [r3, #10]
 801202e:	f043 0310 	orr.w	r3, r3, #16
 8012032:	b2da      	uxtb	r2, r3
 8012034:	4b7e      	ldr	r3, [pc, #504]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012036:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8012038:	4b7d      	ldr	r3, [pc, #500]	; (8012230 <lcd_set_vol_unit+0x484>)
 801203a:	7bdb      	ldrb	r3, [r3, #15]
 801203c:	f043 0308 	orr.w	r3, r3, #8
 8012040:	b2da      	uxtb	r2, r3
 8012042:	4b7b      	ldr	r3, [pc, #492]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012044:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8012046:	4b7a      	ldr	r3, [pc, #488]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	f043 0310 	orr.w	r3, r3, #16
 801204e:	b2da      	uxtb	r2, r3
 8012050:	4b77      	ldr	r3, [pc, #476]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012052:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_2);
 8012054:	4b76      	ldr	r3, [pc, #472]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012056:	795b      	ldrb	r3, [r3, #5]
 8012058:	f043 0304 	orr.w	r3, r3, #4
 801205c:	b2da      	uxtb	r2, r3
 801205e:	4b74      	ldr	r3, [pc, #464]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012060:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8012062:	4b73      	ldr	r3, [pc, #460]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	f043 0308 	orr.w	r3, r3, #8
 801206a:	b2da      	uxtb	r2, r3
 801206c:	4b70      	ldr	r3, [pc, #448]	; (8012230 <lcd_set_vol_unit+0x484>)
 801206e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8012070:	4b6f      	ldr	r3, [pc, #444]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012072:	795b      	ldrb	r3, [r3, #5]
 8012074:	f043 0320 	orr.w	r3, r3, #32
 8012078:	b2da      	uxtb	r2, r3
 801207a:	4b6d      	ldr	r3, [pc, #436]	; (8012230 <lcd_set_vol_unit+0x484>)
 801207c:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 801207e:	4b6c      	ldr	r3, [pc, #432]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012080:	7b9b      	ldrb	r3, [r3, #14]
 8012082:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012086:	b2da      	uxtb	r2, r3
 8012088:	4b69      	ldr	r3, [pc, #420]	; (8012230 <lcd_set_vol_unit+0x484>)
 801208a:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 801208c:	4b68      	ldr	r3, [pc, #416]	; (8012230 <lcd_set_vol_unit+0x484>)
 801208e:	7bdb      	ldrb	r3, [r3, #15]
 8012090:	f043 0302 	orr.w	r3, r3, #2
 8012094:	b2da      	uxtb	r2, r3
 8012096:	4b66      	ldr	r3, [pc, #408]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012098:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 801209a:	4b65      	ldr	r3, [pc, #404]	; (8012230 <lcd_set_vol_unit+0x484>)
 801209c:	7cdb      	ldrb	r3, [r3, #19]
 801209e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80120a2:	b2da      	uxtb	r2, r3
 80120a4:	4b62      	ldr	r3, [pc, #392]	; (8012230 <lcd_set_vol_unit+0x484>)
 80120a6:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 80120a8:	4b61      	ldr	r3, [pc, #388]	; (8012230 <lcd_set_vol_unit+0x484>)
 80120aa:	7cdb      	ldrb	r3, [r3, #19]
 80120ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120b0:	b2da      	uxtb	r2, r3
 80120b2:	4b5f      	ldr	r3, [pc, #380]	; (8012230 <lcd_set_vol_unit+0x484>)
 80120b4:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 80120b6:	4b5e      	ldr	r3, [pc, #376]	; (8012230 <lcd_set_vol_unit+0x484>)
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	f043 0301 	orr.w	r3, r3, #1
 80120be:	b2da      	uxtb	r2, r3
 80120c0:	4b5b      	ldr	r3, [pc, #364]	; (8012230 <lcd_set_vol_unit+0x484>)
 80120c2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80120c4:	4b5a      	ldr	r3, [pc, #360]	; (8012230 <lcd_set_vol_unit+0x484>)
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	f043 0302 	orr.w	r3, r3, #2
 80120cc:	b2da      	uxtb	r2, r3
 80120ce:	4b58      	ldr	r3, [pc, #352]	; (8012230 <lcd_set_vol_unit+0x484>)
 80120d0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_0);
 80120d2:	4b57      	ldr	r3, [pc, #348]	; (8012230 <lcd_set_vol_unit+0x484>)
 80120d4:	795b      	ldrb	r3, [r3, #5]
 80120d6:	f043 0301 	orr.w	r3, r3, #1
 80120da:	b2da      	uxtb	r2, r3
 80120dc:	4b54      	ldr	r3, [pc, #336]	; (8012230 <lcd_set_vol_unit+0x484>)
 80120de:	715a      	strb	r2, [r3, #5]
        break;
 80120e0:	e09d      	b.n	801221e <lcd_set_vol_unit+0x472>
        case GL:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 80120e2:	4b53      	ldr	r3, [pc, #332]	; (8012230 <lcd_set_vol_unit+0x484>)
 80120e4:	7a9b      	ldrb	r3, [r3, #10]
 80120e6:	f043 0308 	orr.w	r3, r3, #8
 80120ea:	b2da      	uxtb	r2, r3
 80120ec:	4b50      	ldr	r3, [pc, #320]	; (8012230 <lcd_set_vol_unit+0x484>)
 80120ee:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80120f0:	4b4f      	ldr	r3, [pc, #316]	; (8012230 <lcd_set_vol_unit+0x484>)
 80120f2:	7bdb      	ldrb	r3, [r3, #15]
 80120f4:	f043 0320 	orr.w	r3, r3, #32
 80120f8:	b2da      	uxtb	r2, r3
 80120fa:	4b4d      	ldr	r3, [pc, #308]	; (8012230 <lcd_set_vol_unit+0x484>)
 80120fc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 80120fe:	4b4c      	ldr	r3, [pc, #304]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	f043 0310 	orr.w	r3, r3, #16
 8012106:	b2da      	uxtb	r2, r3
 8012108:	4b49      	ldr	r3, [pc, #292]	; (8012230 <lcd_set_vol_unit+0x484>)
 801210a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 801210c:	4b48      	ldr	r3, [pc, #288]	; (8012230 <lcd_set_vol_unit+0x484>)
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	f043 0320 	orr.w	r3, r3, #32
 8012114:	b2da      	uxtb	r2, r3
 8012116:	4b46      	ldr	r3, [pc, #280]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012118:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 801211a:	4b45      	ldr	r3, [pc, #276]	; (8012230 <lcd_set_vol_unit+0x484>)
 801211c:	781b      	ldrb	r3, [r3, #0]
 801211e:	f043 0308 	orr.w	r3, r3, #8
 8012122:	b2da      	uxtb	r2, r3
 8012124:	4b42      	ldr	r3, [pc, #264]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012126:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8012128:	4b41      	ldr	r3, [pc, #260]	; (8012230 <lcd_set_vol_unit+0x484>)
 801212a:	795b      	ldrb	r3, [r3, #5]
 801212c:	f043 0320 	orr.w	r3, r3, #32
 8012130:	b2da      	uxtb	r2, r3
 8012132:	4b3f      	ldr	r3, [pc, #252]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012134:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] |= (1 << BIT_1);
 8012136:	4b3e      	ldr	r3, [pc, #248]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012138:	7bdb      	ldrb	r3, [r3, #15]
 801213a:	f043 0302 	orr.w	r3, r3, #2
 801213e:	b2da      	uxtb	r2, r3
 8012140:	4b3b      	ldr	r3, [pc, #236]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012142:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8012144:	4b3a      	ldr	r3, [pc, #232]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012146:	781b      	ldrb	r3, [r3, #0]
 8012148:	f043 0302 	orr.w	r3, r3, #2
 801214c:	b2da      	uxtb	r2, r3
 801214e:	4b38      	ldr	r3, [pc, #224]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012150:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8012152:	4b37      	ldr	r3, [pc, #220]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012154:	795b      	ldrb	r3, [r3, #5]
 8012156:	f043 0302 	orr.w	r3, r3, #2
 801215a:	b2da      	uxtb	r2, r3
 801215c:	4b34      	ldr	r3, [pc, #208]	; (8012230 <lcd_set_vol_unit+0x484>)
 801215e:	715a      	strb	r2, [r3, #5]
        break;
 8012160:	e05d      	b.n	801221e <lcd_set_vol_unit+0x472>
        case CELSIUS:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 8012162:	4b33      	ldr	r3, [pc, #204]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012164:	7a9b      	ldrb	r3, [r3, #10]
 8012166:	f043 0308 	orr.w	r3, r3, #8
 801216a:	b2da      	uxtb	r2, r3
 801216c:	4b30      	ldr	r3, [pc, #192]	; (8012230 <lcd_set_vol_unit+0x484>)
 801216e:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8012170:	4b2f      	ldr	r3, [pc, #188]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012172:	7bdb      	ldrb	r3, [r3, #15]
 8012174:	f043 0320 	orr.w	r3, r3, #32
 8012178:	b2da      	uxtb	r2, r3
 801217a:	4b2d      	ldr	r3, [pc, #180]	; (8012230 <lcd_set_vol_unit+0x484>)
 801217c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 801217e:	4b2c      	ldr	r3, [pc, #176]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012180:	7bdb      	ldrb	r3, [r3, #15]
 8012182:	f043 0308 	orr.w	r3, r3, #8
 8012186:	b2da      	uxtb	r2, r3
 8012188:	4b29      	ldr	r3, [pc, #164]	; (8012230 <lcd_set_vol_unit+0x484>)
 801218a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 801218c:	4b28      	ldr	r3, [pc, #160]	; (8012230 <lcd_set_vol_unit+0x484>)
 801218e:	7bdb      	ldrb	r3, [r3, #15]
 8012190:	f043 0304 	orr.w	r3, r3, #4
 8012194:	b2da      	uxtb	r2, r3
 8012196:	4b26      	ldr	r3, [pc, #152]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012198:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 801219a:	4b25      	ldr	r3, [pc, #148]	; (8012230 <lcd_set_vol_unit+0x484>)
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	f043 0310 	orr.w	r3, r3, #16
 80121a2:	b2da      	uxtb	r2, r3
 80121a4:	4b22      	ldr	r3, [pc, #136]	; (8012230 <lcd_set_vol_unit+0x484>)
 80121a6:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 80121a8:	4b21      	ldr	r3, [pc, #132]	; (8012230 <lcd_set_vol_unit+0x484>)
 80121aa:	7b9b      	ldrb	r3, [r3, #14]
 80121ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80121b0:	b2da      	uxtb	r2, r3
 80121b2:	4b1f      	ldr	r3, [pc, #124]	; (8012230 <lcd_set_vol_unit+0x484>)
 80121b4:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 80121b6:	4b1e      	ldr	r3, [pc, #120]	; (8012230 <lcd_set_vol_unit+0x484>)
 80121b8:	7bdb      	ldrb	r3, [r3, #15]
 80121ba:	f043 0302 	orr.w	r3, r3, #2
 80121be:	b2da      	uxtb	r2, r3
 80121c0:	4b1b      	ldr	r3, [pc, #108]	; (8012230 <lcd_set_vol_unit+0x484>)
 80121c2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80121c4:	4b1a      	ldr	r3, [pc, #104]	; (8012230 <lcd_set_vol_unit+0x484>)
 80121c6:	781b      	ldrb	r3, [r3, #0]
 80121c8:	f043 0302 	orr.w	r3, r3, #2
 80121cc:	b2da      	uxtb	r2, r3
 80121ce:	4b18      	ldr	r3, [pc, #96]	; (8012230 <lcd_set_vol_unit+0x484>)
 80121d0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 80121d2:	4b17      	ldr	r3, [pc, #92]	; (8012230 <lcd_set_vol_unit+0x484>)
 80121d4:	795b      	ldrb	r3, [r3, #5]
 80121d6:	f043 0302 	orr.w	r3, r3, #2
 80121da:	b2da      	uxtb	r2, r3
 80121dc:	4b14      	ldr	r3, [pc, #80]	; (8012230 <lcd_set_vol_unit+0x484>)
 80121de:	715a      	strb	r2, [r3, #5]
        break;
 80121e0:	e01d      	b.n	801221e <lcd_set_vol_unit+0x472>
        case NOTHING:
            g_lcd_map[REG_15] |= (1 << BIT_2);
 80121e2:	4b13      	ldr	r3, [pc, #76]	; (8012230 <lcd_set_vol_unit+0x484>)
 80121e4:	7bdb      	ldrb	r3, [r3, #15]
 80121e6:	f043 0304 	orr.w	r3, r3, #4
 80121ea:	b2da      	uxtb	r2, r3
 80121ec:	4b10      	ldr	r3, [pc, #64]	; (8012230 <lcd_set_vol_unit+0x484>)
 80121ee:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 80121f0:	4b0f      	ldr	r3, [pc, #60]	; (8012230 <lcd_set_vol_unit+0x484>)
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	f043 0310 	orr.w	r3, r3, #16
 80121f8:	b2da      	uxtb	r2, r3
 80121fa:	4b0d      	ldr	r3, [pc, #52]	; (8012230 <lcd_set_vol_unit+0x484>)
 80121fc:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 80121fe:	4b0c      	ldr	r3, [pc, #48]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012200:	7cdb      	ldrb	r3, [r3, #19]
 8012202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012206:	b2da      	uxtb	r2, r3
 8012208:	4b09      	ldr	r3, [pc, #36]	; (8012230 <lcd_set_vol_unit+0x484>)
 801220a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 801220c:	4b08      	ldr	r3, [pc, #32]	; (8012230 <lcd_set_vol_unit+0x484>)
 801220e:	781b      	ldrb	r3, [r3, #0]
 8012210:	f043 0301 	orr.w	r3, r3, #1
 8012214:	b2da      	uxtb	r2, r3
 8012216:	4b06      	ldr	r3, [pc, #24]	; (8012230 <lcd_set_vol_unit+0x484>)
 8012218:	701a      	strb	r2, [r3, #0]
        break;
 801221a:	e000      	b.n	801221e <lcd_set_vol_unit+0x472>
        default:
        break;
 801221c:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 801221e:	79bb      	ldrb	r3, [r7, #6]
 8012220:	4618      	mov	r0, r3
 8012222:	f000 f901 	bl	8012428 <pcf8553_blink>
}
 8012226:	bf00      	nop
 8012228:	3708      	adds	r7, #8
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}
 801222e:	bf00      	nop
 8012230:	20001da0 	.word	0x20001da0

08012234 <lcd_write_line>:
 * la primera posicion de cada linea.
 * @param
 * @retval None
 */
void lcd_write_line(uint8_t seg, uint8_t data)
{
 8012234:	b480      	push	{r7}
 8012236:	b085      	sub	sp, #20
 8012238:	af00      	add	r7, sp, #0
 801223a:	4603      	mov	r3, r0
 801223c:	460a      	mov	r2, r1
 801223e:	71fb      	strb	r3, [r7, #7]
 8012240:	4613      	mov	r3, r2
 8012242:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = 0;
 8012244:	2300      	movs	r3, #0
 8012246:	73fb      	strb	r3, [r7, #15]
    uint8_t pos = 0;
 8012248:	2300      	movs	r3, #0
 801224a:	73bb      	strb	r3, [r7, #14]

    /*
     *
     *
     */
    switch (g_row)
 801224c:	4b33      	ldr	r3, [pc, #204]	; (801231c <lcd_write_line+0xe8>)
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	2b01      	cmp	r3, #1
 8012252:	d002      	beq.n	801225a <lcd_write_line+0x26>
 8012254:	2b02      	cmp	r3, #2
 8012256:	d01b      	beq.n	8012290 <lcd_write_line+0x5c>
            pos += g_col * 2;
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
            pos = pos % 8; // @suppress("Avoid magic numbers")
        break;
        default:
        break;
 8012258:	e035      	b.n	80122c6 <lcd_write_line+0x92>
            pos = octal_1[seg].pos;
 801225a:	79fb      	ldrb	r3, [r7, #7]
 801225c:	4a30      	ldr	r2, [pc, #192]	; (8012320 <lcd_write_line+0xec>)
 801225e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8012262:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 8012264:	4b2f      	ldr	r3, [pc, #188]	; (8012324 <lcd_write_line+0xf0>)
 8012266:	781b      	ldrb	r3, [r3, #0]
 8012268:	005b      	lsls	r3, r3, #1
 801226a:	b2da      	uxtb	r2, r3
 801226c:	7bbb      	ldrb	r3, [r7, #14]
 801226e:	4413      	add	r3, r2
 8012270:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_1[seg].reg; // @suppress("Avoid magic numbers")
 8012272:	7bbb      	ldrb	r3, [r7, #14]
 8012274:	08db      	lsrs	r3, r3, #3
 8012276:	b2da      	uxtb	r2, r3
 8012278:	79fb      	ldrb	r3, [r7, #7]
 801227a:	4929      	ldr	r1, [pc, #164]	; (8012320 <lcd_write_line+0xec>)
 801227c:	005b      	lsls	r3, r3, #1
 801227e:	440b      	add	r3, r1
 8012280:	785b      	ldrb	r3, [r3, #1]
 8012282:	4413      	add	r3, r2
 8012284:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 8012286:	7bbb      	ldrb	r3, [r7, #14]
 8012288:	f003 0307 	and.w	r3, r3, #7
 801228c:	73bb      	strb	r3, [r7, #14]
        break;
 801228e:	e01a      	b.n	80122c6 <lcd_write_line+0x92>
            pos = octal_2[seg].pos;
 8012290:	79fb      	ldrb	r3, [r7, #7]
 8012292:	4a25      	ldr	r2, [pc, #148]	; (8012328 <lcd_write_line+0xf4>)
 8012294:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8012298:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 801229a:	4b22      	ldr	r3, [pc, #136]	; (8012324 <lcd_write_line+0xf0>)
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	005b      	lsls	r3, r3, #1
 80122a0:	b2da      	uxtb	r2, r3
 80122a2:	7bbb      	ldrb	r3, [r7, #14]
 80122a4:	4413      	add	r3, r2
 80122a6:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
 80122a8:	7bbb      	ldrb	r3, [r7, #14]
 80122aa:	08db      	lsrs	r3, r3, #3
 80122ac:	b2da      	uxtb	r2, r3
 80122ae:	79fb      	ldrb	r3, [r7, #7]
 80122b0:	491d      	ldr	r1, [pc, #116]	; (8012328 <lcd_write_line+0xf4>)
 80122b2:	005b      	lsls	r3, r3, #1
 80122b4:	440b      	add	r3, r1
 80122b6:	785b      	ldrb	r3, [r3, #1]
 80122b8:	4413      	add	r3, r2
 80122ba:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 80122bc:	7bbb      	ldrb	r3, [r7, #14]
 80122be:	f003 0307 	and.w	r3, r3, #7
 80122c2:	73bb      	strb	r3, [r7, #14]
        break;
 80122c4:	bf00      	nop
    }

    if (data)
 80122c6:	79bb      	ldrb	r3, [r7, #6]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d00f      	beq.n	80122ec <lcd_write_line+0xb8>
    {
        g_lcd_map[reg] |= 1 << pos;
 80122cc:	7bfb      	ldrb	r3, [r7, #15]
 80122ce:	4a17      	ldr	r2, [pc, #92]	; (801232c <lcd_write_line+0xf8>)
 80122d0:	5cd3      	ldrb	r3, [r2, r3]
 80122d2:	b25a      	sxtb	r2, r3
 80122d4:	7bbb      	ldrb	r3, [r7, #14]
 80122d6:	2101      	movs	r1, #1
 80122d8:	fa01 f303 	lsl.w	r3, r1, r3
 80122dc:	b25b      	sxtb	r3, r3
 80122de:	4313      	orrs	r3, r2
 80122e0:	b25a      	sxtb	r2, r3
 80122e2:	7bfb      	ldrb	r3, [r7, #15]
 80122e4:	b2d1      	uxtb	r1, r2
 80122e6:	4a11      	ldr	r2, [pc, #68]	; (801232c <lcd_write_line+0xf8>)
 80122e8:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        g_lcd_map[reg] &= ~(1 << pos);
    }
}
 80122ea:	e010      	b.n	801230e <lcd_write_line+0xda>
        g_lcd_map[reg] &= ~(1 << pos);
 80122ec:	7bfb      	ldrb	r3, [r7, #15]
 80122ee:	4a0f      	ldr	r2, [pc, #60]	; (801232c <lcd_write_line+0xf8>)
 80122f0:	5cd3      	ldrb	r3, [r2, r3]
 80122f2:	b25a      	sxtb	r2, r3
 80122f4:	7bbb      	ldrb	r3, [r7, #14]
 80122f6:	2101      	movs	r1, #1
 80122f8:	fa01 f303 	lsl.w	r3, r1, r3
 80122fc:	b25b      	sxtb	r3, r3
 80122fe:	43db      	mvns	r3, r3
 8012300:	b25b      	sxtb	r3, r3
 8012302:	4013      	ands	r3, r2
 8012304:	b25a      	sxtb	r2, r3
 8012306:	7bfb      	ldrb	r3, [r7, #15]
 8012308:	b2d1      	uxtb	r1, r2
 801230a:	4a08      	ldr	r2, [pc, #32]	; (801232c <lcd_write_line+0xf8>)
 801230c:	54d1      	strb	r1, [r2, r3]
}
 801230e:	bf00      	nop
 8012310:	3714      	adds	r7, #20
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr
 801231a:	bf00      	nop
 801231c:	20001d0d 	.word	0x20001d0d
 8012320:	20000120 	.word	0x20000120
 8012324:	20001d0c 	.word	0x20001d0c
 8012328:	20000130 	.word	0x20000130
 801232c:	20001da0 	.word	0x20001da0

08012330 <prepare_to_send>:
 * COM_0_ADDRESS
 * COM_1_ADDRESS
 *
 */
void static prepare_to_send(uint8_t add)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	4603      	mov	r3, r0
 8012338:	71fb      	strb	r3, [r7, #7]
    register_address_t reg;
    reg.bits.address = add;
 801233a:	79fb      	ldrb	r3, [r7, #7]
 801233c:	f003 031f 	and.w	r3, r3, #31
 8012340:	b2da      	uxtb	r2, r3
 8012342:	7b3b      	ldrb	r3, [r7, #12]
 8012344:	f362 0304 	bfi	r3, r2, #0, #5
 8012348:	733b      	strb	r3, [r7, #12]
    reg.bits.not_used = 0;
 801234a:	7b3b      	ldrb	r3, [r7, #12]
 801234c:	f36f 1346 	bfc	r3, #5, #2
 8012350:	733b      	strb	r3, [r7, #12]
    reg.bits.read_write = WRITE_DATA;
 8012352:	7b3b      	ldrb	r3, [r7, #12]
 8012354:	f36f 13c7 	bfc	r3, #7, #1
 8012358:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(&h_spi1, &(reg.data), 1, DEFAULT_DELAY);
 801235a:	2314      	movs	r3, #20
 801235c:	f107 010c 	add.w	r1, r7, #12
 8012360:	2201      	movs	r2, #1
 8012362:	4803      	ldr	r0, [pc, #12]	; (8012370 <prepare_to_send+0x40>)
 8012364:	f7f7 fa4e 	bl	8009804 <HAL_SPI_Transmit>
}
 8012368:	bf00      	nop
 801236a:	3710      	adds	r7, #16
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}
 8012370:	20001d10 	.word	0x20001d10

08012374 <spi1_init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void spi1_init(void)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	af00      	add	r7, sp, #0
    h_spi1.Instance = SPI1;
 8012378:	4b29      	ldr	r3, [pc, #164]	; (8012420 <spi1_init+0xac>)
 801237a:	4a2a      	ldr	r2, [pc, #168]	; (8012424 <spi1_init+0xb0>)
 801237c:	601a      	str	r2, [r3, #0]
    h_spi1.Init.Mode = SPI_MODE_MASTER;
 801237e:	4b28      	ldr	r3, [pc, #160]	; (8012420 <spi1_init+0xac>)
 8012380:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8012384:	605a      	str	r2, [r3, #4]
    h_spi1.Init.Direction = SPI_DIRECTION_1LINE;
 8012386:	4b26      	ldr	r3, [pc, #152]	; (8012420 <spi1_init+0xac>)
 8012388:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 801238c:	609a      	str	r2, [r3, #8]
    h_spi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801238e:	4b24      	ldr	r3, [pc, #144]	; (8012420 <spi1_init+0xac>)
 8012390:	2207      	movs	r2, #7
 8012392:	60da      	str	r2, [r3, #12]
    h_spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012394:	4b22      	ldr	r3, [pc, #136]	; (8012420 <spi1_init+0xac>)
 8012396:	2200      	movs	r2, #0
 8012398:	611a      	str	r2, [r3, #16]
    h_spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801239a:	4b21      	ldr	r3, [pc, #132]	; (8012420 <spi1_init+0xac>)
 801239c:	2200      	movs	r2, #0
 801239e:	615a      	str	r2, [r3, #20]
    h_spi1.Init.NSS = SPI_NSS_SOFT;
 80123a0:	4b1f      	ldr	r3, [pc, #124]	; (8012420 <spi1_init+0xac>)
 80123a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80123a6:	619a      	str	r2, [r3, #24]
    h_spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80123a8:	4b1d      	ldr	r3, [pc, #116]	; (8012420 <spi1_init+0xac>)
 80123aa:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80123ae:	61da      	str	r2, [r3, #28]
    h_spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80123b0:	4b1b      	ldr	r3, [pc, #108]	; (8012420 <spi1_init+0xac>)
 80123b2:	2200      	movs	r2, #0
 80123b4:	621a      	str	r2, [r3, #32]
    h_spi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80123b6:	4b1a      	ldr	r3, [pc, #104]	; (8012420 <spi1_init+0xac>)
 80123b8:	2200      	movs	r2, #0
 80123ba:	625a      	str	r2, [r3, #36]	; 0x24
    h_spi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80123bc:	4b18      	ldr	r3, [pc, #96]	; (8012420 <spi1_init+0xac>)
 80123be:	2200      	movs	r2, #0
 80123c0:	629a      	str	r2, [r3, #40]	; 0x28
    h_spi1.Init.CRCPolynomial = 7; // @suppress("Avoid magic numbers")
 80123c2:	4b17      	ldr	r3, [pc, #92]	; (8012420 <spi1_init+0xac>)
 80123c4:	2207      	movs	r2, #7
 80123c6:	62da      	str	r2, [r3, #44]	; 0x2c
    h_spi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80123c8:	4b15      	ldr	r3, [pc, #84]	; (8012420 <spi1_init+0xac>)
 80123ca:	2200      	movs	r2, #0
 80123cc:	631a      	str	r2, [r3, #48]	; 0x30
    h_spi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80123ce:	4b14      	ldr	r3, [pc, #80]	; (8012420 <spi1_init+0xac>)
 80123d0:	2200      	movs	r2, #0
 80123d2:	635a      	str	r2, [r3, #52]	; 0x34
    h_spi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80123d4:	4b12      	ldr	r3, [pc, #72]	; (8012420 <spi1_init+0xac>)
 80123d6:	2200      	movs	r2, #0
 80123d8:	639a      	str	r2, [r3, #56]	; 0x38
    h_spi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80123da:	4b11      	ldr	r3, [pc, #68]	; (8012420 <spi1_init+0xac>)
 80123dc:	2200      	movs	r2, #0
 80123de:	63da      	str	r2, [r3, #60]	; 0x3c
    h_spi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80123e0:	4b0f      	ldr	r3, [pc, #60]	; (8012420 <spi1_init+0xac>)
 80123e2:	2200      	movs	r2, #0
 80123e4:	649a      	str	r2, [r3, #72]	; 0x48
    h_spi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80123e6:	4b0e      	ldr	r3, [pc, #56]	; (8012420 <spi1_init+0xac>)
 80123e8:	2200      	movs	r2, #0
 80123ea:	64da      	str	r2, [r3, #76]	; 0x4c
    h_spi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80123ec:	4b0c      	ldr	r3, [pc, #48]	; (8012420 <spi1_init+0xac>)
 80123ee:	2200      	movs	r2, #0
 80123f0:	651a      	str	r2, [r3, #80]	; 0x50
    h_spi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80123f2:	4b0b      	ldr	r3, [pc, #44]	; (8012420 <spi1_init+0xac>)
 80123f4:	2200      	movs	r2, #0
 80123f6:	655a      	str	r2, [r3, #84]	; 0x54
    h_spi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80123f8:	4b09      	ldr	r3, [pc, #36]	; (8012420 <spi1_init+0xac>)
 80123fa:	2200      	movs	r2, #0
 80123fc:	659a      	str	r2, [r3, #88]	; 0x58
    h_spi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80123fe:	4b08      	ldr	r3, [pc, #32]	; (8012420 <spi1_init+0xac>)
 8012400:	2200      	movs	r2, #0
 8012402:	65da      	str	r2, [r3, #92]	; 0x5c
    h_spi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8012404:	4b06      	ldr	r3, [pc, #24]	; (8012420 <spi1_init+0xac>)
 8012406:	2200      	movs	r2, #0
 8012408:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_SPI_Init(&h_spi1) != HAL_OK)
 801240a:	4805      	ldr	r0, [pc, #20]	; (8012420 <spi1_init+0xac>)
 801240c:	f7f7 f8e4 	bl	80095d8 <HAL_SPI_Init>
 8012410:	4603      	mov	r3, r0
 8012412:	2b00      	cmp	r3, #0
 8012414:	d001      	beq.n	801241a <spi1_init+0xa6>
    {
        Error_Handler();
 8012416:	f7ee ff45 	bl	80012a4 <Error_Handler>
    }
}
 801241a:	bf00      	nop
 801241c:	bd80      	pop	{r7, pc}
 801241e:	bf00      	nop
 8012420:	20001d10 	.word	0x20001d10
 8012424:	40013000 	.word	0x40013000

08012428 <pcf8553_blink>:
 * PCF_BLINK_ONE_SECOND,
 * PCF_BLINK_HALF_SECOND
 * @retval None
 */
void pcf8553_blink(blink_t mode)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
 801242e:	4603      	mov	r3, r0
 8012430:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 8012432:	2200      	movs	r2, #0
 8012434:	2110      	movs	r1, #16
 8012436:	480f      	ldr	r0, [pc, #60]	; (8012474 <pcf8553_blink+0x4c>)
 8012438:	f7f1 ff7c 	bl	8004334 <HAL_GPIO_WritePin>
    g_display_ctrl_2.reg_bits.blink = mode;
 801243c:	79fb      	ldrb	r3, [r7, #7]
 801243e:	f003 0303 	and.w	r3, r3, #3
 8012442:	b2d9      	uxtb	r1, r3
 8012444:	4a0c      	ldr	r2, [pc, #48]	; (8012478 <pcf8553_blink+0x50>)
 8012446:	7813      	ldrb	r3, [r2, #0]
 8012448:	f361 0342 	bfi	r3, r1, #1, #2
 801244c:	7013      	strb	r3, [r2, #0]
    prepare_to_send(DISPLAY_CTRL_2_ADDRESS);
 801244e:	2003      	movs	r0, #3
 8012450:	f7ff ff6e 	bl	8012330 <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 8012454:	2314      	movs	r3, #20
 8012456:	2201      	movs	r2, #1
 8012458:	4907      	ldr	r1, [pc, #28]	; (8012478 <pcf8553_blink+0x50>)
 801245a:	4808      	ldr	r0, [pc, #32]	; (801247c <pcf8553_blink+0x54>)
 801245c:	f7f7 f9d2 	bl	8009804 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 8012460:	2201      	movs	r2, #1
 8012462:	2110      	movs	r1, #16
 8012464:	4803      	ldr	r0, [pc, #12]	; (8012474 <pcf8553_blink+0x4c>)
 8012466:	f7f1 ff65 	bl	8004334 <HAL_GPIO_WritePin>
}
 801246a:	bf00      	nop
 801246c:	3708      	adds	r7, #8
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
 8012472:	bf00      	nop
 8012474:	42020000 	.word	0x42020000
 8012478:	20001db8 	.word	0x20001db8
 801247c:	20001d10 	.word	0x20001d10

08012480 <pcf8553_clear_buff>:

void pcf8553_clear_buff()
{
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
    /*
     * Limpia el buffer final, que es mandado directamente al controlador de la
     * pantalla LCD.
     */
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 8012486:	2300      	movs	r3, #0
 8012488:	607b      	str	r3, [r7, #4]
 801248a:	e007      	b.n	801249c <pcf8553_clear_buff+0x1c>
    {
        g_lcd_map[cont_buff_t] = 0;
 801248c:	4a08      	ldr	r2, [pc, #32]	; (80124b0 <pcf8553_clear_buff+0x30>)
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	4413      	add	r3, r2
 8012492:	2200      	movs	r2, #0
 8012494:	701a      	strb	r2, [r3, #0]
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	3301      	adds	r3, #1
 801249a:	607b      	str	r3, [r7, #4]
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2b13      	cmp	r3, #19
 80124a0:	ddf4      	ble.n	801248c <pcf8553_clear_buff+0xc>
    }
}
 80124a2:	bf00      	nop
 80124a4:	bf00      	nop
 80124a6:	370c      	adds	r7, #12
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr
 80124b0:	20001da0 	.word	0x20001da0

080124b4 <pcf8553_dump>:
 *
 * @param None
 * @retval None
 */
void pcf8553_dump()
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 80124ba:	2200      	movs	r2, #0
 80124bc:	2110      	movs	r1, #16
 80124be:	4810      	ldr	r0, [pc, #64]	; (8012500 <pcf8553_dump+0x4c>)
 80124c0:	f7f1 ff38 	bl	8004334 <HAL_GPIO_WritePin>
    prepare_to_send(DATA_ADDRESS);
 80124c4:	2004      	movs	r0, #4
 80124c6:	f7ff ff33 	bl	8012330 <prepare_to_send>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 80124ca:	2300      	movs	r3, #0
 80124cc:	607b      	str	r3, [r7, #4]
 80124ce:	e00a      	b.n	80124e6 <pcf8553_dump+0x32>
    {
        HAL_SPI_Transmit(&h_spi1, g_lcd_map + i, 1, DEFAULT_DELAY);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	4a0c      	ldr	r2, [pc, #48]	; (8012504 <pcf8553_dump+0x50>)
 80124d4:	1899      	adds	r1, r3, r2
 80124d6:	2314      	movs	r3, #20
 80124d8:	2201      	movs	r2, #1
 80124da:	480b      	ldr	r0, [pc, #44]	; (8012508 <pcf8553_dump+0x54>)
 80124dc:	f7f7 f992 	bl	8009804 <HAL_SPI_Transmit>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	3301      	adds	r3, #1
 80124e4:	607b      	str	r3, [r7, #4]
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2b13      	cmp	r3, #19
 80124ea:	ddf1      	ble.n	80124d0 <pcf8553_dump+0x1c>
    }
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 80124ec:	2201      	movs	r2, #1
 80124ee:	2110      	movs	r1, #16
 80124f0:	4803      	ldr	r0, [pc, #12]	; (8012500 <pcf8553_dump+0x4c>)
 80124f2:	f7f1 ff1f 	bl	8004334 <HAL_GPIO_WritePin>
}
 80124f6:	bf00      	nop
 80124f8:	3708      	adds	r7, #8
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}
 80124fe:	bf00      	nop
 8012500:	42020000 	.word	0x42020000
 8012504:	20001da0 	.word	0x20001da0
 8012508:	20001d10 	.word	0x20001d10

0801250c <pcf8553_init>:
 * @brief Llamar a esta función antes de empezar a trabajar con el driver.
 * @param None
 * @retval None
 */
void pcf8553_init()
{
 801250c:	b580      	push	{r7, lr}
 801250e:	af00      	add	r7, sp, #0
    spi1_init();
 8012510:	f7ff ff30 	bl	8012374 <spi1_init>
    pcf8553_reset();
 8012514:	f000 f830 	bl	8012578 <pcf8553_reset>
    HAL_Delay(DEFAULT_DELAY);
 8012518:	2314      	movs	r3, #20
 801251a:	4618      	mov	r0, r3
 801251c:	f7ef fa32 	bl	8001984 <HAL_Delay>
     * @brief El pcf8553 tiene un pin de chip select, la siguiente instruccion
     * habilita el chip, el parametro GPIO_PIN_RESET es muy parecido a un
     * numero magico, se debe buscar una mejor solucion.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 8012520:	2200      	movs	r2, #0
 8012522:	2110      	movs	r1, #16
 8012524:	480f      	ldr	r0, [pc, #60]	; (8012564 <pcf8553_init+0x58>)
 8012526:	f7f1 ff05 	bl	8004334 <HAL_GPIO_WritePin>
     *  Display_crtl_2 = 1 to enable display.
     *  Luego de un tiempo olvidé porque hice este comentario, no parece
     *  tener sentido.
     *
     */
    prepare_to_send(0x1);
 801252a:	2001      	movs	r0, #1
 801252c:	f7ff ff00 	bl	8012330 <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_device_ctrl.reg_data), 1, DEFAULT_DELAY);
 8012530:	2314      	movs	r3, #20
 8012532:	2201      	movs	r2, #1
 8012534:	490c      	ldr	r1, [pc, #48]	; (8012568 <pcf8553_init+0x5c>)
 8012536:	480d      	ldr	r0, [pc, #52]	; (801256c <pcf8553_init+0x60>)
 8012538:	f7f7 f964 	bl	8009804 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_1.reg_data), 1, DEFAULT_DELAY);
 801253c:	2314      	movs	r3, #20
 801253e:	2201      	movs	r2, #1
 8012540:	490b      	ldr	r1, [pc, #44]	; (8012570 <pcf8553_init+0x64>)
 8012542:	480a      	ldr	r0, [pc, #40]	; (801256c <pcf8553_init+0x60>)
 8012544:	f7f7 f95e 	bl	8009804 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 8012548:	2314      	movs	r3, #20
 801254a:	2201      	movs	r2, #1
 801254c:	4909      	ldr	r1, [pc, #36]	; (8012574 <pcf8553_init+0x68>)
 801254e:	4807      	ldr	r0, [pc, #28]	; (801256c <pcf8553_init+0x60>)
 8012550:	f7f7 f958 	bl	8009804 <HAL_SPI_Transmit>

    /*
     *  Chip disable.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 8012554:	2201      	movs	r2, #1
 8012556:	2110      	movs	r1, #16
 8012558:	4802      	ldr	r0, [pc, #8]	; (8012564 <pcf8553_init+0x58>)
 801255a:	f7f1 feeb 	bl	8004334 <HAL_GPIO_WritePin>
}
 801255e:	bf00      	nop
 8012560:	bd80      	pop	{r7, pc}
 8012562:	bf00      	nop
 8012564:	42020000 	.word	0x42020000
 8012568:	20001db4 	.word	0x20001db4
 801256c:	20001d10 	.word	0x20001d10
 8012570:	20000140 	.word	0x20000140
 8012574:	20001db8 	.word	0x20001db8

08012578 <pcf8553_reset>:
 * at least 10 μs.
 * @param  None
 * @retval None
 */
void pcf8553_reset()
{
 8012578:	b580      	push	{r7, lr}
 801257a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_PIN, GPIO_PIN_RESET);
 801257c:	2200      	movs	r2, #0
 801257e:	2140      	movs	r1, #64	; 0x40
 8012580:	4806      	ldr	r0, [pc, #24]	; (801259c <pcf8553_reset+0x24>)
 8012582:	f7f1 fed7 	bl	8004334 <HAL_GPIO_WritePin>
    HAL_Delay(DEFAULT_DELAY);
 8012586:	2314      	movs	r3, #20
 8012588:	4618      	mov	r0, r3
 801258a:	f7ef f9fb 	bl	8001984 <HAL_Delay>
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_Pin, GPIO_PIN_SET);
 801258e:	2201      	movs	r2, #1
 8012590:	2140      	movs	r1, #64	; 0x40
 8012592:	4802      	ldr	r0, [pc, #8]	; (801259c <pcf8553_reset+0x24>)
 8012594:	f7f1 fece 	bl	8004334 <HAL_GPIO_WritePin>
}
 8012598:	bf00      	nop
 801259a:	bd80      	pop	{r7, pc}
 801259c:	42020000 	.word	0x42020000

080125a0 <pcf8553_write_all>:
 * futuro se hará con una enumeración que lo deje claro, ya sea en esta función
 * o en una de mas alto nivel.
 * @retval None
 */
void pcf8553_write_all(uint8_t data)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b084      	sub	sp, #16
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	4603      	mov	r3, r0
 80125a8:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 80125aa:	2300      	movs	r3, #0
 80125ac:	60fb      	str	r3, [r7, #12]
 80125ae:	e007      	b.n	80125c0 <pcf8553_write_all+0x20>
    {
        g_lcd_map[i] = data;
 80125b0:	4a08      	ldr	r2, [pc, #32]	; (80125d4 <pcf8553_write_all+0x34>)
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	4413      	add	r3, r2
 80125b6:	79fa      	ldrb	r2, [r7, #7]
 80125b8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	3301      	adds	r3, #1
 80125be:	60fb      	str	r3, [r7, #12]
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	2b13      	cmp	r3, #19
 80125c4:	ddf4      	ble.n	80125b0 <pcf8553_write_all+0x10>
    }
    pcf8553_dump();
 80125c6:	f7ff ff75 	bl	80124b4 <pcf8553_dump>
}
 80125ca:	bf00      	nop
 80125cc:	3710      	adds	r7, #16
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd80      	pop	{r7, pc}
 80125d2:	bf00      	nop
 80125d4:	20001da0 	.word	0x20001da0

080125d8 <fm_menu_config_date_hour>:
 * @brief Función que imprime el menú de configuración de fecha y hora.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_date_hour(fm_event_t event_id)
{
 80125d8:	b5b0      	push	{r4, r5, r7, lr}
 80125da:	b0b4      	sub	sp, #208	; 0xd0
 80125dc:	af00      	add	r7, sp, #0
 80125de:	4603      	mov	r3, r0
 80125e0:	71fb      	strb	r3, [r7, #7]
    static sel_second second_enum;
    RTC_TimeTypeDef time_final;
    RTC_DateTypeDef date_final;
    extern RTC_HandleTypeDef hrtc;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 80125e2:	4b9d      	ldr	r3, [pc, #628]	; (8012858 <fm_menu_config_date_hour+0x280>)
 80125e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    fm_event_t event_now;

    if (new_entry == 1)
 80125e8:	4b9c      	ldr	r3, [pc, #624]	; (801285c <fm_menu_config_date_hour+0x284>)
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	2b01      	cmp	r3, #1
 80125ee:	d107      	bne.n	8012600 <fm_menu_config_date_hour+0x28>
    {
        field = DAY;
 80125f0:	4b9b      	ldr	r3, [pc, #620]	; (8012860 <fm_menu_config_date_hour+0x288>)
 80125f2:	2200      	movs	r2, #0
 80125f4:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 80125f6:	f7fd f95e 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 80125fa:	4b98      	ldr	r3, [pc, #608]	; (801285c <fm_menu_config_date_hour+0x284>)
 80125fc:	2200      	movs	r2, #0
 80125fe:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(CONFIGURATION, event_id, field);
 8012600:	4b97      	ldr	r3, [pc, #604]	; (8012860 <fm_menu_config_date_hour+0x288>)
 8012602:	781a      	ldrb	r2, [r3, #0]
 8012604:	79fb      	ldrb	r3, [r7, #7]
 8012606:	4619      	mov	r1, r3
 8012608:	2001      	movs	r0, #1
 801260a:	f7fd f95b 	bl	800f8c4 <fm_lcd_date_hour>
    fm_lcd_refresh();
 801260e:	f7fd fce8 	bl	800ffe2 <fm_lcd_refresh>

    day_enum = fm_factory_get_date_time().day;
 8012612:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012616:	4618      	mov	r0, r3
 8012618:	f7fc fbee 	bl	800edf8 <fm_factory_get_date_time>
 801261c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801261e:	b2da      	uxtb	r2, r3
 8012620:	4b90      	ldr	r3, [pc, #576]	; (8012864 <fm_menu_config_date_hour+0x28c>)
 8012622:	701a      	strb	r2, [r3, #0]
    month_enum = fm_factory_get_date_time().month;
 8012624:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012628:	4618      	mov	r0, r3
 801262a:	f7fc fbe5 	bl	800edf8 <fm_factory_get_date_time>
 801262e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012630:	b2da      	uxtb	r2, r3
 8012632:	4b8d      	ldr	r3, [pc, #564]	; (8012868 <fm_menu_config_date_hour+0x290>)
 8012634:	701a      	strb	r2, [r3, #0]
    year_enum = fm_factory_get_date_time().year;
 8012636:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801263a:	4618      	mov	r0, r3
 801263c:	f7fc fbdc 	bl	800edf8 <fm_factory_get_date_time>
 8012640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012642:	b2da      	uxtb	r2, r3
 8012644:	4b89      	ldr	r3, [pc, #548]	; (801286c <fm_menu_config_date_hour+0x294>)
 8012646:	701a      	strb	r2, [r3, #0]
    hour_enum = fm_factory_get_date_time().hour;
 8012648:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801264c:	4618      	mov	r0, r3
 801264e:	f7fc fbd3 	bl	800edf8 <fm_factory_get_date_time>
 8012652:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012656:	b2da      	uxtb	r2, r3
 8012658:	4b85      	ldr	r3, [pc, #532]	; (8012870 <fm_menu_config_date_hour+0x298>)
 801265a:	701a      	strb	r2, [r3, #0]
    minute_enum = fm_factory_get_date_time().minute;
 801265c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012660:	4618      	mov	r0, r3
 8012662:	f7fc fbc9 	bl	800edf8 <fm_factory_get_date_time>
 8012666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801266a:	b2da      	uxtb	r2, r3
 801266c:	4b81      	ldr	r3, [pc, #516]	; (8012874 <fm_menu_config_date_hour+0x29c>)
 801266e:	701a      	strb	r2, [r3, #0]
    second_enum = fm_factory_get_date_time().second;
 8012670:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012674:	4618      	mov	r0, r3
 8012676:	f7fc fbbf 	bl	800edf8 <fm_factory_get_date_time>
 801267a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801267e:	b2da      	uxtb	r2, r3
 8012680:	4b7d      	ldr	r3, [pc, #500]	; (8012878 <fm_menu_config_date_hour+0x2a0>)
 8012682:	701a      	strb	r2, [r3, #0]

    switch (event_id)
 8012684:	79fb      	ldrb	r3, [r7, #7]
 8012686:	3b01      	subs	r3, #1
 8012688:	2b04      	cmp	r3, #4
 801268a:	f200 83be 	bhi.w	8012e0a <fm_menu_config_date_hour+0x832>
 801268e:	a201      	add	r2, pc, #4	; (adr r2, 8012694 <fm_menu_config_date_hour+0xbc>)
 8012690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012694:	08012e0b 	.word	0x08012e0b
 8012698:	080126a9 	.word	0x080126a9
 801269c:	080129fd 	.word	0x080129fd
 80126a0:	08012d6d 	.word	0x08012d6d
 80126a4:	08012de9 	.word	0x08012de9
    {
        case EVENT_KEY_UP:
            if(correct_password)
 80126a8:	4b74      	ldr	r3, [pc, #464]	; (801287c <fm_menu_config_date_hour+0x2a4>)
 80126aa:	781b      	ldrb	r3, [r3, #0]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	f000 83ae 	beq.w	8012e0e <fm_menu_config_date_hour+0x836>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if(field == DAY)
 80126b2:	4b6b      	ldr	r3, [pc, #428]	; (8012860 <fm_menu_config_date_hour+0x288>)
 80126b4:	781b      	ldrb	r3, [r3, #0]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	f040 809b 	bne.w	80127f2 <fm_menu_config_date_hour+0x21a>
                {
                    if(month_enum == JANUARY ||
 80126bc:	4b6a      	ldr	r3, [pc, #424]	; (8012868 <fm_menu_config_date_hour+0x290>)
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	2b01      	cmp	r3, #1
 80126c2:	d017      	beq.n	80126f4 <fm_menu_config_date_hour+0x11c>
                    month_enum == MARCH      ||
 80126c4:	4b68      	ldr	r3, [pc, #416]	; (8012868 <fm_menu_config_date_hour+0x290>)
 80126c6:	781b      	ldrb	r3, [r3, #0]
                    if(month_enum == JANUARY ||
 80126c8:	2b03      	cmp	r3, #3
 80126ca:	d013      	beq.n	80126f4 <fm_menu_config_date_hour+0x11c>
                    month_enum == MAY        ||
 80126cc:	4b66      	ldr	r3, [pc, #408]	; (8012868 <fm_menu_config_date_hour+0x290>)
 80126ce:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MARCH      ||
 80126d0:	2b05      	cmp	r3, #5
 80126d2:	d00f      	beq.n	80126f4 <fm_menu_config_date_hour+0x11c>
                    month_enum == JULY       ||
 80126d4:	4b64      	ldr	r3, [pc, #400]	; (8012868 <fm_menu_config_date_hour+0x290>)
 80126d6:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MAY        ||
 80126d8:	2b07      	cmp	r3, #7
 80126da:	d00b      	beq.n	80126f4 <fm_menu_config_date_hour+0x11c>
                    month_enum == AUGUST     ||
 80126dc:	4b62      	ldr	r3, [pc, #392]	; (8012868 <fm_menu_config_date_hour+0x290>)
 80126de:	781b      	ldrb	r3, [r3, #0]
                    month_enum == JULY       ||
 80126e0:	2b08      	cmp	r3, #8
 80126e2:	d007      	beq.n	80126f4 <fm_menu_config_date_hour+0x11c>
                    month_enum == OCTOBER    ||
 80126e4:	4b60      	ldr	r3, [pc, #384]	; (8012868 <fm_menu_config_date_hour+0x290>)
 80126e6:	781b      	ldrb	r3, [r3, #0]
                    month_enum == AUGUST     ||
 80126e8:	2b0a      	cmp	r3, #10
 80126ea:	d003      	beq.n	80126f4 <fm_menu_config_date_hour+0x11c>
                    month_enum == DECEMBER)
 80126ec:	4b5e      	ldr	r3, [pc, #376]	; (8012868 <fm_menu_config_date_hour+0x290>)
 80126ee:	781b      	ldrb	r3, [r3, #0]
                    month_enum == OCTOBER    ||
 80126f0:	2b0c      	cmp	r3, #12
 80126f2:	d119      	bne.n	8012728 <fm_menu_config_date_hour+0x150>
                    {
                        if(day_enum < DAY_31)
 80126f4:	4b5b      	ldr	r3, [pc, #364]	; (8012864 <fm_menu_config_date_hour+0x28c>)
 80126f6:	781b      	ldrb	r3, [r3, #0]
 80126f8:	2b1e      	cmp	r3, #30
 80126fa:	d80b      	bhi.n	8012714 <fm_menu_config_date_hour+0x13c>
                        {
                            fm_factory_modify_date(day_enum +
 80126fc:	4b59      	ldr	r3, [pc, #356]	; (8012864 <fm_menu_config_date_hour+0x28c>)
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	3301      	adds	r3, #1
 8012702:	4a59      	ldr	r2, [pc, #356]	; (8012868 <fm_menu_config_date_hour+0x290>)
 8012704:	7812      	ldrb	r2, [r2, #0]
 8012706:	4611      	mov	r1, r2
 8012708:	4a58      	ldr	r2, [pc, #352]	; (801286c <fm_menu_config_date_hour+0x294>)
 801270a:	7812      	ldrb	r2, [r2, #0]
 801270c:	4618      	mov	r0, r3
 801270e:	f7fc fbf1 	bl	800eef4 <fm_factory_modify_date>
                        if(day_enum < DAY_31)
 8012712:	e168      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                            1, month_enum,
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1,
 8012714:	4b54      	ldr	r3, [pc, #336]	; (8012868 <fm_menu_config_date_hour+0x290>)
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	4619      	mov	r1, r3
 801271a:	4b54      	ldr	r3, [pc, #336]	; (801286c <fm_menu_config_date_hour+0x294>)
 801271c:	781b      	ldrb	r3, [r3, #0]
 801271e:	461a      	mov	r2, r3
 8012720:	2001      	movs	r0, #1
 8012722:	f7fc fbe7 	bl	800eef4 <fm_factory_modify_date>
                        if(day_enum < DAY_31)
 8012726:	e15e      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                            month_enum,
                            year_enum);
                        }
                    }
                    else if(month_enum == APRIL ||
 8012728:	4b4f      	ldr	r3, [pc, #316]	; (8012868 <fm_menu_config_date_hour+0x290>)
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	2b04      	cmp	r3, #4
 801272e:	d00b      	beq.n	8012748 <fm_menu_config_date_hour+0x170>
                    month_enum == JUNE          ||
 8012730:	4b4d      	ldr	r3, [pc, #308]	; (8012868 <fm_menu_config_date_hour+0x290>)
 8012732:	781b      	ldrb	r3, [r3, #0]
                    else if(month_enum == APRIL ||
 8012734:	2b06      	cmp	r3, #6
 8012736:	d007      	beq.n	8012748 <fm_menu_config_date_hour+0x170>
                    month_enum == SEPTEMBER     ||
 8012738:	4b4b      	ldr	r3, [pc, #300]	; (8012868 <fm_menu_config_date_hour+0x290>)
 801273a:	781b      	ldrb	r3, [r3, #0]
                    month_enum == JUNE          ||
 801273c:	2b09      	cmp	r3, #9
 801273e:	d003      	beq.n	8012748 <fm_menu_config_date_hour+0x170>
                    month_enum == NOVEMBER)
 8012740:	4b49      	ldr	r3, [pc, #292]	; (8012868 <fm_menu_config_date_hour+0x290>)
 8012742:	781b      	ldrb	r3, [r3, #0]
                    month_enum == SEPTEMBER     ||
 8012744:	2b0b      	cmp	r3, #11
 8012746:	d119      	bne.n	801277c <fm_menu_config_date_hour+0x1a4>
                    {
                        if(day_enum < DAY_30)
 8012748:	4b46      	ldr	r3, [pc, #280]	; (8012864 <fm_menu_config_date_hour+0x28c>)
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	2b1d      	cmp	r3, #29
 801274e:	d80b      	bhi.n	8012768 <fm_menu_config_date_hour+0x190>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 8012750:	4b44      	ldr	r3, [pc, #272]	; (8012864 <fm_menu_config_date_hour+0x28c>)
 8012752:	781b      	ldrb	r3, [r3, #0]
 8012754:	3301      	adds	r3, #1
 8012756:	4a44      	ldr	r2, [pc, #272]	; (8012868 <fm_menu_config_date_hour+0x290>)
 8012758:	7812      	ldrb	r2, [r2, #0]
 801275a:	4611      	mov	r1, r2
 801275c:	4a43      	ldr	r2, [pc, #268]	; (801286c <fm_menu_config_date_hour+0x294>)
 801275e:	7812      	ldrb	r2, [r2, #0]
 8012760:	4618      	mov	r0, r3
 8012762:	f7fc fbc7 	bl	800eef4 <fm_factory_modify_date>
                        if(day_enum < DAY_30)
 8012766:	e13e      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 8012768:	4b3f      	ldr	r3, [pc, #252]	; (8012868 <fm_menu_config_date_hour+0x290>)
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	4619      	mov	r1, r3
 801276e:	4b3f      	ldr	r3, [pc, #252]	; (801286c <fm_menu_config_date_hour+0x294>)
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	461a      	mov	r2, r3
 8012774:	2001      	movs	r0, #1
 8012776:	f7fc fbbd 	bl	800eef4 <fm_factory_modify_date>
                        if(day_enum < DAY_30)
 801277a:	e134      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else
                    {
                        if(year_enum % YEAR_4 == 0)
 801277c:	4b3b      	ldr	r3, [pc, #236]	; (801286c <fm_menu_config_date_hour+0x294>)
 801277e:	781b      	ldrb	r3, [r3, #0]
 8012780:	f003 0303 	and.w	r3, r3, #3
 8012784:	b2db      	uxtb	r3, r3
 8012786:	2b00      	cmp	r3, #0
 8012788:	d119      	bne.n	80127be <fm_menu_config_date_hour+0x1e6>
                        {
                            if(day_enum < DAY_29)
 801278a:	4b36      	ldr	r3, [pc, #216]	; (8012864 <fm_menu_config_date_hour+0x28c>)
 801278c:	781b      	ldrb	r3, [r3, #0]
 801278e:	2b1c      	cmp	r3, #28
 8012790:	d80b      	bhi.n	80127aa <fm_menu_config_date_hour+0x1d2>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 8012792:	4b34      	ldr	r3, [pc, #208]	; (8012864 <fm_menu_config_date_hour+0x28c>)
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	3301      	adds	r3, #1
 8012798:	4a33      	ldr	r2, [pc, #204]	; (8012868 <fm_menu_config_date_hour+0x290>)
 801279a:	7812      	ldrb	r2, [r2, #0]
 801279c:	4611      	mov	r1, r2
 801279e:	4a33      	ldr	r2, [pc, #204]	; (801286c <fm_menu_config_date_hour+0x294>)
 80127a0:	7812      	ldrb	r2, [r2, #0]
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7fc fba6 	bl	800eef4 <fm_factory_modify_date>
 80127a8:	e11d      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 80127aa:	4b2f      	ldr	r3, [pc, #188]	; (8012868 <fm_menu_config_date_hour+0x290>)
 80127ac:	781b      	ldrb	r3, [r3, #0]
 80127ae:	4619      	mov	r1, r3
 80127b0:	4b2e      	ldr	r3, [pc, #184]	; (801286c <fm_menu_config_date_hour+0x294>)
 80127b2:	781b      	ldrb	r3, [r3, #0]
 80127b4:	461a      	mov	r2, r3
 80127b6:	2001      	movs	r0, #1
 80127b8:	f7fc fb9c 	bl	800eef4 <fm_factory_modify_date>
 80127bc:	e113      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if(day_enum < DAY_28)
 80127be:	4b29      	ldr	r3, [pc, #164]	; (8012864 <fm_menu_config_date_hour+0x28c>)
 80127c0:	781b      	ldrb	r3, [r3, #0]
 80127c2:	2b1b      	cmp	r3, #27
 80127c4:	d80b      	bhi.n	80127de <fm_menu_config_date_hour+0x206>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 80127c6:	4b27      	ldr	r3, [pc, #156]	; (8012864 <fm_menu_config_date_hour+0x28c>)
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	3301      	adds	r3, #1
 80127cc:	4a26      	ldr	r2, [pc, #152]	; (8012868 <fm_menu_config_date_hour+0x290>)
 80127ce:	7812      	ldrb	r2, [r2, #0]
 80127d0:	4611      	mov	r1, r2
 80127d2:	4a26      	ldr	r2, [pc, #152]	; (801286c <fm_menu_config_date_hour+0x294>)
 80127d4:	7812      	ldrb	r2, [r2, #0]
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7fc fb8c 	bl	800eef4 <fm_factory_modify_date>
 80127dc:	e103      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 80127de:	4b22      	ldr	r3, [pc, #136]	; (8012868 <fm_menu_config_date_hour+0x290>)
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	4619      	mov	r1, r3
 80127e4:	4b21      	ldr	r3, [pc, #132]	; (801286c <fm_menu_config_date_hour+0x294>)
 80127e6:	781b      	ldrb	r3, [r3, #0]
 80127e8:	461a      	mov	r2, r3
 80127ea:	2001      	movs	r0, #1
 80127ec:	f7fc fb82 	bl	800eef4 <fm_factory_modify_date>
 80127f0:	e0f9      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                    }
                }
                else if(field == MONTH)
 80127f2:	4b1b      	ldr	r3, [pc, #108]	; (8012860 <fm_menu_config_date_hour+0x288>)
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	2b01      	cmp	r3, #1
 80127f8:	d16a      	bne.n	80128d0 <fm_menu_config_date_hour+0x2f8>
                {
                    if(month_enum < DECEMBER)
 80127fa:	4b1b      	ldr	r3, [pc, #108]	; (8012868 <fm_menu_config_date_hour+0x290>)
 80127fc:	781b      	ldrb	r3, [r3, #0]
 80127fe:	2b0b      	cmp	r3, #11
 8012800:	d85c      	bhi.n	80128bc <fm_menu_config_date_hour+0x2e4>
                    {
                        if((month_enum + 1 == APRIL ||
 8012802:	4b19      	ldr	r3, [pc, #100]	; (8012868 <fm_menu_config_date_hour+0x290>)
 8012804:	781b      	ldrb	r3, [r3, #0]
 8012806:	2b03      	cmp	r3, #3
 8012808:	d00b      	beq.n	8012822 <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == JUNE      ||
 801280a:	4b17      	ldr	r3, [pc, #92]	; (8012868 <fm_menu_config_date_hour+0x290>)
 801280c:	781b      	ldrb	r3, [r3, #0]
                        if((month_enum + 1 == APRIL ||
 801280e:	2b05      	cmp	r3, #5
 8012810:	d007      	beq.n	8012822 <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == SEPTEMBER ||
 8012812:	4b15      	ldr	r3, [pc, #84]	; (8012868 <fm_menu_config_date_hour+0x290>)
 8012814:	781b      	ldrb	r3, [r3, #0]
                        month_enum + 1 == JUNE      ||
 8012816:	2b08      	cmp	r3, #8
 8012818:	d003      	beq.n	8012822 <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == NOVEMBER)
 801281a:	4b13      	ldr	r3, [pc, #76]	; (8012868 <fm_menu_config_date_hour+0x290>)
 801281c:	781b      	ldrb	r3, [r3, #0]
                        month_enum + 1 == SEPTEMBER ||
 801281e:	2b0a      	cmp	r3, #10
 8012820:	d107      	bne.n	8012832 <fm_menu_config_date_hour+0x25a>
                        && (day_enum > DAY_30))
 8012822:	4b10      	ldr	r3, [pc, #64]	; (8012864 <fm_menu_config_date_hour+0x28c>)
 8012824:	781b      	ldrb	r3, [r3, #0]
 8012826:	2b1e      	cmp	r3, #30
 8012828:	d903      	bls.n	8012832 <fm_menu_config_date_hour+0x25a>
                        {
                            day_enum = DAY_30;
 801282a:	4b0e      	ldr	r3, [pc, #56]	; (8012864 <fm_menu_config_date_hour+0x28c>)
 801282c:	221e      	movs	r2, #30
 801282e:	701a      	strb	r2, [r3, #0]
 8012830:	e038      	b.n	80128a4 <fm_menu_config_date_hour+0x2cc>
                        }
                        else if((month_enum + 1 == FEBRUARY) &&
 8012832:	4b0d      	ldr	r3, [pc, #52]	; (8012868 <fm_menu_config_date_hour+0x290>)
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	2b01      	cmp	r3, #1
 8012838:	d122      	bne.n	8012880 <fm_menu_config_date_hour+0x2a8>
                        (year_enum % YEAR_4 == 0) &&
 801283a:	4b0c      	ldr	r3, [pc, #48]	; (801286c <fm_menu_config_date_hour+0x294>)
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	f003 0303 	and.w	r3, r3, #3
 8012842:	b2db      	uxtb	r3, r3
                        else if((month_enum + 1 == FEBRUARY) &&
 8012844:	2b00      	cmp	r3, #0
 8012846:	d11b      	bne.n	8012880 <fm_menu_config_date_hour+0x2a8>
                        (day_enum > DAY_29))
 8012848:	4b06      	ldr	r3, [pc, #24]	; (8012864 <fm_menu_config_date_hour+0x28c>)
 801284a:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 == 0) &&
 801284c:	2b1d      	cmp	r3, #29
 801284e:	d917      	bls.n	8012880 <fm_menu_config_date_hour+0x2a8>
                        {
                            day_enum = DAY_29;
 8012850:	4b04      	ldr	r3, [pc, #16]	; (8012864 <fm_menu_config_date_hour+0x28c>)
 8012852:	221d      	movs	r2, #29
 8012854:	701a      	strb	r2, [r3, #0]
 8012856:	e025      	b.n	80128a4 <fm_menu_config_date_hour+0x2cc>
 8012858:	080125d9 	.word	0x080125d9
 801285c:	20000141 	.word	0x20000141
 8012860:	20001dbd 	.word	0x20001dbd
 8012864:	20001dbe 	.word	0x20001dbe
 8012868:	20001dbf 	.word	0x20001dbf
 801286c:	20001dc0 	.word	0x20001dc0
 8012870:	20001dc1 	.word	0x20001dc1
 8012874:	20001dc2 	.word	0x20001dc2
 8012878:	20001dc3 	.word	0x20001dc3
 801287c:	20001dba 	.word	0x20001dba
                        }
                        else if((month_enum + 1 == FEBRUARY) &&
 8012880:	4b93      	ldr	r3, [pc, #588]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	2b01      	cmp	r3, #1
 8012886:	d10d      	bne.n	80128a4 <fm_menu_config_date_hour+0x2cc>
                        (year_enum % YEAR_4 != 0) &&
 8012888:	4b92      	ldr	r3, [pc, #584]	; (8012ad4 <fm_menu_config_date_hour+0x4fc>)
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	f003 0303 	and.w	r3, r3, #3
 8012890:	b2db      	uxtb	r3, r3
                        else if((month_enum + 1 == FEBRUARY) &&
 8012892:	2b00      	cmp	r3, #0
 8012894:	d006      	beq.n	80128a4 <fm_menu_config_date_hour+0x2cc>
                        (day_enum > DAY_28))
 8012896:	4b90      	ldr	r3, [pc, #576]	; (8012ad8 <fm_menu_config_date_hour+0x500>)
 8012898:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 != 0) &&
 801289a:	2b1c      	cmp	r3, #28
 801289c:	d902      	bls.n	80128a4 <fm_menu_config_date_hour+0x2cc>
                        {
                            day_enum = DAY_28;
 801289e:	4b8e      	ldr	r3, [pc, #568]	; (8012ad8 <fm_menu_config_date_hour+0x500>)
 80128a0:	221c      	movs	r2, #28
 80128a2:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum + 1,
 80128a4:	4b8c      	ldr	r3, [pc, #560]	; (8012ad8 <fm_menu_config_date_hour+0x500>)
 80128a6:	781b      	ldrb	r3, [r3, #0]
 80128a8:	4618      	mov	r0, r3
 80128aa:	4b89      	ldr	r3, [pc, #548]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	3301      	adds	r3, #1
 80128b0:	4a88      	ldr	r2, [pc, #544]	; (8012ad4 <fm_menu_config_date_hour+0x4fc>)
 80128b2:	7812      	ldrb	r2, [r2, #0]
 80128b4:	4619      	mov	r1, r3
 80128b6:	f7fc fb1d 	bl	800eef4 <fm_factory_modify_date>
 80128ba:	e094      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, JANUARY, year_enum);
 80128bc:	4b86      	ldr	r3, [pc, #536]	; (8012ad8 <fm_menu_config_date_hour+0x500>)
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	4618      	mov	r0, r3
 80128c2:	4b84      	ldr	r3, [pc, #528]	; (8012ad4 <fm_menu_config_date_hour+0x4fc>)
 80128c4:	781b      	ldrb	r3, [r3, #0]
 80128c6:	461a      	mov	r2, r3
 80128c8:	2101      	movs	r1, #1
 80128ca:	f7fc fb13 	bl	800eef4 <fm_factory_modify_date>
 80128ce:	e08a      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if(field == YEAR)
 80128d0:	4b82      	ldr	r3, [pc, #520]	; (8012adc <fm_menu_config_date_hour+0x504>)
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	2b02      	cmp	r3, #2
 80128d6:	d12c      	bne.n	8012932 <fm_menu_config_date_hour+0x35a>
                {
                    if(year_enum < YEAR_99)
 80128d8:	4b7e      	ldr	r3, [pc, #504]	; (8012ad4 <fm_menu_config_date_hour+0x4fc>)
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	2b62      	cmp	r3, #98	; 0x62
 80128de:	d81e      	bhi.n	801291e <fm_menu_config_date_hour+0x346>
                    {
                        if(((year_enum + 1) % YEAR_4 != YEAR_0) &&
 80128e0:	4b7c      	ldr	r3, [pc, #496]	; (8012ad4 <fm_menu_config_date_hour+0x4fc>)
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	3301      	adds	r3, #1
 80128e6:	f003 0303 	and.w	r3, r3, #3
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d00a      	beq.n	8012904 <fm_menu_config_date_hour+0x32c>
                        (month_enum == FEBRUARY) &&
 80128ee:	4b78      	ldr	r3, [pc, #480]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 80128f0:	781b      	ldrb	r3, [r3, #0]
                        if(((year_enum + 1) % YEAR_4 != YEAR_0) &&
 80128f2:	2b02      	cmp	r3, #2
 80128f4:	d106      	bne.n	8012904 <fm_menu_config_date_hour+0x32c>
                        (day_enum > DAY_28))
 80128f6:	4b78      	ldr	r3, [pc, #480]	; (8012ad8 <fm_menu_config_date_hour+0x500>)
 80128f8:	781b      	ldrb	r3, [r3, #0]
                        (month_enum == FEBRUARY) &&
 80128fa:	2b1c      	cmp	r3, #28
 80128fc:	d902      	bls.n	8012904 <fm_menu_config_date_hour+0x32c>
                        {
                            day_enum = DAY_28;
 80128fe:	4b76      	ldr	r3, [pc, #472]	; (8012ad8 <fm_menu_config_date_hour+0x500>)
 8012900:	221c      	movs	r2, #28
 8012902:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum, year_enum
 8012904:	4b74      	ldr	r3, [pc, #464]	; (8012ad8 <fm_menu_config_date_hour+0x500>)
 8012906:	781b      	ldrb	r3, [r3, #0]
 8012908:	4618      	mov	r0, r3
 801290a:	4b71      	ldr	r3, [pc, #452]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	4619      	mov	r1, r3
 8012910:	4b70      	ldr	r3, [pc, #448]	; (8012ad4 <fm_menu_config_date_hour+0x4fc>)
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	3301      	adds	r3, #1
 8012916:	461a      	mov	r2, r3
 8012918:	f7fc faec 	bl	800eef4 <fm_factory_modify_date>
 801291c:	e063      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                        + 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_0);
 801291e:	4b6e      	ldr	r3, [pc, #440]	; (8012ad8 <fm_menu_config_date_hour+0x500>)
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	4618      	mov	r0, r3
 8012924:	4b6a      	ldr	r3, [pc, #424]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	2200      	movs	r2, #0
 801292a:	4619      	mov	r1, r3
 801292c:	f7fc fae2 	bl	800eef4 <fm_factory_modify_date>
 8012930:	e059      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if(field == HOUR)
 8012932:	4b6a      	ldr	r3, [pc, #424]	; (8012adc <fm_menu_config_date_hour+0x504>)
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	2b03      	cmp	r3, #3
 8012938:	d119      	bne.n	801296e <fm_menu_config_date_hour+0x396>
                {
                    if(hour_enum < HOUR_23)
 801293a:	4b69      	ldr	r3, [pc, #420]	; (8012ae0 <fm_menu_config_date_hour+0x508>)
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	2b16      	cmp	r3, #22
 8012940:	d80b      	bhi.n	801295a <fm_menu_config_date_hour+0x382>
                    {
                        fm_factory_modify_time(hour_enum + 1,
 8012942:	4b67      	ldr	r3, [pc, #412]	; (8012ae0 <fm_menu_config_date_hour+0x508>)
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	3301      	adds	r3, #1
 8012948:	4a66      	ldr	r2, [pc, #408]	; (8012ae4 <fm_menu_config_date_hour+0x50c>)
 801294a:	7812      	ldrb	r2, [r2, #0]
 801294c:	4611      	mov	r1, r2
 801294e:	4a66      	ldr	r2, [pc, #408]	; (8012ae8 <fm_menu_config_date_hour+0x510>)
 8012950:	7812      	ldrb	r2, [r2, #0]
 8012952:	4618      	mov	r0, r3
 8012954:	f7fc fafa 	bl	800ef4c <fm_factory_modify_time>
 8012958:	e045      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                        minute_enum,
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_0, minute_enum,
 801295a:	4b62      	ldr	r3, [pc, #392]	; (8012ae4 <fm_menu_config_date_hour+0x50c>)
 801295c:	781b      	ldrb	r3, [r3, #0]
 801295e:	4619      	mov	r1, r3
 8012960:	4b61      	ldr	r3, [pc, #388]	; (8012ae8 <fm_menu_config_date_hour+0x510>)
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	461a      	mov	r2, r3
 8012966:	2000      	movs	r0, #0
 8012968:	f7fc faf0 	bl	800ef4c <fm_factory_modify_time>
 801296c:	e03b      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                }
                else if(field == MINUTE)
 801296e:	4b5b      	ldr	r3, [pc, #364]	; (8012adc <fm_menu_config_date_hour+0x504>)
 8012970:	781b      	ldrb	r3, [r3, #0]
 8012972:	2b04      	cmp	r3, #4
 8012974:	d119      	bne.n	80129aa <fm_menu_config_date_hour+0x3d2>
                {
                    if(minute_enum < MINU_59)
 8012976:	4b5b      	ldr	r3, [pc, #364]	; (8012ae4 <fm_menu_config_date_hour+0x50c>)
 8012978:	781b      	ldrb	r3, [r3, #0]
 801297a:	2b3a      	cmp	r3, #58	; 0x3a
 801297c:	d80b      	bhi.n	8012996 <fm_menu_config_date_hour+0x3be>
                    {
                        fm_factory_modify_time(hour_enum,
 801297e:	4b58      	ldr	r3, [pc, #352]	; (8012ae0 <fm_menu_config_date_hour+0x508>)
 8012980:	781b      	ldrb	r3, [r3, #0]
 8012982:	4618      	mov	r0, r3
 8012984:	4b57      	ldr	r3, [pc, #348]	; (8012ae4 <fm_menu_config_date_hour+0x50c>)
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	3301      	adds	r3, #1
 801298a:	4a57      	ldr	r2, [pc, #348]	; (8012ae8 <fm_menu_config_date_hour+0x510>)
 801298c:	7812      	ldrb	r2, [r2, #0]
 801298e:	4619      	mov	r1, r3
 8012990:	f7fc fadc 	bl	800ef4c <fm_factory_modify_time>
 8012994:	e027      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                        minute_enum + 1,
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum,
 8012996:	4b52      	ldr	r3, [pc, #328]	; (8012ae0 <fm_menu_config_date_hour+0x508>)
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	4618      	mov	r0, r3
 801299c:	4b52      	ldr	r3, [pc, #328]	; (8012ae8 <fm_menu_config_date_hour+0x510>)
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	461a      	mov	r2, r3
 80129a2:	2100      	movs	r1, #0
 80129a4:	f7fc fad2 	bl	800ef4c <fm_factory_modify_time>
 80129a8:	e01d      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                        MINU_0, second_enum);
                    }
                }
                else if(field == SECOND)
 80129aa:	4b4c      	ldr	r3, [pc, #304]	; (8012adc <fm_menu_config_date_hour+0x504>)
 80129ac:	781b      	ldrb	r3, [r3, #0]
 80129ae:	2b05      	cmp	r3, #5
 80129b0:	d119      	bne.n	80129e6 <fm_menu_config_date_hour+0x40e>
                {
                    if(second_enum < SEC_59)
 80129b2:	4b4d      	ldr	r3, [pc, #308]	; (8012ae8 <fm_menu_config_date_hour+0x510>)
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	2b3a      	cmp	r3, #58	; 0x3a
 80129b8:	d80c      	bhi.n	80129d4 <fm_menu_config_date_hour+0x3fc>
                    {
                        fm_factory_modify_time(hour_enum,
 80129ba:	4b49      	ldr	r3, [pc, #292]	; (8012ae0 <fm_menu_config_date_hour+0x508>)
 80129bc:	781b      	ldrb	r3, [r3, #0]
 80129be:	4618      	mov	r0, r3
 80129c0:	4b48      	ldr	r3, [pc, #288]	; (8012ae4 <fm_menu_config_date_hour+0x50c>)
 80129c2:	781b      	ldrb	r3, [r3, #0]
 80129c4:	4619      	mov	r1, r3
 80129c6:	4b48      	ldr	r3, [pc, #288]	; (8012ae8 <fm_menu_config_date_hour+0x510>)
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	3301      	adds	r3, #1
 80129cc:	461a      	mov	r2, r3
 80129ce:	f7fc fabd 	bl	800ef4c <fm_factory_modify_time>
 80129d2:	e008      	b.n	80129e6 <fm_menu_config_date_hour+0x40e>
                        minute_enum,
                        second_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum,
 80129d4:	4b42      	ldr	r3, [pc, #264]	; (8012ae0 <fm_menu_config_date_hour+0x508>)
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	4618      	mov	r0, r3
 80129da:	4b42      	ldr	r3, [pc, #264]	; (8012ae4 <fm_menu_config_date_hour+0x50c>)
 80129dc:	781b      	ldrb	r3, [r3, #0]
 80129de:	2200      	movs	r2, #0
 80129e0:	4619      	mov	r1, r3
 80129e2:	f7fc fab3 	bl	800ef4c <fm_factory_modify_time>
                        minute_enum,
                        SEC_0);
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 80129e6:	2301      	movs	r3, #1
 80129e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80129ec:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80129f0:	2200      	movs	r2, #0
 80129f2:	4619      	mov	r1, r3
 80129f4:	483d      	ldr	r0, [pc, #244]	; (8012aec <fm_menu_config_date_hour+0x514>)
 80129f6:	f7fb fc83 	bl	800e300 <_txe_queue_send>
            }
        break;
 80129fa:	e208      	b.n	8012e0e <fm_menu_config_date_hour+0x836>
        case EVENT_KEY_DOWN:
            if(correct_password)
 80129fc:	4b3c      	ldr	r3, [pc, #240]	; (8012af0 <fm_menu_config_date_hour+0x518>)
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f000 8206 	beq.w	8012e12 <fm_menu_config_date_hour+0x83a>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if(field == DAY)
 8012a06:	4b35      	ldr	r3, [pc, #212]	; (8012adc <fm_menu_config_date_hour+0x504>)
 8012a08:	781b      	ldrb	r3, [r3, #0]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	f040 80ad 	bne.w	8012b6a <fm_menu_config_date_hour+0x592>
                {
                    if(month_enum == JANUARY || month_enum == MARCH   ||
 8012a10:	4b2f      	ldr	r3, [pc, #188]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	2b01      	cmp	r3, #1
 8012a16:	d017      	beq.n	8012a48 <fm_menu_config_date_hour+0x470>
 8012a18:	4b2d      	ldr	r3, [pc, #180]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012a1a:	781b      	ldrb	r3, [r3, #0]
 8012a1c:	2b03      	cmp	r3, #3
 8012a1e:	d013      	beq.n	8012a48 <fm_menu_config_date_hour+0x470>
                    month_enum == MAY        || month_enum == JULY    ||
 8012a20:	4b2b      	ldr	r3, [pc, #172]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012a22:	781b      	ldrb	r3, [r3, #0]
                    if(month_enum == JANUARY || month_enum == MARCH   ||
 8012a24:	2b05      	cmp	r3, #5
 8012a26:	d00f      	beq.n	8012a48 <fm_menu_config_date_hour+0x470>
                    month_enum == MAY        || month_enum == JULY    ||
 8012a28:	4b29      	ldr	r3, [pc, #164]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	2b07      	cmp	r3, #7
 8012a2e:	d00b      	beq.n	8012a48 <fm_menu_config_date_hour+0x470>
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 8012a30:	4b27      	ldr	r3, [pc, #156]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012a32:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MAY        || month_enum == JULY    ||
 8012a34:	2b08      	cmp	r3, #8
 8012a36:	d007      	beq.n	8012a48 <fm_menu_config_date_hour+0x470>
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 8012a38:	4b25      	ldr	r3, [pc, #148]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	2b0a      	cmp	r3, #10
 8012a3e:	d003      	beq.n	8012a48 <fm_menu_config_date_hour+0x470>
                    month_enum == DECEMBER)
 8012a40:	4b23      	ldr	r3, [pc, #140]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012a42:	781b      	ldrb	r3, [r3, #0]
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 8012a44:	2b0c      	cmp	r3, #12
 8012a46:	d119      	bne.n	8012a7c <fm_menu_config_date_hour+0x4a4>
                    {
                        if(day_enum > DAY_1)
 8012a48:	4b23      	ldr	r3, [pc, #140]	; (8012ad8 <fm_menu_config_date_hour+0x500>)
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	2b01      	cmp	r3, #1
 8012a4e:	d90b      	bls.n	8012a68 <fm_menu_config_date_hour+0x490>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012a50:	4b21      	ldr	r3, [pc, #132]	; (8012ad8 <fm_menu_config_date_hour+0x500>)
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	3b01      	subs	r3, #1
 8012a56:	4a1e      	ldr	r2, [pc, #120]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012a58:	7812      	ldrb	r2, [r2, #0]
 8012a5a:	4611      	mov	r1, r2
 8012a5c:	4a1d      	ldr	r2, [pc, #116]	; (8012ad4 <fm_menu_config_date_hour+0x4fc>)
 8012a5e:	7812      	ldrb	r2, [r2, #0]
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7fc fa47 	bl	800eef4 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 8012a66:	e166      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_31, month_enum,
 8012a68:	4b19      	ldr	r3, [pc, #100]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	4b19      	ldr	r3, [pc, #100]	; (8012ad4 <fm_menu_config_date_hour+0x4fc>)
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	461a      	mov	r2, r3
 8012a74:	201f      	movs	r0, #31
 8012a76:	f7fc fa3d 	bl	800eef4 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 8012a7a:	e15c      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                    }
                    else if(month_enum == APRIL || month_enum == JUNE ||
 8012a7c:	4b14      	ldr	r3, [pc, #80]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	2b04      	cmp	r3, #4
 8012a82:	d00b      	beq.n	8012a9c <fm_menu_config_date_hour+0x4c4>
 8012a84:	4b12      	ldr	r3, [pc, #72]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	2b06      	cmp	r3, #6
 8012a8a:	d007      	beq.n	8012a9c <fm_menu_config_date_hour+0x4c4>
                    month_enum == SEPTEMBER     || month_enum == NOVEMBER)
 8012a8c:	4b10      	ldr	r3, [pc, #64]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012a8e:	781b      	ldrb	r3, [r3, #0]
                    else if(month_enum == APRIL || month_enum == JUNE ||
 8012a90:	2b09      	cmp	r3, #9
 8012a92:	d003      	beq.n	8012a9c <fm_menu_config_date_hour+0x4c4>
                    month_enum == SEPTEMBER     || month_enum == NOVEMBER)
 8012a94:	4b0e      	ldr	r3, [pc, #56]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	2b0b      	cmp	r3, #11
 8012a9a:	d12b      	bne.n	8012af4 <fm_menu_config_date_hour+0x51c>
                    {
                        if(day_enum > DAY_1)
 8012a9c:	4b0e      	ldr	r3, [pc, #56]	; (8012ad8 <fm_menu_config_date_hour+0x500>)
 8012a9e:	781b      	ldrb	r3, [r3, #0]
 8012aa0:	2b01      	cmp	r3, #1
 8012aa2:	d90b      	bls.n	8012abc <fm_menu_config_date_hour+0x4e4>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012aa4:	4b0c      	ldr	r3, [pc, #48]	; (8012ad8 <fm_menu_config_date_hour+0x500>)
 8012aa6:	781b      	ldrb	r3, [r3, #0]
 8012aa8:	3b01      	subs	r3, #1
 8012aaa:	4a09      	ldr	r2, [pc, #36]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012aac:	7812      	ldrb	r2, [r2, #0]
 8012aae:	4611      	mov	r1, r2
 8012ab0:	4a08      	ldr	r2, [pc, #32]	; (8012ad4 <fm_menu_config_date_hour+0x4fc>)
 8012ab2:	7812      	ldrb	r2, [r2, #0]
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f7fc fa1d 	bl	800eef4 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 8012aba:	e13c      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_30, month_enum,
 8012abc:	4b04      	ldr	r3, [pc, #16]	; (8012ad0 <fm_menu_config_date_hour+0x4f8>)
 8012abe:	781b      	ldrb	r3, [r3, #0]
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	4b04      	ldr	r3, [pc, #16]	; (8012ad4 <fm_menu_config_date_hour+0x4fc>)
 8012ac4:	781b      	ldrb	r3, [r3, #0]
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	201e      	movs	r0, #30
 8012aca:	f7fc fa13 	bl	800eef4 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 8012ace:	e132      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
 8012ad0:	20001dbf 	.word	0x20001dbf
 8012ad4:	20001dc0 	.word	0x20001dc0
 8012ad8:	20001dbe 	.word	0x20001dbe
 8012adc:	20001dbd 	.word	0x20001dbd
 8012ae0:	20001dc1 	.word	0x20001dc1
 8012ae4:	20001dc2 	.word	0x20001dc2
 8012ae8:	20001dc3 	.word	0x20001dc3
 8012aec:	20001388 	.word	0x20001388
 8012af0:	20001dba 	.word	0x20001dba
                            year_enum);
                        }
                    }
                    else
                    {
                        if(year_enum % YEAR_4 == 0)
 8012af4:	4b95      	ldr	r3, [pc, #596]	; (8012d4c <fm_menu_config_date_hour+0x774>)
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	f003 0303 	and.w	r3, r3, #3
 8012afc:	b2db      	uxtb	r3, r3
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d119      	bne.n	8012b36 <fm_menu_config_date_hour+0x55e>
                        {
                            if(day_enum > DAY_1)
 8012b02:	4b93      	ldr	r3, [pc, #588]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012b04:	781b      	ldrb	r3, [r3, #0]
 8012b06:	2b01      	cmp	r3, #1
 8012b08:	d90b      	bls.n	8012b22 <fm_menu_config_date_hour+0x54a>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 8012b0a:	4b91      	ldr	r3, [pc, #580]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012b0c:	781b      	ldrb	r3, [r3, #0]
 8012b0e:	3b01      	subs	r3, #1
 8012b10:	4a90      	ldr	r2, [pc, #576]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012b12:	7812      	ldrb	r2, [r2, #0]
 8012b14:	4611      	mov	r1, r2
 8012b16:	4a8d      	ldr	r2, [pc, #564]	; (8012d4c <fm_menu_config_date_hour+0x774>)
 8012b18:	7812      	ldrb	r2, [r2, #0]
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7fc f9ea 	bl	800eef4 <fm_factory_modify_date>
 8012b20:	e109      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_29, month_enum,
 8012b22:	4b8c      	ldr	r3, [pc, #560]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012b24:	781b      	ldrb	r3, [r3, #0]
 8012b26:	4619      	mov	r1, r3
 8012b28:	4b88      	ldr	r3, [pc, #544]	; (8012d4c <fm_menu_config_date_hour+0x774>)
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	461a      	mov	r2, r3
 8012b2e:	201d      	movs	r0, #29
 8012b30:	f7fc f9e0 	bl	800eef4 <fm_factory_modify_date>
 8012b34:	e0ff      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if(day_enum > DAY_1)
 8012b36:	4b86      	ldr	r3, [pc, #536]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	2b01      	cmp	r3, #1
 8012b3c:	d90b      	bls.n	8012b56 <fm_menu_config_date_hour+0x57e>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 8012b3e:	4b84      	ldr	r3, [pc, #528]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012b40:	781b      	ldrb	r3, [r3, #0]
 8012b42:	3b01      	subs	r3, #1
 8012b44:	4a83      	ldr	r2, [pc, #524]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012b46:	7812      	ldrb	r2, [r2, #0]
 8012b48:	4611      	mov	r1, r2
 8012b4a:	4a80      	ldr	r2, [pc, #512]	; (8012d4c <fm_menu_config_date_hour+0x774>)
 8012b4c:	7812      	ldrb	r2, [r2, #0]
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f7fc f9d0 	bl	800eef4 <fm_factory_modify_date>
 8012b54:	e0ef      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_28, month_enum,
 8012b56:	4b7f      	ldr	r3, [pc, #508]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	4b7b      	ldr	r3, [pc, #492]	; (8012d4c <fm_menu_config_date_hour+0x774>)
 8012b5e:	781b      	ldrb	r3, [r3, #0]
 8012b60:	461a      	mov	r2, r3
 8012b62:	201c      	movs	r0, #28
 8012b64:	f7fc f9c6 	bl	800eef4 <fm_factory_modify_date>
 8012b68:	e0e5      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                    }
                }
                else if(field == MONTH)
 8012b6a:	4b7b      	ldr	r3, [pc, #492]	; (8012d58 <fm_menu_config_date_hour+0x780>)
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	2b01      	cmp	r3, #1
 8012b70:	d156      	bne.n	8012c20 <fm_menu_config_date_hour+0x648>
                {
                    if(month_enum > JANUARY)
 8012b72:	4b78      	ldr	r3, [pc, #480]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012b74:	781b      	ldrb	r3, [r3, #0]
 8012b76:	2b01      	cmp	r3, #1
 8012b78:	d948      	bls.n	8012c0c <fm_menu_config_date_hour+0x634>
                    {
                        if((month_enum - 1 == APRIL ||
 8012b7a:	4b76      	ldr	r3, [pc, #472]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	2b05      	cmp	r3, #5
 8012b80:	d00b      	beq.n	8012b9a <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == JUNE      ||
 8012b82:	4b74      	ldr	r3, [pc, #464]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012b84:	781b      	ldrb	r3, [r3, #0]
                        if((month_enum - 1 == APRIL ||
 8012b86:	2b07      	cmp	r3, #7
 8012b88:	d007      	beq.n	8012b9a <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == SEPTEMBER ||
 8012b8a:	4b72      	ldr	r3, [pc, #456]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012b8c:	781b      	ldrb	r3, [r3, #0]
                        month_enum - 1 == JUNE      ||
 8012b8e:	2b0a      	cmp	r3, #10
 8012b90:	d003      	beq.n	8012b9a <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 8012b92:	4b70      	ldr	r3, [pc, #448]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012b94:	781b      	ldrb	r3, [r3, #0]
                        month_enum - 1 == SEPTEMBER ||
 8012b96:	2b0c      	cmp	r3, #12
 8012b98:	d107      	bne.n	8012baa <fm_menu_config_date_hour+0x5d2>
                        month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 8012b9a:	4b6d      	ldr	r3, [pc, #436]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	2b1e      	cmp	r3, #30
 8012ba0:	d903      	bls.n	8012baa <fm_menu_config_date_hour+0x5d2>
                        {
                            day_enum = DAY_30;
 8012ba2:	4b6b      	ldr	r3, [pc, #428]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012ba4:	221e      	movs	r2, #30
 8012ba6:	701a      	strb	r2, [r3, #0]
 8012ba8:	e024      	b.n	8012bf4 <fm_menu_config_date_hour+0x61c>
                        }
                        else if((month_enum - 1 == FEBRUARY) &&
 8012baa:	4b6a      	ldr	r3, [pc, #424]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012bac:	781b      	ldrb	r3, [r3, #0]
 8012bae:	2b03      	cmp	r3, #3
 8012bb0:	d10e      	bne.n	8012bd0 <fm_menu_config_date_hour+0x5f8>
                        (year_enum % YEAR_4 == 0) &&
 8012bb2:	4b66      	ldr	r3, [pc, #408]	; (8012d4c <fm_menu_config_date_hour+0x774>)
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	f003 0303 	and.w	r3, r3, #3
 8012bba:	b2db      	uxtb	r3, r3
                        else if((month_enum - 1 == FEBRUARY) &&
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d107      	bne.n	8012bd0 <fm_menu_config_date_hour+0x5f8>
                        (day_enum > DAY_29))
 8012bc0:	4b63      	ldr	r3, [pc, #396]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012bc2:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 == 0) &&
 8012bc4:	2b1d      	cmp	r3, #29
 8012bc6:	d903      	bls.n	8012bd0 <fm_menu_config_date_hour+0x5f8>
                        {
                            day_enum = DAY_29;
 8012bc8:	4b61      	ldr	r3, [pc, #388]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012bca:	221d      	movs	r2, #29
 8012bcc:	701a      	strb	r2, [r3, #0]
 8012bce:	e011      	b.n	8012bf4 <fm_menu_config_date_hour+0x61c>
                        }
                        else if((month_enum - 1 == FEBRUARY) &&
 8012bd0:	4b60      	ldr	r3, [pc, #384]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	2b03      	cmp	r3, #3
 8012bd6:	d10d      	bne.n	8012bf4 <fm_menu_config_date_hour+0x61c>
                        (year_enum % YEAR_4 != 0) &&
 8012bd8:	4b5c      	ldr	r3, [pc, #368]	; (8012d4c <fm_menu_config_date_hour+0x774>)
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	f003 0303 	and.w	r3, r3, #3
 8012be0:	b2db      	uxtb	r3, r3
                        else if((month_enum - 1 == FEBRUARY) &&
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d006      	beq.n	8012bf4 <fm_menu_config_date_hour+0x61c>
                        (day_enum > DAY_28))
 8012be6:	4b5a      	ldr	r3, [pc, #360]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012be8:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 != 0) &&
 8012bea:	2b1c      	cmp	r3, #28
 8012bec:	d902      	bls.n	8012bf4 <fm_menu_config_date_hour+0x61c>
                        {
                            day_enum = DAY_28;
 8012bee:	4b58      	ldr	r3, [pc, #352]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012bf0:	221c      	movs	r2, #28
 8012bf2:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum - 1,
 8012bf4:	4b56      	ldr	r3, [pc, #344]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	4b56      	ldr	r3, [pc, #344]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	3b01      	subs	r3, #1
 8012c00:	4a52      	ldr	r2, [pc, #328]	; (8012d4c <fm_menu_config_date_hour+0x774>)
 8012c02:	7812      	ldrb	r2, [r2, #0]
 8012c04:	4619      	mov	r1, r3
 8012c06:	f7fc f975 	bl	800eef4 <fm_factory_modify_date>
 8012c0a:	e094      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, DECEMBER, year_enum);
 8012c0c:	4b50      	ldr	r3, [pc, #320]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	4618      	mov	r0, r3
 8012c12:	4b4e      	ldr	r3, [pc, #312]	; (8012d4c <fm_menu_config_date_hour+0x774>)
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	461a      	mov	r2, r3
 8012c18:	210c      	movs	r1, #12
 8012c1a:	f7fc f96b 	bl	800eef4 <fm_factory_modify_date>
 8012c1e:	e08a      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == YEAR)
 8012c20:	4b4d      	ldr	r3, [pc, #308]	; (8012d58 <fm_menu_config_date_hour+0x780>)
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	2b02      	cmp	r3, #2
 8012c26:	d12c      	bne.n	8012c82 <fm_menu_config_date_hour+0x6aa>
                {
                    if(year_enum > YEAR_0)
 8012c28:	4b48      	ldr	r3, [pc, #288]	; (8012d4c <fm_menu_config_date_hour+0x774>)
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d01e      	beq.n	8012c6e <fm_menu_config_date_hour+0x696>
                    {
                        if(((year_enum - 1) % YEAR_4 != YEAR_0) &&
 8012c30:	4b46      	ldr	r3, [pc, #280]	; (8012d4c <fm_menu_config_date_hour+0x774>)
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	3b01      	subs	r3, #1
 8012c36:	f003 0303 	and.w	r3, r3, #3
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d00a      	beq.n	8012c54 <fm_menu_config_date_hour+0x67c>
                        (month_enum == FEBRUARY) &&
 8012c3e:	4b45      	ldr	r3, [pc, #276]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012c40:	781b      	ldrb	r3, [r3, #0]
                        if(((year_enum - 1) % YEAR_4 != YEAR_0) &&
 8012c42:	2b02      	cmp	r3, #2
 8012c44:	d106      	bne.n	8012c54 <fm_menu_config_date_hour+0x67c>
                        (day_enum > DAY_28))
 8012c46:	4b42      	ldr	r3, [pc, #264]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012c48:	781b      	ldrb	r3, [r3, #0]
                        (month_enum == FEBRUARY) &&
 8012c4a:	2b1c      	cmp	r3, #28
 8012c4c:	d902      	bls.n	8012c54 <fm_menu_config_date_hour+0x67c>
                        {
                            day_enum = DAY_28;
 8012c4e:	4b40      	ldr	r3, [pc, #256]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012c50:	221c      	movs	r2, #28
 8012c52:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 8012c54:	4b3e      	ldr	r3, [pc, #248]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	4618      	mov	r0, r3
 8012c5a:	4b3e      	ldr	r3, [pc, #248]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	4619      	mov	r1, r3
 8012c60:	4b3a      	ldr	r3, [pc, #232]	; (8012d4c <fm_menu_config_date_hour+0x774>)
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	3b01      	subs	r3, #1
 8012c66:	461a      	mov	r2, r3
 8012c68:	f7fc f944 	bl	800eef4 <fm_factory_modify_date>
 8012c6c:	e063      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                        year_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_99);
 8012c6e:	4b38      	ldr	r3, [pc, #224]	; (8012d50 <fm_menu_config_date_hour+0x778>)
 8012c70:	781b      	ldrb	r3, [r3, #0]
 8012c72:	4618      	mov	r0, r3
 8012c74:	4b37      	ldr	r3, [pc, #220]	; (8012d54 <fm_menu_config_date_hour+0x77c>)
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	2263      	movs	r2, #99	; 0x63
 8012c7a:	4619      	mov	r1, r3
 8012c7c:	f7fc f93a 	bl	800eef4 <fm_factory_modify_date>
 8012c80:	e059      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == HOUR)
 8012c82:	4b35      	ldr	r3, [pc, #212]	; (8012d58 <fm_menu_config_date_hour+0x780>)
 8012c84:	781b      	ldrb	r3, [r3, #0]
 8012c86:	2b03      	cmp	r3, #3
 8012c88:	d119      	bne.n	8012cbe <fm_menu_config_date_hour+0x6e6>
                {
                    if(hour_enum > HOUR_0)
 8012c8a:	4b34      	ldr	r3, [pc, #208]	; (8012d5c <fm_menu_config_date_hour+0x784>)
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d00b      	beq.n	8012caa <fm_menu_config_date_hour+0x6d2>
                    {
                        fm_factory_modify_time(hour_enum - 1, minute_enum,
 8012c92:	4b32      	ldr	r3, [pc, #200]	; (8012d5c <fm_menu_config_date_hour+0x784>)
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	3b01      	subs	r3, #1
 8012c98:	4a31      	ldr	r2, [pc, #196]	; (8012d60 <fm_menu_config_date_hour+0x788>)
 8012c9a:	7812      	ldrb	r2, [r2, #0]
 8012c9c:	4611      	mov	r1, r2
 8012c9e:	4a31      	ldr	r2, [pc, #196]	; (8012d64 <fm_menu_config_date_hour+0x78c>)
 8012ca0:	7812      	ldrb	r2, [r2, #0]
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7fc f952 	bl	800ef4c <fm_factory_modify_time>
 8012ca8:	e045      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_23, minute_enum,
 8012caa:	4b2d      	ldr	r3, [pc, #180]	; (8012d60 <fm_menu_config_date_hour+0x788>)
 8012cac:	781b      	ldrb	r3, [r3, #0]
 8012cae:	4619      	mov	r1, r3
 8012cb0:	4b2c      	ldr	r3, [pc, #176]	; (8012d64 <fm_menu_config_date_hour+0x78c>)
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	461a      	mov	r2, r3
 8012cb6:	2017      	movs	r0, #23
 8012cb8:	f7fc f948 	bl	800ef4c <fm_factory_modify_time>
 8012cbc:	e03b      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                }
                else if(field == MINUTE)
 8012cbe:	4b26      	ldr	r3, [pc, #152]	; (8012d58 <fm_menu_config_date_hour+0x780>)
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	2b04      	cmp	r3, #4
 8012cc4:	d119      	bne.n	8012cfa <fm_menu_config_date_hour+0x722>
                {
                    if(minute_enum > MINU_0)
 8012cc6:	4b26      	ldr	r3, [pc, #152]	; (8012d60 <fm_menu_config_date_hour+0x788>)
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d00b      	beq.n	8012ce6 <fm_menu_config_date_hour+0x70e>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum - 1,
 8012cce:	4b23      	ldr	r3, [pc, #140]	; (8012d5c <fm_menu_config_date_hour+0x784>)
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	4b22      	ldr	r3, [pc, #136]	; (8012d60 <fm_menu_config_date_hour+0x788>)
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	3b01      	subs	r3, #1
 8012cda:	4a22      	ldr	r2, [pc, #136]	; (8012d64 <fm_menu_config_date_hour+0x78c>)
 8012cdc:	7812      	ldrb	r2, [r2, #0]
 8012cde:	4619      	mov	r1, r3
 8012ce0:	f7fc f934 	bl	800ef4c <fm_factory_modify_time>
 8012ce4:	e027      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_59, second_enum);
 8012ce6:	4b1d      	ldr	r3, [pc, #116]	; (8012d5c <fm_menu_config_date_hour+0x784>)
 8012ce8:	781b      	ldrb	r3, [r3, #0]
 8012cea:	4618      	mov	r0, r3
 8012cec:	4b1d      	ldr	r3, [pc, #116]	; (8012d64 <fm_menu_config_date_hour+0x78c>)
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	461a      	mov	r2, r3
 8012cf2:	213b      	movs	r1, #59	; 0x3b
 8012cf4:	f7fc f92a 	bl	800ef4c <fm_factory_modify_time>
 8012cf8:	e01d      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == SECOND)
 8012cfa:	4b17      	ldr	r3, [pc, #92]	; (8012d58 <fm_menu_config_date_hour+0x780>)
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	2b05      	cmp	r3, #5
 8012d00:	d119      	bne.n	8012d36 <fm_menu_config_date_hour+0x75e>
                {
                    if(second_enum > SEC_0)
 8012d02:	4b18      	ldr	r3, [pc, #96]	; (8012d64 <fm_menu_config_date_hour+0x78c>)
 8012d04:	781b      	ldrb	r3, [r3, #0]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d00c      	beq.n	8012d24 <fm_menu_config_date_hour+0x74c>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 8012d0a:	4b14      	ldr	r3, [pc, #80]	; (8012d5c <fm_menu_config_date_hour+0x784>)
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	4618      	mov	r0, r3
 8012d10:	4b13      	ldr	r3, [pc, #76]	; (8012d60 <fm_menu_config_date_hour+0x788>)
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	4619      	mov	r1, r3
 8012d16:	4b13      	ldr	r3, [pc, #76]	; (8012d64 <fm_menu_config_date_hour+0x78c>)
 8012d18:	781b      	ldrb	r3, [r3, #0]
 8012d1a:	3b01      	subs	r3, #1
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	f7fc f915 	bl	800ef4c <fm_factory_modify_time>
 8012d22:	e008      	b.n	8012d36 <fm_menu_config_date_hour+0x75e>
                        second_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_59);
 8012d24:	4b0d      	ldr	r3, [pc, #52]	; (8012d5c <fm_menu_config_date_hour+0x784>)
 8012d26:	781b      	ldrb	r3, [r3, #0]
 8012d28:	4618      	mov	r0, r3
 8012d2a:	4b0d      	ldr	r3, [pc, #52]	; (8012d60 <fm_menu_config_date_hour+0x788>)
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	223b      	movs	r2, #59	; 0x3b
 8012d30:	4619      	mov	r1, r3
 8012d32:	f7fc f90b 	bl	800ef4c <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 8012d36:	2301      	movs	r3, #1
 8012d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012d3c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012d40:	2200      	movs	r2, #0
 8012d42:	4619      	mov	r1, r3
 8012d44:	4808      	ldr	r0, [pc, #32]	; (8012d68 <fm_menu_config_date_hour+0x790>)
 8012d46:	f7fb fadb 	bl	800e300 <_txe_queue_send>
            }
        break;
 8012d4a:	e062      	b.n	8012e12 <fm_menu_config_date_hour+0x83a>
 8012d4c:	20001dc0 	.word	0x20001dc0
 8012d50:	20001dbe 	.word	0x20001dbe
 8012d54:	20001dbf 	.word	0x20001dbf
 8012d58:	20001dbd 	.word	0x20001dbd
 8012d5c:	20001dc1 	.word	0x20001dc1
 8012d60:	20001dc2 	.word	0x20001dc2
 8012d64:	20001dc3 	.word	0x20001dc3
 8012d68:	20001388 	.word	0x20001388
        case EVENT_KEY_ENTER:
            if(correct_password)
 8012d6c:	4b5b      	ldr	r3, [pc, #364]	; (8012edc <fm_menu_config_date_hour+0x904>)
 8012d6e:	781b      	ldrb	r3, [r3, #0]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d050      	beq.n	8012e16 <fm_menu_config_date_hour+0x83e>
            {
                /*
                 * Se cambia qué parámetro se va a modificar según cual estaba
                 * seleccionado para modificarse actualmente.
                 */
                if(field == DAY)
 8012d74:	4b5a      	ldr	r3, [pc, #360]	; (8012ee0 <fm_menu_config_date_hour+0x908>)
 8012d76:	781b      	ldrb	r3, [r3, #0]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d103      	bne.n	8012d84 <fm_menu_config_date_hour+0x7ac>
                {
                    field = MONTH;
 8012d7c:	4b58      	ldr	r3, [pc, #352]	; (8012ee0 <fm_menu_config_date_hour+0x908>)
 8012d7e:	2201      	movs	r2, #1
 8012d80:	701a      	strb	r2, [r3, #0]
 8012d82:	e026      	b.n	8012dd2 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == MONTH)
 8012d84:	4b56      	ldr	r3, [pc, #344]	; (8012ee0 <fm_menu_config_date_hour+0x908>)
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	d103      	bne.n	8012d94 <fm_menu_config_date_hour+0x7bc>
                {
                    field = YEAR;
 8012d8c:	4b54      	ldr	r3, [pc, #336]	; (8012ee0 <fm_menu_config_date_hour+0x908>)
 8012d8e:	2202      	movs	r2, #2
 8012d90:	701a      	strb	r2, [r3, #0]
 8012d92:	e01e      	b.n	8012dd2 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == YEAR)
 8012d94:	4b52      	ldr	r3, [pc, #328]	; (8012ee0 <fm_menu_config_date_hour+0x908>)
 8012d96:	781b      	ldrb	r3, [r3, #0]
 8012d98:	2b02      	cmp	r3, #2
 8012d9a:	d103      	bne.n	8012da4 <fm_menu_config_date_hour+0x7cc>
                {
                    field = HOUR;
 8012d9c:	4b50      	ldr	r3, [pc, #320]	; (8012ee0 <fm_menu_config_date_hour+0x908>)
 8012d9e:	2203      	movs	r2, #3
 8012da0:	701a      	strb	r2, [r3, #0]
 8012da2:	e016      	b.n	8012dd2 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == HOUR)
 8012da4:	4b4e      	ldr	r3, [pc, #312]	; (8012ee0 <fm_menu_config_date_hour+0x908>)
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	2b03      	cmp	r3, #3
 8012daa:	d103      	bne.n	8012db4 <fm_menu_config_date_hour+0x7dc>
                {
                    field = MINUTE;
 8012dac:	4b4c      	ldr	r3, [pc, #304]	; (8012ee0 <fm_menu_config_date_hour+0x908>)
 8012dae:	2204      	movs	r2, #4
 8012db0:	701a      	strb	r2, [r3, #0]
 8012db2:	e00e      	b.n	8012dd2 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == MINUTE)
 8012db4:	4b4a      	ldr	r3, [pc, #296]	; (8012ee0 <fm_menu_config_date_hour+0x908>)
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	2b04      	cmp	r3, #4
 8012dba:	d103      	bne.n	8012dc4 <fm_menu_config_date_hour+0x7ec>
                {
                    field = SECOND;
 8012dbc:	4b48      	ldr	r3, [pc, #288]	; (8012ee0 <fm_menu_config_date_hour+0x908>)
 8012dbe:	2205      	movs	r2, #5
 8012dc0:	701a      	strb	r2, [r3, #0]
 8012dc2:	e006      	b.n	8012dd2 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == SECOND)
 8012dc4:	4b46      	ldr	r3, [pc, #280]	; (8012ee0 <fm_menu_config_date_hour+0x908>)
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	2b05      	cmp	r3, #5
 8012dca:	d102      	bne.n	8012dd2 <fm_menu_config_date_hour+0x7fa>
                {
                    field = DAY;
 8012dcc:	4b44      	ldr	r3, [pc, #272]	; (8012ee0 <fm_menu_config_date_hour+0x908>)
 8012dce:	2200      	movs	r2, #0
 8012dd0:	701a      	strb	r2, [r3, #0]
                }
                event_now = EVENT_LCD_REFRESH;
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012dd8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012ddc:	2200      	movs	r2, #0
 8012dde:	4619      	mov	r1, r3
 8012de0:	4840      	ldr	r0, [pc, #256]	; (8012ee4 <fm_menu_config_date_hour+0x90c>)
 8012de2:	f7fb fa8d 	bl	800e300 <_txe_queue_send>
            }
        break;
 8012de6:	e016      	b.n	8012e16 <fm_menu_config_date_hour+0x83e>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8012de8:	4b3f      	ldr	r3, [pc, #252]	; (8012ee8 <fm_menu_config_date_hour+0x910>)
 8012dea:	2201      	movs	r2, #1
 8012dec:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8012dee:	4b3f      	ldr	r3, [pc, #252]	; (8012eec <fm_menu_config_date_hour+0x914>)
 8012df0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            event_now = EVENT_LCD_REFRESH;
 8012df4:	2301      	movs	r3, #1
 8012df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012dfa:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012dfe:	2200      	movs	r2, #0
 8012e00:	4619      	mov	r1, r3
 8012e02:	4838      	ldr	r0, [pc, #224]	; (8012ee4 <fm_menu_config_date_hour+0x90c>)
 8012e04:	f7fb fa7c 	bl	800e300 <_txe_queue_send>
        break;
 8012e08:	e006      	b.n	8012e18 <fm_menu_config_date_hour+0x840>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8012e0a:	bf00      	nop
 8012e0c:	e004      	b.n	8012e18 <fm_menu_config_date_hour+0x840>
        break;
 8012e0e:	bf00      	nop
 8012e10:	e002      	b.n	8012e18 <fm_menu_config_date_hour+0x840>
        break;
 8012e12:	bf00      	nop
 8012e14:	e000      	b.n	8012e18 <fm_menu_config_date_hour+0x840>
        break;
 8012e16:	bf00      	nop
    }

    previous_event = event_id;
 8012e18:	4a35      	ldr	r2, [pc, #212]	; (8012ef0 <fm_menu_config_date_hour+0x918>)
 8012e1a:	79fb      	ldrb	r3, [r7, #7]
 8012e1c:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar fecha y hora\n";
 8012e1e:	4b35      	ldr	r3, [pc, #212]	; (8012ef4 <fm_menu_config_date_hour+0x91c>)
 8012e20:	f107 0408 	add.w	r4, r7, #8
 8012e24:	461d      	mov	r5, r3
 8012e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012e2e:	c403      	stmia	r4!, {r0, r1}
 8012e30:	7022      	strb	r2, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8012e32:	f107 0308 	add.w	r3, r7, #8
 8012e36:	2119      	movs	r1, #25
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7fb fe9d 	bl	800eb78 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8012e3e:	4b2a      	ldr	r3, [pc, #168]	; (8012ee8 <fm_menu_config_date_hour+0x910>)
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	2b01      	cmp	r3, #1
 8012e44:	d143      	bne.n	8012ece <fm_menu_config_date_hour+0x8f6>
    {
        if(correct_password)
 8012e46:	4b25      	ldr	r3, [pc, #148]	; (8012edc <fm_menu_config_date_hour+0x904>)
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d036      	beq.n	8012ebc <fm_menu_config_date_hour+0x8e4>
             * encuentren corrompidos y se lea cualquier cosa. Para mas info de
             * esto ver el link siguiente:
             *
             * http://www.efton.sk/STM32/gotcha/g113.html
             */
            date_final.Date = day_enum;
 8012e4e:	4b2a      	ldr	r3, [pc, #168]	; (8012ef8 <fm_menu_config_date_hour+0x920>)
 8012e50:	781b      	ldrb	r3, [r3, #0]
 8012e52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            date_final.Month = month_enum;
 8012e56:	4b29      	ldr	r3, [pc, #164]	; (8012efc <fm_menu_config_date_hour+0x924>)
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            date_final.Year = year_enum;
 8012e5e:	4b28      	ldr	r3, [pc, #160]	; (8012f00 <fm_menu_config_date_hour+0x928>)
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            date_final.WeekDay = RTC_WEEKDAY_FRIDAY;
 8012e66:	2305      	movs	r3, #5
 8012e68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            HAL_RTC_SetDate(&hrtc, &date_final, RTC_FORMAT_BIN);
 8012e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012e70:	2200      	movs	r2, #0
 8012e72:	4619      	mov	r1, r3
 8012e74:	4823      	ldr	r0, [pc, #140]	; (8012f04 <fm_menu_config_date_hour+0x92c>)
 8012e76:	f7f6 f8db 	bl	8009030 <HAL_RTC_SetDate>

            /*
             * Idem que lo de la fecha escrito arriba, pero para la hora, y en
             * general siempre que se use la HAL completando estructuras.
             */
            time_final.Hours = hour_enum;
 8012e7a:	4b23      	ldr	r3, [pc, #140]	; (8012f08 <fm_menu_config_date_hour+0x930>)
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            time_final.Minutes = minute_enum;
 8012e82:	4b22      	ldr	r3, [pc, #136]	; (8012f0c <fm_menu_config_date_hour+0x934>)
 8012e84:	781b      	ldrb	r3, [r3, #0]
 8012e86:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            time_final.Seconds = second_enum;
 8012e8a:	4b21      	ldr	r3, [pc, #132]	; (8012f10 <fm_menu_config_date_hour+0x938>)
 8012e8c:	781b      	ldrb	r3, [r3, #0]
 8012e8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            time_final.SecondFraction = 0;
 8012e92:	2300      	movs	r3, #0
 8012e94:	633b      	str	r3, [r7, #48]	; 0x30
            time_final.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012e96:	2300      	movs	r3, #0
 8012e98:	637b      	str	r3, [r7, #52]	; 0x34
            time_final.StoreOperation = RTC_STOREOPERATION_RESET;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	63bb      	str	r3, [r7, #56]	; 0x38
            time_final.SubSeconds = 0;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
            time_final.TimeFormat = RTC_HOURFORMAT12_AM;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            HAL_RTC_SetTime(&hrtc, &time_final, RTC_FORMAT_BIN);
 8012ea8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012eac:	2200      	movs	r2, #0
 8012eae:	4619      	mov	r1, r3
 8012eb0:	4814      	ldr	r0, [pc, #80]	; (8012f04 <fm_menu_config_date_hour+0x92c>)
 8012eb2:	f7f5 ffaf 	bl	8008e14 <HAL_RTC_SetTime>

            correct_password = 0;
 8012eb6:	4b09      	ldr	r3, [pc, #36]	; (8012edc <fm_menu_config_date_hour+0x904>)
 8012eb8:	2200      	movs	r2, #0
 8012eba:	701a      	strb	r2, [r3, #0]
        }
        in_configuration = 0;
 8012ebc:	4b15      	ldr	r3, [pc, #84]	; (8012f14 <fm_menu_config_date_hour+0x93c>)
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8012ec2:	4b15      	ldr	r3, [pc, #84]	; (8012f18 <fm_menu_config_date_hour+0x940>)
 8012ec4:	2201      	movs	r2, #1
 8012ec6:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8012ec8:	4b07      	ldr	r3, [pc, #28]	; (8012ee8 <fm_menu_config_date_hour+0x910>)
 8012eca:	2200      	movs	r2, #0
 8012ecc:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8012ece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
}
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	37d0      	adds	r7, #208	; 0xd0
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8012eda:	bf00      	nop
 8012edc:	20001dba 	.word	0x20001dba
 8012ee0:	20001dbd 	.word	0x20001dbd
 8012ee4:	20001388 	.word	0x20001388
 8012ee8:	20001dc4 	.word	0x20001dc4
 8012eec:	08014521 	.word	0x08014521
 8012ef0:	20001dbb 	.word	0x20001dbb
 8012ef4:	08015784 	.word	0x08015784
 8012ef8:	20001dbe 	.word	0x20001dbe
 8012efc:	20001dbf 	.word	0x20001dbf
 8012f00:	20001dc0 	.word	0x20001dc0
 8012f04:	200014a4 	.word	0x200014a4
 8012f08:	20001dc1 	.word	0x20001dc1
 8012f0c:	20001dc2 	.word	0x20001dc2
 8012f10:	20001dc3 	.word	0x20001dc3
 8012f14:	20001dbc 	.word	0x20001dbc
 8012f18:	20000141 	.word	0x20000141

08012f1c <fm_menu_config_k_lin_1>:

    return (ret_menu);
}

ptr_ret_menu_t fm_menu_config_k_lin_1(fm_event_t event_id)
{
 8012f1c:	b5b0      	push	{r4, r5, r7, lr}
 8012f1e:	b08c      	sub	sp, #48	; 0x30
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	4603      	mov	r3, r0
 8012f24:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 8012f26:	4b51      	ldr	r3, [pc, #324]	; (801306c <fm_menu_config_k_lin_1+0x150>)
 8012f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8012f2a:	4b51      	ldr	r3, [pc, #324]	; (8013070 <fm_menu_config_k_lin_1+0x154>)
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	2b01      	cmp	r3, #1
 8012f30:	d104      	bne.n	8012f3c <fm_menu_config_k_lin_1+0x20>
    {
        fm_lcd_clear();
 8012f32:	f7fc fcc0 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 8012f36:	4b4e      	ldr	r3, [pc, #312]	; (8013070 <fm_menu_config_k_lin_1+0x154>)
 8012f38:	2200      	movs	r2, #0
 8012f3a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_1, event_id, digit_lin_modify);
 8012f3c:	4b4d      	ldr	r3, [pc, #308]	; (8013074 <fm_menu_config_k_lin_1+0x158>)
 8012f3e:	781a      	ldrb	r2, [r3, #0]
 8012f40:	79fb      	ldrb	r3, [r7, #7]
 8012f42:	4619      	mov	r1, r3
 8012f44:	2001      	movs	r0, #1
 8012f46:	f7fc ff33 	bl	800fdb0 <fm_lcd_k_lin>
    fm_lcd_refresh();
 8012f4a:	f7fd f84a 	bl	800ffe2 <fm_lcd_refresh>

    switch (event_id)
 8012f4e:	79fb      	ldrb	r3, [r7, #7]
 8012f50:	3b01      	subs	r3, #1
 8012f52:	2b04      	cmp	r3, #4
 8012f54:	d863      	bhi.n	801301e <fm_menu_config_k_lin_1+0x102>
 8012f56:	a201      	add	r2, pc, #4	; (adr r2, 8012f5c <fm_menu_config_k_lin_1+0x40>)
 8012f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f5c:	0801301f 	.word	0x0801301f
 8012f60:	08012f71 	.word	0x08012f71
 8012f64:	08012f9b 	.word	0x08012f9b
 8012f68:	08012fc5 	.word	0x08012fc5
 8012f6c:	08012fff 	.word	0x08012fff
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8012f70:	4b41      	ldr	r3, [pc, #260]	; (8013078 <fm_menu_config_k_lin_1+0x15c>)
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d005      	beq.n	8012f84 <fm_menu_config_k_lin_1+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_1);
 8012f78:	4b3e      	ldr	r3, [pc, #248]	; (8013074 <fm_menu_config_k_lin_1+0x158>)
 8012f7a:	781b      	ldrb	r3, [r3, #0]
 8012f7c:	2101      	movs	r1, #1
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7fc f88c 	bl	800f09c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8012f84:	2301      	movs	r3, #1
 8012f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012f8a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012f8e:	2200      	movs	r2, #0
 8012f90:	4619      	mov	r1, r3
 8012f92:	483a      	ldr	r0, [pc, #232]	; (801307c <fm_menu_config_k_lin_1+0x160>)
 8012f94:	f7fb f9b4 	bl	800e300 <_txe_queue_send>
        break;
 8012f98:	e042      	b.n	8013020 <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8012f9a:	4b37      	ldr	r3, [pc, #220]	; (8013078 <fm_menu_config_k_lin_1+0x15c>)
 8012f9c:	781b      	ldrb	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d005      	beq.n	8012fae <fm_menu_config_k_lin_1+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_1);
 8012fa2:	4b34      	ldr	r3, [pc, #208]	; (8013074 <fm_menu_config_k_lin_1+0x158>)
 8012fa4:	781b      	ldrb	r3, [r3, #0]
 8012fa6:	2101      	movs	r1, #1
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7fc f963 	bl	800f274 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8012fae:	2301      	movs	r3, #1
 8012fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012fb4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012fb8:	2200      	movs	r2, #0
 8012fba:	4619      	mov	r1, r3
 8012fbc:	482f      	ldr	r0, [pc, #188]	; (801307c <fm_menu_config_k_lin_1+0x160>)
 8012fbe:	f7fb f99f 	bl	800e300 <_txe_queue_send>
        break;
 8012fc2:	e02d      	b.n	8013020 <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8012fc4:	4b2c      	ldr	r3, [pc, #176]	; (8013078 <fm_menu_config_k_lin_1+0x15c>)
 8012fc6:	781b      	ldrb	r3, [r3, #0]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d00d      	beq.n	8012fe8 <fm_menu_config_k_lin_1+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 8012fcc:	4b29      	ldr	r3, [pc, #164]	; (8013074 <fm_menu_config_k_lin_1+0x158>)
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	2b0a      	cmp	r3, #10
 8012fd2:	d806      	bhi.n	8012fe2 <fm_menu_config_k_lin_1+0xc6>
                {
                    digit_lin_modify++;
 8012fd4:	4b27      	ldr	r3, [pc, #156]	; (8013074 <fm_menu_config_k_lin_1+0x158>)
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	3301      	adds	r3, #1
 8012fda:	b2da      	uxtb	r2, r3
 8012fdc:	4b25      	ldr	r3, [pc, #148]	; (8013074 <fm_menu_config_k_lin_1+0x158>)
 8012fde:	701a      	strb	r2, [r3, #0]
 8012fe0:	e002      	b.n	8012fe8 <fm_menu_config_k_lin_1+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8012fe2:	4b24      	ldr	r3, [pc, #144]	; (8013074 <fm_menu_config_k_lin_1+0x158>)
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8012fe8:	2301      	movs	r3, #1
 8012fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012fee:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	4619      	mov	r1, r3
 8012ff6:	4821      	ldr	r0, [pc, #132]	; (801307c <fm_menu_config_k_lin_1+0x160>)
 8012ff8:	f7fb f982 	bl	800e300 <_txe_queue_send>
        break;
 8012ffc:	e010      	b.n	8013020 <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8012ffe:	4b20      	ldr	r3, [pc, #128]	; (8013080 <fm_menu_config_k_lin_1+0x164>)
 8013000:	2201      	movs	r2, #1
 8013002:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 8013004:	4b1f      	ldr	r3, [pc, #124]	; (8013084 <fm_menu_config_k_lin_1+0x168>)
 8013006:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8013008:	2301      	movs	r3, #1
 801300a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801300e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013012:	2200      	movs	r2, #0
 8013014:	4619      	mov	r1, r3
 8013016:	4819      	ldr	r0, [pc, #100]	; (801307c <fm_menu_config_k_lin_1+0x160>)
 8013018:	f7fb f972 	bl	800e300 <_txe_queue_send>
        break;
 801301c:	e000      	b.n	8013020 <fm_menu_config_k_lin_1+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801301e:	bf00      	nop
    }

    previous_event = event_id;
 8013020:	4a19      	ldr	r2, [pc, #100]	; (8013088 <fm_menu_config_k_lin_1+0x16c>)
 8013022:	79fb      	ldrb	r3, [r7, #7]
 8013024:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_1\n";
 8013026:	4b19      	ldr	r3, [pc, #100]	; (801308c <fm_menu_config_k_lin_1+0x170>)
 8013028:	f107 040c 	add.w	r4, r7, #12
 801302c:	461d      	mov	r5, r3
 801302e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013032:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013036:	c407      	stmia	r4!, {r0, r1, r2}
 8013038:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801303a:	f107 030c 	add.w	r3, r7, #12
 801303e:	211e      	movs	r1, #30
 8013040:	4618      	mov	r0, r3
 8013042:	f7fb fd99 	bl	800eb78 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8013046:	4b0e      	ldr	r3, [pc, #56]	; (8013080 <fm_menu_config_k_lin_1+0x164>)
 8013048:	781b      	ldrb	r3, [r3, #0]
 801304a:	2b01      	cmp	r3, #1
 801304c:	d108      	bne.n	8013060 <fm_menu_config_k_lin_1+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 801304e:	4b09      	ldr	r3, [pc, #36]	; (8013074 <fm_menu_config_k_lin_1+0x158>)
 8013050:	2200      	movs	r2, #0
 8013052:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013054:	4b06      	ldr	r3, [pc, #24]	; (8013070 <fm_menu_config_k_lin_1+0x154>)
 8013056:	2201      	movs	r2, #1
 8013058:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801305a:	4b09      	ldr	r3, [pc, #36]	; (8013080 <fm_menu_config_k_lin_1+0x164>)
 801305c:	2200      	movs	r2, #0
 801305e:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013062:	4618      	mov	r0, r3
 8013064:	3730      	adds	r7, #48	; 0x30
 8013066:	46bd      	mov	sp, r7
 8013068:	bdb0      	pop	{r4, r5, r7, pc}
 801306a:	bf00      	nop
 801306c:	08012f1d 	.word	0x08012f1d
 8013070:	20000142 	.word	0x20000142
 8013074:	20001dc5 	.word	0x20001dc5
 8013078:	20001dba 	.word	0x20001dba
 801307c:	20001388 	.word	0x20001388
 8013080:	20001dc6 	.word	0x20001dc6
 8013084:	08013091 	.word	0x08013091
 8013088:	20001dbb 	.word	0x20001dbb
 801308c:	080157c0 	.word	0x080157c0

08013090 <fm_menu_config_k_lin_2>:

ptr_ret_menu_t fm_menu_config_k_lin_2(fm_event_t event_id)
{
 8013090:	b5b0      	push	{r4, r5, r7, lr}
 8013092:	b08c      	sub	sp, #48	; 0x30
 8013094:	af00      	add	r7, sp, #0
 8013096:	4603      	mov	r3, r0
 8013098:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 801309a:	4b51      	ldr	r3, [pc, #324]	; (80131e0 <fm_menu_config_k_lin_2+0x150>)
 801309c:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 801309e:	4b51      	ldr	r3, [pc, #324]	; (80131e4 <fm_menu_config_k_lin_2+0x154>)
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	d104      	bne.n	80130b0 <fm_menu_config_k_lin_2+0x20>
    {
        fm_lcd_clear();
 80130a6:	f7fc fc06 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 80130aa:	4b4e      	ldr	r3, [pc, #312]	; (80131e4 <fm_menu_config_k_lin_2+0x154>)
 80130ac:	2200      	movs	r2, #0
 80130ae:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_2, event_id, digit_lin_modify);
 80130b0:	4b4d      	ldr	r3, [pc, #308]	; (80131e8 <fm_menu_config_k_lin_2+0x158>)
 80130b2:	781a      	ldrb	r2, [r3, #0]
 80130b4:	79fb      	ldrb	r3, [r7, #7]
 80130b6:	4619      	mov	r1, r3
 80130b8:	2002      	movs	r0, #2
 80130ba:	f7fc fe79 	bl	800fdb0 <fm_lcd_k_lin>
    fm_lcd_refresh();
 80130be:	f7fc ff90 	bl	800ffe2 <fm_lcd_refresh>

    switch (event_id)
 80130c2:	79fb      	ldrb	r3, [r7, #7]
 80130c4:	3b01      	subs	r3, #1
 80130c6:	2b04      	cmp	r3, #4
 80130c8:	d863      	bhi.n	8013192 <fm_menu_config_k_lin_2+0x102>
 80130ca:	a201      	add	r2, pc, #4	; (adr r2, 80130d0 <fm_menu_config_k_lin_2+0x40>)
 80130cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130d0:	08013193 	.word	0x08013193
 80130d4:	080130e5 	.word	0x080130e5
 80130d8:	0801310f 	.word	0x0801310f
 80130dc:	08013139 	.word	0x08013139
 80130e0:	08013173 	.word	0x08013173
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80130e4:	4b41      	ldr	r3, [pc, #260]	; (80131ec <fm_menu_config_k_lin_2+0x15c>)
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d005      	beq.n	80130f8 <fm_menu_config_k_lin_2+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_2);
 80130ec:	4b3e      	ldr	r3, [pc, #248]	; (80131e8 <fm_menu_config_k_lin_2+0x158>)
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	2102      	movs	r1, #2
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7fb ffd2 	bl	800f09c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80130f8:	2301      	movs	r3, #1
 80130fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80130fe:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013102:	2200      	movs	r2, #0
 8013104:	4619      	mov	r1, r3
 8013106:	483a      	ldr	r0, [pc, #232]	; (80131f0 <fm_menu_config_k_lin_2+0x160>)
 8013108:	f7fb f8fa 	bl	800e300 <_txe_queue_send>
        break;
 801310c:	e042      	b.n	8013194 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 801310e:	4b37      	ldr	r3, [pc, #220]	; (80131ec <fm_menu_config_k_lin_2+0x15c>)
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d005      	beq.n	8013122 <fm_menu_config_k_lin_2+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_2);
 8013116:	4b34      	ldr	r3, [pc, #208]	; (80131e8 <fm_menu_config_k_lin_2+0x158>)
 8013118:	781b      	ldrb	r3, [r3, #0]
 801311a:	2102      	movs	r1, #2
 801311c:	4618      	mov	r0, r3
 801311e:	f7fc f8a9 	bl	800f274 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013122:	2301      	movs	r3, #1
 8013124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013128:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801312c:	2200      	movs	r2, #0
 801312e:	4619      	mov	r1, r3
 8013130:	482f      	ldr	r0, [pc, #188]	; (80131f0 <fm_menu_config_k_lin_2+0x160>)
 8013132:	f7fb f8e5 	bl	800e300 <_txe_queue_send>
        break;
 8013136:	e02d      	b.n	8013194 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013138:	4b2c      	ldr	r3, [pc, #176]	; (80131ec <fm_menu_config_k_lin_2+0x15c>)
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d00d      	beq.n	801315c <fm_menu_config_k_lin_2+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 8013140:	4b29      	ldr	r3, [pc, #164]	; (80131e8 <fm_menu_config_k_lin_2+0x158>)
 8013142:	781b      	ldrb	r3, [r3, #0]
 8013144:	2b0a      	cmp	r3, #10
 8013146:	d806      	bhi.n	8013156 <fm_menu_config_k_lin_2+0xc6>
                {
                    digit_lin_modify++;
 8013148:	4b27      	ldr	r3, [pc, #156]	; (80131e8 <fm_menu_config_k_lin_2+0x158>)
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	3301      	adds	r3, #1
 801314e:	b2da      	uxtb	r2, r3
 8013150:	4b25      	ldr	r3, [pc, #148]	; (80131e8 <fm_menu_config_k_lin_2+0x158>)
 8013152:	701a      	strb	r2, [r3, #0]
 8013154:	e002      	b.n	801315c <fm_menu_config_k_lin_2+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8013156:	4b24      	ldr	r3, [pc, #144]	; (80131e8 <fm_menu_config_k_lin_2+0x158>)
 8013158:	2200      	movs	r2, #0
 801315a:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 801315c:	2301      	movs	r3, #1
 801315e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013162:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013166:	2200      	movs	r2, #0
 8013168:	4619      	mov	r1, r3
 801316a:	4821      	ldr	r0, [pc, #132]	; (80131f0 <fm_menu_config_k_lin_2+0x160>)
 801316c:	f7fb f8c8 	bl	800e300 <_txe_queue_send>
        break;
 8013170:	e010      	b.n	8013194 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013172:	4b20      	ldr	r3, [pc, #128]	; (80131f4 <fm_menu_config_k_lin_2+0x164>)
 8013174:	2201      	movs	r2, #1
 8013176:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 8013178:	4b1f      	ldr	r3, [pc, #124]	; (80131f8 <fm_menu_config_k_lin_2+0x168>)
 801317a:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 801317c:	2301      	movs	r3, #1
 801317e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013182:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013186:	2200      	movs	r2, #0
 8013188:	4619      	mov	r1, r3
 801318a:	4819      	ldr	r0, [pc, #100]	; (80131f0 <fm_menu_config_k_lin_2+0x160>)
 801318c:	f7fb f8b8 	bl	800e300 <_txe_queue_send>
        break;
 8013190:	e000      	b.n	8013194 <fm_menu_config_k_lin_2+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013192:	bf00      	nop
    }

    previous_event = event_id;
 8013194:	4a19      	ldr	r2, [pc, #100]	; (80131fc <fm_menu_config_k_lin_2+0x16c>)
 8013196:	79fb      	ldrb	r3, [r7, #7]
 8013198:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_2\n";
 801319a:	4b19      	ldr	r3, [pc, #100]	; (8013200 <fm_menu_config_k_lin_2+0x170>)
 801319c:	f107 040c 	add.w	r4, r7, #12
 80131a0:	461d      	mov	r5, r3
 80131a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80131a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80131aa:	c407      	stmia	r4!, {r0, r1, r2}
 80131ac:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80131ae:	f107 030c 	add.w	r3, r7, #12
 80131b2:	211e      	movs	r1, #30
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7fb fcdf 	bl	800eb78 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 80131ba:	4b0e      	ldr	r3, [pc, #56]	; (80131f4 <fm_menu_config_k_lin_2+0x164>)
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	2b01      	cmp	r3, #1
 80131c0:	d108      	bne.n	80131d4 <fm_menu_config_k_lin_2+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 80131c2:	4b09      	ldr	r3, [pc, #36]	; (80131e8 <fm_menu_config_k_lin_2+0x158>)
 80131c4:	2200      	movs	r2, #0
 80131c6:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80131c8:	4b06      	ldr	r3, [pc, #24]	; (80131e4 <fm_menu_config_k_lin_2+0x154>)
 80131ca:	2201      	movs	r2, #1
 80131cc:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80131ce:	4b09      	ldr	r3, [pc, #36]	; (80131f4 <fm_menu_config_k_lin_2+0x164>)
 80131d0:	2200      	movs	r2, #0
 80131d2:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80131d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3730      	adds	r7, #48	; 0x30
 80131da:	46bd      	mov	sp, r7
 80131dc:	bdb0      	pop	{r4, r5, r7, pc}
 80131de:	bf00      	nop
 80131e0:	08013091 	.word	0x08013091
 80131e4:	20000143 	.word	0x20000143
 80131e8:	20001dc7 	.word	0x20001dc7
 80131ec:	20001dba 	.word	0x20001dba
 80131f0:	20001388 	.word	0x20001388
 80131f4:	20001dc8 	.word	0x20001dc8
 80131f8:	08013205 	.word	0x08013205
 80131fc:	20001dbb 	.word	0x20001dbb
 8013200:	080157e0 	.word	0x080157e0

08013204 <fm_menu_config_k_lin_3>:

ptr_ret_menu_t fm_menu_config_k_lin_3(fm_event_t event_id)
{
 8013204:	b5b0      	push	{r4, r5, r7, lr}
 8013206:	b08c      	sub	sp, #48	; 0x30
 8013208:	af00      	add	r7, sp, #0
 801320a:	4603      	mov	r3, r0
 801320c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 801320e:	4b51      	ldr	r3, [pc, #324]	; (8013354 <fm_menu_config_k_lin_3+0x150>)
 8013210:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8013212:	4b51      	ldr	r3, [pc, #324]	; (8013358 <fm_menu_config_k_lin_3+0x154>)
 8013214:	781b      	ldrb	r3, [r3, #0]
 8013216:	2b01      	cmp	r3, #1
 8013218:	d104      	bne.n	8013224 <fm_menu_config_k_lin_3+0x20>
    {
        fm_lcd_clear();
 801321a:	f7fc fb4c 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 801321e:	4b4e      	ldr	r3, [pc, #312]	; (8013358 <fm_menu_config_k_lin_3+0x154>)
 8013220:	2200      	movs	r2, #0
 8013222:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_3, event_id, digit_lin_modify);
 8013224:	4b4d      	ldr	r3, [pc, #308]	; (801335c <fm_menu_config_k_lin_3+0x158>)
 8013226:	781a      	ldrb	r2, [r3, #0]
 8013228:	79fb      	ldrb	r3, [r7, #7]
 801322a:	4619      	mov	r1, r3
 801322c:	2003      	movs	r0, #3
 801322e:	f7fc fdbf 	bl	800fdb0 <fm_lcd_k_lin>
    fm_lcd_refresh();
 8013232:	f7fc fed6 	bl	800ffe2 <fm_lcd_refresh>

    switch (event_id)
 8013236:	79fb      	ldrb	r3, [r7, #7]
 8013238:	3b01      	subs	r3, #1
 801323a:	2b04      	cmp	r3, #4
 801323c:	d863      	bhi.n	8013306 <fm_menu_config_k_lin_3+0x102>
 801323e:	a201      	add	r2, pc, #4	; (adr r2, 8013244 <fm_menu_config_k_lin_3+0x40>)
 8013240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013244:	08013307 	.word	0x08013307
 8013248:	08013259 	.word	0x08013259
 801324c:	08013283 	.word	0x08013283
 8013250:	080132ad 	.word	0x080132ad
 8013254:	080132e7 	.word	0x080132e7
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013258:	4b41      	ldr	r3, [pc, #260]	; (8013360 <fm_menu_config_k_lin_3+0x15c>)
 801325a:	781b      	ldrb	r3, [r3, #0]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d005      	beq.n	801326c <fm_menu_config_k_lin_3+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_3);
 8013260:	4b3e      	ldr	r3, [pc, #248]	; (801335c <fm_menu_config_k_lin_3+0x158>)
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	2103      	movs	r1, #3
 8013266:	4618      	mov	r0, r3
 8013268:	f7fb ff18 	bl	800f09c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 801326c:	2301      	movs	r3, #1
 801326e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013272:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013276:	2200      	movs	r2, #0
 8013278:	4619      	mov	r1, r3
 801327a:	483a      	ldr	r0, [pc, #232]	; (8013364 <fm_menu_config_k_lin_3+0x160>)
 801327c:	f7fb f840 	bl	800e300 <_txe_queue_send>
        break;
 8013280:	e042      	b.n	8013308 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013282:	4b37      	ldr	r3, [pc, #220]	; (8013360 <fm_menu_config_k_lin_3+0x15c>)
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d005      	beq.n	8013296 <fm_menu_config_k_lin_3+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_3);
 801328a:	4b34      	ldr	r3, [pc, #208]	; (801335c <fm_menu_config_k_lin_3+0x158>)
 801328c:	781b      	ldrb	r3, [r3, #0]
 801328e:	2103      	movs	r1, #3
 8013290:	4618      	mov	r0, r3
 8013292:	f7fb ffef 	bl	800f274 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013296:	2301      	movs	r3, #1
 8013298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801329c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80132a0:	2200      	movs	r2, #0
 80132a2:	4619      	mov	r1, r3
 80132a4:	482f      	ldr	r0, [pc, #188]	; (8013364 <fm_menu_config_k_lin_3+0x160>)
 80132a6:	f7fb f82b 	bl	800e300 <_txe_queue_send>
        break;
 80132aa:	e02d      	b.n	8013308 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80132ac:	4b2c      	ldr	r3, [pc, #176]	; (8013360 <fm_menu_config_k_lin_3+0x15c>)
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d00d      	beq.n	80132d0 <fm_menu_config_k_lin_3+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 80132b4:	4b29      	ldr	r3, [pc, #164]	; (801335c <fm_menu_config_k_lin_3+0x158>)
 80132b6:	781b      	ldrb	r3, [r3, #0]
 80132b8:	2b0a      	cmp	r3, #10
 80132ba:	d806      	bhi.n	80132ca <fm_menu_config_k_lin_3+0xc6>
                {
                    digit_lin_modify++;
 80132bc:	4b27      	ldr	r3, [pc, #156]	; (801335c <fm_menu_config_k_lin_3+0x158>)
 80132be:	781b      	ldrb	r3, [r3, #0]
 80132c0:	3301      	adds	r3, #1
 80132c2:	b2da      	uxtb	r2, r3
 80132c4:	4b25      	ldr	r3, [pc, #148]	; (801335c <fm_menu_config_k_lin_3+0x158>)
 80132c6:	701a      	strb	r2, [r3, #0]
 80132c8:	e002      	b.n	80132d0 <fm_menu_config_k_lin_3+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 80132ca:	4b24      	ldr	r3, [pc, #144]	; (801335c <fm_menu_config_k_lin_3+0x158>)
 80132cc:	2200      	movs	r2, #0
 80132ce:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80132d0:	2301      	movs	r3, #1
 80132d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80132d6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80132da:	2200      	movs	r2, #0
 80132dc:	4619      	mov	r1, r3
 80132de:	4821      	ldr	r0, [pc, #132]	; (8013364 <fm_menu_config_k_lin_3+0x160>)
 80132e0:	f7fb f80e 	bl	800e300 <_txe_queue_send>
        break;
 80132e4:	e010      	b.n	8013308 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80132e6:	4b20      	ldr	r3, [pc, #128]	; (8013368 <fm_menu_config_k_lin_3+0x164>)
 80132e8:	2201      	movs	r2, #1
 80132ea:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 80132ec:	4b1f      	ldr	r3, [pc, #124]	; (801336c <fm_menu_config_k_lin_3+0x168>)
 80132ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 80132f0:	2301      	movs	r3, #1
 80132f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80132f6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80132fa:	2200      	movs	r2, #0
 80132fc:	4619      	mov	r1, r3
 80132fe:	4819      	ldr	r0, [pc, #100]	; (8013364 <fm_menu_config_k_lin_3+0x160>)
 8013300:	f7fa fffe 	bl	800e300 <_txe_queue_send>
        break;
 8013304:	e000      	b.n	8013308 <fm_menu_config_k_lin_3+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013306:	bf00      	nop
    }

    previous_event = event_id;
 8013308:	4a19      	ldr	r2, [pc, #100]	; (8013370 <fm_menu_config_k_lin_3+0x16c>)
 801330a:	79fb      	ldrb	r3, [r7, #7]
 801330c:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_3\n";
 801330e:	4b19      	ldr	r3, [pc, #100]	; (8013374 <fm_menu_config_k_lin_3+0x170>)
 8013310:	f107 040c 	add.w	r4, r7, #12
 8013314:	461d      	mov	r5, r3
 8013316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801331a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801331e:	c407      	stmia	r4!, {r0, r1, r2}
 8013320:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013322:	f107 030c 	add.w	r3, r7, #12
 8013326:	211e      	movs	r1, #30
 8013328:	4618      	mov	r0, r3
 801332a:	f7fb fc25 	bl	800eb78 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 801332e:	4b0e      	ldr	r3, [pc, #56]	; (8013368 <fm_menu_config_k_lin_3+0x164>)
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	2b01      	cmp	r3, #1
 8013334:	d108      	bne.n	8013348 <fm_menu_config_k_lin_3+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 8013336:	4b09      	ldr	r3, [pc, #36]	; (801335c <fm_menu_config_k_lin_3+0x158>)
 8013338:	2200      	movs	r2, #0
 801333a:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801333c:	4b06      	ldr	r3, [pc, #24]	; (8013358 <fm_menu_config_k_lin_3+0x154>)
 801333e:	2201      	movs	r2, #1
 8013340:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013342:	4b09      	ldr	r3, [pc, #36]	; (8013368 <fm_menu_config_k_lin_3+0x164>)
 8013344:	2200      	movs	r2, #0
 8013346:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801334a:	4618      	mov	r0, r3
 801334c:	3730      	adds	r7, #48	; 0x30
 801334e:	46bd      	mov	sp, r7
 8013350:	bdb0      	pop	{r4, r5, r7, pc}
 8013352:	bf00      	nop
 8013354:	08013205 	.word	0x08013205
 8013358:	20000144 	.word	0x20000144
 801335c:	20001dc9 	.word	0x20001dc9
 8013360:	20001dba 	.word	0x20001dba
 8013364:	20001388 	.word	0x20001388
 8013368:	20001dca 	.word	0x20001dca
 801336c:	08013379 	.word	0x08013379
 8013370:	20001dbb 	.word	0x20001dbb
 8013374:	08015800 	.word	0x08015800

08013378 <fm_menu_config_k_lin_4>:

ptr_ret_menu_t fm_menu_config_k_lin_4(fm_event_t event_id)
{
 8013378:	b5b0      	push	{r4, r5, r7, lr}
 801337a:	b08c      	sub	sp, #48	; 0x30
 801337c:	af00      	add	r7, sp, #0
 801337e:	4603      	mov	r3, r0
 8013380:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 8013382:	4b51      	ldr	r3, [pc, #324]	; (80134c8 <fm_menu_config_k_lin_4+0x150>)
 8013384:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8013386:	4b51      	ldr	r3, [pc, #324]	; (80134cc <fm_menu_config_k_lin_4+0x154>)
 8013388:	781b      	ldrb	r3, [r3, #0]
 801338a:	2b01      	cmp	r3, #1
 801338c:	d104      	bne.n	8013398 <fm_menu_config_k_lin_4+0x20>
    {
        fm_lcd_clear();
 801338e:	f7fc fa92 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 8013392:	4b4e      	ldr	r3, [pc, #312]	; (80134cc <fm_menu_config_k_lin_4+0x154>)
 8013394:	2200      	movs	r2, #0
 8013396:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_4, event_id, digit_lin_modify);
 8013398:	4b4d      	ldr	r3, [pc, #308]	; (80134d0 <fm_menu_config_k_lin_4+0x158>)
 801339a:	781a      	ldrb	r2, [r3, #0]
 801339c:	79fb      	ldrb	r3, [r7, #7]
 801339e:	4619      	mov	r1, r3
 80133a0:	2004      	movs	r0, #4
 80133a2:	f7fc fd05 	bl	800fdb0 <fm_lcd_k_lin>
    fm_lcd_refresh();
 80133a6:	f7fc fe1c 	bl	800ffe2 <fm_lcd_refresh>

    switch (event_id)
 80133aa:	79fb      	ldrb	r3, [r7, #7]
 80133ac:	3b01      	subs	r3, #1
 80133ae:	2b04      	cmp	r3, #4
 80133b0:	d863      	bhi.n	801347a <fm_menu_config_k_lin_4+0x102>
 80133b2:	a201      	add	r2, pc, #4	; (adr r2, 80133b8 <fm_menu_config_k_lin_4+0x40>)
 80133b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133b8:	0801347b 	.word	0x0801347b
 80133bc:	080133cd 	.word	0x080133cd
 80133c0:	080133f7 	.word	0x080133f7
 80133c4:	08013421 	.word	0x08013421
 80133c8:	0801345b 	.word	0x0801345b
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80133cc:	4b41      	ldr	r3, [pc, #260]	; (80134d4 <fm_menu_config_k_lin_4+0x15c>)
 80133ce:	781b      	ldrb	r3, [r3, #0]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d005      	beq.n	80133e0 <fm_menu_config_k_lin_4+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_4);
 80133d4:	4b3e      	ldr	r3, [pc, #248]	; (80134d0 <fm_menu_config_k_lin_4+0x158>)
 80133d6:	781b      	ldrb	r3, [r3, #0]
 80133d8:	2104      	movs	r1, #4
 80133da:	4618      	mov	r0, r3
 80133dc:	f7fb fe5e 	bl	800f09c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80133e0:	2301      	movs	r3, #1
 80133e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80133e6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80133ea:	2200      	movs	r2, #0
 80133ec:	4619      	mov	r1, r3
 80133ee:	483a      	ldr	r0, [pc, #232]	; (80134d8 <fm_menu_config_k_lin_4+0x160>)
 80133f0:	f7fa ff86 	bl	800e300 <_txe_queue_send>
        break;
 80133f4:	e042      	b.n	801347c <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80133f6:	4b37      	ldr	r3, [pc, #220]	; (80134d4 <fm_menu_config_k_lin_4+0x15c>)
 80133f8:	781b      	ldrb	r3, [r3, #0]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d005      	beq.n	801340a <fm_menu_config_k_lin_4+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_4);
 80133fe:	4b34      	ldr	r3, [pc, #208]	; (80134d0 <fm_menu_config_k_lin_4+0x158>)
 8013400:	781b      	ldrb	r3, [r3, #0]
 8013402:	2104      	movs	r1, #4
 8013404:	4618      	mov	r0, r3
 8013406:	f7fb ff35 	bl	800f274 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801340a:	2301      	movs	r3, #1
 801340c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013410:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013414:	2200      	movs	r2, #0
 8013416:	4619      	mov	r1, r3
 8013418:	482f      	ldr	r0, [pc, #188]	; (80134d8 <fm_menu_config_k_lin_4+0x160>)
 801341a:	f7fa ff71 	bl	800e300 <_txe_queue_send>
        break;
 801341e:	e02d      	b.n	801347c <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013420:	4b2c      	ldr	r3, [pc, #176]	; (80134d4 <fm_menu_config_k_lin_4+0x15c>)
 8013422:	781b      	ldrb	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d00d      	beq.n	8013444 <fm_menu_config_k_lin_4+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 8013428:	4b29      	ldr	r3, [pc, #164]	; (80134d0 <fm_menu_config_k_lin_4+0x158>)
 801342a:	781b      	ldrb	r3, [r3, #0]
 801342c:	2b0a      	cmp	r3, #10
 801342e:	d806      	bhi.n	801343e <fm_menu_config_k_lin_4+0xc6>
                {
                    digit_lin_modify++;
 8013430:	4b27      	ldr	r3, [pc, #156]	; (80134d0 <fm_menu_config_k_lin_4+0x158>)
 8013432:	781b      	ldrb	r3, [r3, #0]
 8013434:	3301      	adds	r3, #1
 8013436:	b2da      	uxtb	r2, r3
 8013438:	4b25      	ldr	r3, [pc, #148]	; (80134d0 <fm_menu_config_k_lin_4+0x158>)
 801343a:	701a      	strb	r2, [r3, #0]
 801343c:	e002      	b.n	8013444 <fm_menu_config_k_lin_4+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801343e:	4b24      	ldr	r3, [pc, #144]	; (80134d0 <fm_menu_config_k_lin_4+0x158>)
 8013440:	2200      	movs	r2, #0
 8013442:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013444:	2301      	movs	r3, #1
 8013446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801344a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801344e:	2200      	movs	r2, #0
 8013450:	4619      	mov	r1, r3
 8013452:	4821      	ldr	r0, [pc, #132]	; (80134d8 <fm_menu_config_k_lin_4+0x160>)
 8013454:	f7fa ff54 	bl	800e300 <_txe_queue_send>
        break;
 8013458:	e010      	b.n	801347c <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801345a:	4b20      	ldr	r3, [pc, #128]	; (80134dc <fm_menu_config_k_lin_4+0x164>)
 801345c:	2201      	movs	r2, #1
 801345e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 8013460:	4b1f      	ldr	r3, [pc, #124]	; (80134e0 <fm_menu_config_k_lin_4+0x168>)
 8013462:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8013464:	2301      	movs	r3, #1
 8013466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801346a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801346e:	2200      	movs	r2, #0
 8013470:	4619      	mov	r1, r3
 8013472:	4819      	ldr	r0, [pc, #100]	; (80134d8 <fm_menu_config_k_lin_4+0x160>)
 8013474:	f7fa ff44 	bl	800e300 <_txe_queue_send>
        break;
 8013478:	e000      	b.n	801347c <fm_menu_config_k_lin_4+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801347a:	bf00      	nop
    }

    previous_event = event_id;
 801347c:	4a19      	ldr	r2, [pc, #100]	; (80134e4 <fm_menu_config_k_lin_4+0x16c>)
 801347e:	79fb      	ldrb	r3, [r7, #7]
 8013480:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_4\n";
 8013482:	4b19      	ldr	r3, [pc, #100]	; (80134e8 <fm_menu_config_k_lin_4+0x170>)
 8013484:	f107 040c 	add.w	r4, r7, #12
 8013488:	461d      	mov	r5, r3
 801348a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801348c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801348e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013492:	c407      	stmia	r4!, {r0, r1, r2}
 8013494:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013496:	f107 030c 	add.w	r3, r7, #12
 801349a:	211e      	movs	r1, #30
 801349c:	4618      	mov	r0, r3
 801349e:	f7fb fb6b 	bl	800eb78 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 80134a2:	4b0e      	ldr	r3, [pc, #56]	; (80134dc <fm_menu_config_k_lin_4+0x164>)
 80134a4:	781b      	ldrb	r3, [r3, #0]
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d108      	bne.n	80134bc <fm_menu_config_k_lin_4+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 80134aa:	4b09      	ldr	r3, [pc, #36]	; (80134d0 <fm_menu_config_k_lin_4+0x158>)
 80134ac:	2200      	movs	r2, #0
 80134ae:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80134b0:	4b06      	ldr	r3, [pc, #24]	; (80134cc <fm_menu_config_k_lin_4+0x154>)
 80134b2:	2201      	movs	r2, #1
 80134b4:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80134b6:	4b09      	ldr	r3, [pc, #36]	; (80134dc <fm_menu_config_k_lin_4+0x164>)
 80134b8:	2200      	movs	r2, #0
 80134ba:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80134bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80134be:	4618      	mov	r0, r3
 80134c0:	3730      	adds	r7, #48	; 0x30
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bdb0      	pop	{r4, r5, r7, pc}
 80134c6:	bf00      	nop
 80134c8:	08013379 	.word	0x08013379
 80134cc:	20000145 	.word	0x20000145
 80134d0:	20001dcb 	.word	0x20001dcb
 80134d4:	20001dba 	.word	0x20001dba
 80134d8:	20001388 	.word	0x20001388
 80134dc:	20001dcc 	.word	0x20001dcc
 80134e0:	080134ed 	.word	0x080134ed
 80134e4:	20001dbb 	.word	0x20001dbb
 80134e8:	08015820 	.word	0x08015820

080134ec <fm_menu_config_k_lin_5>:

ptr_ret_menu_t fm_menu_config_k_lin_5(fm_event_t event_id)
{
 80134ec:	b5b0      	push	{r4, r5, r7, lr}
 80134ee:	b08c      	sub	sp, #48	; 0x30
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	4603      	mov	r3, r0
 80134f4:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 80134f6:	4b52      	ldr	r3, [pc, #328]	; (8013640 <fm_menu_config_k_lin_5+0x154>)
 80134f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 80134fa:	4b52      	ldr	r3, [pc, #328]	; (8013644 <fm_menu_config_k_lin_5+0x158>)
 80134fc:	781b      	ldrb	r3, [r3, #0]
 80134fe:	2b01      	cmp	r3, #1
 8013500:	d104      	bne.n	801350c <fm_menu_config_k_lin_5+0x20>
    {
        fm_lcd_clear();
 8013502:	f7fc f9d8 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 8013506:	4b4f      	ldr	r3, [pc, #316]	; (8013644 <fm_menu_config_k_lin_5+0x158>)
 8013508:	2200      	movs	r2, #0
 801350a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_5, event_id, digit_lin_modify);
 801350c:	4b4e      	ldr	r3, [pc, #312]	; (8013648 <fm_menu_config_k_lin_5+0x15c>)
 801350e:	781a      	ldrb	r2, [r3, #0]
 8013510:	79fb      	ldrb	r3, [r7, #7]
 8013512:	4619      	mov	r1, r3
 8013514:	2005      	movs	r0, #5
 8013516:	f7fc fc4b 	bl	800fdb0 <fm_lcd_k_lin>
    fm_lcd_refresh();
 801351a:	f7fc fd62 	bl	800ffe2 <fm_lcd_refresh>

    switch (event_id)
 801351e:	79fb      	ldrb	r3, [r7, #7]
 8013520:	3b01      	subs	r3, #1
 8013522:	2b04      	cmp	r3, #4
 8013524:	d866      	bhi.n	80135f4 <fm_menu_config_k_lin_5+0x108>
 8013526:	a201      	add	r2, pc, #4	; (adr r2, 801352c <fm_menu_config_k_lin_5+0x40>)
 8013528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801352c:	080135f5 	.word	0x080135f5
 8013530:	08013541 	.word	0x08013541
 8013534:	0801356b 	.word	0x0801356b
 8013538:	08013595 	.word	0x08013595
 801353c:	080135cf 	.word	0x080135cf
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013540:	4b42      	ldr	r3, [pc, #264]	; (801364c <fm_menu_config_k_lin_5+0x160>)
 8013542:	781b      	ldrb	r3, [r3, #0]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d005      	beq.n	8013554 <fm_menu_config_k_lin_5+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_5);
 8013548:	4b3f      	ldr	r3, [pc, #252]	; (8013648 <fm_menu_config_k_lin_5+0x15c>)
 801354a:	781b      	ldrb	r3, [r3, #0]
 801354c:	2105      	movs	r1, #5
 801354e:	4618      	mov	r0, r3
 8013550:	f7fb fda4 	bl	800f09c <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013554:	2301      	movs	r3, #1
 8013556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801355a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801355e:	2200      	movs	r2, #0
 8013560:	4619      	mov	r1, r3
 8013562:	483b      	ldr	r0, [pc, #236]	; (8013650 <fm_menu_config_k_lin_5+0x164>)
 8013564:	f7fa fecc 	bl	800e300 <_txe_queue_send>
        break;
 8013568:	e045      	b.n	80135f6 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_DOWN:
            if (correct_password)
 801356a:	4b38      	ldr	r3, [pc, #224]	; (801364c <fm_menu_config_k_lin_5+0x160>)
 801356c:	781b      	ldrb	r3, [r3, #0]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d005      	beq.n	801357e <fm_menu_config_k_lin_5+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_5);
 8013572:	4b35      	ldr	r3, [pc, #212]	; (8013648 <fm_menu_config_k_lin_5+0x15c>)
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	2105      	movs	r1, #5
 8013578:	4618      	mov	r0, r3
 801357a:	f7fb fe7b 	bl	800f274 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801357e:	2301      	movs	r3, #1
 8013580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013584:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013588:	2200      	movs	r2, #0
 801358a:	4619      	mov	r1, r3
 801358c:	4830      	ldr	r0, [pc, #192]	; (8013650 <fm_menu_config_k_lin_5+0x164>)
 801358e:	f7fa feb7 	bl	800e300 <_txe_queue_send>
        break;
 8013592:	e030      	b.n	80135f6 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013594:	4b2d      	ldr	r3, [pc, #180]	; (801364c <fm_menu_config_k_lin_5+0x160>)
 8013596:	781b      	ldrb	r3, [r3, #0]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d00d      	beq.n	80135b8 <fm_menu_config_k_lin_5+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 801359c:	4b2a      	ldr	r3, [pc, #168]	; (8013648 <fm_menu_config_k_lin_5+0x15c>)
 801359e:	781b      	ldrb	r3, [r3, #0]
 80135a0:	2b0a      	cmp	r3, #10
 80135a2:	d806      	bhi.n	80135b2 <fm_menu_config_k_lin_5+0xc6>
                {
                    digit_lin_modify++;
 80135a4:	4b28      	ldr	r3, [pc, #160]	; (8013648 <fm_menu_config_k_lin_5+0x15c>)
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	3301      	adds	r3, #1
 80135aa:	b2da      	uxtb	r2, r3
 80135ac:	4b26      	ldr	r3, [pc, #152]	; (8013648 <fm_menu_config_k_lin_5+0x15c>)
 80135ae:	701a      	strb	r2, [r3, #0]
 80135b0:	e002      	b.n	80135b8 <fm_menu_config_k_lin_5+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 80135b2:	4b25      	ldr	r3, [pc, #148]	; (8013648 <fm_menu_config_k_lin_5+0x15c>)
 80135b4:	2200      	movs	r2, #0
 80135b6:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80135b8:	2301      	movs	r3, #1
 80135ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80135be:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80135c2:	2200      	movs	r2, #0
 80135c4:	4619      	mov	r1, r3
 80135c6:	4822      	ldr	r0, [pc, #136]	; (8013650 <fm_menu_config_k_lin_5+0x164>)
 80135c8:	f7fa fe9a 	bl	800e300 <_txe_queue_send>
        break;
 80135cc:	e013      	b.n	80135f6 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_KEY_ESC:
            correct_password = 0;
 80135ce:	4b1f      	ldr	r3, [pc, #124]	; (801364c <fm_menu_config_k_lin_5+0x160>)
 80135d0:	2200      	movs	r2, #0
 80135d2:	701a      	strb	r2, [r3, #0]
            new_exit = 1;
 80135d4:	4b1f      	ldr	r3, [pc, #124]	; (8013654 <fm_menu_config_k_lin_5+0x168>)
 80135d6:	2201      	movs	r2, #1
 80135d8:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 80135da:	4b1f      	ldr	r3, [pc, #124]	; (8013658 <fm_menu_config_k_lin_5+0x16c>)
 80135dc:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 80135de:	2301      	movs	r3, #1
 80135e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80135e4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80135e8:	2200      	movs	r2, #0
 80135ea:	4619      	mov	r1, r3
 80135ec:	4818      	ldr	r0, [pc, #96]	; (8013650 <fm_menu_config_k_lin_5+0x164>)
 80135ee:	f7fa fe87 	bl	800e300 <_txe_queue_send>
        break;
 80135f2:	e000      	b.n	80135f6 <fm_menu_config_k_lin_5+0x10a>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80135f4:	bf00      	nop
    }

    previous_event = event_id;
 80135f6:	4a19      	ldr	r2, [pc, #100]	; (801365c <fm_menu_config_k_lin_5+0x170>)
 80135f8:	79fb      	ldrb	r3, [r7, #7]
 80135fa:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_5\n";
 80135fc:	4b18      	ldr	r3, [pc, #96]	; (8013660 <fm_menu_config_k_lin_5+0x174>)
 80135fe:	f107 040c 	add.w	r4, r7, #12
 8013602:	461d      	mov	r5, r3
 8013604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013608:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801360c:	c407      	stmia	r4!, {r0, r1, r2}
 801360e:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013610:	f107 030c 	add.w	r3, r7, #12
 8013614:	211e      	movs	r1, #30
 8013616:	4618      	mov	r0, r3
 8013618:	f7fb faae 	bl	800eb78 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 801361c:	4b0d      	ldr	r3, [pc, #52]	; (8013654 <fm_menu_config_k_lin_5+0x168>)
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	2b01      	cmp	r3, #1
 8013622:	d108      	bne.n	8013636 <fm_menu_config_k_lin_5+0x14a>
    {
        digit_lin_modify = DIG_LIN_0;
 8013624:	4b08      	ldr	r3, [pc, #32]	; (8013648 <fm_menu_config_k_lin_5+0x15c>)
 8013626:	2200      	movs	r2, #0
 8013628:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801362a:	4b06      	ldr	r3, [pc, #24]	; (8013644 <fm_menu_config_k_lin_5+0x158>)
 801362c:	2201      	movs	r2, #1
 801362e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013630:	4b08      	ldr	r3, [pc, #32]	; (8013654 <fm_menu_config_k_lin_5+0x168>)
 8013632:	2200      	movs	r2, #0
 8013634:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013638:	4618      	mov	r0, r3
 801363a:	3730      	adds	r7, #48	; 0x30
 801363c:	46bd      	mov	sp, r7
 801363e:	bdb0      	pop	{r4, r5, r7, pc}
 8013640:	080134ed 	.word	0x080134ed
 8013644:	20000146 	.word	0x20000146
 8013648:	20001dcd 	.word	0x20001dcd
 801364c:	20001dba 	.word	0x20001dba
 8013650:	20001388 	.word	0x20001388
 8013654:	20001dce 	.word	0x20001dce
 8013658:	08014521 	.word	0x08014521
 801365c:	20001dbb 	.word	0x20001dbb
 8013660:	08015840 	.word	0x08015840

08013664 <fm_menu_config_k_param>:
 * K.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_param(fm_event_t event_id)
{
 8013664:	b5b0      	push	{r4, r5, r7, lr}
 8013666:	b08a      	sub	sp, #40	; 0x28
 8013668:	af00      	add	r7, sp, #0
 801366a:	4603      	mov	r3, r0
 801366c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_t digit_modify = DIG_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 801366e:	4b69      	ldr	r3, [pc, #420]	; (8013814 <fm_menu_config_k_param+0x1b0>)
 8013670:	627b      	str	r3, [r7, #36]	; 0x24
    fm_event_t event_now;

    if (new_entry == 1)
 8013672:	4b69      	ldr	r3, [pc, #420]	; (8013818 <fm_menu_config_k_param+0x1b4>)
 8013674:	781b      	ldrb	r3, [r3, #0]
 8013676:	2b01      	cmp	r3, #1
 8013678:	d104      	bne.n	8013684 <fm_menu_config_k_param+0x20>
    {
        fm_lcd_clear();
 801367a:	f7fc f91c 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 801367e:	4b66      	ldr	r3, [pc, #408]	; (8013818 <fm_menu_config_k_param+0x1b4>)
 8013680:	2200      	movs	r2, #0
 8013682:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_factor(event_id, digit_modify);
 8013684:	4b65      	ldr	r3, [pc, #404]	; (801381c <fm_menu_config_k_param+0x1b8>)
 8013686:	781a      	ldrb	r2, [r3, #0]
 8013688:	79fb      	ldrb	r3, [r7, #7]
 801368a:	4611      	mov	r1, r2
 801368c:	4618      	mov	r0, r3
 801368e:	f7fc fb1d 	bl	800fccc <fm_lcd_k_factor>
    fm_lcd_refresh();
 8013692:	f7fc fca6 	bl	800ffe2 <fm_lcd_refresh>

    switch (event_id)
 8013696:	79fb      	ldrb	r3, [r7, #7]
 8013698:	3b01      	subs	r3, #1
 801369a:	2b04      	cmp	r3, #4
 801369c:	f200 8094 	bhi.w	80137c8 <fm_menu_config_k_param+0x164>
 80136a0:	a201      	add	r2, pc, #4	; (adr r2, 80136a8 <fm_menu_config_k_param+0x44>)
 80136a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136a6:	bf00      	nop
 80136a8:	080137c9 	.word	0x080137c9
 80136ac:	080136bd 	.word	0x080136bd
 80136b0:	080136e5 	.word	0x080136e5
 80136b4:	0801370d 	.word	0x0801370d
 80136b8:	080137a9 	.word	0x080137a9
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80136bc:	4b58      	ldr	r3, [pc, #352]	; (8013820 <fm_menu_config_k_param+0x1bc>)
 80136be:	781b      	ldrb	r3, [r3, #0]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d004      	beq.n	80136ce <fm_menu_config_k_param+0x6a>
            {
                fm_factory_modify_k_factor_add(digit_modify);
 80136c4:	4b55      	ldr	r3, [pc, #340]	; (801381c <fm_menu_config_k_param+0x1b8>)
 80136c6:	781b      	ldrb	r3, [r3, #0]
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7fb fc67 	bl	800ef9c <fm_factory_modify_k_factor_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80136ce:	2301      	movs	r3, #1
 80136d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136d4:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80136d8:	2200      	movs	r2, #0
 80136da:	4619      	mov	r1, r3
 80136dc:	4851      	ldr	r0, [pc, #324]	; (8013824 <fm_menu_config_k_param+0x1c0>)
 80136de:	f7fa fe0f 	bl	800e300 <_txe_queue_send>
        break;
 80136e2:	e072      	b.n	80137ca <fm_menu_config_k_param+0x166>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80136e4:	4b4e      	ldr	r3, [pc, #312]	; (8013820 <fm_menu_config_k_param+0x1bc>)
 80136e6:	781b      	ldrb	r3, [r3, #0]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d004      	beq.n	80136f6 <fm_menu_config_k_param+0x92>
            {
                fm_factory_modify_k_factor_subs(digit_modify);
 80136ec:	4b4b      	ldr	r3, [pc, #300]	; (801381c <fm_menu_config_k_param+0x1b8>)
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7fb fc93 	bl	800f01c <fm_factory_modify_k_factor_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 80136f6:	2301      	movs	r3, #1
 80136f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136fc:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013700:	2200      	movs	r2, #0
 8013702:	4619      	mov	r1, r3
 8013704:	4847      	ldr	r0, [pc, #284]	; (8013824 <fm_menu_config_k_param+0x1c0>)
 8013706:	f7fa fdfb 	bl	800e300 <_txe_queue_send>
        break;
 801370a:	e05e      	b.n	80137ca <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ENTER:
            if (correct_password)
 801370c:	4b44      	ldr	r3, [pc, #272]	; (8013820 <fm_menu_config_k_param+0x1bc>)
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d03e      	beq.n	8013792 <fm_menu_config_k_param+0x12e>
            {
                if (digit_modify == DIG_0)
 8013714:	4b41      	ldr	r3, [pc, #260]	; (801381c <fm_menu_config_k_param+0x1b8>)
 8013716:	781b      	ldrb	r3, [r3, #0]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d103      	bne.n	8013724 <fm_menu_config_k_param+0xc0>
                {
                    digit_modify = DIG_1;
 801371c:	4b3f      	ldr	r3, [pc, #252]	; (801381c <fm_menu_config_k_param+0x1b8>)
 801371e:	2201      	movs	r2, #1
 8013720:	701a      	strb	r2, [r3, #0]
 8013722:	e036      	b.n	8013792 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_1)
 8013724:	4b3d      	ldr	r3, [pc, #244]	; (801381c <fm_menu_config_k_param+0x1b8>)
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	2b01      	cmp	r3, #1
 801372a:	d103      	bne.n	8013734 <fm_menu_config_k_param+0xd0>
                {
                    digit_modify = DIG_2;
 801372c:	4b3b      	ldr	r3, [pc, #236]	; (801381c <fm_menu_config_k_param+0x1b8>)
 801372e:	2202      	movs	r2, #2
 8013730:	701a      	strb	r2, [r3, #0]
 8013732:	e02e      	b.n	8013792 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_2)
 8013734:	4b39      	ldr	r3, [pc, #228]	; (801381c <fm_menu_config_k_param+0x1b8>)
 8013736:	781b      	ldrb	r3, [r3, #0]
 8013738:	2b02      	cmp	r3, #2
 801373a:	d103      	bne.n	8013744 <fm_menu_config_k_param+0xe0>
                {
                    digit_modify = DIG_3;
 801373c:	4b37      	ldr	r3, [pc, #220]	; (801381c <fm_menu_config_k_param+0x1b8>)
 801373e:	2203      	movs	r2, #3
 8013740:	701a      	strb	r2, [r3, #0]
 8013742:	e026      	b.n	8013792 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_3)
 8013744:	4b35      	ldr	r3, [pc, #212]	; (801381c <fm_menu_config_k_param+0x1b8>)
 8013746:	781b      	ldrb	r3, [r3, #0]
 8013748:	2b03      	cmp	r3, #3
 801374a:	d103      	bne.n	8013754 <fm_menu_config_k_param+0xf0>
                {
                    digit_modify = DIG_4;
 801374c:	4b33      	ldr	r3, [pc, #204]	; (801381c <fm_menu_config_k_param+0x1b8>)
 801374e:	2204      	movs	r2, #4
 8013750:	701a      	strb	r2, [r3, #0]
 8013752:	e01e      	b.n	8013792 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_4)
 8013754:	4b31      	ldr	r3, [pc, #196]	; (801381c <fm_menu_config_k_param+0x1b8>)
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	2b04      	cmp	r3, #4
 801375a:	d103      	bne.n	8013764 <fm_menu_config_k_param+0x100>
                {
                    digit_modify = DIG_5;
 801375c:	4b2f      	ldr	r3, [pc, #188]	; (801381c <fm_menu_config_k_param+0x1b8>)
 801375e:	2205      	movs	r2, #5
 8013760:	701a      	strb	r2, [r3, #0]
 8013762:	e016      	b.n	8013792 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_5)
 8013764:	4b2d      	ldr	r3, [pc, #180]	; (801381c <fm_menu_config_k_param+0x1b8>)
 8013766:	781b      	ldrb	r3, [r3, #0]
 8013768:	2b05      	cmp	r3, #5
 801376a:	d103      	bne.n	8013774 <fm_menu_config_k_param+0x110>
                {
                    digit_modify = DIG_6;
 801376c:	4b2b      	ldr	r3, [pc, #172]	; (801381c <fm_menu_config_k_param+0x1b8>)
 801376e:	2206      	movs	r2, #6
 8013770:	701a      	strb	r2, [r3, #0]
 8013772:	e00e      	b.n	8013792 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_6)
 8013774:	4b29      	ldr	r3, [pc, #164]	; (801381c <fm_menu_config_k_param+0x1b8>)
 8013776:	781b      	ldrb	r3, [r3, #0]
 8013778:	2b06      	cmp	r3, #6
 801377a:	d103      	bne.n	8013784 <fm_menu_config_k_param+0x120>
                {
                    digit_modify = DIG_7;
 801377c:	4b27      	ldr	r3, [pc, #156]	; (801381c <fm_menu_config_k_param+0x1b8>)
 801377e:	2207      	movs	r2, #7
 8013780:	701a      	strb	r2, [r3, #0]
 8013782:	e006      	b.n	8013792 <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_7)
 8013784:	4b25      	ldr	r3, [pc, #148]	; (801381c <fm_menu_config_k_param+0x1b8>)
 8013786:	781b      	ldrb	r3, [r3, #0]
 8013788:	2b07      	cmp	r3, #7
 801378a:	d102      	bne.n	8013792 <fm_menu_config_k_param+0x12e>
                {
                    digit_modify = DIG_0;
 801378c:	4b23      	ldr	r3, [pc, #140]	; (801381c <fm_menu_config_k_param+0x1b8>)
 801378e:	2200      	movs	r2, #0
 8013790:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013792:	2301      	movs	r3, #1
 8013794:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013798:	f107 0323 	add.w	r3, r7, #35	; 0x23
 801379c:	2200      	movs	r2, #0
 801379e:	4619      	mov	r1, r3
 80137a0:	4820      	ldr	r0, [pc, #128]	; (8013824 <fm_menu_config_k_param+0x1c0>)
 80137a2:	f7fa fdad 	bl	800e300 <_txe_queue_send>
        break;
 80137a6:	e010      	b.n	80137ca <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80137a8:	4b1f      	ldr	r3, [pc, #124]	; (8013828 <fm_menu_config_k_param+0x1c4>)
 80137aa:	2201      	movs	r2, #1
 80137ac:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 80137ae:	4b1f      	ldr	r3, [pc, #124]	; (801382c <fm_menu_config_k_param+0x1c8>)
 80137b0:	627b      	str	r3, [r7, #36]	; 0x24
            event_now = EVENT_LCD_REFRESH;
 80137b2:	2301      	movs	r3, #1
 80137b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80137b8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80137bc:	2200      	movs	r2, #0
 80137be:	4619      	mov	r1, r3
 80137c0:	4818      	ldr	r0, [pc, #96]	; (8013824 <fm_menu_config_k_param+0x1c0>)
 80137c2:	f7fa fd9d 	bl	800e300 <_txe_queue_send>
        break;
 80137c6:	e000      	b.n	80137ca <fm_menu_config_k_param+0x166>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80137c8:	bf00      	nop
    }

    previous_event = event_id;
 80137ca:	4a19      	ldr	r2, [pc, #100]	; (8013830 <fm_menu_config_k_param+0x1cc>)
 80137cc:	79fb      	ldrb	r3, [r7, #7]
 80137ce:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K\n";
 80137d0:	4b18      	ldr	r3, [pc, #96]	; (8013834 <fm_menu_config_k_param+0x1d0>)
 80137d2:	f107 0408 	add.w	r4, r7, #8
 80137d6:	461d      	mov	r5, r3
 80137d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80137da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80137dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80137e0:	e884 0003 	stmia.w	r4, {r0, r1}
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80137e4:	f107 0308 	add.w	r3, r7, #8
 80137e8:	2118      	movs	r1, #24
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7fb f9c4 	bl	800eb78 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 80137f0:	4b0d      	ldr	r3, [pc, #52]	; (8013828 <fm_menu_config_k_param+0x1c4>)
 80137f2:	781b      	ldrb	r3, [r3, #0]
 80137f4:	2b01      	cmp	r3, #1
 80137f6:	d108      	bne.n	801380a <fm_menu_config_k_param+0x1a6>
    {
        digit_modify = DIG_0;
 80137f8:	4b08      	ldr	r3, [pc, #32]	; (801381c <fm_menu_config_k_param+0x1b8>)
 80137fa:	2200      	movs	r2, #0
 80137fc:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80137fe:	4b06      	ldr	r3, [pc, #24]	; (8013818 <fm_menu_config_k_param+0x1b4>)
 8013800:	2201      	movs	r2, #1
 8013802:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013804:	4b08      	ldr	r3, [pc, #32]	; (8013828 <fm_menu_config_k_param+0x1c4>)
 8013806:	2200      	movs	r2, #0
 8013808:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801380c:	4618      	mov	r0, r3
 801380e:	3728      	adds	r7, #40	; 0x28
 8013810:	46bd      	mov	sp, r7
 8013812:	bdb0      	pop	{r4, r5, r7, pc}
 8013814:	08013665 	.word	0x08013665
 8013818:	20000147 	.word	0x20000147
 801381c:	20001dcf 	.word	0x20001dcf
 8013820:	20001dba 	.word	0x20001dba
 8013824:	20001388 	.word	0x20001388
 8013828:	20001dd0 	.word	0x20001dd0
 801382c:	08012f1d 	.word	0x08012f1d
 8013830:	20001dbb 	.word	0x20001dbb
 8013834:	08015860 	.word	0x08015860

08013838 <fm_menu_config_pass>:
 * almacenada en memoria (DOWN -> UP -> UP -> ENTER).
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_pass(fm_event_t event_id)
{
 8013838:	b5b0      	push	{r4, r5, r7, lr}
 801383a:	b086      	sub	sp, #24
 801383c:	af00      	add	r7, sp, #0
 801383e:	4603      	mov	r3, r0
 8013840:	71fb      	strb	r3, [r7, #7]
        0,
        0
    };
    static uint8_t password_index = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013842:	4ba7      	ldr	r3, [pc, #668]	; (8013ae0 <fm_menu_config_pass+0x2a8>)
 8013844:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8013846:	4ba7      	ldr	r3, [pc, #668]	; (8013ae4 <fm_menu_config_pass+0x2ac>)
 8013848:	781b      	ldrb	r3, [r3, #0]
 801384a:	2b01      	cmp	r3, #1
 801384c:	d10a      	bne.n	8013864 <fm_menu_config_pass+0x2c>
    {
        in_configuration = 1;
 801384e:	4ba6      	ldr	r3, [pc, #664]	; (8013ae8 <fm_menu_config_pass+0x2b0>)
 8013850:	2201      	movs	r2, #1
 8013852:	701a      	strb	r2, [r3, #0]
        correct_password = 0;
 8013854:	4ba5      	ldr	r3, [pc, #660]	; (8013aec <fm_menu_config_pass+0x2b4>)
 8013856:	2200      	movs	r2, #0
 8013858:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 801385a:	f7fc f82c 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 801385e:	4ba1      	ldr	r3, [pc, #644]	; (8013ae4 <fm_menu_config_pass+0x2ac>)
 8013860:	2200      	movs	r2, #0
 8013862:	701a      	strb	r2, [r3, #0]
    }

    lcd_set_symbol(PASS, 0x00);
 8013864:	2100      	movs	r1, #0
 8013866:	200a      	movs	r0, #10
 8013868:	f7fd fee0 	bl	801162c <lcd_set_symbol>
    /*
     * Cada vez que se introduce un dígito de la contraseña, aparece un 8 nuevo
     * en la pantalla, hasta 3 veces (luego de la cuarta vez, se pasa al menú
     * de configuración del factor K).
     */
    if (password_index == 1)
 801386c:	4ba0      	ldr	r3, [pc, #640]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 801386e:	781b      	ldrb	r3, [r3, #0]
 8013870:	2b01      	cmp	r3, #1
 8013872:	d104      	bne.n	801387e <fm_menu_config_pass+0x46>
    {
        lcd_set_symbol(PASS1, 0x00);
 8013874:	2100      	movs	r1, #0
 8013876:	200d      	movs	r0, #13
 8013878:	f7fd fed8 	bl	801162c <lcd_set_symbol>
 801387c:	e010      	b.n	80138a0 <fm_menu_config_pass+0x68>
    }
    else if (password_index == 2)
 801387e:	4b9c      	ldr	r3, [pc, #624]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 8013880:	781b      	ldrb	r3, [r3, #0]
 8013882:	2b02      	cmp	r3, #2
 8013884:	d104      	bne.n	8013890 <fm_menu_config_pass+0x58>
    {
        lcd_set_symbol(PASS2, 0x00);
 8013886:	2100      	movs	r1, #0
 8013888:	200e      	movs	r0, #14
 801388a:	f7fd fecf 	bl	801162c <lcd_set_symbol>
 801388e:	e007      	b.n	80138a0 <fm_menu_config_pass+0x68>
    }
    else if (password_index == PASSWORD_LENGTH - 1)
 8013890:	4b97      	ldr	r3, [pc, #604]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 8013892:	781b      	ldrb	r3, [r3, #0]
 8013894:	2b03      	cmp	r3, #3
 8013896:	d103      	bne.n	80138a0 <fm_menu_config_pass+0x68>
    {
        lcd_set_symbol(PASS3, 0x00);
 8013898:	2100      	movs	r1, #0
 801389a:	200f      	movs	r0, #15
 801389c:	f7fd fec6 	bl	801162c <lcd_set_symbol>
    }
    fm_lcd_refresh();
 80138a0:	f7fc fb9f 	bl	800ffe2 <fm_lcd_refresh>

    switch (event_id)
 80138a4:	79fb      	ldrb	r3, [r7, #7]
 80138a6:	3b01      	subs	r3, #1
 80138a8:	2b04      	cmp	r3, #4
 80138aa:	f200 8085 	bhi.w	80139b8 <fm_menu_config_pass+0x180>
 80138ae:	a201      	add	r2, pc, #4	; (adr r2, 80138b4 <fm_menu_config_pass+0x7c>)
 80138b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138b4:	080139b9 	.word	0x080139b9
 80138b8:	080138c9 	.word	0x080138c9
 80138bc:	08013905 	.word	0x08013905
 80138c0:	08013941 	.word	0x08013941
 80138c4:	0801397d 	.word	0x0801397d
    {
        case EVENT_KEY_UP:
            password[password_index] = 1;
 80138c8:	4b89      	ldr	r3, [pc, #548]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 80138ca:	781b      	ldrb	r3, [r3, #0]
 80138cc:	461a      	mov	r2, r3
 80138ce:	4b89      	ldr	r3, [pc, #548]	; (8013af4 <fm_menu_config_pass+0x2bc>)
 80138d0:	2101      	movs	r1, #1
 80138d2:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 80138d4:	4b86      	ldr	r3, [pc, #536]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 80138d6:	781b      	ldrb	r3, [r3, #0]
 80138d8:	2b02      	cmp	r3, #2
 80138da:	d80f      	bhi.n	80138fc <fm_menu_config_pass+0xc4>
            {
                event_now = EVENT_LCD_REFRESH;
 80138dc:	2301      	movs	r3, #1
 80138de:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80138e0:	f107 0313 	add.w	r3, r7, #19
 80138e4:	2200      	movs	r2, #0
 80138e6:	4619      	mov	r1, r3
 80138e8:	4883      	ldr	r0, [pc, #524]	; (8013af8 <fm_menu_config_pass+0x2c0>)
 80138ea:	f7fa fd09 	bl	800e300 <_txe_queue_send>
                password_index++;
 80138ee:	4b80      	ldr	r3, [pc, #512]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 80138f0:	781b      	ldrb	r3, [r3, #0]
 80138f2:	3301      	adds	r3, #1
 80138f4:	b2da      	uxtb	r2, r3
 80138f6:	4b7e      	ldr	r3, [pc, #504]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 80138f8:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 80138fa:	e05e      	b.n	80139ba <fm_menu_config_pass+0x182>
                new_exit = 1;
 80138fc:	4b7f      	ldr	r3, [pc, #508]	; (8013afc <fm_menu_config_pass+0x2c4>)
 80138fe:	2201      	movs	r2, #1
 8013900:	701a      	strb	r2, [r3, #0]
        break;
 8013902:	e05a      	b.n	80139ba <fm_menu_config_pass+0x182>
        case EVENT_KEY_DOWN:
            password[password_index] = 2;
 8013904:	4b7a      	ldr	r3, [pc, #488]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 8013906:	781b      	ldrb	r3, [r3, #0]
 8013908:	461a      	mov	r2, r3
 801390a:	4b7a      	ldr	r3, [pc, #488]	; (8013af4 <fm_menu_config_pass+0x2bc>)
 801390c:	2102      	movs	r1, #2
 801390e:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013910:	4b77      	ldr	r3, [pc, #476]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	2b02      	cmp	r3, #2
 8013916:	d80f      	bhi.n	8013938 <fm_menu_config_pass+0x100>
            {
                event_now = EVENT_LCD_REFRESH;
 8013918:	2301      	movs	r3, #1
 801391a:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801391c:	f107 0313 	add.w	r3, r7, #19
 8013920:	2200      	movs	r2, #0
 8013922:	4619      	mov	r1, r3
 8013924:	4874      	ldr	r0, [pc, #464]	; (8013af8 <fm_menu_config_pass+0x2c0>)
 8013926:	f7fa fceb 	bl	800e300 <_txe_queue_send>
                password_index++;
 801392a:	4b71      	ldr	r3, [pc, #452]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 801392c:	781b      	ldrb	r3, [r3, #0]
 801392e:	3301      	adds	r3, #1
 8013930:	b2da      	uxtb	r2, r3
 8013932:	4b6f      	ldr	r3, [pc, #444]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 8013934:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013936:	e040      	b.n	80139ba <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013938:	4b70      	ldr	r3, [pc, #448]	; (8013afc <fm_menu_config_pass+0x2c4>)
 801393a:	2201      	movs	r2, #1
 801393c:	701a      	strb	r2, [r3, #0]
        break;
 801393e:	e03c      	b.n	80139ba <fm_menu_config_pass+0x182>
        case EVENT_KEY_ENTER:
            password[password_index] = 3; // @suppress("Avoid magic numbers")
 8013940:	4b6b      	ldr	r3, [pc, #428]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 8013942:	781b      	ldrb	r3, [r3, #0]
 8013944:	461a      	mov	r2, r3
 8013946:	4b6b      	ldr	r3, [pc, #428]	; (8013af4 <fm_menu_config_pass+0x2bc>)
 8013948:	2103      	movs	r1, #3
 801394a:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 801394c:	4b68      	ldr	r3, [pc, #416]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 801394e:	781b      	ldrb	r3, [r3, #0]
 8013950:	2b02      	cmp	r3, #2
 8013952:	d80f      	bhi.n	8013974 <fm_menu_config_pass+0x13c>
            {
                event_now = EVENT_LCD_REFRESH;
 8013954:	2301      	movs	r3, #1
 8013956:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013958:	f107 0313 	add.w	r3, r7, #19
 801395c:	2200      	movs	r2, #0
 801395e:	4619      	mov	r1, r3
 8013960:	4865      	ldr	r0, [pc, #404]	; (8013af8 <fm_menu_config_pass+0x2c0>)
 8013962:	f7fa fccd 	bl	800e300 <_txe_queue_send>
                password_index++;
 8013966:	4b62      	ldr	r3, [pc, #392]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 8013968:	781b      	ldrb	r3, [r3, #0]
 801396a:	3301      	adds	r3, #1
 801396c:	b2da      	uxtb	r2, r3
 801396e:	4b60      	ldr	r3, [pc, #384]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 8013970:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 8013972:	e022      	b.n	80139ba <fm_menu_config_pass+0x182>
                new_exit = 1;
 8013974:	4b61      	ldr	r3, [pc, #388]	; (8013afc <fm_menu_config_pass+0x2c4>)
 8013976:	2201      	movs	r2, #1
 8013978:	701a      	strb	r2, [r3, #0]
        break;
 801397a:	e01e      	b.n	80139ba <fm_menu_config_pass+0x182>
        case EVENT_KEY_ESC:
            password[password_index] = 4; // @suppress("Avoid magic numbers")
 801397c:	4b5c      	ldr	r3, [pc, #368]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	461a      	mov	r2, r3
 8013982:	4b5c      	ldr	r3, [pc, #368]	; (8013af4 <fm_menu_config_pass+0x2bc>)
 8013984:	2104      	movs	r1, #4
 8013986:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013988:	4b59      	ldr	r3, [pc, #356]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 801398a:	781b      	ldrb	r3, [r3, #0]
 801398c:	2b02      	cmp	r3, #2
 801398e:	d80f      	bhi.n	80139b0 <fm_menu_config_pass+0x178>
            {
                event_now = EVENT_LCD_REFRESH;
 8013990:	2301      	movs	r3, #1
 8013992:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013994:	f107 0313 	add.w	r3, r7, #19
 8013998:	2200      	movs	r2, #0
 801399a:	4619      	mov	r1, r3
 801399c:	4856      	ldr	r0, [pc, #344]	; (8013af8 <fm_menu_config_pass+0x2c0>)
 801399e:	f7fa fcaf 	bl	800e300 <_txe_queue_send>
                password_index++;
 80139a2:	4b53      	ldr	r3, [pc, #332]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 80139a4:	781b      	ldrb	r3, [r3, #0]
 80139a6:	3301      	adds	r3, #1
 80139a8:	b2da      	uxtb	r2, r3
 80139aa:	4b51      	ldr	r3, [pc, #324]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 80139ac:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                new_exit = 1;
            }
        break;
 80139ae:	e004      	b.n	80139ba <fm_menu_config_pass+0x182>
                new_exit = 1;
 80139b0:	4b52      	ldr	r3, [pc, #328]	; (8013afc <fm_menu_config_pass+0x2c4>)
 80139b2:	2201      	movs	r2, #1
 80139b4:	701a      	strb	r2, [r3, #0]
        break;
 80139b6:	e000      	b.n	80139ba <fm_menu_config_pass+0x182>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80139b8:	bf00      	nop
    }

    previous_event = event_id;
 80139ba:	4a51      	ldr	r2, [pc, #324]	; (8013b00 <fm_menu_config_pass+0x2c8>)
 80139bc:	79fb      	ldrb	r3, [r7, #7]
 80139be:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Password\n";
 80139c0:	4a50      	ldr	r2, [pc, #320]	; (8013b04 <fm_menu_config_pass+0x2cc>)
 80139c2:	f107 0308 	add.w	r3, r7, #8
 80139c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80139c8:	c303      	stmia	r3!, {r0, r1}
 80139ca:	801a      	strh	r2, [r3, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80139cc:	f107 0308 	add.w	r3, r7, #8
 80139d0:	210a      	movs	r1, #10
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7fb f8d0 	bl	800eb78 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1 && password_index >= PASSWORD_LENGTH - 1)
 80139d8:	4b48      	ldr	r3, [pc, #288]	; (8013afc <fm_menu_config_pass+0x2c4>)
 80139da:	781b      	ldrb	r3, [r3, #0]
 80139dc:	2b01      	cmp	r3, #1
 80139de:	f040 80bc 	bne.w	8013b5a <fm_menu_config_pass+0x322>
 80139e2:	4b43      	ldr	r3, [pc, #268]	; (8013af0 <fm_menu_config_pass+0x2b8>)
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	2b02      	cmp	r3, #2
 80139e8:	f240 80b7 	bls.w	8013b5a <fm_menu_config_pass+0x322>
    {
        /*
         * Si la contraseña ingresada es correcta, se activa una flag global que
         * permite modificar los parámetros de los menús de configuración.
         */
        if (password[0] == 2 && password[1] == 1 && password[2] == 1
 80139ec:	4b41      	ldr	r3, [pc, #260]	; (8013af4 <fm_menu_config_pass+0x2bc>)
 80139ee:	781b      	ldrb	r3, [r3, #0]
 80139f0:	2b02      	cmp	r3, #2
 80139f2:	d11d      	bne.n	8013a30 <fm_menu_config_pass+0x1f8>
 80139f4:	4b3f      	ldr	r3, [pc, #252]	; (8013af4 <fm_menu_config_pass+0x2bc>)
 80139f6:	785b      	ldrb	r3, [r3, #1]
 80139f8:	2b01      	cmp	r3, #1
 80139fa:	d119      	bne.n	8013a30 <fm_menu_config_pass+0x1f8>
 80139fc:	4b3d      	ldr	r3, [pc, #244]	; (8013af4 <fm_menu_config_pass+0x2bc>)
 80139fe:	789b      	ldrb	r3, [r3, #2]
 8013a00:	2b01      	cmp	r3, #1
 8013a02:	d115      	bne.n	8013a30 <fm_menu_config_pass+0x1f8>
        && password[PASSWORD_LENGTH - 1] == 3)
 8013a04:	4b3b      	ldr	r3, [pc, #236]	; (8013af4 <fm_menu_config_pass+0x2bc>)
 8013a06:	78db      	ldrb	r3, [r3, #3]
 8013a08:	2b03      	cmp	r3, #3
 8013a0a:	d111      	bne.n	8013a30 <fm_menu_config_pass+0x1f8>
        {
            correct_password = 1;
 8013a0c:	4b37      	ldr	r3, [pc, #220]	; (8013aec <fm_menu_config_pass+0x2b4>)
 8013a0e:	2201      	movs	r2, #1
 8013a10:	701a      	strb	r2, [r3, #0]

            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 8013a12:	4b3d      	ldr	r3, [pc, #244]	; (8013b08 <fm_menu_config_pass+0x2d0>)
 8013a14:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013a16:	2301      	movs	r3, #1
 8013a18:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013a1a:	f107 0313 	add.w	r3, r7, #19
 8013a1e:	2200      	movs	r2, #0
 8013a20:	4619      	mov	r1, r3
 8013a22:	4835      	ldr	r0, [pc, #212]	; (8013af8 <fm_menu_config_pass+0x2c0>)
 8013a24:	f7fa fc6c 	bl	800e300 <_txe_queue_send>

            password_try = 0;
 8013a28:	4b38      	ldr	r3, [pc, #224]	; (8013b0c <fm_menu_config_pass+0x2d4>)
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	701a      	strb	r2, [r3, #0]
 8013a2e:	e07f      	b.n	8013b30 <fm_menu_config_pass+0x2f8>
        }
        else if(password[0] == 2 && password[1] == 2 && password[2] == 1
 8013a30:	4b30      	ldr	r3, [pc, #192]	; (8013af4 <fm_menu_config_pass+0x2bc>)
 8013a32:	781b      	ldrb	r3, [r3, #0]
 8013a34:	2b02      	cmp	r3, #2
 8013a36:	d139      	bne.n	8013aac <fm_menu_config_pass+0x274>
 8013a38:	4b2e      	ldr	r3, [pc, #184]	; (8013af4 <fm_menu_config_pass+0x2bc>)
 8013a3a:	785b      	ldrb	r3, [r3, #1]
 8013a3c:	2b02      	cmp	r3, #2
 8013a3e:	d135      	bne.n	8013aac <fm_menu_config_pass+0x274>
 8013a40:	4b2c      	ldr	r3, [pc, #176]	; (8013af4 <fm_menu_config_pass+0x2bc>)
 8013a42:	789b      	ldrb	r3, [r3, #2]
 8013a44:	2b01      	cmp	r3, #1
 8013a46:	d131      	bne.n	8013aac <fm_menu_config_pass+0x274>
        && password[PASSWORD_LENGTH - 1] == 1)
 8013a48:	4b2a      	ldr	r3, [pc, #168]	; (8013af4 <fm_menu_config_pass+0x2bc>)
 8013a4a:	78db      	ldrb	r3, [r3, #3]
 8013a4c:	2b01      	cmp	r3, #1
 8013a4e:	d12d      	bne.n	8013aac <fm_menu_config_pass+0x274>
        {
            correct_password = 1;
 8013a50:	4b26      	ldr	r3, [pc, #152]	; (8013aec <fm_menu_config_pass+0x2b4>)
 8013a52:	2201      	movs	r2, #1
 8013a54:	701a      	strb	r2, [r3, #0]

            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8013a56:	4b2e      	ldr	r3, [pc, #184]	; (8013b10 <fm_menu_config_pass+0x2d8>)
 8013a58:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013a5e:	f107 0313 	add.w	r3, r7, #19
 8013a62:	2200      	movs	r2, #0
 8013a64:	4619      	mov	r1, r3
 8013a66:	4824      	ldr	r0, [pc, #144]	; (8013af8 <fm_menu_config_pass+0x2c0>)
 8013a68:	f7fa fc4a 	bl	800e300 <_txe_queue_send>

            fm_factory_modify_date(fm_calendar_get_day(),
 8013a6c:	f7fb f81a 	bl	800eaa4 <fm_calendar_get_day>
 8013a70:	4604      	mov	r4, r0
 8013a72:	f7fb f821 	bl	800eab8 <fm_calendar_get_month>
 8013a76:	4605      	mov	r5, r0
 8013a78:	f7fb f828 	bl	800eacc <fm_calendar_get_year>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	461a      	mov	r2, r3
 8013a80:	4629      	mov	r1, r5
 8013a82:	4620      	mov	r0, r4
 8013a84:	f7fb fa36 	bl	800eef4 <fm_factory_modify_date>
            fm_calendar_get_month(), fm_calendar_get_year());

            fm_factory_modify_time(fm_calendar_get_hour(),
 8013a88:	f7fa ffee 	bl	800ea68 <fm_calendar_get_hour>
 8013a8c:	4604      	mov	r4, r0
 8013a8e:	f7fa fff5 	bl	800ea7c <fm_calendar_get_minute>
 8013a92:	4605      	mov	r5, r0
 8013a94:	f7fa fffc 	bl	800ea90 <fm_calendar_get_second>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	461a      	mov	r2, r3
 8013a9c:	4629      	mov	r1, r5
 8013a9e:	4620      	mov	r0, r4
 8013aa0:	f7fb fa54 	bl	800ef4c <fm_factory_modify_time>
            fm_calendar_get_minute(), fm_calendar_get_second());

            password_try = 0;
 8013aa4:	4b19      	ldr	r3, [pc, #100]	; (8013b0c <fm_menu_config_pass+0x2d4>)
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	701a      	strb	r2, [r3, #0]
 8013aaa:	e041      	b.n	8013b30 <fm_menu_config_pass+0x2f8>
        }
        else
        {
            correct_password = 0;
 8013aac:	4b0f      	ldr	r3, [pc, #60]	; (8013aec <fm_menu_config_pass+0x2b4>)
 8013aae:	2200      	movs	r2, #0
 8013ab0:	701a      	strb	r2, [r3, #0]
            password_try++;
 8013ab2:	4b16      	ldr	r3, [pc, #88]	; (8013b0c <fm_menu_config_pass+0x2d4>)
 8013ab4:	781b      	ldrb	r3, [r3, #0]
 8013ab6:	3301      	adds	r3, #1
 8013ab8:	b2da      	uxtb	r2, r3
 8013aba:	4b14      	ldr	r3, [pc, #80]	; (8013b0c <fm_menu_config_pass+0x2d4>)
 8013abc:	701a      	strb	r2, [r3, #0]

            if(password_try < 3)
 8013abe:	4b13      	ldr	r3, [pc, #76]	; (8013b0c <fm_menu_config_pass+0x2d4>)
 8013ac0:	781b      	ldrb	r3, [r3, #0]
 8013ac2:	2b02      	cmp	r3, #2
 8013ac4:	d826      	bhi.n	8013b14 <fm_menu_config_pass+0x2dc>
            {
                ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013ac6:	4b06      	ldr	r3, [pc, #24]	; (8013ae0 <fm_menu_config_pass+0x2a8>)
 8013ac8:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8013aca:	2301      	movs	r3, #1
 8013acc:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013ace:	f107 0313 	add.w	r3, r7, #19
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	4619      	mov	r1, r3
 8013ad6:	4808      	ldr	r0, [pc, #32]	; (8013af8 <fm_menu_config_pass+0x2c0>)
 8013ad8:	f7fa fc12 	bl	800e300 <_txe_queue_send>
 8013adc:	e028      	b.n	8013b30 <fm_menu_config_pass+0x2f8>
 8013ade:	bf00      	nop
 8013ae0:	08013839 	.word	0x08013839
 8013ae4:	20000148 	.word	0x20000148
 8013ae8:	20001dbc 	.word	0x20001dbc
 8013aec:	20001dba 	.word	0x20001dba
 8013af0:	20001dd1 	.word	0x20001dd1
 8013af4:	20001dd4 	.word	0x20001dd4
 8013af8:	20001388 	.word	0x20001388
 8013afc:	20001dd8 	.word	0x20001dd8
 8013b00:	20001dbb 	.word	0x20001dbb
 8013b04:	08015894 	.word	0x08015894
 8013b08:	08013665 	.word	0x08013665
 8013b0c:	20001dd9 	.word	0x20001dd9
 8013b10:	08013e55 	.word	0x08013e55
            }
            else
            {
                ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8013b14:	4b13      	ldr	r3, [pc, #76]	; (8013b64 <fm_menu_config_pass+0x32c>)
 8013b16:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013b1c:	f107 0313 	add.w	r3, r7, #19
 8013b20:	2200      	movs	r2, #0
 8013b22:	4619      	mov	r1, r3
 8013b24:	4810      	ldr	r0, [pc, #64]	; (8013b68 <fm_menu_config_pass+0x330>)
 8013b26:	f7fa fbeb 	bl	800e300 <_txe_queue_send>

                password_try = 0;
 8013b2a:	4b10      	ldr	r3, [pc, #64]	; (8013b6c <fm_menu_config_pass+0x334>)
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	701a      	strb	r2, [r3, #0]
        }

        /*
         * Reinicio el arreglo de la contraseña ingresada.
         */
        password_index = 0;
 8013b30:	4b0f      	ldr	r3, [pc, #60]	; (8013b70 <fm_menu_config_pass+0x338>)
 8013b32:	2200      	movs	r2, #0
 8013b34:	701a      	strb	r2, [r3, #0]
        password[0] = 0;
 8013b36:	4b0f      	ldr	r3, [pc, #60]	; (8013b74 <fm_menu_config_pass+0x33c>)
 8013b38:	2200      	movs	r2, #0
 8013b3a:	701a      	strb	r2, [r3, #0]
        password[1] = 0;
 8013b3c:	4b0d      	ldr	r3, [pc, #52]	; (8013b74 <fm_menu_config_pass+0x33c>)
 8013b3e:	2200      	movs	r2, #0
 8013b40:	705a      	strb	r2, [r3, #1]
        password[2] = 0;
 8013b42:	4b0c      	ldr	r3, [pc, #48]	; (8013b74 <fm_menu_config_pass+0x33c>)
 8013b44:	2200      	movs	r2, #0
 8013b46:	709a      	strb	r2, [r3, #2]
        password[PASSWORD_LENGTH - 1] = 0;
 8013b48:	4b0a      	ldr	r3, [pc, #40]	; (8013b74 <fm_menu_config_pass+0x33c>)
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	70da      	strb	r2, [r3, #3]
        new_entry = 1;
 8013b4e:	4b0a      	ldr	r3, [pc, #40]	; (8013b78 <fm_menu_config_pass+0x340>)
 8013b50:	2201      	movs	r2, #1
 8013b52:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013b54:	4b09      	ldr	r3, [pc, #36]	; (8013b7c <fm_menu_config_pass+0x344>)
 8013b56:	2200      	movs	r2, #0
 8013b58:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013b5a:	697b      	ldr	r3, [r7, #20]
}
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	3718      	adds	r7, #24
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bdb0      	pop	{r4, r5, r7, pc}
 8013b64:	08014521 	.word	0x08014521
 8013b68:	20001388 	.word	0x20001388
 8013b6c:	20001dd9 	.word	0x20001dd9
 8013b70:	20001dd1 	.word	0x20001dd1
 8013b74:	20001dd4 	.word	0x20001dd4
 8013b78:	20000148 	.word	0x20000148
 8013b7c:	20001dd8 	.word	0x20001dd8

08013b80 <fm_menu_config_units_tim>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_tim(fm_event_t event_id)
{
 8013b80:	b5b0      	push	{r4, r5, r7, lr}
 8013b82:	b0d8      	sub	sp, #352	; 0x160
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	4602      	mov	r2, r0
 8013b88:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013b8c:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013b90:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 8013b92:	4ba8      	ldr	r3, [pc, #672]	; (8013e34 <fm_menu_config_units_tim+0x2b4>)
 8013b94:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    fm_event_t event_now;

    if (new_entry == 1)
 8013b98:	4ba7      	ldr	r3, [pc, #668]	; (8013e38 <fm_menu_config_units_tim+0x2b8>)
 8013b9a:	781b      	ldrb	r3, [r3, #0]
 8013b9c:	2b01      	cmp	r3, #1
 8013b9e:	d104      	bne.n	8013baa <fm_menu_config_units_tim+0x2a>
    {
        fm_lcd_clear();
 8013ba0:	f7fb fe89 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 8013ba4:	4ba4      	ldr	r3, [pc, #656]	; (8013e38 <fm_menu_config_units_tim+0x2b8>)
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_tim(event_id);
 8013baa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013bae:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7fc fa85 	bl	80100c4 <fm_lcd_units_tim>
    fm_lcd_refresh();
 8013bba:	f7fc fa12 	bl	800ffe2 <fm_lcd_refresh>

    switch (event_id)
 8013bbe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013bc2:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013bc6:	781b      	ldrb	r3, [r3, #0]
 8013bc8:	3b01      	subs	r3, #1
 8013bca:	2b04      	cmp	r3, #4
 8013bcc:	f200 8103 	bhi.w	8013dd6 <fm_menu_config_units_tim+0x256>
 8013bd0:	a201      	add	r2, pc, #4	; (adr r2, 8013bd8 <fm_menu_config_units_tim+0x58>)
 8013bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bd6:	bf00      	nop
 8013bd8:	08013dd7 	.word	0x08013dd7
 8013bdc:	08013bed 	.word	0x08013bed
 8013be0:	08013c8f 	.word	0x08013c8f
 8013be4:	08013d1d 	.word	0x08013d1d
 8013be8:	08013daf 	.word	0x08013daf
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013bec:	4b93      	ldr	r3, [pc, #588]	; (8013e3c <fm_menu_config_units_tim+0x2bc>)
 8013bee:	781b      	ldrb	r3, [r3, #0]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d03e      	beq.n	8013c72 <fm_menu_config_units_tim+0xf2>
            {
                if (fm_factory_get_rate().unit_time == H)
 8013bf4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013bf8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7fb f803 	bl	800ec08 <fm_factory_get_rate>
 8013c02:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013c06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013c0a:	7e5b      	ldrb	r3, [r3, #25]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d103      	bne.n	8013c18 <fm_menu_config_units_tim+0x98>
                {
                    fm_factory_modify_time_units(D);
 8013c10:	2001      	movs	r0, #1
 8013c12:	f7fb fc51 	bl	800f4b8 <fm_factory_modify_time_units>
 8013c16:	e02a      	b.n	8013c6e <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013c18:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7fa fff1 	bl	800ec08 <fm_factory_get_rate>
 8013c26:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013c2e:	7e5b      	ldrb	r3, [r3, #25]
 8013c30:	2b01      	cmp	r3, #1
 8013c32:	d103      	bne.n	8013c3c <fm_menu_config_units_tim+0xbc>
                {
                    fm_factory_modify_time_units(S);
 8013c34:	2002      	movs	r0, #2
 8013c36:	f7fb fc3f 	bl	800f4b8 <fm_factory_modify_time_units>
 8013c3a:	e018      	b.n	8013c6e <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == S)
 8013c3c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7fa ffe1 	bl	800ec08 <fm_factory_get_rate>
 8013c46:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8013c4a:	2b02      	cmp	r3, #2
 8013c4c:	d103      	bne.n	8013c56 <fm_menu_config_units_tim+0xd6>
                {
                    fm_factory_modify_time_units(M);
 8013c4e:	2003      	movs	r0, #3
 8013c50:	f7fb fc32 	bl	800f4b8 <fm_factory_modify_time_units>
 8013c54:	e00b      	b.n	8013c6e <fm_menu_config_units_tim+0xee>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013c56:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7fa ffd4 	bl	800ec08 <fm_factory_get_rate>
 8013c60:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8013c64:	2b03      	cmp	r3, #3
 8013c66:	d102      	bne.n	8013c6e <fm_menu_config_units_tim+0xee>
                {
                    fm_factory_modify_time_units(H);
 8013c68:	2000      	movs	r0, #0
 8013c6a:	f7fb fc25 	bl	800f4b8 <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 8013c6e:	f7fb fe22 	bl	800f8b6 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013c72:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013c76:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c7e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013c82:	2200      	movs	r2, #0
 8013c84:	4619      	mov	r1, r3
 8013c86:	486e      	ldr	r0, [pc, #440]	; (8013e40 <fm_menu_config_units_tim+0x2c0>)
 8013c88:	f7fa fb3a 	bl	800e300 <_txe_queue_send>
        break;
 8013c8c:	e0a4      	b.n	8013dd8 <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013c8e:	4b6b      	ldr	r3, [pc, #428]	; (8013e3c <fm_menu_config_units_tim+0x2bc>)
 8013c90:	781b      	ldrb	r3, [r3, #0]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d034      	beq.n	8013d00 <fm_menu_config_units_tim+0x180>
            {
                if (fm_factory_get_rate().unit_time == H)
 8013c96:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f7fa ffb4 	bl	800ec08 <fm_factory_get_rate>
 8013ca0:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d103      	bne.n	8013cb0 <fm_menu_config_units_tim+0x130>
                {
                    fm_factory_modify_time_units(M);
 8013ca8:	2003      	movs	r0, #3
 8013caa:	f7fb fc05 	bl	800f4b8 <fm_factory_modify_time_units>
 8013cae:	e025      	b.n	8013cfc <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013cb0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7fa ffa7 	bl	800ec08 <fm_factory_get_rate>
 8013cba:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8013cbe:	2b03      	cmp	r3, #3
 8013cc0:	d103      	bne.n	8013cca <fm_menu_config_units_tim+0x14a>
                {
                    fm_factory_modify_time_units(S);
 8013cc2:	2002      	movs	r0, #2
 8013cc4:	f7fb fbf8 	bl	800f4b8 <fm_factory_modify_time_units>
 8013cc8:	e018      	b.n	8013cfc <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == S)
 8013cca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f7fa ff9a 	bl	800ec08 <fm_factory_get_rate>
 8013cd4:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8013cd8:	2b02      	cmp	r3, #2
 8013cda:	d103      	bne.n	8013ce4 <fm_menu_config_units_tim+0x164>
                {
                    fm_factory_modify_time_units(D);
 8013cdc:	2001      	movs	r0, #1
 8013cde:	f7fb fbeb 	bl	800f4b8 <fm_factory_modify_time_units>
 8013ce2:	e00b      	b.n	8013cfc <fm_menu_config_units_tim+0x17c>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013ce4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7fa ff8d 	bl	800ec08 <fm_factory_get_rate>
 8013cee:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8013cf2:	2b01      	cmp	r3, #1
 8013cf4:	d102      	bne.n	8013cfc <fm_menu_config_units_tim+0x17c>
                {
                    fm_factory_modify_time_units(H);
 8013cf6:	2000      	movs	r0, #0
 8013cf8:	f7fb fbde 	bl	800f4b8 <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 8013cfc:	f7fb fddb 	bl	800f8b6 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013d00:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013d04:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013d08:	2201      	movs	r2, #1
 8013d0a:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013d0c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013d10:	2200      	movs	r2, #0
 8013d12:	4619      	mov	r1, r3
 8013d14:	484a      	ldr	r0, [pc, #296]	; (8013e40 <fm_menu_config_units_tim+0x2c0>)
 8013d16:	f7fa faf3 	bl	800e300 <_txe_queue_send>
        break;
 8013d1a:	e05d      	b.n	8013dd8 <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013d1c:	4b47      	ldr	r3, [pc, #284]	; (8013e3c <fm_menu_config_units_tim+0x2bc>)
 8013d1e:	781b      	ldrb	r3, [r3, #0]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d036      	beq.n	8013d92 <fm_menu_config_units_tim+0x212>
            {
                if (fm_factory_get_units_tim().res == RES_0)
 8013d24:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f7fa ff95 	bl	800ec58 <fm_factory_get_units_tim>
 8013d2e:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d104      	bne.n	8013d40 <fm_menu_config_units_tim+0x1c0>
                {
                    fm_factory_modify_res_rate(RES_1, RES_1);
 8013d36:	2101      	movs	r1, #1
 8013d38:	2001      	movs	r0, #1
 8013d3a:	f7fb fba5 	bl	800f488 <fm_factory_modify_res_rate>
 8013d3e:	e028      	b.n	8013d92 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_1)
 8013d40:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8013d44:	4618      	mov	r0, r3
 8013d46:	f7fa ff87 	bl	800ec58 <fm_factory_get_units_tim>
 8013d4a:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 8013d4e:	2b01      	cmp	r3, #1
 8013d50:	d104      	bne.n	8013d5c <fm_menu_config_units_tim+0x1dc>
                {
                    fm_factory_modify_res_rate(RES_2, RES_2);
 8013d52:	2102      	movs	r1, #2
 8013d54:	2002      	movs	r0, #2
 8013d56:	f7fb fb97 	bl	800f488 <fm_factory_modify_res_rate>
 8013d5a:	e01a      	b.n	8013d92 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_2)
 8013d5c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8013d60:	4618      	mov	r0, r3
 8013d62:	f7fa ff79 	bl	800ec58 <fm_factory_get_units_tim>
 8013d66:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 8013d6a:	2b02      	cmp	r3, #2
 8013d6c:	d104      	bne.n	8013d78 <fm_menu_config_units_tim+0x1f8>
                {
                    fm_factory_modify_res_rate(RES_3, RES_3);
 8013d6e:	2103      	movs	r1, #3
 8013d70:	2003      	movs	r0, #3
 8013d72:	f7fb fb89 	bl	800f488 <fm_factory_modify_res_rate>
 8013d76:	e00c      	b.n	8013d92 <fm_menu_config_units_tim+0x212>
                }
                else if (fm_factory_get_units_tim().res == RES_3)
 8013d78:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f7fa ff6b 	bl	800ec58 <fm_factory_get_units_tim>
 8013d82:	f897 3158 	ldrb.w	r3, [r7, #344]	; 0x158
 8013d86:	2b03      	cmp	r3, #3
 8013d88:	d103      	bne.n	8013d92 <fm_menu_config_units_tim+0x212>
                {
                    fm_factory_modify_res_rate(RES_0, RES_0);
 8013d8a:	2100      	movs	r1, #0
 8013d8c:	2000      	movs	r0, #0
 8013d8e:	f7fb fb7b 	bl	800f488 <fm_factory_modify_res_rate>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013d92:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013d96:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013d9e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013da2:	2200      	movs	r2, #0
 8013da4:	4619      	mov	r1, r3
 8013da6:	4826      	ldr	r0, [pc, #152]	; (8013e40 <fm_menu_config_units_tim+0x2c0>)
 8013da8:	f7fa faaa 	bl	800e300 <_txe_queue_send>
        break;
 8013dac:	e014      	b.n	8013dd8 <fm_menu_config_units_tim+0x258>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013dae:	4b25      	ldr	r3, [pc, #148]	; (8013e44 <fm_menu_config_units_tim+0x2c4>)
 8013db0:	2201      	movs	r2, #1
 8013db2:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 8013db4:	4b24      	ldr	r3, [pc, #144]	; (8013e48 <fm_menu_config_units_tim+0x2c8>)
 8013db6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            event_now = EVENT_LCD_REFRESH;
 8013dba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013dbe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8013dc2:	2201      	movs	r2, #1
 8013dc4:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013dc6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013dca:	2200      	movs	r2, #0
 8013dcc:	4619      	mov	r1, r3
 8013dce:	481c      	ldr	r0, [pc, #112]	; (8013e40 <fm_menu_config_units_tim+0x2c0>)
 8013dd0:	f7fa fa96 	bl	800e300 <_txe_queue_send>
        break;
 8013dd4:	e000      	b.n	8013dd8 <fm_menu_config_units_tim+0x258>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013dd6:	bf00      	nop
    }

    previous_event = event_id;
 8013dd8:	4a1c      	ldr	r2, [pc, #112]	; (8013e4c <fm_menu_config_units_tim+0x2cc>)
 8013dda:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013dde:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 8013de2:	781b      	ldrb	r3, [r3, #0]
 8013de4:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar unidades de tiempo y resolucion\n";
 8013de6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8013dea:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8013dee:	4a18      	ldr	r2, [pc, #96]	; (8013e50 <fm_menu_config_units_tim+0x2d0>)
 8013df0:	461c      	mov	r4, r3
 8013df2:	4615      	mov	r5, r2
 8013df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013dfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013e00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013e04:	f107 0308 	add.w	r3, r7, #8
 8013e08:	212c      	movs	r1, #44	; 0x2c
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7fa feb4 	bl	800eb78 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8013e10:	4b0c      	ldr	r3, [pc, #48]	; (8013e44 <fm_menu_config_units_tim+0x2c4>)
 8013e12:	781b      	ldrb	r3, [r3, #0]
 8013e14:	2b01      	cmp	r3, #1
 8013e16:	d105      	bne.n	8013e24 <fm_menu_config_units_tim+0x2a4>
    {
        new_entry = 1;
 8013e18:	4b07      	ldr	r3, [pc, #28]	; (8013e38 <fm_menu_config_units_tim+0x2b8>)
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013e1e:	4b09      	ldr	r3, [pc, #36]	; (8013e44 <fm_menu_config_units_tim+0x2c4>)
 8013e20:	2200      	movs	r2, #0
 8013e22:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013e24:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bdb0      	pop	{r4, r5, r7, pc}
 8013e32:	bf00      	nop
 8013e34:	08013b81 	.word	0x08013b81
 8013e38:	20000149 	.word	0x20000149
 8013e3c:	20001dba 	.word	0x20001dba
 8013e40:	20001388 	.word	0x20001388
 8013e44:	20001dda 	.word	0x20001dda
 8013e48:	080125d9 	.word	0x080125d9
 8013e4c:	20001dbb 	.word	0x20001dbb
 8013e50:	080158b4 	.word	0x080158b4

08013e54 <fm_menu_config_units_vol>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_vol(fm_event_t event_id)
{
 8013e54:	b5b0      	push	{r4, r5, r7, lr}
 8013e56:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8013e5a:	af00      	add	r7, sp, #0
 8013e5c:	4602      	mov	r2, r0
 8013e5e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013e62:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8013e66:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8013e68:	4bc8      	ldr	r3, [pc, #800]	; (801418c <fm_menu_config_units_vol+0x338>)
 8013e6a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    fm_event_t event_now;

    if (new_entry == 1)
 8013e6e:	4bc8      	ldr	r3, [pc, #800]	; (8014190 <fm_menu_config_units_vol+0x33c>)
 8013e70:	781b      	ldrb	r3, [r3, #0]
 8013e72:	2b01      	cmp	r3, #1
 8013e74:	d104      	bne.n	8013e80 <fm_menu_config_units_vol+0x2c>
    {
        fm_lcd_clear();
 8013e76:	f7fb fd1e 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 8013e7a:	4bc5      	ldr	r3, [pc, #788]	; (8014190 <fm_menu_config_units_vol+0x33c>)
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_vol(event_id);
 8013e80:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013e84:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8013e88:	781b      	ldrb	r3, [r3, #0]
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7fc f9b6 	bl	80101fc <fm_lcd_units_vol>
    fm_lcd_refresh();
 8013e90:	f7fc f8a7 	bl	800ffe2 <fm_lcd_refresh>

    switch (event_id)
 8013e94:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013e98:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8013e9c:	781b      	ldrb	r3, [r3, #0]
 8013e9e:	3b01      	subs	r3, #1
 8013ea0:	2b04      	cmp	r3, #4
 8013ea2:	f200 817f 	bhi.w	80141a4 <fm_menu_config_units_vol+0x350>
 8013ea6:	a201      	add	r2, pc, #4	; (adr r2, 8013eac <fm_menu_config_units_vol+0x58>)
 8013ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013eac:	080141a5 	.word	0x080141a5
 8013eb0:	08013ec1 	.word	0x08013ec1
 8013eb4:	08013fe3 	.word	0x08013fe3
 8013eb8:	080140c9 	.word	0x080140c9
 8013ebc:	08014163 	.word	0x08014163
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013ec0:	4bb4      	ldr	r3, [pc, #720]	; (8014194 <fm_menu_config_units_vol+0x340>)
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d07e      	beq.n	8013fc6 <fm_menu_config_units_vol+0x172>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 8013ec8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013ecc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7fa fe6d 	bl	800ebb0 <fm_factory_get_acm>
 8013ed6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013eda:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8013ede:	7e1b      	ldrb	r3, [r3, #24]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d103      	bne.n	8013eec <fm_menu_config_units_vol+0x98>
                {
                    fm_factory_modify_volume_units(M3);
 8013ee4:	2001      	movs	r0, #1
 8013ee6:	f7fb fb01 	bl	800f4ec <fm_factory_modify_volume_units>
 8013eea:	e06a      	b.n	8013fc2 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 8013eec:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013ef0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7fa fe5b 	bl	800ebb0 <fm_factory_get_acm>
 8013efa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013efe:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8013f02:	7e1b      	ldrb	r3, [r3, #24]
 8013f04:	2b01      	cmp	r3, #1
 8013f06:	d103      	bne.n	8013f10 <fm_menu_config_units_vol+0xbc>
                {
                    fm_factory_modify_volume_units(MC);
 8013f08:	2002      	movs	r0, #2
 8013f0a:	f7fb faef 	bl	800f4ec <fm_factory_modify_volume_units>
 8013f0e:	e058      	b.n	8013fc2 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == MC)
 8013f10:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013f14:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f7fa fe49 	bl	800ebb0 <fm_factory_get_acm>
 8013f1e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013f22:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8013f26:	7e1b      	ldrb	r3, [r3, #24]
 8013f28:	2b02      	cmp	r3, #2
 8013f2a:	d103      	bne.n	8013f34 <fm_menu_config_units_vol+0xe0>
                {
                    fm_factory_modify_volume_units(KG);
 8013f2c:	2003      	movs	r0, #3
 8013f2e:	f7fb fadd 	bl	800f4ec <fm_factory_modify_volume_units>
 8013f32:	e046      	b.n	8013fc2 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 8013f34:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013f38:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7fa fe37 	bl	800ebb0 <fm_factory_get_acm>
 8013f42:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013f46:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8013f4a:	7e1b      	ldrb	r3, [r3, #24]
 8013f4c:	2b03      	cmp	r3, #3
 8013f4e:	d103      	bne.n	8013f58 <fm_menu_config_units_vol+0x104>
                {
                    fm_factory_modify_volume_units(GL);
 8013f50:	2004      	movs	r0, #4
 8013f52:	f7fb facb 	bl	800f4ec <fm_factory_modify_volume_units>
 8013f56:	e034      	b.n	8013fc2 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 8013f58:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013f5c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7fa fe25 	bl	800ebb0 <fm_factory_get_acm>
 8013f66:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013f6a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8013f6e:	7e1b      	ldrb	r3, [r3, #24]
 8013f70:	2b04      	cmp	r3, #4
 8013f72:	d103      	bne.n	8013f7c <fm_menu_config_units_vol+0x128>
                {
                    fm_factory_modify_volume_units(BR);
 8013f74:	2005      	movs	r0, #5
 8013f76:	f7fb fab9 	bl	800f4ec <fm_factory_modify_volume_units>
 8013f7a:	e022      	b.n	8013fc2 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 8013f7c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013f80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7fa fe13 	bl	800ebb0 <fm_factory_get_acm>
 8013f8a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013f8e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8013f92:	7e1b      	ldrb	r3, [r3, #24]
 8013f94:	2b05      	cmp	r3, #5
 8013f96:	d103      	bne.n	8013fa0 <fm_menu_config_units_vol+0x14c>
                {
                    fm_factory_modify_volume_units(NOTHING);
 8013f98:	2007      	movs	r0, #7
 8013f9a:	f7fb faa7 	bl	800f4ec <fm_factory_modify_volume_units>
 8013f9e:	e010      	b.n	8013fc2 <fm_menu_config_units_vol+0x16e>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 8013fa0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013fa4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7fa fe01 	bl	800ebb0 <fm_factory_get_acm>
 8013fae:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013fb2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013fb6:	7e1b      	ldrb	r3, [r3, #24]
 8013fb8:	2b07      	cmp	r3, #7
 8013fba:	d102      	bne.n	8013fc2 <fm_menu_config_units_vol+0x16e>
                {
                    fm_factory_modify_volume_units(LT);
 8013fbc:	2000      	movs	r0, #0
 8013fbe:	f7fb fa95 	bl	800f4ec <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 8013fc2:	f7fb fc78 	bl	800f8b6 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013fc6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013fca:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8013fce:	2201      	movs	r2, #1
 8013fd0:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013fd2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	4619      	mov	r1, r3
 8013fda:	486f      	ldr	r0, [pc, #444]	; (8014198 <fm_menu_config_units_vol+0x344>)
 8013fdc:	f7fa f990 	bl	800e300 <_txe_queue_send>
        break;
 8013fe0:	e0e1      	b.n	80141a6 <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013fe2:	4b6c      	ldr	r3, [pc, #432]	; (8014194 <fm_menu_config_units_vol+0x340>)
 8013fe4:	781b      	ldrb	r3, [r3, #0]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d060      	beq.n	80140ac <fm_menu_config_units_vol+0x258>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 8013fea:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7fa fddc 	bl	800ebb0 <fm_factory_get_acm>
 8013ff8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014000:	7e1b      	ldrb	r3, [r3, #24]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d103      	bne.n	801400e <fm_menu_config_units_vol+0x1ba>
                {
                    fm_factory_modify_volume_units(NOTHING);
 8014006:	2007      	movs	r0, #7
 8014008:	f7fb fa70 	bl	800f4ec <fm_factory_modify_volume_units>
 801400c:	e04c      	b.n	80140a8 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 801400e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014012:	4618      	mov	r0, r3
 8014014:	f7fa fdcc 	bl	800ebb0 <fm_factory_get_acm>
 8014018:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 801401c:	2b07      	cmp	r3, #7
 801401e:	d103      	bne.n	8014028 <fm_menu_config_units_vol+0x1d4>
                {
                    fm_factory_modify_volume_units(BR);
 8014020:	2005      	movs	r0, #5
 8014022:	f7fb fa63 	bl	800f4ec <fm_factory_modify_volume_units>
 8014026:	e03f      	b.n	80140a8 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 8014028:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801402c:	4618      	mov	r0, r3
 801402e:	f7fa fdbf 	bl	800ebb0 <fm_factory_get_acm>
 8014032:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
 8014036:	2b05      	cmp	r3, #5
 8014038:	d103      	bne.n	8014042 <fm_menu_config_units_vol+0x1ee>
                {
                    fm_factory_modify_volume_units(GL);
 801403a:	2004      	movs	r0, #4
 801403c:	f7fb fa56 	bl	800f4ec <fm_factory_modify_volume_units>
 8014040:	e032      	b.n	80140a8 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 8014042:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8014046:	4618      	mov	r0, r3
 8014048:	f7fa fdb2 	bl	800ebb0 <fm_factory_get_acm>
 801404c:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 8014050:	2b04      	cmp	r3, #4
 8014052:	d103      	bne.n	801405c <fm_menu_config_units_vol+0x208>
                {
                    fm_factory_modify_volume_units(KG);
 8014054:	2003      	movs	r0, #3
 8014056:	f7fb fa49 	bl	800f4ec <fm_factory_modify_volume_units>
 801405a:	e025      	b.n	80140a8 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 801405c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8014060:	4618      	mov	r0, r3
 8014062:	f7fa fda5 	bl	800ebb0 <fm_factory_get_acm>
 8014066:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 801406a:	2b03      	cmp	r3, #3
 801406c:	d103      	bne.n	8014076 <fm_menu_config_units_vol+0x222>
                {
                    fm_factory_modify_volume_units(MC);
 801406e:	2002      	movs	r0, #2
 8014070:	f7fb fa3c 	bl	800f4ec <fm_factory_modify_volume_units>
 8014074:	e018      	b.n	80140a8 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == MC)
 8014076:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801407a:	4618      	mov	r0, r3
 801407c:	f7fa fd98 	bl	800ebb0 <fm_factory_get_acm>
 8014080:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8014084:	2b02      	cmp	r3, #2
 8014086:	d103      	bne.n	8014090 <fm_menu_config_units_vol+0x23c>
                {
                    fm_factory_modify_volume_units(M3);
 8014088:	2001      	movs	r0, #1
 801408a:	f7fb fa2f 	bl	800f4ec <fm_factory_modify_volume_units>
 801408e:	e00b      	b.n	80140a8 <fm_menu_config_units_vol+0x254>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 8014090:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8014094:	4618      	mov	r0, r3
 8014096:	f7fa fd8b 	bl	800ebb0 <fm_factory_get_acm>
 801409a:	f897 31f0 	ldrb.w	r3, [r7, #496]	; 0x1f0
 801409e:	2b01      	cmp	r3, #1
 80140a0:	d102      	bne.n	80140a8 <fm_menu_config_units_vol+0x254>
                {
                    fm_factory_modify_volume_units(LT);
 80140a2:	2000      	movs	r0, #0
 80140a4:	f7fb fa22 	bl	800f4ec <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 80140a8:	f7fb fc05 	bl	800f8b6 <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 80140ac:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80140b0:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 80140b4:	2201      	movs	r2, #1
 80140b6:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80140b8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80140bc:	2200      	movs	r2, #0
 80140be:	4619      	mov	r1, r3
 80140c0:	4835      	ldr	r0, [pc, #212]	; (8014198 <fm_menu_config_units_vol+0x344>)
 80140c2:	f7fa f91d 	bl	800e300 <_txe_queue_send>
        break;
 80140c6:	e06e      	b.n	80141a6 <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80140c8:	4b32      	ldr	r3, [pc, #200]	; (8014194 <fm_menu_config_units_vol+0x340>)
 80140ca:	781b      	ldrb	r3, [r3, #0]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d03a      	beq.n	8014146 <fm_menu_config_units_vol+0x2f2>
            {
                if (fm_factory_get_units_vol().res == RES_0)
 80140d0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7fa fdd1 	bl	800ec7c <fm_factory_get_units_vol>
 80140da:	f897 3200 	ldrb.w	r3, [r7, #512]	; 0x200
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d105      	bne.n	80140ee <fm_menu_config_units_vol+0x29a>
                {
                    fm_factory_modify_res_acm_ttl(RES_1, RES_1, RES_1);
 80140e2:	2201      	movs	r2, #1
 80140e4:	2101      	movs	r1, #1
 80140e6:	2001      	movs	r0, #1
 80140e8:	f7fb f9b0 	bl	800f44c <fm_factory_modify_res_acm_ttl>
 80140ec:	e02b      	b.n	8014146 <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_1)
 80140ee:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80140f2:	4618      	mov	r0, r3
 80140f4:	f7fa fdc2 	bl	800ec7c <fm_factory_get_units_vol>
 80140f8:	f897 3208 	ldrb.w	r3, [r7, #520]	; 0x208
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	d105      	bne.n	801410c <fm_menu_config_units_vol+0x2b8>
                {
                    fm_factory_modify_res_acm_ttl(RES_2, RES_2, RES_2);
 8014100:	2202      	movs	r2, #2
 8014102:	2102      	movs	r1, #2
 8014104:	2002      	movs	r0, #2
 8014106:	f7fb f9a1 	bl	800f44c <fm_factory_modify_res_acm_ttl>
 801410a:	e01c      	b.n	8014146 <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_2)
 801410c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8014110:	4618      	mov	r0, r3
 8014112:	f7fa fdb3 	bl	800ec7c <fm_factory_get_units_vol>
 8014116:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 801411a:	2b02      	cmp	r3, #2
 801411c:	d105      	bne.n	801412a <fm_menu_config_units_vol+0x2d6>
                {
                    fm_factory_modify_res_acm_ttl(RES_3, RES_3, RES_3);
 801411e:	2203      	movs	r2, #3
 8014120:	2103      	movs	r1, #3
 8014122:	2003      	movs	r0, #3
 8014124:	f7fb f992 	bl	800f44c <fm_factory_modify_res_acm_ttl>
 8014128:	e00d      	b.n	8014146 <fm_menu_config_units_vol+0x2f2>
                }
                else if (fm_factory_get_units_vol().res == RES_3)
 801412a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801412e:	4618      	mov	r0, r3
 8014130:	f7fa fda4 	bl	800ec7c <fm_factory_get_units_vol>
 8014134:	f897 3218 	ldrb.w	r3, [r7, #536]	; 0x218
 8014138:	2b03      	cmp	r3, #3
 801413a:	d104      	bne.n	8014146 <fm_menu_config_units_vol+0x2f2>
                {
                    fm_factory_modify_res_acm_ttl(RES_0, RES_0, RES_0);
 801413c:	2200      	movs	r2, #0
 801413e:	2100      	movs	r1, #0
 8014140:	2000      	movs	r0, #0
 8014142:	f7fb f983 	bl	800f44c <fm_factory_modify_res_acm_ttl>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8014146:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801414a:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 801414e:	2201      	movs	r2, #1
 8014150:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014152:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8014156:	2200      	movs	r2, #0
 8014158:	4619      	mov	r1, r3
 801415a:	480f      	ldr	r0, [pc, #60]	; (8014198 <fm_menu_config_units_vol+0x344>)
 801415c:	f7fa f8d0 	bl	800e300 <_txe_queue_send>
        break;
 8014160:	e021      	b.n	80141a6 <fm_menu_config_units_vol+0x352>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8014162:	4b0e      	ldr	r3, [pc, #56]	; (801419c <fm_menu_config_units_vol+0x348>)
 8014164:	2201      	movs	r2, #1
 8014166:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 8014168:	4b0d      	ldr	r3, [pc, #52]	; (80141a0 <fm_menu_config_units_vol+0x34c>)
 801416a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
            event_now = EVENT_LCD_REFRESH;
 801416e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8014172:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8014176:	2201      	movs	r2, #1
 8014178:	701a      	strb	r2, [r3, #0]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801417a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 801417e:	2200      	movs	r2, #0
 8014180:	4619      	mov	r1, r3
 8014182:	4805      	ldr	r0, [pc, #20]	; (8014198 <fm_menu_config_units_vol+0x344>)
 8014184:	f7fa f8bc 	bl	800e300 <_txe_queue_send>
        break;
 8014188:	e00d      	b.n	80141a6 <fm_menu_config_units_vol+0x352>
 801418a:	bf00      	nop
 801418c:	08013e55 	.word	0x08013e55
 8014190:	2000014a 	.word	0x2000014a
 8014194:	20001dba 	.word	0x20001dba
 8014198:	20001388 	.word	0x20001388
 801419c:	20001ddb 	.word	0x20001ddb
 80141a0:	08013b81 	.word	0x08013b81
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80141a4:	bf00      	nop
    }

    previous_event = event_id;
 80141a6:	4a16      	ldr	r2, [pc, #88]	; (8014200 <fm_menu_config_units_vol+0x3ac>)
 80141a8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80141ac:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80141b0:	781b      	ldrb	r3, [r3, #0]
 80141b2:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar unidades de volumen y resolucion\n";
 80141b4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80141b8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80141bc:	4a11      	ldr	r2, [pc, #68]	; (8014204 <fm_menu_config_units_vol+0x3b0>)
 80141be:	461c      	mov	r4, r3
 80141c0:	4615      	mov	r5, r2
 80141c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80141c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80141c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80141c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80141ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80141ce:	c407      	stmia	r4!, {r0, r1, r2}
 80141d0:	7023      	strb	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80141d2:	f107 0308 	add.w	r3, r7, #8
 80141d6:	212d      	movs	r1, #45	; 0x2d
 80141d8:	4618      	mov	r0, r3
 80141da:	f7fa fccd 	bl	800eb78 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 80141de:	4b0a      	ldr	r3, [pc, #40]	; (8014208 <fm_menu_config_units_vol+0x3b4>)
 80141e0:	781b      	ldrb	r3, [r3, #0]
 80141e2:	2b01      	cmp	r3, #1
 80141e4:	d105      	bne.n	80141f2 <fm_menu_config_units_vol+0x39e>
    {
        new_entry = 1;
 80141e6:	4b09      	ldr	r3, [pc, #36]	; (801420c <fm_menu_config_units_vol+0x3b8>)
 80141e8:	2201      	movs	r2, #1
 80141ea:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80141ec:	4b06      	ldr	r3, [pc, #24]	; (8014208 <fm_menu_config_units_vol+0x3b4>)
 80141ee:	2200      	movs	r2, #0
 80141f0:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80141f2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
}
 80141f6:	4618      	mov	r0, r3
 80141f8:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80141fc:	46bd      	mov	sp, r7
 80141fe:	bdb0      	pop	{r4, r5, r7, pc}
 8014200:	20001dbb 	.word	0x20001dbb
 8014204:	080158e0 	.word	0x080158e0
 8014208:	20001ddb 	.word	0x20001ddb
 801420c:	2000014a 	.word	0x2000014a

08014210 <fm_menu_show_acm_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_rate(fm_event_t event_id)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b086      	sub	sp, #24
 8014214:	af00      	add	r7, sp, #0
 8014216:	4603      	mov	r3, r0
 8014218:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 801421a:	4b38      	ldr	r3, [pc, #224]	; (80142fc <fm_menu_show_acm_rate+0xec>)
 801421c:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 801421e:	4b38      	ldr	r3, [pc, #224]	; (8014300 <fm_menu_show_acm_rate+0xf0>)
 8014220:	781b      	ldrb	r3, [r3, #0]
 8014222:	2b01      	cmp	r3, #1
 8014224:	d104      	bne.n	8014230 <fm_menu_show_acm_rate+0x20>
    {
        fm_lcd_clear();
 8014226:	f7fb fb46 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 801422a:	4b35      	ldr	r3, [pc, #212]	; (8014300 <fm_menu_show_acm_rate+0xf0>)
 801422c:	2200      	movs	r2, #0
 801422e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_rate();
 8014230:	f7fb fa7e 	bl	800f730 <fm_lcd_acm_rate>
    fm_lcd_refresh();
 8014234:	f7fb fed5 	bl	800ffe2 <fm_lcd_refresh>

    switch (event_id)
 8014238:	79fb      	ldrb	r3, [r7, #7]
 801423a:	3b01      	subs	r3, #1
 801423c:	2b04      	cmp	r3, #4
 801423e:	d841      	bhi.n	80142c4 <fm_menu_show_acm_rate+0xb4>
 8014240:	a201      	add	r2, pc, #4	; (adr r2, 8014248 <fm_menu_show_acm_rate+0x38>)
 8014242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014246:	bf00      	nop
 8014248:	080142c5 	.word	0x080142c5
 801424c:	0801425d 	.word	0x0801425d
 8014250:	0801427b 	.word	0x0801427b
 8014254:	08014299 	.word	0x08014299
 8014258:	080142b1 	.word	0x080142b1
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 801425c:	4b29      	ldr	r3, [pc, #164]	; (8014304 <fm_menu_show_acm_rate+0xf4>)
 801425e:	2201      	movs	r2, #1
 8014260:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014262:	4b29      	ldr	r3, [pc, #164]	; (8014308 <fm_menu_show_acm_rate+0xf8>)
 8014264:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014266:	2301      	movs	r3, #1
 8014268:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801426a:	f107 0313 	add.w	r3, r7, #19
 801426e:	2200      	movs	r2, #0
 8014270:	4619      	mov	r1, r3
 8014272:	4826      	ldr	r0, [pc, #152]	; (801430c <fm_menu_show_acm_rate+0xfc>)
 8014274:	f7fa f844 	bl	800e300 <_txe_queue_send>
        break;
 8014278:	e025      	b.n	80142c6 <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 801427a:	4b22      	ldr	r3, [pc, #136]	; (8014304 <fm_menu_show_acm_rate+0xf4>)
 801427c:	2201      	movs	r2, #1
 801427e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8014280:	4b23      	ldr	r3, [pc, #140]	; (8014310 <fm_menu_show_acm_rate+0x100>)
 8014282:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014284:	2301      	movs	r3, #1
 8014286:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014288:	f107 0313 	add.w	r3, r7, #19
 801428c:	2200      	movs	r2, #0
 801428e:	4619      	mov	r1, r3
 8014290:	481e      	ldr	r0, [pc, #120]	; (801430c <fm_menu_show_acm_rate+0xfc>)
 8014292:	f7fa f835 	bl	800e300 <_txe_queue_send>
        break;
 8014296:	e016      	b.n	80142c6 <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_ENTER:
            fm_factory_reset_acm();
 8014298:	f7fb f942 	bl	800f520 <fm_factory_reset_acm>
            event_now = EVENT_LCD_REFRESH;
 801429c:	2301      	movs	r3, #1
 801429e:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80142a0:	f107 0313 	add.w	r3, r7, #19
 80142a4:	2200      	movs	r2, #0
 80142a6:	4619      	mov	r1, r3
 80142a8:	4818      	ldr	r0, [pc, #96]	; (801430c <fm_menu_show_acm_rate+0xfc>)
 80142aa:	f7fa f829 	bl	800e300 <_txe_queue_send>
        break;
 80142ae:	e00a      	b.n	80142c6 <fm_menu_show_acm_rate+0xb6>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 80142b0:	2301      	movs	r3, #1
 80142b2:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80142b4:	f107 0313 	add.w	r3, r7, #19
 80142b8:	2200      	movs	r2, #0
 80142ba:	4619      	mov	r1, r3
 80142bc:	4813      	ldr	r0, [pc, #76]	; (801430c <fm_menu_show_acm_rate+0xfc>)
 80142be:	f7fa f81f 	bl	800e300 <_txe_queue_send>
        break;
 80142c2:	e000      	b.n	80142c6 <fm_menu_show_acm_rate+0xb6>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80142c4:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_rate\n";
 80142c6:	4a13      	ldr	r2, [pc, #76]	; (8014314 <fm_menu_show_acm_rate+0x104>)
 80142c8:	f107 0308 	add.w	r3, r7, #8
 80142cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80142ce:	c303      	stmia	r3!, {r0, r1}
 80142d0:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80142d2:	f107 0308 	add.w	r3, r7, #8
 80142d6:	210a      	movs	r1, #10
 80142d8:	4618      	mov	r0, r3
 80142da:	f7fa fc4d 	bl	800eb78 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80142de:	4b09      	ldr	r3, [pc, #36]	; (8014304 <fm_menu_show_acm_rate+0xf4>)
 80142e0:	781b      	ldrb	r3, [r3, #0]
 80142e2:	2b01      	cmp	r3, #1
 80142e4:	d105      	bne.n	80142f2 <fm_menu_show_acm_rate+0xe2>
    {
        new_entry = 1;
 80142e6:	4b06      	ldr	r3, [pc, #24]	; (8014300 <fm_menu_show_acm_rate+0xf0>)
 80142e8:	2201      	movs	r2, #1
 80142ea:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80142ec:	4b05      	ldr	r3, [pc, #20]	; (8014304 <fm_menu_show_acm_rate+0xf4>)
 80142ee:	2200      	movs	r2, #0
 80142f0:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80142f2:	697b      	ldr	r3, [r7, #20]
}
 80142f4:	4618      	mov	r0, r3
 80142f6:	3718      	adds	r7, #24
 80142f8:	46bd      	mov	sp, r7
 80142fa:	bd80      	pop	{r7, pc}
 80142fc:	08014211 	.word	0x08014211
 8014300:	2000014b 	.word	0x2000014b
 8014304:	20001ddc 	.word	0x20001ddc
 8014308:	08014659 	.word	0x08014659
 801430c:	20001388 	.word	0x20001388
 8014310:	08014319 	.word	0x08014319
 8014314:	08015910 	.word	0x08015910

08014318 <fm_menu_show_acm_temp>:
 * la pantalla.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_temp(fm_event_t event_id)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b086      	sub	sp, #24
 801431c:	af00      	add	r7, sp, #0
 801431e:	4603      	mov	r3, r0
 8014320:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8014322:	4b37      	ldr	r3, [pc, #220]	; (8014400 <fm_menu_show_acm_temp+0xe8>)
 8014324:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8014326:	4b37      	ldr	r3, [pc, #220]	; (8014404 <fm_menu_show_acm_temp+0xec>)
 8014328:	781b      	ldrb	r3, [r3, #0]
 801432a:	2b01      	cmp	r3, #1
 801432c:	d104      	bne.n	8014338 <fm_menu_show_acm_temp+0x20>
    {
        fm_lcd_clear();
 801432e:	f7fb fac2 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 8014332:	4b34      	ldr	r3, [pc, #208]	; (8014404 <fm_menu_show_acm_temp+0xec>)
 8014334:	2200      	movs	r2, #0
 8014336:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_temp();
 8014338:	f7fb fa65 	bl	800f806 <fm_lcd_acm_temp>
    fm_lcd_refresh();
 801433c:	f7fb fe51 	bl	800ffe2 <fm_lcd_refresh>

    switch (event_id)
 8014340:	79fb      	ldrb	r3, [r7, #7]
 8014342:	3b01      	subs	r3, #1
 8014344:	2b04      	cmp	r3, #4
 8014346:	d83f      	bhi.n	80143c8 <fm_menu_show_acm_temp+0xb0>
 8014348:	a201      	add	r2, pc, #4	; (adr r2, 8014350 <fm_menu_show_acm_temp+0x38>)
 801434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801434e:	bf00      	nop
 8014350:	080143c9 	.word	0x080143c9
 8014354:	08014365 	.word	0x08014365
 8014358:	08014383 	.word	0x08014383
 801435c:	080143a1 	.word	0x080143a1
 8014360:	080143b5 	.word	0x080143b5
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8014364:	4b28      	ldr	r3, [pc, #160]	; (8014408 <fm_menu_show_acm_temp+0xf0>)
 8014366:	2201      	movs	r2, #1
 8014368:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 801436a:	4b28      	ldr	r3, [pc, #160]	; (801440c <fm_menu_show_acm_temp+0xf4>)
 801436c:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 801436e:	2301      	movs	r3, #1
 8014370:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014372:	f107 0313 	add.w	r3, r7, #19
 8014376:	2200      	movs	r2, #0
 8014378:	4619      	mov	r1, r3
 801437a:	4825      	ldr	r0, [pc, #148]	; (8014410 <fm_menu_show_acm_temp+0xf8>)
 801437c:	f7f9 ffc0 	bl	800e300 <_txe_queue_send>
        break;
 8014380:	e023      	b.n	80143ca <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 8014382:	4b21      	ldr	r3, [pc, #132]	; (8014408 <fm_menu_show_acm_temp+0xf0>)
 8014384:	2201      	movs	r2, #1
 8014386:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 8014388:	4b22      	ldr	r3, [pc, #136]	; (8014414 <fm_menu_show_acm_temp+0xfc>)
 801438a:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 801438c:	2301      	movs	r3, #1
 801438e:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014390:	f107 0313 	add.w	r3, r7, #19
 8014394:	2200      	movs	r2, #0
 8014396:	4619      	mov	r1, r3
 8014398:	481d      	ldr	r0, [pc, #116]	; (8014410 <fm_menu_show_acm_temp+0xf8>)
 801439a:	f7f9 ffb1 	bl	800e300 <_txe_queue_send>
        break;
 801439e:	e014      	b.n	80143ca <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 80143a0:	2301      	movs	r3, #1
 80143a2:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80143a4:	f107 0313 	add.w	r3, r7, #19
 80143a8:	2200      	movs	r2, #0
 80143aa:	4619      	mov	r1, r3
 80143ac:	4818      	ldr	r0, [pc, #96]	; (8014410 <fm_menu_show_acm_temp+0xf8>)
 80143ae:	f7f9 ffa7 	bl	800e300 <_txe_queue_send>
        break;
 80143b2:	e00a      	b.n	80143ca <fm_menu_show_acm_temp+0xb2>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 80143b4:	2301      	movs	r3, #1
 80143b6:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80143b8:	f107 0313 	add.w	r3, r7, #19
 80143bc:	2200      	movs	r2, #0
 80143be:	4619      	mov	r1, r3
 80143c0:	4813      	ldr	r0, [pc, #76]	; (8014410 <fm_menu_show_acm_temp+0xf8>)
 80143c2:	f7f9 ff9d 	bl	800e300 <_txe_queue_send>
        break;
 80143c6:	e000      	b.n	80143ca <fm_menu_show_acm_temp+0xb2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80143c8:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_temp\n";
 80143ca:	4a13      	ldr	r2, [pc, #76]	; (8014418 <fm_menu_show_acm_temp+0x100>)
 80143cc:	f107 0308 	add.w	r3, r7, #8
 80143d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80143d2:	c303      	stmia	r3!, {r0, r1}
 80143d4:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80143d6:	f107 0308 	add.w	r3, r7, #8
 80143da:	210a      	movs	r1, #10
 80143dc:	4618      	mov	r0, r3
 80143de:	f7fa fbcb 	bl	800eb78 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80143e2:	4b09      	ldr	r3, [pc, #36]	; (8014408 <fm_menu_show_acm_temp+0xf0>)
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	2b01      	cmp	r3, #1
 80143e8:	d105      	bne.n	80143f6 <fm_menu_show_acm_temp+0xde>
    {
        new_entry = 1;
 80143ea:	4b06      	ldr	r3, [pc, #24]	; (8014404 <fm_menu_show_acm_temp+0xec>)
 80143ec:	2201      	movs	r2, #1
 80143ee:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80143f0:	4b05      	ldr	r3, [pc, #20]	; (8014408 <fm_menu_show_acm_temp+0xf0>)
 80143f2:	2200      	movs	r2, #0
 80143f4:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80143f6:	697b      	ldr	r3, [r7, #20]
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	3718      	adds	r7, #24
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}
 8014400:	08014319 	.word	0x08014319
 8014404:	2000014c 	.word	0x2000014c
 8014408:	20001ddd 	.word	0x20001ddd
 801440c:	08014211 	.word	0x08014211
 8014410:	20001388 	.word	0x20001388
 8014414:	0801441d 	.word	0x0801441d
 8014418:	0801591c 	.word	0x0801591c

0801441c <fm_menu_show_date_hour>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_date_hour(fm_event_t event_id)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b086      	sub	sp, #24
 8014420:	af00      	add	r7, sp, #0
 8014422:	4603      	mov	r3, r0
 8014424:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 8014426:	4b38      	ldr	r3, [pc, #224]	; (8014508 <fm_menu_show_date_hour+0xec>)
 8014428:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 801442a:	4b38      	ldr	r3, [pc, #224]	; (801450c <fm_menu_show_date_hour+0xf0>)
 801442c:	781b      	ldrb	r3, [r3, #0]
 801442e:	2b01      	cmp	r3, #1
 8014430:	d104      	bne.n	801443c <fm_menu_show_date_hour+0x20>
    {
        fm_lcd_clear();
 8014432:	f7fb fa40 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 8014436:	4b35      	ldr	r3, [pc, #212]	; (801450c <fm_menu_show_date_hour+0xf0>)
 8014438:	2200      	movs	r2, #0
 801443a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(USER, event_id, DAY);
 801443c:	79fb      	ldrb	r3, [r7, #7]
 801443e:	2200      	movs	r2, #0
 8014440:	4619      	mov	r1, r3
 8014442:	2000      	movs	r0, #0
 8014444:	f7fb fa3e 	bl	800f8c4 <fm_lcd_date_hour>

    fm_lcd_refresh();
 8014448:	f7fb fdcb 	bl	800ffe2 <fm_lcd_refresh>

    switch (event_id)
 801444c:	79fb      	ldrb	r3, [r7, #7]
 801444e:	3b01      	subs	r3, #1
 8014450:	2b04      	cmp	r3, #4
 8014452:	d83a      	bhi.n	80144ca <fm_menu_show_date_hour+0xae>
 8014454:	a201      	add	r2, pc, #4	; (adr r2, 801445c <fm_menu_show_date_hour+0x40>)
 8014456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801445a:	bf00      	nop
 801445c:	080144cb 	.word	0x080144cb
 8014460:	08014471 	.word	0x08014471
 8014464:	0801448f 	.word	0x0801448f
 8014468:	080144a3 	.word	0x080144a3
 801446c:	080144b7 	.word	0x080144b7
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8014470:	4b27      	ldr	r3, [pc, #156]	; (8014510 <fm_menu_show_date_hour+0xf4>)
 8014472:	2201      	movs	r2, #1
 8014474:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8014476:	4b27      	ldr	r3, [pc, #156]	; (8014514 <fm_menu_show_date_hour+0xf8>)
 8014478:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 801447a:	2301      	movs	r3, #1
 801447c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801447e:	f107 0313 	add.w	r3, r7, #19
 8014482:	2200      	movs	r2, #0
 8014484:	4619      	mov	r1, r3
 8014486:	4824      	ldr	r0, [pc, #144]	; (8014518 <fm_menu_show_date_hour+0xfc>)
 8014488:	f7f9 ff3a 	bl	800e300 <_txe_queue_send>
        break;
 801448c:	e01e      	b.n	80144cc <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 801448e:	2301      	movs	r3, #1
 8014490:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014492:	f107 0313 	add.w	r3, r7, #19
 8014496:	2200      	movs	r2, #0
 8014498:	4619      	mov	r1, r3
 801449a:	481f      	ldr	r0, [pc, #124]	; (8014518 <fm_menu_show_date_hour+0xfc>)
 801449c:	f7f9 ff30 	bl	800e300 <_txe_queue_send>
        break;
 80144a0:	e014      	b.n	80144cc <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 80144a2:	2301      	movs	r3, #1
 80144a4:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80144a6:	f107 0313 	add.w	r3, r7, #19
 80144aa:	2200      	movs	r2, #0
 80144ac:	4619      	mov	r1, r3
 80144ae:	481a      	ldr	r0, [pc, #104]	; (8014518 <fm_menu_show_date_hour+0xfc>)
 80144b0:	f7f9 ff26 	bl	800e300 <_txe_queue_send>
        break;
 80144b4:	e00a      	b.n	80144cc <fm_menu_show_date_hour+0xb0>
        case EVENT_KEY_ESC:
            event_now = EVENT_LCD_REFRESH;
 80144b6:	2301      	movs	r3, #1
 80144b8:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80144ba:	f107 0313 	add.w	r3, r7, #19
 80144be:	2200      	movs	r2, #0
 80144c0:	4619      	mov	r1, r3
 80144c2:	4815      	ldr	r0, [pc, #84]	; (8014518 <fm_menu_show_date_hour+0xfc>)
 80144c4:	f7f9 ff1c 	bl	800e300 <_txe_queue_send>
        break;
 80144c8:	e000      	b.n	80144cc <fm_menu_show_date_hour+0xb0>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80144ca:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer3[] = "date_hour\n";
 80144cc:	4a13      	ldr	r2, [pc, #76]	; (801451c <fm_menu_show_date_hour+0x100>)
 80144ce:	f107 0308 	add.w	r3, r7, #8
 80144d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80144d4:	c303      	stmia	r3!, {r0, r1}
 80144d6:	801a      	strh	r2, [r3, #0]
 80144d8:	3302      	adds	r3, #2
 80144da:	0c12      	lsrs	r2, r2, #16
 80144dc:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer3, sizeof(msg_buffer3));
 80144de:	f107 0308 	add.w	r3, r7, #8
 80144e2:	210b      	movs	r1, #11
 80144e4:	4618      	mov	r0, r3
 80144e6:	f7fa fb47 	bl	800eb78 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80144ea:	4b09      	ldr	r3, [pc, #36]	; (8014510 <fm_menu_show_date_hour+0xf4>)
 80144ec:	781b      	ldrb	r3, [r3, #0]
 80144ee:	2b01      	cmp	r3, #1
 80144f0:	d105      	bne.n	80144fe <fm_menu_show_date_hour+0xe2>
    {
        new_entry = 1;
 80144f2:	4b06      	ldr	r3, [pc, #24]	; (801450c <fm_menu_show_date_hour+0xf0>)
 80144f4:	2201      	movs	r2, #1
 80144f6:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80144f8:	4b05      	ldr	r3, [pc, #20]	; (8014510 <fm_menu_show_date_hour+0xf4>)
 80144fa:	2200      	movs	r2, #0
 80144fc:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80144fe:	697b      	ldr	r3, [r7, #20]
}
 8014500:	4618      	mov	r0, r3
 8014502:	3718      	adds	r7, #24
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}
 8014508:	0801441d 	.word	0x0801441d
 801450c:	2000014d 	.word	0x2000014d
 8014510:	20001dde 	.word	0x20001dde
 8014514:	08014319 	.word	0x08014319
 8014518:	20001388 	.word	0x20001388
 801451c:	08015928 	.word	0x08015928

08014520 <fm_menu_show_init>:

ptr_ret_menu_t fm_menu_show_init(fm_event_t event_id)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b086      	sub	sp, #24
 8014524:	af00      	add	r7, sp, #0
 8014526:	4603      	mov	r3, r0
 8014528:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const  uint8_t counter_max = 30;
 801452a:	231e      	movs	r3, #30
 801452c:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 801452e:	4b42      	ldr	r3, [pc, #264]	; (8014638 <fm_menu_show_init+0x118>)
 8014530:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8014532:	4b42      	ldr	r3, [pc, #264]	; (801463c <fm_menu_show_init+0x11c>)
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	2b01      	cmp	r3, #1
 8014538:	d10c      	bne.n	8014554 <fm_menu_show_init+0x34>
    {
        HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 801453a:	2200      	movs	r2, #0
 801453c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014540:	483f      	ldr	r0, [pc, #252]	; (8014640 <fm_menu_show_init+0x120>)
 8014542:	f7ef fef7 	bl	8004334 <HAL_GPIO_WritePin>
        PCF8553_BACKLIGHT_Pin, GPIO_PIN_RESET);
        fm_lcd_init();
 8014546:	f7fb fbb9 	bl	800fcbc <fm_lcd_init>
        fm_lcd_clear();
 801454a:	f7fb f9b4 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 801454e:	4b3b      	ldr	r3, [pc, #236]	; (801463c <fm_menu_show_init+0x11c>)
 8014550:	2200      	movs	r2, #0
 8014552:	701a      	strb	r2, [r3, #0]
    }

    pcf8553_write_all(0xFF); // @suppress("Avoid magic numbers")
 8014554:	20ff      	movs	r0, #255	; 0xff
 8014556:	f7fe f823 	bl	80125a0 <pcf8553_write_all>

    switch (event_id)
 801455a:	79fb      	ldrb	r3, [r7, #7]
 801455c:	3b01      	subs	r3, #1
 801455e:	2b04      	cmp	r3, #4
 8014560:	d848      	bhi.n	80145f4 <fm_menu_show_init+0xd4>
 8014562:	a201      	add	r2, pc, #4	; (adr r2, 8014568 <fm_menu_show_init+0x48>)
 8014564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014568:	080145a1 	.word	0x080145a1
 801456c:	080145f5 	.word	0x080145f5
 8014570:	080145f5 	.word	0x080145f5
 8014574:	0801457d 	.word	0x0801457d
 8014578:	080145f5 	.word	0x080145f5
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 801457c:	4831      	ldr	r0, [pc, #196]	; (8014644 <fm_menu_show_init+0x124>)
 801457e:	f7f9 fe57 	bl	800e230 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 8014582:	4b31      	ldr	r3, [pc, #196]	; (8014648 <fm_menu_show_init+0x128>)
 8014584:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014586:	2301      	movs	r3, #1
 8014588:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801458a:	f107 0312 	add.w	r3, r7, #18
 801458e:	2200      	movs	r2, #0
 8014590:	4619      	mov	r1, r3
 8014592:	482c      	ldr	r0, [pc, #176]	; (8014644 <fm_menu_show_init+0x124>)
 8014594:	f7f9 feb4 	bl	800e300 <_txe_queue_send>
            new_exit = 1;
 8014598:	4b2c      	ldr	r3, [pc, #176]	; (801464c <fm_menu_show_init+0x12c>)
 801459a:	2201      	movs	r2, #1
 801459c:	701a      	strb	r2, [r3, #0]
        break;
 801459e:	e02a      	b.n	80145f6 <fm_menu_show_init+0xd6>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if(counter < counter_max)
 80145a0:	4b2b      	ldr	r3, [pc, #172]	; (8014650 <fm_menu_show_init+0x130>)
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	7cfa      	ldrb	r2, [r7, #19]
 80145a6:	429a      	cmp	r2, r3
 80145a8:	d912      	bls.n	80145d0 <fm_menu_show_init+0xb0>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 80145aa:	2064      	movs	r0, #100	; 0x64
 80145ac:	f7ed f9ea 	bl	8001984 <HAL_Delay>
                counter++;
 80145b0:	4b27      	ldr	r3, [pc, #156]	; (8014650 <fm_menu_show_init+0x130>)
 80145b2:	781b      	ldrb	r3, [r3, #0]
 80145b4:	3301      	adds	r3, #1
 80145b6:	b2da      	uxtb	r2, r3
 80145b8:	4b25      	ldr	r3, [pc, #148]	; (8014650 <fm_menu_show_init+0x130>)
 80145ba:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 80145bc:	2301      	movs	r3, #1
 80145be:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80145c0:	f107 0312 	add.w	r3, r7, #18
 80145c4:	2200      	movs	r2, #0
 80145c6:	4619      	mov	r1, r3
 80145c8:	481e      	ldr	r0, [pc, #120]	; (8014644 <fm_menu_show_init+0x124>)
 80145ca:	f7f9 fe99 	bl	800e300 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 80145ce:	e012      	b.n	80145f6 <fm_menu_show_init+0xd6>
                tx_queue_flush(&event_queue_ptr);
 80145d0:	481c      	ldr	r0, [pc, #112]	; (8014644 <fm_menu_show_init+0x124>)
 80145d2:	f7f9 fe2d 	bl	800e230 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 80145d6:	4b1c      	ldr	r3, [pc, #112]	; (8014648 <fm_menu_show_init+0x128>)
 80145d8:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 80145da:	2301      	movs	r3, #1
 80145dc:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80145de:	f107 0312 	add.w	r3, r7, #18
 80145e2:	2200      	movs	r2, #0
 80145e4:	4619      	mov	r1, r3
 80145e6:	4817      	ldr	r0, [pc, #92]	; (8014644 <fm_menu_show_init+0x124>)
 80145e8:	f7f9 fe8a 	bl	800e300 <_txe_queue_send>
                new_exit = 1;
 80145ec:	4b17      	ldr	r3, [pc, #92]	; (801464c <fm_menu_show_init+0x12c>)
 80145ee:	2201      	movs	r2, #1
 80145f0:	701a      	strb	r2, [r3, #0]
        break;
 80145f2:	e000      	b.n	80145f6 <fm_menu_show_init+0xd6>
        default:
        break;
 80145f4:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "INIT\n";
 80145f6:	4a17      	ldr	r2, [pc, #92]	; (8014654 <fm_menu_show_init+0x134>)
 80145f8:	f107 030c 	add.w	r3, r7, #12
 80145fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014600:	6018      	str	r0, [r3, #0]
 8014602:	3304      	adds	r3, #4
 8014604:	8019      	strh	r1, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8014606:	f107 030c 	add.w	r3, r7, #12
 801460a:	2106      	movs	r1, #6
 801460c:	4618      	mov	r0, r3
 801460e:	f7fa fab3 	bl	800eb78 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014612:	4b0e      	ldr	r3, [pc, #56]	; (801464c <fm_menu_show_init+0x12c>)
 8014614:	781b      	ldrb	r3, [r3, #0]
 8014616:	2b01      	cmp	r3, #1
 8014618:	d108      	bne.n	801462c <fm_menu_show_init+0x10c>
    {
        counter = 0;
 801461a:	4b0d      	ldr	r3, [pc, #52]	; (8014650 <fm_menu_show_init+0x130>)
 801461c:	2200      	movs	r2, #0
 801461e:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8014620:	4b06      	ldr	r3, [pc, #24]	; (801463c <fm_menu_show_init+0x11c>)
 8014622:	2201      	movs	r2, #1
 8014624:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014626:	4b09      	ldr	r3, [pc, #36]	; (801464c <fm_menu_show_init+0x12c>)
 8014628:	2200      	movs	r2, #0
 801462a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801462c:	697b      	ldr	r3, [r7, #20]
}
 801462e:	4618      	mov	r0, r3
 8014630:	3718      	adds	r7, #24
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}
 8014636:	bf00      	nop
 8014638:	08014521 	.word	0x08014521
 801463c:	2000014e 	.word	0x2000014e
 8014640:	42020800 	.word	0x42020800
 8014644:	20001388 	.word	0x20001388
 8014648:	0801475d 	.word	0x0801475d
 801464c:	20001ddf 	.word	0x20001ddf
 8014650:	20001de0 	.word	0x20001de0
 8014654:	08015934 	.word	0x08015934

08014658 <fm_menu_show_ttl_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_ttl_rate(fm_event_t event_id)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b086      	sub	sp, #24
 801465c:	af00      	add	r7, sp, #0
 801465e:	4603      	mov	r3, r0
 8014660:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014662:	4b37      	ldr	r3, [pc, #220]	; (8014740 <fm_menu_show_ttl_rate+0xe8>)
 8014664:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8014666:	4b37      	ldr	r3, [pc, #220]	; (8014744 <fm_menu_show_ttl_rate+0xec>)
 8014668:	781b      	ldrb	r3, [r3, #0]
 801466a:	2b01      	cmp	r3, #1
 801466c:	d104      	bne.n	8014678 <fm_menu_show_ttl_rate+0x20>
    {
        fm_lcd_clear();
 801466e:	f7fb f922 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 8014672:	4b34      	ldr	r3, [pc, #208]	; (8014744 <fm_menu_show_ttl_rate+0xec>)
 8014674:	2200      	movs	r2, #0
 8014676:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_ttl_rate();
 8014678:	f7fb fcb9 	bl	800ffee <fm_lcd_ttl_rate>
    fm_lcd_refresh();
 801467c:	f7fb fcb1 	bl	800ffe2 <fm_lcd_refresh>

    switch (event_id)
 8014680:	79fb      	ldrb	r3, [r7, #7]
 8014682:	3b01      	subs	r3, #1
 8014684:	2b04      	cmp	r3, #4
 8014686:	d83f      	bhi.n	8014708 <fm_menu_show_ttl_rate+0xb0>
 8014688:	a201      	add	r2, pc, #4	; (adr r2, 8014690 <fm_menu_show_ttl_rate+0x38>)
 801468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801468e:	bf00      	nop
 8014690:	08014709 	.word	0x08014709
 8014694:	080146a5 	.word	0x080146a5
 8014698:	080146b9 	.word	0x080146b9
 801469c:	080146d7 	.word	0x080146d7
 80146a0:	080146eb 	.word	0x080146eb
    {
        case EVENT_KEY_UP:
            event_now = EVENT_LCD_REFRESH;
 80146a4:	2301      	movs	r3, #1
 80146a6:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80146a8:	f107 0313 	add.w	r3, r7, #19
 80146ac:	2200      	movs	r2, #0
 80146ae:	4619      	mov	r1, r3
 80146b0:	4825      	ldr	r0, [pc, #148]	; (8014748 <fm_menu_show_ttl_rate+0xf0>)
 80146b2:	f7f9 fe25 	bl	800e300 <_txe_queue_send>
        break;
 80146b6:	e028      	b.n	801470a <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 80146b8:	4b24      	ldr	r3, [pc, #144]	; (801474c <fm_menu_show_ttl_rate+0xf4>)
 80146ba:	2201      	movs	r2, #1
 80146bc:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 80146be:	4b24      	ldr	r3, [pc, #144]	; (8014750 <fm_menu_show_ttl_rate+0xf8>)
 80146c0:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80146c2:	2301      	movs	r3, #1
 80146c4:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80146c6:	f107 0313 	add.w	r3, r7, #19
 80146ca:	2200      	movs	r2, #0
 80146cc:	4619      	mov	r1, r3
 80146ce:	481e      	ldr	r0, [pc, #120]	; (8014748 <fm_menu_show_ttl_rate+0xf0>)
 80146d0:	f7f9 fe16 	bl	800e300 <_txe_queue_send>
        break;
 80146d4:	e019      	b.n	801470a <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_ENTER:
            event_now = EVENT_LCD_REFRESH;
 80146d6:	2301      	movs	r3, #1
 80146d8:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80146da:	f107 0313 	add.w	r3, r7, #19
 80146de:	2200      	movs	r2, #0
 80146e0:	4619      	mov	r1, r3
 80146e2:	4819      	ldr	r0, [pc, #100]	; (8014748 <fm_menu_show_ttl_rate+0xf0>)
 80146e4:	f7f9 fe0c 	bl	800e300 <_txe_queue_send>
        break;
 80146e8:	e00f      	b.n	801470a <fm_menu_show_ttl_rate+0xb2>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80146ea:	4b18      	ldr	r3, [pc, #96]	; (801474c <fm_menu_show_ttl_rate+0xf4>)
 80146ec:	2201      	movs	r2, #1
 80146ee:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 80146f0:	4b18      	ldr	r3, [pc, #96]	; (8014754 <fm_menu_show_ttl_rate+0xfc>)
 80146f2:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80146f4:	2301      	movs	r3, #1
 80146f6:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80146f8:	f107 0313 	add.w	r3, r7, #19
 80146fc:	2200      	movs	r2, #0
 80146fe:	4619      	mov	r1, r3
 8014700:	4811      	ldr	r0, [pc, #68]	; (8014748 <fm_menu_show_ttl_rate+0xf0>)
 8014702:	f7f9 fdfd 	bl	800e300 <_txe_queue_send>
        break;
 8014706:	e000      	b.n	801470a <fm_menu_show_ttl_rate+0xb2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8014708:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "ttl_rate\n";
 801470a:	4a13      	ldr	r2, [pc, #76]	; (8014758 <fm_menu_show_ttl_rate+0x100>)
 801470c:	f107 0308 	add.w	r3, r7, #8
 8014710:	ca07      	ldmia	r2, {r0, r1, r2}
 8014712:	c303      	stmia	r3!, {r0, r1}
 8014714:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8014716:	f107 0308 	add.w	r3, r7, #8
 801471a:	210a      	movs	r1, #10
 801471c:	4618      	mov	r0, r3
 801471e:	f7fa fa2b 	bl	800eb78 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014722:	4b0a      	ldr	r3, [pc, #40]	; (801474c <fm_menu_show_ttl_rate+0xf4>)
 8014724:	781b      	ldrb	r3, [r3, #0]
 8014726:	2b01      	cmp	r3, #1
 8014728:	d105      	bne.n	8014736 <fm_menu_show_ttl_rate+0xde>
    {
        new_entry = 1;
 801472a:	4b06      	ldr	r3, [pc, #24]	; (8014744 <fm_menu_show_ttl_rate+0xec>)
 801472c:	2201      	movs	r2, #1
 801472e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014730:	4b06      	ldr	r3, [pc, #24]	; (801474c <fm_menu_show_ttl_rate+0xf4>)
 8014732:	2200      	movs	r2, #0
 8014734:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014736:	697b      	ldr	r3, [r7, #20]
}
 8014738:	4618      	mov	r0, r3
 801473a:	3718      	adds	r7, #24
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}
 8014740:	08014659 	.word	0x08014659
 8014744:	2000014f 	.word	0x2000014f
 8014748:	20001388 	.word	0x20001388
 801474c:	20001de1 	.word	0x20001de1
 8014750:	08014211 	.word	0x08014211
 8014754:	08013839 	.word	0x08013839
 8014758:	0801593c 	.word	0x0801593c

0801475c <fm_menu_show_version>:
 * pantalla, con puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_version(fm_event_t event_id)
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b086      	sub	sp, #24
 8014760:	af00      	add	r7, sp, #0
 8014762:	4603      	mov	r3, r0
 8014764:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const  uint8_t counter_max = 30;
 8014766:	231e      	movs	r3, #30
 8014768:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 801476a:	4b42      	ldr	r3, [pc, #264]	; (8014874 <fm_menu_show_version+0x118>)
 801476c:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 801476e:	4b42      	ldr	r3, [pc, #264]	; (8014878 <fm_menu_show_version+0x11c>)
 8014770:	781b      	ldrb	r3, [r3, #0]
 8014772:	2b01      	cmp	r3, #1
 8014774:	d104      	bne.n	8014780 <fm_menu_show_version+0x24>
    {
        fm_lcd_clear();
 8014776:	f7fb f89e 	bl	800f8b6 <fm_lcd_clear>
        new_entry = 0;
 801477a:	4b3f      	ldr	r3, [pc, #252]	; (8014878 <fm_menu_show_version+0x11c>)
 801477c:	2200      	movs	r2, #0
 801477e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_version(PNT_4, PNT_5);
 8014780:	2105      	movs	r1, #5
 8014782:	2004      	movs	r0, #4
 8014784:	f7fb fdda 	bl	801033c <fm_lcd_version>
    fm_lcd_refresh();
 8014788:	f7fb fc2b 	bl	800ffe2 <fm_lcd_refresh>

    switch (event_id)
 801478c:	79fb      	ldrb	r3, [r7, #7]
 801478e:	3b01      	subs	r3, #1
 8014790:	2b04      	cmp	r3, #4
 8014792:	d849      	bhi.n	8014828 <fm_menu_show_version+0xcc>
 8014794:	a201      	add	r2, pc, #4	; (adr r2, 801479c <fm_menu_show_version+0x40>)
 8014796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801479a:	bf00      	nop
 801479c:	080147d5 	.word	0x080147d5
 80147a0:	08014829 	.word	0x08014829
 80147a4:	08014829 	.word	0x08014829
 80147a8:	080147b1 	.word	0x080147b1
 80147ac:	08014829 	.word	0x08014829
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 80147b0:	4832      	ldr	r0, [pc, #200]	; (801487c <fm_menu_show_version+0x120>)
 80147b2:	f7f9 fd3d 	bl	800e230 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 80147b6:	4b32      	ldr	r3, [pc, #200]	; (8014880 <fm_menu_show_version+0x124>)
 80147b8:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 80147ba:	2301      	movs	r3, #1
 80147bc:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80147be:	f107 0312 	add.w	r3, r7, #18
 80147c2:	2200      	movs	r2, #0
 80147c4:	4619      	mov	r1, r3
 80147c6:	482d      	ldr	r0, [pc, #180]	; (801487c <fm_menu_show_version+0x120>)
 80147c8:	f7f9 fd9a 	bl	800e300 <_txe_queue_send>
            new_exit = 1;
 80147cc:	4b2d      	ldr	r3, [pc, #180]	; (8014884 <fm_menu_show_version+0x128>)
 80147ce:	2201      	movs	r2, #1
 80147d0:	701a      	strb	r2, [r3, #0]
        break;
 80147d2:	e02a      	b.n	801482a <fm_menu_show_version+0xce>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if(counter < counter_max)
 80147d4:	4b2c      	ldr	r3, [pc, #176]	; (8014888 <fm_menu_show_version+0x12c>)
 80147d6:	781b      	ldrb	r3, [r3, #0]
 80147d8:	7cfa      	ldrb	r2, [r7, #19]
 80147da:	429a      	cmp	r2, r3
 80147dc:	d912      	bls.n	8014804 <fm_menu_show_version+0xa8>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 80147de:	2064      	movs	r0, #100	; 0x64
 80147e0:	f7ed f8d0 	bl	8001984 <HAL_Delay>
                counter++;
 80147e4:	4b28      	ldr	r3, [pc, #160]	; (8014888 <fm_menu_show_version+0x12c>)
 80147e6:	781b      	ldrb	r3, [r3, #0]
 80147e8:	3301      	adds	r3, #1
 80147ea:	b2da      	uxtb	r2, r3
 80147ec:	4b26      	ldr	r3, [pc, #152]	; (8014888 <fm_menu_show_version+0x12c>)
 80147ee:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 80147f0:	2301      	movs	r3, #1
 80147f2:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80147f4:	f107 0312 	add.w	r3, r7, #18
 80147f8:	2200      	movs	r2, #0
 80147fa:	4619      	mov	r1, r3
 80147fc:	481f      	ldr	r0, [pc, #124]	; (801487c <fm_menu_show_version+0x120>)
 80147fe:	f7f9 fd7f 	bl	800e300 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 8014802:	e012      	b.n	801482a <fm_menu_show_version+0xce>
                tx_queue_flush(&event_queue_ptr);
 8014804:	481d      	ldr	r0, [pc, #116]	; (801487c <fm_menu_show_version+0x120>)
 8014806:	f7f9 fd13 	bl	800e230 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 801480a:	4b1d      	ldr	r3, [pc, #116]	; (8014880 <fm_menu_show_version+0x124>)
 801480c:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 801480e:	2301      	movs	r3, #1
 8014810:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014812:	f107 0312 	add.w	r3, r7, #18
 8014816:	2200      	movs	r2, #0
 8014818:	4619      	mov	r1, r3
 801481a:	4818      	ldr	r0, [pc, #96]	; (801487c <fm_menu_show_version+0x120>)
 801481c:	f7f9 fd70 	bl	800e300 <_txe_queue_send>
                new_exit = 1;
 8014820:	4b18      	ldr	r3, [pc, #96]	; (8014884 <fm_menu_show_version+0x128>)
 8014822:	2201      	movs	r2, #1
 8014824:	701a      	strb	r2, [r3, #0]
        break;
 8014826:	e000      	b.n	801482a <fm_menu_show_version+0xce>
        default:
        break;
 8014828:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "version\n";
 801482a:	4a18      	ldr	r2, [pc, #96]	; (801488c <fm_menu_show_version+0x130>)
 801482c:	f107 0308 	add.w	r3, r7, #8
 8014830:	ca07      	ldmia	r2, {r0, r1, r2}
 8014832:	c303      	stmia	r3!, {r0, r1}
 8014834:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8014836:	f107 0308 	add.w	r3, r7, #8
 801483a:	2109      	movs	r1, #9
 801483c:	4618      	mov	r0, r3
 801483e:	f7fa f99b 	bl	800eb78 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8014842:	4b10      	ldr	r3, [pc, #64]	; (8014884 <fm_menu_show_version+0x128>)
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	2b01      	cmp	r3, #1
 8014848:	d10e      	bne.n	8014868 <fm_menu_show_version+0x10c>
    {
        HAL_GPIO_WritePin(PCF8553_BACKLIGHT_GPIO_Port,
 801484a:	2201      	movs	r2, #1
 801484c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014850:	480f      	ldr	r0, [pc, #60]	; (8014890 <fm_menu_show_version+0x134>)
 8014852:	f7ef fd6f 	bl	8004334 <HAL_GPIO_WritePin>
        PCF8553_BACKLIGHT_Pin, GPIO_PIN_SET);
        counter = 0;
 8014856:	4b0c      	ldr	r3, [pc, #48]	; (8014888 <fm_menu_show_version+0x12c>)
 8014858:	2200      	movs	r2, #0
 801485a:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801485c:	4b06      	ldr	r3, [pc, #24]	; (8014878 <fm_menu_show_version+0x11c>)
 801485e:	2201      	movs	r2, #1
 8014860:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8014862:	4b08      	ldr	r3, [pc, #32]	; (8014884 <fm_menu_show_version+0x128>)
 8014864:	2200      	movs	r2, #0
 8014866:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8014868:	697b      	ldr	r3, [r7, #20]
}
 801486a:	4618      	mov	r0, r3
 801486c:	3718      	adds	r7, #24
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}
 8014872:	bf00      	nop
 8014874:	0801475d 	.word	0x0801475d
 8014878:	20000150 	.word	0x20000150
 801487c:	20001388 	.word	0x20001388
 8014880:	08014659 	.word	0x08014659
 8014884:	20001de2 	.word	0x20001de2
 8014888:	20001de3 	.word	0x20001de3
 801488c:	08015948 	.word	0x08015948
 8014890:	42020800 	.word	0x42020800

08014894 <fm_temp_stm32_get>:
// Private function bodies.

// Public function bodies.

void fm_temp_stm32_get()
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b082      	sub	sp, #8
 8014898:	af00      	add	r7, sp, #0
    const uint8_t poll_time = 100;
 801489a:	2364      	movs	r3, #100	; 0x64
 801489c:	71fb      	strb	r3, [r7, #7]

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET ,ADC_SINGLE_ENDED);
 801489e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148a2:	2100      	movs	r1, #0
 80148a4:	4808      	ldr	r0, [pc, #32]	; (80148c8 <fm_temp_stm32_get+0x34>)
 80148a6:	f7ef f90b 	bl	8003ac0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(&hadc1);
 80148aa:	4807      	ldr	r0, [pc, #28]	; (80148c8 <fm_temp_stm32_get+0x34>)
 80148ac:	f7ed feca 	bl	8002644 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, poll_time);
 80148b0:	79fb      	ldrb	r3, [r7, #7]
 80148b2:	4619      	mov	r1, r3
 80148b4:	4804      	ldr	r0, [pc, #16]	; (80148c8 <fm_temp_stm32_get+0x34>)
 80148b6:	f7ed ff6d 	bl	8002794 <HAL_ADC_PollForConversion>
    HAL_ADC_Stop(&hadc1);
 80148ba:	4803      	ldr	r0, [pc, #12]	; (80148c8 <fm_temp_stm32_get+0x34>)
 80148bc:	f7ed ff36 	bl	800272c <HAL_ADC_Stop>
}
 80148c0:	bf00      	nop
 80148c2:	3708      	adds	r7, #8
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}
 80148c8:	200013c8 	.word	0x200013c8

080148cc <fm_temp_stm32_format>:

int fm_temp_stm32_format()
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b082      	sub	sp, #8
 80148d0:	af00      	add	r7, sp, #0
    uint16_t raw_value;
    int temp_celcius;

    fm_temp_stm32_get();
 80148d2:	f7ff ffdf 	bl	8014894 <fm_temp_stm32_get>
    raw_value = HAL_ADC_GetValue(&hadc1);
 80148d6:	4813      	ldr	r0, [pc, #76]	; (8014924 <fm_temp_stm32_format+0x58>)
 80148d8:	f7ee f842 	bl	8002960 <HAL_ADC_GetValue>
 80148dc:	4603      	mov	r3, r0
 80148de:	80fb      	strh	r3, [r7, #6]
    temp_celcius = __HAL_ADC_CALC_TEMPERATURE(&hadc1, 3285, raw_value,
 80148e0:	88fb      	ldrh	r3, [r7, #6]
 80148e2:	009b      	lsls	r3, r3, #2
 80148e4:	f640 42d5 	movw	r2, #3285	; 0xcd5
 80148e8:	fb02 f303 	mul.w	r3, r2, r3
 80148ec:	461a      	mov	r2, r3
 80148ee:	4b0e      	ldr	r3, [pc, #56]	; (8014928 <fm_temp_stm32_format+0x5c>)
 80148f0:	fba3 2302 	umull	r2, r3, r3, r2
 80148f4:	099b      	lsrs	r3, r3, #6
 80148f6:	461a      	mov	r2, r3
 80148f8:	4b0c      	ldr	r3, [pc, #48]	; (801492c <fm_temp_stm32_format+0x60>)
 80148fa:	881b      	ldrh	r3, [r3, #0]
 80148fc:	1ad3      	subs	r3, r2, r3
 80148fe:	2264      	movs	r2, #100	; 0x64
 8014900:	fb03 f202 	mul.w	r2, r3, r2
 8014904:	4b0a      	ldr	r3, [pc, #40]	; (8014930 <fm_temp_stm32_format+0x64>)
 8014906:	881b      	ldrh	r3, [r3, #0]
 8014908:	4619      	mov	r1, r3
 801490a:	4b08      	ldr	r3, [pc, #32]	; (801492c <fm_temp_stm32_format+0x60>)
 801490c:	881b      	ldrh	r3, [r3, #0]
 801490e:	1acb      	subs	r3, r1, r3
 8014910:	fb92 f3f3 	sdiv	r3, r2, r3
 8014914:	331e      	adds	r3, #30
 8014916:	603b      	str	r3, [r7, #0]
    ADC_RESOLUTION_12B);

    return (temp_celcius);
 8014918:	683b      	ldr	r3, [r7, #0]
}
 801491a:	4618      	mov	r0, r3
 801491c:	3708      	adds	r7, #8
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}
 8014922:	bf00      	nop
 8014924:	200013c8 	.word	0x200013c8
 8014928:	057619f1 	.word	0x057619f1
 801492c:	0bfa0710 	.word	0x0bfa0710
 8014930:	0bfa0742 	.word	0x0bfa0742

08014934 <fm_version_get>:
 * actualizado este valor.
 * @param None
 * @retval Número de versión en formato VRR.
 */
uint32_t fm_version_get()
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b088      	sub	sp, #32
 8014938:	af02      	add	r7, sp, #8
    uint32_t version = 0;
 801493a:	2300      	movs	r3, #0
 801493c:	617b      	str	r3, [r7, #20]
    char version_arr[PCF8553_DATA_SIZE];

    sprintf(version_arr, "%d%d%d", VERSION, REVISION, RELEASE);
 801493e:	4638      	mov	r0, r7
 8014940:	2304      	movs	r3, #4
 8014942:	9300      	str	r3, [sp, #0]
 8014944:	2302      	movs	r3, #2
 8014946:	2201      	movs	r2, #1
 8014948:	4906      	ldr	r1, [pc, #24]	; (8014964 <fm_version_get+0x30>)
 801494a:	f000 f9bb 	bl	8014cc4 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    version = atoi(version_arr);
 801494e:	463b      	mov	r3, r7
 8014950:	4618      	mov	r0, r3
 8014952:	f000 f94d 	bl	8014bf0 <atoi>
 8014956:	4603      	mov	r3, r0
 8014958:	617b      	str	r3, [r7, #20]

    return (version);
 801495a:	697b      	ldr	r3, [r7, #20]
}
 801495c:	4618      	mov	r0, r3
 801495e:	3718      	adds	r7, #24
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}
 8014964:	08015954 	.word	0x08015954

08014968 <fmc_get_acm>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen acumulado como estructura.
 */
fmc_totalizer_t fmc_get_acm()
{
 8014968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801496a:	b093      	sub	sp, #76	; 0x4c
 801496c:	af06      	add	r7, sp, #24
 801496e:	62f8      	str	r0, [r7, #44]	; 0x2c
    acm = fm_factory_get_acm();
 8014970:	4c1c      	ldr	r4, [pc, #112]	; (80149e4 <fmc_get_acm+0x7c>)
 8014972:	f107 0308 	add.w	r3, r7, #8
 8014976:	4618      	mov	r0, r3
 8014978:	f7fa f91a 	bl	800ebb0 <fm_factory_get_acm>
 801497c:	4625      	mov	r5, r4
 801497e:	f107 0408 	add.w	r4, r7, #8
 8014982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014986:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801498a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    acm = fmc_totalizer_init(acm);
 801498e:	4b15      	ldr	r3, [pc, #84]	; (80149e4 <fmc_get_acm+0x7c>)
 8014990:	607b      	str	r3, [r7, #4]
 8014992:	f107 0c08 	add.w	ip, r7, #8
 8014996:	4e13      	ldr	r6, [pc, #76]	; (80149e4 <fmc_get_acm+0x7c>)
 8014998:	466d      	mov	r5, sp
 801499a:	f106 0408 	add.w	r4, r6, #8
 801499e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80149a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80149a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80149aa:	e896 000c 	ldmia.w	r6, {r2, r3}
 80149ae:	4660      	mov	r0, ip
 80149b0:	f000 f8c0 	bl	8014b34 <fmc_totalizer_init>
 80149b4:	687d      	ldr	r5, [r7, #4]
 80149b6:	f107 0408 	add.w	r4, r7, #8
 80149ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80149be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80149c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (acm);
 80149c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149c8:	4a06      	ldr	r2, [pc, #24]	; (80149e4 <fmc_get_acm+0x7c>)
 80149ca:	461c      	mov	r4, r3
 80149cc:	4615      	mov	r5, r2
 80149ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80149d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80149d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80149d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80149da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80149dc:	3734      	adds	r7, #52	; 0x34
 80149de:	46bd      	mov	sp, r7
 80149e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149e2:	bf00      	nop
 80149e4:	20001de8 	.word	0x20001de8

080149e8 <fmc_get_stm32_temp>:
 * @retval temperatura interna del microcontrolador como una estructura que
 * contiene su valor, resolución y unidad.
 * global.
 */
fmc_temp_t fmc_get_stm32_temp()
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b088      	sub	sp, #32
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
    int_temperature.temperature.num = fm_temp_stm32_format();
 80149f0:	f7ff ff6c 	bl	80148cc <fm_temp_stm32_format>
 80149f4:	4603      	mov	r3, r0
 80149f6:	461a      	mov	r2, r3
 80149f8:	4b0d      	ldr	r3, [pc, #52]	; (8014a30 <fmc_get_stm32_temp+0x48>)
 80149fa:	601a      	str	r2, [r3, #0]
    int_temperature.temperature.res = fm_factory_get_temp().temperature.res;
 80149fc:	f107 0308 	add.w	r3, r7, #8
 8014a00:	4618      	mov	r0, r3
 8014a02:	f7fa f917 	bl	800ec34 <fm_factory_get_temp>
 8014a06:	7b3a      	ldrb	r2, [r7, #12]
 8014a08:	4b09      	ldr	r3, [pc, #36]	; (8014a30 <fmc_get_stm32_temp+0x48>)
 8014a0a:	711a      	strb	r2, [r3, #4]
    int_temperature.unit_volume_temp = fm_factory_get_temp().unit_volume_temp;
 8014a0c:	f107 0314 	add.w	r3, r7, #20
 8014a10:	4618      	mov	r0, r3
 8014a12:	f7fa f90f 	bl	800ec34 <fm_factory_get_temp>
 8014a16:	7f3a      	ldrb	r2, [r7, #28]
 8014a18:	4b05      	ldr	r3, [pc, #20]	; (8014a30 <fmc_get_stm32_temp+0x48>)
 8014a1a:	721a      	strb	r2, [r3, #8]

    return (int_temperature);
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	4a04      	ldr	r2, [pc, #16]	; (8014a30 <fmc_get_stm32_temp+0x48>)
 8014a20:	ca07      	ldmia	r2, {r0, r1, r2}
 8014a22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	3720      	adds	r7, #32
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bd80      	pop	{r7, pc}
 8014a2e:	bf00      	nop
 8014a30:	20001e48 	.word	0x20001e48

08014a34 <fmc_get_rate>:
 * devuelve como parámetro de retorno.
 * @param  None
 * @retval caudal instantaneo como estructura.
 */
fmc_totalizer_t fmc_get_rate()
{
 8014a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a36:	b093      	sub	sp, #76	; 0x4c
 8014a38:	af06      	add	r7, sp, #24
 8014a3a:	62f8      	str	r0, [r7, #44]	; 0x2c
    rate = fm_factory_get_rate();
 8014a3c:	4c1c      	ldr	r4, [pc, #112]	; (8014ab0 <fmc_get_rate+0x7c>)
 8014a3e:	f107 0308 	add.w	r3, r7, #8
 8014a42:	4618      	mov	r0, r3
 8014a44:	f7fa f8e0 	bl	800ec08 <fm_factory_get_rate>
 8014a48:	4625      	mov	r5, r4
 8014a4a:	f107 0408 	add.w	r4, r7, #8
 8014a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014a52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014a56:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    rate = fmc_totalizer_init(rate);
 8014a5a:	4b15      	ldr	r3, [pc, #84]	; (8014ab0 <fmc_get_rate+0x7c>)
 8014a5c:	607b      	str	r3, [r7, #4]
 8014a5e:	f107 0c08 	add.w	ip, r7, #8
 8014a62:	4e13      	ldr	r6, [pc, #76]	; (8014ab0 <fmc_get_rate+0x7c>)
 8014a64:	466d      	mov	r5, sp
 8014a66:	f106 0408 	add.w	r4, r6, #8
 8014a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014a6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014a72:	e885 0003 	stmia.w	r5, {r0, r1}
 8014a76:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a7a:	4660      	mov	r0, ip
 8014a7c:	f000 f85a 	bl	8014b34 <fmc_totalizer_init>
 8014a80:	687d      	ldr	r5, [r7, #4]
 8014a82:	f107 0408 	add.w	r4, r7, #8
 8014a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014a8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014a8e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (rate);
 8014a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a94:	4a06      	ldr	r2, [pc, #24]	; (8014ab0 <fmc_get_rate+0x7c>)
 8014a96:	461c      	mov	r4, r3
 8014a98:	4615      	mov	r5, r2
 8014a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a9e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014aa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014aa8:	3734      	adds	r7, #52	; 0x34
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	20001e08 	.word	0x20001e08

08014ab4 <fmc_get_ttl>:
 * parámetro de retorno.
 * @param  None
 * @retval volumen histórico como estructura.
 */
fmc_totalizer_t fmc_get_ttl()
{
 8014ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ab6:	b093      	sub	sp, #76	; 0x4c
 8014ab8:	af06      	add	r7, sp, #24
 8014aba:	62f8      	str	r0, [r7, #44]	; 0x2c
    ttl = fm_factory_get_ttl();
 8014abc:	4c1c      	ldr	r4, [pc, #112]	; (8014b30 <fmc_get_ttl+0x7c>)
 8014abe:	f107 0308 	add.w	r3, r7, #8
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7fa f88a 	bl	800ebdc <fm_factory_get_ttl>
 8014ac8:	4625      	mov	r5, r4
 8014aca:	f107 0408 	add.w	r4, r7, #8
 8014ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014ad2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014ad6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    ttl = fmc_totalizer_init(ttl);
 8014ada:	4b15      	ldr	r3, [pc, #84]	; (8014b30 <fmc_get_ttl+0x7c>)
 8014adc:	607b      	str	r3, [r7, #4]
 8014ade:	f107 0c08 	add.w	ip, r7, #8
 8014ae2:	4e13      	ldr	r6, [pc, #76]	; (8014b30 <fmc_get_ttl+0x7c>)
 8014ae4:	466d      	mov	r5, sp
 8014ae6:	f106 0408 	add.w	r4, r6, #8
 8014aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014aee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014af2:	e885 0003 	stmia.w	r5, {r0, r1}
 8014af6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014afa:	4660      	mov	r0, ip
 8014afc:	f000 f81a 	bl	8014b34 <fmc_totalizer_init>
 8014b00:	687d      	ldr	r5, [r7, #4]
 8014b02:	f107 0408 	add.w	r4, r7, #8
 8014b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014b0e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (ttl);
 8014b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b14:	4a06      	ldr	r2, [pc, #24]	; (8014b30 <fmc_get_ttl+0x7c>)
 8014b16:	461c      	mov	r4, r3
 8014b18:	4615      	mov	r5, r2
 8014b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014b22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b28:	3734      	adds	r7, #52	; 0x34
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b2e:	bf00      	nop
 8014b30:	20001e28 	.word	0x20001e28

08014b34 <fmc_totalizer_init>:
 * @brief
 * @param
 * @retval None
 */
fmc_totalizer_t fmc_totalizer_init(fmc_totalizer_t totalizer)
{
 8014b34:	b082      	sub	sp, #8
 8014b36:	b5b0      	push	{r4, r5, r7, lr}
 8014b38:	b082      	sub	sp, #8
 8014b3a:	af00      	add	r7, sp, #0
 8014b3c:	6078      	str	r0, [r7, #4]
 8014b3e:	f107 0118 	add.w	r1, r7, #24
 8014b42:	e881 000c 	stmia.w	r1, {r2, r3}
    fmc_totalizer_refresh(&totalizer);
 8014b46:	f107 0018 	add.w	r0, r7, #24
 8014b4a:	f000 f811 	bl	8014b70 <fmc_totalizer_refresh>

    return (totalizer);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	461d      	mov	r5, r3
 8014b52:	f107 0418 	add.w	r4, r7, #24
 8014b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014b5e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8014b62:	6878      	ldr	r0, [r7, #4]
 8014b64:	3708      	adds	r7, #8
 8014b66:	46bd      	mov	sp, r7
 8014b68:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8014b6c:	b002      	add	sp, #8
 8014b6e:	4770      	bx	lr

08014b70 <fmc_totalizer_refresh>:
 * @param  puntero a estructura que contiene datos como la cantidad de pulsos
 * leidos, valor y resolución del caudal/volumen, entre otros.
 * @retval None
 */
void fmc_totalizer_refresh(fmc_totalizer_t *p_totalizer)
{
 8014b70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014b74:	b084      	sub	sp, #16
 8014b76:	af00      	add	r7, sp, #0
 8014b78:	6078      	str	r0, [r7, #4]
    uint64_t result;

    /*
     * result es la cantidad de pulsos almacenados en la estructura p_totalizer.
     */
    result = (uint64_t) p_totalizer->pulse;
 8014b7a:	6879      	ldr	r1, [r7, #4]
 8014b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b80:	e9c7 0102 	strd	r0, r1, [r7, #8]

    /*
     * Pulsos escalados en el factor y en la resolucion a mostrar.
     */
    result *= g_scalar[p_totalizer->factor.res + p_totalizer->volume.res];
 8014b84:	6879      	ldr	r1, [r7, #4]
 8014b86:	7d09      	ldrb	r1, [r1, #20]
 8014b88:	4608      	mov	r0, r1
 8014b8a:	6879      	ldr	r1, [r7, #4]
 8014b8c:	7b09      	ldrb	r1, [r1, #12]
 8014b8e:	4401      	add	r1, r0
 8014b90:	4816      	ldr	r0, [pc, #88]	; (8014bec <fmc_totalizer_refresh+0x7c>)
 8014b92:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8014b96:	2000      	movs	r0, #0
 8014b98:	460c      	mov	r4, r1
 8014b9a:	4605      	mov	r5, r0
 8014b9c:	68f9      	ldr	r1, [r7, #12]
 8014b9e:	fb04 f001 	mul.w	r0, r4, r1
 8014ba2:	68b9      	ldr	r1, [r7, #8]
 8014ba4:	fb05 f101 	mul.w	r1, r5, r1
 8014ba8:	4401      	add	r1, r0
 8014baa:	68b8      	ldr	r0, [r7, #8]
 8014bac:	fba0 2304 	umull	r2, r3, r0, r4
 8014bb0:	4419      	add	r1, r3
 8014bb2:	460b      	mov	r3, r1
 8014bb4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8014bb8:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /*
     * Obtengo el valor numérico del volumen dividiendo los pulsos escalados
     * por el factor.
     */
    result /= p_totalizer->factor.num;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	691b      	ldr	r3, [r3, #16]
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	4698      	mov	r8, r3
 8014bc4:	4691      	mov	r9, r2
 8014bc6:	4642      	mov	r2, r8
 8014bc8:	464b      	mov	r3, r9
 8014bca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014bce:	f7eb fc81 	bl	80004d4 <__aeabi_uldivmod>
 8014bd2:	4602      	mov	r2, r0
 8014bd4:	460b      	mov	r3, r1
 8014bd6:	e9c7 2302 	strd	r2, r3, [r7, #8]

    p_totalizer->volume.num = (uint32_t) result;
 8014bda:	68ba      	ldr	r2, [r7, #8]
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	609a      	str	r2, [r3, #8]

}
 8014be0:	bf00      	nop
 8014be2:	3710      	adds	r7, #16
 8014be4:	46bd      	mov	sp, r7
 8014be6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014bea:	bf00      	nop
 8014bec:	08015a5c 	.word	0x08015a5c

08014bf0 <atoi>:
 8014bf0:	220a      	movs	r2, #10
 8014bf2:	2100      	movs	r1, #0
 8014bf4:	f000 b908 	b.w	8014e08 <strtol>

08014bf8 <__errno>:
 8014bf8:	4b01      	ldr	r3, [pc, #4]	; (8014c00 <__errno+0x8>)
 8014bfa:	6818      	ldr	r0, [r3, #0]
 8014bfc:	4770      	bx	lr
 8014bfe:	bf00      	nop
 8014c00:	20000154 	.word	0x20000154

08014c04 <__libc_init_array>:
 8014c04:	b570      	push	{r4, r5, r6, lr}
 8014c06:	4d0d      	ldr	r5, [pc, #52]	; (8014c3c <__libc_init_array+0x38>)
 8014c08:	2600      	movs	r6, #0
 8014c0a:	4c0d      	ldr	r4, [pc, #52]	; (8014c40 <__libc_init_array+0x3c>)
 8014c0c:	1b64      	subs	r4, r4, r5
 8014c0e:	10a4      	asrs	r4, r4, #2
 8014c10:	42a6      	cmp	r6, r4
 8014c12:	d109      	bne.n	8014c28 <__libc_init_array+0x24>
 8014c14:	4d0b      	ldr	r5, [pc, #44]	; (8014c44 <__libc_init_array+0x40>)
 8014c16:	2600      	movs	r6, #0
 8014c18:	4c0b      	ldr	r4, [pc, #44]	; (8014c48 <__libc_init_array+0x44>)
 8014c1a:	f000 fd5d 	bl	80156d8 <_init>
 8014c1e:	1b64      	subs	r4, r4, r5
 8014c20:	10a4      	asrs	r4, r4, #2
 8014c22:	42a6      	cmp	r6, r4
 8014c24:	d105      	bne.n	8014c32 <__libc_init_array+0x2e>
 8014c26:	bd70      	pop	{r4, r5, r6, pc}
 8014c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c2c:	3601      	adds	r6, #1
 8014c2e:	4798      	blx	r3
 8014c30:	e7ee      	b.n	8014c10 <__libc_init_array+0xc>
 8014c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c36:	3601      	adds	r6, #1
 8014c38:	4798      	blx	r3
 8014c3a:	e7f2      	b.n	8014c22 <__libc_init_array+0x1e>
 8014c3c:	08015bb4 	.word	0x08015bb4
 8014c40:	08015bb4 	.word	0x08015bb4
 8014c44:	08015bb4 	.word	0x08015bb4
 8014c48:	08015bb8 	.word	0x08015bb8

08014c4c <memset>:
 8014c4c:	4402      	add	r2, r0
 8014c4e:	4603      	mov	r3, r0
 8014c50:	4293      	cmp	r3, r2
 8014c52:	d100      	bne.n	8014c56 <memset+0xa>
 8014c54:	4770      	bx	lr
 8014c56:	f803 1b01 	strb.w	r1, [r3], #1
 8014c5a:	e7f9      	b.n	8014c50 <memset+0x4>

08014c5c <sniprintf>:
 8014c5c:	b40c      	push	{r2, r3}
 8014c5e:	4b18      	ldr	r3, [pc, #96]	; (8014cc0 <sniprintf+0x64>)
 8014c60:	b530      	push	{r4, r5, lr}
 8014c62:	1e0c      	subs	r4, r1, #0
 8014c64:	b09d      	sub	sp, #116	; 0x74
 8014c66:	681d      	ldr	r5, [r3, #0]
 8014c68:	da08      	bge.n	8014c7c <sniprintf+0x20>
 8014c6a:	238b      	movs	r3, #139	; 0x8b
 8014c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c70:	602b      	str	r3, [r5, #0]
 8014c72:	b01d      	add	sp, #116	; 0x74
 8014c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c78:	b002      	add	sp, #8
 8014c7a:	4770      	bx	lr
 8014c7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014c80:	9002      	str	r0, [sp, #8]
 8014c82:	9006      	str	r0, [sp, #24]
 8014c84:	a902      	add	r1, sp, #8
 8014c86:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014c8a:	bf14      	ite	ne
 8014c8c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014c90:	4623      	moveq	r3, r4
 8014c92:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014c94:	4628      	mov	r0, r5
 8014c96:	9304      	str	r3, [sp, #16]
 8014c98:	9307      	str	r3, [sp, #28]
 8014c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ca2:	ab21      	add	r3, sp, #132	; 0x84
 8014ca4:	9301      	str	r3, [sp, #4]
 8014ca6:	f000 f915 	bl	8014ed4 <_svfiprintf_r>
 8014caa:	1c43      	adds	r3, r0, #1
 8014cac:	bfbc      	itt	lt
 8014cae:	238b      	movlt	r3, #139	; 0x8b
 8014cb0:	602b      	strlt	r3, [r5, #0]
 8014cb2:	2c00      	cmp	r4, #0
 8014cb4:	d0dd      	beq.n	8014c72 <sniprintf+0x16>
 8014cb6:	9b02      	ldr	r3, [sp, #8]
 8014cb8:	2200      	movs	r2, #0
 8014cba:	701a      	strb	r2, [r3, #0]
 8014cbc:	e7d9      	b.n	8014c72 <sniprintf+0x16>
 8014cbe:	bf00      	nop
 8014cc0:	20000154 	.word	0x20000154

08014cc4 <siprintf>:
 8014cc4:	b40e      	push	{r1, r2, r3}
 8014cc6:	b500      	push	{lr}
 8014cc8:	b09c      	sub	sp, #112	; 0x70
 8014cca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014cce:	ab1d      	add	r3, sp, #116	; 0x74
 8014cd0:	9002      	str	r0, [sp, #8]
 8014cd2:	9006      	str	r0, [sp, #24]
 8014cd4:	9107      	str	r1, [sp, #28]
 8014cd6:	9104      	str	r1, [sp, #16]
 8014cd8:	4808      	ldr	r0, [pc, #32]	; (8014cfc <siprintf+0x38>)
 8014cda:	4909      	ldr	r1, [pc, #36]	; (8014d00 <siprintf+0x3c>)
 8014cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ce0:	9105      	str	r1, [sp, #20]
 8014ce2:	a902      	add	r1, sp, #8
 8014ce4:	6800      	ldr	r0, [r0, #0]
 8014ce6:	9301      	str	r3, [sp, #4]
 8014ce8:	f000 f8f4 	bl	8014ed4 <_svfiprintf_r>
 8014cec:	9b02      	ldr	r3, [sp, #8]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	701a      	strb	r2, [r3, #0]
 8014cf2:	b01c      	add	sp, #112	; 0x70
 8014cf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014cf8:	b003      	add	sp, #12
 8014cfa:	4770      	bx	lr
 8014cfc:	20000154 	.word	0x20000154
 8014d00:	ffff0208 	.word	0xffff0208

08014d04 <_strtol_l.constprop.0>:
 8014d04:	2b01      	cmp	r3, #1
 8014d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d0a:	d001      	beq.n	8014d10 <_strtol_l.constprop.0+0xc>
 8014d0c:	2b24      	cmp	r3, #36	; 0x24
 8014d0e:	d906      	bls.n	8014d1e <_strtol_l.constprop.0+0x1a>
 8014d10:	f7ff ff72 	bl	8014bf8 <__errno>
 8014d14:	2316      	movs	r3, #22
 8014d16:	6003      	str	r3, [r0, #0]
 8014d18:	2000      	movs	r0, #0
 8014d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d1e:	460d      	mov	r5, r1
 8014d20:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8014e04 <_strtol_l.constprop.0+0x100>
 8014d24:	462e      	mov	r6, r5
 8014d26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014d2a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014d2e:	f017 0708 	ands.w	r7, r7, #8
 8014d32:	d1f7      	bne.n	8014d24 <_strtol_l.constprop.0+0x20>
 8014d34:	2c2d      	cmp	r4, #45	; 0x2d
 8014d36:	d132      	bne.n	8014d9e <_strtol_l.constprop.0+0x9a>
 8014d38:	782c      	ldrb	r4, [r5, #0]
 8014d3a:	2701      	movs	r7, #1
 8014d3c:	1cb5      	adds	r5, r6, #2
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d05b      	beq.n	8014dfa <_strtol_l.constprop.0+0xf6>
 8014d42:	2b10      	cmp	r3, #16
 8014d44:	d109      	bne.n	8014d5a <_strtol_l.constprop.0+0x56>
 8014d46:	2c30      	cmp	r4, #48	; 0x30
 8014d48:	d107      	bne.n	8014d5a <_strtol_l.constprop.0+0x56>
 8014d4a:	782c      	ldrb	r4, [r5, #0]
 8014d4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014d50:	2c58      	cmp	r4, #88	; 0x58
 8014d52:	d14d      	bne.n	8014df0 <_strtol_l.constprop.0+0xec>
 8014d54:	786c      	ldrb	r4, [r5, #1]
 8014d56:	2310      	movs	r3, #16
 8014d58:	3502      	adds	r5, #2
 8014d5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014d5e:	f04f 0c00 	mov.w	ip, #0
 8014d62:	f108 38ff 	add.w	r8, r8, #4294967295
 8014d66:	4666      	mov	r6, ip
 8014d68:	fbb8 f9f3 	udiv	r9, r8, r3
 8014d6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8014d70:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014d74:	f1be 0f09 	cmp.w	lr, #9
 8014d78:	d816      	bhi.n	8014da8 <_strtol_l.constprop.0+0xa4>
 8014d7a:	4674      	mov	r4, lr
 8014d7c:	42a3      	cmp	r3, r4
 8014d7e:	dd24      	ble.n	8014dca <_strtol_l.constprop.0+0xc6>
 8014d80:	f1bc 0f00 	cmp.w	ip, #0
 8014d84:	db1e      	blt.n	8014dc4 <_strtol_l.constprop.0+0xc0>
 8014d86:	45b1      	cmp	r9, r6
 8014d88:	d31c      	bcc.n	8014dc4 <_strtol_l.constprop.0+0xc0>
 8014d8a:	d101      	bne.n	8014d90 <_strtol_l.constprop.0+0x8c>
 8014d8c:	45a2      	cmp	sl, r4
 8014d8e:	db19      	blt.n	8014dc4 <_strtol_l.constprop.0+0xc0>
 8014d90:	fb06 4603 	mla	r6, r6, r3, r4
 8014d94:	f04f 0c01 	mov.w	ip, #1
 8014d98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014d9c:	e7e8      	b.n	8014d70 <_strtol_l.constprop.0+0x6c>
 8014d9e:	2c2b      	cmp	r4, #43	; 0x2b
 8014da0:	bf04      	itt	eq
 8014da2:	782c      	ldrbeq	r4, [r5, #0]
 8014da4:	1cb5      	addeq	r5, r6, #2
 8014da6:	e7ca      	b.n	8014d3e <_strtol_l.constprop.0+0x3a>
 8014da8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014dac:	f1be 0f19 	cmp.w	lr, #25
 8014db0:	d801      	bhi.n	8014db6 <_strtol_l.constprop.0+0xb2>
 8014db2:	3c37      	subs	r4, #55	; 0x37
 8014db4:	e7e2      	b.n	8014d7c <_strtol_l.constprop.0+0x78>
 8014db6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014dba:	f1be 0f19 	cmp.w	lr, #25
 8014dbe:	d804      	bhi.n	8014dca <_strtol_l.constprop.0+0xc6>
 8014dc0:	3c57      	subs	r4, #87	; 0x57
 8014dc2:	e7db      	b.n	8014d7c <_strtol_l.constprop.0+0x78>
 8014dc4:	f04f 3cff 	mov.w	ip, #4294967295
 8014dc8:	e7e6      	b.n	8014d98 <_strtol_l.constprop.0+0x94>
 8014dca:	f1bc 0f00 	cmp.w	ip, #0
 8014dce:	da05      	bge.n	8014ddc <_strtol_l.constprop.0+0xd8>
 8014dd0:	2322      	movs	r3, #34	; 0x22
 8014dd2:	4646      	mov	r6, r8
 8014dd4:	6003      	str	r3, [r0, #0]
 8014dd6:	b942      	cbnz	r2, 8014dea <_strtol_l.constprop.0+0xe6>
 8014dd8:	4630      	mov	r0, r6
 8014dda:	e79e      	b.n	8014d1a <_strtol_l.constprop.0+0x16>
 8014ddc:	b107      	cbz	r7, 8014de0 <_strtol_l.constprop.0+0xdc>
 8014dde:	4276      	negs	r6, r6
 8014de0:	2a00      	cmp	r2, #0
 8014de2:	d0f9      	beq.n	8014dd8 <_strtol_l.constprop.0+0xd4>
 8014de4:	f1bc 0f00 	cmp.w	ip, #0
 8014de8:	d000      	beq.n	8014dec <_strtol_l.constprop.0+0xe8>
 8014dea:	1e69      	subs	r1, r5, #1
 8014dec:	6011      	str	r1, [r2, #0]
 8014dee:	e7f3      	b.n	8014dd8 <_strtol_l.constprop.0+0xd4>
 8014df0:	2430      	movs	r4, #48	; 0x30
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d1b1      	bne.n	8014d5a <_strtol_l.constprop.0+0x56>
 8014df6:	2308      	movs	r3, #8
 8014df8:	e7af      	b.n	8014d5a <_strtol_l.constprop.0+0x56>
 8014dfa:	2c30      	cmp	r4, #48	; 0x30
 8014dfc:	d0a5      	beq.n	8014d4a <_strtol_l.constprop.0+0x46>
 8014dfe:	230a      	movs	r3, #10
 8014e00:	e7ab      	b.n	8014d5a <_strtol_l.constprop.0+0x56>
 8014e02:	bf00      	nop
 8014e04:	08015a79 	.word	0x08015a79

08014e08 <strtol>:
 8014e08:	4613      	mov	r3, r2
 8014e0a:	460a      	mov	r2, r1
 8014e0c:	4601      	mov	r1, r0
 8014e0e:	4802      	ldr	r0, [pc, #8]	; (8014e18 <strtol+0x10>)
 8014e10:	6800      	ldr	r0, [r0, #0]
 8014e12:	f7ff bf77 	b.w	8014d04 <_strtol_l.constprop.0>
 8014e16:	bf00      	nop
 8014e18:	20000154 	.word	0x20000154

08014e1c <__ssputs_r>:
 8014e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e20:	688e      	ldr	r6, [r1, #8]
 8014e22:	4682      	mov	sl, r0
 8014e24:	460c      	mov	r4, r1
 8014e26:	4690      	mov	r8, r2
 8014e28:	429e      	cmp	r6, r3
 8014e2a:	461f      	mov	r7, r3
 8014e2c:	d838      	bhi.n	8014ea0 <__ssputs_r+0x84>
 8014e2e:	898a      	ldrh	r2, [r1, #12]
 8014e30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014e34:	d032      	beq.n	8014e9c <__ssputs_r+0x80>
 8014e36:	6825      	ldr	r5, [r4, #0]
 8014e38:	3301      	adds	r3, #1
 8014e3a:	6909      	ldr	r1, [r1, #16]
 8014e3c:	eba5 0901 	sub.w	r9, r5, r1
 8014e40:	6965      	ldr	r5, [r4, #20]
 8014e42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014e46:	444b      	add	r3, r9
 8014e48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014e4c:	106d      	asrs	r5, r5, #1
 8014e4e:	429d      	cmp	r5, r3
 8014e50:	bf38      	it	cc
 8014e52:	461d      	movcc	r5, r3
 8014e54:	0553      	lsls	r3, r2, #21
 8014e56:	d531      	bpl.n	8014ebc <__ssputs_r+0xa0>
 8014e58:	4629      	mov	r1, r5
 8014e5a:	f000 fb73 	bl	8015544 <_malloc_r>
 8014e5e:	4606      	mov	r6, r0
 8014e60:	b950      	cbnz	r0, 8014e78 <__ssputs_r+0x5c>
 8014e62:	230c      	movs	r3, #12
 8014e64:	f04f 30ff 	mov.w	r0, #4294967295
 8014e68:	f8ca 3000 	str.w	r3, [sl]
 8014e6c:	89a3      	ldrh	r3, [r4, #12]
 8014e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e72:	81a3      	strh	r3, [r4, #12]
 8014e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e78:	464a      	mov	r2, r9
 8014e7a:	6921      	ldr	r1, [r4, #16]
 8014e7c:	f000 face 	bl	801541c <memcpy>
 8014e80:	89a3      	ldrh	r3, [r4, #12]
 8014e82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e8a:	81a3      	strh	r3, [r4, #12]
 8014e8c:	6126      	str	r6, [r4, #16]
 8014e8e:	444e      	add	r6, r9
 8014e90:	6165      	str	r5, [r4, #20]
 8014e92:	eba5 0509 	sub.w	r5, r5, r9
 8014e96:	6026      	str	r6, [r4, #0]
 8014e98:	463e      	mov	r6, r7
 8014e9a:	60a5      	str	r5, [r4, #8]
 8014e9c:	42be      	cmp	r6, r7
 8014e9e:	d900      	bls.n	8014ea2 <__ssputs_r+0x86>
 8014ea0:	463e      	mov	r6, r7
 8014ea2:	4632      	mov	r2, r6
 8014ea4:	4641      	mov	r1, r8
 8014ea6:	6820      	ldr	r0, [r4, #0]
 8014ea8:	f000 fac5 	bl	8015436 <memmove>
 8014eac:	68a3      	ldr	r3, [r4, #8]
 8014eae:	2000      	movs	r0, #0
 8014eb0:	1b9b      	subs	r3, r3, r6
 8014eb2:	60a3      	str	r3, [r4, #8]
 8014eb4:	6823      	ldr	r3, [r4, #0]
 8014eb6:	4433      	add	r3, r6
 8014eb8:	6023      	str	r3, [r4, #0]
 8014eba:	e7db      	b.n	8014e74 <__ssputs_r+0x58>
 8014ebc:	462a      	mov	r2, r5
 8014ebe:	f000 fbb5 	bl	801562c <_realloc_r>
 8014ec2:	4606      	mov	r6, r0
 8014ec4:	2800      	cmp	r0, #0
 8014ec6:	d1e1      	bne.n	8014e8c <__ssputs_r+0x70>
 8014ec8:	6921      	ldr	r1, [r4, #16]
 8014eca:	4650      	mov	r0, sl
 8014ecc:	f000 face 	bl	801546c <_free_r>
 8014ed0:	e7c7      	b.n	8014e62 <__ssputs_r+0x46>
	...

08014ed4 <_svfiprintf_r>:
 8014ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ed8:	4698      	mov	r8, r3
 8014eda:	898b      	ldrh	r3, [r1, #12]
 8014edc:	b09d      	sub	sp, #116	; 0x74
 8014ede:	4607      	mov	r7, r0
 8014ee0:	061b      	lsls	r3, r3, #24
 8014ee2:	460d      	mov	r5, r1
 8014ee4:	4614      	mov	r4, r2
 8014ee6:	d50e      	bpl.n	8014f06 <_svfiprintf_r+0x32>
 8014ee8:	690b      	ldr	r3, [r1, #16]
 8014eea:	b963      	cbnz	r3, 8014f06 <_svfiprintf_r+0x32>
 8014eec:	2140      	movs	r1, #64	; 0x40
 8014eee:	f000 fb29 	bl	8015544 <_malloc_r>
 8014ef2:	6028      	str	r0, [r5, #0]
 8014ef4:	6128      	str	r0, [r5, #16]
 8014ef6:	b920      	cbnz	r0, 8014f02 <_svfiprintf_r+0x2e>
 8014ef8:	230c      	movs	r3, #12
 8014efa:	603b      	str	r3, [r7, #0]
 8014efc:	f04f 30ff 	mov.w	r0, #4294967295
 8014f00:	e0d1      	b.n	80150a6 <_svfiprintf_r+0x1d2>
 8014f02:	2340      	movs	r3, #64	; 0x40
 8014f04:	616b      	str	r3, [r5, #20]
 8014f06:	2300      	movs	r3, #0
 8014f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f0c:	f04f 0901 	mov.w	r9, #1
 8014f10:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80150c0 <_svfiprintf_r+0x1ec>
 8014f14:	9309      	str	r3, [sp, #36]	; 0x24
 8014f16:	2320      	movs	r3, #32
 8014f18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f1c:	2330      	movs	r3, #48	; 0x30
 8014f1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f22:	4623      	mov	r3, r4
 8014f24:	469a      	mov	sl, r3
 8014f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f2a:	b10a      	cbz	r2, 8014f30 <_svfiprintf_r+0x5c>
 8014f2c:	2a25      	cmp	r2, #37	; 0x25
 8014f2e:	d1f9      	bne.n	8014f24 <_svfiprintf_r+0x50>
 8014f30:	ebba 0b04 	subs.w	fp, sl, r4
 8014f34:	d00b      	beq.n	8014f4e <_svfiprintf_r+0x7a>
 8014f36:	465b      	mov	r3, fp
 8014f38:	4622      	mov	r2, r4
 8014f3a:	4629      	mov	r1, r5
 8014f3c:	4638      	mov	r0, r7
 8014f3e:	f7ff ff6d 	bl	8014e1c <__ssputs_r>
 8014f42:	3001      	adds	r0, #1
 8014f44:	f000 80aa 	beq.w	801509c <_svfiprintf_r+0x1c8>
 8014f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f4a:	445a      	add	r2, fp
 8014f4c:	9209      	str	r2, [sp, #36]	; 0x24
 8014f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	f000 80a2 	beq.w	801509c <_svfiprintf_r+0x1c8>
 8014f58:	2300      	movs	r3, #0
 8014f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8014f5e:	f10a 0a01 	add.w	sl, sl, #1
 8014f62:	9304      	str	r3, [sp, #16]
 8014f64:	9307      	str	r3, [sp, #28]
 8014f66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014f6a:	931a      	str	r3, [sp, #104]	; 0x68
 8014f6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f70:	4654      	mov	r4, sl
 8014f72:	2205      	movs	r2, #5
 8014f74:	4852      	ldr	r0, [pc, #328]	; (80150c0 <_svfiprintf_r+0x1ec>)
 8014f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f7a:	f000 fa41 	bl	8015400 <memchr>
 8014f7e:	9a04      	ldr	r2, [sp, #16]
 8014f80:	b9d8      	cbnz	r0, 8014fba <_svfiprintf_r+0xe6>
 8014f82:	06d0      	lsls	r0, r2, #27
 8014f84:	bf44      	itt	mi
 8014f86:	2320      	movmi	r3, #32
 8014f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f8c:	0711      	lsls	r1, r2, #28
 8014f8e:	bf44      	itt	mi
 8014f90:	232b      	movmi	r3, #43	; 0x2b
 8014f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f96:	f89a 3000 	ldrb.w	r3, [sl]
 8014f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8014f9c:	d015      	beq.n	8014fca <_svfiprintf_r+0xf6>
 8014f9e:	9a07      	ldr	r2, [sp, #28]
 8014fa0:	4654      	mov	r4, sl
 8014fa2:	2000      	movs	r0, #0
 8014fa4:	f04f 0c0a 	mov.w	ip, #10
 8014fa8:	4621      	mov	r1, r4
 8014faa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014fae:	3b30      	subs	r3, #48	; 0x30
 8014fb0:	2b09      	cmp	r3, #9
 8014fb2:	d94e      	bls.n	8015052 <_svfiprintf_r+0x17e>
 8014fb4:	b1b0      	cbz	r0, 8014fe4 <_svfiprintf_r+0x110>
 8014fb6:	9207      	str	r2, [sp, #28]
 8014fb8:	e014      	b.n	8014fe4 <_svfiprintf_r+0x110>
 8014fba:	eba0 0308 	sub.w	r3, r0, r8
 8014fbe:	46a2      	mov	sl, r4
 8014fc0:	fa09 f303 	lsl.w	r3, r9, r3
 8014fc4:	4313      	orrs	r3, r2
 8014fc6:	9304      	str	r3, [sp, #16]
 8014fc8:	e7d2      	b.n	8014f70 <_svfiprintf_r+0x9c>
 8014fca:	9b03      	ldr	r3, [sp, #12]
 8014fcc:	1d19      	adds	r1, r3, #4
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	9103      	str	r1, [sp, #12]
 8014fd4:	bfbb      	ittet	lt
 8014fd6:	425b      	neglt	r3, r3
 8014fd8:	f042 0202 	orrlt.w	r2, r2, #2
 8014fdc:	9307      	strge	r3, [sp, #28]
 8014fde:	9307      	strlt	r3, [sp, #28]
 8014fe0:	bfb8      	it	lt
 8014fe2:	9204      	strlt	r2, [sp, #16]
 8014fe4:	7823      	ldrb	r3, [r4, #0]
 8014fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8014fe8:	d10c      	bne.n	8015004 <_svfiprintf_r+0x130>
 8014fea:	7863      	ldrb	r3, [r4, #1]
 8014fec:	2b2a      	cmp	r3, #42	; 0x2a
 8014fee:	d135      	bne.n	801505c <_svfiprintf_r+0x188>
 8014ff0:	9b03      	ldr	r3, [sp, #12]
 8014ff2:	3402      	adds	r4, #2
 8014ff4:	1d1a      	adds	r2, r3, #4
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	9203      	str	r2, [sp, #12]
 8014ffc:	bfb8      	it	lt
 8014ffe:	f04f 33ff 	movlt.w	r3, #4294967295
 8015002:	9305      	str	r3, [sp, #20]
 8015004:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80150d0 <_svfiprintf_r+0x1fc>
 8015008:	2203      	movs	r2, #3
 801500a:	7821      	ldrb	r1, [r4, #0]
 801500c:	4650      	mov	r0, sl
 801500e:	f000 f9f7 	bl	8015400 <memchr>
 8015012:	b140      	cbz	r0, 8015026 <_svfiprintf_r+0x152>
 8015014:	2340      	movs	r3, #64	; 0x40
 8015016:	eba0 000a 	sub.w	r0, r0, sl
 801501a:	3401      	adds	r4, #1
 801501c:	fa03 f000 	lsl.w	r0, r3, r0
 8015020:	9b04      	ldr	r3, [sp, #16]
 8015022:	4303      	orrs	r3, r0
 8015024:	9304      	str	r3, [sp, #16]
 8015026:	f814 1b01 	ldrb.w	r1, [r4], #1
 801502a:	2206      	movs	r2, #6
 801502c:	4825      	ldr	r0, [pc, #148]	; (80150c4 <_svfiprintf_r+0x1f0>)
 801502e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015032:	f000 f9e5 	bl	8015400 <memchr>
 8015036:	2800      	cmp	r0, #0
 8015038:	d038      	beq.n	80150ac <_svfiprintf_r+0x1d8>
 801503a:	4b23      	ldr	r3, [pc, #140]	; (80150c8 <_svfiprintf_r+0x1f4>)
 801503c:	bb1b      	cbnz	r3, 8015086 <_svfiprintf_r+0x1b2>
 801503e:	9b03      	ldr	r3, [sp, #12]
 8015040:	3307      	adds	r3, #7
 8015042:	f023 0307 	bic.w	r3, r3, #7
 8015046:	3308      	adds	r3, #8
 8015048:	9303      	str	r3, [sp, #12]
 801504a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801504c:	4433      	add	r3, r6
 801504e:	9309      	str	r3, [sp, #36]	; 0x24
 8015050:	e767      	b.n	8014f22 <_svfiprintf_r+0x4e>
 8015052:	fb0c 3202 	mla	r2, ip, r2, r3
 8015056:	460c      	mov	r4, r1
 8015058:	2001      	movs	r0, #1
 801505a:	e7a5      	b.n	8014fa8 <_svfiprintf_r+0xd4>
 801505c:	2300      	movs	r3, #0
 801505e:	3401      	adds	r4, #1
 8015060:	f04f 0c0a 	mov.w	ip, #10
 8015064:	4619      	mov	r1, r3
 8015066:	9305      	str	r3, [sp, #20]
 8015068:	4620      	mov	r0, r4
 801506a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801506e:	3a30      	subs	r2, #48	; 0x30
 8015070:	2a09      	cmp	r2, #9
 8015072:	d903      	bls.n	801507c <_svfiprintf_r+0x1a8>
 8015074:	2b00      	cmp	r3, #0
 8015076:	d0c5      	beq.n	8015004 <_svfiprintf_r+0x130>
 8015078:	9105      	str	r1, [sp, #20]
 801507a:	e7c3      	b.n	8015004 <_svfiprintf_r+0x130>
 801507c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015080:	4604      	mov	r4, r0
 8015082:	2301      	movs	r3, #1
 8015084:	e7f0      	b.n	8015068 <_svfiprintf_r+0x194>
 8015086:	ab03      	add	r3, sp, #12
 8015088:	462a      	mov	r2, r5
 801508a:	a904      	add	r1, sp, #16
 801508c:	4638      	mov	r0, r7
 801508e:	9300      	str	r3, [sp, #0]
 8015090:	4b0e      	ldr	r3, [pc, #56]	; (80150cc <_svfiprintf_r+0x1f8>)
 8015092:	e000      	b.n	8015096 <_svfiprintf_r+0x1c2>
 8015094:	bf00      	nop
 8015096:	1c42      	adds	r2, r0, #1
 8015098:	4606      	mov	r6, r0
 801509a:	d1d6      	bne.n	801504a <_svfiprintf_r+0x176>
 801509c:	89ab      	ldrh	r3, [r5, #12]
 801509e:	065b      	lsls	r3, r3, #25
 80150a0:	f53f af2c 	bmi.w	8014efc <_svfiprintf_r+0x28>
 80150a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150a6:	b01d      	add	sp, #116	; 0x74
 80150a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ac:	ab03      	add	r3, sp, #12
 80150ae:	462a      	mov	r2, r5
 80150b0:	a904      	add	r1, sp, #16
 80150b2:	4638      	mov	r0, r7
 80150b4:	9300      	str	r3, [sp, #0]
 80150b6:	4b05      	ldr	r3, [pc, #20]	; (80150cc <_svfiprintf_r+0x1f8>)
 80150b8:	f000 f87c 	bl	80151b4 <_printf_i>
 80150bc:	e7eb      	b.n	8015096 <_svfiprintf_r+0x1c2>
 80150be:	bf00      	nop
 80150c0:	08015b79 	.word	0x08015b79
 80150c4:	08015b83 	.word	0x08015b83
 80150c8:	00000000 	.word	0x00000000
 80150cc:	08014e1d 	.word	0x08014e1d
 80150d0:	08015b7f 	.word	0x08015b7f

080150d4 <_printf_common>:
 80150d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150d8:	4616      	mov	r6, r2
 80150da:	4699      	mov	r9, r3
 80150dc:	688a      	ldr	r2, [r1, #8]
 80150de:	4607      	mov	r7, r0
 80150e0:	690b      	ldr	r3, [r1, #16]
 80150e2:	460c      	mov	r4, r1
 80150e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80150e8:	4293      	cmp	r3, r2
 80150ea:	bfb8      	it	lt
 80150ec:	4613      	movlt	r3, r2
 80150ee:	6033      	str	r3, [r6, #0]
 80150f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80150f4:	b10a      	cbz	r2, 80150fa <_printf_common+0x26>
 80150f6:	3301      	adds	r3, #1
 80150f8:	6033      	str	r3, [r6, #0]
 80150fa:	6823      	ldr	r3, [r4, #0]
 80150fc:	0699      	lsls	r1, r3, #26
 80150fe:	bf42      	ittt	mi
 8015100:	6833      	ldrmi	r3, [r6, #0]
 8015102:	3302      	addmi	r3, #2
 8015104:	6033      	strmi	r3, [r6, #0]
 8015106:	6825      	ldr	r5, [r4, #0]
 8015108:	f015 0506 	ands.w	r5, r5, #6
 801510c:	d106      	bne.n	801511c <_printf_common+0x48>
 801510e:	f104 0a19 	add.w	sl, r4, #25
 8015112:	68e3      	ldr	r3, [r4, #12]
 8015114:	6832      	ldr	r2, [r6, #0]
 8015116:	1a9b      	subs	r3, r3, r2
 8015118:	42ab      	cmp	r3, r5
 801511a:	dc29      	bgt.n	8015170 <_printf_common+0x9c>
 801511c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015120:	1e13      	subs	r3, r2, #0
 8015122:	6822      	ldr	r2, [r4, #0]
 8015124:	bf18      	it	ne
 8015126:	2301      	movne	r3, #1
 8015128:	0692      	lsls	r2, r2, #26
 801512a:	d42e      	bmi.n	801518a <_printf_common+0xb6>
 801512c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015130:	4649      	mov	r1, r9
 8015132:	4638      	mov	r0, r7
 8015134:	47c0      	blx	r8
 8015136:	3001      	adds	r0, #1
 8015138:	d021      	beq.n	801517e <_printf_common+0xaa>
 801513a:	6823      	ldr	r3, [r4, #0]
 801513c:	341a      	adds	r4, #26
 801513e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8015142:	f003 0306 	and.w	r3, r3, #6
 8015146:	6832      	ldr	r2, [r6, #0]
 8015148:	2600      	movs	r6, #0
 801514a:	2b04      	cmp	r3, #4
 801514c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8015150:	bf08      	it	eq
 8015152:	1aad      	subeq	r5, r5, r2
 8015154:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8015158:	bf14      	ite	ne
 801515a:	2500      	movne	r5, #0
 801515c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015160:	4293      	cmp	r3, r2
 8015162:	bfc4      	itt	gt
 8015164:	1a9b      	subgt	r3, r3, r2
 8015166:	18ed      	addgt	r5, r5, r3
 8015168:	42b5      	cmp	r5, r6
 801516a:	d11a      	bne.n	80151a2 <_printf_common+0xce>
 801516c:	2000      	movs	r0, #0
 801516e:	e008      	b.n	8015182 <_printf_common+0xae>
 8015170:	2301      	movs	r3, #1
 8015172:	4652      	mov	r2, sl
 8015174:	4649      	mov	r1, r9
 8015176:	4638      	mov	r0, r7
 8015178:	47c0      	blx	r8
 801517a:	3001      	adds	r0, #1
 801517c:	d103      	bne.n	8015186 <_printf_common+0xb2>
 801517e:	f04f 30ff 	mov.w	r0, #4294967295
 8015182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015186:	3501      	adds	r5, #1
 8015188:	e7c3      	b.n	8015112 <_printf_common+0x3e>
 801518a:	18e1      	adds	r1, r4, r3
 801518c:	1c5a      	adds	r2, r3, #1
 801518e:	2030      	movs	r0, #48	; 0x30
 8015190:	3302      	adds	r3, #2
 8015192:	4422      	add	r2, r4
 8015194:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801519c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80151a0:	e7c4      	b.n	801512c <_printf_common+0x58>
 80151a2:	2301      	movs	r3, #1
 80151a4:	4622      	mov	r2, r4
 80151a6:	4649      	mov	r1, r9
 80151a8:	4638      	mov	r0, r7
 80151aa:	47c0      	blx	r8
 80151ac:	3001      	adds	r0, #1
 80151ae:	d0e6      	beq.n	801517e <_printf_common+0xaa>
 80151b0:	3601      	adds	r6, #1
 80151b2:	e7d9      	b.n	8015168 <_printf_common+0x94>

080151b4 <_printf_i>:
 80151b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80151b8:	7e0f      	ldrb	r7, [r1, #24]
 80151ba:	4691      	mov	r9, r2
 80151bc:	4680      	mov	r8, r0
 80151be:	460c      	mov	r4, r1
 80151c0:	2f78      	cmp	r7, #120	; 0x78
 80151c2:	469a      	mov	sl, r3
 80151c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80151c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80151ca:	d807      	bhi.n	80151dc <_printf_i+0x28>
 80151cc:	2f62      	cmp	r7, #98	; 0x62
 80151ce:	d80a      	bhi.n	80151e6 <_printf_i+0x32>
 80151d0:	2f00      	cmp	r7, #0
 80151d2:	f000 80d8 	beq.w	8015386 <_printf_i+0x1d2>
 80151d6:	2f58      	cmp	r7, #88	; 0x58
 80151d8:	f000 80a3 	beq.w	8015322 <_printf_i+0x16e>
 80151dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80151e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80151e4:	e03a      	b.n	801525c <_printf_i+0xa8>
 80151e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80151ea:	2b15      	cmp	r3, #21
 80151ec:	d8f6      	bhi.n	80151dc <_printf_i+0x28>
 80151ee:	a101      	add	r1, pc, #4	; (adr r1, 80151f4 <_printf_i+0x40>)
 80151f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80151f4:	0801524d 	.word	0x0801524d
 80151f8:	08015261 	.word	0x08015261
 80151fc:	080151dd 	.word	0x080151dd
 8015200:	080151dd 	.word	0x080151dd
 8015204:	080151dd 	.word	0x080151dd
 8015208:	080151dd 	.word	0x080151dd
 801520c:	08015261 	.word	0x08015261
 8015210:	080151dd 	.word	0x080151dd
 8015214:	080151dd 	.word	0x080151dd
 8015218:	080151dd 	.word	0x080151dd
 801521c:	080151dd 	.word	0x080151dd
 8015220:	0801536d 	.word	0x0801536d
 8015224:	08015291 	.word	0x08015291
 8015228:	0801534f 	.word	0x0801534f
 801522c:	080151dd 	.word	0x080151dd
 8015230:	080151dd 	.word	0x080151dd
 8015234:	0801538f 	.word	0x0801538f
 8015238:	080151dd 	.word	0x080151dd
 801523c:	08015291 	.word	0x08015291
 8015240:	080151dd 	.word	0x080151dd
 8015244:	080151dd 	.word	0x080151dd
 8015248:	08015357 	.word	0x08015357
 801524c:	682b      	ldr	r3, [r5, #0]
 801524e:	1d1a      	adds	r2, r3, #4
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	602a      	str	r2, [r5, #0]
 8015254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801525c:	2301      	movs	r3, #1
 801525e:	e0a3      	b.n	80153a8 <_printf_i+0x1f4>
 8015260:	6820      	ldr	r0, [r4, #0]
 8015262:	6829      	ldr	r1, [r5, #0]
 8015264:	0606      	lsls	r6, r0, #24
 8015266:	f101 0304 	add.w	r3, r1, #4
 801526a:	d50a      	bpl.n	8015282 <_printf_i+0xce>
 801526c:	680e      	ldr	r6, [r1, #0]
 801526e:	602b      	str	r3, [r5, #0]
 8015270:	2e00      	cmp	r6, #0
 8015272:	da03      	bge.n	801527c <_printf_i+0xc8>
 8015274:	232d      	movs	r3, #45	; 0x2d
 8015276:	4276      	negs	r6, r6
 8015278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801527c:	485e      	ldr	r0, [pc, #376]	; (80153f8 <_printf_i+0x244>)
 801527e:	230a      	movs	r3, #10
 8015280:	e019      	b.n	80152b6 <_printf_i+0x102>
 8015282:	680e      	ldr	r6, [r1, #0]
 8015284:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015288:	602b      	str	r3, [r5, #0]
 801528a:	bf18      	it	ne
 801528c:	b236      	sxthne	r6, r6
 801528e:	e7ef      	b.n	8015270 <_printf_i+0xbc>
 8015290:	682b      	ldr	r3, [r5, #0]
 8015292:	6820      	ldr	r0, [r4, #0]
 8015294:	1d19      	adds	r1, r3, #4
 8015296:	6029      	str	r1, [r5, #0]
 8015298:	0601      	lsls	r1, r0, #24
 801529a:	d501      	bpl.n	80152a0 <_printf_i+0xec>
 801529c:	681e      	ldr	r6, [r3, #0]
 801529e:	e002      	b.n	80152a6 <_printf_i+0xf2>
 80152a0:	0646      	lsls	r6, r0, #25
 80152a2:	d5fb      	bpl.n	801529c <_printf_i+0xe8>
 80152a4:	881e      	ldrh	r6, [r3, #0]
 80152a6:	2f6f      	cmp	r7, #111	; 0x6f
 80152a8:	4853      	ldr	r0, [pc, #332]	; (80153f8 <_printf_i+0x244>)
 80152aa:	bf0c      	ite	eq
 80152ac:	2308      	moveq	r3, #8
 80152ae:	230a      	movne	r3, #10
 80152b0:	2100      	movs	r1, #0
 80152b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80152b6:	6865      	ldr	r5, [r4, #4]
 80152b8:	2d00      	cmp	r5, #0
 80152ba:	60a5      	str	r5, [r4, #8]
 80152bc:	bfa2      	ittt	ge
 80152be:	6821      	ldrge	r1, [r4, #0]
 80152c0:	f021 0104 	bicge.w	r1, r1, #4
 80152c4:	6021      	strge	r1, [r4, #0]
 80152c6:	b90e      	cbnz	r6, 80152cc <_printf_i+0x118>
 80152c8:	2d00      	cmp	r5, #0
 80152ca:	d04d      	beq.n	8015368 <_printf_i+0x1b4>
 80152cc:	4615      	mov	r5, r2
 80152ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80152d2:	fb03 6711 	mls	r7, r3, r1, r6
 80152d6:	5dc7      	ldrb	r7, [r0, r7]
 80152d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80152dc:	4637      	mov	r7, r6
 80152de:	460e      	mov	r6, r1
 80152e0:	42bb      	cmp	r3, r7
 80152e2:	d9f4      	bls.n	80152ce <_printf_i+0x11a>
 80152e4:	2b08      	cmp	r3, #8
 80152e6:	d10b      	bne.n	8015300 <_printf_i+0x14c>
 80152e8:	6823      	ldr	r3, [r4, #0]
 80152ea:	07de      	lsls	r6, r3, #31
 80152ec:	d508      	bpl.n	8015300 <_printf_i+0x14c>
 80152ee:	6923      	ldr	r3, [r4, #16]
 80152f0:	6861      	ldr	r1, [r4, #4]
 80152f2:	4299      	cmp	r1, r3
 80152f4:	bfde      	ittt	le
 80152f6:	2330      	movle	r3, #48	; 0x30
 80152f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80152fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015300:	1b52      	subs	r2, r2, r5
 8015302:	6122      	str	r2, [r4, #16]
 8015304:	464b      	mov	r3, r9
 8015306:	aa03      	add	r2, sp, #12
 8015308:	4621      	mov	r1, r4
 801530a:	4640      	mov	r0, r8
 801530c:	f8cd a000 	str.w	sl, [sp]
 8015310:	f7ff fee0 	bl	80150d4 <_printf_common>
 8015314:	3001      	adds	r0, #1
 8015316:	d14c      	bne.n	80153b2 <_printf_i+0x1fe>
 8015318:	f04f 30ff 	mov.w	r0, #4294967295
 801531c:	b004      	add	sp, #16
 801531e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015322:	4835      	ldr	r0, [pc, #212]	; (80153f8 <_printf_i+0x244>)
 8015324:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015328:	6829      	ldr	r1, [r5, #0]
 801532a:	6823      	ldr	r3, [r4, #0]
 801532c:	f851 6b04 	ldr.w	r6, [r1], #4
 8015330:	6029      	str	r1, [r5, #0]
 8015332:	061d      	lsls	r5, r3, #24
 8015334:	d514      	bpl.n	8015360 <_printf_i+0x1ac>
 8015336:	07df      	lsls	r7, r3, #31
 8015338:	bf44      	itt	mi
 801533a:	f043 0320 	orrmi.w	r3, r3, #32
 801533e:	6023      	strmi	r3, [r4, #0]
 8015340:	b91e      	cbnz	r6, 801534a <_printf_i+0x196>
 8015342:	6823      	ldr	r3, [r4, #0]
 8015344:	f023 0320 	bic.w	r3, r3, #32
 8015348:	6023      	str	r3, [r4, #0]
 801534a:	2310      	movs	r3, #16
 801534c:	e7b0      	b.n	80152b0 <_printf_i+0xfc>
 801534e:	6823      	ldr	r3, [r4, #0]
 8015350:	f043 0320 	orr.w	r3, r3, #32
 8015354:	6023      	str	r3, [r4, #0]
 8015356:	2378      	movs	r3, #120	; 0x78
 8015358:	4828      	ldr	r0, [pc, #160]	; (80153fc <_printf_i+0x248>)
 801535a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801535e:	e7e3      	b.n	8015328 <_printf_i+0x174>
 8015360:	0659      	lsls	r1, r3, #25
 8015362:	bf48      	it	mi
 8015364:	b2b6      	uxthmi	r6, r6
 8015366:	e7e6      	b.n	8015336 <_printf_i+0x182>
 8015368:	4615      	mov	r5, r2
 801536a:	e7bb      	b.n	80152e4 <_printf_i+0x130>
 801536c:	682b      	ldr	r3, [r5, #0]
 801536e:	6826      	ldr	r6, [r4, #0]
 8015370:	1d18      	adds	r0, r3, #4
 8015372:	6961      	ldr	r1, [r4, #20]
 8015374:	6028      	str	r0, [r5, #0]
 8015376:	0635      	lsls	r5, r6, #24
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	d501      	bpl.n	8015380 <_printf_i+0x1cc>
 801537c:	6019      	str	r1, [r3, #0]
 801537e:	e002      	b.n	8015386 <_printf_i+0x1d2>
 8015380:	0670      	lsls	r0, r6, #25
 8015382:	d5fb      	bpl.n	801537c <_printf_i+0x1c8>
 8015384:	8019      	strh	r1, [r3, #0]
 8015386:	2300      	movs	r3, #0
 8015388:	4615      	mov	r5, r2
 801538a:	6123      	str	r3, [r4, #16]
 801538c:	e7ba      	b.n	8015304 <_printf_i+0x150>
 801538e:	682b      	ldr	r3, [r5, #0]
 8015390:	2100      	movs	r1, #0
 8015392:	1d1a      	adds	r2, r3, #4
 8015394:	602a      	str	r2, [r5, #0]
 8015396:	681d      	ldr	r5, [r3, #0]
 8015398:	6862      	ldr	r2, [r4, #4]
 801539a:	4628      	mov	r0, r5
 801539c:	f000 f830 	bl	8015400 <memchr>
 80153a0:	b108      	cbz	r0, 80153a6 <_printf_i+0x1f2>
 80153a2:	1b40      	subs	r0, r0, r5
 80153a4:	6060      	str	r0, [r4, #4]
 80153a6:	6863      	ldr	r3, [r4, #4]
 80153a8:	6123      	str	r3, [r4, #16]
 80153aa:	2300      	movs	r3, #0
 80153ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80153b0:	e7a8      	b.n	8015304 <_printf_i+0x150>
 80153b2:	6923      	ldr	r3, [r4, #16]
 80153b4:	462a      	mov	r2, r5
 80153b6:	4649      	mov	r1, r9
 80153b8:	4640      	mov	r0, r8
 80153ba:	47d0      	blx	sl
 80153bc:	3001      	adds	r0, #1
 80153be:	d0ab      	beq.n	8015318 <_printf_i+0x164>
 80153c0:	6823      	ldr	r3, [r4, #0]
 80153c2:	079b      	lsls	r3, r3, #30
 80153c4:	d413      	bmi.n	80153ee <_printf_i+0x23a>
 80153c6:	68e0      	ldr	r0, [r4, #12]
 80153c8:	9b03      	ldr	r3, [sp, #12]
 80153ca:	4298      	cmp	r0, r3
 80153cc:	bfb8      	it	lt
 80153ce:	4618      	movlt	r0, r3
 80153d0:	e7a4      	b.n	801531c <_printf_i+0x168>
 80153d2:	2301      	movs	r3, #1
 80153d4:	4632      	mov	r2, r6
 80153d6:	4649      	mov	r1, r9
 80153d8:	4640      	mov	r0, r8
 80153da:	47d0      	blx	sl
 80153dc:	3001      	adds	r0, #1
 80153de:	d09b      	beq.n	8015318 <_printf_i+0x164>
 80153e0:	3501      	adds	r5, #1
 80153e2:	68e3      	ldr	r3, [r4, #12]
 80153e4:	9903      	ldr	r1, [sp, #12]
 80153e6:	1a5b      	subs	r3, r3, r1
 80153e8:	42ab      	cmp	r3, r5
 80153ea:	dcf2      	bgt.n	80153d2 <_printf_i+0x21e>
 80153ec:	e7eb      	b.n	80153c6 <_printf_i+0x212>
 80153ee:	2500      	movs	r5, #0
 80153f0:	f104 0619 	add.w	r6, r4, #25
 80153f4:	e7f5      	b.n	80153e2 <_printf_i+0x22e>
 80153f6:	bf00      	nop
 80153f8:	08015b8a 	.word	0x08015b8a
 80153fc:	08015b9b 	.word	0x08015b9b

08015400 <memchr>:
 8015400:	b2c9      	uxtb	r1, r1
 8015402:	4402      	add	r2, r0
 8015404:	b510      	push	{r4, lr}
 8015406:	4290      	cmp	r0, r2
 8015408:	4603      	mov	r3, r0
 801540a:	d101      	bne.n	8015410 <memchr+0x10>
 801540c:	2300      	movs	r3, #0
 801540e:	e003      	b.n	8015418 <memchr+0x18>
 8015410:	781c      	ldrb	r4, [r3, #0]
 8015412:	3001      	adds	r0, #1
 8015414:	428c      	cmp	r4, r1
 8015416:	d1f6      	bne.n	8015406 <memchr+0x6>
 8015418:	4618      	mov	r0, r3
 801541a:	bd10      	pop	{r4, pc}

0801541c <memcpy>:
 801541c:	440a      	add	r2, r1
 801541e:	1e43      	subs	r3, r0, #1
 8015420:	4291      	cmp	r1, r2
 8015422:	d100      	bne.n	8015426 <memcpy+0xa>
 8015424:	4770      	bx	lr
 8015426:	b510      	push	{r4, lr}
 8015428:	f811 4b01 	ldrb.w	r4, [r1], #1
 801542c:	4291      	cmp	r1, r2
 801542e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015432:	d1f9      	bne.n	8015428 <memcpy+0xc>
 8015434:	bd10      	pop	{r4, pc}

08015436 <memmove>:
 8015436:	4288      	cmp	r0, r1
 8015438:	b510      	push	{r4, lr}
 801543a:	eb01 0402 	add.w	r4, r1, r2
 801543e:	d902      	bls.n	8015446 <memmove+0x10>
 8015440:	4284      	cmp	r4, r0
 8015442:	4623      	mov	r3, r4
 8015444:	d807      	bhi.n	8015456 <memmove+0x20>
 8015446:	1e43      	subs	r3, r0, #1
 8015448:	42a1      	cmp	r1, r4
 801544a:	d008      	beq.n	801545e <memmove+0x28>
 801544c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015450:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015454:	e7f8      	b.n	8015448 <memmove+0x12>
 8015456:	4402      	add	r2, r0
 8015458:	4601      	mov	r1, r0
 801545a:	428a      	cmp	r2, r1
 801545c:	d100      	bne.n	8015460 <memmove+0x2a>
 801545e:	bd10      	pop	{r4, pc}
 8015460:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015464:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015468:	e7f7      	b.n	801545a <memmove+0x24>
	...

0801546c <_free_r>:
 801546c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801546e:	2900      	cmp	r1, #0
 8015470:	d043      	beq.n	80154fa <_free_r+0x8e>
 8015472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015476:	1f0c      	subs	r4, r1, #4
 8015478:	9001      	str	r0, [sp, #4]
 801547a:	2b00      	cmp	r3, #0
 801547c:	bfb8      	it	lt
 801547e:	18e4      	addlt	r4, r4, r3
 8015480:	f000 f914 	bl	80156ac <__malloc_lock>
 8015484:	4a1e      	ldr	r2, [pc, #120]	; (8015500 <_free_r+0x94>)
 8015486:	9801      	ldr	r0, [sp, #4]
 8015488:	6813      	ldr	r3, [r2, #0]
 801548a:	b933      	cbnz	r3, 801549a <_free_r+0x2e>
 801548c:	6063      	str	r3, [r4, #4]
 801548e:	6014      	str	r4, [r2, #0]
 8015490:	b003      	add	sp, #12
 8015492:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015496:	f000 b90f 	b.w	80156b8 <__malloc_unlock>
 801549a:	42a3      	cmp	r3, r4
 801549c:	d908      	bls.n	80154b0 <_free_r+0x44>
 801549e:	6825      	ldr	r5, [r4, #0]
 80154a0:	1961      	adds	r1, r4, r5
 80154a2:	428b      	cmp	r3, r1
 80154a4:	bf01      	itttt	eq
 80154a6:	6819      	ldreq	r1, [r3, #0]
 80154a8:	685b      	ldreq	r3, [r3, #4]
 80154aa:	1949      	addeq	r1, r1, r5
 80154ac:	6021      	streq	r1, [r4, #0]
 80154ae:	e7ed      	b.n	801548c <_free_r+0x20>
 80154b0:	461a      	mov	r2, r3
 80154b2:	685b      	ldr	r3, [r3, #4]
 80154b4:	b10b      	cbz	r3, 80154ba <_free_r+0x4e>
 80154b6:	42a3      	cmp	r3, r4
 80154b8:	d9fa      	bls.n	80154b0 <_free_r+0x44>
 80154ba:	6811      	ldr	r1, [r2, #0]
 80154bc:	1855      	adds	r5, r2, r1
 80154be:	42a5      	cmp	r5, r4
 80154c0:	d10b      	bne.n	80154da <_free_r+0x6e>
 80154c2:	6824      	ldr	r4, [r4, #0]
 80154c4:	4421      	add	r1, r4
 80154c6:	1854      	adds	r4, r2, r1
 80154c8:	6011      	str	r1, [r2, #0]
 80154ca:	42a3      	cmp	r3, r4
 80154cc:	d1e0      	bne.n	8015490 <_free_r+0x24>
 80154ce:	681c      	ldr	r4, [r3, #0]
 80154d0:	685b      	ldr	r3, [r3, #4]
 80154d2:	4421      	add	r1, r4
 80154d4:	6053      	str	r3, [r2, #4]
 80154d6:	6011      	str	r1, [r2, #0]
 80154d8:	e7da      	b.n	8015490 <_free_r+0x24>
 80154da:	d902      	bls.n	80154e2 <_free_r+0x76>
 80154dc:	230c      	movs	r3, #12
 80154de:	6003      	str	r3, [r0, #0]
 80154e0:	e7d6      	b.n	8015490 <_free_r+0x24>
 80154e2:	6825      	ldr	r5, [r4, #0]
 80154e4:	1961      	adds	r1, r4, r5
 80154e6:	428b      	cmp	r3, r1
 80154e8:	bf02      	ittt	eq
 80154ea:	6819      	ldreq	r1, [r3, #0]
 80154ec:	685b      	ldreq	r3, [r3, #4]
 80154ee:	1949      	addeq	r1, r1, r5
 80154f0:	6063      	str	r3, [r4, #4]
 80154f2:	bf08      	it	eq
 80154f4:	6021      	streq	r1, [r4, #0]
 80154f6:	6054      	str	r4, [r2, #4]
 80154f8:	e7ca      	b.n	8015490 <_free_r+0x24>
 80154fa:	b003      	add	sp, #12
 80154fc:	bd30      	pop	{r4, r5, pc}
 80154fe:	bf00      	nop
 8015500:	20001e54 	.word	0x20001e54

08015504 <sbrk_aligned>:
 8015504:	b570      	push	{r4, r5, r6, lr}
 8015506:	4e0e      	ldr	r6, [pc, #56]	; (8015540 <sbrk_aligned+0x3c>)
 8015508:	460c      	mov	r4, r1
 801550a:	4605      	mov	r5, r0
 801550c:	6831      	ldr	r1, [r6, #0]
 801550e:	b911      	cbnz	r1, 8015516 <sbrk_aligned+0x12>
 8015510:	f000 f8bc 	bl	801568c <_sbrk_r>
 8015514:	6030      	str	r0, [r6, #0]
 8015516:	4621      	mov	r1, r4
 8015518:	4628      	mov	r0, r5
 801551a:	f000 f8b7 	bl	801568c <_sbrk_r>
 801551e:	1c43      	adds	r3, r0, #1
 8015520:	d00a      	beq.n	8015538 <sbrk_aligned+0x34>
 8015522:	1cc4      	adds	r4, r0, #3
 8015524:	f024 0403 	bic.w	r4, r4, #3
 8015528:	42a0      	cmp	r0, r4
 801552a:	d007      	beq.n	801553c <sbrk_aligned+0x38>
 801552c:	1a21      	subs	r1, r4, r0
 801552e:	4628      	mov	r0, r5
 8015530:	f000 f8ac 	bl	801568c <_sbrk_r>
 8015534:	3001      	adds	r0, #1
 8015536:	d101      	bne.n	801553c <sbrk_aligned+0x38>
 8015538:	f04f 34ff 	mov.w	r4, #4294967295
 801553c:	4620      	mov	r0, r4
 801553e:	bd70      	pop	{r4, r5, r6, pc}
 8015540:	20001e58 	.word	0x20001e58

08015544 <_malloc_r>:
 8015544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015548:	1ccd      	adds	r5, r1, #3
 801554a:	4607      	mov	r7, r0
 801554c:	f025 0503 	bic.w	r5, r5, #3
 8015550:	3508      	adds	r5, #8
 8015552:	2d0c      	cmp	r5, #12
 8015554:	bf38      	it	cc
 8015556:	250c      	movcc	r5, #12
 8015558:	2d00      	cmp	r5, #0
 801555a:	db01      	blt.n	8015560 <_malloc_r+0x1c>
 801555c:	42a9      	cmp	r1, r5
 801555e:	d905      	bls.n	801556c <_malloc_r+0x28>
 8015560:	230c      	movs	r3, #12
 8015562:	2600      	movs	r6, #0
 8015564:	603b      	str	r3, [r7, #0]
 8015566:	4630      	mov	r0, r6
 8015568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801556c:	4e2e      	ldr	r6, [pc, #184]	; (8015628 <_malloc_r+0xe4>)
 801556e:	f000 f89d 	bl	80156ac <__malloc_lock>
 8015572:	6833      	ldr	r3, [r6, #0]
 8015574:	461c      	mov	r4, r3
 8015576:	bb34      	cbnz	r4, 80155c6 <_malloc_r+0x82>
 8015578:	4629      	mov	r1, r5
 801557a:	4638      	mov	r0, r7
 801557c:	f7ff ffc2 	bl	8015504 <sbrk_aligned>
 8015580:	1c43      	adds	r3, r0, #1
 8015582:	4604      	mov	r4, r0
 8015584:	d14d      	bne.n	8015622 <_malloc_r+0xde>
 8015586:	6834      	ldr	r4, [r6, #0]
 8015588:	4626      	mov	r6, r4
 801558a:	2e00      	cmp	r6, #0
 801558c:	d140      	bne.n	8015610 <_malloc_r+0xcc>
 801558e:	6823      	ldr	r3, [r4, #0]
 8015590:	4631      	mov	r1, r6
 8015592:	4638      	mov	r0, r7
 8015594:	eb04 0803 	add.w	r8, r4, r3
 8015598:	f000 f878 	bl	801568c <_sbrk_r>
 801559c:	4580      	cmp	r8, r0
 801559e:	d13a      	bne.n	8015616 <_malloc_r+0xd2>
 80155a0:	6821      	ldr	r1, [r4, #0]
 80155a2:	3503      	adds	r5, #3
 80155a4:	4638      	mov	r0, r7
 80155a6:	1a6d      	subs	r5, r5, r1
 80155a8:	f025 0503 	bic.w	r5, r5, #3
 80155ac:	3508      	adds	r5, #8
 80155ae:	2d0c      	cmp	r5, #12
 80155b0:	bf38      	it	cc
 80155b2:	250c      	movcc	r5, #12
 80155b4:	4629      	mov	r1, r5
 80155b6:	f7ff ffa5 	bl	8015504 <sbrk_aligned>
 80155ba:	3001      	adds	r0, #1
 80155bc:	d02b      	beq.n	8015616 <_malloc_r+0xd2>
 80155be:	6823      	ldr	r3, [r4, #0]
 80155c0:	442b      	add	r3, r5
 80155c2:	6023      	str	r3, [r4, #0]
 80155c4:	e00e      	b.n	80155e4 <_malloc_r+0xa0>
 80155c6:	6822      	ldr	r2, [r4, #0]
 80155c8:	1b52      	subs	r2, r2, r5
 80155ca:	d41e      	bmi.n	801560a <_malloc_r+0xc6>
 80155cc:	2a0b      	cmp	r2, #11
 80155ce:	d916      	bls.n	80155fe <_malloc_r+0xba>
 80155d0:	1961      	adds	r1, r4, r5
 80155d2:	42a3      	cmp	r3, r4
 80155d4:	6025      	str	r5, [r4, #0]
 80155d6:	bf18      	it	ne
 80155d8:	6059      	strne	r1, [r3, #4]
 80155da:	6863      	ldr	r3, [r4, #4]
 80155dc:	bf08      	it	eq
 80155de:	6031      	streq	r1, [r6, #0]
 80155e0:	5162      	str	r2, [r4, r5]
 80155e2:	604b      	str	r3, [r1, #4]
 80155e4:	f104 060b 	add.w	r6, r4, #11
 80155e8:	4638      	mov	r0, r7
 80155ea:	f000 f865 	bl	80156b8 <__malloc_unlock>
 80155ee:	1d23      	adds	r3, r4, #4
 80155f0:	f026 0607 	bic.w	r6, r6, #7
 80155f4:	1af2      	subs	r2, r6, r3
 80155f6:	d0b6      	beq.n	8015566 <_malloc_r+0x22>
 80155f8:	1b9b      	subs	r3, r3, r6
 80155fa:	50a3      	str	r3, [r4, r2]
 80155fc:	e7b3      	b.n	8015566 <_malloc_r+0x22>
 80155fe:	6862      	ldr	r2, [r4, #4]
 8015600:	42a3      	cmp	r3, r4
 8015602:	bf0c      	ite	eq
 8015604:	6032      	streq	r2, [r6, #0]
 8015606:	605a      	strne	r2, [r3, #4]
 8015608:	e7ec      	b.n	80155e4 <_malloc_r+0xa0>
 801560a:	4623      	mov	r3, r4
 801560c:	6864      	ldr	r4, [r4, #4]
 801560e:	e7b2      	b.n	8015576 <_malloc_r+0x32>
 8015610:	4634      	mov	r4, r6
 8015612:	6876      	ldr	r6, [r6, #4]
 8015614:	e7b9      	b.n	801558a <_malloc_r+0x46>
 8015616:	230c      	movs	r3, #12
 8015618:	4638      	mov	r0, r7
 801561a:	603b      	str	r3, [r7, #0]
 801561c:	f000 f84c 	bl	80156b8 <__malloc_unlock>
 8015620:	e7a1      	b.n	8015566 <_malloc_r+0x22>
 8015622:	6025      	str	r5, [r4, #0]
 8015624:	e7de      	b.n	80155e4 <_malloc_r+0xa0>
 8015626:	bf00      	nop
 8015628:	20001e54 	.word	0x20001e54

0801562c <_realloc_r>:
 801562c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015630:	4680      	mov	r8, r0
 8015632:	4614      	mov	r4, r2
 8015634:	460e      	mov	r6, r1
 8015636:	b921      	cbnz	r1, 8015642 <_realloc_r+0x16>
 8015638:	4611      	mov	r1, r2
 801563a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801563e:	f7ff bf81 	b.w	8015544 <_malloc_r>
 8015642:	b92a      	cbnz	r2, 8015650 <_realloc_r+0x24>
 8015644:	4625      	mov	r5, r4
 8015646:	f7ff ff11 	bl	801546c <_free_r>
 801564a:	4628      	mov	r0, r5
 801564c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015650:	f000 f838 	bl	80156c4 <_malloc_usable_size_r>
 8015654:	4284      	cmp	r4, r0
 8015656:	4607      	mov	r7, r0
 8015658:	d802      	bhi.n	8015660 <_realloc_r+0x34>
 801565a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801565e:	d812      	bhi.n	8015686 <_realloc_r+0x5a>
 8015660:	4621      	mov	r1, r4
 8015662:	4640      	mov	r0, r8
 8015664:	f7ff ff6e 	bl	8015544 <_malloc_r>
 8015668:	4605      	mov	r5, r0
 801566a:	2800      	cmp	r0, #0
 801566c:	d0ed      	beq.n	801564a <_realloc_r+0x1e>
 801566e:	42bc      	cmp	r4, r7
 8015670:	4622      	mov	r2, r4
 8015672:	4631      	mov	r1, r6
 8015674:	bf28      	it	cs
 8015676:	463a      	movcs	r2, r7
 8015678:	f7ff fed0 	bl	801541c <memcpy>
 801567c:	4631      	mov	r1, r6
 801567e:	4640      	mov	r0, r8
 8015680:	f7ff fef4 	bl	801546c <_free_r>
 8015684:	e7e1      	b.n	801564a <_realloc_r+0x1e>
 8015686:	4635      	mov	r5, r6
 8015688:	e7df      	b.n	801564a <_realloc_r+0x1e>
	...

0801568c <_sbrk_r>:
 801568c:	b538      	push	{r3, r4, r5, lr}
 801568e:	2300      	movs	r3, #0
 8015690:	4d05      	ldr	r5, [pc, #20]	; (80156a8 <_sbrk_r+0x1c>)
 8015692:	4604      	mov	r4, r0
 8015694:	4608      	mov	r0, r1
 8015696:	602b      	str	r3, [r5, #0]
 8015698:	f7ec f88e 	bl	80017b8 <_sbrk>
 801569c:	1c43      	adds	r3, r0, #1
 801569e:	d102      	bne.n	80156a6 <_sbrk_r+0x1a>
 80156a0:	682b      	ldr	r3, [r5, #0]
 80156a2:	b103      	cbz	r3, 80156a6 <_sbrk_r+0x1a>
 80156a4:	6023      	str	r3, [r4, #0]
 80156a6:	bd38      	pop	{r3, r4, r5, pc}
 80156a8:	20001e5c 	.word	0x20001e5c

080156ac <__malloc_lock>:
 80156ac:	4801      	ldr	r0, [pc, #4]	; (80156b4 <__malloc_lock+0x8>)
 80156ae:	f000 b811 	b.w	80156d4 <__retarget_lock_acquire_recursive>
 80156b2:	bf00      	nop
 80156b4:	20001e60 	.word	0x20001e60

080156b8 <__malloc_unlock>:
 80156b8:	4801      	ldr	r0, [pc, #4]	; (80156c0 <__malloc_unlock+0x8>)
 80156ba:	f000 b80c 	b.w	80156d6 <__retarget_lock_release_recursive>
 80156be:	bf00      	nop
 80156c0:	20001e60 	.word	0x20001e60

080156c4 <_malloc_usable_size_r>:
 80156c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156c8:	1f18      	subs	r0, r3, #4
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	bfbc      	itt	lt
 80156ce:	580b      	ldrlt	r3, [r1, r0]
 80156d0:	18c0      	addlt	r0, r0, r3
 80156d2:	4770      	bx	lr

080156d4 <__retarget_lock_acquire_recursive>:
 80156d4:	4770      	bx	lr

080156d6 <__retarget_lock_release_recursive>:
 80156d6:	4770      	bx	lr

080156d8 <_init>:
 80156d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156da:	bf00      	nop
 80156dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156de:	bc08      	pop	{r3}
 80156e0:	469e      	mov	lr, r3
 80156e2:	4770      	bx	lr

080156e4 <_fini>:
 80156e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156e6:	bf00      	nop
 80156e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156ea:	bc08      	pop	{r3}
 80156ec:	469e      	mov	lr, r3
 80156ee:	4770      	bx	lr
